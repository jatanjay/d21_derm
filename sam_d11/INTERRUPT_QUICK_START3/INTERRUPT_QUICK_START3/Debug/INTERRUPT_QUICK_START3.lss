
INTERRUPT_QUICK_START3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002050  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00002050  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  20000004  00002054  00020004  2**2
                  ALLOC
  3 .stack        00000400  200000c8  00002118  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00017c10  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025fa  00000000  00000000  00037c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001968  00000000  00000000  0003a28f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000500  00000000  00000000  0003bbf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000430  00000000  00000000  0003c0f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015672  00000000  00000000  0003c527  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000085eb  00000000  00000000  00051b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00076a2e  00000000  00000000  0005a184  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000fc0  00000000  00000000  000d0bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 04 00 20 b5 1e 00 00 ad 1f 00 00 ad 1f 00 00     ... ............
	...
      2c:	ad 1f 00 00 00 00 00 00 00 00 00 00 ad 1f 00 00     ................
      3c:	ad 1f 00 00 ad 1f 00 00 ad 1f 00 00 ad 1f 00 00     ................
      4c:	ad 1f 00 00 ad 12 00 00 ad 1f 00 00 ad 1f 00 00     ................
      5c:	ad 1f 00 00 ad 1f 00 00 ad 1f 00 00 ad 1f 00 00     ................
      6c:	ad 1f 00 00 ad 1f 00 00 bd 04 00 00 d1 04 00 00     ................
      7c:	ad 1f 00 00 ad 1f 00 00 ad 1f 00 00 ad 1f 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000004 	.word	0x20000004
      ac:	00000000 	.word	0x00000000
      b0:	00002050 	.word	0x00002050

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000008 	.word	0x20000008
      e0:	00002050 	.word	0x00002050
      e4:	00002050 	.word	0x00002050
      e8:	00000000 	.word	0x00000000

000000ec <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
      ec:	b580      	push	{r7, lr}
      ee:	b082      	sub	sp, #8
      f0:	af00      	add	r7, sp, #0
      f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
      f4:	687b      	ldr	r3, [r7, #4]
      f6:	2200      	movs	r2, #0
      f8:	701a      	strb	r2, [r3, #0]
}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	46bd      	mov	sp, r7
      fe:	b002      	add	sp, #8
     100:	bd80      	pop	{r7, pc}
	...

00000104 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     104:	b580      	push	{r7, lr}
     106:	b082      	sub	sp, #8
     108:	af00      	add	r7, sp, #0
     10a:	0002      	movs	r2, r0
     10c:	6039      	str	r1, [r7, #0]
     10e:	1dfb      	adds	r3, r7, #7
     110:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     112:	1dfb      	adds	r3, r7, #7
     114:	781b      	ldrb	r3, [r3, #0]
     116:	2b01      	cmp	r3, #1
     118:	d00a      	beq.n	130 <system_apb_clock_set_mask+0x2c>
     11a:	2b02      	cmp	r3, #2
     11c:	d00f      	beq.n	13e <system_apb_clock_set_mask+0x3a>
     11e:	2b00      	cmp	r3, #0
     120:	d114      	bne.n	14c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     122:	4b0e      	ldr	r3, [pc, #56]	; (15c <system_apb_clock_set_mask+0x58>)
     124:	4a0d      	ldr	r2, [pc, #52]	; (15c <system_apb_clock_set_mask+0x58>)
     126:	6991      	ldr	r1, [r2, #24]
     128:	683a      	ldr	r2, [r7, #0]
     12a:	430a      	orrs	r2, r1
     12c:	619a      	str	r2, [r3, #24]
			break;
     12e:	e00f      	b.n	150 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     130:	4b0a      	ldr	r3, [pc, #40]	; (15c <system_apb_clock_set_mask+0x58>)
     132:	4a0a      	ldr	r2, [pc, #40]	; (15c <system_apb_clock_set_mask+0x58>)
     134:	69d1      	ldr	r1, [r2, #28]
     136:	683a      	ldr	r2, [r7, #0]
     138:	430a      	orrs	r2, r1
     13a:	61da      	str	r2, [r3, #28]
			break;
     13c:	e008      	b.n	150 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     13e:	4b07      	ldr	r3, [pc, #28]	; (15c <system_apb_clock_set_mask+0x58>)
     140:	4a06      	ldr	r2, [pc, #24]	; (15c <system_apb_clock_set_mask+0x58>)
     142:	6a11      	ldr	r1, [r2, #32]
     144:	683a      	ldr	r2, [r7, #0]
     146:	430a      	orrs	r2, r1
     148:	621a      	str	r2, [r3, #32]
			break;
     14a:	e001      	b.n	150 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     14c:	2317      	movs	r3, #23
     14e:	e000      	b.n	152 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     150:	2300      	movs	r3, #0
}
     152:	0018      	movs	r0, r3
     154:	46bd      	mov	sp, r7
     156:	b002      	add	sp, #8
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	40000400 	.word	0x40000400

00000160 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     168:	687b      	ldr	r3, [r7, #4]
     16a:	2280      	movs	r2, #128	; 0x80
     16c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     16e:	687b      	ldr	r3, [r7, #4]
     170:	2200      	movs	r2, #0
     172:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     174:	687b      	ldr	r3, [r7, #4]
     176:	2201      	movs	r2, #1
     178:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     17a:	687b      	ldr	r3, [r7, #4]
     17c:	2200      	movs	r2, #0
     17e:	70da      	strb	r2, [r3, #3]
}
     180:	46c0      	nop			; (mov r8, r8)
     182:	46bd      	mov	sp, r7
     184:	b002      	add	sp, #8
     186:	bd80      	pop	{r7, pc}

00000188 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	0002      	movs	r2, r0
     190:	1dfb      	adds	r3, r7, #7
     192:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     194:	4b06      	ldr	r3, [pc, #24]	; (1b0 <system_interrupt_enable+0x28>)
     196:	1dfa      	adds	r2, r7, #7
     198:	7812      	ldrb	r2, [r2, #0]
     19a:	0011      	movs	r1, r2
     19c:	221f      	movs	r2, #31
     19e:	400a      	ands	r2, r1
     1a0:	2101      	movs	r1, #1
     1a2:	4091      	lsls	r1, r2
     1a4:	000a      	movs	r2, r1
     1a6:	601a      	str	r2, [r3, #0]
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}
     1b0:	e000e100 	.word	0xe000e100

000001b4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b084      	sub	sp, #16
     1b8:	af00      	add	r7, sp, #0
     1ba:	0002      	movs	r2, r0
     1bc:	1dfb      	adds	r3, r7, #7
     1be:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     1c0:	230f      	movs	r3, #15
     1c2:	18fb      	adds	r3, r7, r3
     1c4:	1dfa      	adds	r2, r7, #7
     1c6:	7812      	ldrb	r2, [r2, #0]
     1c8:	0952      	lsrs	r2, r2, #5
     1ca:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1cc:	230f      	movs	r3, #15
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d10c      	bne.n	1f0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1d6:	4b09      	ldr	r3, [pc, #36]	; (1fc <_extint_get_eic_from_channel+0x48>)
     1d8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     1da:	230f      	movs	r3, #15
     1dc:	18fb      	adds	r3, r7, r3
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	009b      	lsls	r3, r3, #2
     1e2:	2210      	movs	r2, #16
     1e4:	4694      	mov	ip, r2
     1e6:	44bc      	add	ip, r7
     1e8:	4463      	add	r3, ip
     1ea:	3b08      	subs	r3, #8
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	e000      	b.n	1f2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     1f0:	2300      	movs	r3, #0
	}
}
     1f2:	0018      	movs	r0, r3
     1f4:	46bd      	mov	sp, r7
     1f6:	b004      	add	sp, #16
     1f8:	bd80      	pop	{r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	40001800 	.word	0x40001800

00000200 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     200:	b580      	push	{r7, lr}
     202:	b082      	sub	sp, #8
     204:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     206:	4b0f      	ldr	r3, [pc, #60]	; (244 <extint_is_syncing+0x44>)
     208:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     20a:	2300      	movs	r3, #0
     20c:	607b      	str	r3, [r7, #4]
     20e:	e011      	b.n	234 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     210:	687b      	ldr	r3, [r7, #4]
     212:	009b      	lsls	r3, r3, #2
     214:	2208      	movs	r2, #8
     216:	4694      	mov	ip, r2
     218:	44bc      	add	ip, r7
     21a:	4463      	add	r3, ip
     21c:	3b08      	subs	r3, #8
     21e:	681b      	ldr	r3, [r3, #0]
     220:	785b      	ldrb	r3, [r3, #1]
     222:	b2db      	uxtb	r3, r3
     224:	b25b      	sxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	da01      	bge.n	22e <extint_is_syncing+0x2e>
			return true;
     22a:	2301      	movs	r3, #1
     22c:	e006      	b.n	23c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     22e:	687b      	ldr	r3, [r7, #4]
     230:	3301      	adds	r3, #1
     232:	607b      	str	r3, [r7, #4]
     234:	687b      	ldr	r3, [r7, #4]
     236:	2b00      	cmp	r3, #0
     238:	d0ea      	beq.n	210 <extint_is_syncing+0x10>
		}
	}
	return false;
     23a:	2300      	movs	r3, #0
}
     23c:	0018      	movs	r0, r3
     23e:	46bd      	mov	sp, r7
     240:	b002      	add	sp, #8
     242:	bd80      	pop	{r7, pc}
     244:	40001800 	.word	0x40001800

00000248 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     248:	b580      	push	{r7, lr}
     24a:	b084      	sub	sp, #16
     24c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     24e:	4b2d      	ldr	r3, [pc, #180]	; (304 <_system_extint_init+0xbc>)
     250:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     252:	2140      	movs	r1, #64	; 0x40
     254:	2000      	movs	r0, #0
     256:	4b2c      	ldr	r3, [pc, #176]	; (308 <_system_extint_init+0xc0>)
     258:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     25a:	003b      	movs	r3, r7
     25c:	0018      	movs	r0, r3
     25e:	4b2b      	ldr	r3, [pc, #172]	; (30c <_system_extint_init+0xc4>)
     260:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     262:	003b      	movs	r3, r7
     264:	2200      	movs	r2, #0
     266:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     268:	003b      	movs	r3, r7
     26a:	0019      	movs	r1, r3
     26c:	2005      	movs	r0, #5
     26e:	4b28      	ldr	r3, [pc, #160]	; (310 <_system_extint_init+0xc8>)
     270:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     272:	2005      	movs	r0, #5
     274:	4b27      	ldr	r3, [pc, #156]	; (314 <_system_extint_init+0xcc>)
     276:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     278:	2300      	movs	r3, #0
     27a:	60fb      	str	r3, [r7, #12]
     27c:	e018      	b.n	2b0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     27e:	68fb      	ldr	r3, [r7, #12]
     280:	009b      	lsls	r3, r3, #2
     282:	2210      	movs	r2, #16
     284:	4694      	mov	ip, r2
     286:	44bc      	add	ip, r7
     288:	4463      	add	r3, ip
     28a:	3b0c      	subs	r3, #12
     28c:	681a      	ldr	r2, [r3, #0]
     28e:	68fb      	ldr	r3, [r7, #12]
     290:	009b      	lsls	r3, r3, #2
     292:	2110      	movs	r1, #16
     294:	468c      	mov	ip, r1
     296:	44bc      	add	ip, r7
     298:	4463      	add	r3, ip
     29a:	3b0c      	subs	r3, #12
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	781b      	ldrb	r3, [r3, #0]
     2a0:	b2db      	uxtb	r3, r3
     2a2:	2101      	movs	r1, #1
     2a4:	430b      	orrs	r3, r1
     2a6:	b2db      	uxtb	r3, r3
     2a8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2aa:	68fb      	ldr	r3, [r7, #12]
     2ac:	3301      	adds	r3, #1
     2ae:	60fb      	str	r3, [r7, #12]
     2b0:	68fb      	ldr	r3, [r7, #12]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d0e3      	beq.n	27e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	4b17      	ldr	r3, [pc, #92]	; (318 <_system_extint_init+0xd0>)
     2ba:	4798      	blx	r3
     2bc:	1e03      	subs	r3, r0, #0
     2be:	d1fb      	bne.n	2b8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2c0:	230b      	movs	r3, #11
     2c2:	18fb      	adds	r3, r7, r3
     2c4:	2200      	movs	r2, #0
     2c6:	701a      	strb	r2, [r3, #0]
     2c8:	e00d      	b.n	2e6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     2ca:	230b      	movs	r3, #11
     2cc:	18fb      	adds	r3, r7, r3
     2ce:	781a      	ldrb	r2, [r3, #0]
     2d0:	4b12      	ldr	r3, [pc, #72]	; (31c <_system_extint_init+0xd4>)
     2d2:	0092      	lsls	r2, r2, #2
     2d4:	2100      	movs	r1, #0
     2d6:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2d8:	230b      	movs	r3, #11
     2da:	18fb      	adds	r3, r7, r3
     2dc:	781a      	ldrb	r2, [r3, #0]
     2de:	230b      	movs	r3, #11
     2e0:	18fb      	adds	r3, r7, r3
     2e2:	3201      	adds	r2, #1
     2e4:	701a      	strb	r2, [r3, #0]
     2e6:	230b      	movs	r3, #11
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	781b      	ldrb	r3, [r3, #0]
     2ec:	2b0f      	cmp	r3, #15
     2ee:	d9ec      	bls.n	2ca <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     2f0:	2004      	movs	r0, #4
     2f2:	4b0b      	ldr	r3, [pc, #44]	; (320 <_system_extint_init+0xd8>)
     2f4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     2f6:	4b0b      	ldr	r3, [pc, #44]	; (324 <_system_extint_init+0xdc>)
     2f8:	4798      	blx	r3
}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	46bd      	mov	sp, r7
     2fe:	b004      	add	sp, #16
     300:	bd80      	pop	{r7, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	40001800 	.word	0x40001800
     308:	00000105 	.word	0x00000105
     30c:	000000ed 	.word	0x000000ed
     310:	00001b99 	.word	0x00001b99
     314:	00001bdd 	.word	0x00001bdd
     318:	00000201 	.word	0x00000201
     31c:	20000044 	.word	0x20000044
     320:	00000189 	.word	0x00000189
     324:	00000329 	.word	0x00000329

00000328 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     328:	b580      	push	{r7, lr}
     32a:	b082      	sub	sp, #8
     32c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     32e:	4b15      	ldr	r3, [pc, #84]	; (384 <_extint_enable+0x5c>)
     330:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     332:	2300      	movs	r3, #0
     334:	607b      	str	r3, [r7, #4]
     336:	e018      	b.n	36a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     338:	687b      	ldr	r3, [r7, #4]
     33a:	009b      	lsls	r3, r3, #2
     33c:	2208      	movs	r2, #8
     33e:	4694      	mov	ip, r2
     340:	44bc      	add	ip, r7
     342:	4463      	add	r3, ip
     344:	3b08      	subs	r3, #8
     346:	681a      	ldr	r2, [r3, #0]
     348:	687b      	ldr	r3, [r7, #4]
     34a:	009b      	lsls	r3, r3, #2
     34c:	2108      	movs	r1, #8
     34e:	468c      	mov	ip, r1
     350:	44bc      	add	ip, r7
     352:	4463      	add	r3, ip
     354:	3b08      	subs	r3, #8
     356:	681b      	ldr	r3, [r3, #0]
     358:	781b      	ldrb	r3, [r3, #0]
     35a:	b2db      	uxtb	r3, r3
     35c:	2102      	movs	r1, #2
     35e:	430b      	orrs	r3, r1
     360:	b2db      	uxtb	r3, r3
     362:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     364:	687b      	ldr	r3, [r7, #4]
     366:	3301      	adds	r3, #1
     368:	607b      	str	r3, [r7, #4]
     36a:	687b      	ldr	r3, [r7, #4]
     36c:	2b00      	cmp	r3, #0
     36e:	d0e3      	beq.n	338 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     370:	46c0      	nop			; (mov r8, r8)
     372:	4b05      	ldr	r3, [pc, #20]	; (388 <_extint_enable+0x60>)
     374:	4798      	blx	r3
     376:	1e03      	subs	r3, r0, #0
     378:	d1fb      	bne.n	372 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	46bd      	mov	sp, r7
     37e:	b002      	add	sp, #8
     380:	bd80      	pop	{r7, pc}
     382:	46c0      	nop			; (mov r8, r8)
     384:	40001800 	.word	0x40001800
     388:	00000201 	.word	0x00000201

0000038c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     38c:	b580      	push	{r7, lr}
     38e:	b082      	sub	sp, #8
     390:	af00      	add	r7, sp, #0
     392:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     394:	687b      	ldr	r3, [r7, #4]
     396:	2200      	movs	r2, #0
     398:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     39a:	687b      	ldr	r3, [r7, #4]
     39c:	2200      	movs	r2, #0
     39e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	2201      	movs	r2, #1
     3a4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	2201      	movs	r2, #1
     3aa:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	2200      	movs	r2, #0
     3b0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	2202      	movs	r2, #2
     3b6:	72da      	strb	r2, [r3, #11]
}
     3b8:	46c0      	nop			; (mov r8, r8)
     3ba:	46bd      	mov	sp, r7
     3bc:	b002      	add	sp, #8
     3be:	bd80      	pop	{r7, pc}

000003c0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3c0:	b580      	push	{r7, lr}
     3c2:	b086      	sub	sp, #24
     3c4:	af00      	add	r7, sp, #0
     3c6:	0002      	movs	r2, r0
     3c8:	6039      	str	r1, [r7, #0]
     3ca:	1dfb      	adds	r3, r7, #7
     3cc:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3ce:	2308      	movs	r3, #8
     3d0:	18fb      	adds	r3, r7, r3
     3d2:	0018      	movs	r0, r3
     3d4:	4b36      	ldr	r3, [pc, #216]	; (4b0 <STACK_SIZE+0xb0>)
     3d6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     3d8:	683b      	ldr	r3, [r7, #0]
     3da:	685b      	ldr	r3, [r3, #4]
     3dc:	b2da      	uxtb	r2, r3
     3de:	2308      	movs	r3, #8
     3e0:	18fb      	adds	r3, r7, r3
     3e2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3e4:	2308      	movs	r3, #8
     3e6:	18fb      	adds	r3, r7, r3
     3e8:	2200      	movs	r2, #0
     3ea:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3ec:	683b      	ldr	r3, [r7, #0]
     3ee:	7a1a      	ldrb	r2, [r3, #8]
     3f0:	2308      	movs	r3, #8
     3f2:	18fb      	adds	r3, r7, r3
     3f4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3f6:	683b      	ldr	r3, [r7, #0]
     3f8:	681b      	ldr	r3, [r3, #0]
     3fa:	b2db      	uxtb	r3, r3
     3fc:	2208      	movs	r2, #8
     3fe:	18ba      	adds	r2, r7, r2
     400:	0011      	movs	r1, r2
     402:	0018      	movs	r0, r3
     404:	4b2b      	ldr	r3, [pc, #172]	; (4b4 <STACK_SIZE+0xb4>)
     406:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     408:	1dfb      	adds	r3, r7, #7
     40a:	781b      	ldrb	r3, [r3, #0]
     40c:	0018      	movs	r0, r3
     40e:	4b2a      	ldr	r3, [pc, #168]	; (4b8 <STACK_SIZE+0xb8>)
     410:	4798      	blx	r3
     412:	0003      	movs	r3, r0
     414:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     416:	1dfb      	adds	r3, r7, #7
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	2207      	movs	r2, #7
     41c:	4013      	ands	r3, r2
     41e:	009b      	lsls	r3, r3, #2
     420:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     422:	683b      	ldr	r3, [r7, #0]
     424:	7adb      	ldrb	r3, [r3, #11]
     426:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     428:	683b      	ldr	r3, [r7, #0]
     42a:	7a9b      	ldrb	r3, [r3, #10]
     42c:	2b00      	cmp	r3, #0
     42e:	d003      	beq.n	438 <STACK_SIZE+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     430:	697b      	ldr	r3, [r7, #20]
     432:	2208      	movs	r2, #8
     434:	4313      	orrs	r3, r2
     436:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     438:	1dfb      	adds	r3, r7, #7
     43a:	781b      	ldrb	r3, [r3, #0]
     43c:	08db      	lsrs	r3, r3, #3
     43e:	b2db      	uxtb	r3, r3
     440:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     442:	1dfb      	adds	r3, r7, #7
     444:	781b      	ldrb	r3, [r3, #0]
     446:	08db      	lsrs	r3, r3, #3
     448:	b2db      	uxtb	r3, r3
     44a:	001a      	movs	r2, r3
     44c:	693b      	ldr	r3, [r7, #16]
     44e:	3206      	adds	r2, #6
     450:	0092      	lsls	r2, r2, #2
     452:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     454:	210f      	movs	r1, #15
     456:	68fa      	ldr	r2, [r7, #12]
     458:	4091      	lsls	r1, r2
     45a:	000a      	movs	r2, r1
     45c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     45e:	401a      	ands	r2, r3
			(new_config << config_pos);
     460:	6979      	ldr	r1, [r7, #20]
     462:	68fb      	ldr	r3, [r7, #12]
     464:	4099      	lsls	r1, r3
     466:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     468:	431a      	orrs	r2, r3
     46a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     46c:	693b      	ldr	r3, [r7, #16]
     46e:	1d82      	adds	r2, r0, #6
     470:	0092      	lsls	r2, r2, #2
     472:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     474:	683b      	ldr	r3, [r7, #0]
     476:	7a5b      	ldrb	r3, [r3, #9]
     478:	2b00      	cmp	r3, #0
     47a:	d00a      	beq.n	492 <STACK_SIZE+0x92>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     47c:	693b      	ldr	r3, [r7, #16]
     47e:	695a      	ldr	r2, [r3, #20]
     480:	1dfb      	adds	r3, r7, #7
     482:	781b      	ldrb	r3, [r3, #0]
     484:	2101      	movs	r1, #1
     486:	4099      	lsls	r1, r3
     488:	000b      	movs	r3, r1
     48a:	431a      	orrs	r2, r3
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     490:	e00a      	b.n	4a8 <STACK_SIZE+0xa8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     492:	693b      	ldr	r3, [r7, #16]
     494:	695b      	ldr	r3, [r3, #20]
     496:	1dfa      	adds	r2, r7, #7
     498:	7812      	ldrb	r2, [r2, #0]
     49a:	2101      	movs	r1, #1
     49c:	4091      	lsls	r1, r2
     49e:	000a      	movs	r2, r1
     4a0:	43d2      	mvns	r2, r2
     4a2:	401a      	ands	r2, r3
     4a4:	693b      	ldr	r3, [r7, #16]
     4a6:	615a      	str	r2, [r3, #20]
}
     4a8:	46c0      	nop			; (mov r8, r8)
     4aa:	46bd      	mov	sp, r7
     4ac:	b006      	add	sp, #24
     4ae:	bd80      	pop	{r7, pc}
     4b0:	00000161 	.word	0x00000161
     4b4:	00001e2d 	.word	0x00001e2d
     4b8:	000001b5 	.word	0x000001b5

000004bc <TC1_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     4bc:	b580      	push	{r7, lr}
     4be:	af00      	add	r7, sp, #0
     4c0:	2000      	movs	r0, #0
     4c2:	4b02      	ldr	r3, [pc, #8]	; (4cc <TC1_Handler+0x10>)
     4c4:	4798      	blx	r3
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	46bd      	mov	sp, r7
     4ca:	bd80      	pop	{r7, pc}
     4cc:	000004e5 	.word	0x000004e5

000004d0 <TC2_Handler>:
     4d0:	b580      	push	{r7, lr}
     4d2:	af00      	add	r7, sp, #0
     4d4:	2001      	movs	r0, #1
     4d6:	4b02      	ldr	r3, [pc, #8]	; (4e0 <TC2_Handler+0x10>)
     4d8:	4798      	blx	r3
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	46bd      	mov	sp, r7
     4de:	bd80      	pop	{r7, pc}
     4e0:	000004e5 	.word	0x000004e5

000004e4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b084      	sub	sp, #16
     4e8:	af00      	add	r7, sp, #0
     4ea:	0002      	movs	r2, r0
     4ec:	1dfb      	adds	r3, r7, #7
     4ee:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     4f0:	1dfb      	adds	r3, r7, #7
     4f2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
     4f4:	4b28      	ldr	r3, [pc, #160]	; (598 <_tc_interrupt_handler+0xb4>)
     4f6:	0092      	lsls	r2, r2, #2
     4f8:	58d3      	ldr	r3, [r2, r3]
     4fa:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     4fc:	68fb      	ldr	r3, [r7, #12]
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	7b9b      	ldrb	r3, [r3, #14]
     502:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     504:	68fa      	ldr	r2, [r7, #12]
     506:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     508:	4013      	ands	r3, r2
     50a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
     50c:	68fb      	ldr	r3, [r7, #12]
     50e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     510:	230b      	movs	r3, #11
     512:	18fb      	adds	r3, r7, r3
     514:	400a      	ands	r2, r1
     516:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     518:	230b      	movs	r3, #11
     51a:	18fb      	adds	r3, r7, r3
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	2201      	movs	r2, #1
     520:	4013      	ands	r3, r2
     522:	d008      	beq.n	536 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     524:	68fb      	ldr	r3, [r7, #12]
     526:	689b      	ldr	r3, [r3, #8]
     528:	68fa      	ldr	r2, [r7, #12]
     52a:	0010      	movs	r0, r2
     52c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     52e:	68fb      	ldr	r3, [r7, #12]
     530:	681b      	ldr	r3, [r3, #0]
     532:	2201      	movs	r2, #1
     534:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     536:	230b      	movs	r3, #11
     538:	18fb      	adds	r3, r7, r3
     53a:	781b      	ldrb	r3, [r3, #0]
     53c:	2202      	movs	r2, #2
     53e:	4013      	ands	r3, r2
     540:	d008      	beq.n	554 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     542:	68fb      	ldr	r3, [r7, #12]
     544:	68db      	ldr	r3, [r3, #12]
     546:	68fa      	ldr	r2, [r7, #12]
     548:	0010      	movs	r0, r2
     54a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     54c:	68fb      	ldr	r3, [r7, #12]
     54e:	681b      	ldr	r3, [r3, #0]
     550:	2202      	movs	r2, #2
     552:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     554:	230b      	movs	r3, #11
     556:	18fb      	adds	r3, r7, r3
     558:	781b      	ldrb	r3, [r3, #0]
     55a:	2210      	movs	r2, #16
     55c:	4013      	ands	r3, r2
     55e:	d008      	beq.n	572 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     560:	68fb      	ldr	r3, [r7, #12]
     562:	691b      	ldr	r3, [r3, #16]
     564:	68fa      	ldr	r2, [r7, #12]
     566:	0010      	movs	r0, r2
     568:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     56a:	68fb      	ldr	r3, [r7, #12]
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	2210      	movs	r2, #16
     570:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     572:	230b      	movs	r3, #11
     574:	18fb      	adds	r3, r7, r3
     576:	781b      	ldrb	r3, [r3, #0]
     578:	2220      	movs	r2, #32
     57a:	4013      	ands	r3, r2
     57c:	d008      	beq.n	590 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     57e:	68fb      	ldr	r3, [r7, #12]
     580:	695b      	ldr	r3, [r3, #20]
     582:	68fa      	ldr	r2, [r7, #12]
     584:	0010      	movs	r0, r2
     586:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     588:	68fb      	ldr	r3, [r7, #12]
     58a:	681b      	ldr	r3, [r3, #0]
     58c:	2220      	movs	r2, #32
     58e:	739a      	strb	r2, [r3, #14]
	}
}
     590:	46c0      	nop			; (mov r8, r8)
     592:	46bd      	mov	sp, r7
     594:	b004      	add	sp, #16
     596:	bd80      	pop	{r7, pc}
     598:	20000084 	.word	0x20000084

0000059c <system_gclk_chan_get_config_defaults>:
{
     59c:	b580      	push	{r7, lr}
     59e:	b082      	sub	sp, #8
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	2200      	movs	r2, #0
     5a8:	701a      	strb	r2, [r3, #0]
}
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	46bd      	mov	sp, r7
     5ae:	b002      	add	sp, #8
     5b0:	bd80      	pop	{r7, pc}
	...

000005b4 <system_apb_clock_set_mask>:
{
     5b4:	b580      	push	{r7, lr}
     5b6:	b082      	sub	sp, #8
     5b8:	af00      	add	r7, sp, #0
     5ba:	0002      	movs	r2, r0
     5bc:	6039      	str	r1, [r7, #0]
     5be:	1dfb      	adds	r3, r7, #7
     5c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     5c2:	1dfb      	adds	r3, r7, #7
     5c4:	781b      	ldrb	r3, [r3, #0]
     5c6:	2b01      	cmp	r3, #1
     5c8:	d00a      	beq.n	5e0 <system_apb_clock_set_mask+0x2c>
     5ca:	2b02      	cmp	r3, #2
     5cc:	d00f      	beq.n	5ee <system_apb_clock_set_mask+0x3a>
     5ce:	2b00      	cmp	r3, #0
     5d0:	d114      	bne.n	5fc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     5d2:	4b0e      	ldr	r3, [pc, #56]	; (60c <system_apb_clock_set_mask+0x58>)
     5d4:	4a0d      	ldr	r2, [pc, #52]	; (60c <system_apb_clock_set_mask+0x58>)
     5d6:	6991      	ldr	r1, [r2, #24]
     5d8:	683a      	ldr	r2, [r7, #0]
     5da:	430a      	orrs	r2, r1
     5dc:	619a      	str	r2, [r3, #24]
			break;
     5de:	e00f      	b.n	600 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     5e0:	4b0a      	ldr	r3, [pc, #40]	; (60c <system_apb_clock_set_mask+0x58>)
     5e2:	4a0a      	ldr	r2, [pc, #40]	; (60c <system_apb_clock_set_mask+0x58>)
     5e4:	69d1      	ldr	r1, [r2, #28]
     5e6:	683a      	ldr	r2, [r7, #0]
     5e8:	430a      	orrs	r2, r1
     5ea:	61da      	str	r2, [r3, #28]
			break;
     5ec:	e008      	b.n	600 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     5ee:	4b07      	ldr	r3, [pc, #28]	; (60c <system_apb_clock_set_mask+0x58>)
     5f0:	4a06      	ldr	r2, [pc, #24]	; (60c <system_apb_clock_set_mask+0x58>)
     5f2:	6a11      	ldr	r1, [r2, #32]
     5f4:	683a      	ldr	r2, [r7, #0]
     5f6:	430a      	orrs	r2, r1
     5f8:	621a      	str	r2, [r3, #32]
			break;
     5fa:	e001      	b.n	600 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     5fc:	2317      	movs	r3, #23
     5fe:	e000      	b.n	602 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     600:	2300      	movs	r3, #0
}
     602:	0018      	movs	r0, r3
     604:	46bd      	mov	sp, r7
     606:	b002      	add	sp, #8
     608:	bd80      	pop	{r7, pc}
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	40000400 	.word	0x40000400

00000610 <system_pinmux_get_config_defaults>:
{
     610:	b580      	push	{r7, lr}
     612:	b082      	sub	sp, #8
     614:	af00      	add	r7, sp, #0
     616:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     618:	687b      	ldr	r3, [r7, #4]
     61a:	2280      	movs	r2, #128	; 0x80
     61c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     61e:	687b      	ldr	r3, [r7, #4]
     620:	2200      	movs	r2, #0
     622:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     624:	687b      	ldr	r3, [r7, #4]
     626:	2201      	movs	r2, #1
     628:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     62a:	687b      	ldr	r3, [r7, #4]
     62c:	2200      	movs	r2, #0
     62e:	70da      	strb	r2, [r3, #3]
}
     630:	46c0      	nop			; (mov r8, r8)
     632:	46bd      	mov	sp, r7
     634:	b002      	add	sp, #8
     636:	bd80      	pop	{r7, pc}

00000638 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     638:	b580      	push	{r7, lr}
     63a:	b084      	sub	sp, #16
     63c:	af00      	add	r7, sp, #0
     63e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     640:	687b      	ldr	r3, [r7, #4]
     642:	681b      	ldr	r3, [r3, #0]
     644:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     646:	68fb      	ldr	r3, [r7, #12]
     648:	7bdb      	ldrb	r3, [r3, #15]
     64a:	b2db      	uxtb	r3, r3
     64c:	001a      	movs	r2, r3
     64e:	2380      	movs	r3, #128	; 0x80
     650:	4013      	ands	r3, r2
     652:	1e5a      	subs	r2, r3, #1
     654:	4193      	sbcs	r3, r2
     656:	b2db      	uxtb	r3, r3
#endif
}
     658:	0018      	movs	r0, r3
     65a:	46bd      	mov	sp, r7
     65c:	b004      	add	sp, #16
     65e:	bd80      	pop	{r7, pc}

00000660 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     660:	b580      	push	{r7, lr}
     662:	b086      	sub	sp, #24
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     668:	230c      	movs	r3, #12
     66a:	18fb      	adds	r3, r7, r3
     66c:	4a0d      	ldr	r2, [pc, #52]	; (6a4 <_tc_get_inst_index+0x44>)
     66e:	ca03      	ldmia	r2!, {r0, r1}
     670:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     672:	2300      	movs	r3, #0
     674:	617b      	str	r3, [r7, #20]
     676:	e00d      	b.n	694 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
     678:	230c      	movs	r3, #12
     67a:	18fb      	adds	r3, r7, r3
     67c:	697a      	ldr	r2, [r7, #20]
     67e:	0092      	lsls	r2, r2, #2
     680:	58d2      	ldr	r2, [r2, r3]
     682:	687b      	ldr	r3, [r7, #4]
     684:	429a      	cmp	r2, r3
     686:	d102      	bne.n	68e <_tc_get_inst_index+0x2e>
			return i;
     688:	697b      	ldr	r3, [r7, #20]
     68a:	b2db      	uxtb	r3, r3
     68c:	e006      	b.n	69c <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     68e:	697b      	ldr	r3, [r7, #20]
     690:	3301      	adds	r3, #1
     692:	617b      	str	r3, [r7, #20]
     694:	697b      	ldr	r3, [r7, #20]
     696:	2b01      	cmp	r3, #1
     698:	d9ee      	bls.n	678 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     69a:	2300      	movs	r3, #0
}
     69c:	0018      	movs	r0, r3
     69e:	46bd      	mov	sp, r7
     6a0:	b006      	add	sp, #24
     6a2:	bd80      	pop	{r7, pc}
     6a4:	00001ffc 	.word	0x00001ffc

000006a8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     6a8:	b590      	push	{r4, r7, lr}
     6aa:	b08b      	sub	sp, #44	; 0x2c
     6ac:	af00      	add	r7, sp, #0
     6ae:	60f8      	str	r0, [r7, #12]
     6b0:	60b9      	str	r1, [r7, #8]
     6b2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
     6b4:	2326      	movs	r3, #38	; 0x26
     6b6:	18fb      	adds	r3, r7, r3
     6b8:	2200      	movs	r2, #0
     6ba:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     6bc:	2325      	movs	r3, #37	; 0x25
     6be:	18fb      	adds	r3, r7, r3
     6c0:	2200      	movs	r2, #0
     6c2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
     6c4:	2324      	movs	r3, #36	; 0x24
     6c6:	18fb      	adds	r3, r7, r3
     6c8:	2200      	movs	r2, #0
     6ca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     6cc:	2321      	movs	r3, #33	; 0x21
     6ce:	18fc      	adds	r4, r7, r3
     6d0:	68bb      	ldr	r3, [r7, #8]
     6d2:	0018      	movs	r0, r3
     6d4:	4bd4      	ldr	r3, [pc, #848]	; (a28 <tc_init+0x380>)
     6d6:	4798      	blx	r3
     6d8:	0003      	movs	r3, r0
     6da:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     6dc:	231c      	movs	r3, #28
     6de:	18fb      	adds	r3, r7, r3
     6e0:	4ad2      	ldr	r2, [pc, #840]	; (a2c <tc_init+0x384>)
     6e2:	8812      	ldrh	r2, [r2, #0]
     6e4:	801a      	strh	r2, [r3, #0]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     6e6:	2318      	movs	r3, #24
     6e8:	18fb      	adds	r3, r7, r3
     6ea:	4ad1      	ldr	r2, [pc, #836]	; (a30 <tc_init+0x388>)
     6ec:	6812      	ldr	r2, [r2, #0]
     6ee:	601a      	str	r2, [r3, #0]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     6f0:	2323      	movs	r3, #35	; 0x23
     6f2:	18fb      	adds	r3, r7, r3
     6f4:	2200      	movs	r2, #0
     6f6:	701a      	strb	r2, [r3, #0]
     6f8:	e00e      	b.n	718 <tc_init+0x70>
		module_inst->callback[i]        = NULL;
     6fa:	2323      	movs	r3, #35	; 0x23
     6fc:	18fb      	adds	r3, r7, r3
     6fe:	781a      	ldrb	r2, [r3, #0]
     700:	68fb      	ldr	r3, [r7, #12]
     702:	3202      	adds	r2, #2
     704:	0092      	lsls	r2, r2, #2
     706:	2100      	movs	r1, #0
     708:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     70a:	2323      	movs	r3, #35	; 0x23
     70c:	18fb      	adds	r3, r7, r3
     70e:	781a      	ldrb	r2, [r3, #0]
     710:	2323      	movs	r3, #35	; 0x23
     712:	18fb      	adds	r3, r7, r3
     714:	3201      	adds	r2, #1
     716:	701a      	strb	r2, [r3, #0]
     718:	2323      	movs	r3, #35	; 0x23
     71a:	18fb      	adds	r3, r7, r3
     71c:	781b      	ldrb	r3, [r3, #0]
     71e:	2b03      	cmp	r3, #3
     720:	d9eb      	bls.n	6fa <tc_init+0x52>
	}
	module_inst->register_callback_mask     = 0x00;
     722:	68fb      	ldr	r3, [r7, #12]
     724:	2200      	movs	r2, #0
     726:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     728:	68fb      	ldr	r3, [r7, #12]
     72a:	2200      	movs	r2, #0
     72c:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     72e:	2321      	movs	r3, #33	; 0x21
     730:	18fb      	adds	r3, r7, r3
     732:	781a      	ldrb	r2, [r3, #0]
     734:	4bbf      	ldr	r3, [pc, #764]	; (a34 <tc_init+0x38c>)
     736:	0092      	lsls	r2, r2, #2
     738:	68f9      	ldr	r1, [r7, #12]
     73a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     73c:	68fb      	ldr	r3, [r7, #12]
     73e:	68ba      	ldr	r2, [r7, #8]
     740:	601a      	str	r2, [r3, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     742:	687b      	ldr	r3, [r7, #4]
     744:	789b      	ldrb	r3, [r3, #2]
     746:	2b08      	cmp	r3, #8
     748:	d108      	bne.n	75c <tc_init+0xb4>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     74a:	2321      	movs	r3, #33	; 0x21
     74c:	18fb      	adds	r3, r7, r3
     74e:	781b      	ldrb	r3, [r3, #0]
     750:	3301      	adds	r3, #1
     752:	2201      	movs	r2, #1
     754:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     756:	d101      	bne.n	75c <tc_init+0xb4>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     758:	2317      	movs	r3, #23
     75a:	e1c2      	b.n	ae2 <tc_init+0x43a>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	789a      	ldrb	r2, [r3, #2]
     760:	68fb      	ldr	r3, [r7, #12]
     762:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     764:	68bb      	ldr	r3, [r7, #8]
     766:	881b      	ldrh	r3, [r3, #0]
     768:	b29b      	uxth	r3, r3
     76a:	001a      	movs	r2, r3
     76c:	2301      	movs	r3, #1
     76e:	4013      	ands	r3, r2
     770:	d001      	beq.n	776 <tc_init+0xce>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     772:	2305      	movs	r3, #5
     774:	e1b5      	b.n	ae2 <tc_init+0x43a>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     776:	68bb      	ldr	r3, [r7, #8]
     778:	7bdb      	ldrb	r3, [r3, #15]
     77a:	b2db      	uxtb	r3, r3
     77c:	001a      	movs	r2, r3
     77e:	2310      	movs	r3, #16
     780:	4013      	ands	r3, r2
     782:	d001      	beq.n	788 <tc_init+0xe0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     784:	231c      	movs	r3, #28
     786:	e1ac      	b.n	ae2 <tc_init+0x43a>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     788:	68bb      	ldr	r3, [r7, #8]
     78a:	881b      	ldrh	r3, [r3, #0]
     78c:	b29b      	uxth	r3, r3
     78e:	001a      	movs	r2, r3
     790:	2302      	movs	r3, #2
     792:	4013      	ands	r3, r2
     794:	d001      	beq.n	79a <tc_init+0xf2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     796:	231c      	movs	r3, #28
     798:	e1a3      	b.n	ae2 <tc_init+0x43a>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	7c1b      	ldrb	r3, [r3, #16]
     79e:	2b00      	cmp	r3, #0
     7a0:	d017      	beq.n	7d2 <tc_init+0x12a>
		system_pinmux_get_config_defaults(&pin_config);
     7a2:	2314      	movs	r3, #20
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	0018      	movs	r0, r3
     7a8:	4ba3      	ldr	r3, [pc, #652]	; (a38 <tc_init+0x390>)
     7aa:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	699b      	ldr	r3, [r3, #24]
     7b0:	b2da      	uxtb	r2, r3
     7b2:	2314      	movs	r3, #20
     7b4:	18fb      	adds	r3, r7, r3
     7b6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     7b8:	2314      	movs	r3, #20
     7ba:	18fb      	adds	r3, r7, r3
     7bc:	2201      	movs	r2, #1
     7be:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
     7c4:	b2db      	uxtb	r3, r3
     7c6:	2214      	movs	r2, #20
     7c8:	18ba      	adds	r2, r7, r2
     7ca:	0011      	movs	r1, r2
     7cc:	0018      	movs	r0, r3
     7ce:	4b9b      	ldr	r3, [pc, #620]	; (a3c <tc_init+0x394>)
     7d0:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	7f1b      	ldrb	r3, [r3, #28]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d017      	beq.n	80a <tc_init+0x162>
		system_pinmux_get_config_defaults(&pin_config);
     7da:	2314      	movs	r3, #20
     7dc:	18fb      	adds	r3, r7, r3
     7de:	0018      	movs	r0, r3
     7e0:	4b95      	ldr	r3, [pc, #596]	; (a38 <tc_init+0x390>)
     7e2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     7e8:	b2da      	uxtb	r2, r3
     7ea:	2314      	movs	r3, #20
     7ec:	18fb      	adds	r3, r7, r3
     7ee:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     7f0:	2314      	movs	r3, #20
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	2201      	movs	r2, #1
     7f6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
     7f8:	687b      	ldr	r3, [r7, #4]
     7fa:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
     7fc:	b2db      	uxtb	r3, r3
     7fe:	2214      	movs	r2, #20
     800:	18ba      	adds	r2, r7, r2
     802:	0011      	movs	r1, r2
     804:	0018      	movs	r0, r3
     806:	4b8d      	ldr	r3, [pc, #564]	; (a3c <tc_init+0x394>)
     808:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     80a:	2321      	movs	r3, #33	; 0x21
     80c:	18fb      	adds	r3, r7, r3
     80e:	781a      	ldrb	r2, [r3, #0]
     810:	2318      	movs	r3, #24
     812:	18fb      	adds	r3, r7, r3
     814:	0052      	lsls	r2, r2, #1
     816:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     818:	0019      	movs	r1, r3
     81a:	2002      	movs	r0, #2
     81c:	4b88      	ldr	r3, [pc, #544]	; (a40 <tc_init+0x398>)
     81e:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     820:	687b      	ldr	r3, [r7, #4]
     822:	789b      	ldrb	r3, [r3, #2]
     824:	2b08      	cmp	r3, #8
     826:	d10b      	bne.n	840 <tc_init+0x198>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     828:	2321      	movs	r3, #33	; 0x21
     82a:	18fb      	adds	r3, r7, r3
     82c:	781b      	ldrb	r3, [r3, #0]
     82e:	1c5a      	adds	r2, r3, #1
     830:	2318      	movs	r3, #24
     832:	18fb      	adds	r3, r7, r3
     834:	0052      	lsls	r2, r2, #1
     836:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     838:	0019      	movs	r1, r3
     83a:	2002      	movs	r0, #2
     83c:	4b80      	ldr	r3, [pc, #512]	; (a40 <tc_init+0x398>)
     83e:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     840:	2310      	movs	r3, #16
     842:	18fb      	adds	r3, r7, r3
     844:	0018      	movs	r0, r3
     846:	4b7f      	ldr	r3, [pc, #508]	; (a44 <tc_init+0x39c>)
     848:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	781a      	ldrb	r2, [r3, #0]
     84e:	2310      	movs	r3, #16
     850:	18fb      	adds	r3, r7, r3
     852:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     854:	2321      	movs	r3, #33	; 0x21
     856:	18fb      	adds	r3, r7, r3
     858:	781b      	ldrb	r3, [r3, #0]
     85a:	221c      	movs	r2, #28
     85c:	18ba      	adds	r2, r7, r2
     85e:	5cd3      	ldrb	r3, [r2, r3]
     860:	2210      	movs	r2, #16
     862:	18ba      	adds	r2, r7, r2
     864:	0011      	movs	r1, r2
     866:	0018      	movs	r0, r3
     868:	4b77      	ldr	r3, [pc, #476]	; (a48 <tc_init+0x3a0>)
     86a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     86c:	2321      	movs	r3, #33	; 0x21
     86e:	18fb      	adds	r3, r7, r3
     870:	781b      	ldrb	r3, [r3, #0]
     872:	221c      	movs	r2, #28
     874:	18ba      	adds	r2, r7, r2
     876:	5cd3      	ldrb	r3, [r2, r3]
     878:	0018      	movs	r0, r3
     87a:	4b74      	ldr	r3, [pc, #464]	; (a4c <tc_init+0x3a4>)
     87c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
     87e:	687b      	ldr	r3, [r7, #4]
     880:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
     882:	687b      	ldr	r3, [r7, #4]
     884:	799b      	ldrb	r3, [r3, #6]
     886:	4313      	orrs	r3, r2
     888:	b2db      	uxtb	r3, r3
     88a:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
     890:	4313      	orrs	r3, r2
     892:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
     894:	687b      	ldr	r3, [r7, #4]
     896:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
     898:	2326      	movs	r3, #38	; 0x26
     89a:	18fb      	adds	r3, r7, r3
     89c:	430a      	orrs	r2, r1
     89e:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	785b      	ldrb	r3, [r3, #1]
     8a4:	2b00      	cmp	r3, #0
     8a6:	d008      	beq.n	8ba <tc_init+0x212>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     8a8:	2326      	movs	r3, #38	; 0x26
     8aa:	18fb      	adds	r3, r7, r3
     8ac:	2226      	movs	r2, #38	; 0x26
     8ae:	18ba      	adds	r2, r7, r2
     8b0:	8812      	ldrh	r2, [r2, #0]
     8b2:	2180      	movs	r1, #128	; 0x80
     8b4:	0109      	lsls	r1, r1, #4
     8b6:	430a      	orrs	r2, r1
     8b8:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	0018      	movs	r0, r3
     8c0:	4b63      	ldr	r3, [pc, #396]	; (a50 <tc_init+0x3a8>)
     8c2:	4798      	blx	r3
     8c4:	1e03      	subs	r3, r0, #0
     8c6:	d1f9      	bne.n	8bc <tc_init+0x214>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     8c8:	68bb      	ldr	r3, [r7, #8]
     8ca:	2226      	movs	r2, #38	; 0x26
     8cc:	18ba      	adds	r2, r7, r2
     8ce:	8812      	ldrh	r2, [r2, #0]
     8d0:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	7b5b      	ldrb	r3, [r3, #13]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d003      	beq.n	8e2 <tc_init+0x23a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     8da:	2325      	movs	r3, #37	; 0x25
     8dc:	18fb      	adds	r3, r7, r3
     8de:	2204      	movs	r2, #4
     8e0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	7b9b      	ldrb	r3, [r3, #14]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d007      	beq.n	8fa <tc_init+0x252>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     8ea:	2325      	movs	r3, #37	; 0x25
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	2225      	movs	r2, #37	; 0x25
     8f0:	18ba      	adds	r2, r7, r2
     8f2:	7812      	ldrb	r2, [r2, #0]
     8f4:	2101      	movs	r1, #1
     8f6:	430a      	orrs	r2, r1
     8f8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	68fb      	ldr	r3, [r7, #12]
     8fe:	0018      	movs	r0, r3
     900:	4b53      	ldr	r3, [pc, #332]	; (a50 <tc_init+0x3a8>)
     902:	4798      	blx	r3
     904:	1e03      	subs	r3, r0, #0
     906:	d1f9      	bne.n	8fc <tc_init+0x254>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     908:	68bb      	ldr	r3, [r7, #8]
     90a:	22ff      	movs	r2, #255	; 0xff
     90c:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     90e:	2325      	movs	r3, #37	; 0x25
     910:	18fb      	adds	r3, r7, r3
     912:	781b      	ldrb	r3, [r3, #0]
     914:	2b00      	cmp	r3, #0
     916:	d00b      	beq.n	930 <tc_init+0x288>
		while (tc_is_syncing(module_inst)) {
     918:	46c0      	nop			; (mov r8, r8)
     91a:	68fb      	ldr	r3, [r7, #12]
     91c:	0018      	movs	r0, r3
     91e:	4b4c      	ldr	r3, [pc, #304]	; (a50 <tc_init+0x3a8>)
     920:	4798      	blx	r3
     922:	1e03      	subs	r3, r0, #0
     924:	d1f9      	bne.n	91a <tc_init+0x272>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     926:	68bb      	ldr	r3, [r7, #8]
     928:	2225      	movs	r2, #37	; 0x25
     92a:	18ba      	adds	r2, r7, r2
     92c:	7812      	ldrb	r2, [r2, #0]
     92e:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     930:	2324      	movs	r3, #36	; 0x24
     932:	18fb      	adds	r3, r7, r3
     934:	687a      	ldr	r2, [r7, #4]
     936:	7a92      	ldrb	r2, [r2, #10]
     938:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     93a:	2322      	movs	r3, #34	; 0x22
     93c:	18fb      	adds	r3, r7, r3
     93e:	2200      	movs	r2, #0
     940:	701a      	strb	r2, [r3, #0]
     942:	e01c      	b.n	97e <tc_init+0x2d6>
		if (config->enable_capture_on_channel[i] == true) {
     944:	2322      	movs	r3, #34	; 0x22
     946:	18fb      	adds	r3, r7, r3
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	687a      	ldr	r2, [r7, #4]
     94c:	18d3      	adds	r3, r2, r3
     94e:	7adb      	ldrb	r3, [r3, #11]
     950:	2b00      	cmp	r3, #0
     952:	d00d      	beq.n	970 <tc_init+0x2c8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     954:	2322      	movs	r3, #34	; 0x22
     956:	18fb      	adds	r3, r7, r3
     958:	781b      	ldrb	r3, [r3, #0]
     95a:	2210      	movs	r2, #16
     95c:	409a      	lsls	r2, r3
     95e:	0013      	movs	r3, r2
     960:	b2d9      	uxtb	r1, r3
     962:	2324      	movs	r3, #36	; 0x24
     964:	18fb      	adds	r3, r7, r3
     966:	2224      	movs	r2, #36	; 0x24
     968:	18ba      	adds	r2, r7, r2
     96a:	7812      	ldrb	r2, [r2, #0]
     96c:	430a      	orrs	r2, r1
     96e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     970:	2322      	movs	r3, #34	; 0x22
     972:	18fb      	adds	r3, r7, r3
     974:	781a      	ldrb	r2, [r3, #0]
     976:	2322      	movs	r3, #34	; 0x22
     978:	18fb      	adds	r3, r7, r3
     97a:	3201      	adds	r2, #1
     97c:	701a      	strb	r2, [r3, #0]
     97e:	2322      	movs	r3, #34	; 0x22
     980:	18fb      	adds	r3, r7, r3
     982:	781b      	ldrb	r3, [r3, #0]
     984:	2b01      	cmp	r3, #1
     986:	d9dd      	bls.n	944 <tc_init+0x29c>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     988:	46c0      	nop			; (mov r8, r8)
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	0018      	movs	r0, r3
     98e:	4b30      	ldr	r3, [pc, #192]	; (a50 <tc_init+0x3a8>)
     990:	4798      	blx	r3
     992:	1e03      	subs	r3, r0, #0
     994:	d1f9      	bne.n	98a <tc_init+0x2e2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     996:	68bb      	ldr	r3, [r7, #8]
     998:	2224      	movs	r2, #36	; 0x24
     99a:	18ba      	adds	r2, r7, r2
     99c:	7812      	ldrb	r2, [r2, #0]
     99e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     9a0:	46c0      	nop			; (mov r8, r8)
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	0018      	movs	r0, r3
     9a6:	4b2a      	ldr	r3, [pc, #168]	; (a50 <tc_init+0x3a8>)
     9a8:	4798      	blx	r3
     9aa:	1e03      	subs	r3, r0, #0
     9ac:	d1f9      	bne.n	9a2 <tc_init+0x2fa>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     9ae:	68fb      	ldr	r3, [r7, #12]
     9b0:	791b      	ldrb	r3, [r3, #4]
     9b2:	2b04      	cmp	r3, #4
     9b4:	d005      	beq.n	9c2 <tc_init+0x31a>
     9b6:	2b08      	cmp	r3, #8
     9b8:	d100      	bne.n	9bc <tc_init+0x314>
     9ba:	e06e      	b.n	a9a <tc_init+0x3f2>
     9bc:	2b00      	cmp	r3, #0
     9be:	d049      	beq.n	a54 <tc_init+0x3ac>
     9c0:	e08e      	b.n	ae0 <tc_init+0x438>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	68fb      	ldr	r3, [r7, #12]
     9c6:	0018      	movs	r0, r3
     9c8:	4b21      	ldr	r3, [pc, #132]	; (a50 <tc_init+0x3a8>)
     9ca:	4798      	blx	r3
     9cc:	1e03      	subs	r3, r0, #0
     9ce:	d1f9      	bne.n	9c4 <tc_init+0x31c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	2228      	movs	r2, #40	; 0x28
     9d4:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
     9d6:	68bb      	ldr	r3, [r7, #8]
     9d8:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	68fb      	ldr	r3, [r7, #12]
     9de:	0018      	movs	r0, r3
     9e0:	4b1b      	ldr	r3, [pc, #108]	; (a50 <tc_init+0x3a8>)
     9e2:	4798      	blx	r3
     9e4:	1e03      	subs	r3, r0, #0
     9e6:	d1f9      	bne.n	9dc <tc_init+0x334>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     9e8:	687b      	ldr	r3, [r7, #4]
     9ea:	2229      	movs	r2, #41	; 0x29
     9ec:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
     9ee:	68bb      	ldr	r3, [r7, #8]
     9f0:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	68fb      	ldr	r3, [r7, #12]
     9f6:	0018      	movs	r0, r3
     9f8:	4b15      	ldr	r3, [pc, #84]	; (a50 <tc_init+0x3a8>)
     9fa:	4798      	blx	r3
     9fc:	1e03      	subs	r3, r0, #0
     9fe:	d1f9      	bne.n	9f4 <tc_init+0x34c>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	222a      	movs	r2, #42	; 0x2a
     a04:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
     a06:	68bb      	ldr	r3, [r7, #8]
     a08:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	68fb      	ldr	r3, [r7, #12]
     a0e:	0018      	movs	r0, r3
     a10:	4b0f      	ldr	r3, [pc, #60]	; (a50 <tc_init+0x3a8>)
     a12:	4798      	blx	r3
     a14:	1e03      	subs	r3, r0, #0
     a16:	d1f9      	bne.n	a0c <tc_init+0x364>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	222b      	movs	r2, #43	; 0x2b
     a1c:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
     a1e:	68bb      	ldr	r3, [r7, #8]
     a20:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
     a22:	2300      	movs	r3, #0
     a24:	e05d      	b.n	ae2 <tc_init+0x43a>
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	00000661 	.word	0x00000661
     a2c:	00002004 	.word	0x00002004
     a30:	00002008 	.word	0x00002008
     a34:	20000084 	.word	0x20000084
     a38:	00000611 	.word	0x00000611
     a3c:	00001e2d 	.word	0x00001e2d
     a40:	000005b5 	.word	0x000005b5
     a44:	0000059d 	.word	0x0000059d
     a48:	00001b99 	.word	0x00001b99
     a4c:	00001bdd 	.word	0x00001bdd
     a50:	00000639 	.word	0x00000639

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     a54:	46c0      	nop			; (mov r8, r8)
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	0018      	movs	r0, r3
     a5a:	4b24      	ldr	r3, [pc, #144]	; (aec <tc_init+0x444>)
     a5c:	4798      	blx	r3
     a5e:	1e03      	subs	r3, r0, #0
     a60:	d1f9      	bne.n	a56 <tc_init+0x3ae>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
     a66:	68bb      	ldr	r3, [r7, #8]
     a68:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	68fb      	ldr	r3, [r7, #12]
     a6e:	0018      	movs	r0, r3
     a70:	4b1e      	ldr	r3, [pc, #120]	; (aec <tc_init+0x444>)
     a72:	4798      	blx	r3
     a74:	1e03      	subs	r3, r0, #0
     a76:	d1f9      	bne.n	a6c <tc_init+0x3c4>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     a7c:	68bb      	ldr	r3, [r7, #8]
     a7e:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
     a80:	46c0      	nop			; (mov r8, r8)
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	0018      	movs	r0, r3
     a86:	4b19      	ldr	r3, [pc, #100]	; (aec <tc_init+0x444>)
     a88:	4798      	blx	r3
     a8a:	1e03      	subs	r3, r0, #0
     a8c:	d1f9      	bne.n	a82 <tc_init+0x3da>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     a92:	68bb      	ldr	r3, [r7, #8]
     a94:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
     a96:	2300      	movs	r3, #0
     a98:	e023      	b.n	ae2 <tc_init+0x43a>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	0018      	movs	r0, r3
     aa0:	4b12      	ldr	r3, [pc, #72]	; (aec <tc_init+0x444>)
     aa2:	4798      	blx	r3
     aa4:	1e03      	subs	r3, r0, #0
     aa6:	d1f9      	bne.n	a9c <tc_init+0x3f4>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     aac:	68bb      	ldr	r3, [r7, #8]
     aae:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     ab0:	46c0      	nop			; (mov r8, r8)
     ab2:	68fb      	ldr	r3, [r7, #12]
     ab4:	0018      	movs	r0, r3
     ab6:	4b0d      	ldr	r3, [pc, #52]	; (aec <tc_init+0x444>)
     ab8:	4798      	blx	r3
     aba:	1e03      	subs	r3, r0, #0
     abc:	d1f9      	bne.n	ab2 <tc_init+0x40a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
     ac2:	68bb      	ldr	r3, [r7, #8]
     ac4:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	68fb      	ldr	r3, [r7, #12]
     aca:	0018      	movs	r0, r3
     acc:	4b07      	ldr	r3, [pc, #28]	; (aec <tc_init+0x444>)
     ace:	4798      	blx	r3
     ad0:	1e03      	subs	r3, r0, #0
     ad2:	d1f9      	bne.n	ac8 <tc_init+0x420>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     ad8:	68bb      	ldr	r3, [r7, #8]
     ada:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
     adc:	2300      	movs	r3, #0
     ade:	e000      	b.n	ae2 <tc_init+0x43a>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     ae0:	2317      	movs	r3, #23
}
     ae2:	0018      	movs	r0, r3
     ae4:	46bd      	mov	sp, r7
     ae6:	b00b      	add	sp, #44	; 0x2c
     ae8:	bd90      	pop	{r4, r7, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	00000639 	.word	0x00000639

00000af0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     af0:	b580      	push	{r7, lr}
     af2:	b086      	sub	sp, #24
     af4:	af00      	add	r7, sp, #0
     af6:	60f8      	str	r0, [r7, #12]
     af8:	607a      	str	r2, [r7, #4]
     afa:	230b      	movs	r3, #11
     afc:	18fb      	adds	r3, r7, r3
     afe:	1c0a      	adds	r2, r1, #0
     b00:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     b02:	68fb      	ldr	r3, [r7, #12]
     b04:	681b      	ldr	r3, [r3, #0]
     b06:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
     b08:	46c0      	nop			; (mov r8, r8)
     b0a:	68fb      	ldr	r3, [r7, #12]
     b0c:	0018      	movs	r0, r3
     b0e:	4b20      	ldr	r3, [pc, #128]	; (b90 <tc_set_compare_value+0xa0>)
     b10:	4798      	blx	r3
     b12:	1e03      	subs	r3, r0, #0
     b14:	d1f9      	bne.n	b0a <tc_set_compare_value+0x1a>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     b16:	68fb      	ldr	r3, [r7, #12]
     b18:	791b      	ldrb	r3, [r3, #4]
     b1a:	2b04      	cmp	r3, #4
     b1c:	d004      	beq.n	b28 <tc_set_compare_value+0x38>
     b1e:	2b08      	cmp	r3, #8
     b20:	d022      	beq.n	b68 <tc_set_compare_value+0x78>
     b22:	2b00      	cmp	r3, #0
     b24:	d010      	beq.n	b48 <tc_set_compare_value+0x58>
     b26:	e02e      	b.n	b86 <tc_set_compare_value+0x96>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
     b28:	230b      	movs	r3, #11
     b2a:	18fb      	adds	r3, r7, r3
     b2c:	781b      	ldrb	r3, [r3, #0]
     b2e:	2b01      	cmp	r3, #1
     b30:	d80a      	bhi.n	b48 <tc_set_compare_value+0x58>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
     b32:	230b      	movs	r3, #11
     b34:	18fb      	adds	r3, r7, r3
     b36:	781b      	ldrb	r3, [r3, #0]
						(uint8_t)compare;
     b38:	687a      	ldr	r2, [r7, #4]
     b3a:	b2d1      	uxtb	r1, r2
				tc_module->COUNT8.CC[channel_index].reg  =
     b3c:	697a      	ldr	r2, [r7, #20]
     b3e:	18d3      	adds	r3, r2, r3
     b40:	1c0a      	adds	r2, r1, #0
     b42:	761a      	strb	r2, [r3, #24]
				return STATUS_OK;
     b44:	2300      	movs	r3, #0
     b46:	e01f      	b.n	b88 <tc_set_compare_value+0x98>
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
     b48:	230b      	movs	r3, #11
     b4a:	18fb      	adds	r3, r7, r3
     b4c:	781b      	ldrb	r3, [r3, #0]
     b4e:	2b01      	cmp	r3, #1
     b50:	d80a      	bhi.n	b68 <tc_set_compare_value+0x78>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
     b52:	230b      	movs	r3, #11
     b54:	18fb      	adds	r3, r7, r3
     b56:	781a      	ldrb	r2, [r3, #0]
						(uint16_t)compare;
     b58:	687b      	ldr	r3, [r7, #4]
     b5a:	b299      	uxth	r1, r3
				tc_module->COUNT16.CC[channel_index].reg =
     b5c:	697b      	ldr	r3, [r7, #20]
     b5e:	320c      	adds	r2, #12
     b60:	0052      	lsls	r2, r2, #1
     b62:	52d1      	strh	r1, [r2, r3]
				return STATUS_OK;
     b64:	2300      	movs	r3, #0
     b66:	e00f      	b.n	b88 <tc_set_compare_value+0x98>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
     b68:	230b      	movs	r3, #11
     b6a:	18fb      	adds	r3, r7, r3
     b6c:	781b      	ldrb	r3, [r3, #0]
     b6e:	2b01      	cmp	r3, #1
     b70:	d809      	bhi.n	b86 <tc_set_compare_value+0x96>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
     b72:	230b      	movs	r3, #11
     b74:	18fb      	adds	r3, r7, r3
     b76:	781a      	ldrb	r2, [r3, #0]
     b78:	697b      	ldr	r3, [r7, #20]
     b7a:	3206      	adds	r2, #6
     b7c:	0092      	lsls	r2, r2, #2
     b7e:	6879      	ldr	r1, [r7, #4]
     b80:	50d1      	str	r1, [r2, r3]
						(uint32_t)compare;
				return STATUS_OK;
     b82:	2300      	movs	r3, #0
     b84:	e000      	b.n	b88 <tc_set_compare_value+0x98>
			}
	}

	return STATUS_ERR_INVALID_ARG;
     b86:	2317      	movs	r3, #23
}
     b88:	0018      	movs	r0, r3
     b8a:	46bd      	mov	sp, r7
     b8c:	b006      	add	sp, #24
     b8e:	bd80      	pop	{r7, pc}
     b90:	00000639 	.word	0x00000639

00000b94 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     b94:	b580      	push	{r7, lr}
     b96:	b084      	sub	sp, #16
     b98:	af00      	add	r7, sp, #0
     b9a:	0002      	movs	r2, r0
     b9c:	1dfb      	adds	r3, r7, #7
     b9e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     ba0:	230f      	movs	r3, #15
     ba2:	18fb      	adds	r3, r7, r3
     ba4:	1dfa      	adds	r2, r7, #7
     ba6:	7812      	ldrb	r2, [r2, #0]
     ba8:	09d2      	lsrs	r2, r2, #7
     baa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     bac:	230e      	movs	r3, #14
     bae:	18fb      	adds	r3, r7, r3
     bb0:	1dfa      	adds	r2, r7, #7
     bb2:	7812      	ldrb	r2, [r2, #0]
     bb4:	0952      	lsrs	r2, r2, #5
     bb6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     bb8:	4b0d      	ldr	r3, [pc, #52]	; (bf0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     bba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     bbc:	230f      	movs	r3, #15
     bbe:	18fb      	adds	r3, r7, r3
     bc0:	781b      	ldrb	r3, [r3, #0]
     bc2:	2b00      	cmp	r3, #0
     bc4:	d10f      	bne.n	be6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     bc6:	230f      	movs	r3, #15
     bc8:	18fb      	adds	r3, r7, r3
     bca:	781b      	ldrb	r3, [r3, #0]
     bcc:	009b      	lsls	r3, r3, #2
     bce:	2210      	movs	r2, #16
     bd0:	4694      	mov	ip, r2
     bd2:	44bc      	add	ip, r7
     bd4:	4463      	add	r3, ip
     bd6:	3b08      	subs	r3, #8
     bd8:	681a      	ldr	r2, [r3, #0]
     bda:	230e      	movs	r3, #14
     bdc:	18fb      	adds	r3, r7, r3
     bde:	781b      	ldrb	r3, [r3, #0]
     be0:	01db      	lsls	r3, r3, #7
     be2:	18d3      	adds	r3, r2, r3
     be4:	e000      	b.n	be8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     be6:	2300      	movs	r3, #0
	}
}
     be8:	0018      	movs	r0, r3
     bea:	46bd      	mov	sp, r7
     bec:	b004      	add	sp, #16
     bee:	bd80      	pop	{r7, pc}
     bf0:	41004400 	.word	0x41004400

00000bf4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     bf4:	b580      	push	{r7, lr}
     bf6:	b082      	sub	sp, #8
     bf8:	af00      	add	r7, sp, #0
     bfa:	0002      	movs	r2, r0
     bfc:	1dfb      	adds	r3, r7, #7
     bfe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     c00:	1dfb      	adds	r3, r7, #7
     c02:	781b      	ldrb	r3, [r3, #0]
     c04:	0018      	movs	r0, r3
     c06:	4b03      	ldr	r3, [pc, #12]	; (c14 <port_get_group_from_gpio_pin+0x20>)
     c08:	4798      	blx	r3
     c0a:	0003      	movs	r3, r0
}
     c0c:	0018      	movs	r0, r3
     c0e:	46bd      	mov	sp, r7
     c10:	b002      	add	sp, #8
     c12:	bd80      	pop	{r7, pc}
     c14:	00000b95 	.word	0x00000b95

00000c18 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     c18:	b580      	push	{r7, lr}
     c1a:	b082      	sub	sp, #8
     c1c:	af00      	add	r7, sp, #0
     c1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     c20:	687b      	ldr	r3, [r7, #4]
     c22:	2200      	movs	r2, #0
     c24:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	2201      	movs	r2, #1
     c2a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	2200      	movs	r2, #0
     c30:	709a      	strb	r2, [r3, #2]
}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	46bd      	mov	sp, r7
     c36:	b002      	add	sp, #8
     c38:	bd80      	pop	{r7, pc}
	...

00000c3c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b084      	sub	sp, #16
     c40:	af00      	add	r7, sp, #0
     c42:	0002      	movs	r2, r0
     c44:	1dfb      	adds	r3, r7, #7
     c46:	701a      	strb	r2, [r3, #0]
     c48:	1dbb      	adds	r3, r7, #6
     c4a:	1c0a      	adds	r2, r1, #0
     c4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     c4e:	1dfb      	adds	r3, r7, #7
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	0018      	movs	r0, r3
     c54:	4b0d      	ldr	r3, [pc, #52]	; (c8c <port_pin_set_output_level+0x50>)
     c56:	4798      	blx	r3
     c58:	0003      	movs	r3, r0
     c5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c5c:	1dfb      	adds	r3, r7, #7
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	221f      	movs	r2, #31
     c62:	4013      	ands	r3, r2
     c64:	2201      	movs	r2, #1
     c66:	409a      	lsls	r2, r3
     c68:	0013      	movs	r3, r2
     c6a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     c6c:	1dbb      	adds	r3, r7, #6
     c6e:	781b      	ldrb	r3, [r3, #0]
     c70:	2b00      	cmp	r3, #0
     c72:	d003      	beq.n	c7c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     c74:	68fb      	ldr	r3, [r7, #12]
     c76:	68ba      	ldr	r2, [r7, #8]
     c78:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     c7a:	e002      	b.n	c82 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     c7c:	68fb      	ldr	r3, [r7, #12]
     c7e:	68ba      	ldr	r2, [r7, #8]
     c80:	615a      	str	r2, [r3, #20]
}
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	46bd      	mov	sp, r7
     c86:	b004      	add	sp, #16
     c88:	bd80      	pop	{r7, pc}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	00000bf5 	.word	0x00000bf5

00000c90 <system_interrupt_enable_global>:
{
     c90:	b580      	push	{r7, lr}
     c92:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     c94:	4b04      	ldr	r3, [pc, #16]	; (ca8 <system_interrupt_enable_global+0x18>)
     c96:	2201      	movs	r2, #1
     c98:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     c9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c9e:	b662      	cpsie	i
}
     ca0:	46c0      	nop			; (mov r8, r8)
     ca2:	46bd      	mov	sp, r7
     ca4:	bd80      	pop	{r7, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	20000000 	.word	0x20000000

00000cac <tc_is_syncing>:
{
     cac:	b580      	push	{r7, lr}
     cae:	b084      	sub	sp, #16
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cba:	68fb      	ldr	r3, [r7, #12]
     cbc:	7bdb      	ldrb	r3, [r3, #15]
     cbe:	b2db      	uxtb	r3, r3
     cc0:	001a      	movs	r2, r3
     cc2:	2380      	movs	r3, #128	; 0x80
     cc4:	4013      	ands	r3, r2
     cc6:	1e5a      	subs	r2, r3, #1
     cc8:	4193      	sbcs	r3, r2
     cca:	b2db      	uxtb	r3, r3
}
     ccc:	0018      	movs	r0, r3
     cce:	46bd      	mov	sp, r7
     cd0:	b004      	add	sp, #16
     cd2:	bd80      	pop	{r7, pc}

00000cd4 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
     cd4:	b580      	push	{r7, lr}
     cd6:	b082      	sub	sp, #8
     cd8:	af00      	add	r7, sp, #0
     cda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     cdc:	687b      	ldr	r3, [r7, #4]
     cde:	2200      	movs	r2, #0
     ce0:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	2200      	movs	r2, #0
     ce6:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	2200      	movs	r2, #0
     cec:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	2200      	movs	r2, #0
     cf2:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	2200      	movs	r2, #0
     cf8:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	2200      	movs	r2, #0
     cfe:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	2200      	movs	r2, #0
     d04:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	2200      	movs	r2, #0
     d0a:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	2200      	movs	r2, #0
     d10:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	2200      	movs	r2, #0
     d16:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	2200      	movs	r2, #0
     d1c:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	2200      	movs	r2, #0
     d22:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	2200      	movs	r2, #0
     d28:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	2200      	movs	r2, #0
     d2e:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	2200      	movs	r2, #0
     d34:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	2200      	movs	r2, #0
     d3a:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     d3c:	687b      	ldr	r3, [r7, #4]
     d3e:	2200      	movs	r2, #0
     d40:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     d42:	687b      	ldr	r3, [r7, #4]
     d44:	2200      	movs	r2, #0
     d46:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	2200      	movs	r2, #0
     d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	2200      	movs	r2, #0
     d52:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
     d54:	46c0      	nop			; (mov r8, r8)
     d56:	46bd      	mov	sp, r7
     d58:	b002      	add	sp, #8
     d5a:	bd80      	pop	{r7, pc}

00000d5c <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	b084      	sub	sp, #16
     d60:	af00      	add	r7, sp, #0
     d62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	687b      	ldr	r3, [r7, #4]
     d6e:	0018      	movs	r0, r3
     d70:	4b07      	ldr	r3, [pc, #28]	; (d90 <tc_enable+0x34>)
     d72:	4798      	blx	r3
     d74:	1e03      	subs	r3, r0, #0
     d76:	d1f9      	bne.n	d6c <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     d78:	68fb      	ldr	r3, [r7, #12]
     d7a:	881b      	ldrh	r3, [r3, #0]
     d7c:	b29b      	uxth	r3, r3
     d7e:	2202      	movs	r2, #2
     d80:	4313      	orrs	r3, r2
     d82:	b29a      	uxth	r2, r3
     d84:	68fb      	ldr	r3, [r7, #12]
     d86:	801a      	strh	r2, [r3, #0]
}
     d88:	46c0      	nop			; (mov r8, r8)
     d8a:	46bd      	mov	sp, r7
     d8c:	b004      	add	sp, #16
     d8e:	bd80      	pop	{r7, pc}
     d90:	00000cad 	.word	0x00000cad

00000d94 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
     d94:	b580      	push	{r7, lr}
     d96:	b084      	sub	sp, #16
     d98:	af00      	add	r7, sp, #0
     d9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	681b      	ldr	r3, [r3, #0]
     da0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	0018      	movs	r0, r3
     da8:	4b0a      	ldr	r3, [pc, #40]	; (dd4 <tc_disable+0x40>)
     daa:	4798      	blx	r3
     dac:	1e03      	subs	r3, r0, #0
     dae:	d1f9      	bne.n	da4 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     db0:	68fb      	ldr	r3, [r7, #12]
     db2:	223b      	movs	r2, #59	; 0x3b
     db4:	731a      	strb	r2, [r3, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     db6:	68fb      	ldr	r3, [r7, #12]
     db8:	223b      	movs	r2, #59	; 0x3b
     dba:	739a      	strb	r2, [r3, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     dbc:	68fb      	ldr	r3, [r7, #12]
     dbe:	881b      	ldrh	r3, [r3, #0]
     dc0:	b29b      	uxth	r3, r3
     dc2:	2202      	movs	r2, #2
     dc4:	4393      	bics	r3, r2
     dc6:	b29a      	uxth	r2, r3
     dc8:	68fb      	ldr	r3, [r7, #12]
     dca:	801a      	strh	r2, [r3, #0]
}
     dcc:	46c0      	nop			; (mov r8, r8)
     dce:	46bd      	mov	sp, r7
     dd0:	b004      	add	sp, #16
     dd2:	bd80      	pop	{r7, pc}
     dd4:	00000cad 	.word	0x00000cad

00000dd8 <configure_extint_channel>:

 #define BUTTON_0_EIC_LINE_custom		1


 void configure_extint_channel(void)
 {
     dd8:	b580      	push	{r7, lr}
     dda:	b084      	sub	sp, #16
     ddc:	af00      	add	r7, sp, #0

	 struct extint_chan_conf config_extint_chan;
	 extint_chan_get_config_defaults(&config_extint_chan);
     dde:	1d3b      	adds	r3, r7, #4
     de0:	0018      	movs	r0, r3
     de2:	4b0d      	ldr	r3, [pc, #52]	; (e18 <configure_extint_channel+0x40>)
     de4:	4798      	blx	r3

	 config_extint_chan.gpio_pin           = PIN_PA15A_EIC_EXTINT1;
     de6:	1d3b      	adds	r3, r7, #4
     de8:	220f      	movs	r2, #15
     dea:	601a      	str	r2, [r3, #0]
	 config_extint_chan.gpio_pin_mux       = MUX_PA15A_EIC_EXTINT1;
     dec:	1d3b      	adds	r3, r7, #4
     dee:	2200      	movs	r2, #0
     df0:	605a      	str	r2, [r3, #4]
	 config_extint_chan.wake_if_sleeping   = true;
     df2:	1d3b      	adds	r3, r7, #4
     df4:	2201      	movs	r2, #1
     df6:	725a      	strb	r2, [r3, #9]

	 config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     df8:	1d3b      	adds	r3, r7, #4
     dfa:	2201      	movs	r2, #1
     dfc:	721a      	strb	r2, [r3, #8]
	 config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     dfe:	1d3b      	adds	r3, r7, #4
     e00:	2202      	movs	r2, #2
     e02:	72da      	strb	r2, [r3, #11]
	 extint_chan_set_config(BUTTON_0_EIC_LINE_custom, &config_extint_chan);
     e04:	1d3b      	adds	r3, r7, #4
     e06:	0019      	movs	r1, r3
     e08:	2001      	movs	r0, #1
     e0a:	4b04      	ldr	r3, [pc, #16]	; (e1c <configure_extint_channel+0x44>)
     e0c:	4798      	blx	r3

 }
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	46bd      	mov	sp, r7
     e12:	b004      	add	sp, #16
     e14:	bd80      	pop	{r7, pc}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	0000038d 	.word	0x0000038d
     e1c:	000003c1 	.word	0x000003c1

00000e20 <configure_extint_callbacks>:

 long_press_var = 0;


 void configure_extint_callbacks(void)
 {
     e20:	b580      	push	{r7, lr}
     e22:	af00      	add	r7, sp, #0
	 
	 
	 extint_register_callback(extint_detection_callback,
     e24:	4b06      	ldr	r3, [pc, #24]	; (e40 <configure_extint_callbacks+0x20>)
     e26:	2200      	movs	r2, #0
     e28:	2101      	movs	r1, #1
     e2a:	0018      	movs	r0, r3
     e2c:	4b05      	ldr	r3, [pc, #20]	; (e44 <configure_extint_callbacks+0x24>)
     e2e:	4798      	blx	r3
	 BUTTON_0_EIC_LINE_custom,
	 EXTINT_CALLBACK_TYPE_DETECT);

	 extint_chan_enable_callback(BUTTON_0_EIC_LINE_custom,
     e30:	2100      	movs	r1, #0
     e32:	2001      	movs	r0, #1
     e34:	4b04      	ldr	r3, [pc, #16]	; (e48 <configure_extint_callbacks+0x28>)
     e36:	4798      	blx	r3
	 EXTINT_CALLBACK_TYPE_DETECT);
 }
     e38:	46c0      	nop			; (mov r8, r8)
     e3a:	46bd      	mov	sp, r7
     e3c:	bd80      	pop	{r7, pc}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	000010d5 	.word	0x000010d5
     e44:	00001201 	.word	0x00001201
     e48:	00001265 	.word	0x00001265

00000e4c <configure_pwm_generator>:
 bool pulsating_motor_routine = false;
 uint8_t motor_toggle_count = 0;
 bool motor_running = false;

 void configure_pwm_generator (void)
 {
     e4c:	b580      	push	{r7, lr}
     e4e:	b08e      	sub	sp, #56	; 0x38
     e50:	af00      	add	r7, sp, #0
	 struct tc_config config_tc;
	 tc_get_config_defaults (&config_tc);
     e52:	1d3b      	adds	r3, r7, #4
     e54:	0018      	movs	r0, r3
     e56:	4b17      	ldr	r3, [pc, #92]	; (eb4 <configure_pwm_generator+0x68>)
     e58:	4798      	blx	r3

	 config_tc.clock_source = TC_CLOCK_SOURCE;
     e5a:	1d3b      	adds	r3, r7, #4
     e5c:	2200      	movs	r2, #0
     e5e:	701a      	strb	r2, [r3, #0]
	 config_tc.counter_size = TC_COUNTER_SIZE;
     e60:	1d3b      	adds	r3, r7, #4
     e62:	2204      	movs	r2, #4
     e64:	709a      	strb	r2, [r3, #2]
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     e66:	1d3b      	adds	r3, r7, #4
     e68:	22a0      	movs	r2, #160	; 0xa0
     e6a:	00d2      	lsls	r2, r2, #3
     e6c:	809a      	strh	r2, [r3, #4]

	 config_tc.counter_8_bit.value = 0;
     e6e:	1d3b      	adds	r3, r7, #4
     e70:	2228      	movs	r2, #40	; 0x28
     e72:	2100      	movs	r1, #0
     e74:	5499      	strb	r1, [r3, r2]
	 config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     e76:	1d3b      	adds	r3, r7, #4
     e78:	2229      	movs	r2, #41	; 0x29
     e7a:	2155      	movs	r1, #85	; 0x55
     e7c:	5499      	strb	r1, [r3, r2]

	 config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     e7e:	1d3b      	adds	r3, r7, #4
     e80:	222a      	movs	r2, #42	; 0x2a
     e82:	2115      	movs	r1, #21
     e84:	5499      	strb	r1, [r3, r2]

	 config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     e86:	1d3b      	adds	r3, r7, #4
     e88:	2240      	movs	r2, #64	; 0x40
     e8a:	719a      	strb	r2, [r3, #6]
	 config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     e8c:	1d3b      	adds	r3, r7, #4
     e8e:	220a      	movs	r2, #10
     e90:	615a      	str	r2, [r3, #20]
	 config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     e92:	1d3b      	adds	r3, r7, #4
     e94:	2204      	movs	r2, #4
     e96:	619a      	str	r2, [r3, #24]

	 config_tc.pwm_channel[0].enabled = true;
     e98:	1d3b      	adds	r3, r7, #4
     e9a:	2201      	movs	r2, #1
     e9c:	741a      	strb	r2, [r3, #16]
	 
	 tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     e9e:	1d3a      	adds	r2, r7, #4
     ea0:	4905      	ldr	r1, [pc, #20]	; (eb8 <configure_pwm_generator+0x6c>)
     ea2:	4b06      	ldr	r3, [pc, #24]	; (ebc <configure_pwm_generator+0x70>)
     ea4:	0018      	movs	r0, r3
     ea6:	4b06      	ldr	r3, [pc, #24]	; (ec0 <configure_pwm_generator+0x74>)
     ea8:	4798      	blx	r3
 }
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	46bd      	mov	sp, r7
     eae:	b00e      	add	sp, #56	; 0x38
     eb0:	bd80      	pop	{r7, pc}
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	00000cd5 	.word	0x00000cd5
     eb8:	42001c00 	.word	0x42001c00
     ebc:	200000a8 	.word	0x200000a8
     ec0:	000006a9 	.word	0x000006a9

00000ec4 <motor_enable>:



 void motor_enable(void){
     ec4:	b580      	push	{r7, lr}
     ec6:	af00      	add	r7, sp, #0
	 tc_enable(&pwm_generator_instance);
     ec8:	4b06      	ldr	r3, [pc, #24]	; (ee4 <motor_enable+0x20>)
     eca:	0018      	movs	r0, r3
     ecc:	4b06      	ldr	r3, [pc, #24]	; (ee8 <motor_enable+0x24>)
     ece:	4798      	blx	r3
	 port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
     ed0:	2101      	movs	r1, #1
     ed2:	2006      	movs	r0, #6
     ed4:	4b05      	ldr	r3, [pc, #20]	; (eec <motor_enable+0x28>)
     ed6:	4798      	blx	r3
	 motor_running = true;
     ed8:	4b05      	ldr	r3, [pc, #20]	; (ef0 <motor_enable+0x2c>)
     eda:	2201      	movs	r2, #1
     edc:	701a      	strb	r2, [r3, #0]
	 //set_motor_speed_1_indication();

 }
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	46bd      	mov	sp, r7
     ee2:	bd80      	pop	{r7, pc}
     ee4:	200000a8 	.word	0x200000a8
     ee8:	00000d5d 	.word	0x00000d5d
     eec:	00000c3d 	.word	0x00000c3d
     ef0:	20000022 	.word	0x20000022

00000ef4 <motor_disable>:


 void motor_disable(void){
     ef4:	b580      	push	{r7, lr}
     ef6:	af00      	add	r7, sp, #0
	 pulsating_motor_routine = false;
     ef8:	4b0c      	ldr	r3, [pc, #48]	; (f2c <motor_disable+0x38>)
     efa:	2200      	movs	r2, #0
     efc:	701a      	strb	r2, [r3, #0]
	 motor_toggle_count = 0;
     efe:	4b0c      	ldr	r3, [pc, #48]	; (f30 <motor_disable+0x3c>)
     f00:	2200      	movs	r2, #0
     f02:	701a      	strb	r2, [r3, #0]
	 motor_running = false;
     f04:	4b0b      	ldr	r3, [pc, #44]	; (f34 <motor_disable+0x40>)
     f06:	2200      	movs	r2, #0
     f08:	701a      	strb	r2, [r3, #0]

	 tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     f0a:	4b0b      	ldr	r3, [pc, #44]	; (f38 <motor_disable+0x44>)
     f0c:	2215      	movs	r2, #21
     f0e:	2100      	movs	r1, #0
     f10:	0018      	movs	r0, r3
     f12:	4b0a      	ldr	r3, [pc, #40]	; (f3c <motor_disable+0x48>)
     f14:	4798      	blx	r3
	 tc_disable (&pwm_generator_instance);
     f16:	4b08      	ldr	r3, [pc, #32]	; (f38 <motor_disable+0x44>)
     f18:	0018      	movs	r0, r3
     f1a:	4b09      	ldr	r3, [pc, #36]	; (f40 <motor_disable+0x4c>)
     f1c:	4798      	blx	r3
	 port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
     f1e:	2100      	movs	r1, #0
     f20:	2006      	movs	r0, #6
     f22:	4b08      	ldr	r3, [pc, #32]	; (f44 <motor_disable+0x50>)
     f24:	4798      	blx	r3

 }
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	46bd      	mov	sp, r7
     f2a:	bd80      	pop	{r7, pc}
     f2c:	20000020 	.word	0x20000020
     f30:	20000021 	.word	0x20000021
     f34:	20000022 	.word	0x20000022
     f38:	200000a8 	.word	0x200000a8
     f3c:	00000af1 	.word	0x00000af1
     f40:	00000d95 	.word	0x00000d95
     f44:	00000c3d 	.word	0x00000c3d

00000f48 <configure_port_pins>:


 void configure_port_pins(void)
{
     f48:	b580      	push	{r7, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
     f4e:	1d3b      	adds	r3, r7, #4
     f50:	0018      	movs	r0, r3
     f52:	4b33      	ldr	r3, [pc, #204]	; (1020 <configure_port_pins+0xd8>)
     f54:	4798      	blx	r3
	-Disable pull-up
	- check level on line to detect if VBUS is high and USB cable is present.
	
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     f56:	1d3b      	adds	r3, r7, #4
     f58:	2200      	movs	r2, #0
     f5a:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     f5c:	1d3b      	adds	r3, r7, #4
     f5e:	2202      	movs	r2, #2
     f60:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     f62:	1d3b      	adds	r3, r7, #4
     f64:	0019      	movs	r1, r3
     f66:	201b      	movs	r0, #27
     f68:	4b2e      	ldr	r3, [pc, #184]	; (1024 <configure_port_pins+0xdc>)
     f6a:	4798      	blx	r3
	
	MOTOR'S NSLEEP PIN
	
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     f6c:	1d3b      	adds	r3, r7, #4
     f6e:	2201      	movs	r2, #1
     f70:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     f72:	1d3b      	adds	r3, r7, #4
     f74:	2202      	movs	r2, #2
     f76:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     f78:	1d3b      	adds	r3, r7, #4
     f7a:	0019      	movs	r1, r3
     f7c:	2006      	movs	r0, #6
     f7e:	4b29      	ldr	r3, [pc, #164]	; (1024 <configure_port_pins+0xdc>)
     f80:	4798      	blx	r3
	
	shutdown routine -- turn PA07 low to turn off peripherals
	
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     f82:	1d3b      	adds	r3, r7, #4
     f84:	2201      	movs	r2, #1
     f86:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;								// START AT PULL UP.
     f88:	1d3b      	adds	r3, r7, #4
     f8a:	2201      	movs	r2, #1
     f8c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     f8e:	1d3b      	adds	r3, r7, #4
     f90:	0019      	movs	r1, r3
     f92:	2007      	movs	r0, #7
     f94:	4b23      	ldr	r3, [pc, #140]	; (1024 <configure_port_pins+0xdc>)
     f96:	4798      	blx	r3
	
	BUTTON 2
	
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     f98:	1d3b      	adds	r3, r7, #4
     f9a:	2200      	movs	r2, #0
     f9c:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     f9e:	1d3b      	adds	r3, r7, #4
     fa0:	2202      	movs	r2, #2
     fa2:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
     fa4:	1d3b      	adds	r3, r7, #4
     fa6:	0019      	movs	r1, r3
     fa8:	200f      	movs	r0, #15
     faa:	4b1e      	ldr	r3, [pc, #120]	; (1024 <configure_port_pins+0xdc>)
     fac:	4798      	blx	r3
	
	/*
	GET_CHARGING_STATUS
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     fae:	1d3b      	adds	r3, r7, #4
     fb0:	2200      	movs	r2, #0
     fb2:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     fb4:	1d3b      	adds	r3, r7, #4
     fb6:	2202      	movs	r2, #2
     fb8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CHARGING_PIN, &config_port_pin);
     fba:	1d3b      	adds	r3, r7, #4
     fbc:	0019      	movs	r1, r3
     fbe:	200b      	movs	r0, #11
     fc0:	4b18      	ldr	r3, [pc, #96]	; (1024 <configure_port_pins+0xdc>)
     fc2:	4798      	blx	r3
	
	/*
	GET_CHARGING_OFF_STATUS
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     fc4:	1d3b      	adds	r3, r7, #4
     fc6:	2201      	movs	r2, #1
     fc8:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     fca:	1d3b      	adds	r3, r7, #4
     fcc:	2202      	movs	r2, #2
     fce:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     fd0:	1d3b      	adds	r3, r7, #4
     fd2:	0019      	movs	r1, r3
     fd4:	2003      	movs	r0, #3
     fd6:	4b13      	ldr	r3, [pc, #76]	; (1024 <configure_port_pins+0xdc>)
     fd8:	4798      	blx	r3
	
	/*
	SAMPLE ADC PIN
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     fda:	1d3b      	adds	r3, r7, #4
     fdc:	2200      	movs	r2, #0
     fde:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     fe0:	1d3b      	adds	r3, r7, #4
     fe2:	2202      	movs	r2, #2
     fe4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SAMPLE_ADC_PIN, &config_port_pin);
     fe6:	1d3b      	adds	r3, r7, #4
     fe8:	0019      	movs	r1, r3
     fea:	2002      	movs	r0, #2
     fec:	4b0d      	ldr	r3, [pc, #52]	; (1024 <configure_port_pins+0xdc>)
     fee:	4798      	blx	r3
	


	/* Configure LEDs as outputs, turn them off */
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     ff0:	1d3b      	adds	r3, r7, #4
     ff2:	2201      	movs	r2, #1
     ff4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(XPLAINED_LED, &config_port_pin);
     ff6:	1d3b      	adds	r3, r7, #4
     ff8:	0019      	movs	r1, r3
     ffa:	2010      	movs	r0, #16
     ffc:	4b09      	ldr	r3, [pc, #36]	; (1024 <configure_port_pins+0xdc>)
     ffe:	4798      	blx	r3

	///* Set buttons as inputs */
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1000:	1d3b      	adds	r3, r7, #4
    1002:	2200      	movs	r2, #0
    1004:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1006:	1d3b      	adds	r3, r7, #4
    1008:	2201      	movs	r2, #1
    100a:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_1, &config_port_pin);
    100c:	1d3b      	adds	r3, r7, #4
    100e:	0019      	movs	r1, r3
    1010:	200e      	movs	r0, #14
    1012:	4b04      	ldr	r3, [pc, #16]	; (1024 <configure_port_pins+0xdc>)
    1014:	4798      	blx	r3


}
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	46bd      	mov	sp, r7
    101a:	b002      	add	sp, #8
    101c:	bd80      	pop	{r7, pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00000c19 	.word	0x00000c19
    1024:	00001521 	.word	0x00001521

00001028 <cycle_pwm_motor>:



 
 void cycle_pwm_motor (void)
 {
    1028:	b580      	push	{r7, lr}
    102a:	af00      	add	r7, sp, #0


		 if (motor_running)
    102c:	4b22      	ldr	r3, [pc, #136]	; (10b8 <cycle_pwm_motor+0x90>)
    102e:	781b      	ldrb	r3, [r3, #0]
    1030:	2b00      	cmp	r3, #0
    1032:	d03c      	beq.n	10ae <cycle_pwm_motor+0x86>
		 {
			 
			 if (motor_toggle_count == 2)
    1034:	4b21      	ldr	r3, [pc, #132]	; (10bc <cycle_pwm_motor+0x94>)
    1036:	781b      	ldrb	r3, [r3, #0]
    1038:	2b02      	cmp	r3, #2
    103a:	d10c      	bne.n	1056 <cycle_pwm_motor+0x2e>
			 {
				 tc_set_compare_value (&pwm_generator_instance,
    103c:	4b20      	ldr	r3, [pc, #128]	; (10c0 <cycle_pwm_motor+0x98>)
    103e:	2222      	movs	r2, #34	; 0x22
    1040:	2100      	movs	r1, #0
    1042:	0018      	movs	r0, r3
    1044:	4b1f      	ldr	r3, [pc, #124]	; (10c4 <cycle_pwm_motor+0x9c>)
    1046:	4798      	blx	r3
				 TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
				 motor_toggle_count += 1;
    1048:	4b1c      	ldr	r3, [pc, #112]	; (10bc <cycle_pwm_motor+0x94>)
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	3301      	adds	r3, #1
    104e:	b2da      	uxtb	r2, r3
    1050:	4b1a      	ldr	r3, [pc, #104]	; (10bc <cycle_pwm_motor+0x94>)
    1052:	701a      	strb	r2, [r3, #0]
			 }
		 } else {
			motor_enable();
		 }

 }
    1054:	e02d      	b.n	10b2 <cycle_pwm_motor+0x8a>
			 else if (motor_toggle_count == 3)
    1056:	4b19      	ldr	r3, [pc, #100]	; (10bc <cycle_pwm_motor+0x94>)
    1058:	781b      	ldrb	r3, [r3, #0]
    105a:	2b03      	cmp	r3, #3
    105c:	d10c      	bne.n	1078 <cycle_pwm_motor+0x50>
				 tc_set_compare_value (&pwm_generator_instance,
    105e:	4b18      	ldr	r3, [pc, #96]	; (10c0 <cycle_pwm_motor+0x98>)
    1060:	224d      	movs	r2, #77	; 0x4d
    1062:	2100      	movs	r1, #0
    1064:	0018      	movs	r0, r3
    1066:	4b17      	ldr	r3, [pc, #92]	; (10c4 <cycle_pwm_motor+0x9c>)
    1068:	4798      	blx	r3
				 motor_toggle_count += 1;
    106a:	4b14      	ldr	r3, [pc, #80]	; (10bc <cycle_pwm_motor+0x94>)
    106c:	781b      	ldrb	r3, [r3, #0]
    106e:	3301      	adds	r3, #1
    1070:	b2da      	uxtb	r2, r3
    1072:	4b12      	ldr	r3, [pc, #72]	; (10bc <cycle_pwm_motor+0x94>)
    1074:	701a      	strb	r2, [r3, #0]
 }
    1076:	e01c      	b.n	10b2 <cycle_pwm_motor+0x8a>
			 else if (motor_toggle_count == 4)
    1078:	4b10      	ldr	r3, [pc, #64]	; (10bc <cycle_pwm_motor+0x94>)
    107a:	781b      	ldrb	r3, [r3, #0]
    107c:	2b04      	cmp	r3, #4
    107e:	d10f      	bne.n	10a0 <cycle_pwm_motor+0x78>
				 pulsating_motor_routine = true;
    1080:	4b11      	ldr	r3, [pc, #68]	; (10c8 <cycle_pwm_motor+0xa0>)
    1082:	2201      	movs	r2, #1
    1084:	701a      	strb	r2, [r3, #0]
				 tc_set_compare_value (&pwm_generator_instance,
    1086:	4b0e      	ldr	r3, [pc, #56]	; (10c0 <cycle_pwm_motor+0x98>)
    1088:	224d      	movs	r2, #77	; 0x4d
    108a:	2100      	movs	r1, #0
    108c:	0018      	movs	r0, r3
    108e:	4b0d      	ldr	r3, [pc, #52]	; (10c4 <cycle_pwm_motor+0x9c>)
    1090:	4798      	blx	r3
				 motor_toggle_count += 1;
    1092:	4b0a      	ldr	r3, [pc, #40]	; (10bc <cycle_pwm_motor+0x94>)
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	3301      	adds	r3, #1
    1098:	b2da      	uxtb	r2, r3
    109a:	4b08      	ldr	r3, [pc, #32]	; (10bc <cycle_pwm_motor+0x94>)
    109c:	701a      	strb	r2, [r3, #0]
 }
    109e:	e008      	b.n	10b2 <cycle_pwm_motor+0x8a>
			 else if (motor_toggle_count > 4)
    10a0:	4b06      	ldr	r3, [pc, #24]	; (10bc <cycle_pwm_motor+0x94>)
    10a2:	781b      	ldrb	r3, [r3, #0]
    10a4:	2b04      	cmp	r3, #4
    10a6:	d904      	bls.n	10b2 <cycle_pwm_motor+0x8a>
				 motor_disable();
    10a8:	4b08      	ldr	r3, [pc, #32]	; (10cc <cycle_pwm_motor+0xa4>)
    10aa:	4798      	blx	r3
 }
    10ac:	e001      	b.n	10b2 <cycle_pwm_motor+0x8a>
			motor_enable();
    10ae:	4b08      	ldr	r3, [pc, #32]	; (10d0 <cycle_pwm_motor+0xa8>)
    10b0:	4798      	blx	r3
 }
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	46bd      	mov	sp, r7
    10b6:	bd80      	pop	{r7, pc}
    10b8:	20000022 	.word	0x20000022
    10bc:	20000021 	.word	0x20000021
    10c0:	200000a8 	.word	0x200000a8
    10c4:	00000af1 	.word	0x00000af1
    10c8:	20000020 	.word	0x20000020
    10cc:	00000ef5 	.word	0x00000ef5
    10d0:	00000ec5 	.word	0x00000ec5

000010d4 <extint_detection_callback>:




 void extint_detection_callback(void)
 {
    10d4:	b580      	push	{r7, lr}
    10d6:	af00      	add	r7, sp, #0





	cycle_pwm_motor();
    10d8:	4b02      	ldr	r3, [pc, #8]	; (10e4 <extint_detection_callback+0x10>)
    10da:	4798      	blx	r3

 }
    10dc:	46c0      	nop			; (mov r8, r8)
    10de:	46bd      	mov	sp, r7
    10e0:	bd80      	pop	{r7, pc}
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	00001029 	.word	0x00001029

000010e8 <main>:


 int main(void)
 {
    10e8:	b580      	push	{r7, lr}
    10ea:	af00      	add	r7, sp, #0
		system_init();
    10ec:	4b09      	ldr	r3, [pc, #36]	; (1114 <main+0x2c>)
    10ee:	4798      	blx	r3
		configure_port_pins();
    10f0:	4b09      	ldr	r3, [pc, #36]	; (1118 <main+0x30>)
    10f2:	4798      	blx	r3
		configure_extint_channel();
    10f4:	4b09      	ldr	r3, [pc, #36]	; (111c <main+0x34>)
    10f6:	4798      	blx	r3
		configure_extint_callbacks();
    10f8:	4b09      	ldr	r3, [pc, #36]	; (1120 <main+0x38>)
    10fa:	4798      	blx	r3
		system_interrupt_enable_global();
    10fc:	4b09      	ldr	r3, [pc, #36]	; (1124 <main+0x3c>)
    10fe:	4798      	blx	r3
		configure_pwm_generator();
    1100:	4b09      	ldr	r3, [pc, #36]	; (1128 <main+0x40>)
    1102:	4798      	blx	r3
		motor_running = true;
    1104:	4b09      	ldr	r3, [pc, #36]	; (112c <main+0x44>)
    1106:	2201      	movs	r2, #1
    1108:	701a      	strb	r2, [r3, #0]
		motor_toggle_count = 2;
    110a:	4b09      	ldr	r3, [pc, #36]	; (1130 <main+0x48>)
    110c:	2202      	movs	r2, #2
    110e:	701a      	strb	r2, [r3, #0]
		//motor_enable();
	 //system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
	 //system_sleep();
	 while (true) {
    1110:	e7fe      	b.n	1110 <main+0x28>
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	00001e81 	.word	0x00001e81
    1118:	00000f49 	.word	0x00000f49
    111c:	00000dd9 	.word	0x00000dd9
    1120:	00000e21 	.word	0x00000e21
    1124:	00000c91 	.word	0x00000c91
    1128:	00000e4d 	.word	0x00000e4d
    112c:	20000022 	.word	0x20000022
    1130:	20000021 	.word	0x20000021

00001134 <_extint_get_eic_from_channel>:
{
    1134:	b580      	push	{r7, lr}
    1136:	b084      	sub	sp, #16
    1138:	af00      	add	r7, sp, #0
    113a:	0002      	movs	r2, r0
    113c:	1dfb      	adds	r3, r7, #7
    113e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    1140:	230f      	movs	r3, #15
    1142:	18fb      	adds	r3, r7, r3
    1144:	1dfa      	adds	r2, r7, #7
    1146:	7812      	ldrb	r2, [r2, #0]
    1148:	0952      	lsrs	r2, r2, #5
    114a:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    114c:	230f      	movs	r3, #15
    114e:	18fb      	adds	r3, r7, r3
    1150:	781b      	ldrb	r3, [r3, #0]
    1152:	2b00      	cmp	r3, #0
    1154:	d10c      	bne.n	1170 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1156:	4b09      	ldr	r3, [pc, #36]	; (117c <_extint_get_eic_from_channel+0x48>)
    1158:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    115a:	230f      	movs	r3, #15
    115c:	18fb      	adds	r3, r7, r3
    115e:	781b      	ldrb	r3, [r3, #0]
    1160:	009b      	lsls	r3, r3, #2
    1162:	2210      	movs	r2, #16
    1164:	4694      	mov	ip, r2
    1166:	44bc      	add	ip, r7
    1168:	4463      	add	r3, ip
    116a:	3b08      	subs	r3, #8
    116c:	681b      	ldr	r3, [r3, #0]
    116e:	e000      	b.n	1172 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    1170:	2300      	movs	r3, #0
}
    1172:	0018      	movs	r0, r3
    1174:	46bd      	mov	sp, r7
    1176:	b004      	add	sp, #16
    1178:	bd80      	pop	{r7, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	40001800 	.word	0x40001800

00001180 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    1180:	b580      	push	{r7, lr}
    1182:	b084      	sub	sp, #16
    1184:	af00      	add	r7, sp, #0
    1186:	0002      	movs	r2, r0
    1188:	1dfb      	adds	r3, r7, #7
    118a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    118c:	1dfb      	adds	r3, r7, #7
    118e:	781b      	ldrb	r3, [r3, #0]
    1190:	0018      	movs	r0, r3
    1192:	4b0b      	ldr	r3, [pc, #44]	; (11c0 <extint_chan_is_detected+0x40>)
    1194:	4798      	blx	r3
    1196:	0003      	movs	r3, r0
    1198:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    119a:	1dfb      	adds	r3, r7, #7
    119c:	781b      	ldrb	r3, [r3, #0]
    119e:	221f      	movs	r2, #31
    11a0:	4013      	ands	r3, r2
    11a2:	2201      	movs	r2, #1
    11a4:	409a      	lsls	r2, r3
    11a6:	0013      	movs	r3, r2
    11a8:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    11aa:	68fb      	ldr	r3, [r7, #12]
    11ac:	691b      	ldr	r3, [r3, #16]
    11ae:	68ba      	ldr	r2, [r7, #8]
    11b0:	4013      	ands	r3, r2
    11b2:	1e5a      	subs	r2, r3, #1
    11b4:	4193      	sbcs	r3, r2
    11b6:	b2db      	uxtb	r3, r3
}
    11b8:	0018      	movs	r0, r3
    11ba:	46bd      	mov	sp, r7
    11bc:	b004      	add	sp, #16
    11be:	bd80      	pop	{r7, pc}
    11c0:	00001135 	.word	0x00001135

000011c4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b084      	sub	sp, #16
    11c8:	af00      	add	r7, sp, #0
    11ca:	0002      	movs	r2, r0
    11cc:	1dfb      	adds	r3, r7, #7
    11ce:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    11d0:	1dfb      	adds	r3, r7, #7
    11d2:	781b      	ldrb	r3, [r3, #0]
    11d4:	0018      	movs	r0, r3
    11d6:	4b09      	ldr	r3, [pc, #36]	; (11fc <extint_chan_clear_detected+0x38>)
    11d8:	4798      	blx	r3
    11da:	0003      	movs	r3, r0
    11dc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    11de:	1dfb      	adds	r3, r7, #7
    11e0:	781b      	ldrb	r3, [r3, #0]
    11e2:	221f      	movs	r2, #31
    11e4:	4013      	ands	r3, r2
    11e6:	2201      	movs	r2, #1
    11e8:	409a      	lsls	r2, r3
    11ea:	0013      	movs	r3, r2
    11ec:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    11ee:	68fb      	ldr	r3, [r7, #12]
    11f0:	68ba      	ldr	r2, [r7, #8]
    11f2:	611a      	str	r2, [r3, #16]
}
    11f4:	46c0      	nop			; (mov r8, r8)
    11f6:	46bd      	mov	sp, r7
    11f8:	b004      	add	sp, #16
    11fa:	bd80      	pop	{r7, pc}
    11fc:	00001135 	.word	0x00001135

00001200 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    1200:	b580      	push	{r7, lr}
    1202:	b082      	sub	sp, #8
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
    1208:	0008      	movs	r0, r1
    120a:	0011      	movs	r1, r2
    120c:	1cfb      	adds	r3, r7, #3
    120e:	1c02      	adds	r2, r0, #0
    1210:	701a      	strb	r2, [r3, #0]
    1212:	1cbb      	adds	r3, r7, #2
    1214:	1c0a      	adds	r2, r1, #0
    1216:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1218:	1cbb      	adds	r3, r7, #2
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	2b00      	cmp	r3, #0
    121e:	d001      	beq.n	1224 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1220:	2317      	movs	r3, #23
    1222:	e019      	b.n	1258 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    1224:	1cfb      	adds	r3, r7, #3
    1226:	781a      	ldrb	r2, [r3, #0]
    1228:	4b0d      	ldr	r3, [pc, #52]	; (1260 <extint_register_callback+0x60>)
    122a:	0092      	lsls	r2, r2, #2
    122c:	58d3      	ldr	r3, [r2, r3]
    122e:	2b00      	cmp	r3, #0
    1230:	d107      	bne.n	1242 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    1232:	1cfb      	adds	r3, r7, #3
    1234:	781a      	ldrb	r2, [r3, #0]
    1236:	4b0a      	ldr	r3, [pc, #40]	; (1260 <extint_register_callback+0x60>)
    1238:	0092      	lsls	r2, r2, #2
    123a:	6879      	ldr	r1, [r7, #4]
    123c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    123e:	2300      	movs	r3, #0
    1240:	e00a      	b.n	1258 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1242:	1cfb      	adds	r3, r7, #3
    1244:	781a      	ldrb	r2, [r3, #0]
    1246:	4b06      	ldr	r3, [pc, #24]	; (1260 <extint_register_callback+0x60>)
    1248:	0092      	lsls	r2, r2, #2
    124a:	58d2      	ldr	r2, [r2, r3]
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	429a      	cmp	r2, r3
    1250:	d101      	bne.n	1256 <extint_register_callback+0x56>
		return STATUS_OK;
    1252:	2300      	movs	r3, #0
    1254:	e000      	b.n	1258 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1256:	231d      	movs	r3, #29
}
    1258:	0018      	movs	r0, r3
    125a:	46bd      	mov	sp, r7
    125c:	b002      	add	sp, #8
    125e:	bd80      	pop	{r7, pc}
    1260:	20000044 	.word	0x20000044

00001264 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    1264:	b580      	push	{r7, lr}
    1266:	b084      	sub	sp, #16
    1268:	af00      	add	r7, sp, #0
    126a:	0002      	movs	r2, r0
    126c:	1dfb      	adds	r3, r7, #7
    126e:	701a      	strb	r2, [r3, #0]
    1270:	1dbb      	adds	r3, r7, #6
    1272:	1c0a      	adds	r2, r1, #0
    1274:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1276:	1dbb      	adds	r3, r7, #6
    1278:	781b      	ldrb	r3, [r3, #0]
    127a:	2b00      	cmp	r3, #0
    127c:	d10e      	bne.n	129c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    127e:	1dfb      	adds	r3, r7, #7
    1280:	781b      	ldrb	r3, [r3, #0]
    1282:	0018      	movs	r0, r3
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <extint_chan_enable_callback+0x44>)
    1286:	4798      	blx	r3
    1288:	0003      	movs	r3, r0
    128a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    128c:	1dfb      	adds	r3, r7, #7
    128e:	781b      	ldrb	r3, [r3, #0]
    1290:	2201      	movs	r2, #1
    1292:	409a      	lsls	r2, r3
    1294:	68fb      	ldr	r3, [r7, #12]
    1296:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1298:	2300      	movs	r3, #0
    129a:	e000      	b.n	129e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    129c:	2317      	movs	r3, #23
}
    129e:	0018      	movs	r0, r3
    12a0:	46bd      	mov	sp, r7
    12a2:	b004      	add	sp, #16
    12a4:	bd80      	pop	{r7, pc}
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	00001135 	.word	0x00001135

000012ac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    12b0:	4b15      	ldr	r3, [pc, #84]	; (1308 <EIC_Handler+0x5c>)
    12b2:	2200      	movs	r2, #0
    12b4:	701a      	strb	r2, [r3, #0]
    12b6:	e020      	b.n	12fa <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    12b8:	4b13      	ldr	r3, [pc, #76]	; (1308 <EIC_Handler+0x5c>)
    12ba:	781b      	ldrb	r3, [r3, #0]
    12bc:	0018      	movs	r0, r3
    12be:	4b13      	ldr	r3, [pc, #76]	; (130c <EIC_Handler+0x60>)
    12c0:	4798      	blx	r3
    12c2:	1e03      	subs	r3, r0, #0
    12c4:	d013      	beq.n	12ee <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    12c6:	4b10      	ldr	r3, [pc, #64]	; (1308 <EIC_Handler+0x5c>)
    12c8:	781b      	ldrb	r3, [r3, #0]
    12ca:	0018      	movs	r0, r3
    12cc:	4b10      	ldr	r3, [pc, #64]	; (1310 <EIC_Handler+0x64>)
    12ce:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    12d0:	4b0d      	ldr	r3, [pc, #52]	; (1308 <EIC_Handler+0x5c>)
    12d2:	781b      	ldrb	r3, [r3, #0]
    12d4:	001a      	movs	r2, r3
    12d6:	4b0f      	ldr	r3, [pc, #60]	; (1314 <EIC_Handler+0x68>)
    12d8:	0092      	lsls	r2, r2, #2
    12da:	58d3      	ldr	r3, [r2, r3]
    12dc:	2b00      	cmp	r3, #0
    12de:	d006      	beq.n	12ee <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    12e0:	4b09      	ldr	r3, [pc, #36]	; (1308 <EIC_Handler+0x5c>)
    12e2:	781b      	ldrb	r3, [r3, #0]
    12e4:	001a      	movs	r2, r3
    12e6:	4b0b      	ldr	r3, [pc, #44]	; (1314 <EIC_Handler+0x68>)
    12e8:	0092      	lsls	r2, r2, #2
    12ea:	58d3      	ldr	r3, [r2, r3]
    12ec:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    12ee:	4b06      	ldr	r3, [pc, #24]	; (1308 <EIC_Handler+0x5c>)
    12f0:	781b      	ldrb	r3, [r3, #0]
    12f2:	3301      	adds	r3, #1
    12f4:	b2da      	uxtb	r2, r3
    12f6:	4b04      	ldr	r3, [pc, #16]	; (1308 <EIC_Handler+0x5c>)
    12f8:	701a      	strb	r2, [r3, #0]
    12fa:	4b03      	ldr	r3, [pc, #12]	; (1308 <EIC_Handler+0x5c>)
    12fc:	781b      	ldrb	r3, [r3, #0]
    12fe:	2b0f      	cmp	r3, #15
    1300:	d9da      	bls.n	12b8 <EIC_Handler+0xc>
			}
		}
	}
}
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	46bd      	mov	sp, r7
    1306:	bd80      	pop	{r7, pc}
    1308:	200000c4 	.word	0x200000c4
    130c:	00001181 	.word	0x00001181
    1310:	000011c5 	.word	0x000011c5
    1314:	20000044 	.word	0x20000044

00001318 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1318:	b580      	push	{r7, lr}
    131a:	b082      	sub	sp, #8
    131c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    131e:	4b10      	ldr	r3, [pc, #64]	; (1360 <cpu_irq_enter_critical+0x48>)
    1320:	681b      	ldr	r3, [r3, #0]
    1322:	2b00      	cmp	r3, #0
    1324:	d112      	bne.n	134c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1326:	f3ef 8310 	mrs	r3, PRIMASK
    132a:	607b      	str	r3, [r7, #4]
  return(result);
    132c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    132e:	2b00      	cmp	r3, #0
    1330:	d109      	bne.n	1346 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    1332:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1334:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1338:	4b0a      	ldr	r3, [pc, #40]	; (1364 <cpu_irq_enter_critical+0x4c>)
    133a:	2200      	movs	r2, #0
    133c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    133e:	4b0a      	ldr	r3, [pc, #40]	; (1368 <cpu_irq_enter_critical+0x50>)
    1340:	2201      	movs	r2, #1
    1342:	701a      	strb	r2, [r3, #0]
    1344:	e002      	b.n	134c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1346:	4b08      	ldr	r3, [pc, #32]	; (1368 <cpu_irq_enter_critical+0x50>)
    1348:	2200      	movs	r2, #0
    134a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <cpu_irq_enter_critical+0x48>)
    134e:	681b      	ldr	r3, [r3, #0]
    1350:	1c5a      	adds	r2, r3, #1
    1352:	4b03      	ldr	r3, [pc, #12]	; (1360 <cpu_irq_enter_critical+0x48>)
    1354:	601a      	str	r2, [r3, #0]
}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	46bd      	mov	sp, r7
    135a:	b002      	add	sp, #8
    135c:	bd80      	pop	{r7, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	20000024 	.word	0x20000024
    1364:	20000000 	.word	0x20000000
    1368:	20000028 	.word	0x20000028

0000136c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    136c:	b580      	push	{r7, lr}
    136e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1370:	4b0b      	ldr	r3, [pc, #44]	; (13a0 <cpu_irq_leave_critical+0x34>)
    1372:	681b      	ldr	r3, [r3, #0]
    1374:	1e5a      	subs	r2, r3, #1
    1376:	4b0a      	ldr	r3, [pc, #40]	; (13a0 <cpu_irq_leave_critical+0x34>)
    1378:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    137a:	4b09      	ldr	r3, [pc, #36]	; (13a0 <cpu_irq_leave_critical+0x34>)
    137c:	681b      	ldr	r3, [r3, #0]
    137e:	2b00      	cmp	r3, #0
    1380:	d10a      	bne.n	1398 <cpu_irq_leave_critical+0x2c>
    1382:	4b08      	ldr	r3, [pc, #32]	; (13a4 <cpu_irq_leave_critical+0x38>)
    1384:	781b      	ldrb	r3, [r3, #0]
    1386:	b2db      	uxtb	r3, r3
    1388:	2b00      	cmp	r3, #0
    138a:	d005      	beq.n	1398 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    138c:	4b06      	ldr	r3, [pc, #24]	; (13a8 <cpu_irq_leave_critical+0x3c>)
    138e:	2201      	movs	r2, #1
    1390:	701a      	strb	r2, [r3, #0]
    1392:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1396:	b662      	cpsie	i
	}
}
    1398:	46c0      	nop			; (mov r8, r8)
    139a:	46bd      	mov	sp, r7
    139c:	bd80      	pop	{r7, pc}
    139e:	46c0      	nop			; (mov r8, r8)
    13a0:	20000024 	.word	0x20000024
    13a4:	20000028 	.word	0x20000028
    13a8:	20000000 	.word	0x20000000

000013ac <system_pinmux_get_group_from_gpio_pin>:
{
    13ac:	b580      	push	{r7, lr}
    13ae:	b084      	sub	sp, #16
    13b0:	af00      	add	r7, sp, #0
    13b2:	0002      	movs	r2, r0
    13b4:	1dfb      	adds	r3, r7, #7
    13b6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    13b8:	230f      	movs	r3, #15
    13ba:	18fb      	adds	r3, r7, r3
    13bc:	1dfa      	adds	r2, r7, #7
    13be:	7812      	ldrb	r2, [r2, #0]
    13c0:	09d2      	lsrs	r2, r2, #7
    13c2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    13c4:	230e      	movs	r3, #14
    13c6:	18fb      	adds	r3, r7, r3
    13c8:	1dfa      	adds	r2, r7, #7
    13ca:	7812      	ldrb	r2, [r2, #0]
    13cc:	0952      	lsrs	r2, r2, #5
    13ce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    13d0:	4b0d      	ldr	r3, [pc, #52]	; (1408 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    13d2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    13d4:	230f      	movs	r3, #15
    13d6:	18fb      	adds	r3, r7, r3
    13d8:	781b      	ldrb	r3, [r3, #0]
    13da:	2b00      	cmp	r3, #0
    13dc:	d10f      	bne.n	13fe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    13de:	230f      	movs	r3, #15
    13e0:	18fb      	adds	r3, r7, r3
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	009b      	lsls	r3, r3, #2
    13e6:	2210      	movs	r2, #16
    13e8:	4694      	mov	ip, r2
    13ea:	44bc      	add	ip, r7
    13ec:	4463      	add	r3, ip
    13ee:	3b08      	subs	r3, #8
    13f0:	681a      	ldr	r2, [r3, #0]
    13f2:	230e      	movs	r3, #14
    13f4:	18fb      	adds	r3, r7, r3
    13f6:	781b      	ldrb	r3, [r3, #0]
    13f8:	01db      	lsls	r3, r3, #7
    13fa:	18d3      	adds	r3, r2, r3
    13fc:	e000      	b.n	1400 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    13fe:	2300      	movs	r3, #0
}
    1400:	0018      	movs	r0, r3
    1402:	46bd      	mov	sp, r7
    1404:	b004      	add	sp, #16
    1406:	bd80      	pop	{r7, pc}
    1408:	41004400 	.word	0x41004400

0000140c <port_get_group_from_gpio_pin>:
{
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	0002      	movs	r2, r0
    1414:	1dfb      	adds	r3, r7, #7
    1416:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1418:	1dfb      	adds	r3, r7, #7
    141a:	781b      	ldrb	r3, [r3, #0]
    141c:	0018      	movs	r0, r3
    141e:	4b03      	ldr	r3, [pc, #12]	; (142c <port_get_group_from_gpio_pin+0x20>)
    1420:	4798      	blx	r3
    1422:	0003      	movs	r3, r0
}
    1424:	0018      	movs	r0, r3
    1426:	46bd      	mov	sp, r7
    1428:	b002      	add	sp, #8
    142a:	bd80      	pop	{r7, pc}
    142c:	000013ad 	.word	0x000013ad

00001430 <port_get_config_defaults>:
{
    1430:	b580      	push	{r7, lr}
    1432:	b082      	sub	sp, #8
    1434:	af00      	add	r7, sp, #0
    1436:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	2200      	movs	r2, #0
    143c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	2201      	movs	r2, #1
    1442:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	2200      	movs	r2, #0
    1448:	709a      	strb	r2, [r3, #2]
}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	46bd      	mov	sp, r7
    144e:	b002      	add	sp, #8
    1450:	bd80      	pop	{r7, pc}
	...

00001454 <port_pin_set_output_level>:
{
    1454:	b580      	push	{r7, lr}
    1456:	b084      	sub	sp, #16
    1458:	af00      	add	r7, sp, #0
    145a:	0002      	movs	r2, r0
    145c:	1dfb      	adds	r3, r7, #7
    145e:	701a      	strb	r2, [r3, #0]
    1460:	1dbb      	adds	r3, r7, #6
    1462:	1c0a      	adds	r2, r1, #0
    1464:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1466:	1dfb      	adds	r3, r7, #7
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	0018      	movs	r0, r3
    146c:	4b0d      	ldr	r3, [pc, #52]	; (14a4 <port_pin_set_output_level+0x50>)
    146e:	4798      	blx	r3
    1470:	0003      	movs	r3, r0
    1472:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1474:	1dfb      	adds	r3, r7, #7
    1476:	781b      	ldrb	r3, [r3, #0]
    1478:	221f      	movs	r2, #31
    147a:	4013      	ands	r3, r2
    147c:	2201      	movs	r2, #1
    147e:	409a      	lsls	r2, r3
    1480:	0013      	movs	r3, r2
    1482:	60bb      	str	r3, [r7, #8]
	if (level) {
    1484:	1dbb      	adds	r3, r7, #6
    1486:	781b      	ldrb	r3, [r3, #0]
    1488:	2b00      	cmp	r3, #0
    148a:	d003      	beq.n	1494 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    148c:	68fb      	ldr	r3, [r7, #12]
    148e:	68ba      	ldr	r2, [r7, #8]
    1490:	619a      	str	r2, [r3, #24]
}
    1492:	e002      	b.n	149a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1494:	68fb      	ldr	r3, [r7, #12]
    1496:	68ba      	ldr	r2, [r7, #8]
    1498:	615a      	str	r2, [r3, #20]
}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	46bd      	mov	sp, r7
    149e:	b004      	add	sp, #16
    14a0:	bd80      	pop	{r7, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	0000140d 	.word	0x0000140d

000014a8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    14a8:	b580      	push	{r7, lr}
    14aa:	b082      	sub	sp, #8
    14ac:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    14ae:	1d3b      	adds	r3, r7, #4
    14b0:	0018      	movs	r0, r3
    14b2:	4b0e      	ldr	r3, [pc, #56]	; (14ec <system_board_init+0x44>)
    14b4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    14b6:	1d3b      	adds	r3, r7, #4
    14b8:	2201      	movs	r2, #1
    14ba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    14bc:	1d3b      	adds	r3, r7, #4
    14be:	0019      	movs	r1, r3
    14c0:	2010      	movs	r0, #16
    14c2:	4b0b      	ldr	r3, [pc, #44]	; (14f0 <system_board_init+0x48>)
    14c4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    14c6:	2101      	movs	r1, #1
    14c8:	2010      	movs	r0, #16
    14ca:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <system_board_init+0x4c>)
    14cc:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    14ce:	1d3b      	adds	r3, r7, #4
    14d0:	2200      	movs	r2, #0
    14d2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    14d4:	1d3b      	adds	r3, r7, #4
    14d6:	2201      	movs	r2, #1
    14d8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    14da:	1d3b      	adds	r3, r7, #4
    14dc:	0019      	movs	r1, r3
    14de:	200e      	movs	r0, #14
    14e0:	4b03      	ldr	r3, [pc, #12]	; (14f0 <system_board_init+0x48>)
    14e2:	4798      	blx	r3
}
    14e4:	46c0      	nop			; (mov r8, r8)
    14e6:	46bd      	mov	sp, r7
    14e8:	b002      	add	sp, #8
    14ea:	bd80      	pop	{r7, pc}
    14ec:	00001431 	.word	0x00001431
    14f0:	00001521 	.word	0x00001521
    14f4:	00001455 	.word	0x00001455

000014f8 <system_pinmux_get_config_defaults>:
{
    14f8:	b580      	push	{r7, lr}
    14fa:	b082      	sub	sp, #8
    14fc:	af00      	add	r7, sp, #0
    14fe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	2280      	movs	r2, #128	; 0x80
    1504:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1506:	687b      	ldr	r3, [r7, #4]
    1508:	2200      	movs	r2, #0
    150a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    150c:	687b      	ldr	r3, [r7, #4]
    150e:	2201      	movs	r2, #1
    1510:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	2200      	movs	r2, #0
    1516:	70da      	strb	r2, [r3, #3]
}
    1518:	46c0      	nop			; (mov r8, r8)
    151a:	46bd      	mov	sp, r7
    151c:	b002      	add	sp, #8
    151e:	bd80      	pop	{r7, pc}

00001520 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1520:	b580      	push	{r7, lr}
    1522:	b084      	sub	sp, #16
    1524:	af00      	add	r7, sp, #0
    1526:	0002      	movs	r2, r0
    1528:	6039      	str	r1, [r7, #0]
    152a:	1dfb      	adds	r3, r7, #7
    152c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    152e:	230c      	movs	r3, #12
    1530:	18fb      	adds	r3, r7, r3
    1532:	0018      	movs	r0, r3
    1534:	4b10      	ldr	r3, [pc, #64]	; (1578 <port_pin_set_config+0x58>)
    1536:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    1538:	230c      	movs	r3, #12
    153a:	18fb      	adds	r3, r7, r3
    153c:	2280      	movs	r2, #128	; 0x80
    153e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1540:	683b      	ldr	r3, [r7, #0]
    1542:	781a      	ldrb	r2, [r3, #0]
    1544:	230c      	movs	r3, #12
    1546:	18fb      	adds	r3, r7, r3
    1548:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    154a:	683b      	ldr	r3, [r7, #0]
    154c:	785a      	ldrb	r2, [r3, #1]
    154e:	230c      	movs	r3, #12
    1550:	18fb      	adds	r3, r7, r3
    1552:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1554:	683b      	ldr	r3, [r7, #0]
    1556:	789a      	ldrb	r2, [r3, #2]
    1558:	230c      	movs	r3, #12
    155a:	18fb      	adds	r3, r7, r3
    155c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    155e:	230c      	movs	r3, #12
    1560:	18fa      	adds	r2, r7, r3
    1562:	1dfb      	adds	r3, r7, #7
    1564:	781b      	ldrb	r3, [r3, #0]
    1566:	0011      	movs	r1, r2
    1568:	0018      	movs	r0, r3
    156a:	4b04      	ldr	r3, [pc, #16]	; (157c <port_pin_set_config+0x5c>)
    156c:	4798      	blx	r3
}
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	46bd      	mov	sp, r7
    1572:	b004      	add	sp, #16
    1574:	bd80      	pop	{r7, pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	000014f9 	.word	0x000014f9
    157c:	00001e2d 	.word	0x00001e2d

00001580 <system_gclk_gen_get_config_defaults>:
{
    1580:	b580      	push	{r7, lr}
    1582:	b082      	sub	sp, #8
    1584:	af00      	add	r7, sp, #0
    1586:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    1588:	687b      	ldr	r3, [r7, #4]
    158a:	2201      	movs	r2, #1
    158c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    158e:	687b      	ldr	r3, [r7, #4]
    1590:	2200      	movs	r2, #0
    1592:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1594:	687b      	ldr	r3, [r7, #4]
    1596:	2206      	movs	r2, #6
    1598:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    159a:	687b      	ldr	r3, [r7, #4]
    159c:	2200      	movs	r2, #0
    159e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    15a0:	687b      	ldr	r3, [r7, #4]
    15a2:	2200      	movs	r2, #0
    15a4:	725a      	strb	r2, [r3, #9]
}
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	46bd      	mov	sp, r7
    15aa:	b002      	add	sp, #8
    15ac:	bd80      	pop	{r7, pc}

000015ae <system_clock_source_osc8m_get_config_defaults>:
{
    15ae:	b580      	push	{r7, lr}
    15b0:	b082      	sub	sp, #8
    15b2:	af00      	add	r7, sp, #0
    15b4:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	2203      	movs	r2, #3
    15ba:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	2200      	movs	r2, #0
    15c0:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	2201      	movs	r2, #1
    15c6:	709a      	strb	r2, [r3, #2]
}
    15c8:	46c0      	nop			; (mov r8, r8)
    15ca:	46bd      	mov	sp, r7
    15cc:	b002      	add	sp, #8
    15ce:	bd80      	pop	{r7, pc}

000015d0 <system_cpu_clock_set_divider>:
{
    15d0:	b580      	push	{r7, lr}
    15d2:	b082      	sub	sp, #8
    15d4:	af00      	add	r7, sp, #0
    15d6:	0002      	movs	r2, r0
    15d8:	1dfb      	adds	r3, r7, #7
    15da:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    15dc:	4a03      	ldr	r2, [pc, #12]	; (15ec <system_cpu_clock_set_divider+0x1c>)
    15de:	1dfb      	adds	r3, r7, #7
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	7213      	strb	r3, [r2, #8]
}
    15e4:	46c0      	nop			; (mov r8, r8)
    15e6:	46bd      	mov	sp, r7
    15e8:	b002      	add	sp, #8
    15ea:	bd80      	pop	{r7, pc}
    15ec:	40000400 	.word	0x40000400

000015f0 <system_apb_clock_set_divider>:
{
    15f0:	b580      	push	{r7, lr}
    15f2:	b082      	sub	sp, #8
    15f4:	af00      	add	r7, sp, #0
    15f6:	0002      	movs	r2, r0
    15f8:	1dfb      	adds	r3, r7, #7
    15fa:	701a      	strb	r2, [r3, #0]
    15fc:	1dbb      	adds	r3, r7, #6
    15fe:	1c0a      	adds	r2, r1, #0
    1600:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1602:	1dfb      	adds	r3, r7, #7
    1604:	781b      	ldrb	r3, [r3, #0]
    1606:	2b01      	cmp	r3, #1
    1608:	d008      	beq.n	161c <system_apb_clock_set_divider+0x2c>
    160a:	2b02      	cmp	r3, #2
    160c:	d00b      	beq.n	1626 <system_apb_clock_set_divider+0x36>
    160e:	2b00      	cmp	r3, #0
    1610:	d10e      	bne.n	1630 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    1612:	4a0b      	ldr	r2, [pc, #44]	; (1640 <system_apb_clock_set_divider+0x50>)
    1614:	1dbb      	adds	r3, r7, #6
    1616:	781b      	ldrb	r3, [r3, #0]
    1618:	7253      	strb	r3, [r2, #9]
			break;
    161a:	e00b      	b.n	1634 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    161c:	4a08      	ldr	r2, [pc, #32]	; (1640 <system_apb_clock_set_divider+0x50>)
    161e:	1dbb      	adds	r3, r7, #6
    1620:	781b      	ldrb	r3, [r3, #0]
    1622:	7293      	strb	r3, [r2, #10]
			break;
    1624:	e006      	b.n	1634 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    1626:	4a06      	ldr	r2, [pc, #24]	; (1640 <system_apb_clock_set_divider+0x50>)
    1628:	1dbb      	adds	r3, r7, #6
    162a:	781b      	ldrb	r3, [r3, #0]
    162c:	72d3      	strb	r3, [r2, #11]
			break;
    162e:	e001      	b.n	1634 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    1630:	2317      	movs	r3, #23
    1632:	e000      	b.n	1636 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    1634:	2300      	movs	r3, #0
}
    1636:	0018      	movs	r0, r3
    1638:	46bd      	mov	sp, r7
    163a:	b002      	add	sp, #8
    163c:	bd80      	pop	{r7, pc}
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	40000400 	.word	0x40000400

00001644 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1644:	b580      	push	{r7, lr}
    1646:	b082      	sub	sp, #8
    1648:	af00      	add	r7, sp, #0
    164a:	0002      	movs	r2, r0
    164c:	1dfb      	adds	r3, r7, #7
    164e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1650:	4a08      	ldr	r2, [pc, #32]	; (1674 <system_flash_set_waitstates+0x30>)
    1652:	1dfb      	adds	r3, r7, #7
    1654:	781b      	ldrb	r3, [r3, #0]
    1656:	210f      	movs	r1, #15
    1658:	400b      	ands	r3, r1
    165a:	b2d9      	uxtb	r1, r3
    165c:	6853      	ldr	r3, [r2, #4]
    165e:	200f      	movs	r0, #15
    1660:	4001      	ands	r1, r0
    1662:	0049      	lsls	r1, r1, #1
    1664:	201e      	movs	r0, #30
    1666:	4383      	bics	r3, r0
    1668:	430b      	orrs	r3, r1
    166a:	6053      	str	r3, [r2, #4]
}
    166c:	46c0      	nop			; (mov r8, r8)
    166e:	46bd      	mov	sp, r7
    1670:	b002      	add	sp, #8
    1672:	bd80      	pop	{r7, pc}
    1674:	41004000 	.word	0x41004000

00001678 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1678:	b580      	push	{r7, lr}
    167a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    167c:	46c0      	nop			; (mov r8, r8)
    167e:	4b04      	ldr	r3, [pc, #16]	; (1690 <_system_dfll_wait_for_sync+0x18>)
    1680:	68db      	ldr	r3, [r3, #12]
    1682:	2210      	movs	r2, #16
    1684:	4013      	ands	r3, r2
    1686:	d0fa      	beq.n	167e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1688:	46c0      	nop			; (mov r8, r8)
    168a:	46bd      	mov	sp, r7
    168c:	bd80      	pop	{r7, pc}
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	40000800 	.word	0x40000800

00001694 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1694:	b580      	push	{r7, lr}
    1696:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1698:	4b0c      	ldr	r3, [pc, #48]	; (16cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    169a:	2202      	movs	r2, #2
    169c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    169e:	4b0c      	ldr	r3, [pc, #48]	; (16d0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    16a0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    16a2:	4a0a      	ldr	r2, [pc, #40]	; (16cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    16a4:	4b0b      	ldr	r3, [pc, #44]	; (16d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    16a6:	689b      	ldr	r3, [r3, #8]
    16a8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    16aa:	4a08      	ldr	r2, [pc, #32]	; (16cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    16ac:	4b09      	ldr	r3, [pc, #36]	; (16d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    16ae:	685b      	ldr	r3, [r3, #4]
    16b0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    16b2:	4b06      	ldr	r3, [pc, #24]	; (16cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    16b4:	2200      	movs	r2, #0
    16b6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    16b8:	4b05      	ldr	r3, [pc, #20]	; (16d0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    16ba:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    16bc:	4a03      	ldr	r2, [pc, #12]	; (16cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    16be:	4b05      	ldr	r3, [pc, #20]	; (16d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	b29b      	uxth	r3, r3
    16c4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	46bd      	mov	sp, r7
    16ca:	bd80      	pop	{r7, pc}
    16cc:	40000800 	.word	0x40000800
    16d0:	00001679 	.word	0x00001679
    16d4:	2000002c 	.word	0x2000002c

000016d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    16d8:	b580      	push	{r7, lr}
    16da:	b084      	sub	sp, #16
    16dc:	af00      	add	r7, sp, #0
    16de:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    16e0:	4b1a      	ldr	r3, [pc, #104]	; (174c <system_clock_source_osc8m_set_config+0x74>)
    16e2:	6a1b      	ldr	r3, [r3, #32]
    16e4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    16e6:	687b      	ldr	r3, [r7, #4]
    16e8:	781b      	ldrb	r3, [r3, #0]
    16ea:	1c1a      	adds	r2, r3, #0
    16ec:	2303      	movs	r3, #3
    16ee:	4013      	ands	r3, r2
    16f0:	b2da      	uxtb	r2, r3
    16f2:	230d      	movs	r3, #13
    16f4:	18fb      	adds	r3, r7, r3
    16f6:	2103      	movs	r1, #3
    16f8:	400a      	ands	r2, r1
    16fa:	0010      	movs	r0, r2
    16fc:	781a      	ldrb	r2, [r3, #0]
    16fe:	2103      	movs	r1, #3
    1700:	438a      	bics	r2, r1
    1702:	1c11      	adds	r1, r2, #0
    1704:	1c02      	adds	r2, r0, #0
    1706:	430a      	orrs	r2, r1
    1708:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    170a:	687b      	ldr	r3, [r7, #4]
    170c:	789a      	ldrb	r2, [r3, #2]
    170e:	230c      	movs	r3, #12
    1710:	18fb      	adds	r3, r7, r3
    1712:	01d0      	lsls	r0, r2, #7
    1714:	781a      	ldrb	r2, [r3, #0]
    1716:	217f      	movs	r1, #127	; 0x7f
    1718:	400a      	ands	r2, r1
    171a:	1c11      	adds	r1, r2, #0
    171c:	1c02      	adds	r2, r0, #0
    171e:	430a      	orrs	r2, r1
    1720:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1722:	687b      	ldr	r3, [r7, #4]
    1724:	785a      	ldrb	r2, [r3, #1]
    1726:	230c      	movs	r3, #12
    1728:	18fb      	adds	r3, r7, r3
    172a:	2101      	movs	r1, #1
    172c:	400a      	ands	r2, r1
    172e:	0190      	lsls	r0, r2, #6
    1730:	781a      	ldrb	r2, [r3, #0]
    1732:	2140      	movs	r1, #64	; 0x40
    1734:	438a      	bics	r2, r1
    1736:	1c11      	adds	r1, r2, #0
    1738:	1c02      	adds	r2, r0, #0
    173a:	430a      	orrs	r2, r1
    173c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    173e:	4b03      	ldr	r3, [pc, #12]	; (174c <system_clock_source_osc8m_set_config+0x74>)
    1740:	68fa      	ldr	r2, [r7, #12]
    1742:	621a      	str	r2, [r3, #32]
}
    1744:	46c0      	nop			; (mov r8, r8)
    1746:	46bd      	mov	sp, r7
    1748:	b004      	add	sp, #16
    174a:	bd80      	pop	{r7, pc}
    174c:	40000800 	.word	0x40000800

00001750 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1750:	b580      	push	{r7, lr}
    1752:	b082      	sub	sp, #8
    1754:	af00      	add	r7, sp, #0
    1756:	0002      	movs	r2, r0
    1758:	1dfb      	adds	r3, r7, #7
    175a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    175c:	1dfb      	adds	r3, r7, #7
    175e:	781b      	ldrb	r3, [r3, #0]
    1760:	2b08      	cmp	r3, #8
    1762:	d83b      	bhi.n	17dc <system_clock_source_enable+0x8c>
    1764:	009a      	lsls	r2, r3, #2
    1766:	4b21      	ldr	r3, [pc, #132]	; (17ec <system_clock_source_enable+0x9c>)
    1768:	18d3      	adds	r3, r2, r3
    176a:	681b      	ldr	r3, [r3, #0]
    176c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    176e:	4b20      	ldr	r3, [pc, #128]	; (17f0 <system_clock_source_enable+0xa0>)
    1770:	4a1f      	ldr	r2, [pc, #124]	; (17f0 <system_clock_source_enable+0xa0>)
    1772:	6a12      	ldr	r2, [r2, #32]
    1774:	2102      	movs	r1, #2
    1776:	430a      	orrs	r2, r1
    1778:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    177a:	2300      	movs	r3, #0
    177c:	e031      	b.n	17e2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    177e:	4b1c      	ldr	r3, [pc, #112]	; (17f0 <system_clock_source_enable+0xa0>)
    1780:	4a1b      	ldr	r2, [pc, #108]	; (17f0 <system_clock_source_enable+0xa0>)
    1782:	6992      	ldr	r2, [r2, #24]
    1784:	2102      	movs	r1, #2
    1786:	430a      	orrs	r2, r1
    1788:	619a      	str	r2, [r3, #24]
		break;
    178a:	e029      	b.n	17e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    178c:	4a18      	ldr	r2, [pc, #96]	; (17f0 <system_clock_source_enable+0xa0>)
    178e:	4b18      	ldr	r3, [pc, #96]	; (17f0 <system_clock_source_enable+0xa0>)
    1790:	8a1b      	ldrh	r3, [r3, #16]
    1792:	b29b      	uxth	r3, r3
    1794:	2102      	movs	r1, #2
    1796:	430b      	orrs	r3, r1
    1798:	b29b      	uxth	r3, r3
    179a:	8213      	strh	r3, [r2, #16]
		break;
    179c:	e020      	b.n	17e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    179e:	4a14      	ldr	r2, [pc, #80]	; (17f0 <system_clock_source_enable+0xa0>)
    17a0:	4b13      	ldr	r3, [pc, #76]	; (17f0 <system_clock_source_enable+0xa0>)
    17a2:	8a9b      	ldrh	r3, [r3, #20]
    17a4:	b29b      	uxth	r3, r3
    17a6:	2102      	movs	r1, #2
    17a8:	430b      	orrs	r3, r1
    17aa:	b29b      	uxth	r3, r3
    17ac:	8293      	strh	r3, [r2, #20]
		break;
    17ae:	e017      	b.n	17e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    17b0:	4b10      	ldr	r3, [pc, #64]	; (17f4 <system_clock_source_enable+0xa4>)
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	2202      	movs	r2, #2
    17b6:	431a      	orrs	r2, r3
    17b8:	4b0e      	ldr	r3, [pc, #56]	; (17f4 <system_clock_source_enable+0xa4>)
    17ba:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    17bc:	4b0e      	ldr	r3, [pc, #56]	; (17f8 <system_clock_source_enable+0xa8>)
    17be:	4798      	blx	r3
		break;
    17c0:	e00e      	b.n	17e0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    17c2:	4a0b      	ldr	r2, [pc, #44]	; (17f0 <system_clock_source_enable+0xa0>)
    17c4:	490a      	ldr	r1, [pc, #40]	; (17f0 <system_clock_source_enable+0xa0>)
    17c6:	2344      	movs	r3, #68	; 0x44
    17c8:	5ccb      	ldrb	r3, [r1, r3]
    17ca:	b2db      	uxtb	r3, r3
    17cc:	2102      	movs	r1, #2
    17ce:	430b      	orrs	r3, r1
    17d0:	b2d9      	uxtb	r1, r3
    17d2:	2344      	movs	r3, #68	; 0x44
    17d4:	54d1      	strb	r1, [r2, r3]
		break;
    17d6:	e003      	b.n	17e0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    17d8:	2300      	movs	r3, #0
    17da:	e002      	b.n	17e2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    17dc:	2317      	movs	r3, #23
    17de:	e000      	b.n	17e2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    17e0:	2300      	movs	r3, #0
}
    17e2:	0018      	movs	r0, r3
    17e4:	46bd      	mov	sp, r7
    17e6:	b002      	add	sp, #8
    17e8:	bd80      	pop	{r7, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	0000200c 	.word	0x0000200c
    17f0:	40000800 	.word	0x40000800
    17f4:	2000002c 	.word	0x2000002c
    17f8:	00001695 	.word	0x00001695

000017fc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	b082      	sub	sp, #8
    1800:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1802:	003b      	movs	r3, r7
    1804:	2201      	movs	r2, #1
    1806:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1808:	2300      	movs	r3, #0
    180a:	607b      	str	r3, [r7, #4]
    180c:	e009      	b.n	1822 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    180e:	687b      	ldr	r3, [r7, #4]
    1810:	b2db      	uxtb	r3, r3
    1812:	003a      	movs	r2, r7
    1814:	0011      	movs	r1, r2
    1816:	0018      	movs	r0, r3
    1818:	4b05      	ldr	r3, [pc, #20]	; (1830 <_switch_peripheral_gclk+0x34>)
    181a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    181c:	687b      	ldr	r3, [r7, #4]
    181e:	3301      	adds	r3, #1
    1820:	607b      	str	r3, [r7, #4]
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	2b17      	cmp	r3, #23
    1826:	d9f2      	bls.n	180e <_switch_peripheral_gclk+0x12>
	}
}
    1828:	46c0      	nop			; (mov r8, r8)
    182a:	46bd      	mov	sp, r7
    182c:	b002      	add	sp, #8
    182e:	bd80      	pop	{r7, pc}
    1830:	00001b99 	.word	0x00001b99

00001834 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1834:	b580      	push	{r7, lr}
    1836:	b096      	sub	sp, #88	; 0x58
    1838:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    183a:	4b36      	ldr	r3, [pc, #216]	; (1914 <system_clock_init+0xe0>)
    183c:	22c2      	movs	r2, #194	; 0xc2
    183e:	00d2      	lsls	r2, r2, #3
    1840:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1842:	2000      	movs	r0, #0
    1844:	4b34      	ldr	r3, [pc, #208]	; (1918 <system_clock_init+0xe4>)
    1846:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1848:	4b34      	ldr	r3, [pc, #208]	; (191c <system_clock_init+0xe8>)
    184a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    184c:	2354      	movs	r3, #84	; 0x54
    184e:	18fb      	adds	r3, r7, r3
    1850:	0018      	movs	r0, r3
    1852:	4b33      	ldr	r3, [pc, #204]	; (1920 <system_clock_init+0xec>)
    1854:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1856:	2354      	movs	r3, #84	; 0x54
    1858:	18fb      	adds	r3, r7, r3
    185a:	2200      	movs	r2, #0
    185c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    185e:	2354      	movs	r3, #84	; 0x54
    1860:	18fb      	adds	r3, r7, r3
    1862:	2200      	movs	r2, #0
    1864:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1866:	2354      	movs	r3, #84	; 0x54
    1868:	18fb      	adds	r3, r7, r3
    186a:	2201      	movs	r2, #1
    186c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    186e:	2354      	movs	r3, #84	; 0x54
    1870:	18fb      	adds	r3, r7, r3
    1872:	0018      	movs	r0, r3
    1874:	4b2b      	ldr	r3, [pc, #172]	; (1924 <system_clock_init+0xf0>)
    1876:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1878:	2006      	movs	r0, #6
    187a:	4b2b      	ldr	r3, [pc, #172]	; (1928 <system_clock_init+0xf4>)
    187c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    187e:	4b2b      	ldr	r3, [pc, #172]	; (192c <system_clock_init+0xf8>)
    1880:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1882:	230c      	movs	r3, #12
    1884:	18fb      	adds	r3, r7, r3
    1886:	0018      	movs	r0, r3
    1888:	4b29      	ldr	r3, [pc, #164]	; (1930 <system_clock_init+0xfc>)
    188a:	4798      	blx	r3
    188c:	230c      	movs	r3, #12
    188e:	18fb      	adds	r3, r7, r3
    1890:	2206      	movs	r2, #6
    1892:	701a      	strb	r2, [r3, #0]
    1894:	230c      	movs	r3, #12
    1896:	18fb      	adds	r3, r7, r3
    1898:	2201      	movs	r2, #1
    189a:	605a      	str	r2, [r3, #4]
    189c:	230c      	movs	r3, #12
    189e:	18fb      	adds	r3, r7, r3
    18a0:	2200      	movs	r2, #0
    18a2:	721a      	strb	r2, [r3, #8]
    18a4:	230c      	movs	r3, #12
    18a6:	18fb      	adds	r3, r7, r3
    18a8:	2200      	movs	r2, #0
    18aa:	725a      	strb	r2, [r3, #9]
    18ac:	230c      	movs	r3, #12
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	0019      	movs	r1, r3
    18b2:	2005      	movs	r0, #5
    18b4:	4b1f      	ldr	r3, [pc, #124]	; (1934 <system_clock_init+0x100>)
    18b6:	4798      	blx	r3
    18b8:	2005      	movs	r0, #5
    18ba:	4b1f      	ldr	r3, [pc, #124]	; (1938 <system_clock_init+0x104>)
    18bc:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    18be:	2000      	movs	r0, #0
    18c0:	4b1e      	ldr	r3, [pc, #120]	; (193c <system_clock_init+0x108>)
    18c2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    18c4:	2100      	movs	r1, #0
    18c6:	2000      	movs	r0, #0
    18c8:	4b1d      	ldr	r3, [pc, #116]	; (1940 <system_clock_init+0x10c>)
    18ca:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    18cc:	2100      	movs	r1, #0
    18ce:	2001      	movs	r0, #1
    18d0:	4b1b      	ldr	r3, [pc, #108]	; (1940 <system_clock_init+0x10c>)
    18d2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    18d4:	2100      	movs	r1, #0
    18d6:	2002      	movs	r0, #2
    18d8:	4b19      	ldr	r3, [pc, #100]	; (1940 <system_clock_init+0x10c>)
    18da:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    18dc:	003b      	movs	r3, r7
    18de:	0018      	movs	r0, r3
    18e0:	4b13      	ldr	r3, [pc, #76]	; (1930 <system_clock_init+0xfc>)
    18e2:	4798      	blx	r3
    18e4:	003b      	movs	r3, r7
    18e6:	2206      	movs	r2, #6
    18e8:	701a      	strb	r2, [r3, #0]
    18ea:	003b      	movs	r3, r7
    18ec:	2201      	movs	r2, #1
    18ee:	605a      	str	r2, [r3, #4]
    18f0:	003b      	movs	r3, r7
    18f2:	2201      	movs	r2, #1
    18f4:	721a      	strb	r2, [r3, #8]
    18f6:	003b      	movs	r3, r7
    18f8:	2200      	movs	r2, #0
    18fa:	725a      	strb	r2, [r3, #9]
    18fc:	003b      	movs	r3, r7
    18fe:	0019      	movs	r1, r3
    1900:	2000      	movs	r0, #0
    1902:	4b0c      	ldr	r3, [pc, #48]	; (1934 <system_clock_init+0x100>)
    1904:	4798      	blx	r3
    1906:	2000      	movs	r0, #0
    1908:	4b0b      	ldr	r3, [pc, #44]	; (1938 <system_clock_init+0x104>)
    190a:	4798      	blx	r3
#endif
}
    190c:	46c0      	nop			; (mov r8, r8)
    190e:	46bd      	mov	sp, r7
    1910:	b016      	add	sp, #88	; 0x58
    1912:	bd80      	pop	{r7, pc}
    1914:	40000800 	.word	0x40000800
    1918:	00001645 	.word	0x00001645
    191c:	000017fd 	.word	0x000017fd
    1920:	000015af 	.word	0x000015af
    1924:	000016d9 	.word	0x000016d9
    1928:	00001751 	.word	0x00001751
    192c:	000019e9 	.word	0x000019e9
    1930:	00001581 	.word	0x00001581
    1934:	00001a19 	.word	0x00001a19
    1938:	00001b3d 	.word	0x00001b3d
    193c:	000015d1 	.word	0x000015d1
    1940:	000015f1 	.word	0x000015f1

00001944 <system_apb_clock_set_mask>:
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	0002      	movs	r2, r0
    194c:	6039      	str	r1, [r7, #0]
    194e:	1dfb      	adds	r3, r7, #7
    1950:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1952:	1dfb      	adds	r3, r7, #7
    1954:	781b      	ldrb	r3, [r3, #0]
    1956:	2b01      	cmp	r3, #1
    1958:	d00a      	beq.n	1970 <system_apb_clock_set_mask+0x2c>
    195a:	2b02      	cmp	r3, #2
    195c:	d00f      	beq.n	197e <system_apb_clock_set_mask+0x3a>
    195e:	2b00      	cmp	r3, #0
    1960:	d114      	bne.n	198c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1962:	4b0e      	ldr	r3, [pc, #56]	; (199c <system_apb_clock_set_mask+0x58>)
    1964:	4a0d      	ldr	r2, [pc, #52]	; (199c <system_apb_clock_set_mask+0x58>)
    1966:	6991      	ldr	r1, [r2, #24]
    1968:	683a      	ldr	r2, [r7, #0]
    196a:	430a      	orrs	r2, r1
    196c:	619a      	str	r2, [r3, #24]
			break;
    196e:	e00f      	b.n	1990 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1970:	4b0a      	ldr	r3, [pc, #40]	; (199c <system_apb_clock_set_mask+0x58>)
    1972:	4a0a      	ldr	r2, [pc, #40]	; (199c <system_apb_clock_set_mask+0x58>)
    1974:	69d1      	ldr	r1, [r2, #28]
    1976:	683a      	ldr	r2, [r7, #0]
    1978:	430a      	orrs	r2, r1
    197a:	61da      	str	r2, [r3, #28]
			break;
    197c:	e008      	b.n	1990 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    197e:	4b07      	ldr	r3, [pc, #28]	; (199c <system_apb_clock_set_mask+0x58>)
    1980:	4a06      	ldr	r2, [pc, #24]	; (199c <system_apb_clock_set_mask+0x58>)
    1982:	6a11      	ldr	r1, [r2, #32]
    1984:	683a      	ldr	r2, [r7, #0]
    1986:	430a      	orrs	r2, r1
    1988:	621a      	str	r2, [r3, #32]
			break;
    198a:	e001      	b.n	1990 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    198c:	2317      	movs	r3, #23
    198e:	e000      	b.n	1992 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1990:	2300      	movs	r3, #0
}
    1992:	0018      	movs	r0, r3
    1994:	46bd      	mov	sp, r7
    1996:	b002      	add	sp, #8
    1998:	bd80      	pop	{r7, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	40000400 	.word	0x40000400

000019a0 <system_interrupt_enter_critical_section>:
{
    19a0:	b580      	push	{r7, lr}
    19a2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    19a4:	4b02      	ldr	r3, [pc, #8]	; (19b0 <system_interrupt_enter_critical_section+0x10>)
    19a6:	4798      	blx	r3
}
    19a8:	46c0      	nop			; (mov r8, r8)
    19aa:	46bd      	mov	sp, r7
    19ac:	bd80      	pop	{r7, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	00001319 	.word	0x00001319

000019b4 <system_interrupt_leave_critical_section>:
{
    19b4:	b580      	push	{r7, lr}
    19b6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    19b8:	4b02      	ldr	r3, [pc, #8]	; (19c4 <system_interrupt_leave_critical_section+0x10>)
    19ba:	4798      	blx	r3
}
    19bc:	46c0      	nop			; (mov r8, r8)
    19be:	46bd      	mov	sp, r7
    19c0:	bd80      	pop	{r7, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	0000136d 	.word	0x0000136d

000019c8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19cc:	4b05      	ldr	r3, [pc, #20]	; (19e4 <system_gclk_is_syncing+0x1c>)
    19ce:	785b      	ldrb	r3, [r3, #1]
    19d0:	b2db      	uxtb	r3, r3
    19d2:	b25b      	sxtb	r3, r3
    19d4:	2b00      	cmp	r3, #0
    19d6:	da01      	bge.n	19dc <system_gclk_is_syncing+0x14>
		return true;
    19d8:	2301      	movs	r3, #1
    19da:	e000      	b.n	19de <system_gclk_is_syncing+0x16>
	}

	return false;
    19dc:	2300      	movs	r3, #0
}
    19de:	0018      	movs	r0, r3
    19e0:	46bd      	mov	sp, r7
    19e2:	bd80      	pop	{r7, pc}
    19e4:	40000c00 	.word	0x40000c00

000019e8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    19e8:	b580      	push	{r7, lr}
    19ea:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    19ec:	2108      	movs	r1, #8
    19ee:	2000      	movs	r0, #0
    19f0:	4b07      	ldr	r3, [pc, #28]	; (1a10 <system_gclk_init+0x28>)
    19f2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    19f4:	4b07      	ldr	r3, [pc, #28]	; (1a14 <system_gclk_init+0x2c>)
    19f6:	2201      	movs	r2, #1
    19f8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	4b05      	ldr	r3, [pc, #20]	; (1a14 <system_gclk_init+0x2c>)
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	b2db      	uxtb	r3, r3
    1a02:	001a      	movs	r2, r3
    1a04:	2301      	movs	r3, #1
    1a06:	4013      	ands	r3, r2
    1a08:	d1f8      	bne.n	19fc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	46bd      	mov	sp, r7
    1a0e:	bd80      	pop	{r7, pc}
    1a10:	00001945 	.word	0x00001945
    1a14:	40000c00 	.word	0x40000c00

00001a18 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a18:	b580      	push	{r7, lr}
    1a1a:	b086      	sub	sp, #24
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	0002      	movs	r2, r0
    1a20:	6039      	str	r1, [r7, #0]
    1a22:	1dfb      	adds	r3, r7, #7
    1a24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a26:	1dfb      	adds	r3, r7, #7
    1a28:	781b      	ldrb	r3, [r3, #0]
    1a2a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1a2c:	1dfb      	adds	r3, r7, #7
    1a2e:	781b      	ldrb	r3, [r3, #0]
    1a30:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a32:	683b      	ldr	r3, [r7, #0]
    1a34:	781b      	ldrb	r3, [r3, #0]
    1a36:	021b      	lsls	r3, r3, #8
    1a38:	001a      	movs	r2, r3
    1a3a:	697b      	ldr	r3, [r7, #20]
    1a3c:	4313      	orrs	r3, r2
    1a3e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a40:	683b      	ldr	r3, [r7, #0]
    1a42:	785b      	ldrb	r3, [r3, #1]
    1a44:	2b00      	cmp	r3, #0
    1a46:	d004      	beq.n	1a52 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a48:	697b      	ldr	r3, [r7, #20]
    1a4a:	2280      	movs	r2, #128	; 0x80
    1a4c:	02d2      	lsls	r2, r2, #11
    1a4e:	4313      	orrs	r3, r2
    1a50:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a52:	683b      	ldr	r3, [r7, #0]
    1a54:	7a5b      	ldrb	r3, [r3, #9]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d004      	beq.n	1a64 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a5a:	697b      	ldr	r3, [r7, #20]
    1a5c:	2280      	movs	r2, #128	; 0x80
    1a5e:	0312      	lsls	r2, r2, #12
    1a60:	4313      	orrs	r3, r2
    1a62:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a64:	683b      	ldr	r3, [r7, #0]
    1a66:	685b      	ldr	r3, [r3, #4]
    1a68:	2b01      	cmp	r3, #1
    1a6a:	d92c      	bls.n	1ac6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a6c:	683b      	ldr	r3, [r7, #0]
    1a6e:	685a      	ldr	r2, [r3, #4]
    1a70:	683b      	ldr	r3, [r7, #0]
    1a72:	685b      	ldr	r3, [r3, #4]
    1a74:	3b01      	subs	r3, #1
    1a76:	4013      	ands	r3, r2
    1a78:	d11a      	bne.n	1ab0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1a7a:	2300      	movs	r3, #0
    1a7c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a7e:	2302      	movs	r3, #2
    1a80:	60bb      	str	r3, [r7, #8]
    1a82:	e005      	b.n	1a90 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1a84:	68fb      	ldr	r3, [r7, #12]
    1a86:	3301      	adds	r3, #1
    1a88:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    1a8a:	68bb      	ldr	r3, [r7, #8]
    1a8c:	005b      	lsls	r3, r3, #1
    1a8e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    1a90:	683b      	ldr	r3, [r7, #0]
    1a92:	685a      	ldr	r2, [r3, #4]
    1a94:	68bb      	ldr	r3, [r7, #8]
    1a96:	429a      	cmp	r2, r3
    1a98:	d8f4      	bhi.n	1a84 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a9a:	68fb      	ldr	r3, [r7, #12]
    1a9c:	021b      	lsls	r3, r3, #8
    1a9e:	693a      	ldr	r2, [r7, #16]
    1aa0:	4313      	orrs	r3, r2
    1aa2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1aa4:	697b      	ldr	r3, [r7, #20]
    1aa6:	2280      	movs	r2, #128	; 0x80
    1aa8:	0352      	lsls	r2, r2, #13
    1aaa:	4313      	orrs	r3, r2
    1aac:	617b      	str	r3, [r7, #20]
    1aae:	e00a      	b.n	1ac6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ab0:	683b      	ldr	r3, [r7, #0]
    1ab2:	685b      	ldr	r3, [r3, #4]
    1ab4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    1ab6:	693a      	ldr	r2, [r7, #16]
    1ab8:	4313      	orrs	r3, r2
    1aba:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1abc:	697b      	ldr	r3, [r7, #20]
    1abe:	2280      	movs	r2, #128	; 0x80
    1ac0:	0292      	lsls	r2, r2, #10
    1ac2:	4313      	orrs	r3, r2
    1ac4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ac6:	683b      	ldr	r3, [r7, #0]
    1ac8:	7a1b      	ldrb	r3, [r3, #8]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d004      	beq.n	1ad8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ace:	697b      	ldr	r3, [r7, #20]
    1ad0:	2280      	movs	r2, #128	; 0x80
    1ad2:	0392      	lsls	r2, r2, #14
    1ad4:	4313      	orrs	r3, r2
    1ad6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1ad8:	46c0      	nop			; (mov r8, r8)
    1ada:	4b13      	ldr	r3, [pc, #76]	; (1b28 <system_gclk_gen_set_config+0x110>)
    1adc:	4798      	blx	r3
    1ade:	1e03      	subs	r3, r0, #0
    1ae0:	d1fb      	bne.n	1ada <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1ae2:	4b12      	ldr	r3, [pc, #72]	; (1b2c <system_gclk_gen_set_config+0x114>)
    1ae4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ae6:	4a12      	ldr	r2, [pc, #72]	; (1b30 <system_gclk_gen_set_config+0x118>)
    1ae8:	1dfb      	adds	r3, r7, #7
    1aea:	781b      	ldrb	r3, [r3, #0]
    1aec:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	4b0d      	ldr	r3, [pc, #52]	; (1b28 <system_gclk_gen_set_config+0x110>)
    1af2:	4798      	blx	r3
    1af4:	1e03      	subs	r3, r0, #0
    1af6:	d1fb      	bne.n	1af0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1af8:	4b0e      	ldr	r3, [pc, #56]	; (1b34 <system_gclk_gen_set_config+0x11c>)
    1afa:	693a      	ldr	r2, [r7, #16]
    1afc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	4b09      	ldr	r3, [pc, #36]	; (1b28 <system_gclk_gen_set_config+0x110>)
    1b02:	4798      	blx	r3
    1b04:	1e03      	subs	r3, r0, #0
    1b06:	d1fb      	bne.n	1b00 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1b08:	4b0a      	ldr	r3, [pc, #40]	; (1b34 <system_gclk_gen_set_config+0x11c>)
    1b0a:	4a0a      	ldr	r2, [pc, #40]	; (1b34 <system_gclk_gen_set_config+0x11c>)
    1b0c:	6851      	ldr	r1, [r2, #4]
    1b0e:	2280      	movs	r2, #128	; 0x80
    1b10:	0252      	lsls	r2, r2, #9
    1b12:	4011      	ands	r1, r2
    1b14:	697a      	ldr	r2, [r7, #20]
    1b16:	430a      	orrs	r2, r1
    1b18:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1b1a:	4b07      	ldr	r3, [pc, #28]	; (1b38 <system_gclk_gen_set_config+0x120>)
    1b1c:	4798      	blx	r3
}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	46bd      	mov	sp, r7
    1b22:	b006      	add	sp, #24
    1b24:	bd80      	pop	{r7, pc}
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	000019c9 	.word	0x000019c9
    1b2c:	000019a1 	.word	0x000019a1
    1b30:	40000c08 	.word	0x40000c08
    1b34:	40000c00 	.word	0x40000c00
    1b38:	000019b5 	.word	0x000019b5

00001b3c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	b082      	sub	sp, #8
    1b40:	af00      	add	r7, sp, #0
    1b42:	0002      	movs	r2, r0
    1b44:	1dfb      	adds	r3, r7, #7
    1b46:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1b48:	46c0      	nop			; (mov r8, r8)
    1b4a:	4b0e      	ldr	r3, [pc, #56]	; (1b84 <system_gclk_gen_enable+0x48>)
    1b4c:	4798      	blx	r3
    1b4e:	1e03      	subs	r3, r0, #0
    1b50:	d1fb      	bne.n	1b4a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1b52:	4b0d      	ldr	r3, [pc, #52]	; (1b88 <system_gclk_gen_enable+0x4c>)
    1b54:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b56:	4a0d      	ldr	r2, [pc, #52]	; (1b8c <system_gclk_gen_enable+0x50>)
    1b58:	1dfb      	adds	r3, r7, #7
    1b5a:	781b      	ldrb	r3, [r3, #0]
    1b5c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	4b08      	ldr	r3, [pc, #32]	; (1b84 <system_gclk_gen_enable+0x48>)
    1b62:	4798      	blx	r3
    1b64:	1e03      	subs	r3, r0, #0
    1b66:	d1fb      	bne.n	1b60 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b68:	4b09      	ldr	r3, [pc, #36]	; (1b90 <system_gclk_gen_enable+0x54>)
    1b6a:	4a09      	ldr	r2, [pc, #36]	; (1b90 <system_gclk_gen_enable+0x54>)
    1b6c:	6852      	ldr	r2, [r2, #4]
    1b6e:	2180      	movs	r1, #128	; 0x80
    1b70:	0249      	lsls	r1, r1, #9
    1b72:	430a      	orrs	r2, r1
    1b74:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1b76:	4b07      	ldr	r3, [pc, #28]	; (1b94 <system_gclk_gen_enable+0x58>)
    1b78:	4798      	blx	r3
}
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	46bd      	mov	sp, r7
    1b7e:	b002      	add	sp, #8
    1b80:	bd80      	pop	{r7, pc}
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	000019c9 	.word	0x000019c9
    1b88:	000019a1 	.word	0x000019a1
    1b8c:	40000c04 	.word	0x40000c04
    1b90:	40000c00 	.word	0x40000c00
    1b94:	000019b5 	.word	0x000019b5

00001b98 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b084      	sub	sp, #16
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	0002      	movs	r2, r0
    1ba0:	6039      	str	r1, [r7, #0]
    1ba2:	1dfb      	adds	r3, r7, #7
    1ba4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1ba6:	1dfb      	adds	r3, r7, #7
    1ba8:	781b      	ldrb	r3, [r3, #0]
    1baa:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1bac:	683b      	ldr	r3, [r7, #0]
    1bae:	781b      	ldrb	r3, [r3, #0]
    1bb0:	021b      	lsls	r3, r3, #8
    1bb2:	001a      	movs	r2, r3
    1bb4:	68fb      	ldr	r3, [r7, #12]
    1bb6:	4313      	orrs	r3, r2
    1bb8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1bba:	1dfb      	adds	r3, r7, #7
    1bbc:	781b      	ldrb	r3, [r3, #0]
    1bbe:	0018      	movs	r0, r3
    1bc0:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <system_gclk_chan_set_config+0x3c>)
    1bc2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <system_gclk_chan_set_config+0x40>)
    1bc6:	68fa      	ldr	r2, [r7, #12]
    1bc8:	b292      	uxth	r2, r2
    1bca:	805a      	strh	r2, [r3, #2]
}
    1bcc:	46c0      	nop			; (mov r8, r8)
    1bce:	46bd      	mov	sp, r7
    1bd0:	b004      	add	sp, #16
    1bd2:	bd80      	pop	{r7, pc}
    1bd4:	00001c25 	.word	0x00001c25
    1bd8:	40000c00 	.word	0x40000c00

00001bdc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bdc:	b580      	push	{r7, lr}
    1bde:	b082      	sub	sp, #8
    1be0:	af00      	add	r7, sp, #0
    1be2:	0002      	movs	r2, r0
    1be4:	1dfb      	adds	r3, r7, #7
    1be6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1be8:	4b0a      	ldr	r3, [pc, #40]	; (1c14 <system_gclk_chan_enable+0x38>)
    1bea:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bec:	4a0a      	ldr	r2, [pc, #40]	; (1c18 <system_gclk_chan_enable+0x3c>)
    1bee:	1dfb      	adds	r3, r7, #7
    1bf0:	781b      	ldrb	r3, [r3, #0]
    1bf2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1bf4:	4909      	ldr	r1, [pc, #36]	; (1c1c <system_gclk_chan_enable+0x40>)
    1bf6:	4b09      	ldr	r3, [pc, #36]	; (1c1c <system_gclk_chan_enable+0x40>)
    1bf8:	885b      	ldrh	r3, [r3, #2]
    1bfa:	b29b      	uxth	r3, r3
    1bfc:	2280      	movs	r2, #128	; 0x80
    1bfe:	01d2      	lsls	r2, r2, #7
    1c00:	4313      	orrs	r3, r2
    1c02:	b29b      	uxth	r3, r3
    1c04:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1c06:	4b06      	ldr	r3, [pc, #24]	; (1c20 <system_gclk_chan_enable+0x44>)
    1c08:	4798      	blx	r3
}
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	46bd      	mov	sp, r7
    1c0e:	b002      	add	sp, #8
    1c10:	bd80      	pop	{r7, pc}
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	000019a1 	.word	0x000019a1
    1c18:	40000c02 	.word	0x40000c02
    1c1c:	40000c00 	.word	0x40000c00
    1c20:	000019b5 	.word	0x000019b5

00001c24 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	b084      	sub	sp, #16
    1c28:	af00      	add	r7, sp, #0
    1c2a:	0002      	movs	r2, r0
    1c2c:	1dfb      	adds	r3, r7, #7
    1c2e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1c30:	4b1c      	ldr	r3, [pc, #112]	; (1ca4 <system_gclk_chan_disable+0x80>)
    1c32:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c34:	4a1c      	ldr	r2, [pc, #112]	; (1ca8 <system_gclk_chan_disable+0x84>)
    1c36:	1dfb      	adds	r3, r7, #7
    1c38:	781b      	ldrb	r3, [r3, #0]
    1c3a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c3c:	4b1b      	ldr	r3, [pc, #108]	; (1cac <system_gclk_chan_disable+0x88>)
    1c3e:	885b      	ldrh	r3, [r3, #2]
    1c40:	051b      	lsls	r3, r3, #20
    1c42:	0f1b      	lsrs	r3, r3, #28
    1c44:	b2db      	uxtb	r3, r3
    1c46:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1c48:	4a18      	ldr	r2, [pc, #96]	; (1cac <system_gclk_chan_disable+0x88>)
    1c4a:	8853      	ldrh	r3, [r2, #2]
    1c4c:	4918      	ldr	r1, [pc, #96]	; (1cb0 <system_gclk_chan_disable+0x8c>)
    1c4e:	400b      	ands	r3, r1
    1c50:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c52:	4a16      	ldr	r2, [pc, #88]	; (1cac <system_gclk_chan_disable+0x88>)
    1c54:	4b15      	ldr	r3, [pc, #84]	; (1cac <system_gclk_chan_disable+0x88>)
    1c56:	885b      	ldrh	r3, [r3, #2]
    1c58:	b29b      	uxth	r3, r3
    1c5a:	4916      	ldr	r1, [pc, #88]	; (1cb4 <system_gclk_chan_disable+0x90>)
    1c5c:	400b      	ands	r3, r1
    1c5e:	b29b      	uxth	r3, r3
    1c60:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	4b11      	ldr	r3, [pc, #68]	; (1cac <system_gclk_chan_disable+0x88>)
    1c66:	885b      	ldrh	r3, [r3, #2]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	001a      	movs	r2, r3
    1c6c:	2380      	movs	r3, #128	; 0x80
    1c6e:	01db      	lsls	r3, r3, #7
    1c70:	4013      	ands	r3, r2
    1c72:	d1f7      	bne.n	1c64 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c74:	4a0d      	ldr	r2, [pc, #52]	; (1cac <system_gclk_chan_disable+0x88>)
    1c76:	68fb      	ldr	r3, [r7, #12]
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	1c19      	adds	r1, r3, #0
    1c7c:	230f      	movs	r3, #15
    1c7e:	400b      	ands	r3, r1
    1c80:	b2d9      	uxtb	r1, r3
    1c82:	8853      	ldrh	r3, [r2, #2]
    1c84:	1c08      	adds	r0, r1, #0
    1c86:	210f      	movs	r1, #15
    1c88:	4001      	ands	r1, r0
    1c8a:	0208      	lsls	r0, r1, #8
    1c8c:	4908      	ldr	r1, [pc, #32]	; (1cb0 <system_gclk_chan_disable+0x8c>)
    1c8e:	400b      	ands	r3, r1
    1c90:	1c19      	adds	r1, r3, #0
    1c92:	1c03      	adds	r3, r0, #0
    1c94:	430b      	orrs	r3, r1
    1c96:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    1c98:	4b07      	ldr	r3, [pc, #28]	; (1cb8 <system_gclk_chan_disable+0x94>)
    1c9a:	4798      	blx	r3
}
    1c9c:	46c0      	nop			; (mov r8, r8)
    1c9e:	46bd      	mov	sp, r7
    1ca0:	b004      	add	sp, #16
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	000019a1 	.word	0x000019a1
    1ca8:	40000c02 	.word	0x40000c02
    1cac:	40000c00 	.word	0x40000c00
    1cb0:	fffff0ff 	.word	0xfffff0ff
    1cb4:	ffffbfff 	.word	0xffffbfff
    1cb8:	000019b5 	.word	0x000019b5

00001cbc <system_pinmux_get_group_from_gpio_pin>:
{
    1cbc:	b580      	push	{r7, lr}
    1cbe:	b084      	sub	sp, #16
    1cc0:	af00      	add	r7, sp, #0
    1cc2:	0002      	movs	r2, r0
    1cc4:	1dfb      	adds	r3, r7, #7
    1cc6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1cc8:	230f      	movs	r3, #15
    1cca:	18fb      	adds	r3, r7, r3
    1ccc:	1dfa      	adds	r2, r7, #7
    1cce:	7812      	ldrb	r2, [r2, #0]
    1cd0:	09d2      	lsrs	r2, r2, #7
    1cd2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1cd4:	230e      	movs	r3, #14
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	1dfa      	adds	r2, r7, #7
    1cda:	7812      	ldrb	r2, [r2, #0]
    1cdc:	0952      	lsrs	r2, r2, #5
    1cde:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1ce0:	4b0d      	ldr	r3, [pc, #52]	; (1d18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1ce2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1ce4:	230f      	movs	r3, #15
    1ce6:	18fb      	adds	r3, r7, r3
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d10f      	bne.n	1d0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1cee:	230f      	movs	r3, #15
    1cf0:	18fb      	adds	r3, r7, r3
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	009b      	lsls	r3, r3, #2
    1cf6:	2210      	movs	r2, #16
    1cf8:	4694      	mov	ip, r2
    1cfa:	44bc      	add	ip, r7
    1cfc:	4463      	add	r3, ip
    1cfe:	3b08      	subs	r3, #8
    1d00:	681a      	ldr	r2, [r3, #0]
    1d02:	230e      	movs	r3, #14
    1d04:	18fb      	adds	r3, r7, r3
    1d06:	781b      	ldrb	r3, [r3, #0]
    1d08:	01db      	lsls	r3, r3, #7
    1d0a:	18d3      	adds	r3, r2, r3
    1d0c:	e000      	b.n	1d10 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1d0e:	2300      	movs	r3, #0
}
    1d10:	0018      	movs	r0, r3
    1d12:	46bd      	mov	sp, r7
    1d14:	b004      	add	sp, #16
    1d16:	bd80      	pop	{r7, pc}
    1d18:	41004400 	.word	0x41004400

00001d1c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d1c:	b580      	push	{r7, lr}
    1d1e:	b088      	sub	sp, #32
    1d20:	af00      	add	r7, sp, #0
    1d22:	60f8      	str	r0, [r7, #12]
    1d24:	60b9      	str	r1, [r7, #8]
    1d26:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1d28:	2300      	movs	r3, #0
    1d2a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	78db      	ldrb	r3, [r3, #3]
    1d30:	2201      	movs	r2, #1
    1d32:	4053      	eors	r3, r2
    1d34:	b2db      	uxtb	r3, r3
    1d36:	2b00      	cmp	r3, #0
    1d38:	d035      	beq.n	1da6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d3a:	687b      	ldr	r3, [r7, #4]
    1d3c:	781b      	ldrb	r3, [r3, #0]
    1d3e:	2b80      	cmp	r3, #128	; 0x80
    1d40:	d00b      	beq.n	1d5a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1d42:	69fb      	ldr	r3, [r7, #28]
    1d44:	2280      	movs	r2, #128	; 0x80
    1d46:	0252      	lsls	r2, r2, #9
    1d48:	4313      	orrs	r3, r2
    1d4a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	781b      	ldrb	r3, [r3, #0]
    1d50:	061b      	lsls	r3, r3, #24
    1d52:	001a      	movs	r2, r3
    1d54:	69fb      	ldr	r3, [r7, #28]
    1d56:	4313      	orrs	r3, r2
    1d58:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	785b      	ldrb	r3, [r3, #1]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d003      	beq.n	1d6a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d66:	2b02      	cmp	r3, #2
    1d68:	d110      	bne.n	1d8c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d6a:	69fb      	ldr	r3, [r7, #28]
    1d6c:	2280      	movs	r2, #128	; 0x80
    1d6e:	0292      	lsls	r2, r2, #10
    1d70:	4313      	orrs	r3, r2
    1d72:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	789b      	ldrb	r3, [r3, #2]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d004      	beq.n	1d86 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d7c:	69fb      	ldr	r3, [r7, #28]
    1d7e:	2280      	movs	r2, #128	; 0x80
    1d80:	02d2      	lsls	r2, r2, #11
    1d82:	4313      	orrs	r3, r2
    1d84:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	68ba      	ldr	r2, [r7, #8]
    1d8a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	785b      	ldrb	r3, [r3, #1]
    1d90:	2b01      	cmp	r3, #1
    1d92:	d003      	beq.n	1d9c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d98:	2b02      	cmp	r3, #2
    1d9a:	d107      	bne.n	1dac <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d9c:	69fb      	ldr	r3, [r7, #28]
    1d9e:	4a22      	ldr	r2, [pc, #136]	; (1e28 <_system_pinmux_config+0x10c>)
    1da0:	4013      	ands	r3, r2
    1da2:	61fb      	str	r3, [r7, #28]
    1da4:	e002      	b.n	1dac <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1da6:	68fb      	ldr	r3, [r7, #12]
    1da8:	68ba      	ldr	r2, [r7, #8]
    1daa:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1dac:	68bb      	ldr	r3, [r7, #8]
    1dae:	041b      	lsls	r3, r3, #16
    1db0:	0c1b      	lsrs	r3, r3, #16
    1db2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1db4:	68bb      	ldr	r3, [r7, #8]
    1db6:	0c1b      	lsrs	r3, r3, #16
    1db8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dba:	69ba      	ldr	r2, [r7, #24]
    1dbc:	69fb      	ldr	r3, [r7, #28]
    1dbe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1dc0:	22a0      	movs	r2, #160	; 0xa0
    1dc2:	05d2      	lsls	r2, r2, #23
    1dc4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dca:	697a      	ldr	r2, [r7, #20]
    1dcc:	69fb      	ldr	r3, [r7, #28]
    1dce:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1dd0:	22d0      	movs	r2, #208	; 0xd0
    1dd2:	0612      	lsls	r2, r2, #24
    1dd4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dd6:	68fb      	ldr	r3, [r7, #12]
    1dd8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	78db      	ldrb	r3, [r3, #3]
    1dde:	2201      	movs	r2, #1
    1de0:	4053      	eors	r3, r2
    1de2:	b2db      	uxtb	r3, r3
    1de4:	2b00      	cmp	r3, #0
    1de6:	d01a      	beq.n	1e1e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1de8:	69fa      	ldr	r2, [r7, #28]
    1dea:	2380      	movs	r3, #128	; 0x80
    1dec:	02db      	lsls	r3, r3, #11
    1dee:	4013      	ands	r3, r2
    1df0:	d00a      	beq.n	1e08 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1df2:	687b      	ldr	r3, [r7, #4]
    1df4:	789b      	ldrb	r3, [r3, #2]
    1df6:	2b01      	cmp	r3, #1
    1df8:	d103      	bne.n	1e02 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1dfa:	68fb      	ldr	r3, [r7, #12]
    1dfc:	68ba      	ldr	r2, [r7, #8]
    1dfe:	619a      	str	r2, [r3, #24]
    1e00:	e002      	b.n	1e08 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    1e02:	68fb      	ldr	r3, [r7, #12]
    1e04:	68ba      	ldr	r2, [r7, #8]
    1e06:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	785b      	ldrb	r3, [r3, #1]
    1e0c:	2b01      	cmp	r3, #1
    1e0e:	d003      	beq.n	1e18 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e14:	2b02      	cmp	r3, #2
    1e16:	d102      	bne.n	1e1e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1e18:	68fb      	ldr	r3, [r7, #12]
    1e1a:	68ba      	ldr	r2, [r7, #8]
    1e1c:	609a      	str	r2, [r3, #8]
		}
	}
}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	46bd      	mov	sp, r7
    1e22:	b008      	add	sp, #32
    1e24:	bd80      	pop	{r7, pc}
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	fffbffff 	.word	0xfffbffff

00001e2c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b084      	sub	sp, #16
    1e30:	af00      	add	r7, sp, #0
    1e32:	0002      	movs	r2, r0
    1e34:	6039      	str	r1, [r7, #0]
    1e36:	1dfb      	adds	r3, r7, #7
    1e38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1e3a:	1dfb      	adds	r3, r7, #7
    1e3c:	781b      	ldrb	r3, [r3, #0]
    1e3e:	0018      	movs	r0, r3
    1e40:	4b0a      	ldr	r3, [pc, #40]	; (1e6c <system_pinmux_pin_set_config+0x40>)
    1e42:	4798      	blx	r3
    1e44:	0003      	movs	r3, r0
    1e46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e48:	1dfb      	adds	r3, r7, #7
    1e4a:	781b      	ldrb	r3, [r3, #0]
    1e4c:	221f      	movs	r2, #31
    1e4e:	4013      	ands	r3, r2
    1e50:	2201      	movs	r2, #1
    1e52:	409a      	lsls	r2, r3
    1e54:	0013      	movs	r3, r2
    1e56:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1e58:	683a      	ldr	r2, [r7, #0]
    1e5a:	68b9      	ldr	r1, [r7, #8]
    1e5c:	68fb      	ldr	r3, [r7, #12]
    1e5e:	0018      	movs	r0, r3
    1e60:	4b03      	ldr	r3, [pc, #12]	; (1e70 <system_pinmux_pin_set_config+0x44>)
    1e62:	4798      	blx	r3
}
    1e64:	46c0      	nop			; (mov r8, r8)
    1e66:	46bd      	mov	sp, r7
    1e68:	b004      	add	sp, #16
    1e6a:	bd80      	pop	{r7, pc}
    1e6c:	00001cbd 	.word	0x00001cbd
    1e70:	00001d1d 	.word	0x00001d1d

00001e74 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1e74:	b580      	push	{r7, lr}
    1e76:	af00      	add	r7, sp, #0
	return;
    1e78:	46c0      	nop			; (mov r8, r8)
}
    1e7a:	46bd      	mov	sp, r7
    1e7c:	bd80      	pop	{r7, pc}
	...

00001e80 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e84:	4b06      	ldr	r3, [pc, #24]	; (1ea0 <system_init+0x20>)
    1e86:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e88:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <system_init+0x24>)
    1e8a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e8c:	4b06      	ldr	r3, [pc, #24]	; (1ea8 <system_init+0x28>)
    1e8e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e90:	4b06      	ldr	r3, [pc, #24]	; (1eac <system_init+0x2c>)
    1e92:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e94:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <system_init+0x30>)
    1e96:	4798      	blx	r3
}
    1e98:	46c0      	nop			; (mov r8, r8)
    1e9a:	46bd      	mov	sp, r7
    1e9c:	bd80      	pop	{r7, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	00001835 	.word	0x00001835
    1ea4:	000014a9 	.word	0x000014a9
    1ea8:	00001e75 	.word	0x00001e75
    1eac:	00000249 	.word	0x00000249
    1eb0:	00001e75 	.word	0x00001e75

00001eb4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	b082      	sub	sp, #8
    1eb8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1eba:	4b2f      	ldr	r3, [pc, #188]	; (1f78 <Reset_Handler+0xc4>)
    1ebc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1ebe:	4b2f      	ldr	r3, [pc, #188]	; (1f7c <Reset_Handler+0xc8>)
    1ec0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1ec2:	687a      	ldr	r2, [r7, #4]
    1ec4:	683b      	ldr	r3, [r7, #0]
    1ec6:	429a      	cmp	r2, r3
    1ec8:	d00c      	beq.n	1ee4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1eca:	e007      	b.n	1edc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1ecc:	683b      	ldr	r3, [r7, #0]
    1ece:	1d1a      	adds	r2, r3, #4
    1ed0:	603a      	str	r2, [r7, #0]
    1ed2:	687a      	ldr	r2, [r7, #4]
    1ed4:	1d11      	adds	r1, r2, #4
    1ed6:	6079      	str	r1, [r7, #4]
    1ed8:	6812      	ldr	r2, [r2, #0]
    1eda:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1edc:	683a      	ldr	r2, [r7, #0]
    1ede:	4b28      	ldr	r3, [pc, #160]	; (1f80 <Reset_Handler+0xcc>)
    1ee0:	429a      	cmp	r2, r3
    1ee2:	d3f3      	bcc.n	1ecc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ee4:	4b27      	ldr	r3, [pc, #156]	; (1f84 <Reset_Handler+0xd0>)
    1ee6:	603b      	str	r3, [r7, #0]
    1ee8:	e004      	b.n	1ef4 <Reset_Handler+0x40>
                *pDest++ = 0;
    1eea:	683b      	ldr	r3, [r7, #0]
    1eec:	1d1a      	adds	r2, r3, #4
    1eee:	603a      	str	r2, [r7, #0]
    1ef0:	2200      	movs	r2, #0
    1ef2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1ef4:	683a      	ldr	r2, [r7, #0]
    1ef6:	4b24      	ldr	r3, [pc, #144]	; (1f88 <Reset_Handler+0xd4>)
    1ef8:	429a      	cmp	r2, r3
    1efa:	d3f6      	bcc.n	1eea <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1efc:	4b23      	ldr	r3, [pc, #140]	; (1f8c <Reset_Handler+0xd8>)
    1efe:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f00:	4b23      	ldr	r3, [pc, #140]	; (1f90 <Reset_Handler+0xdc>)
    1f02:	687a      	ldr	r2, [r7, #4]
    1f04:	21ff      	movs	r1, #255	; 0xff
    1f06:	438a      	bics	r2, r1
    1f08:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f0a:	4a22      	ldr	r2, [pc, #136]	; (1f94 <Reset_Handler+0xe0>)
    1f0c:	2390      	movs	r3, #144	; 0x90
    1f0e:	005b      	lsls	r3, r3, #1
    1f10:	2102      	movs	r1, #2
    1f12:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f14:	4a20      	ldr	r2, [pc, #128]	; (1f98 <Reset_Handler+0xe4>)
    1f16:	78d3      	ldrb	r3, [r2, #3]
    1f18:	2103      	movs	r1, #3
    1f1a:	438b      	bics	r3, r1
    1f1c:	1c19      	adds	r1, r3, #0
    1f1e:	2302      	movs	r3, #2
    1f20:	430b      	orrs	r3, r1
    1f22:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f24:	4a1c      	ldr	r2, [pc, #112]	; (1f98 <Reset_Handler+0xe4>)
    1f26:	78d3      	ldrb	r3, [r2, #3]
    1f28:	210c      	movs	r1, #12
    1f2a:	438b      	bics	r3, r1
    1f2c:	1c19      	adds	r1, r3, #0
    1f2e:	2308      	movs	r3, #8
    1f30:	430b      	orrs	r3, r1
    1f32:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f34:	4a19      	ldr	r2, [pc, #100]	; (1f9c <Reset_Handler+0xe8>)
    1f36:	7b93      	ldrb	r3, [r2, #14]
    1f38:	2130      	movs	r1, #48	; 0x30
    1f3a:	438b      	bics	r3, r1
    1f3c:	1c19      	adds	r1, r3, #0
    1f3e:	2320      	movs	r3, #32
    1f40:	430b      	orrs	r3, r1
    1f42:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1f44:	4a15      	ldr	r2, [pc, #84]	; (1f9c <Reset_Handler+0xe8>)
    1f46:	7b93      	ldrb	r3, [r2, #14]
    1f48:	210c      	movs	r1, #12
    1f4a:	438b      	bics	r3, r1
    1f4c:	1c19      	adds	r1, r3, #0
    1f4e:	2308      	movs	r3, #8
    1f50:	430b      	orrs	r3, r1
    1f52:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1f54:	4a11      	ldr	r2, [pc, #68]	; (1f9c <Reset_Handler+0xe8>)
    1f56:	7b93      	ldrb	r3, [r2, #14]
    1f58:	2103      	movs	r1, #3
    1f5a:	438b      	bics	r3, r1
    1f5c:	1c19      	adds	r1, r3, #0
    1f5e:	2302      	movs	r3, #2
    1f60:	430b      	orrs	r3, r1
    1f62:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1f64:	4a0e      	ldr	r2, [pc, #56]	; (1fa0 <Reset_Handler+0xec>)
    1f66:	6853      	ldr	r3, [r2, #4]
    1f68:	2180      	movs	r1, #128	; 0x80
    1f6a:	430b      	orrs	r3, r1
    1f6c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1f6e:	4b0d      	ldr	r3, [pc, #52]	; (1fa4 <Reset_Handler+0xf0>)
    1f70:	4798      	blx	r3

        /* Branch to main function */
        main();
    1f72:	4b0d      	ldr	r3, [pc, #52]	; (1fa8 <Reset_Handler+0xf4>)
    1f74:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1f76:	e7fe      	b.n	1f76 <Reset_Handler+0xc2>
    1f78:	00002050 	.word	0x00002050
    1f7c:	20000000 	.word	0x20000000
    1f80:	20000004 	.word	0x20000004
    1f84:	20000004 	.word	0x20000004
    1f88:	200000c8 	.word	0x200000c8
    1f8c:	00000000 	.word	0x00000000
    1f90:	e000ed00 	.word	0xe000ed00
    1f94:	41007000 	.word	0x41007000
    1f98:	41005000 	.word	0x41005000
    1f9c:	41004800 	.word	0x41004800
    1fa0:	41004000 	.word	0x41004000
    1fa4:	00001fb5 	.word	0x00001fb5
    1fa8:	000010e9 	.word	0x000010e9

00001fac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1fac:	b580      	push	{r7, lr}
    1fae:	af00      	add	r7, sp, #0
        while (1) {
    1fb0:	e7fe      	b.n	1fb0 <Dummy_Handler+0x4>
	...

00001fb4 <__libc_init_array>:
    1fb4:	b570      	push	{r4, r5, r6, lr}
    1fb6:	2600      	movs	r6, #0
    1fb8:	4d0c      	ldr	r5, [pc, #48]	; (1fec <__libc_init_array+0x38>)
    1fba:	4c0d      	ldr	r4, [pc, #52]	; (1ff0 <__libc_init_array+0x3c>)
    1fbc:	1b64      	subs	r4, r4, r5
    1fbe:	10a4      	asrs	r4, r4, #2
    1fc0:	42a6      	cmp	r6, r4
    1fc2:	d109      	bne.n	1fd8 <__libc_init_array+0x24>
    1fc4:	2600      	movs	r6, #0
    1fc6:	f000 f833 	bl	2030 <_init>
    1fca:	4d0a      	ldr	r5, [pc, #40]	; (1ff4 <__libc_init_array+0x40>)
    1fcc:	4c0a      	ldr	r4, [pc, #40]	; (1ff8 <__libc_init_array+0x44>)
    1fce:	1b64      	subs	r4, r4, r5
    1fd0:	10a4      	asrs	r4, r4, #2
    1fd2:	42a6      	cmp	r6, r4
    1fd4:	d105      	bne.n	1fe2 <__libc_init_array+0x2e>
    1fd6:	bd70      	pop	{r4, r5, r6, pc}
    1fd8:	00b3      	lsls	r3, r6, #2
    1fda:	58eb      	ldr	r3, [r5, r3]
    1fdc:	4798      	blx	r3
    1fde:	3601      	adds	r6, #1
    1fe0:	e7ee      	b.n	1fc0 <__libc_init_array+0xc>
    1fe2:	00b3      	lsls	r3, r6, #2
    1fe4:	58eb      	ldr	r3, [r5, r3]
    1fe6:	4798      	blx	r3
    1fe8:	3601      	adds	r6, #1
    1fea:	e7f2      	b.n	1fd2 <__libc_init_array+0x1e>
    1fec:	0000203c 	.word	0x0000203c
    1ff0:	0000203c 	.word	0x0000203c
    1ff4:	0000203c 	.word	0x0000203c
    1ff8:	00002040 	.word	0x00002040
    1ffc:	42001800 	.word	0x42001800
    2000:	42001c00 	.word	0x42001c00
    2004:	00001212 	.word	0x00001212
    2008:	00800040 	.word	0x00800040
    200c:	0000178c 	.word	0x0000178c
    2010:	000017dc 	.word	0x000017dc
    2014:	000017dc 	.word	0x000017dc
    2018:	000017d8 	.word	0x000017d8
    201c:	0000177e 	.word	0x0000177e
    2020:	0000179e 	.word	0x0000179e
    2024:	0000176e 	.word	0x0000176e
    2028:	000017b0 	.word	0x000017b0
    202c:	000017c2 	.word	0x000017c2

00002030 <_init>:
    2030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2036:	bc08      	pop	{r3}
    2038:	469e      	mov	lr, r3
    203a:	4770      	bx	lr

0000203c <__init_array_start>:
    203c:	000000b5 	.word	0x000000b5

00002040 <_fini>:
    2040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2046:	bc08      	pop	{r3}
    2048:	469e      	mov	lr, r3
    204a:	4770      	bx	lr

0000204c <__fini_array_start>:
    204c:	0000008d 	.word	0x0000008d
