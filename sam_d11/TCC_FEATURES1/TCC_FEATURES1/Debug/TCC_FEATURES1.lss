
TCC_FEATURES1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001248  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00001248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000178  2000001c  00001264  0002001c  2**2
                  ALLOC
  3 .stack        00000404  20000194  000013dc  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023020  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003620  00000000  00000000  000430bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000004e0  00000000  00000000  000466dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000004f8  00000000  00000000  00046bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00005f4c  00000000  00000000  000470b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000aab6  00000000  00000000  0004d001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00079e4e  00000000  00000000  00057ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b28  00000000  00000000  000d1908  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004218  00000000  00000000  000d2430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 05 00 20 e1 0e 00 00 dd 0e 00 00 dd 0e 00 00     ... ............
	...
      2c:	dd 0e 00 00 00 00 00 00 00 00 00 00 dd 0e 00 00     ................
      3c:	dd 0e 00 00 dd 0e 00 00 dd 0e 00 00 dd 0e 00 00     ................
      4c:	dd 0e 00 00 f5 01 00 00 dd 0e 00 00 dd 0e 00 00     ................
      5c:	dd 0e 00 00 95 01 00 00 f1 02 00 00 01 03 00 00     ................
      6c:	11 03 00 00 cd 0e 00 00 dd 0e 00 00 dd 0e 00 00     ................
      7c:	dd 0e 00 00 dd 0e 00 00 dd 0e 00 00 dd 0e 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000001c 	.word	0x2000001c
      ac:	00000000 	.word	0x00000000
      b0:	00001248 	.word	0x00001248

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000020 	.word	0x20000020
      e0:	00001248 	.word	0x00001248
      e4:	00001248 	.word	0x00001248
      e8:	00000000 	.word	0x00000000

000000ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
      ec:	4b0c      	ldr	r3, [pc, #48]	; (120 <cpu_irq_enter_critical+0x34>)
      ee:	681b      	ldr	r3, [r3, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d106      	bne.n	102 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
      f8:	2b00      	cmp	r3, #0
      fa:	d007      	beq.n	10c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      fc:	2200      	movs	r2, #0
      fe:	4b09      	ldr	r3, [pc, #36]	; (124 <cpu_irq_enter_critical+0x38>)
     100:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     102:	4a07      	ldr	r2, [pc, #28]	; (120 <cpu_irq_enter_critical+0x34>)
     104:	6813      	ldr	r3, [r2, #0]
     106:	3301      	adds	r3, #1
     108:	6013      	str	r3, [r2, #0]
}
     10a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     10c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     10e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     112:	2200      	movs	r2, #0
     114:	4b04      	ldr	r3, [pc, #16]	; (128 <cpu_irq_enter_critical+0x3c>)
     116:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     118:	3201      	adds	r2, #1
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <cpu_irq_enter_critical+0x38>)
     11c:	701a      	strb	r2, [r3, #0]
     11e:	e7f0      	b.n	102 <cpu_irq_enter_critical+0x16>
     120:	20000038 	.word	0x20000038
     124:	2000003c 	.word	0x2000003c
     128:	20000000 	.word	0x20000000

0000012c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     12c:	4b08      	ldr	r3, [pc, #32]	; (150 <cpu_irq_leave_critical+0x24>)
     12e:	681a      	ldr	r2, [r3, #0]
     130:	3a01      	subs	r2, #1
     132:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     134:	681b      	ldr	r3, [r3, #0]
     136:	2b00      	cmp	r3, #0
     138:	d109      	bne.n	14e <cpu_irq_leave_critical+0x22>
     13a:	4b06      	ldr	r3, [pc, #24]	; (154 <cpu_irq_leave_critical+0x28>)
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b00      	cmp	r3, #0
     140:	d005      	beq.n	14e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     142:	2201      	movs	r2, #1
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_leave_critical+0x2c>)
     146:	701a      	strb	r2, [r3, #0]
     148:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     14c:	b662      	cpsie	i
	}
}
     14e:	4770      	bx	lr
     150:	20000038 	.word	0x20000038
     154:	2000003c 	.word	0x2000003c
     158:	20000000 	.word	0x20000000

0000015c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     160:	ac01      	add	r4, sp, #4
     162:	2501      	movs	r5, #1
     164:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     166:	2700      	movs	r7, #0
     168:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     16a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     16c:	0021      	movs	r1, r4
     16e:	2010      	movs	r0, #16
     170:	4e06      	ldr	r6, [pc, #24]	; (18c <system_board_init+0x30>)
     172:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     174:	2280      	movs	r2, #128	; 0x80
     176:	0252      	lsls	r2, r2, #9
     178:	4b05      	ldr	r3, [pc, #20]	; (190 <system_board_init+0x34>)
     17a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     17c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     17e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     180:	0021      	movs	r1, r4
     182:	200e      	movs	r0, #14
     184:	47b0      	blx	r6
}
     186:	b003      	add	sp, #12
     188:	bdf0      	pop	{r4, r5, r6, r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	000002cd 	.word	0x000002cd
     190:	41004400 	.word	0x41004400

00000194 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     194:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     196:	4b0b      	ldr	r3, [pc, #44]	; (1c4 <EVSYS_Handler+0x30>)
     198:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     19a:	490b      	ldr	r1, [pc, #44]	; (1c8 <EVSYS_Handler+0x34>)
     19c:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     19e:	6898      	ldr	r0, [r3, #8]
     1a0:	4302      	orrs	r2, r0
     1a2:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     1a4:	4b09      	ldr	r3, [pc, #36]	; (1cc <EVSYS_Handler+0x38>)
     1a6:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     1a8:	2c00      	cmp	r4, #0
     1aa:	d005      	beq.n	1b8 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     1ac:	6820      	ldr	r0, [r4, #0]
     1ae:	6863      	ldr	r3, [r4, #4]
     1b0:	4798      	blx	r3
		current_hook = current_hook->next;
     1b2:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     1b4:	2c00      	cmp	r4, #0
     1b6:	d1f9      	bne.n	1ac <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     1b8:	4b02      	ldr	r3, [pc, #8]	; (1c4 <EVSYS_Handler+0x30>)
     1ba:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     1bc:	689a      	ldr	r2, [r3, #8]
     1be:	438a      	bics	r2, r1
     1c0:	609a      	str	r2, [r3, #8]
}
     1c2:	bd10      	pop	{r4, pc}
     1c4:	20000004 	.word	0x20000004
     1c8:	42000400 	.word	0x42000400
     1cc:	0f0fffff 	.word	0x0f0fffff

000001d0 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1d0:	4a06      	ldr	r2, [pc, #24]	; (1ec <_system_events_init+0x1c>)
     1d2:	6a13      	ldr	r3, [r2, #32]
     1d4:	2102      	movs	r1, #2
     1d6:	430b      	orrs	r3, r1
     1d8:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     1da:	2201      	movs	r2, #1
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <_system_events_init+0x20>)
     1de:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     1e0:	0019      	movs	r1, r3
     1e2:	780b      	ldrb	r3, [r1, #0]
     1e4:	4213      	tst	r3, r2
     1e6:	d1fc      	bne.n	1e2 <_system_events_init+0x12>
	}
}
     1e8:	4770      	bx	lr
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	40000400 	.word	0x40000400
     1f0:	42000400 	.word	0x42000400

000001f4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     1f4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1f6:	2200      	movs	r2, #0
     1f8:	4b10      	ldr	r3, [pc, #64]	; (23c <EIC_Handler+0x48>)
     1fa:	701a      	strb	r2, [r3, #0]
     1fc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     1fe:	4910      	ldr	r1, [pc, #64]	; (240 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     200:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     202:	4e10      	ldr	r6, [pc, #64]	; (244 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     204:	4c0d      	ldr	r4, [pc, #52]	; (23c <EIC_Handler+0x48>)
     206:	e00a      	b.n	21e <EIC_Handler+0x2a>
		return eics[eic_index];
     208:	490d      	ldr	r1, [pc, #52]	; (240 <EIC_Handler+0x4c>)
     20a:	e008      	b.n	21e <EIC_Handler+0x2a>
     20c:	7823      	ldrb	r3, [r4, #0]
     20e:	3301      	adds	r3, #1
     210:	b2db      	uxtb	r3, r3
     212:	7023      	strb	r3, [r4, #0]
     214:	2b0f      	cmp	r3, #15
     216:	d810      	bhi.n	23a <EIC_Handler+0x46>
		return NULL;
     218:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     21a:	2b1f      	cmp	r3, #31
     21c:	d9f4      	bls.n	208 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     21e:	0028      	movs	r0, r5
     220:	4018      	ands	r0, r3
     222:	2201      	movs	r2, #1
     224:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     226:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     228:	4210      	tst	r0, r2
     22a:	d0ef      	beq.n	20c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     22c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     22e:	009b      	lsls	r3, r3, #2
     230:	599b      	ldr	r3, [r3, r6]
     232:	2b00      	cmp	r3, #0
     234:	d0ea      	beq.n	20c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     236:	4798      	blx	r3
     238:	e7e8      	b.n	20c <EIC_Handler+0x18>
			}
		}
	}
}
     23a:	bd70      	pop	{r4, r5, r6, pc}
     23c:	2000006a 	.word	0x2000006a
     240:	40001800 	.word	0x40001800
     244:	2000006c 	.word	0x2000006c

00000248 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     248:	4a04      	ldr	r2, [pc, #16]	; (25c <_extint_enable+0x14>)
     24a:	7813      	ldrb	r3, [r2, #0]
     24c:	2102      	movs	r1, #2
     24e:	430b      	orrs	r3, r1
     250:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     252:	7853      	ldrb	r3, [r2, #1]
     254:	b25b      	sxtb	r3, r3
     256:	2b00      	cmp	r3, #0
     258:	dbfb      	blt.n	252 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     25a:	4770      	bx	lr
     25c:	40001800 	.word	0x40001800

00000260 <_system_extint_init>:
{
     260:	b500      	push	{lr}
     262:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     264:	4a12      	ldr	r2, [pc, #72]	; (2b0 <_system_extint_init+0x50>)
     266:	6993      	ldr	r3, [r2, #24]
     268:	2140      	movs	r1, #64	; 0x40
     26a:	430b      	orrs	r3, r1
     26c:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     26e:	a901      	add	r1, sp, #4
     270:	2301      	movs	r3, #1
     272:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     274:	2005      	movs	r0, #5
     276:	4b0f      	ldr	r3, [pc, #60]	; (2b4 <_system_extint_init+0x54>)
     278:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     27a:	2005      	movs	r0, #5
     27c:	4b0e      	ldr	r3, [pc, #56]	; (2b8 <_system_extint_init+0x58>)
     27e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     280:	4a0e      	ldr	r2, [pc, #56]	; (2bc <_system_extint_init+0x5c>)
     282:	7813      	ldrb	r3, [r2, #0]
     284:	2101      	movs	r1, #1
     286:	430b      	orrs	r3, r1
     288:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     28a:	7853      	ldrb	r3, [r2, #1]
     28c:	b25b      	sxtb	r3, r3
     28e:	2b00      	cmp	r3, #0
     290:	dbfb      	blt.n	28a <_system_extint_init+0x2a>
     292:	4b0b      	ldr	r3, [pc, #44]	; (2c0 <_system_extint_init+0x60>)
     294:	0019      	movs	r1, r3
     296:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     298:	2200      	movs	r2, #0
     29a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     29c:	4299      	cmp	r1, r3
     29e:	d1fc      	bne.n	29a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2a0:	2210      	movs	r2, #16
     2a2:	4b08      	ldr	r3, [pc, #32]	; (2c4 <_system_extint_init+0x64>)
     2a4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     2a6:	4b08      	ldr	r3, [pc, #32]	; (2c8 <_system_extint_init+0x68>)
     2a8:	4798      	blx	r3
}
     2aa:	b003      	add	sp, #12
     2ac:	bd00      	pop	{pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	40000400 	.word	0x40000400
     2b4:	0000082d 	.word	0x0000082d
     2b8:	000007a1 	.word	0x000007a1
     2bc:	40001800 	.word	0x40001800
     2c0:	2000006c 	.word	0x2000006c
     2c4:	e000e100 	.word	0xe000e100
     2c8:	00000249 	.word	0x00000249

000002cc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     2cc:	b500      	push	{lr}
     2ce:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2d0:	ab01      	add	r3, sp, #4
     2d2:	2280      	movs	r2, #128	; 0x80
     2d4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     2d6:	780a      	ldrb	r2, [r1, #0]
     2d8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     2da:	784a      	ldrb	r2, [r1, #1]
     2dc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     2de:	788a      	ldrb	r2, [r1, #2]
     2e0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     2e2:	0019      	movs	r1, r3
     2e4:	4b01      	ldr	r3, [pc, #4]	; (2ec <port_pin_set_config+0x20>)
     2e6:	4798      	blx	r3
}
     2e8:	b003      	add	sp, #12
     2ea:	bd00      	pop	{pc}
     2ec:	000008f1 	.word	0x000008f1

000002f0 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     2f0:	b510      	push	{r4, lr}
     2f2:	4b02      	ldr	r3, [pc, #8]	; (2fc <SERCOM0_Handler+0xc>)
     2f4:	681b      	ldr	r3, [r3, #0]
     2f6:	2000      	movs	r0, #0
     2f8:	4798      	blx	r3
     2fa:	bd10      	pop	{r4, pc}
     2fc:	20000040 	.word	0x20000040

00000300 <SERCOM1_Handler>:
     300:	b510      	push	{r4, lr}
     302:	4b02      	ldr	r3, [pc, #8]	; (30c <SERCOM1_Handler+0xc>)
     304:	685b      	ldr	r3, [r3, #4]
     306:	2001      	movs	r0, #1
     308:	4798      	blx	r3
     30a:	bd10      	pop	{r4, pc}
     30c:	20000040 	.word	0x20000040

00000310 <SERCOM2_Handler>:
     310:	b510      	push	{r4, lr}
     312:	4b02      	ldr	r3, [pc, #8]	; (31c <SERCOM2_Handler+0xc>)
     314:	689b      	ldr	r3, [r3, #8]
     316:	2002      	movs	r0, #2
     318:	4798      	blx	r3
     31a:	bd10      	pop	{r4, pc}
     31c:	20000040 	.word	0x20000040

00000320 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     320:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     322:	490c      	ldr	r1, [pc, #48]	; (354 <system_clock_source_osc8m_set_config+0x34>)
     324:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     326:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     328:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     32a:	7840      	ldrb	r0, [r0, #1]
     32c:	2201      	movs	r2, #1
     32e:	4010      	ands	r0, r2
     330:	0180      	lsls	r0, r0, #6
     332:	2640      	movs	r6, #64	; 0x40
     334:	43b3      	bics	r3, r6
     336:	4303      	orrs	r3, r0
     338:	402a      	ands	r2, r5
     33a:	01d2      	lsls	r2, r2, #7
     33c:	2080      	movs	r0, #128	; 0x80
     33e:	4383      	bics	r3, r0
     340:	4313      	orrs	r3, r2
     342:	2203      	movs	r2, #3
     344:	4022      	ands	r2, r4
     346:	0212      	lsls	r2, r2, #8
     348:	4803      	ldr	r0, [pc, #12]	; (358 <system_clock_source_osc8m_set_config+0x38>)
     34a:	4003      	ands	r3, r0
     34c:	4313      	orrs	r3, r2
     34e:	620b      	str	r3, [r1, #32]
}
     350:	bd70      	pop	{r4, r5, r6, pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	40000800 	.word	0x40000800
     358:	fffffcff 	.word	0xfffffcff

0000035c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     35c:	b5f0      	push	{r4, r5, r6, r7, lr}
     35e:	46ce      	mov	lr, r9
     360:	4647      	mov	r7, r8
     362:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     364:	4b19      	ldr	r3, [pc, #100]	; (3cc <system_clock_source_osc32k_set_config+0x70>)
     366:	4699      	mov	r9, r3
     368:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     36a:	7841      	ldrb	r1, [r0, #1]
     36c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     36e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     370:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     372:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     374:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     376:	7880      	ldrb	r0, [r0, #2]
     378:	2101      	movs	r1, #1
     37a:	4008      	ands	r0, r1
     37c:	0080      	lsls	r0, r0, #2
     37e:	2204      	movs	r2, #4
     380:	4393      	bics	r3, r2
     382:	4303      	orrs	r3, r0
     384:	4660      	mov	r0, ip
     386:	4008      	ands	r0, r1
     388:	00c0      	lsls	r0, r0, #3
     38a:	3204      	adds	r2, #4
     38c:	4393      	bics	r3, r2
     38e:	4303      	orrs	r3, r0
     390:	0038      	movs	r0, r7
     392:	4008      	ands	r0, r1
     394:	0180      	lsls	r0, r0, #6
     396:	2740      	movs	r7, #64	; 0x40
     398:	43bb      	bics	r3, r7
     39a:	4303      	orrs	r3, r0
     39c:	0030      	movs	r0, r6
     39e:	4008      	ands	r0, r1
     3a0:	01c0      	lsls	r0, r0, #7
     3a2:	2680      	movs	r6, #128	; 0x80
     3a4:	43b3      	bics	r3, r6
     3a6:	4303      	orrs	r3, r0
     3a8:	2007      	movs	r0, #7
     3aa:	4005      	ands	r5, r0
     3ac:	022d      	lsls	r5, r5, #8
     3ae:	4808      	ldr	r0, [pc, #32]	; (3d0 <system_clock_source_osc32k_set_config+0x74>)
     3b0:	4003      	ands	r3, r0
     3b2:	432b      	orrs	r3, r5
     3b4:	4021      	ands	r1, r4
     3b6:	0309      	lsls	r1, r1, #12
     3b8:	4806      	ldr	r0, [pc, #24]	; (3d4 <system_clock_source_osc32k_set_config+0x78>)
     3ba:	4003      	ands	r3, r0
     3bc:	430b      	orrs	r3, r1
     3be:	464a      	mov	r2, r9
     3c0:	6193      	str	r3, [r2, #24]
}
     3c2:	bc0c      	pop	{r2, r3}
     3c4:	4690      	mov	r8, r2
     3c6:	4699      	mov	r9, r3
     3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	40000800 	.word	0x40000800
     3d0:	fffff8ff 	.word	0xfffff8ff
     3d4:	ffffefff 	.word	0xffffefff

000003d8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     3d8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     3da:	7a03      	ldrb	r3, [r0, #8]
     3dc:	069b      	lsls	r3, r3, #26
     3de:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     3e0:	8942      	ldrh	r2, [r0, #10]
     3e2:	0592      	lsls	r2, r2, #22
     3e4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     3e6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     3e8:	4918      	ldr	r1, [pc, #96]	; (44c <STACK_SIZE+0x4c>)
     3ea:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     3ec:	7983      	ldrb	r3, [r0, #6]
     3ee:	79c2      	ldrb	r2, [r0, #7]
     3f0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     3f2:	8842      	ldrh	r2, [r0, #2]
     3f4:	8884      	ldrh	r4, [r0, #4]
     3f6:	4322      	orrs	r2, r4
     3f8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     3fa:	7842      	ldrb	r2, [r0, #1]
     3fc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     3fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     400:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     402:	7803      	ldrb	r3, [r0, #0]
     404:	2b04      	cmp	r3, #4
     406:	d011      	beq.n	42c <STACK_SIZE+0x2c>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     408:	2b20      	cmp	r3, #32
     40a:	d10e      	bne.n	42a <STACK_SIZE+0x2a>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     40c:	7b03      	ldrb	r3, [r0, #12]
     40e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     410:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     412:	4313      	orrs	r3, r2
     414:	89c2      	ldrh	r2, [r0, #14]
     416:	0412      	lsls	r2, r2, #16
     418:	490d      	ldr	r1, [pc, #52]	; (450 <STACK_SIZE+0x50>)
     41a:	400a      	ands	r2, r1
     41c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     41e:	4a0b      	ldr	r2, [pc, #44]	; (44c <STACK_SIZE+0x4c>)
     420:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     422:	6811      	ldr	r1, [r2, #0]
     424:	4b0b      	ldr	r3, [pc, #44]	; (454 <STACK_SIZE+0x54>)
     426:	430b      	orrs	r3, r1
     428:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     42a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     42c:	7b03      	ldrb	r3, [r0, #12]
     42e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     430:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     432:	4313      	orrs	r3, r2
     434:	89c2      	ldrh	r2, [r0, #14]
     436:	0412      	lsls	r2, r2, #16
     438:	4905      	ldr	r1, [pc, #20]	; (450 <STACK_SIZE+0x50>)
     43a:	400a      	ands	r2, r1
     43c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     43e:	4a03      	ldr	r2, [pc, #12]	; (44c <STACK_SIZE+0x4c>)
     440:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     442:	6813      	ldr	r3, [r2, #0]
     444:	2104      	movs	r1, #4
     446:	430b      	orrs	r3, r1
     448:	6013      	str	r3, [r2, #0]
     44a:	e7ee      	b.n	42a <STACK_SIZE+0x2a>
     44c:	2000004c 	.word	0x2000004c
     450:	03ff0000 	.word	0x03ff0000
     454:	00000424 	.word	0x00000424

00000458 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     458:	2808      	cmp	r0, #8
     45a:	d803      	bhi.n	464 <system_clock_source_enable+0xc>
     45c:	0080      	lsls	r0, r0, #2
     45e:	4b25      	ldr	r3, [pc, #148]	; (4f4 <system_clock_source_enable+0x9c>)
     460:	581b      	ldr	r3, [r3, r0]
     462:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     464:	2017      	movs	r0, #23
     466:	e044      	b.n	4f2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     468:	4a23      	ldr	r2, [pc, #140]	; (4f8 <system_clock_source_enable+0xa0>)
     46a:	6a13      	ldr	r3, [r2, #32]
     46c:	2102      	movs	r1, #2
     46e:	430b      	orrs	r3, r1
     470:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     472:	2000      	movs	r0, #0
     474:	e03d      	b.n	4f2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     476:	4a20      	ldr	r2, [pc, #128]	; (4f8 <system_clock_source_enable+0xa0>)
     478:	6993      	ldr	r3, [r2, #24]
     47a:	2102      	movs	r1, #2
     47c:	430b      	orrs	r3, r1
     47e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     480:	2000      	movs	r0, #0
		break;
     482:	e036      	b.n	4f2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     484:	4a1c      	ldr	r2, [pc, #112]	; (4f8 <system_clock_source_enable+0xa0>)
     486:	8a13      	ldrh	r3, [r2, #16]
     488:	2102      	movs	r1, #2
     48a:	430b      	orrs	r3, r1
     48c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     48e:	2000      	movs	r0, #0
		break;
     490:	e02f      	b.n	4f2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     492:	4a19      	ldr	r2, [pc, #100]	; (4f8 <system_clock_source_enable+0xa0>)
     494:	8a93      	ldrh	r3, [r2, #20]
     496:	2102      	movs	r1, #2
     498:	430b      	orrs	r3, r1
     49a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     49c:	2000      	movs	r0, #0
		break;
     49e:	e028      	b.n	4f2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     4a0:	4916      	ldr	r1, [pc, #88]	; (4fc <system_clock_source_enable+0xa4>)
     4a2:	680b      	ldr	r3, [r1, #0]
     4a4:	2202      	movs	r2, #2
     4a6:	4313      	orrs	r3, r2
     4a8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     4aa:	4b13      	ldr	r3, [pc, #76]	; (4f8 <system_clock_source_enable+0xa0>)
     4ac:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     4ae:	0019      	movs	r1, r3
     4b0:	320e      	adds	r2, #14
     4b2:	68cb      	ldr	r3, [r1, #12]
     4b4:	421a      	tst	r2, r3
     4b6:	d0fc      	beq.n	4b2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     4b8:	4a10      	ldr	r2, [pc, #64]	; (4fc <system_clock_source_enable+0xa4>)
     4ba:	6891      	ldr	r1, [r2, #8]
     4bc:	4b0e      	ldr	r3, [pc, #56]	; (4f8 <system_clock_source_enable+0xa0>)
     4be:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     4c0:	6852      	ldr	r2, [r2, #4]
     4c2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     4c4:	2200      	movs	r2, #0
     4c6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     4c8:	0019      	movs	r1, r3
     4ca:	3210      	adds	r2, #16
     4cc:	68cb      	ldr	r3, [r1, #12]
     4ce:	421a      	tst	r2, r3
     4d0:	d0fc      	beq.n	4cc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     4d2:	4b0a      	ldr	r3, [pc, #40]	; (4fc <system_clock_source_enable+0xa4>)
     4d4:	681b      	ldr	r3, [r3, #0]
     4d6:	b29b      	uxth	r3, r3
     4d8:	4a07      	ldr	r2, [pc, #28]	; (4f8 <system_clock_source_enable+0xa0>)
     4da:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     4dc:	2000      	movs	r0, #0
     4de:	e008      	b.n	4f2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     4e0:	4905      	ldr	r1, [pc, #20]	; (4f8 <system_clock_source_enable+0xa0>)
     4e2:	2244      	movs	r2, #68	; 0x44
     4e4:	5c8b      	ldrb	r3, [r1, r2]
     4e6:	2002      	movs	r0, #2
     4e8:	4303      	orrs	r3, r0
     4ea:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     4ec:	2000      	movs	r0, #0
		break;
     4ee:	e000      	b.n	4f2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     4f0:	2000      	movs	r0, #0
}
     4f2:	4770      	bx	lr
     4f4:	000011d4 	.word	0x000011d4
     4f8:	40000800 	.word	0x40000800
     4fc:	2000004c 	.word	0x2000004c

00000500 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     500:	b5f0      	push	{r4, r5, r6, r7, lr}
     502:	46d6      	mov	lr, sl
     504:	464f      	mov	r7, r9
     506:	4646      	mov	r6, r8
     508:	b5c0      	push	{r6, r7, lr}
     50a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     50c:	22c2      	movs	r2, #194	; 0xc2
     50e:	00d2      	lsls	r2, r2, #3
     510:	4b4d      	ldr	r3, [pc, #308]	; (648 <system_clock_init+0x148>)
     512:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     514:	494d      	ldr	r1, [pc, #308]	; (64c <system_clock_init+0x14c>)
     516:	684b      	ldr	r3, [r1, #4]
     518:	221e      	movs	r2, #30
     51a:	4393      	bics	r3, r2
     51c:	3a1c      	subs	r2, #28
     51e:	4313      	orrs	r3, r2
     520:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     522:	ab01      	add	r3, sp, #4
     524:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     526:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     528:	4d49      	ldr	r5, [pc, #292]	; (650 <system_clock_init+0x150>)
     52a:	b2e0      	uxtb	r0, r4
     52c:	a901      	add	r1, sp, #4
     52e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     530:	3401      	adds	r4, #1
     532:	2c18      	cmp	r4, #24
     534:	d1f9      	bne.n	52a <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     536:	4c47      	ldr	r4, [pc, #284]	; (654 <system_clock_init+0x154>)
     538:	6823      	ldr	r3, [r4, #0]
     53a:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     53c:	4942      	ldr	r1, [pc, #264]	; (648 <system_clock_init+0x148>)
     53e:	698a      	ldr	r2, [r1, #24]
     540:	0e5b      	lsrs	r3, r3, #25
     542:	041b      	lsls	r3, r3, #16
     544:	4844      	ldr	r0, [pc, #272]	; (658 <system_clock_init+0x158>)
     546:	4002      	ands	r2, r0
     548:	4313      	orrs	r3, r2
     54a:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
     54c:	a80a      	add	r0, sp, #40	; 0x28
     54e:	2301      	movs	r3, #1
     550:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     552:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
     554:	2500      	movs	r5, #0
     556:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
     558:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     55a:	3306      	adds	r3, #6
     55c:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
     55e:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     560:	4b3e      	ldr	r3, [pc, #248]	; (65c <system_clock_init+0x15c>)
     562:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     564:	2004      	movs	r0, #4
     566:	4b3e      	ldr	r3, [pc, #248]	; (660 <system_clock_init+0x160>)
     568:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     56a:	ab05      	add	r3, sp, #20
     56c:	2200      	movs	r2, #0
     56e:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     570:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     572:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     574:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
     576:	213f      	movs	r1, #63	; 0x3f
     578:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     57a:	393b      	subs	r1, #59	; 0x3b
     57c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     57e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     580:	6823      	ldr	r3, [r4, #0]
     582:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     584:	2b3f      	cmp	r3, #63	; 0x3f
     586:	d05d      	beq.n	644 <system_clock_init+0x144>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
     588:	a805      	add	r0, sp, #20
     58a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     58c:	23b7      	movs	r3, #183	; 0xb7
     58e:	00db      	lsls	r3, r3, #3
     590:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     592:	2307      	movs	r3, #7
     594:	4699      	mov	r9, r3
     596:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     598:	233f      	movs	r3, #63	; 0x3f
     59a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     59c:	4b31      	ldr	r3, [pc, #196]	; (664 <system_clock_init+0x164>)
     59e:	4798      	blx	r3
	config->run_in_standby  = false;
     5a0:	a804      	add	r0, sp, #16
     5a2:	2500      	movs	r5, #0
     5a4:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     5a6:	2601      	movs	r6, #1
     5a8:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     5aa:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     5ac:	4b2e      	ldr	r3, [pc, #184]	; (668 <system_clock_init+0x168>)
     5ae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     5b0:	2006      	movs	r0, #6
     5b2:	4f2b      	ldr	r7, [pc, #172]	; (660 <system_clock_init+0x160>)
     5b4:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     5b6:	4b2d      	ldr	r3, [pc, #180]	; (66c <system_clock_init+0x16c>)
     5b8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     5ba:	ac01      	add	r4, sp, #4
     5bc:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
     5be:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     5c0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     5c2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     5c4:	2304      	movs	r3, #4
     5c6:	7023      	strb	r3, [r4, #0]
     5c8:	0021      	movs	r1, r4
     5ca:	2001      	movs	r0, #1
     5cc:	4b28      	ldr	r3, [pc, #160]	; (670 <system_clock_init+0x170>)
     5ce:	469a      	mov	sl, r3
     5d0:	4798      	blx	r3
     5d2:	2001      	movs	r0, #1
     5d4:	4b27      	ldr	r3, [pc, #156]	; (674 <system_clock_init+0x174>)
     5d6:	4698      	mov	r8, r3
     5d8:	4798      	blx	r3
	config->division_factor    = 1;
     5da:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
     5dc:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     5de:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     5e0:	7265      	strb	r5, [r4, #9]
     5e2:	464b      	mov	r3, r9
     5e4:	7023      	strb	r3, [r4, #0]
     5e6:	0021      	movs	r1, r4
     5e8:	2003      	movs	r0, #3
     5ea:	47d0      	blx	sl
     5ec:	2003      	movs	r0, #3
     5ee:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     5f0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     5f2:	0021      	movs	r1, r4
     5f4:	2000      	movs	r0, #0
     5f6:	4b16      	ldr	r3, [pc, #88]	; (650 <system_clock_init+0x150>)
     5f8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     5fa:	2000      	movs	r0, #0
     5fc:	4b1e      	ldr	r3, [pc, #120]	; (678 <system_clock_init+0x178>)
     5fe:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     600:	2007      	movs	r0, #7
     602:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     604:	4910      	ldr	r1, [pc, #64]	; (648 <system_clock_init+0x148>)
     606:	22d0      	movs	r2, #208	; 0xd0
     608:	68cb      	ldr	r3, [r1, #12]
     60a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     60c:	2bd0      	cmp	r3, #208	; 0xd0
     60e:	d1fb      	bne.n	608 <system_clock_init+0x108>
	PM->CPUSEL.reg = (uint32_t)divider;
     610:	4a1a      	ldr	r2, [pc, #104]	; (67c <system_clock_init+0x17c>)
     612:	2300      	movs	r3, #0
     614:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     616:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     618:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     61a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
     61c:	a901      	add	r1, sp, #4
     61e:	2201      	movs	r2, #1
     620:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     622:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     624:	3205      	adds	r2, #5
     626:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
     628:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     62a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     62c:	2000      	movs	r0, #0
     62e:	4b10      	ldr	r3, [pc, #64]	; (670 <system_clock_init+0x170>)
     630:	4798      	blx	r3
     632:	2000      	movs	r0, #0
     634:	4b0f      	ldr	r3, [pc, #60]	; (674 <system_clock_init+0x174>)
     636:	4798      	blx	r3
#endif
}
     638:	b00c      	add	sp, #48	; 0x30
     63a:	bc1c      	pop	{r2, r3, r4}
     63c:	4690      	mov	r8, r2
     63e:	4699      	mov	r9, r3
     640:	46a2      	mov	sl, r4
     642:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
     644:	3b20      	subs	r3, #32
     646:	e79f      	b.n	588 <system_clock_init+0x88>
     648:	40000800 	.word	0x40000800
     64c:	41004000 	.word	0x41004000
     650:	0000082d 	.word	0x0000082d
     654:	00806024 	.word	0x00806024
     658:	ff80ffff 	.word	0xff80ffff
     65c:	0000035d 	.word	0x0000035d
     660:	00000459 	.word	0x00000459
     664:	000003d9 	.word	0x000003d9
     668:	00000321 	.word	0x00000321
     66c:	00000681 	.word	0x00000681
     670:	000006a5 	.word	0x000006a5
     674:	0000075d 	.word	0x0000075d
     678:	000007a1 	.word	0x000007a1
     67c:	40000400 	.word	0x40000400

00000680 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     680:	4a06      	ldr	r2, [pc, #24]	; (69c <system_gclk_init+0x1c>)
     682:	6993      	ldr	r3, [r2, #24]
     684:	2108      	movs	r1, #8
     686:	430b      	orrs	r3, r1
     688:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     68a:	2201      	movs	r2, #1
     68c:	4b04      	ldr	r3, [pc, #16]	; (6a0 <system_gclk_init+0x20>)
     68e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     690:	0019      	movs	r1, r3
     692:	780b      	ldrb	r3, [r1, #0]
     694:	4213      	tst	r3, r2
     696:	d1fc      	bne.n	692 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     698:	4770      	bx	lr
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	40000400 	.word	0x40000400
     6a0:	40000c00 	.word	0x40000c00

000006a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     6a4:	b570      	push	{r4, r5, r6, lr}
     6a6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     6a8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     6aa:	780d      	ldrb	r5, [r1, #0]
     6ac:	022d      	lsls	r5, r5, #8
     6ae:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     6b0:	784b      	ldrb	r3, [r1, #1]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d002      	beq.n	6bc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     6b6:	2380      	movs	r3, #128	; 0x80
     6b8:	02db      	lsls	r3, r3, #11
     6ba:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     6bc:	7a4b      	ldrb	r3, [r1, #9]
     6be:	2b00      	cmp	r3, #0
     6c0:	d002      	beq.n	6c8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     6c2:	2380      	movs	r3, #128	; 0x80
     6c4:	031b      	lsls	r3, r3, #12
     6c6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     6c8:	6848      	ldr	r0, [r1, #4]
     6ca:	2801      	cmp	r0, #1
     6cc:	d910      	bls.n	6f0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     6ce:	1e43      	subs	r3, r0, #1
     6d0:	4218      	tst	r0, r3
     6d2:	d134      	bne.n	73e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     6d4:	2802      	cmp	r0, #2
     6d6:	d930      	bls.n	73a <system_gclk_gen_set_config+0x96>
     6d8:	2302      	movs	r3, #2
     6da:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     6dc:	3201      	adds	r2, #1
						mask <<= 1) {
     6de:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     6e0:	4298      	cmp	r0, r3
     6e2:	d8fb      	bhi.n	6dc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     6e4:	0212      	lsls	r2, r2, #8
     6e6:	4332      	orrs	r2, r6
     6e8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     6ea:	2380      	movs	r3, #128	; 0x80
     6ec:	035b      	lsls	r3, r3, #13
     6ee:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     6f0:	7a0b      	ldrb	r3, [r1, #8]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d002      	beq.n	6fc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     6f6:	2380      	movs	r3, #128	; 0x80
     6f8:	039b      	lsls	r3, r3, #14
     6fa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6fc:	4a13      	ldr	r2, [pc, #76]	; (74c <system_gclk_gen_set_config+0xa8>)
     6fe:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     700:	b25b      	sxtb	r3, r3
     702:	2b00      	cmp	r3, #0
     704:	dbfb      	blt.n	6fe <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     706:	4b12      	ldr	r3, [pc, #72]	; (750 <system_gclk_gen_set_config+0xac>)
     708:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     70a:	4b12      	ldr	r3, [pc, #72]	; (754 <system_gclk_gen_set_config+0xb0>)
     70c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     70e:	4a0f      	ldr	r2, [pc, #60]	; (74c <system_gclk_gen_set_config+0xa8>)
     710:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     712:	b25b      	sxtb	r3, r3
     714:	2b00      	cmp	r3, #0
     716:	dbfb      	blt.n	710 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     718:	4b0c      	ldr	r3, [pc, #48]	; (74c <system_gclk_gen_set_config+0xa8>)
     71a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     71c:	001a      	movs	r2, r3
     71e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     720:	b25b      	sxtb	r3, r3
     722:	2b00      	cmp	r3, #0
     724:	dbfb      	blt.n	71e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     726:	4a09      	ldr	r2, [pc, #36]	; (74c <system_gclk_gen_set_config+0xa8>)
     728:	6853      	ldr	r3, [r2, #4]
     72a:	2180      	movs	r1, #128	; 0x80
     72c:	0249      	lsls	r1, r1, #9
     72e:	400b      	ands	r3, r1
     730:	431d      	orrs	r5, r3
     732:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     734:	4b08      	ldr	r3, [pc, #32]	; (758 <system_gclk_gen_set_config+0xb4>)
     736:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     738:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     73a:	2200      	movs	r2, #0
     73c:	e7d2      	b.n	6e4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     73e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     740:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     742:	2380      	movs	r3, #128	; 0x80
     744:	029b      	lsls	r3, r3, #10
     746:	431d      	orrs	r5, r3
     748:	e7d2      	b.n	6f0 <system_gclk_gen_set_config+0x4c>
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	40000c00 	.word	0x40000c00
     750:	000000ed 	.word	0x000000ed
     754:	40000c08 	.word	0x40000c08
     758:	0000012d 	.word	0x0000012d

0000075c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     75c:	b510      	push	{r4, lr}
     75e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     760:	4a0b      	ldr	r2, [pc, #44]	; (790 <system_gclk_gen_enable+0x34>)
     762:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     764:	b25b      	sxtb	r3, r3
     766:	2b00      	cmp	r3, #0
     768:	dbfb      	blt.n	762 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     76a:	4b0a      	ldr	r3, [pc, #40]	; (794 <system_gclk_gen_enable+0x38>)
     76c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     76e:	4b0a      	ldr	r3, [pc, #40]	; (798 <system_gclk_gen_enable+0x3c>)
     770:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     772:	4a07      	ldr	r2, [pc, #28]	; (790 <system_gclk_gen_enable+0x34>)
     774:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     776:	b25b      	sxtb	r3, r3
     778:	2b00      	cmp	r3, #0
     77a:	dbfb      	blt.n	774 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     77c:	4a04      	ldr	r2, [pc, #16]	; (790 <system_gclk_gen_enable+0x34>)
     77e:	6851      	ldr	r1, [r2, #4]
     780:	2380      	movs	r3, #128	; 0x80
     782:	025b      	lsls	r3, r3, #9
     784:	430b      	orrs	r3, r1
     786:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     788:	4b04      	ldr	r3, [pc, #16]	; (79c <system_gclk_gen_enable+0x40>)
     78a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     78c:	bd10      	pop	{r4, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	40000c00 	.word	0x40000c00
     794:	000000ed 	.word	0x000000ed
     798:	40000c04 	.word	0x40000c04
     79c:	0000012d 	.word	0x0000012d

000007a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     7a0:	b510      	push	{r4, lr}
     7a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <system_gclk_chan_enable+0x20>)
     7a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     7a8:	4b06      	ldr	r3, [pc, #24]	; (7c4 <system_gclk_chan_enable+0x24>)
     7aa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     7ac:	4a06      	ldr	r2, [pc, #24]	; (7c8 <system_gclk_chan_enable+0x28>)
     7ae:	8853      	ldrh	r3, [r2, #2]
     7b0:	2180      	movs	r1, #128	; 0x80
     7b2:	01c9      	lsls	r1, r1, #7
     7b4:	430b      	orrs	r3, r1
     7b6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     7b8:	4b04      	ldr	r3, [pc, #16]	; (7cc <system_gclk_chan_enable+0x2c>)
     7ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     7bc:	bd10      	pop	{r4, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	000000ed 	.word	0x000000ed
     7c4:	40000c02 	.word	0x40000c02
     7c8:	40000c00 	.word	0x40000c00
     7cc:	0000012d 	.word	0x0000012d

000007d0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     7d0:	b510      	push	{r4, lr}
     7d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     7d4:	4b0f      	ldr	r3, [pc, #60]	; (814 <system_gclk_chan_disable+0x44>)
     7d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     7d8:	4b0f      	ldr	r3, [pc, #60]	; (818 <system_gclk_chan_disable+0x48>)
     7da:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     7dc:	4a0f      	ldr	r2, [pc, #60]	; (81c <system_gclk_chan_disable+0x4c>)
     7de:	8853      	ldrh	r3, [r2, #2]
     7e0:	051b      	lsls	r3, r3, #20
     7e2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     7e4:	8853      	ldrh	r3, [r2, #2]
     7e6:	490e      	ldr	r1, [pc, #56]	; (820 <system_gclk_chan_disable+0x50>)
     7e8:	400b      	ands	r3, r1
     7ea:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     7ec:	8853      	ldrh	r3, [r2, #2]
     7ee:	490d      	ldr	r1, [pc, #52]	; (824 <system_gclk_chan_disable+0x54>)
     7f0:	400b      	ands	r3, r1
     7f2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     7f4:	0011      	movs	r1, r2
     7f6:	2280      	movs	r2, #128	; 0x80
     7f8:	01d2      	lsls	r2, r2, #7
     7fa:	884b      	ldrh	r3, [r1, #2]
     7fc:	4213      	tst	r3, r2
     7fe:	d1fc      	bne.n	7fa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     800:	4906      	ldr	r1, [pc, #24]	; (81c <system_gclk_chan_disable+0x4c>)
     802:	884a      	ldrh	r2, [r1, #2]
     804:	0203      	lsls	r3, r0, #8
     806:	4806      	ldr	r0, [pc, #24]	; (820 <system_gclk_chan_disable+0x50>)
     808:	4002      	ands	r2, r0
     80a:	4313      	orrs	r3, r2
     80c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     80e:	4b06      	ldr	r3, [pc, #24]	; (828 <system_gclk_chan_disable+0x58>)
     810:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     812:	bd10      	pop	{r4, pc}
     814:	000000ed 	.word	0x000000ed
     818:	40000c02 	.word	0x40000c02
     81c:	40000c00 	.word	0x40000c00
     820:	fffff0ff 	.word	0xfffff0ff
     824:	ffffbfff 	.word	0xffffbfff
     828:	0000012d 	.word	0x0000012d

0000082c <system_gclk_chan_set_config>:
{
     82c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     82e:	780c      	ldrb	r4, [r1, #0]
     830:	0224      	lsls	r4, r4, #8
     832:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     834:	4b02      	ldr	r3, [pc, #8]	; (840 <system_gclk_chan_set_config+0x14>)
     836:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     838:	b2a4      	uxth	r4, r4
     83a:	4b02      	ldr	r3, [pc, #8]	; (844 <system_gclk_chan_set_config+0x18>)
     83c:	805c      	strh	r4, [r3, #2]
}
     83e:	bd10      	pop	{r4, pc}
     840:	000007d1 	.word	0x000007d1
     844:	40000c00 	.word	0x40000c00

00000848 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     848:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     84a:	78d3      	ldrb	r3, [r2, #3]
     84c:	2b00      	cmp	r3, #0
     84e:	d135      	bne.n	8bc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     850:	7813      	ldrb	r3, [r2, #0]
     852:	2b80      	cmp	r3, #128	; 0x80
     854:	d029      	beq.n	8aa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     856:	061b      	lsls	r3, r3, #24
     858:	2480      	movs	r4, #128	; 0x80
     85a:	0264      	lsls	r4, r4, #9
     85c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     85e:	7854      	ldrb	r4, [r2, #1]
     860:	2502      	movs	r5, #2
     862:	43ac      	bics	r4, r5
     864:	d106      	bne.n	874 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     866:	7894      	ldrb	r4, [r2, #2]
     868:	2c00      	cmp	r4, #0
     86a:	d120      	bne.n	8ae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     86c:	2480      	movs	r4, #128	; 0x80
     86e:	02a4      	lsls	r4, r4, #10
     870:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     872:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     874:	7854      	ldrb	r4, [r2, #1]
     876:	3c01      	subs	r4, #1
     878:	2c01      	cmp	r4, #1
     87a:	d91c      	bls.n	8b6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     87c:	040d      	lsls	r5, r1, #16
     87e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     880:	24a0      	movs	r4, #160	; 0xa0
     882:	05e4      	lsls	r4, r4, #23
     884:	432c      	orrs	r4, r5
     886:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     888:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     88a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     88c:	24d0      	movs	r4, #208	; 0xd0
     88e:	0624      	lsls	r4, r4, #24
     890:	432c      	orrs	r4, r5
     892:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     894:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     896:	78d4      	ldrb	r4, [r2, #3]
     898:	2c00      	cmp	r4, #0
     89a:	d122      	bne.n	8e2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     89c:	035b      	lsls	r3, r3, #13
     89e:	d51c      	bpl.n	8da <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     8a0:	7893      	ldrb	r3, [r2, #2]
     8a2:	2b01      	cmp	r3, #1
     8a4:	d01e      	beq.n	8e4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     8a6:	6141      	str	r1, [r0, #20]
     8a8:	e017      	b.n	8da <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     8aa:	2300      	movs	r3, #0
     8ac:	e7d7      	b.n	85e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     8ae:	24c0      	movs	r4, #192	; 0xc0
     8b0:	02e4      	lsls	r4, r4, #11
     8b2:	4323      	orrs	r3, r4
     8b4:	e7dd      	b.n	872 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     8b6:	4c0d      	ldr	r4, [pc, #52]	; (8ec <_system_pinmux_config+0xa4>)
     8b8:	4023      	ands	r3, r4
     8ba:	e7df      	b.n	87c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     8bc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     8be:	040c      	lsls	r4, r1, #16
     8c0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     8c2:	23a0      	movs	r3, #160	; 0xa0
     8c4:	05db      	lsls	r3, r3, #23
     8c6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     8c8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     8ca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     8cc:	23d0      	movs	r3, #208	; 0xd0
     8ce:	061b      	lsls	r3, r3, #24
     8d0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     8d2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     8d4:	78d3      	ldrb	r3, [r2, #3]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d103      	bne.n	8e2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     8da:	7853      	ldrb	r3, [r2, #1]
     8dc:	3b01      	subs	r3, #1
     8de:	2b01      	cmp	r3, #1
     8e0:	d902      	bls.n	8e8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     8e2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     8e4:	6181      	str	r1, [r0, #24]
     8e6:	e7f8      	b.n	8da <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     8e8:	6081      	str	r1, [r0, #8]
}
     8ea:	e7fa      	b.n	8e2 <_system_pinmux_config+0x9a>
     8ec:	fffbffff 	.word	0xfffbffff

000008f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     8f0:	b510      	push	{r4, lr}
     8f2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     8f4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     8f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     8f8:	2900      	cmp	r1, #0
     8fa:	d104      	bne.n	906 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     8fc:	0943      	lsrs	r3, r0, #5
     8fe:	01db      	lsls	r3, r3, #7
     900:	4905      	ldr	r1, [pc, #20]	; (918 <system_pinmux_pin_set_config+0x28>)
     902:	468c      	mov	ip, r1
     904:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     906:	241f      	movs	r4, #31
     908:	4020      	ands	r0, r4
     90a:	2101      	movs	r1, #1
     90c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     90e:	0018      	movs	r0, r3
     910:	4b02      	ldr	r3, [pc, #8]	; (91c <system_pinmux_pin_set_config+0x2c>)
     912:	4798      	blx	r3
}
     914:	bd10      	pop	{r4, pc}
     916:	46c0      	nop			; (mov r8, r8)
     918:	41004400 	.word	0x41004400
     91c:	00000849 	.word	0x00000849

00000920 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     920:	4770      	bx	lr
	...

00000924 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     924:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     926:	4b05      	ldr	r3, [pc, #20]	; (93c <system_init+0x18>)
     928:	4798      	blx	r3
	/* Initialize board hardware */
	system_board_init();
     92a:	4b05      	ldr	r3, [pc, #20]	; (940 <system_init+0x1c>)
     92c:	4798      	blx	r3
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
     92e:	4b05      	ldr	r3, [pc, #20]	; (944 <system_init+0x20>)
     930:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <system_init+0x24>)
     934:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     936:	4b05      	ldr	r3, [pc, #20]	; (94c <system_init+0x28>)
     938:	4798      	blx	r3
}
     93a:	bd10      	pop	{r4, pc}
     93c:	00000501 	.word	0x00000501
     940:	0000015d 	.word	0x0000015d
     944:	000001d1 	.word	0x000001d1
     948:	00000261 	.word	0x00000261
     94c:	00000921 	.word	0x00000921

00000950 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     950:	2000      	movs	r0, #0
     952:	4770      	bx	lr

00000954 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
     954:	b530      	push	{r4, r5, lr}
     956:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
     958:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
     95a:	2903      	cmp	r1, #3
     95c:	d900      	bls.n	960 <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
     95e:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
     960:	4d11      	ldr	r5, [pc, #68]	; (9a8 <_tcc_set_compare_value+0x54>)
     962:	42aa      	cmp	r2, r5
     964:	d8fb      	bhi.n	95e <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
     966:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
     968:	2b00      	cmp	r3, #0
     96a:	d010      	beq.n	98e <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
     96c:	2480      	movs	r4, #128	; 0x80
     96e:	0264      	lsls	r4, r4, #9
     970:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
     972:	6b03      	ldr	r3, [r0, #48]	; 0x30
     974:	421c      	tst	r4, r3
     976:	d1fc      	bne.n	972 <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
     978:	2480      	movs	r4, #128	; 0x80
     97a:	0324      	lsls	r4, r4, #12
     97c:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
     97e:	6883      	ldr	r3, [r0, #8]
     980:	421c      	tst	r4, r3
     982:	d1fc      	bne.n	97e <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
     984:	311c      	adds	r1, #28
     986:	0089      	lsls	r1, r1, #2
     988:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
     98a:	2000      	movs	r0, #0
     98c:	e7e7      	b.n	95e <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
     98e:	2480      	movs	r4, #128	; 0x80
     990:	0064      	lsls	r4, r4, #1
     992:	408c      	lsls	r4, r1
     994:	6883      	ldr	r3, [r0, #8]
     996:	421c      	tst	r4, r3
     998:	d1fc      	bne.n	994 <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
     99a:	3110      	adds	r1, #16
     99c:	0089      	lsls	r1, r1, #2
     99e:	1841      	adds	r1, r0, r1
     9a0:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
     9a2:	2000      	movs	r0, #0
     9a4:	e7db      	b.n	95e <_tcc_set_compare_value+0xa>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	00ffffff 	.word	0x00ffffff

000009ac <tcc_get_config_defaults>:
	config->counter.count                  = 0;
     9ac:	2300      	movs	r3, #0
     9ae:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
     9b0:	4a4c      	ldr	r2, [pc, #304]	; (ae4 <tcc_get_config_defaults+0x138>)
     9b2:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
     9b4:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     9b6:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     9b8:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     9ba:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
     9bc:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     9be:	61c3      	str	r3, [r0, #28]
     9c0:	6203      	str	r3, [r0, #32]
     9c2:	6243      	str	r3, [r0, #36]	; 0x24
     9c4:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     9c6:	7503      	strb	r3, [r0, #20]
     9c8:	7543      	strb	r3, [r0, #21]
     9ca:	7583      	strb	r3, [r0, #22]
     9cc:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     9ce:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     9d0:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     9d2:	7403      	strb	r3, [r0, #16]
     9d4:	7443      	strb	r3, [r0, #17]
     9d6:	7483      	strb	r3, [r0, #18]
     9d8:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     9da:	222c      	movs	r2, #44	; 0x2c
     9dc:	5483      	strb	r3, [r0, r2]
     9de:	3201      	adds	r2, #1
     9e0:	5483      	strb	r3, [r0, r2]
     9e2:	3201      	adds	r2, #1
     9e4:	5483      	strb	r3, [r0, r2]
     9e6:	3201      	adds	r2, #1
     9e8:	5483      	strb	r3, [r0, r2]
     9ea:	3201      	adds	r2, #1
     9ec:	5483      	strb	r3, [r0, r2]
     9ee:	3201      	adds	r2, #1
     9f0:	5483      	strb	r3, [r0, r2]
     9f2:	3201      	adds	r2, #1
     9f4:	5483      	strb	r3, [r0, r2]
     9f6:	3201      	adds	r2, #1
     9f8:	5483      	strb	r3, [r0, r2]
     9fa:	3201      	adds	r2, #1
     9fc:	5483      	strb	r3, [r0, r2]
     9fe:	3201      	adds	r2, #1
     a00:	5483      	strb	r3, [r0, r2]
     a02:	3201      	adds	r2, #1
     a04:	5483      	strb	r3, [r0, r2]
     a06:	3201      	adds	r2, #1
     a08:	5483      	strb	r3, [r0, r2]
     a0a:	3201      	adds	r2, #1
     a0c:	5483      	strb	r3, [r0, r2]
     a0e:	3201      	adds	r2, #1
     a10:	5483      	strb	r3, [r0, r2]
     a12:	3201      	adds	r2, #1
     a14:	5483      	strb	r3, [r0, r2]
     a16:	3201      	adds	r2, #1
     a18:	5483      	strb	r3, [r0, r2]
     a1a:	3201      	adds	r2, #1
     a1c:	5483      	strb	r3, [r0, r2]
     a1e:	3201      	adds	r2, #1
     a20:	5483      	strb	r3, [r0, r2]
     a22:	3201      	adds	r2, #1
     a24:	5483      	strb	r3, [r0, r2]
     a26:	3201      	adds	r2, #1
     a28:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     a2a:	3201      	adds	r2, #1
     a2c:	5483      	strb	r3, [r0, r2]
     a2e:	3201      	adds	r2, #1
     a30:	5483      	strb	r3, [r0, r2]
     a32:	3201      	adds	r2, #1
     a34:	5483      	strb	r3, [r0, r2]
     a36:	3201      	adds	r2, #1
     a38:	5483      	strb	r3, [r0, r2]
     a3a:	3201      	adds	r2, #1
     a3c:	5483      	strb	r3, [r0, r2]
     a3e:	3201      	adds	r2, #1
     a40:	5483      	strb	r3, [r0, r2]
     a42:	3201      	adds	r2, #1
     a44:	5483      	strb	r3, [r0, r2]
     a46:	3201      	adds	r2, #1
     a48:	5483      	strb	r3, [r0, r2]
     a4a:	3201      	adds	r2, #1
     a4c:	5483      	strb	r3, [r0, r2]
     a4e:	3201      	adds	r2, #1
     a50:	5483      	strb	r3, [r0, r2]
     a52:	3201      	adds	r2, #1
     a54:	5483      	strb	r3, [r0, r2]
     a56:	3201      	adds	r2, #1
     a58:	5483      	strb	r3, [r0, r2]
     a5a:	3201      	adds	r2, #1
     a5c:	5483      	strb	r3, [r0, r2]
     a5e:	3201      	adds	r2, #1
     a60:	5483      	strb	r3, [r0, r2]
     a62:	3201      	adds	r2, #1
     a64:	5483      	strb	r3, [r0, r2]
     a66:	3201      	adds	r2, #1
     a68:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     a6a:	3201      	adds	r2, #1
     a6c:	5483      	strb	r3, [r0, r2]
     a6e:	3201      	adds	r2, #1
     a70:	5483      	strb	r3, [r0, r2]
     a72:	3201      	adds	r2, #1
     a74:	5483      	strb	r3, [r0, r2]
     a76:	3201      	adds	r2, #1
     a78:	5483      	strb	r3, [r0, r2]
     a7a:	3201      	adds	r2, #1
     a7c:	5483      	strb	r3, [r0, r2]
     a7e:	3201      	adds	r2, #1
     a80:	5483      	strb	r3, [r0, r2]
     a82:	3201      	adds	r2, #1
     a84:	5483      	strb	r3, [r0, r2]
     a86:	3201      	adds	r2, #1
     a88:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     a8a:	3241      	adds	r2, #65	; 0x41
     a8c:	5483      	strb	r3, [r0, r2]
     a8e:	6583      	str	r3, [r0, #88]	; 0x58
     a90:	6783      	str	r3, [r0, #120]	; 0x78
     a92:	3201      	adds	r2, #1
     a94:	5483      	strb	r3, [r0, r2]
     a96:	65c3      	str	r3, [r0, #92]	; 0x5c
     a98:	67c3      	str	r3, [r0, #124]	; 0x7c
     a9a:	3201      	adds	r2, #1
     a9c:	5483      	strb	r3, [r0, r2]
     a9e:	6603      	str	r3, [r0, #96]	; 0x60
     aa0:	3a1a      	subs	r2, #26
     aa2:	5083      	str	r3, [r0, r2]
     aa4:	321b      	adds	r2, #27
     aa6:	5483      	strb	r3, [r0, r2]
     aa8:	6643      	str	r3, [r0, #100]	; 0x64
     aaa:	3a17      	subs	r2, #23
     aac:	5083      	str	r3, [r0, r2]
     aae:	3218      	adds	r2, #24
     ab0:	5483      	strb	r3, [r0, r2]
     ab2:	6683      	str	r3, [r0, #104]	; 0x68
     ab4:	3a14      	subs	r2, #20
     ab6:	5083      	str	r3, [r0, r2]
     ab8:	3215      	adds	r2, #21
     aba:	5483      	strb	r3, [r0, r2]
     abc:	66c3      	str	r3, [r0, #108]	; 0x6c
     abe:	3a11      	subs	r2, #17
     ac0:	5083      	str	r3, [r0, r2]
     ac2:	3212      	adds	r2, #18
     ac4:	5483      	strb	r3, [r0, r2]
     ac6:	6703      	str	r3, [r0, #112]	; 0x70
     ac8:	3a0e      	subs	r2, #14
     aca:	5083      	str	r3, [r0, r2]
     acc:	320f      	adds	r2, #15
     ace:	5483      	strb	r3, [r0, r2]
     ad0:	6743      	str	r3, [r0, #116]	; 0x74
     ad2:	3a0b      	subs	r2, #11
     ad4:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
     ad6:	2101      	movs	r1, #1
     ad8:	320c      	adds	r2, #12
     ada:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
     adc:	3201      	adds	r2, #1
     ade:	5483      	strb	r3, [r0, r2]
}
     ae0:	4770      	bx	lr
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	00ffffff 	.word	0x00ffffff

00000ae8 <tcc_init>:
{
     ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aea:	46de      	mov	lr, fp
     aec:	4657      	mov	r7, sl
     aee:	464e      	mov	r6, r9
     af0:	4645      	mov	r5, r8
     af2:	b5e0      	push	{r5, r6, r7, lr}
     af4:	b08d      	sub	sp, #52	; 0x34
     af6:	0006      	movs	r6, r0
     af8:	000c      	movs	r4, r1
     afa:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     afc:	0008      	movs	r0, r1
     afe:	4bcd      	ldr	r3, [pc, #820]	; (e34 <tcc_init+0x34c>)
     b00:	4798      	blx	r3
     b02:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
     b04:	49cc      	ldr	r1, [pc, #816]	; (e38 <tcc_init+0x350>)
     b06:	6a0a      	ldr	r2, [r1, #32]
     b08:	2020      	movs	r0, #32
     b0a:	4302      	orrs	r2, r0
     b0c:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     b0e:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     b10:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     b12:	0792      	lsls	r2, r2, #30
     b14:	d506      	bpl.n	b24 <tcc_init+0x3c>
}
     b16:	b00d      	add	sp, #52	; 0x34
     b18:	bc3c      	pop	{r2, r3, r4, r5}
     b1a:	4690      	mov	r8, r2
     b1c:	4699      	mov	r9, r3
     b1e:	46a2      	mov	sl, r4
     b20:	46ab      	mov	fp, r5
     b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     b24:	6822      	ldr	r2, [r4, #0]
     b26:	2701      	movs	r7, #1
     b28:	4017      	ands	r7, r2
     b2a:	d1f4      	bne.n	b16 <tcc_init+0x2e>
	if ((config->counter.count > count_max)
     b2c:	4ac3      	ldr	r2, [pc, #780]	; (e3c <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
     b2e:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
     b30:	6829      	ldr	r1, [r5, #0]
     b32:	4291      	cmp	r1, r2
     b34:	d8ef      	bhi.n	b16 <tcc_init+0x2e>
		|| (config->counter.period > count_max)
     b36:	6869      	ldr	r1, [r5, #4]
     b38:	4291      	cmp	r1, r2
     b3a:	d8ec      	bhi.n	b16 <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
     b3c:	69e9      	ldr	r1, [r5, #28]
     b3e:	4291      	cmp	r1, r2
     b40:	d900      	bls.n	b44 <tcc_init+0x5c>
     b42:	e18b      	b.n	e5c <tcc_init+0x374>
     b44:	6a29      	ldr	r1, [r5, #32]
     b46:	4291      	cmp	r1, r2
     b48:	d900      	bls.n	b4c <tcc_init+0x64>
     b4a:	e189      	b.n	e60 <tcc_init+0x378>
     b4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
     b4e:	4291      	cmp	r1, r2
     b50:	d900      	bls.n	b54 <tcc_init+0x6c>
     b52:	e187      	b.n	e64 <tcc_init+0x37c>
     b54:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     b56:	4291      	cmp	r1, r2
     b58:	d900      	bls.n	b5c <tcc_init+0x74>
     b5a:	e185      	b.n	e68 <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
     b5c:	7c2a      	ldrb	r2, [r5, #16]
     b5e:	3a01      	subs	r2, #1
     b60:	4250      	negs	r0, r2
     b62:	4150      	adcs	r0, r2
     b64:	0602      	lsls	r2, r0, #24
     b66:	9201      	str	r2, [sp, #4]
     b68:	7c6a      	ldrb	r2, [r5, #17]
     b6a:	2a01      	cmp	r2, #1
     b6c:	d031      	beq.n	bd2 <tcc_init+0xea>
     b6e:	7caa      	ldrb	r2, [r5, #18]
     b70:	2a01      	cmp	r2, #1
     b72:	d034      	beq.n	bde <tcc_init+0xf6>
     b74:	7cea      	ldrb	r2, [r5, #19]
     b76:	2a01      	cmp	r2, #1
     b78:	d037      	beq.n	bea <tcc_init+0x102>
	if (config->run_in_standby) {
     b7a:	22a1      	movs	r2, #161	; 0xa1
     b7c:	5caa      	ldrb	r2, [r5, r2]
     b7e:	2a00      	cmp	r2, #0
     b80:	d004      	beq.n	b8c <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     b82:	2280      	movs	r2, #128	; 0x80
     b84:	0112      	lsls	r2, r2, #4
     b86:	9901      	ldr	r1, [sp, #4]
     b88:	4311      	orrs	r1, r2
     b8a:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
     b8c:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     b8e:	1e51      	subs	r1, r2, #1
     b90:	418a      	sbcs	r2, r1
     b92:	0092      	lsls	r2, r2, #2
     b94:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     b96:	7a6a      	ldrb	r2, [r5, #9]
     b98:	2a01      	cmp	r2, #1
     b9a:	d02c      	beq.n	bf6 <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
     b9c:	2235      	movs	r2, #53	; 0x35
     b9e:	5caa      	ldrb	r2, [r5, r2]
     ba0:	2a03      	cmp	r2, #3
     ba2:	d900      	bls.n	ba6 <tcc_init+0xbe>
     ba4:	e162      	b.n	e6c <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
     ba6:	212c      	movs	r1, #44	; 0x2c
     ba8:	5c69      	ldrb	r1, [r5, r1]
     baa:	290f      	cmp	r1, #15
     bac:	d900      	bls.n	bb0 <tcc_init+0xc8>
     bae:	e15d      	b.n	e6c <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     bb0:	7b28      	ldrb	r0, [r5, #12]
     bb2:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     bb4:	7ae8      	ldrb	r0, [r5, #11]
     bb6:	9005      	str	r0, [sp, #20]
     bb8:	202d      	movs	r0, #45	; 0x2d
     bba:	4682      	mov	sl, r0
     bbc:	44aa      	add	sl, r5
     bbe:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     bc0:	9702      	str	r7, [sp, #8]
     bc2:	4684      	mov	ip, r0
     bc4:	9606      	str	r6, [sp, #24]
     bc6:	000e      	movs	r6, r1
     bc8:	46a0      	mov	r8, r4
     bca:	4654      	mov	r4, sl
     bcc:	46a9      	mov	r9, r5
     bce:	9307      	str	r3, [sp, #28]
     bd0:	e047      	b.n	c62 <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     bd2:	2280      	movs	r2, #128	; 0x80
     bd4:	0492      	lsls	r2, r2, #18
     bd6:	9901      	ldr	r1, [sp, #4]
     bd8:	4311      	orrs	r1, r2
     bda:	9101      	str	r1, [sp, #4]
     bdc:	e7c7      	b.n	b6e <tcc_init+0x86>
     bde:	2280      	movs	r2, #128	; 0x80
     be0:	04d2      	lsls	r2, r2, #19
     be2:	9901      	ldr	r1, [sp, #4]
     be4:	4311      	orrs	r1, r2
     be6:	9101      	str	r1, [sp, #4]
     be8:	e7c4      	b.n	b74 <tcc_init+0x8c>
     bea:	2280      	movs	r2, #128	; 0x80
     bec:	0512      	lsls	r2, r2, #20
     bee:	9901      	ldr	r1, [sp, #4]
     bf0:	4311      	orrs	r1, r2
     bf2:	9101      	str	r1, [sp, #4]
     bf4:	e7c1      	b.n	b7a <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
     bf6:	9903      	ldr	r1, [sp, #12]
     bf8:	4311      	orrs	r1, r2
     bfa:	9103      	str	r1, [sp, #12]
     bfc:	e7ce      	b.n	b9c <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     bfe:	0292      	lsls	r2, r2, #10
     c00:	25c0      	movs	r5, #192	; 0xc0
     c02:	012d      	lsls	r5, r5, #4
     c04:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c06:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
     c08:	790d      	ldrb	r5, [r1, #4]
     c0a:	2603      	movs	r6, #3
     c0c:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c0e:	4332      	orrs	r2, r6
     c10:	4655      	mov	r5, sl
     c12:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
     c14:	794e      	ldrb	r6, [r1, #5]
     c16:	0176      	lsls	r6, r6, #5
     c18:	2560      	movs	r5, #96	; 0x60
     c1a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c1c:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
     c1e:	798d      	ldrb	r5, [r1, #6]
     c20:	022d      	lsls	r5, r5, #8
     c22:	26c0      	movs	r6, #192	; 0xc0
     c24:	00b6      	lsls	r6, r6, #2
     c26:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c28:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     c2a:	79cd      	ldrb	r5, [r1, #7]
     c2c:	032d      	lsls	r5, r5, #12
     c2e:	26e0      	movs	r6, #224	; 0xe0
     c30:	01f6      	lsls	r6, r6, #7
     c32:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c34:	432a      	orrs	r2, r5
     c36:	4310      	orrs	r0, r2
     c38:	4303      	orrs	r3, r0
     c3a:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
     c3c:	ab08      	add	r3, sp, #32
     c3e:	4662      	mov	r2, ip
     c40:	2008      	movs	r0, #8
     c42:	181b      	adds	r3, r3, r0
     c44:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     c46:	2a04      	cmp	r2, #4
     c48:	d028      	beq.n	c9c <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
     c4a:	7c8a      	ldrb	r2, [r1, #18]
     c4c:	2a03      	cmp	r2, #3
     c4e:	d900      	bls.n	c52 <tcc_init+0x16a>
     c50:	e10c      	b.n	e6c <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
     c52:	7a4e      	ldrb	r6, [r1, #9]
     c54:	340a      	adds	r4, #10
     c56:	2304      	movs	r3, #4
     c58:	469a      	mov	sl, r3
     c5a:	44d4      	add	ip, sl
     c5c:	2e0f      	cmp	r6, #15
     c5e:	d900      	bls.n	c62 <tcc_init+0x17a>
     c60:	e104      	b.n	e6c <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c62:	0636      	lsls	r6, r6, #24
     c64:	23f0      	movs	r3, #240	; 0xf0
     c66:	051b      	lsls	r3, r3, #20
     c68:	401e      	ands	r6, r3
     c6a:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     c6c:	7825      	ldrb	r5, [r4, #0]
     c6e:	042d      	lsls	r5, r5, #16
     c70:	23ff      	movs	r3, #255	; 0xff
     c72:	041b      	lsls	r3, r3, #16
     c74:	401d      	ands	r5, r3
     c76:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     c78:	7863      	ldrb	r3, [r4, #1]
     c7a:	2080      	movs	r0, #128	; 0x80
     c7c:	2b00      	cmp	r3, #0
     c7e:	d100      	bne.n	c82 <tcc_init+0x19a>
     c80:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     c82:	788f      	ldrb	r7, [r1, #2]
     c84:	2308      	movs	r3, #8
     c86:	2f00      	cmp	r7, #0
     c88:	d100      	bne.n	c8c <tcc_init+0x1a4>
     c8a:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     c8c:	78cf      	ldrb	r7, [r1, #3]
     c8e:	46bb      	mov	fp, r7
     c90:	2710      	movs	r7, #16
     c92:	465d      	mov	r5, fp
     c94:	2d00      	cmp	r5, #0
     c96:	d1b2      	bne.n	bfe <tcc_init+0x116>
     c98:	9f02      	ldr	r7, [sp, #8]
     c9a:	e7b0      	b.n	bfe <tcc_init+0x116>
     c9c:	9e06      	ldr	r6, [sp, #24]
     c9e:	4644      	mov	r4, r8
     ca0:	464d      	mov	r5, r9
     ca2:	9b07      	ldr	r3, [sp, #28]
     ca4:	4648      	mov	r0, r9
     ca6:	3050      	adds	r0, #80	; 0x50
     ca8:	4649      	mov	r1, r9
     caa:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     cac:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     cae:	2780      	movs	r7, #128	; 0x80
     cb0:	027f      	lsls	r7, r7, #9
     cb2:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     cb4:	2701      	movs	r7, #1
     cb6:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     cb8:	2702      	movs	r7, #2
     cba:	37ff      	adds	r7, #255	; 0xff
     cbc:	46ba      	mov	sl, r7
     cbe:	001f      	movs	r7, r3
     cc0:	0013      	movs	r3, r2
     cc2:	46a0      	mov	r8, r4
     cc4:	003c      	movs	r4, r7
     cc6:	e007      	b.n	cd8 <tcc_init+0x1f0>
     cc8:	4657      	mov	r7, sl
     cca:	4097      	lsls	r7, r2
     ccc:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     cce:	3201      	adds	r2, #1
     cd0:	3001      	adds	r0, #1
     cd2:	3102      	adds	r1, #2
     cd4:	2a08      	cmp	r2, #8
     cd6:	d00e      	beq.n	cf6 <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
     cd8:	7807      	ldrb	r7, [r0, #0]
     cda:	2f00      	cmp	r7, #0
     cdc:	d002      	beq.n	ce4 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     cde:	4667      	mov	r7, ip
     ce0:	4097      	lsls	r7, r2
     ce2:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
     ce4:	780f      	ldrb	r7, [r1, #0]
     ce6:	2f00      	cmp	r7, #0
     ce8:	d0f1      	beq.n	cce <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     cea:	2f02      	cmp	r7, #2
     cec:	d0ec      	beq.n	cc8 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     cee:	464f      	mov	r7, r9
     cf0:	4097      	lsls	r7, r2
     cf2:	433b      	orrs	r3, r7
     cf4:	e7eb      	b.n	cce <tcc_init+0x1e6>
     cf6:	0022      	movs	r2, r4
     cf8:	4644      	mov	r4, r8
     cfa:	4698      	mov	r8, r3
     cfc:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     cfe:	7e6a      	ldrb	r2, [r5, #25]
     d00:	0112      	lsls	r2, r2, #4
     d02:	2130      	movs	r1, #48	; 0x30
     d04:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     d06:	7e28      	ldrb	r0, [r5, #24]
     d08:	2207      	movs	r2, #7
     d0a:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     d0c:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     d0e:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     d10:	2080      	movs	r0, #128	; 0x80
     d12:	0240      	lsls	r0, r0, #9
     d14:	000f      	movs	r7, r1
     d16:	e002      	b.n	d1e <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     d18:	3201      	adds	r2, #1
     d1a:	2a04      	cmp	r2, #4
     d1c:	d007      	beq.n	d2e <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
     d1e:	18a9      	adds	r1, r5, r2
     d20:	7d09      	ldrb	r1, [r1, #20]
     d22:	2900      	cmp	r1, #0
     d24:	d0f8      	beq.n	d18 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
     d26:	0001      	movs	r1, r0
     d28:	4091      	lsls	r1, r2
     d2a:	430f      	orrs	r7, r1
     d2c:	e7f4      	b.n	d18 <tcc_init+0x230>
     d2e:	46b9      	mov	r9, r7
     d30:	1d32      	adds	r2, r6, #4
     d32:	0030      	movs	r0, r6
     d34:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     d36:	2100      	movs	r1, #0
     d38:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     d3a:	4290      	cmp	r0, r2
     d3c:	d1fc      	bne.n	d38 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
     d3e:	2200      	movs	r2, #0
     d40:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     d42:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     d44:	009b      	lsls	r3, r3, #2
     d46:	4a3e      	ldr	r2, [pc, #248]	; (e40 <tcc_init+0x358>)
     d48:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
     d4a:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     d4c:	23a0      	movs	r3, #160	; 0xa0
     d4e:	5cea      	ldrb	r2, [r5, r3]
     d50:	3b64      	subs	r3, #100	; 0x64
     d52:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
     d54:	a909      	add	r1, sp, #36	; 0x24
     d56:	7aab      	ldrb	r3, [r5, #10]
     d58:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     d5a:	2011      	movs	r0, #17
     d5c:	4b39      	ldr	r3, [pc, #228]	; (e44 <tcc_init+0x35c>)
     d5e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     d60:	2011      	movs	r0, #17
     d62:	4b39      	ldr	r3, [pc, #228]	; (e48 <tcc_init+0x360>)
     d64:	4798      	blx	r3
     d66:	002f      	movs	r7, r5
     d68:	3798      	adds	r7, #152	; 0x98
     d6a:	002e      	movs	r6, r5
     d6c:	3658      	adds	r6, #88	; 0x58
     d6e:	2378      	movs	r3, #120	; 0x78
     d70:	469a      	mov	sl, r3
     d72:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d74:	3b77      	subs	r3, #119	; 0x77
     d76:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
     d78:	0023      	movs	r3, r4
     d7a:	4654      	mov	r4, sl
     d7c:	469a      	mov	sl, r3
     d7e:	e003      	b.n	d88 <tcc_init+0x2a0>
     d80:	3701      	adds	r7, #1
     d82:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     d84:	42b4      	cmp	r4, r6
     d86:	d014      	beq.n	db2 <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
     d88:	783b      	ldrb	r3, [r7, #0]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d0f8      	beq.n	d80 <tcc_init+0x298>
     d8e:	ab08      	add	r3, sp, #32
     d90:	465a      	mov	r2, fp
     d92:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d94:	2300      	movs	r3, #0
     d96:	aa08      	add	r2, sp, #32
     d98:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     d9a:	0013      	movs	r3, r2
     d9c:	2220      	movs	r2, #32
     d9e:	18b2      	adds	r2, r6, r2
     da0:	7812      	ldrb	r2, [r2, #0]
     da2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     da4:	465a      	mov	r2, fp
     da6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     da8:	7830      	ldrb	r0, [r6, #0]
     daa:	0019      	movs	r1, r3
     dac:	4b27      	ldr	r3, [pc, #156]	; (e4c <tcc_init+0x364>)
     dae:	4798      	blx	r3
     db0:	e7e6      	b.n	d80 <tcc_init+0x298>
     db2:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     db4:	9b04      	ldr	r3, [sp, #16]
     db6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     db8:	9a05      	ldr	r2, [sp, #20]
     dba:	0212      	lsls	r2, r2, #8
     dbc:	4313      	orrs	r3, r2
     dbe:	9a01      	ldr	r2, [sp, #4]
     dc0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     dc2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     dc4:	2204      	movs	r2, #4
     dc6:	68a3      	ldr	r3, [r4, #8]
     dc8:	421a      	tst	r2, r3
     dca:	d1fc      	bne.n	dc6 <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
     dcc:	23ff      	movs	r3, #255	; 0xff
     dce:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     dd0:	2204      	movs	r2, #4
     dd2:	68a3      	ldr	r3, [r4, #8]
     dd4:	421a      	tst	r2, r3
     dd6:	d1fc      	bne.n	dd2 <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
     dd8:	466b      	mov	r3, sp
     dda:	7b1b      	ldrb	r3, [r3, #12]
     ddc:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     de0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     de4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     de6:	4643      	mov	r3, r8
     de8:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     dea:	4a19      	ldr	r2, [pc, #100]	; (e50 <tcc_init+0x368>)
     dec:	68a3      	ldr	r3, [r4, #8]
     dee:	4213      	tst	r3, r2
     df0:	d1fc      	bne.n	dec <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
     df2:	464b      	mov	r3, r9
     df4:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     df6:	2210      	movs	r2, #16
     df8:	68a3      	ldr	r3, [r4, #8]
     dfa:	421a      	tst	r2, r3
     dfc:	d1fc      	bne.n	df8 <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
     dfe:	682b      	ldr	r3, [r5, #0]
     e00:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     e02:	4a14      	ldr	r2, [pc, #80]	; (e54 <tcc_init+0x36c>)
     e04:	68a3      	ldr	r3, [r4, #8]
     e06:	4213      	tst	r3, r2
     e08:	d1fc      	bne.n	e04 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
     e0a:	686b      	ldr	r3, [r5, #4]
     e0c:	6423      	str	r3, [r4, #64]	; 0x40
     e0e:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     e10:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     e12:	4811      	ldr	r0, [pc, #68]	; (e58 <tcc_init+0x370>)
     e14:	0002      	movs	r2, r0
     e16:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     e18:	68a3      	ldr	r3, [r4, #8]
     e1a:	421a      	tst	r2, r3
     e1c:	d1fc      	bne.n	e18 <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
     e1e:	cd04      	ldmia	r5!, {r2}
     e20:	000b      	movs	r3, r1
     e22:	3310      	adds	r3, #16
     e24:	009b      	lsls	r3, r3, #2
     e26:	18e3      	adds	r3, r4, r3
     e28:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     e2a:	3101      	adds	r1, #1
     e2c:	2904      	cmp	r1, #4
     e2e:	d1f1      	bne.n	e14 <tcc_init+0x32c>
	return STATUS_OK;
     e30:	2000      	movs	r0, #0
     e32:	e670      	b.n	b16 <tcc_init+0x2e>
     e34:	00000951 	.word	0x00000951
     e38:	40000400 	.word	0x40000400
     e3c:	00ffffff 	.word	0x00ffffff
     e40:	200000ac 	.word	0x200000ac
     e44:	0000082d 	.word	0x0000082d
     e48:	000007a1 	.word	0x000007a1
     e4c:	000008f1 	.word	0x000008f1
     e50:	00020040 	.word	0x00020040
     e54:	00040080 	.word	0x00040080
     e58:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
     e5c:	2017      	movs	r0, #23
     e5e:	e65a      	b.n	b16 <tcc_init+0x2e>
     e60:	2017      	movs	r0, #23
     e62:	e658      	b.n	b16 <tcc_init+0x2e>
     e64:	2017      	movs	r0, #23
     e66:	e656      	b.n	b16 <tcc_init+0x2e>
     e68:	2017      	movs	r0, #23
     e6a:	e654      	b.n	b16 <tcc_init+0x2e>
     e6c:	2017      	movs	r0, #23
     e6e:	e652      	b.n	b16 <tcc_init+0x2e>

00000e70 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
     e70:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
     e72:	233c      	movs	r3, #60	; 0x3c
     e74:	5cc3      	ldrb	r3, [r0, r3]
     e76:	4c01      	ldr	r4, [pc, #4]	; (e7c <tcc_set_compare_value+0xc>)
     e78:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
     e7a:	bd10      	pop	{r4, pc}
     e7c:	00000955 	.word	0x00000955

00000e80 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     e80:	b5f0      	push	{r4, r5, r6, r7, lr}
     e82:	46c6      	mov	lr, r8
     e84:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     e86:	0080      	lsls	r0, r0, #2
     e88:	4b0e      	ldr	r3, [pc, #56]	; (ec4 <_tcc_interrupt_handler+0x44>)
     e8a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     e8c:	683b      	ldr	r3, [r7, #0]
     e8e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     e94:	4013      	ands	r3, r2
     e96:	401e      	ands	r6, r3
     e98:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     e9a:	4b0b      	ldr	r3, [pc, #44]	; (ec8 <_tcc_interrupt_handler+0x48>)
     e9c:	4698      	mov	r8, r3
     e9e:	e002      	b.n	ea6 <_tcc_interrupt_handler+0x26>
     ea0:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     ea2:	2c30      	cmp	r4, #48	; 0x30
     ea4:	d00a      	beq.n	ebc <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     ea6:	4643      	mov	r3, r8
     ea8:	58e5      	ldr	r5, [r4, r3]
     eaa:	4235      	tst	r5, r6
     eac:	d0f8      	beq.n	ea0 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     eae:	193b      	adds	r3, r7, r4
     eb0:	685b      	ldr	r3, [r3, #4]
     eb2:	0038      	movs	r0, r7
     eb4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     eb6:	683b      	ldr	r3, [r7, #0]
     eb8:	62dd      	str	r5, [r3, #44]	; 0x2c
     eba:	e7f1      	b.n	ea0 <_tcc_interrupt_handler+0x20>
		}
	}
}
     ebc:	bc04      	pop	{r2}
     ebe:	4690      	mov	r8, r2
     ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	200000ac 	.word	0x200000ac
     ec8:	000011f8 	.word	0x000011f8

00000ecc <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     ecc:	b510      	push	{r4, lr}
     ece:	2000      	movs	r0, #0
     ed0:	4b01      	ldr	r3, [pc, #4]	; (ed8 <TCC0_Handler+0xc>)
     ed2:	4798      	blx	r3
     ed4:	bd10      	pop	{r4, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	00000e81 	.word	0x00000e81

00000edc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     edc:	e7fe      	b.n	edc <Dummy_Handler>
	...

00000ee0 <Reset_Handler>:
{
     ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     ee2:	4a2a      	ldr	r2, [pc, #168]	; (f8c <Reset_Handler+0xac>)
     ee4:	4b2a      	ldr	r3, [pc, #168]	; (f90 <Reset_Handler+0xb0>)
     ee6:	429a      	cmp	r2, r3
     ee8:	d011      	beq.n	f0e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     eea:	001a      	movs	r2, r3
     eec:	4b29      	ldr	r3, [pc, #164]	; (f94 <Reset_Handler+0xb4>)
     eee:	429a      	cmp	r2, r3
     ef0:	d20d      	bcs.n	f0e <Reset_Handler+0x2e>
     ef2:	4a29      	ldr	r2, [pc, #164]	; (f98 <Reset_Handler+0xb8>)
     ef4:	3303      	adds	r3, #3
     ef6:	1a9b      	subs	r3, r3, r2
     ef8:	089b      	lsrs	r3, r3, #2
     efa:	3301      	adds	r3, #1
     efc:	009b      	lsls	r3, r3, #2
     efe:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     f00:	4823      	ldr	r0, [pc, #140]	; (f90 <Reset_Handler+0xb0>)
     f02:	4922      	ldr	r1, [pc, #136]	; (f8c <Reset_Handler+0xac>)
     f04:	588c      	ldr	r4, [r1, r2]
     f06:	5084      	str	r4, [r0, r2]
     f08:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     f0a:	429a      	cmp	r2, r3
     f0c:	d1fa      	bne.n	f04 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     f0e:	4a23      	ldr	r2, [pc, #140]	; (f9c <Reset_Handler+0xbc>)
     f10:	4b23      	ldr	r3, [pc, #140]	; (fa0 <Reset_Handler+0xc0>)
     f12:	429a      	cmp	r2, r3
     f14:	d20a      	bcs.n	f2c <Reset_Handler+0x4c>
     f16:	43d3      	mvns	r3, r2
     f18:	4921      	ldr	r1, [pc, #132]	; (fa0 <Reset_Handler+0xc0>)
     f1a:	185b      	adds	r3, r3, r1
     f1c:	2103      	movs	r1, #3
     f1e:	438b      	bics	r3, r1
     f20:	3304      	adds	r3, #4
     f22:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     f24:	2100      	movs	r1, #0
     f26:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     f28:	4293      	cmp	r3, r2
     f2a:	d1fc      	bne.n	f26 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f2c:	4a1d      	ldr	r2, [pc, #116]	; (fa4 <Reset_Handler+0xc4>)
     f2e:	21ff      	movs	r1, #255	; 0xff
     f30:	4b1d      	ldr	r3, [pc, #116]	; (fa8 <Reset_Handler+0xc8>)
     f32:	438b      	bics	r3, r1
     f34:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     f36:	39fd      	subs	r1, #253	; 0xfd
     f38:	2390      	movs	r3, #144	; 0x90
     f3a:	005b      	lsls	r3, r3, #1
     f3c:	4a1b      	ldr	r2, [pc, #108]	; (fac <Reset_Handler+0xcc>)
     f3e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     f40:	4a1b      	ldr	r2, [pc, #108]	; (fb0 <Reset_Handler+0xd0>)
     f42:	78d3      	ldrb	r3, [r2, #3]
     f44:	2503      	movs	r5, #3
     f46:	43ab      	bics	r3, r5
     f48:	2402      	movs	r4, #2
     f4a:	4323      	orrs	r3, r4
     f4c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     f4e:	78d3      	ldrb	r3, [r2, #3]
     f50:	270c      	movs	r7, #12
     f52:	43bb      	bics	r3, r7
     f54:	2608      	movs	r6, #8
     f56:	4333      	orrs	r3, r6
     f58:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     f5a:	4b16      	ldr	r3, [pc, #88]	; (fb4 <Reset_Handler+0xd4>)
     f5c:	7b98      	ldrb	r0, [r3, #14]
     f5e:	2230      	movs	r2, #48	; 0x30
     f60:	4390      	bics	r0, r2
     f62:	2220      	movs	r2, #32
     f64:	4310      	orrs	r0, r2
     f66:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     f68:	7b99      	ldrb	r1, [r3, #14]
     f6a:	43b9      	bics	r1, r7
     f6c:	4331      	orrs	r1, r6
     f6e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     f70:	7b9a      	ldrb	r2, [r3, #14]
     f72:	43aa      	bics	r2, r5
     f74:	4322      	orrs	r2, r4
     f76:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     f78:	4a0f      	ldr	r2, [pc, #60]	; (fb8 <Reset_Handler+0xd8>)
     f7a:	6853      	ldr	r3, [r2, #4]
     f7c:	2180      	movs	r1, #128	; 0x80
     f7e:	430b      	orrs	r3, r1
     f80:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     f82:	4b0e      	ldr	r3, [pc, #56]	; (fbc <Reset_Handler+0xdc>)
     f84:	4798      	blx	r3
        main();
     f86:	4b0e      	ldr	r3, [pc, #56]	; (fc0 <Reset_Handler+0xe0>)
     f88:	4798      	blx	r3
     f8a:	e7fe      	b.n	f8a <Reset_Handler+0xaa>
     f8c:	00001248 	.word	0x00001248
     f90:	20000000 	.word	0x20000000
     f94:	2000001c 	.word	0x2000001c
     f98:	20000004 	.word	0x20000004
     f9c:	2000001c 	.word	0x2000001c
     fa0:	20000194 	.word	0x20000194
     fa4:	e000ed00 	.word	0xe000ed00
     fa8:	00000000 	.word	0x00000000
     fac:	41007000 	.word	0x41007000
     fb0:	41005000 	.word	0x41005000
     fb4:	41004800 	.word	0x41004800
     fb8:	41004000 	.word	0x41004000
     fbc:	0000118d 	.word	0x0000118d
     fc0:	00001115 	.word	0x00001115

00000fc4 <is_button_pressed>:
	return (port_base->IN.reg & pin_mask);
     fc4:	4b0e      	ldr	r3, [pc, #56]	; (1000 <is_button_pressed+0x3c>)
     fc6:	6a1b      	ldr	r3, [r3, #32]

bool is_button_pressed(void) {
	
	static int press_delay_count = 5;
	
	if(!port_pin_get_input_level(SW0_PIN))
     fc8:	045b      	lsls	r3, r3, #17
     fca:	d40d      	bmi.n	fe8 <is_button_pressed+0x24>
	{
		button_pressed = true;
     fcc:	2201      	movs	r2, #1
     fce:	4b0d      	ldr	r3, [pc, #52]	; (1004 <is_button_pressed+0x40>)
     fd0:	701a      	strb	r2, [r3, #0]
		press_delay_count--;		
     fd2:	4a0d      	ldr	r2, [pc, #52]	; (1008 <is_button_pressed+0x44>)
     fd4:	6813      	ldr	r3, [r2, #0]
     fd6:	3b01      	subs	r3, #1
     fd8:	6013      	str	r3, [r2, #0]
	{
		button_pressed = false;
		press_delay_count = 5;
	}
	
	if(press_delay_count <= 0)
     fda:	2b00      	cmp	r3, #0
     fdc:	dc0a      	bgt.n	ff4 <is_button_pressed+0x30>
	{
		button_released = false;
     fde:	2200      	movs	r2, #0
     fe0:	4b0a      	ldr	r3, [pc, #40]	; (100c <is_button_pressed+0x48>)
     fe2:	701a      	strb	r2, [r3, #0]
		return true;
     fe4:	2001      	movs	r0, #1
     fe6:	e009      	b.n	ffc <is_button_pressed+0x38>
		button_pressed = false;
     fe8:	2200      	movs	r2, #0
     fea:	4b06      	ldr	r3, [pc, #24]	; (1004 <is_button_pressed+0x40>)
     fec:	701a      	strb	r2, [r3, #0]
		press_delay_count = 5;
     fee:	3205      	adds	r2, #5
     ff0:	4b05      	ldr	r3, [pc, #20]	; (1008 <is_button_pressed+0x44>)
     ff2:	601a      	str	r2, [r3, #0]
		press_delay_count = 0;
	}
	else
	{
		button_released = true;
     ff4:	2201      	movs	r2, #1
     ff6:	4b05      	ldr	r3, [pc, #20]	; (100c <is_button_pressed+0x48>)
     ff8:	701a      	strb	r2, [r3, #0]
		return false;	
     ffa:	2000      	movs	r0, #0
	}

}
     ffc:	4770      	bx	lr
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	41004400 	.word	0x41004400
    1004:	20000064 	.word	0x20000064
    1008:	20000018 	.word	0x20000018
    100c:	20000065 	.word	0x20000065

00001010 <toggle_pwm_duty_cycle>:
	if(button_released){
		motor_status_changed = false;
	}
}

void toggle_pwm_duty_cycle(void) {
    1010:	b570      	push	{r4, r5, r6, lr}
	if (pwm_running) {
    1012:	4b1c      	ldr	r3, [pc, #112]	; (1084 <toggle_pwm_duty_cycle+0x74>)
    1014:	781b      	ldrb	r3, [r3, #0]
    1016:	2b00      	cmp	r3, #0
    1018:	d006      	beq.n	1028 <toggle_pwm_duty_cycle+0x18>
		if (toggle_count == 2) {
    101a:	4b1b      	ldr	r3, [pc, #108]	; (1088 <toggle_pwm_duty_cycle+0x78>)
    101c:	781b      	ldrb	r3, [r3, #0]
    101e:	2b02      	cmp	r3, #2
    1020:	d003      	beq.n	102a <toggle_pwm_duty_cycle+0x1a>
			LED_On(LED_0_PIN);
			tcc_set_compare_value(&tcc_instance, TCC_MATCH_CAPTURE_CHANNEL_0, first_duty_cycle);
			} else if (toggle_count == 3) {
    1022:	2b03      	cmp	r3, #3
    1024:	d00c      	beq.n	1040 <toggle_pwm_duty_cycle+0x30>
			tcc_set_compare_value(&tcc_instance, TCC_MATCH_CAPTURE_CHANNEL_0, second_duty_cycle);
			LED_Off(LED_0_PIN);
			} else if (toggle_count > 3) {
    1026:	d815      	bhi.n	1054 <toggle_pwm_duty_cycle+0x44>
			pwm_running = false;
			tcc_disable(&tcc_instance);
			//tcc_restart_counter(&tcc_instance);
		}
	}
}
    1028:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    102a:	2280      	movs	r2, #128	; 0x80
    102c:	0252      	lsls	r2, r2, #9
    102e:	4b17      	ldr	r3, [pc, #92]	; (108c <toggle_pwm_duty_cycle+0x7c>)
    1030:	615a      	str	r2, [r3, #20]
			tcc_set_compare_value(&tcc_instance, TCC_MATCH_CAPTURE_CHANNEL_0, first_duty_cycle);
    1032:	2270      	movs	r2, #112	; 0x70
    1034:	32ff      	adds	r2, #255	; 0xff
    1036:	2100      	movs	r1, #0
    1038:	4815      	ldr	r0, [pc, #84]	; (1090 <toggle_pwm_duty_cycle+0x80>)
    103a:	4b16      	ldr	r3, [pc, #88]	; (1094 <toggle_pwm_duty_cycle+0x84>)
    103c:	4798      	blx	r3
    103e:	e7f3      	b.n	1028 <toggle_pwm_duty_cycle+0x18>
			tcc_set_compare_value(&tcc_instance, TCC_MATCH_CAPTURE_CHANNEL_0, second_duty_cycle);
    1040:	4a15      	ldr	r2, [pc, #84]	; (1098 <toggle_pwm_duty_cycle+0x88>)
    1042:	2100      	movs	r1, #0
    1044:	4812      	ldr	r0, [pc, #72]	; (1090 <toggle_pwm_duty_cycle+0x80>)
    1046:	4b13      	ldr	r3, [pc, #76]	; (1094 <toggle_pwm_duty_cycle+0x84>)
    1048:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    104a:	2280      	movs	r2, #128	; 0x80
    104c:	0252      	lsls	r2, r2, #9
    104e:	4b0f      	ldr	r3, [pc, #60]	; (108c <toggle_pwm_duty_cycle+0x7c>)
    1050:	619a      	str	r2, [r3, #24]
    1052:	e7e9      	b.n	1028 <toggle_pwm_duty_cycle+0x18>
			toggle_count = 0;
    1054:	2500      	movs	r5, #0
    1056:	4b0c      	ldr	r3, [pc, #48]	; (1088 <toggle_pwm_duty_cycle+0x78>)
    1058:	701d      	strb	r5, [r3, #0]
			tcc_set_compare_value(&tcc_instance, TCC_MATCH_CAPTURE_CHANNEL_0, start_duty_cycle);
    105a:	4c0d      	ldr	r4, [pc, #52]	; (1090 <toggle_pwm_duty_cycle+0x80>)
    105c:	22e5      	movs	r2, #229	; 0xe5
    105e:	2100      	movs	r1, #0
    1060:	0020      	movs	r0, r4
    1062:	4b0c      	ldr	r3, [pc, #48]	; (1094 <toggle_pwm_duty_cycle+0x84>)
    1064:	4798      	blx	r3
			pwm_running = false;
    1066:	4b07      	ldr	r3, [pc, #28]	; (1084 <toggle_pwm_duty_cycle+0x74>)
    1068:	701d      	strb	r5, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    106a:	6822      	ldr	r2, [r4, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    106c:	2102      	movs	r1, #2
    106e:	6893      	ldr	r3, [r2, #8]
    1070:	4219      	tst	r1, r3
    1072:	d1fc      	bne.n	106e <toggle_pwm_duty_cycle+0x5e>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tcc_module->INTENCLR.reg = TCC_INTENCLR_MASK;
    1074:	4b09      	ldr	r3, [pc, #36]	; (109c <toggle_pwm_duty_cycle+0x8c>)
    1076:	6253      	str	r3, [r2, #36]	; 0x24
	/* Clear interrupt flag */
	tcc_module->INTFLAG.reg = TCC_INTFLAG_MASK;
    1078:	62d3      	str	r3, [r2, #44]	; 0x2c

	/* Disable the TCC module */
	tcc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    107a:	6813      	ldr	r3, [r2, #0]
    107c:	2102      	movs	r1, #2
    107e:	438b      	bics	r3, r1
    1080:	6013      	str	r3, [r2, #0]
}
    1082:	e7d1      	b.n	1028 <toggle_pwm_duty_cycle+0x18>
    1084:	20000067 	.word	0x20000067
    1088:	20000069 	.word	0x20000069
    108c:	41004400 	.word	0x41004400
    1090:	200000b0 	.word	0x200000b0
    1094:	00000e71 	.word	0x00000e71
    1098:	00000342 	.word	0x00000342
    109c:	000ff80f 	.word	0x000ff80f

000010a0 <check_button_press>:
void check_button_press(void) {
    10a0:	b510      	push	{r4, lr}
	if (is_button_pressed() & !motor_status_changed) {
    10a2:	4b15      	ldr	r3, [pc, #84]	; (10f8 <check_button_press+0x58>)
    10a4:	4798      	blx	r3
    10a6:	4b15      	ldr	r3, [pc, #84]	; (10fc <check_button_press+0x5c>)
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	2b01      	cmp	r3, #1
    10ac:	d018      	beq.n	10e0 <check_button_press+0x40>
    10ae:	2800      	cmp	r0, #0
    10b0:	d016      	beq.n	10e0 <check_button_press+0x40>
		toggle_count++;
    10b2:	4a13      	ldr	r2, [pc, #76]	; (1100 <check_button_press+0x60>)
    10b4:	7813      	ldrb	r3, [r2, #0]
    10b6:	3301      	adds	r3, #1
    10b8:	7013      	strb	r3, [r2, #0]
		motor_status_changed = true;
    10ba:	2201      	movs	r2, #1
    10bc:	4b0f      	ldr	r3, [pc, #60]	; (10fc <check_button_press+0x5c>)
    10be:	701a      	strb	r2, [r3, #0]
		if (!pwm_running) {
    10c0:	4b10      	ldr	r3, [pc, #64]	; (1104 <check_button_press+0x64>)
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	2b00      	cmp	r3, #0
    10c6:	d113      	bne.n	10f0 <check_button_press+0x50>
			pwm_running = true;			
    10c8:	4b0e      	ldr	r3, [pc, #56]	; (1104 <check_button_press+0x64>)
    10ca:	701a      	strb	r2, [r3, #0]
	Tcc *const tcc_module = module_inst->hw;
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <check_button_press+0x68>)
    10ce:	681a      	ldr	r2, [r3, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    10d0:	2102      	movs	r1, #2
    10d2:	6893      	ldr	r3, [r2, #8]
    10d4:	4219      	tst	r1, r3
    10d6:	d1fc      	bne.n	10d2 <check_button_press+0x32>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    10d8:	6813      	ldr	r3, [r2, #0]
    10da:	2102      	movs	r1, #2
    10dc:	430b      	orrs	r3, r1
    10de:	6013      	str	r3, [r2, #0]
	if(button_released){
    10e0:	4b0a      	ldr	r3, [pc, #40]	; (110c <check_button_press+0x6c>)
    10e2:	781b      	ldrb	r3, [r3, #0]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d002      	beq.n	10ee <check_button_press+0x4e>
		motor_status_changed = false;
    10e8:	2200      	movs	r2, #0
    10ea:	4b04      	ldr	r3, [pc, #16]	; (10fc <check_button_press+0x5c>)
    10ec:	701a      	strb	r2, [r3, #0]
}
    10ee:	bd10      	pop	{r4, pc}
			toggle_pwm_duty_cycle();
    10f0:	4b07      	ldr	r3, [pc, #28]	; (1110 <check_button_press+0x70>)
    10f2:	4798      	blx	r3
    10f4:	e7f4      	b.n	10e0 <check_button_press+0x40>
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	00000fc5 	.word	0x00000fc5
    10fc:	20000066 	.word	0x20000066
    1100:	20000069 	.word	0x20000069
    1104:	20000067 	.word	0x20000067
    1108:	200000b0 	.word	0x200000b0
    110c:	20000065 	.word	0x20000065
    1110:	00001011 	.word	0x00001011

00001114 <main>:
int main(void) {
    1114:	b570      	push	{r4, r5, r6, lr}
	system_init();
    1116:	4b13      	ldr	r3, [pc, #76]	; (1164 <main+0x50>)
    1118:	4798      	blx	r3
	cpu_irq_enable();
    111a:	2501      	movs	r5, #1
    111c:	4b12      	ldr	r3, [pc, #72]	; (1168 <main+0x54>)
    111e:	701d      	strb	r5, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1120:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1124:	b662      	cpsie	i
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
    1126:	4e11      	ldr	r6, [pc, #68]	; (116c <main+0x58>)
    1128:	4c11      	ldr	r4, [pc, #68]	; (1170 <main+0x5c>)
    112a:	0031      	movs	r1, r6
    112c:	0020      	movs	r0, r4
    112e:	4b11      	ldr	r3, [pc, #68]	; (1174 <main+0x60>)
    1130:	4798      	blx	r3
	config_tcc.counter.period                               = TCC_PERIOD_VALUE;
    1132:	4b11      	ldr	r3, [pc, #68]	; (1178 <main+0x64>)
    1134:	6063      	str	r3, [r4, #4]
	config_tcc.compare.match[TCC_MATCH_CAPTURE_CHANNEL_0]	= start_duty_cycle;
    1136:	23e5      	movs	r3, #229	; 0xe5
    1138:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.wave_polarity[TCC_MATCH_CAPTURE_CHANNEL_0] = 1;
    113a:	7525      	strb	r5, [r4, #20]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_DOUBLE_SLOPE_BOTH;
    113c:	3bdf      	subs	r3, #223	; 0xdf
    113e:	7623      	strb	r3, [r4, #24]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_DIVIDER;
    1140:	3b04      	subs	r3, #4
    1142:	72e3      	strb	r3, [r4, #11]
	config_tcc.pins.enable_wave_out_pin[TCC_MATCH_CAPTURE_CHANNEL_0]    = true;
    1144:	3396      	adds	r3, #150	; 0x96
    1146:	54e5      	strb	r5, [r4, r3]
	config_tcc.pins.wave_out_pin[TCC_MATCH_CAPTURE_CHANNEL_0]           = PIN_PA04F_TCC0_WO0;
    1148:	3b94      	subs	r3, #148	; 0x94
    114a:	65a3      	str	r3, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[TCC_MATCH_CAPTURE_CHANNEL_0]       = MUX_PA04F_TCC0_WO0;
    114c:	3301      	adds	r3, #1
    114e:	67a3      	str	r3, [r4, #120]	; 0x78
	stat = tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
    1150:	0022      	movs	r2, r4
    1152:	0031      	movs	r1, r6
    1154:	4809      	ldr	r0, [pc, #36]	; (117c <main+0x68>)
    1156:	4b0a      	ldr	r3, [pc, #40]	; (1180 <main+0x6c>)
    1158:	4798      	blx	r3
    115a:	4b0a      	ldr	r3, [pc, #40]	; (1184 <main+0x70>)
    115c:	7018      	strb	r0, [r3, #0]
    system_interrupt_enable_global();
	configure_tcc();
	while (1) {
		check_button_press();
    115e:	4c0a      	ldr	r4, [pc, #40]	; (1188 <main+0x74>)
    1160:	47a0      	blx	r4
    1162:	e7fd      	b.n	1160 <main+0x4c>
    1164:	00000925 	.word	0x00000925
    1168:	20000000 	.word	0x20000000
    116c:	42001400 	.word	0x42001400
    1170:	200000f0 	.word	0x200000f0
    1174:	000009ad 	.word	0x000009ad
    1178:	00000395 	.word	0x00000395
    117c:	200000b0 	.word	0x200000b0
    1180:	00000ae9 	.word	0x00000ae9
    1184:	20000068 	.word	0x20000068
    1188:	000010a1 	.word	0x000010a1

0000118c <__libc_init_array>:
    118c:	b570      	push	{r4, r5, r6, lr}
    118e:	2600      	movs	r6, #0
    1190:	4d0c      	ldr	r5, [pc, #48]	; (11c4 <__libc_init_array+0x38>)
    1192:	4c0d      	ldr	r4, [pc, #52]	; (11c8 <__libc_init_array+0x3c>)
    1194:	1b64      	subs	r4, r4, r5
    1196:	10a4      	asrs	r4, r4, #2
    1198:	42a6      	cmp	r6, r4
    119a:	d109      	bne.n	11b0 <__libc_init_array+0x24>
    119c:	2600      	movs	r6, #0
    119e:	f000 f843 	bl	1228 <_init>
    11a2:	4d0a      	ldr	r5, [pc, #40]	; (11cc <__libc_init_array+0x40>)
    11a4:	4c0a      	ldr	r4, [pc, #40]	; (11d0 <__libc_init_array+0x44>)
    11a6:	1b64      	subs	r4, r4, r5
    11a8:	10a4      	asrs	r4, r4, #2
    11aa:	42a6      	cmp	r6, r4
    11ac:	d105      	bne.n	11ba <__libc_init_array+0x2e>
    11ae:	bd70      	pop	{r4, r5, r6, pc}
    11b0:	00b3      	lsls	r3, r6, #2
    11b2:	58eb      	ldr	r3, [r5, r3]
    11b4:	4798      	blx	r3
    11b6:	3601      	adds	r6, #1
    11b8:	e7ee      	b.n	1198 <__libc_init_array+0xc>
    11ba:	00b3      	lsls	r3, r6, #2
    11bc:	58eb      	ldr	r3, [r5, r3]
    11be:	4798      	blx	r3
    11c0:	3601      	adds	r6, #1
    11c2:	e7f2      	b.n	11aa <__libc_init_array+0x1e>
    11c4:	00001234 	.word	0x00001234
    11c8:	00001234 	.word	0x00001234
    11cc:	00001234 	.word	0x00001234
    11d0:	00001238 	.word	0x00001238
    11d4:	00000484 	.word	0x00000484
    11d8:	00000464 	.word	0x00000464
    11dc:	00000464 	.word	0x00000464
    11e0:	000004f0 	.word	0x000004f0
    11e4:	00000476 	.word	0x00000476
    11e8:	00000492 	.word	0x00000492
    11ec:	00000468 	.word	0x00000468
    11f0:	000004a0 	.word	0x000004a0
    11f4:	000004e0 	.word	0x000004e0

000011f8 <_tcc_intflag>:
    11f8:	00000001 00000002 00000004 00000008     ................
    1208:	00001000 00002000 00004000 00008000     ..... ...@......
    1218:	00010000 00020000 00040000 00080000     ................

00001228 <_init>:
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    122e:	bc08      	pop	{r3}
    1230:	469e      	mov	lr, r3
    1232:	4770      	bx	lr

00001234 <__init_array_start>:
    1234:	000000b5 	.word	0x000000b5

00001238 <_fini>:
    1238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    123e:	bc08      	pop	{r3}
    1240:	469e      	mov	lr, r3
    1242:	4770      	bx	lr

00001244 <__fini_array_start>:
    1244:	0000008d 	.word	0x0000008d
