
KTD2026_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ba0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00002ba0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  20000004  00002ba4  00020004  2**2
                  ALLOC
  3 .stack        00000404  20000084  00002c24  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e0cd  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002aba  00000000  00000000  0003e152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000430  00000000  00000000  00040c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000003c8  00000000  00000000  0004103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001547c  00000000  00000000  00041404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008a1c  00000000  00000000  00056880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0007667f  00000000  00000000  0005f29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000bf4  00000000  00000000  000d591c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003db4  00000000  00000000  000d6510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 04 00 20 e5 0e 00 00 e1 0e 00 00 e1 0e 00 00     ... ............
	...
      2c:	e1 0e 00 00 00 00 00 00 00 00 00 00 e1 0e 00 00     ................
      3c:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      4c:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................
      5c:	e1 0e 00 00 e1 0e 00 00 11 09 00 00 21 09 00 00     ............!...
      6c:	31 09 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     1...............
      7c:	e1 0e 00 00 e1 0e 00 00 e1 0e 00 00 e1 0e 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000004 	.word	0x20000004
      ac:	00000000 	.word	0x00000000
      b0:	00002ba0 	.word	0x00002ba0

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000008 	.word	0x20000008
      e0:	00002ba0 	.word	0x00002ba0
      e4:	00002ba0 	.word	0x00002ba0
      e8:	00000000 	.word	0x00000000

000000ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
      ec:	4b0c      	ldr	r3, [pc, #48]	; (120 <cpu_irq_enter_critical+0x34>)
      ee:	681b      	ldr	r3, [r3, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d106      	bne.n	102 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
      f8:	2b00      	cmp	r3, #0
      fa:	d007      	beq.n	10c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      fc:	2200      	movs	r2, #0
      fe:	4b09      	ldr	r3, [pc, #36]	; (124 <cpu_irq_enter_critical+0x38>)
     100:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     102:	4a07      	ldr	r2, [pc, #28]	; (120 <cpu_irq_enter_critical+0x34>)
     104:	6813      	ldr	r3, [r2, #0]
     106:	3301      	adds	r3, #1
     108:	6013      	str	r3, [r2, #0]
}
     10a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     10c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     10e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     112:	2200      	movs	r2, #0
     114:	4b04      	ldr	r3, [pc, #16]	; (128 <cpu_irq_enter_critical+0x3c>)
     116:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     118:	3201      	adds	r2, #1
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <cpu_irq_enter_critical+0x38>)
     11c:	701a      	strb	r2, [r3, #0]
     11e:	e7f0      	b.n	102 <cpu_irq_enter_critical+0x16>
     120:	20000020 	.word	0x20000020
     124:	20000024 	.word	0x20000024
     128:	20000000 	.word	0x20000000

0000012c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     12c:	4b08      	ldr	r3, [pc, #32]	; (150 <cpu_irq_leave_critical+0x24>)
     12e:	681a      	ldr	r2, [r3, #0]
     130:	3a01      	subs	r2, #1
     132:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     134:	681b      	ldr	r3, [r3, #0]
     136:	2b00      	cmp	r3, #0
     138:	d109      	bne.n	14e <cpu_irq_leave_critical+0x22>
     13a:	4b06      	ldr	r3, [pc, #24]	; (154 <cpu_irq_leave_critical+0x28>)
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b00      	cmp	r3, #0
     140:	d005      	beq.n	14e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     142:	2201      	movs	r2, #1
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_leave_critical+0x2c>)
     146:	701a      	strb	r2, [r3, #0]
     148:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     14c:	b662      	cpsie	i
	}
}
     14e:	4770      	bx	lr
     150:	20000020 	.word	0x20000020
     154:	20000024 	.word	0x20000024
     158:	20000000 	.word	0x20000000

0000015c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     160:	ac01      	add	r4, sp, #4
     162:	2501      	movs	r5, #1
     164:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     166:	2700      	movs	r7, #0
     168:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     16a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     16c:	0021      	movs	r1, r4
     16e:	2010      	movs	r0, #16
     170:	4e06      	ldr	r6, [pc, #24]	; (18c <system_board_init+0x30>)
     172:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     174:	2280      	movs	r2, #128	; 0x80
     176:	0252      	lsls	r2, r2, #9
     178:	4b05      	ldr	r3, [pc, #20]	; (190 <system_board_init+0x34>)
     17a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     17c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     17e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     180:	0021      	movs	r1, r4
     182:	200e      	movs	r0, #14
     184:	47b0      	blx	r6
}
     186:	b003      	add	sp, #12
     188:	bdf0      	pop	{r4, r5, r6, r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00000195 	.word	0x00000195
     190:	41004400 	.word	0x41004400

00000194 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     194:	b500      	push	{lr}
     196:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     198:	ab01      	add	r3, sp, #4
     19a:	2280      	movs	r2, #128	; 0x80
     19c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     19e:	780a      	ldrb	r2, [r1, #0]
     1a0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1a2:	784a      	ldrb	r2, [r1, #1]
     1a4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1a6:	788a      	ldrb	r2, [r1, #2]
     1a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1aa:	0019      	movs	r1, r3
     1ac:	4b01      	ldr	r3, [pc, #4]	; (1b4 <port_pin_set_config+0x20>)
     1ae:	4798      	blx	r3
}
     1b0:	b003      	add	sp, #12
     1b2:	bd00      	pop	{pc}
     1b4:	00000e81 	.word	0x00000e81

000001b8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ba:	46d6      	mov	lr, sl
     1bc:	464f      	mov	r7, r9
     1be:	4646      	mov	r6, r8
     1c0:	b5c0      	push	{r6, r7, lr}
     1c2:	b08a      	sub	sp, #40	; 0x28
     1c4:	0006      	movs	r6, r0
     1c6:	000f      	movs	r7, r1
     1c8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     1ca:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1cc:	0008      	movs	r0, r1
     1ce:	4ba0      	ldr	r3, [pc, #640]	; (450 <STACK_SIZE+0x50>)
     1d0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1d2:	4aa0      	ldr	r2, [pc, #640]	; (454 <STACK_SIZE+0x54>)
     1d4:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1d6:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1d8:	2301      	movs	r3, #1
     1da:	40ab      	lsls	r3, r5
     1dc:	430b      	orrs	r3, r1
     1de:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     1e0:	a909      	add	r1, sp, #36	; 0x24
     1e2:	7b23      	ldrb	r3, [r4, #12]
     1e4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     1e6:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1e8:	b2c5      	uxtb	r5, r0
     1ea:	0028      	movs	r0, r5
     1ec:	4b9a      	ldr	r3, [pc, #616]	; (458 <STACK_SIZE+0x58>)
     1ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1f0:	0028      	movs	r0, r5
     1f2:	4b9a      	ldr	r3, [pc, #616]	; (45c <STACK_SIZE+0x5c>)
     1f4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1f6:	7b20      	ldrb	r0, [r4, #12]
     1f8:	2100      	movs	r1, #0
     1fa:	4b99      	ldr	r3, [pc, #612]	; (460 <STACK_SIZE+0x60>)
     1fc:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1fe:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     200:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     202:	079b      	lsls	r3, r3, #30
     204:	d505      	bpl.n	212 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     206:	b00a      	add	sp, #40	; 0x28
     208:	bc1c      	pop	{r2, r3, r4}
     20a:	4690      	mov	r8, r2
     20c:	4699      	mov	r9, r3
     20e:	46a2      	mov	sl, r4
     210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     212:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     214:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     216:	07db      	lsls	r3, r3, #31
     218:	d4f5      	bmi.n	206 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     21a:	6830      	ldr	r0, [r6, #0]
     21c:	4b8c      	ldr	r3, [pc, #560]	; (450 <STACK_SIZE+0x50>)
     21e:	4699      	mov	r9, r3
     220:	4798      	blx	r3
     222:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     224:	498f      	ldr	r1, [pc, #572]	; (464 <STACK_SIZE+0x64>)
     226:	4b90      	ldr	r3, [pc, #576]	; (468 <STACK_SIZE+0x68>)
     228:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     22a:	00ad      	lsls	r5, r5, #2
     22c:	4b8f      	ldr	r3, [pc, #572]	; (46c <STACK_SIZE+0x6c>)
     22e:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     230:	2300      	movs	r3, #0
     232:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     234:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     236:	2500      	movs	r5, #0
     238:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     23a:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     23c:	2225      	movs	r2, #37	; 0x25
     23e:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     240:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     242:	3314      	adds	r3, #20
     244:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     246:	6833      	ldr	r3, [r6, #0]
     248:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     24a:	0018      	movs	r0, r3
     24c:	47c8      	blx	r9
     24e:	4681      	mov	r9, r0
     250:	2380      	movs	r3, #128	; 0x80
     252:	aa08      	add	r2, sp, #32
     254:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     256:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     258:	2301      	movs	r3, #1
     25a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     25c:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     25e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     260:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     262:	2800      	cmp	r0, #0
     264:	d100      	bne.n	268 <i2c_master_init+0xb0>
     266:	e0af      	b.n	3c8 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     268:	ab08      	add	r3, sp, #32
     26a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     26c:	2302      	movs	r3, #2
     26e:	aa08      	add	r2, sp, #32
     270:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     272:	0c00      	lsrs	r0, r0, #16
     274:	b2c0      	uxtb	r0, r0
     276:	0011      	movs	r1, r2
     278:	4b7d      	ldr	r3, [pc, #500]	; (470 <STACK_SIZE+0x70>)
     27a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     27c:	2f00      	cmp	r7, #0
     27e:	d100      	bne.n	282 <i2c_master_init+0xca>
     280:	e0a7      	b.n	3d2 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     282:	ab08      	add	r3, sp, #32
     284:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     286:	2302      	movs	r3, #2
     288:	aa08      	add	r2, sp, #32
     28a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     28c:	0c3f      	lsrs	r7, r7, #16
     28e:	b2f8      	uxtb	r0, r7
     290:	0011      	movs	r1, r2
     292:	4b77      	ldr	r3, [pc, #476]	; (470 <STACK_SIZE+0x70>)
     294:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     296:	8aa3      	ldrh	r3, [r4, #20]
     298:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     29a:	8ae3      	ldrh	r3, [r4, #22]
     29c:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     29e:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2a0:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     2a2:	2b00      	cmp	r3, #0
     2a4:	d104      	bne.n	2b0 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2a6:	4b73      	ldr	r3, [pc, #460]	; (474 <STACK_SIZE+0x74>)
     2a8:	789b      	ldrb	r3, [r3, #2]
     2aa:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2ac:	0fdb      	lsrs	r3, r3, #31
     2ae:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     2b0:	68a1      	ldr	r1, [r4, #8]
     2b2:	6923      	ldr	r3, [r4, #16]
     2b4:	430b      	orrs	r3, r1
     2b6:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     2b8:	2224      	movs	r2, #36	; 0x24
     2ba:	5ca2      	ldrb	r2, [r4, r2]
     2bc:	2a00      	cmp	r2, #0
     2be:	d002      	beq.n	2c6 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2c0:	2280      	movs	r2, #128	; 0x80
     2c2:	05d2      	lsls	r2, r2, #23
     2c4:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     2c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2c8:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     2ca:	222c      	movs	r2, #44	; 0x2c
     2cc:	5ca2      	ldrb	r2, [r4, r2]
     2ce:	2a00      	cmp	r2, #0
     2d0:	d103      	bne.n	2da <i2c_master_init+0x122>
     2d2:	2280      	movs	r2, #128	; 0x80
     2d4:	0492      	lsls	r2, r2, #18
     2d6:	4291      	cmp	r1, r2
     2d8:	d102      	bne.n	2e0 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2da:	2280      	movs	r2, #128	; 0x80
     2dc:	0512      	lsls	r2, r2, #20
     2de:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     2e0:	222d      	movs	r2, #45	; 0x2d
     2e2:	5ca2      	ldrb	r2, [r4, r2]
     2e4:	2a00      	cmp	r2, #0
     2e6:	d002      	beq.n	2ee <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     2e8:	2280      	movs	r2, #128	; 0x80
     2ea:	0412      	lsls	r2, r2, #16
     2ec:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     2ee:	222e      	movs	r2, #46	; 0x2e
     2f0:	5ca2      	ldrb	r2, [r4, r2]
     2f2:	2a00      	cmp	r2, #0
     2f4:	d002      	beq.n	2fc <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     2f6:	2280      	movs	r2, #128	; 0x80
     2f8:	03d2      	lsls	r2, r2, #15
     2fa:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2fc:	4642      	mov	r2, r8
     2fe:	6812      	ldr	r2, [r2, #0]
     300:	4313      	orrs	r3, r2
     302:	4642      	mov	r2, r8
     304:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     306:	2380      	movs	r3, #128	; 0x80
     308:	005b      	lsls	r3, r3, #1
     30a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     30c:	464d      	mov	r5, r9
     30e:	350e      	adds	r5, #14
     310:	b2e8      	uxtb	r0, r5
     312:	4b59      	ldr	r3, [pc, #356]	; (478 <STACK_SIZE+0x78>)
     314:	4798      	blx	r3
     316:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     318:	23fa      	movs	r3, #250	; 0xfa
     31a:	009b      	lsls	r3, r3, #2
     31c:	6822      	ldr	r2, [r4, #0]
     31e:	435a      	muls	r2, r3
     320:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     322:	6863      	ldr	r3, [r4, #4]
     324:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     326:	4d55      	ldr	r5, [pc, #340]	; (47c <STACK_SIZE+0x7c>)
     328:	47a8      	blx	r5
     32a:	9000      	str	r0, [sp, #0]
     32c:	9101      	str	r1, [sp, #4]
     32e:	464b      	mov	r3, r9
     330:	0058      	lsls	r0, r3, #1
     332:	47a8      	blx	r5
     334:	9002      	str	r0, [sp, #8]
     336:	9103      	str	r1, [sp, #12]
     338:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     33a:	47a8      	blx	r5
     33c:	9004      	str	r0, [sp, #16]
     33e:	9105      	str	r1, [sp, #20]
     340:	4f4f      	ldr	r7, [pc, #316]	; (480 <STACK_SIZE+0x80>)
     342:	4a50      	ldr	r2, [pc, #320]	; (484 <STACK_SIZE+0x84>)
     344:	4b50      	ldr	r3, [pc, #320]	; (488 <STACK_SIZE+0x88>)
     346:	9800      	ldr	r0, [sp, #0]
     348:	9901      	ldr	r1, [sp, #4]
     34a:	47b8      	blx	r7
     34c:	0002      	movs	r2, r0
     34e:	000b      	movs	r3, r1
     350:	9804      	ldr	r0, [sp, #16]
     352:	9905      	ldr	r1, [sp, #20]
     354:	47b8      	blx	r7
     356:	4e4d      	ldr	r6, [pc, #308]	; (48c <STACK_SIZE+0x8c>)
     358:	2200      	movs	r2, #0
     35a:	4b4d      	ldr	r3, [pc, #308]	; (490 <STACK_SIZE+0x90>)
     35c:	47b0      	blx	r6
     35e:	9004      	str	r0, [sp, #16]
     360:	9105      	str	r1, [sp, #20]
     362:	4648      	mov	r0, r9
     364:	47a8      	blx	r5
     366:	0002      	movs	r2, r0
     368:	000b      	movs	r3, r1
     36a:	9804      	ldr	r0, [sp, #16]
     36c:	9905      	ldr	r1, [sp, #20]
     36e:	47b8      	blx	r7
     370:	0002      	movs	r2, r0
     372:	000b      	movs	r3, r1
     374:	4d47      	ldr	r5, [pc, #284]	; (494 <STACK_SIZE+0x94>)
     376:	9800      	ldr	r0, [sp, #0]
     378:	9901      	ldr	r1, [sp, #4]
     37a:	47a8      	blx	r5
     37c:	9a02      	ldr	r2, [sp, #8]
     37e:	9b03      	ldr	r3, [sp, #12]
     380:	47b0      	blx	r6
     382:	2200      	movs	r2, #0
     384:	4b44      	ldr	r3, [pc, #272]	; (498 <STACK_SIZE+0x98>)
     386:	47a8      	blx	r5
     388:	9a02      	ldr	r2, [sp, #8]
     38a:	9b03      	ldr	r3, [sp, #12]
     38c:	4d43      	ldr	r5, [pc, #268]	; (49c <STACK_SIZE+0x9c>)
     38e:	47a8      	blx	r5
     390:	4b43      	ldr	r3, [pc, #268]	; (4a0 <STACK_SIZE+0xa0>)
     392:	4798      	blx	r3
     394:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     396:	2380      	movs	r3, #128	; 0x80
     398:	049b      	lsls	r3, r3, #18
     39a:	68a2      	ldr	r2, [r4, #8]
     39c:	429a      	cmp	r2, r3
     39e:	d01e      	beq.n	3de <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3a0:	0003      	movs	r3, r0
     3a2:	2040      	movs	r0, #64	; 0x40
     3a4:	2dff      	cmp	r5, #255	; 0xff
     3a6:	d900      	bls.n	3aa <i2c_master_init+0x1f2>
     3a8:	e72d      	b.n	206 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     3aa:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     3ac:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3ae:	25ff      	movs	r5, #255	; 0xff
     3b0:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3b2:	0624      	lsls	r4, r4, #24
     3b4:	4325      	orrs	r5, r4
     3b6:	0400      	lsls	r0, r0, #16
     3b8:	23ff      	movs	r3, #255	; 0xff
     3ba:	041b      	lsls	r3, r3, #16
     3bc:	4018      	ands	r0, r3
     3be:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3c0:	4643      	mov	r3, r8
     3c2:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     3c4:	2000      	movs	r0, #0
     3c6:	e71e      	b.n	206 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3c8:	2100      	movs	r1, #0
     3ca:	4640      	mov	r0, r8
     3cc:	4b35      	ldr	r3, [pc, #212]	; (4a4 <STACK_SIZE+0xa4>)
     3ce:	4798      	blx	r3
     3d0:	e74a      	b.n	268 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3d2:	2101      	movs	r1, #1
     3d4:	4640      	mov	r0, r8
     3d6:	4b33      	ldr	r3, [pc, #204]	; (4a4 <STACK_SIZE+0xa4>)
     3d8:	4798      	blx	r3
     3da:	0007      	movs	r7, r0
     3dc:	e751      	b.n	282 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3de:	26fa      	movs	r6, #250	; 0xfa
     3e0:	00b6      	lsls	r6, r6, #2
     3e2:	4653      	mov	r3, sl
     3e4:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     3e6:	9800      	ldr	r0, [sp, #0]
     3e8:	9901      	ldr	r1, [sp, #4]
     3ea:	0002      	movs	r2, r0
     3ec:	000b      	movs	r3, r1
     3ee:	4c27      	ldr	r4, [pc, #156]	; (48c <STACK_SIZE+0x8c>)
     3f0:	47a0      	blx	r4
     3f2:	9000      	str	r0, [sp, #0]
     3f4:	9101      	str	r1, [sp, #4]
     3f6:	0030      	movs	r0, r6
     3f8:	4b20      	ldr	r3, [pc, #128]	; (47c <STACK_SIZE+0x7c>)
     3fa:	4798      	blx	r3
     3fc:	2200      	movs	r2, #0
     3fe:	4b2a      	ldr	r3, [pc, #168]	; (4a8 <STACK_SIZE+0xa8>)
     400:	47b8      	blx	r7
     402:	0002      	movs	r2, r0
     404:	000b      	movs	r3, r1
     406:	9800      	ldr	r0, [sp, #0]
     408:	9901      	ldr	r1, [sp, #4]
     40a:	4c24      	ldr	r4, [pc, #144]	; (49c <STACK_SIZE+0x9c>)
     40c:	47a0      	blx	r4
     40e:	2200      	movs	r2, #0
     410:	4b21      	ldr	r3, [pc, #132]	; (498 <STACK_SIZE+0x98>)
     412:	4c20      	ldr	r4, [pc, #128]	; (494 <STACK_SIZE+0x94>)
     414:	47a0      	blx	r4
     416:	4b22      	ldr	r3, [pc, #136]	; (4a0 <STACK_SIZE+0xa0>)
     418:	4798      	blx	r3
     41a:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     41c:	d00c      	beq.n	438 <STACK_SIZE+0x38>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     41e:	0031      	movs	r1, r6
     420:	9807      	ldr	r0, [sp, #28]
     422:	4b22      	ldr	r3, [pc, #136]	; (4ac <STACK_SIZE+0xac>)
     424:	4798      	blx	r3
     426:	3802      	subs	r0, #2
     428:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     42a:	002b      	movs	r3, r5
     42c:	2dff      	cmp	r5, #255	; 0xff
     42e:	d80c      	bhi.n	44a <STACK_SIZE+0x4a>
     430:	28ff      	cmp	r0, #255	; 0xff
     432:	d9bc      	bls.n	3ae <i2c_master_init+0x1f6>
     434:	2040      	movs	r0, #64	; 0x40
     436:	e6e6      	b.n	206 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     438:	0071      	lsls	r1, r6, #1
     43a:	1e48      	subs	r0, r1, #1
     43c:	9b07      	ldr	r3, [sp, #28]
     43e:	469c      	mov	ip, r3
     440:	4460      	add	r0, ip
     442:	4b1a      	ldr	r3, [pc, #104]	; (4ac <STACK_SIZE+0xac>)
     444:	4798      	blx	r3
     446:	3801      	subs	r0, #1
     448:	e7ef      	b.n	42a <STACK_SIZE+0x2a>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     44a:	2040      	movs	r0, #64	; 0x40
     44c:	e6db      	b.n	206 <i2c_master_init+0x4e>
     44e:	46c0      	nop			; (mov r8, r8)
     450:	00000879 	.word	0x00000879
     454:	40000400 	.word	0x40000400
     458:	00000d89 	.word	0x00000d89
     45c:	00000cfd 	.word	0x00000cfd
     460:	0000076d 	.word	0x0000076d
     464:	00000581 	.word	0x00000581
     468:	000008b5 	.word	0x000008b5
     46c:	20000050 	.word	0x20000050
     470:	00000e81 	.word	0x00000e81
     474:	41002000 	.word	0x41002000
     478:	00000da5 	.word	0x00000da5
     47c:	000029b9 	.word	0x000029b9
     480:	00001e25 	.word	0x00001e25
     484:	e826d695 	.word	0xe826d695
     488:	3e112e0b 	.word	0x3e112e0b
     48c:	0000119d 	.word	0x0000119d
     490:	40240000 	.word	0x40240000
     494:	00002325 	.word	0x00002325
     498:	3ff00000 	.word	0x3ff00000
     49c:	000017bd 	.word	0x000017bd
     4a0:	00002951 	.word	0x00002951
     4a4:	000007b9 	.word	0x000007b9
     4a8:	40080000 	.word	0x40080000
     4ac:	00001085 	.word	0x00001085

000004b0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     4b0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     4b2:	2207      	movs	r2, #7
     4b4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     4b6:	421a      	tst	r2, r3
     4b8:	d1fc      	bne.n	4b4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     4ba:	4770      	bx	lr

000004bc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     4bc:	b570      	push	{r4, r5, r6, lr}
     4be:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4c0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4c2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     4c4:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     4c6:	8b83      	ldrh	r3, [r0, #28]
     4c8:	1aed      	subs	r5, r5, r3
     4ca:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     4cc:	8b83      	ldrh	r3, [r0, #28]
     4ce:	3b01      	subs	r3, #1
     4d0:	b29b      	uxth	r3, r3
     4d2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     4d4:	0113      	lsls	r3, r2, #4
     4d6:	d51d      	bpl.n	514 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     4d8:	7ac3      	ldrb	r3, [r0, #11]
     4da:	2b00      	cmp	r3, #0
     4dc:	d003      	beq.n	4e6 <_i2c_master_read+0x2a>
     4de:	8b83      	ldrh	r3, [r0, #28]
     4e0:	b29b      	uxth	r3, r3
     4e2:	2b01      	cmp	r3, #1
     4e4:	d010      	beq.n	508 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     4e6:	8ba3      	ldrh	r3, [r4, #28]
     4e8:	b29b      	uxth	r3, r3
     4ea:	2b00      	cmp	r3, #0
     4ec:	d102      	bne.n	4f4 <_i2c_master_read+0x38>
		if (module->send_stop) {
     4ee:	7aa3      	ldrb	r3, [r4, #10]
     4f0:	2b00      	cmp	r3, #0
     4f2:	d11c      	bne.n	52e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     4f4:	0020      	movs	r0, r4
     4f6:	4b12      	ldr	r3, [pc, #72]	; (540 <_i2c_master_read+0x84>)
     4f8:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     4fa:	6a23      	ldr	r3, [r4, #32]
     4fc:	195d      	adds	r5, r3, r5
     4fe:	2328      	movs	r3, #40	; 0x28
     500:	5cf3      	ldrb	r3, [r6, r3]
     502:	b2db      	uxtb	r3, r3
     504:	702b      	strb	r3, [r5, #0]
}
     506:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     508:	6872      	ldr	r2, [r6, #4]
     50a:	2380      	movs	r3, #128	; 0x80
     50c:	02db      	lsls	r3, r3, #11
     50e:	4313      	orrs	r3, r2
     510:	6073      	str	r3, [r6, #4]
     512:	e7e8      	b.n	4e6 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     514:	7ac3      	ldrb	r3, [r0, #11]
     516:	2b00      	cmp	r3, #0
     518:	d0e5      	beq.n	4e6 <_i2c_master_read+0x2a>
     51a:	8b83      	ldrh	r3, [r0, #28]
     51c:	b29b      	uxth	r3, r3
     51e:	2b00      	cmp	r3, #0
     520:	d1e1      	bne.n	4e6 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     522:	6872      	ldr	r2, [r6, #4]
     524:	2380      	movs	r3, #128	; 0x80
     526:	02db      	lsls	r3, r3, #11
     528:	4313      	orrs	r3, r2
     52a:	6073      	str	r3, [r6, #4]
     52c:	e7db      	b.n	4e6 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     52e:	0020      	movs	r0, r4
     530:	4b03      	ldr	r3, [pc, #12]	; (540 <_i2c_master_read+0x84>)
     532:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     534:	6872      	ldr	r2, [r6, #4]
     536:	23c0      	movs	r3, #192	; 0xc0
     538:	029b      	lsls	r3, r3, #10
     53a:	4313      	orrs	r3, r2
     53c:	6073      	str	r3, [r6, #4]
     53e:	e7d9      	b.n	4f4 <_i2c_master_read+0x38>
     540:	000004b1 	.word	0x000004b1

00000544 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     544:	b570      	push	{r4, r5, r6, lr}
     546:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     548:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     54a:	8b6b      	ldrh	r3, [r5, #26]
     54c:	075b      	lsls	r3, r3, #29
     54e:	d503      	bpl.n	558 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     550:	221e      	movs	r2, #30
     552:	2325      	movs	r3, #37	; 0x25
     554:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     556:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     558:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     55a:	8b83      	ldrh	r3, [r0, #28]
     55c:	1af6      	subs	r6, r6, r3
     55e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     560:	8b83      	ldrh	r3, [r0, #28]
     562:	3b01      	subs	r3, #1
     564:	b29b      	uxth	r3, r3
     566:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     568:	4b04      	ldr	r3, [pc, #16]	; (57c <_i2c_master_write+0x38>)
     56a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     56c:	6a23      	ldr	r3, [r4, #32]
     56e:	199e      	adds	r6, r3, r6
     570:	7833      	ldrb	r3, [r6, #0]
     572:	b2db      	uxtb	r3, r3
     574:	2228      	movs	r2, #40	; 0x28
     576:	54ab      	strb	r3, [r5, r2]
     578:	e7ed      	b.n	556 <_i2c_master_write+0x12>
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	000004b1 	.word	0x000004b1

00000580 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     580:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     582:	0080      	lsls	r0, r0, #2
     584:	4b75      	ldr	r3, [pc, #468]	; (75c <_i2c_master_interrupt_handler+0x1dc>)
     586:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     588:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     58a:	682b      	ldr	r3, [r5, #0]
     58c:	011b      	lsls	r3, r3, #4
     58e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     590:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     592:	7e26      	ldrb	r6, [r4, #24]
     594:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     596:	8b63      	ldrh	r3, [r4, #26]
     598:	b29b      	uxth	r3, r3
     59a:	2b00      	cmp	r3, #0
     59c:	d103      	bne.n	5a6 <_i2c_master_interrupt_handler+0x26>
     59e:	8ba3      	ldrh	r3, [r4, #28]
     5a0:	b29b      	uxth	r3, r3
     5a2:	2b00      	cmp	r3, #0
     5a4:	d123      	bne.n	5ee <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5a6:	8b63      	ldrh	r3, [r4, #26]
     5a8:	b29b      	uxth	r3, r3
     5aa:	2b00      	cmp	r3, #0
     5ac:	d008      	beq.n	5c0 <_i2c_master_interrupt_handler+0x40>
     5ae:	8ba3      	ldrh	r3, [r4, #28]
     5b0:	b29b      	uxth	r3, r3
     5b2:	2b00      	cmp	r3, #0
     5b4:	d104      	bne.n	5c0 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     5b6:	3325      	adds	r3, #37	; 0x25
     5b8:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5ba:	2b05      	cmp	r3, #5
     5bc:	d100      	bne.n	5c0 <_i2c_master_interrupt_handler+0x40>
     5be:	e06d      	b.n	69c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     5c0:	8b63      	ldrh	r3, [r4, #26]
     5c2:	b29b      	uxth	r3, r3
     5c4:	2b00      	cmp	r3, #0
     5c6:	d024      	beq.n	612 <_i2c_master_interrupt_handler+0x92>
     5c8:	8ba3      	ldrh	r3, [r4, #28]
     5ca:	b29b      	uxth	r3, r3
     5cc:	2b00      	cmp	r3, #0
     5ce:	d020      	beq.n	612 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     5d0:	8b6b      	ldrh	r3, [r5, #26]
     5d2:	069b      	lsls	r3, r3, #26
     5d4:	d500      	bpl.n	5d8 <_i2c_master_interrupt_handler+0x58>
     5d6:	e081      	b.n	6dc <_i2c_master_interrupt_handler+0x15c>
     5d8:	2a00      	cmp	r2, #0
     5da:	d004      	beq.n	5e6 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     5dc:	8ba3      	ldrh	r3, [r4, #28]
     5de:	b29b      	uxth	r3, r3
     5e0:	2b01      	cmp	r3, #1
     5e2:	d100      	bne.n	5e6 <_i2c_master_interrupt_handler+0x66>
     5e4:	e07a      	b.n	6dc <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     5e6:	2241      	movs	r2, #65	; 0x41
     5e8:	2325      	movs	r3, #37	; 0x25
     5ea:	54e2      	strb	r2, [r4, r3]
     5ec:	e011      	b.n	612 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     5ee:	7e2b      	ldrb	r3, [r5, #24]
     5f0:	07db      	lsls	r3, r3, #31
     5f2:	d507      	bpl.n	604 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     5f4:	2301      	movs	r3, #1
     5f6:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     5f8:	8b6b      	ldrh	r3, [r5, #26]
     5fa:	079b      	lsls	r3, r3, #30
     5fc:	d52e      	bpl.n	65c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     5fe:	2241      	movs	r2, #65	; 0x41
     600:	2325      	movs	r3, #37	; 0x25
     602:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     604:	8ba3      	ldrh	r3, [r4, #28]
     606:	b29b      	uxth	r3, r3
     608:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     60a:	2325      	movs	r3, #37	; 0x25
     60c:	5ce3      	ldrb	r3, [r4, r3]
     60e:	2b05      	cmp	r3, #5
     610:	d038      	beq.n	684 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     612:	8b63      	ldrh	r3, [r4, #26]
     614:	b29b      	uxth	r3, r3
     616:	2b00      	cmp	r3, #0
     618:	d007      	beq.n	62a <_i2c_master_interrupt_handler+0xaa>
     61a:	8ba3      	ldrh	r3, [r4, #28]
     61c:	b29b      	uxth	r3, r3
     61e:	2b00      	cmp	r3, #0
     620:	d103      	bne.n	62a <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     622:	3325      	adds	r3, #37	; 0x25
     624:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     626:	2b05      	cmp	r3, #5
     628:	d064      	beq.n	6f4 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     62a:	2325      	movs	r3, #37	; 0x25
     62c:	5ce3      	ldrb	r3, [r4, r3]
     62e:	2b05      	cmp	r3, #5
     630:	d013      	beq.n	65a <_i2c_master_interrupt_handler+0xda>
     632:	2325      	movs	r3, #37	; 0x25
     634:	5ce3      	ldrb	r3, [r4, r3]
     636:	2b00      	cmp	r3, #0
     638:	d00f      	beq.n	65a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     63a:	2303      	movs	r3, #3
     63c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     63e:	2300      	movs	r3, #0
     640:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     642:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     644:	3325      	adds	r3, #37	; 0x25
     646:	5ce3      	ldrb	r3, [r4, r3]
     648:	2b41      	cmp	r3, #65	; 0x41
     64a:	d003      	beq.n	654 <_i2c_master_interrupt_handler+0xd4>
     64c:	7aa3      	ldrb	r3, [r4, #10]
     64e:	2b00      	cmp	r3, #0
     650:	d000      	beq.n	654 <_i2c_master_interrupt_handler+0xd4>
     652:	e075      	b.n	740 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     654:	0773      	lsls	r3, r6, #29
     656:	d500      	bpl.n	65a <_i2c_master_interrupt_handler+0xda>
     658:	e07b      	b.n	752 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     65a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     65c:	8b6b      	ldrh	r3, [r5, #26]
     65e:	075b      	lsls	r3, r3, #29
     660:	d5d0      	bpl.n	604 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     662:	2218      	movs	r2, #24
     664:	2325      	movs	r3, #37	; 0x25
     666:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     668:	2300      	movs	r3, #0
     66a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     66c:	7aa3      	ldrb	r3, [r4, #10]
     66e:	2b00      	cmp	r3, #0
     670:	d0c8      	beq.n	604 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     672:	0020      	movs	r0, r4
     674:	4b3a      	ldr	r3, [pc, #232]	; (760 <_i2c_master_interrupt_handler+0x1e0>)
     676:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     678:	686a      	ldr	r2, [r5, #4]
     67a:	23c0      	movs	r3, #192	; 0xc0
     67c:	029b      	lsls	r3, r3, #10
     67e:	4313      	orrs	r3, r2
     680:	606b      	str	r3, [r5, #4]
     682:	e7bf      	b.n	604 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     684:	331f      	adds	r3, #31
     686:	5ce3      	ldrb	r3, [r4, r3]
     688:	2b00      	cmp	r3, #0
     68a:	d003      	beq.n	694 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     68c:	0020      	movs	r0, r4
     68e:	4b35      	ldr	r3, [pc, #212]	; (764 <_i2c_master_interrupt_handler+0x1e4>)
     690:	4798      	blx	r3
     692:	e7be      	b.n	612 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     694:	0020      	movs	r0, r4
     696:	4b34      	ldr	r3, [pc, #208]	; (768 <_i2c_master_interrupt_handler+0x1e8>)
     698:	4798      	blx	r3
     69a:	e7ba      	b.n	612 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     69c:	331f      	adds	r3, #31
     69e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     6a0:	2b00      	cmp	r3, #0
     6a2:	d000      	beq.n	6a6 <_i2c_master_interrupt_handler+0x126>
     6a4:	e78c      	b.n	5c0 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     6a6:	3303      	adds	r3, #3
     6a8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     6aa:	2300      	movs	r3, #0
     6ac:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     6ae:	3325      	adds	r3, #37	; 0x25
     6b0:	2200      	movs	r2, #0
     6b2:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     6b4:	7aa3      	ldrb	r3, [r4, #10]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d107      	bne.n	6ca <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     6ba:	2301      	movs	r3, #1
     6bc:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     6be:	07f3      	lsls	r3, r6, #31
     6c0:	d5a7      	bpl.n	612 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     6c2:	68e3      	ldr	r3, [r4, #12]
     6c4:	0020      	movs	r0, r4
     6c6:	4798      	blx	r3
     6c8:	e7a3      	b.n	612 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     6ca:	0020      	movs	r0, r4
     6cc:	4b24      	ldr	r3, [pc, #144]	; (760 <_i2c_master_interrupt_handler+0x1e0>)
     6ce:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6d0:	686a      	ldr	r2, [r5, #4]
     6d2:	23c0      	movs	r3, #192	; 0xc0
     6d4:	029b      	lsls	r3, r3, #10
     6d6:	4313      	orrs	r3, r2
     6d8:	606b      	str	r3, [r5, #4]
     6da:	e7f0      	b.n	6be <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     6dc:	2324      	movs	r3, #36	; 0x24
     6de:	5ce3      	ldrb	r3, [r4, r3]
     6e0:	2b00      	cmp	r3, #0
     6e2:	d103      	bne.n	6ec <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     6e4:	0020      	movs	r0, r4
     6e6:	4b20      	ldr	r3, [pc, #128]	; (768 <_i2c_master_interrupt_handler+0x1e8>)
     6e8:	4798      	blx	r3
     6ea:	e792      	b.n	612 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     6ec:	0020      	movs	r0, r4
     6ee:	4b1d      	ldr	r3, [pc, #116]	; (764 <_i2c_master_interrupt_handler+0x1e4>)
     6f0:	4798      	blx	r3
     6f2:	e78e      	b.n	612 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     6f4:	331f      	adds	r3, #31
     6f6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     6f8:	2b01      	cmp	r3, #1
     6fa:	d196      	bne.n	62a <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     6fc:	7e2b      	ldrb	r3, [r5, #24]
     6fe:	079b      	lsls	r3, r3, #30
     700:	d501      	bpl.n	706 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     702:	2302      	movs	r3, #2
     704:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     706:	2303      	movs	r3, #3
     708:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     70a:	2300      	movs	r3, #0
     70c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     70e:	3325      	adds	r3, #37	; 0x25
     710:	2200      	movs	r2, #0
     712:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     714:	07b3      	lsls	r3, r6, #30
     716:	d503      	bpl.n	720 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     718:	2324      	movs	r3, #36	; 0x24
     71a:	5ce3      	ldrb	r3, [r4, r3]
     71c:	2b01      	cmp	r3, #1
     71e:	d00b      	beq.n	738 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     720:	07f3      	lsls	r3, r6, #31
     722:	d400      	bmi.n	726 <_i2c_master_interrupt_handler+0x1a6>
     724:	e781      	b.n	62a <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     726:	2324      	movs	r3, #36	; 0x24
     728:	5ce3      	ldrb	r3, [r4, r3]
     72a:	2b00      	cmp	r3, #0
     72c:	d000      	beq.n	730 <_i2c_master_interrupt_handler+0x1b0>
     72e:	e77c      	b.n	62a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     730:	68e3      	ldr	r3, [r4, #12]
     732:	0020      	movs	r0, r4
     734:	4798      	blx	r3
     736:	e778      	b.n	62a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     738:	6923      	ldr	r3, [r4, #16]
     73a:	0020      	movs	r0, r4
     73c:	4798      	blx	r3
     73e:	e774      	b.n	62a <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     740:	0020      	movs	r0, r4
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <_i2c_master_interrupt_handler+0x1e0>)
     744:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     746:	686a      	ldr	r2, [r5, #4]
     748:	23e0      	movs	r3, #224	; 0xe0
     74a:	02db      	lsls	r3, r3, #11
     74c:	4313      	orrs	r3, r2
     74e:	606b      	str	r3, [r5, #4]
     750:	e780      	b.n	654 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     752:	6963      	ldr	r3, [r4, #20]
     754:	0020      	movs	r0, r4
     756:	4798      	blx	r3
}
     758:	e77f      	b.n	65a <_i2c_master_interrupt_handler+0xda>
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	20000050 	.word	0x20000050
     760:	000004b1 	.word	0x000004b1
     764:	000004bd 	.word	0x000004bd
     768:	00000545 	.word	0x00000545

0000076c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     76c:	b510      	push	{r4, lr}
     76e:	b082      	sub	sp, #8
     770:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     772:	4b0e      	ldr	r3, [pc, #56]	; (7ac <sercom_set_gclk_generator+0x40>)
     774:	781b      	ldrb	r3, [r3, #0]
     776:	2b00      	cmp	r3, #0
     778:	d007      	beq.n	78a <sercom_set_gclk_generator+0x1e>
     77a:	2900      	cmp	r1, #0
     77c:	d105      	bne.n	78a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     77e:	4b0b      	ldr	r3, [pc, #44]	; (7ac <sercom_set_gclk_generator+0x40>)
     780:	785b      	ldrb	r3, [r3, #1]
     782:	4283      	cmp	r3, r0
     784:	d010      	beq.n	7a8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     786:	201d      	movs	r0, #29
     788:	e00c      	b.n	7a4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     78a:	a901      	add	r1, sp, #4
     78c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     78e:	200d      	movs	r0, #13
     790:	4b07      	ldr	r3, [pc, #28]	; (7b0 <sercom_set_gclk_generator+0x44>)
     792:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     794:	200d      	movs	r0, #13
     796:	4b07      	ldr	r3, [pc, #28]	; (7b4 <sercom_set_gclk_generator+0x48>)
     798:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     79a:	4b04      	ldr	r3, [pc, #16]	; (7ac <sercom_set_gclk_generator+0x40>)
     79c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     79e:	2201      	movs	r2, #1
     7a0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     7a2:	2000      	movs	r0, #0
}
     7a4:	b002      	add	sp, #8
     7a6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     7a8:	2000      	movs	r0, #0
     7aa:	e7fb      	b.n	7a4 <sercom_set_gclk_generator+0x38>
     7ac:	20000028 	.word	0x20000028
     7b0:	00000d89 	.word	0x00000d89
     7b4:	00000cfd 	.word	0x00000cfd

000007b8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7b8:	4b20      	ldr	r3, [pc, #128]	; (83c <_sercom_get_default_pad+0x84>)
     7ba:	4298      	cmp	r0, r3
     7bc:	d017      	beq.n	7ee <_sercom_get_default_pad+0x36>
     7be:	4b20      	ldr	r3, [pc, #128]	; (840 <_sercom_get_default_pad+0x88>)
     7c0:	4298      	cmp	r0, r3
     7c2:	d024      	beq.n	80e <_sercom_get_default_pad+0x56>
     7c4:	4b1f      	ldr	r3, [pc, #124]	; (844 <_sercom_get_default_pad+0x8c>)
     7c6:	4298      	cmp	r0, r3
     7c8:	d001      	beq.n	7ce <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     7ca:	2000      	movs	r0, #0
}
     7cc:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ce:	2901      	cmp	r1, #1
     7d0:	d007      	beq.n	7e2 <_sercom_get_default_pad+0x2a>
     7d2:	2900      	cmp	r1, #0
     7d4:	d02b      	beq.n	82e <_sercom_get_default_pad+0x76>
     7d6:	2902      	cmp	r1, #2
     7d8:	d005      	beq.n	7e6 <_sercom_get_default_pad+0x2e>
     7da:	2903      	cmp	r1, #3
     7dc:	d005      	beq.n	7ea <_sercom_get_default_pad+0x32>
	return 0;
     7de:	2000      	movs	r0, #0
     7e0:	e7f4      	b.n	7cc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7e2:	4819      	ldr	r0, [pc, #100]	; (848 <_sercom_get_default_pad+0x90>)
     7e4:	e7f2      	b.n	7cc <_sercom_get_default_pad+0x14>
     7e6:	4819      	ldr	r0, [pc, #100]	; (84c <_sercom_get_default_pad+0x94>)
     7e8:	e7f0      	b.n	7cc <_sercom_get_default_pad+0x14>
     7ea:	4819      	ldr	r0, [pc, #100]	; (850 <_sercom_get_default_pad+0x98>)
     7ec:	e7ee      	b.n	7cc <_sercom_get_default_pad+0x14>
     7ee:	2901      	cmp	r1, #1
     7f0:	d007      	beq.n	802 <_sercom_get_default_pad+0x4a>
     7f2:	2900      	cmp	r1, #0
     7f4:	d01d      	beq.n	832 <_sercom_get_default_pad+0x7a>
     7f6:	2902      	cmp	r1, #2
     7f8:	d005      	beq.n	806 <_sercom_get_default_pad+0x4e>
     7fa:	2903      	cmp	r1, #3
     7fc:	d005      	beq.n	80a <_sercom_get_default_pad+0x52>
	return 0;
     7fe:	2000      	movs	r0, #0
     800:	e7e4      	b.n	7cc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     802:	4814      	ldr	r0, [pc, #80]	; (854 <_sercom_get_default_pad+0x9c>)
     804:	e7e2      	b.n	7cc <_sercom_get_default_pad+0x14>
     806:	4814      	ldr	r0, [pc, #80]	; (858 <_sercom_get_default_pad+0xa0>)
     808:	e7e0      	b.n	7cc <_sercom_get_default_pad+0x14>
     80a:	4814      	ldr	r0, [pc, #80]	; (85c <_sercom_get_default_pad+0xa4>)
     80c:	e7de      	b.n	7cc <_sercom_get_default_pad+0x14>
     80e:	2901      	cmp	r1, #1
     810:	d007      	beq.n	822 <_sercom_get_default_pad+0x6a>
     812:	2900      	cmp	r1, #0
     814:	d00f      	beq.n	836 <_sercom_get_default_pad+0x7e>
     816:	2902      	cmp	r1, #2
     818:	d005      	beq.n	826 <_sercom_get_default_pad+0x6e>
     81a:	2903      	cmp	r1, #3
     81c:	d005      	beq.n	82a <_sercom_get_default_pad+0x72>
	return 0;
     81e:	2000      	movs	r0, #0
     820:	e7d4      	b.n	7cc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     822:	480f      	ldr	r0, [pc, #60]	; (860 <_sercom_get_default_pad+0xa8>)
     824:	e7d2      	b.n	7cc <_sercom_get_default_pad+0x14>
     826:	480f      	ldr	r0, [pc, #60]	; (864 <_sercom_get_default_pad+0xac>)
     828:	e7d0      	b.n	7cc <_sercom_get_default_pad+0x14>
     82a:	480f      	ldr	r0, [pc, #60]	; (868 <_sercom_get_default_pad+0xb0>)
     82c:	e7ce      	b.n	7cc <_sercom_get_default_pad+0x14>
     82e:	480f      	ldr	r0, [pc, #60]	; (86c <_sercom_get_default_pad+0xb4>)
     830:	e7cc      	b.n	7cc <_sercom_get_default_pad+0x14>
     832:	480f      	ldr	r0, [pc, #60]	; (870 <_sercom_get_default_pad+0xb8>)
     834:	e7ca      	b.n	7cc <_sercom_get_default_pad+0x14>
     836:	480f      	ldr	r0, [pc, #60]	; (874 <_sercom_get_default_pad+0xbc>)
     838:	e7c8      	b.n	7cc <_sercom_get_default_pad+0x14>
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	42000c00 	.word	0x42000c00
     840:	42001000 	.word	0x42001000
     844:	42000800 	.word	0x42000800
     848:	00050003 	.word	0x00050003
     84c:	00060003 	.word	0x00060003
     850:	00070003 	.word	0x00070003
     854:	00170002 	.word	0x00170002
     858:	001e0003 	.word	0x001e0003
     85c:	001f0003 	.word	0x001f0003
     860:	00170003 	.word	0x00170003
     864:	00100003 	.word	0x00100003
     868:	00190003 	.word	0x00190003
     86c:	00040003 	.word	0x00040003
     870:	00160002 	.word	0x00160002
     874:	00160003 	.word	0x00160003

00000878 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     878:	b530      	push	{r4, r5, lr}
     87a:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     87c:	aa01      	add	r2, sp, #4
     87e:	4b0b      	ldr	r3, [pc, #44]	; (8ac <_sercom_get_sercom_inst_index+0x34>)
     880:	cb32      	ldmia	r3!, {r1, r4, r5}
     882:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     884:	0003      	movs	r3, r0
     886:	9a01      	ldr	r2, [sp, #4]
     888:	4282      	cmp	r2, r0
     88a:	d00c      	beq.n	8a6 <_sercom_get_sercom_inst_index+0x2e>
     88c:	9a02      	ldr	r2, [sp, #8]
     88e:	4282      	cmp	r2, r0
     890:	d007      	beq.n	8a2 <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     892:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     894:	9a03      	ldr	r2, [sp, #12]
     896:	429a      	cmp	r2, r3
     898:	d001      	beq.n	89e <_sercom_get_sercom_inst_index+0x26>
}
     89a:	b005      	add	sp, #20
     89c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     89e:	3002      	adds	r0, #2
     8a0:	e002      	b.n	8a8 <_sercom_get_sercom_inst_index+0x30>
     8a2:	2001      	movs	r0, #1
     8a4:	e000      	b.n	8a8 <_sercom_get_sercom_inst_index+0x30>
     8a6:	2000      	movs	r0, #0
			return i;
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	e7f6      	b.n	89a <_sercom_get_sercom_inst_index+0x22>
     8ac:	00002aac 	.word	0x00002aac

000008b0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     8b0:	4770      	bx	lr
	...

000008b4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     8b4:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     8b6:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <_sercom_set_handler+0x2c>)
     8b8:	781b      	ldrb	r3, [r3, #0]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d10c      	bne.n	8d8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8be:	4c09      	ldr	r4, [pc, #36]	; (8e4 <_sercom_set_handler+0x30>)
     8c0:	4d09      	ldr	r5, [pc, #36]	; (8e8 <_sercom_set_handler+0x34>)
     8c2:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     8c4:	4b09      	ldr	r3, [pc, #36]	; (8ec <_sercom_set_handler+0x38>)
     8c6:	2200      	movs	r2, #0
     8c8:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8ca:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     8cc:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8ce:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     8d0:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
     8d2:	3201      	adds	r2, #1
     8d4:	4b02      	ldr	r3, [pc, #8]	; (8e0 <_sercom_set_handler+0x2c>)
     8d6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8d8:	0080      	lsls	r0, r0, #2
     8da:	4b02      	ldr	r3, [pc, #8]	; (8e4 <_sercom_set_handler+0x30>)
     8dc:	50c1      	str	r1, [r0, r3]
}
     8de:	bd30      	pop	{r4, r5, pc}
     8e0:	2000002a 	.word	0x2000002a
     8e4:	2000002c 	.word	0x2000002c
     8e8:	000008b1 	.word	0x000008b1
     8ec:	20000050 	.word	0x20000050

000008f0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     8f0:	b510      	push	{r4, lr}
     8f2:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     8f4:	ac01      	add	r4, sp, #4
     8f6:	2309      	movs	r3, #9
     8f8:	7023      	strb	r3, [r4, #0]
     8fa:	3301      	adds	r3, #1
     8fc:	7063      	strb	r3, [r4, #1]
     8fe:	3301      	adds	r3, #1
     900:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     902:	4b02      	ldr	r3, [pc, #8]	; (90c <_sercom_get_interrupt_vector+0x1c>)
     904:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     906:	5620      	ldrsb	r0, [r4, r0]
}
     908:	b002      	add	sp, #8
     90a:	bd10      	pop	{r4, pc}
     90c:	00000879 	.word	0x00000879

00000910 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     910:	b510      	push	{r4, lr}
     912:	4b02      	ldr	r3, [pc, #8]	; (91c <SERCOM0_Handler+0xc>)
     914:	681b      	ldr	r3, [r3, #0]
     916:	2000      	movs	r0, #0
     918:	4798      	blx	r3
     91a:	bd10      	pop	{r4, pc}
     91c:	2000002c 	.word	0x2000002c

00000920 <SERCOM1_Handler>:
     920:	b510      	push	{r4, lr}
     922:	4b02      	ldr	r3, [pc, #8]	; (92c <SERCOM1_Handler+0xc>)
     924:	685b      	ldr	r3, [r3, #4]
     926:	2001      	movs	r0, #1
     928:	4798      	blx	r3
     92a:	bd10      	pop	{r4, pc}
     92c:	2000002c 	.word	0x2000002c

00000930 <SERCOM2_Handler>:
     930:	b510      	push	{r4, lr}
     932:	4b02      	ldr	r3, [pc, #8]	; (93c <SERCOM2_Handler+0xc>)
     934:	689b      	ldr	r3, [r3, #8]
     936:	2002      	movs	r0, #2
     938:	4798      	blx	r3
     93a:	bd10      	pop	{r4, pc}
     93c:	2000002c 	.word	0x2000002c

00000940 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     940:	b510      	push	{r4, lr}
	switch (clock_source) {
     942:	2808      	cmp	r0, #8
     944:	d803      	bhi.n	94e <system_clock_source_get_hz+0xe>
     946:	0080      	lsls	r0, r0, #2
     948:	4b1c      	ldr	r3, [pc, #112]	; (9bc <system_clock_source_get_hz+0x7c>)
     94a:	581b      	ldr	r3, [r3, r0]
     94c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     94e:	2000      	movs	r0, #0
     950:	e032      	b.n	9b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     952:	4b1b      	ldr	r3, [pc, #108]	; (9c0 <system_clock_source_get_hz+0x80>)
     954:	6918      	ldr	r0, [r3, #16]
     956:	e02f      	b.n	9b8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     958:	4b1a      	ldr	r3, [pc, #104]	; (9c4 <system_clock_source_get_hz+0x84>)
     95a:	6a1b      	ldr	r3, [r3, #32]
     95c:	059b      	lsls	r3, r3, #22
     95e:	0f9b      	lsrs	r3, r3, #30
     960:	4819      	ldr	r0, [pc, #100]	; (9c8 <system_clock_source_get_hz+0x88>)
     962:	40d8      	lsrs	r0, r3
     964:	e028      	b.n	9b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     966:	4b16      	ldr	r3, [pc, #88]	; (9c0 <system_clock_source_get_hz+0x80>)
     968:	6958      	ldr	r0, [r3, #20]
     96a:	e025      	b.n	9b8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     96c:	4b14      	ldr	r3, [pc, #80]	; (9c0 <system_clock_source_get_hz+0x80>)
     96e:	681b      	ldr	r3, [r3, #0]
			return 0;
     970:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     972:	079b      	lsls	r3, r3, #30
     974:	d520      	bpl.n	9b8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     976:	4913      	ldr	r1, [pc, #76]	; (9c4 <system_clock_source_get_hz+0x84>)
     978:	2210      	movs	r2, #16
     97a:	68cb      	ldr	r3, [r1, #12]
     97c:	421a      	tst	r2, r3
     97e:	d0fc      	beq.n	97a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     980:	4b0f      	ldr	r3, [pc, #60]	; (9c0 <system_clock_source_get_hz+0x80>)
     982:	681a      	ldr	r2, [r3, #0]
     984:	2324      	movs	r3, #36	; 0x24
     986:	4013      	ands	r3, r2
     988:	2b04      	cmp	r3, #4
     98a:	d001      	beq.n	990 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     98c:	480f      	ldr	r0, [pc, #60]	; (9cc <system_clock_source_get_hz+0x8c>)
     98e:	e013      	b.n	9b8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     990:	2000      	movs	r0, #0
     992:	4b0f      	ldr	r3, [pc, #60]	; (9d0 <system_clock_source_get_hz+0x90>)
     994:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     996:	4b0a      	ldr	r3, [pc, #40]	; (9c0 <system_clock_source_get_hz+0x80>)
     998:	689b      	ldr	r3, [r3, #8]
     99a:	041b      	lsls	r3, r3, #16
     99c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     99e:	4358      	muls	r0, r3
     9a0:	e00a      	b.n	9b8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     9a2:	2350      	movs	r3, #80	; 0x50
     9a4:	4a07      	ldr	r2, [pc, #28]	; (9c4 <system_clock_source_get_hz+0x84>)
     9a6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     9a8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     9aa:	075b      	lsls	r3, r3, #29
     9ac:	d504      	bpl.n	9b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <system_clock_source_get_hz+0x80>)
     9b0:	68d8      	ldr	r0, [r3, #12]
     9b2:	e001      	b.n	9b8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     9b4:	2080      	movs	r0, #128	; 0x80
     9b6:	0200      	lsls	r0, r0, #8
	}
}
     9b8:	bd10      	pop	{r4, pc}
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	00002ab8 	.word	0x00002ab8
     9c0:	20000038 	.word	0x20000038
     9c4:	40000800 	.word	0x40000800
     9c8:	007a1200 	.word	0x007a1200
     9cc:	02dc6c00 	.word	0x02dc6c00
     9d0:	00000da5 	.word	0x00000da5

000009d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     9d4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     9d6:	490c      	ldr	r1, [pc, #48]	; (a08 <system_clock_source_osc8m_set_config+0x34>)
     9d8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     9da:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     9dc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     9de:	7840      	ldrb	r0, [r0, #1]
     9e0:	2201      	movs	r2, #1
     9e2:	4010      	ands	r0, r2
     9e4:	0180      	lsls	r0, r0, #6
     9e6:	2640      	movs	r6, #64	; 0x40
     9e8:	43b3      	bics	r3, r6
     9ea:	4303      	orrs	r3, r0
     9ec:	402a      	ands	r2, r5
     9ee:	01d2      	lsls	r2, r2, #7
     9f0:	2080      	movs	r0, #128	; 0x80
     9f2:	4383      	bics	r3, r0
     9f4:	4313      	orrs	r3, r2
     9f6:	2203      	movs	r2, #3
     9f8:	4022      	ands	r2, r4
     9fa:	0212      	lsls	r2, r2, #8
     9fc:	4803      	ldr	r0, [pc, #12]	; (a0c <system_clock_source_osc8m_set_config+0x38>)
     9fe:	4003      	ands	r3, r0
     a00:	4313      	orrs	r3, r2
     a02:	620b      	str	r3, [r1, #32]
}
     a04:	bd70      	pop	{r4, r5, r6, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	40000800 	.word	0x40000800
     a0c:	fffffcff 	.word	0xfffffcff

00000a10 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     a10:	2808      	cmp	r0, #8
     a12:	d803      	bhi.n	a1c <system_clock_source_enable+0xc>
     a14:	0080      	lsls	r0, r0, #2
     a16:	4b25      	ldr	r3, [pc, #148]	; (aac <system_clock_source_enable+0x9c>)
     a18:	581b      	ldr	r3, [r3, r0]
     a1a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a1c:	2017      	movs	r0, #23
     a1e:	e044      	b.n	aaa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     a20:	4a23      	ldr	r2, [pc, #140]	; (ab0 <system_clock_source_enable+0xa0>)
     a22:	6a13      	ldr	r3, [r2, #32]
     a24:	2102      	movs	r1, #2
     a26:	430b      	orrs	r3, r1
     a28:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     a2a:	2000      	movs	r0, #0
     a2c:	e03d      	b.n	aaa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     a2e:	4a20      	ldr	r2, [pc, #128]	; (ab0 <system_clock_source_enable+0xa0>)
     a30:	6993      	ldr	r3, [r2, #24]
     a32:	2102      	movs	r1, #2
     a34:	430b      	orrs	r3, r1
     a36:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     a38:	2000      	movs	r0, #0
		break;
     a3a:	e036      	b.n	aaa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     a3c:	4a1c      	ldr	r2, [pc, #112]	; (ab0 <system_clock_source_enable+0xa0>)
     a3e:	8a13      	ldrh	r3, [r2, #16]
     a40:	2102      	movs	r1, #2
     a42:	430b      	orrs	r3, r1
     a44:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     a46:	2000      	movs	r0, #0
		break;
     a48:	e02f      	b.n	aaa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     a4a:	4a19      	ldr	r2, [pc, #100]	; (ab0 <system_clock_source_enable+0xa0>)
     a4c:	8a93      	ldrh	r3, [r2, #20]
     a4e:	2102      	movs	r1, #2
     a50:	430b      	orrs	r3, r1
     a52:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     a54:	2000      	movs	r0, #0
		break;
     a56:	e028      	b.n	aaa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a58:	4916      	ldr	r1, [pc, #88]	; (ab4 <system_clock_source_enable+0xa4>)
     a5a:	680b      	ldr	r3, [r1, #0]
     a5c:	2202      	movs	r2, #2
     a5e:	4313      	orrs	r3, r2
     a60:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     a62:	4b13      	ldr	r3, [pc, #76]	; (ab0 <system_clock_source_enable+0xa0>)
     a64:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     a66:	0019      	movs	r1, r3
     a68:	320e      	adds	r2, #14
     a6a:	68cb      	ldr	r3, [r1, #12]
     a6c:	421a      	tst	r2, r3
     a6e:	d0fc      	beq.n	a6a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     a70:	4a10      	ldr	r2, [pc, #64]	; (ab4 <system_clock_source_enable+0xa4>)
     a72:	6891      	ldr	r1, [r2, #8]
     a74:	4b0e      	ldr	r3, [pc, #56]	; (ab0 <system_clock_source_enable+0xa0>)
     a76:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     a78:	6852      	ldr	r2, [r2, #4]
     a7a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     a7c:	2200      	movs	r2, #0
     a7e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     a80:	0019      	movs	r1, r3
     a82:	3210      	adds	r2, #16
     a84:	68cb      	ldr	r3, [r1, #12]
     a86:	421a      	tst	r2, r3
     a88:	d0fc      	beq.n	a84 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     a8a:	4b0a      	ldr	r3, [pc, #40]	; (ab4 <system_clock_source_enable+0xa4>)
     a8c:	681b      	ldr	r3, [r3, #0]
     a8e:	b29b      	uxth	r3, r3
     a90:	4a07      	ldr	r2, [pc, #28]	; (ab0 <system_clock_source_enable+0xa0>)
     a92:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     a94:	2000      	movs	r0, #0
     a96:	e008      	b.n	aaa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     a98:	4905      	ldr	r1, [pc, #20]	; (ab0 <system_clock_source_enable+0xa0>)
     a9a:	2244      	movs	r2, #68	; 0x44
     a9c:	5c8b      	ldrb	r3, [r1, r2]
     a9e:	2002      	movs	r0, #2
     aa0:	4303      	orrs	r3, r0
     aa2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     aa4:	2000      	movs	r0, #0
		break;
     aa6:	e000      	b.n	aaa <system_clock_source_enable+0x9a>
		return STATUS_OK;
     aa8:	2000      	movs	r0, #0
}
     aaa:	4770      	bx	lr
     aac:	00002adc 	.word	0x00002adc
     ab0:	40000800 	.word	0x40000800
     ab4:	20000038 	.word	0x20000038

00000ab8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     ab8:	b530      	push	{r4, r5, lr}
     aba:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     abc:	22c2      	movs	r2, #194	; 0xc2
     abe:	00d2      	lsls	r2, r2, #3
     ac0:	4b1a      	ldr	r3, [pc, #104]	; (b2c <system_clock_init+0x74>)
     ac2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ac4:	4a1a      	ldr	r2, [pc, #104]	; (b30 <system_clock_init+0x78>)
     ac6:	6853      	ldr	r3, [r2, #4]
     ac8:	211e      	movs	r1, #30
     aca:	438b      	bics	r3, r1
     acc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     ace:	2301      	movs	r3, #1
     ad0:	466a      	mov	r2, sp
     ad2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ad4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     ad6:	4d17      	ldr	r5, [pc, #92]	; (b34 <system_clock_init+0x7c>)
     ad8:	b2e0      	uxtb	r0, r4
     ada:	4669      	mov	r1, sp
     adc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ade:	3401      	adds	r4, #1
     ae0:	2c18      	cmp	r4, #24
     ae2:	d1f9      	bne.n	ad8 <system_clock_init+0x20>
	config->run_in_standby  = false;
     ae4:	a803      	add	r0, sp, #12
     ae6:	2400      	movs	r4, #0
     ae8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     aea:	2501      	movs	r5, #1
     aec:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     aee:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     af0:	4b11      	ldr	r3, [pc, #68]	; (b38 <system_clock_init+0x80>)
     af2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     af4:	2006      	movs	r0, #6
     af6:	4b11      	ldr	r3, [pc, #68]	; (b3c <system_clock_init+0x84>)
     af8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     afa:	4b11      	ldr	r3, [pc, #68]	; (b40 <system_clock_init+0x88>)
     afc:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     afe:	4b11      	ldr	r3, [pc, #68]	; (b44 <system_clock_init+0x8c>)
     b00:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     b02:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     b04:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     b06:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     b08:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     b0a:	466b      	mov	r3, sp
     b0c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     b0e:	2306      	movs	r3, #6
     b10:	466a      	mov	r2, sp
     b12:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     b14:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     b16:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     b18:	4669      	mov	r1, sp
     b1a:	2000      	movs	r0, #0
     b1c:	4b0a      	ldr	r3, [pc, #40]	; (b48 <system_clock_init+0x90>)
     b1e:	4798      	blx	r3
     b20:	2000      	movs	r0, #0
     b22:	4b0a      	ldr	r3, [pc, #40]	; (b4c <system_clock_init+0x94>)
     b24:	4798      	blx	r3
#endif
}
     b26:	b005      	add	sp, #20
     b28:	bd30      	pop	{r4, r5, pc}
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	40000800 	.word	0x40000800
     b30:	41004000 	.word	0x41004000
     b34:	00000d89 	.word	0x00000d89
     b38:	000009d5 	.word	0x000009d5
     b3c:	00000a11 	.word	0x00000a11
     b40:	00000b51 	.word	0x00000b51
     b44:	40000400 	.word	0x40000400
     b48:	00000b75 	.word	0x00000b75
     b4c:	00000c2d 	.word	0x00000c2d

00000b50 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     b50:	4a06      	ldr	r2, [pc, #24]	; (b6c <system_gclk_init+0x1c>)
     b52:	6993      	ldr	r3, [r2, #24]
     b54:	2108      	movs	r1, #8
     b56:	430b      	orrs	r3, r1
     b58:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     b5a:	2201      	movs	r2, #1
     b5c:	4b04      	ldr	r3, [pc, #16]	; (b70 <system_gclk_init+0x20>)
     b5e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     b60:	0019      	movs	r1, r3
     b62:	780b      	ldrb	r3, [r1, #0]
     b64:	4213      	tst	r3, r2
     b66:	d1fc      	bne.n	b62 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     b68:	4770      	bx	lr
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	40000400 	.word	0x40000400
     b70:	40000c00 	.word	0x40000c00

00000b74 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     b74:	b570      	push	{r4, r5, r6, lr}
     b76:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     b78:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     b7a:	780d      	ldrb	r5, [r1, #0]
     b7c:	022d      	lsls	r5, r5, #8
     b7e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     b80:	784b      	ldrb	r3, [r1, #1]
     b82:	2b00      	cmp	r3, #0
     b84:	d002      	beq.n	b8c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     b86:	2380      	movs	r3, #128	; 0x80
     b88:	02db      	lsls	r3, r3, #11
     b8a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     b8c:	7a4b      	ldrb	r3, [r1, #9]
     b8e:	2b00      	cmp	r3, #0
     b90:	d002      	beq.n	b98 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     b92:	2380      	movs	r3, #128	; 0x80
     b94:	031b      	lsls	r3, r3, #12
     b96:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     b98:	6848      	ldr	r0, [r1, #4]
     b9a:	2801      	cmp	r0, #1
     b9c:	d910      	bls.n	bc0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     b9e:	1e43      	subs	r3, r0, #1
     ba0:	4218      	tst	r0, r3
     ba2:	d134      	bne.n	c0e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     ba4:	2802      	cmp	r0, #2
     ba6:	d930      	bls.n	c0a <system_gclk_gen_set_config+0x96>
     ba8:	2302      	movs	r3, #2
     baa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     bac:	3201      	adds	r2, #1
						mask <<= 1) {
     bae:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     bb0:	4298      	cmp	r0, r3
     bb2:	d8fb      	bhi.n	bac <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     bb4:	0212      	lsls	r2, r2, #8
     bb6:	4332      	orrs	r2, r6
     bb8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     bba:	2380      	movs	r3, #128	; 0x80
     bbc:	035b      	lsls	r3, r3, #13
     bbe:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     bc0:	7a0b      	ldrb	r3, [r1, #8]
     bc2:	2b00      	cmp	r3, #0
     bc4:	d002      	beq.n	bcc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     bc6:	2380      	movs	r3, #128	; 0x80
     bc8:	039b      	lsls	r3, r3, #14
     bca:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bcc:	4a13      	ldr	r2, [pc, #76]	; (c1c <system_gclk_gen_set_config+0xa8>)
     bce:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     bd0:	b25b      	sxtb	r3, r3
     bd2:	2b00      	cmp	r3, #0
     bd4:	dbfb      	blt.n	bce <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     bd6:	4b12      	ldr	r3, [pc, #72]	; (c20 <system_gclk_gen_set_config+0xac>)
     bd8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     bda:	4b12      	ldr	r3, [pc, #72]	; (c24 <system_gclk_gen_set_config+0xb0>)
     bdc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bde:	4a0f      	ldr	r2, [pc, #60]	; (c1c <system_gclk_gen_set_config+0xa8>)
     be0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     be2:	b25b      	sxtb	r3, r3
     be4:	2b00      	cmp	r3, #0
     be6:	dbfb      	blt.n	be0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     be8:	4b0c      	ldr	r3, [pc, #48]	; (c1c <system_gclk_gen_set_config+0xa8>)
     bea:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bec:	001a      	movs	r2, r3
     bee:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     bf0:	b25b      	sxtb	r3, r3
     bf2:	2b00      	cmp	r3, #0
     bf4:	dbfb      	blt.n	bee <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     bf6:	4a09      	ldr	r2, [pc, #36]	; (c1c <system_gclk_gen_set_config+0xa8>)
     bf8:	6853      	ldr	r3, [r2, #4]
     bfa:	2180      	movs	r1, #128	; 0x80
     bfc:	0249      	lsls	r1, r1, #9
     bfe:	400b      	ands	r3, r1
     c00:	431d      	orrs	r5, r3
     c02:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     c04:	4b08      	ldr	r3, [pc, #32]	; (c28 <system_gclk_gen_set_config+0xb4>)
     c06:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     c08:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     c0a:	2200      	movs	r2, #0
     c0c:	e7d2      	b.n	bb4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     c0e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     c10:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     c12:	2380      	movs	r3, #128	; 0x80
     c14:	029b      	lsls	r3, r3, #10
     c16:	431d      	orrs	r5, r3
     c18:	e7d2      	b.n	bc0 <system_gclk_gen_set_config+0x4c>
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	40000c00 	.word	0x40000c00
     c20:	000000ed 	.word	0x000000ed
     c24:	40000c08 	.word	0x40000c08
     c28:	0000012d 	.word	0x0000012d

00000c2c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     c2c:	b510      	push	{r4, lr}
     c2e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c30:	4a0b      	ldr	r2, [pc, #44]	; (c60 <system_gclk_gen_enable+0x34>)
     c32:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c34:	b25b      	sxtb	r3, r3
     c36:	2b00      	cmp	r3, #0
     c38:	dbfb      	blt.n	c32 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     c3a:	4b0a      	ldr	r3, [pc, #40]	; (c64 <system_gclk_gen_enable+0x38>)
     c3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c3e:	4b0a      	ldr	r3, [pc, #40]	; (c68 <system_gclk_gen_enable+0x3c>)
     c40:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c42:	4a07      	ldr	r2, [pc, #28]	; (c60 <system_gclk_gen_enable+0x34>)
     c44:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c46:	b25b      	sxtb	r3, r3
     c48:	2b00      	cmp	r3, #0
     c4a:	dbfb      	blt.n	c44 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     c4c:	4a04      	ldr	r2, [pc, #16]	; (c60 <system_gclk_gen_enable+0x34>)
     c4e:	6851      	ldr	r1, [r2, #4]
     c50:	2380      	movs	r3, #128	; 0x80
     c52:	025b      	lsls	r3, r3, #9
     c54:	430b      	orrs	r3, r1
     c56:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     c58:	4b04      	ldr	r3, [pc, #16]	; (c6c <system_gclk_gen_enable+0x40>)
     c5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     c5c:	bd10      	pop	{r4, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	40000c00 	.word	0x40000c00
     c64:	000000ed 	.word	0x000000ed
     c68:	40000c04 	.word	0x40000c04
     c6c:	0000012d 	.word	0x0000012d

00000c70 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     c70:	b570      	push	{r4, r5, r6, lr}
     c72:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c74:	4a1a      	ldr	r2, [pc, #104]	; (ce0 <system_gclk_gen_get_hz+0x70>)
     c76:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c78:	b25b      	sxtb	r3, r3
     c7a:	2b00      	cmp	r3, #0
     c7c:	dbfb      	blt.n	c76 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     c7e:	4b19      	ldr	r3, [pc, #100]	; (ce4 <system_gclk_gen_get_hz+0x74>)
     c80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c82:	4b19      	ldr	r3, [pc, #100]	; (ce8 <system_gclk_gen_get_hz+0x78>)
     c84:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c86:	4a16      	ldr	r2, [pc, #88]	; (ce0 <system_gclk_gen_get_hz+0x70>)
     c88:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c8a:	b25b      	sxtb	r3, r3
     c8c:	2b00      	cmp	r3, #0
     c8e:	dbfb      	blt.n	c88 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     c90:	4e13      	ldr	r6, [pc, #76]	; (ce0 <system_gclk_gen_get_hz+0x70>)
     c92:	6870      	ldr	r0, [r6, #4]
     c94:	04c0      	lsls	r0, r0, #19
     c96:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     c98:	4b14      	ldr	r3, [pc, #80]	; (cec <system_gclk_gen_get_hz+0x7c>)
     c9a:	4798      	blx	r3
     c9c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c9e:	4b12      	ldr	r3, [pc, #72]	; (ce8 <system_gclk_gen_get_hz+0x78>)
     ca0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     ca2:	6876      	ldr	r6, [r6, #4]
     ca4:	02f6      	lsls	r6, r6, #11
     ca6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ca8:	4b11      	ldr	r3, [pc, #68]	; (cf0 <system_gclk_gen_get_hz+0x80>)
     caa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     cac:	4a0c      	ldr	r2, [pc, #48]	; (ce0 <system_gclk_gen_get_hz+0x70>)
     cae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     cb0:	b25b      	sxtb	r3, r3
     cb2:	2b00      	cmp	r3, #0
     cb4:	dbfb      	blt.n	cae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     cb6:	4b0a      	ldr	r3, [pc, #40]	; (ce0 <system_gclk_gen_get_hz+0x70>)
     cb8:	689c      	ldr	r4, [r3, #8]
     cba:	0224      	lsls	r4, r4, #8
     cbc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     cbe:	4b0d      	ldr	r3, [pc, #52]	; (cf4 <system_gclk_gen_get_hz+0x84>)
     cc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     cc2:	2e00      	cmp	r6, #0
     cc4:	d107      	bne.n	cd6 <system_gclk_gen_get_hz+0x66>
     cc6:	2c01      	cmp	r4, #1
     cc8:	d907      	bls.n	cda <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     cca:	0021      	movs	r1, r4
     ccc:	0028      	movs	r0, r5
     cce:	4b0a      	ldr	r3, [pc, #40]	; (cf8 <system_gclk_gen_get_hz+0x88>)
     cd0:	4798      	blx	r3
     cd2:	0005      	movs	r5, r0
     cd4:	e001      	b.n	cda <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     cd6:	3401      	adds	r4, #1
     cd8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     cda:	0028      	movs	r0, r5
     cdc:	bd70      	pop	{r4, r5, r6, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	40000c00 	.word	0x40000c00
     ce4:	000000ed 	.word	0x000000ed
     ce8:	40000c04 	.word	0x40000c04
     cec:	00000941 	.word	0x00000941
     cf0:	40000c08 	.word	0x40000c08
     cf4:	0000012d 	.word	0x0000012d
     cf8:	00001085 	.word	0x00001085

00000cfc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     cfc:	b510      	push	{r4, lr}
     cfe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     d00:	4b06      	ldr	r3, [pc, #24]	; (d1c <system_gclk_chan_enable+0x20>)
     d02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     d04:	4b06      	ldr	r3, [pc, #24]	; (d20 <system_gclk_chan_enable+0x24>)
     d06:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     d08:	4a06      	ldr	r2, [pc, #24]	; (d24 <system_gclk_chan_enable+0x28>)
     d0a:	8853      	ldrh	r3, [r2, #2]
     d0c:	2180      	movs	r1, #128	; 0x80
     d0e:	01c9      	lsls	r1, r1, #7
     d10:	430b      	orrs	r3, r1
     d12:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     d14:	4b04      	ldr	r3, [pc, #16]	; (d28 <system_gclk_chan_enable+0x2c>)
     d16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d18:	bd10      	pop	{r4, pc}
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	000000ed 	.word	0x000000ed
     d20:	40000c02 	.word	0x40000c02
     d24:	40000c00 	.word	0x40000c00
     d28:	0000012d 	.word	0x0000012d

00000d2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     d2c:	b510      	push	{r4, lr}
     d2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     d30:	4b0f      	ldr	r3, [pc, #60]	; (d70 <system_gclk_chan_disable+0x44>)
     d32:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     d34:	4b0f      	ldr	r3, [pc, #60]	; (d74 <system_gclk_chan_disable+0x48>)
     d36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     d38:	4a0f      	ldr	r2, [pc, #60]	; (d78 <system_gclk_chan_disable+0x4c>)
     d3a:	8853      	ldrh	r3, [r2, #2]
     d3c:	051b      	lsls	r3, r3, #20
     d3e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     d40:	8853      	ldrh	r3, [r2, #2]
     d42:	490e      	ldr	r1, [pc, #56]	; (d7c <system_gclk_chan_disable+0x50>)
     d44:	400b      	ands	r3, r1
     d46:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     d48:	8853      	ldrh	r3, [r2, #2]
     d4a:	490d      	ldr	r1, [pc, #52]	; (d80 <system_gclk_chan_disable+0x54>)
     d4c:	400b      	ands	r3, r1
     d4e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     d50:	0011      	movs	r1, r2
     d52:	2280      	movs	r2, #128	; 0x80
     d54:	01d2      	lsls	r2, r2, #7
     d56:	884b      	ldrh	r3, [r1, #2]
     d58:	4213      	tst	r3, r2
     d5a:	d1fc      	bne.n	d56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     d5c:	4906      	ldr	r1, [pc, #24]	; (d78 <system_gclk_chan_disable+0x4c>)
     d5e:	884a      	ldrh	r2, [r1, #2]
     d60:	0203      	lsls	r3, r0, #8
     d62:	4806      	ldr	r0, [pc, #24]	; (d7c <system_gclk_chan_disable+0x50>)
     d64:	4002      	ands	r2, r0
     d66:	4313      	orrs	r3, r2
     d68:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     d6a:	4b06      	ldr	r3, [pc, #24]	; (d84 <system_gclk_chan_disable+0x58>)
     d6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d6e:	bd10      	pop	{r4, pc}
     d70:	000000ed 	.word	0x000000ed
     d74:	40000c02 	.word	0x40000c02
     d78:	40000c00 	.word	0x40000c00
     d7c:	fffff0ff 	.word	0xfffff0ff
     d80:	ffffbfff 	.word	0xffffbfff
     d84:	0000012d 	.word	0x0000012d

00000d88 <system_gclk_chan_set_config>:
{
     d88:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     d8a:	780c      	ldrb	r4, [r1, #0]
     d8c:	0224      	lsls	r4, r4, #8
     d8e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     d90:	4b02      	ldr	r3, [pc, #8]	; (d9c <system_gclk_chan_set_config+0x14>)
     d92:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     d94:	b2a4      	uxth	r4, r4
     d96:	4b02      	ldr	r3, [pc, #8]	; (da0 <system_gclk_chan_set_config+0x18>)
     d98:	805c      	strh	r4, [r3, #2]
}
     d9a:	bd10      	pop	{r4, pc}
     d9c:	00000d2d 	.word	0x00000d2d
     da0:	40000c00 	.word	0x40000c00

00000da4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     da4:	b510      	push	{r4, lr}
     da6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     da8:	4b06      	ldr	r3, [pc, #24]	; (dc4 <system_gclk_chan_get_hz+0x20>)
     daa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     dac:	4b06      	ldr	r3, [pc, #24]	; (dc8 <system_gclk_chan_get_hz+0x24>)
     dae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     db0:	4b06      	ldr	r3, [pc, #24]	; (dcc <system_gclk_chan_get_hz+0x28>)
     db2:	885c      	ldrh	r4, [r3, #2]
     db4:	0524      	lsls	r4, r4, #20
     db6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     db8:	4b05      	ldr	r3, [pc, #20]	; (dd0 <system_gclk_chan_get_hz+0x2c>)
     dba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     dbc:	0020      	movs	r0, r4
     dbe:	4b05      	ldr	r3, [pc, #20]	; (dd4 <system_gclk_chan_get_hz+0x30>)
     dc0:	4798      	blx	r3
}
     dc2:	bd10      	pop	{r4, pc}
     dc4:	000000ed 	.word	0x000000ed
     dc8:	40000c02 	.word	0x40000c02
     dcc:	40000c00 	.word	0x40000c00
     dd0:	0000012d 	.word	0x0000012d
     dd4:	00000c71 	.word	0x00000c71

00000dd8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     dd8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     dda:	78d3      	ldrb	r3, [r2, #3]
     ddc:	2b00      	cmp	r3, #0
     dde:	d135      	bne.n	e4c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     de0:	7813      	ldrb	r3, [r2, #0]
     de2:	2b80      	cmp	r3, #128	; 0x80
     de4:	d029      	beq.n	e3a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     de6:	061b      	lsls	r3, r3, #24
     de8:	2480      	movs	r4, #128	; 0x80
     dea:	0264      	lsls	r4, r4, #9
     dec:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     dee:	7854      	ldrb	r4, [r2, #1]
     df0:	2502      	movs	r5, #2
     df2:	43ac      	bics	r4, r5
     df4:	d106      	bne.n	e04 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     df6:	7894      	ldrb	r4, [r2, #2]
     df8:	2c00      	cmp	r4, #0
     dfa:	d120      	bne.n	e3e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     dfc:	2480      	movs	r4, #128	; 0x80
     dfe:	02a4      	lsls	r4, r4, #10
     e00:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     e02:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     e04:	7854      	ldrb	r4, [r2, #1]
     e06:	3c01      	subs	r4, #1
     e08:	2c01      	cmp	r4, #1
     e0a:	d91c      	bls.n	e46 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     e0c:	040d      	lsls	r5, r1, #16
     e0e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     e10:	24a0      	movs	r4, #160	; 0xa0
     e12:	05e4      	lsls	r4, r4, #23
     e14:	432c      	orrs	r4, r5
     e16:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e18:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     e1a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     e1c:	24d0      	movs	r4, #208	; 0xd0
     e1e:	0624      	lsls	r4, r4, #24
     e20:	432c      	orrs	r4, r5
     e22:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e24:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     e26:	78d4      	ldrb	r4, [r2, #3]
     e28:	2c00      	cmp	r4, #0
     e2a:	d122      	bne.n	e72 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     e2c:	035b      	lsls	r3, r3, #13
     e2e:	d51c      	bpl.n	e6a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     e30:	7893      	ldrb	r3, [r2, #2]
     e32:	2b01      	cmp	r3, #1
     e34:	d01e      	beq.n	e74 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     e36:	6141      	str	r1, [r0, #20]
     e38:	e017      	b.n	e6a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     e3a:	2300      	movs	r3, #0
     e3c:	e7d7      	b.n	dee <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     e3e:	24c0      	movs	r4, #192	; 0xc0
     e40:	02e4      	lsls	r4, r4, #11
     e42:	4323      	orrs	r3, r4
     e44:	e7dd      	b.n	e02 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     e46:	4c0d      	ldr	r4, [pc, #52]	; (e7c <_system_pinmux_config+0xa4>)
     e48:	4023      	ands	r3, r4
     e4a:	e7df      	b.n	e0c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     e4c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     e4e:	040c      	lsls	r4, r1, #16
     e50:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     e52:	23a0      	movs	r3, #160	; 0xa0
     e54:	05db      	lsls	r3, r3, #23
     e56:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e58:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     e5a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     e5c:	23d0      	movs	r3, #208	; 0xd0
     e5e:	061b      	lsls	r3, r3, #24
     e60:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e62:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     e64:	78d3      	ldrb	r3, [r2, #3]
     e66:	2b00      	cmp	r3, #0
     e68:	d103      	bne.n	e72 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     e6a:	7853      	ldrb	r3, [r2, #1]
     e6c:	3b01      	subs	r3, #1
     e6e:	2b01      	cmp	r3, #1
     e70:	d902      	bls.n	e78 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     e72:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     e74:	6181      	str	r1, [r0, #24]
     e76:	e7f8      	b.n	e6a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     e78:	6081      	str	r1, [r0, #8]
}
     e7a:	e7fa      	b.n	e72 <_system_pinmux_config+0x9a>
     e7c:	fffbffff 	.word	0xfffbffff

00000e80 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     e80:	b510      	push	{r4, lr}
     e82:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e84:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e86:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e88:	2900      	cmp	r1, #0
     e8a:	d104      	bne.n	e96 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     e8c:	0943      	lsrs	r3, r0, #5
     e8e:	01db      	lsls	r3, r3, #7
     e90:	4905      	ldr	r1, [pc, #20]	; (ea8 <system_pinmux_pin_set_config+0x28>)
     e92:	468c      	mov	ip, r1
     e94:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     e96:	241f      	movs	r4, #31
     e98:	4020      	ands	r0, r4
     e9a:	2101      	movs	r1, #1
     e9c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     e9e:	0018      	movs	r0, r3
     ea0:	4b02      	ldr	r3, [pc, #8]	; (eac <system_pinmux_pin_set_config+0x2c>)
     ea2:	4798      	blx	r3
}
     ea4:	bd10      	pop	{r4, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	41004400 	.word	0x41004400
     eac:	00000dd9 	.word	0x00000dd9

00000eb0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     eb0:	4770      	bx	lr
	...

00000eb4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     eb4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     eb6:	4b05      	ldr	r3, [pc, #20]	; (ecc <system_init+0x18>)
     eb8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     eba:	4b05      	ldr	r3, [pc, #20]	; (ed0 <system_init+0x1c>)
     ebc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     ebe:	4b05      	ldr	r3, [pc, #20]	; (ed4 <system_init+0x20>)
     ec0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     ec2:	4b05      	ldr	r3, [pc, #20]	; (ed8 <system_init+0x24>)
     ec4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     ec6:	4b05      	ldr	r3, [pc, #20]	; (edc <system_init+0x28>)
     ec8:	4798      	blx	r3
}
     eca:	bd10      	pop	{r4, pc}
     ecc:	00000ab9 	.word	0x00000ab9
     ed0:	0000015d 	.word	0x0000015d
     ed4:	00000eb1 	.word	0x00000eb1
     ed8:	00000eb1 	.word	0x00000eb1
     edc:	00000eb1 	.word	0x00000eb1

00000ee0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ee0:	e7fe      	b.n	ee0 <Dummy_Handler>
	...

00000ee4 <Reset_Handler>:
{
     ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     ee6:	4a2a      	ldr	r2, [pc, #168]	; (f90 <Reset_Handler+0xac>)
     ee8:	4b2a      	ldr	r3, [pc, #168]	; (f94 <Reset_Handler+0xb0>)
     eea:	429a      	cmp	r2, r3
     eec:	d011      	beq.n	f12 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     eee:	001a      	movs	r2, r3
     ef0:	4b29      	ldr	r3, [pc, #164]	; (f98 <Reset_Handler+0xb4>)
     ef2:	429a      	cmp	r2, r3
     ef4:	d20d      	bcs.n	f12 <Reset_Handler+0x2e>
     ef6:	4a29      	ldr	r2, [pc, #164]	; (f9c <Reset_Handler+0xb8>)
     ef8:	3303      	adds	r3, #3
     efa:	1a9b      	subs	r3, r3, r2
     efc:	089b      	lsrs	r3, r3, #2
     efe:	3301      	adds	r3, #1
     f00:	009b      	lsls	r3, r3, #2
     f02:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     f04:	4823      	ldr	r0, [pc, #140]	; (f94 <Reset_Handler+0xb0>)
     f06:	4922      	ldr	r1, [pc, #136]	; (f90 <Reset_Handler+0xac>)
     f08:	588c      	ldr	r4, [r1, r2]
     f0a:	5084      	str	r4, [r0, r2]
     f0c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     f0e:	429a      	cmp	r2, r3
     f10:	d1fa      	bne.n	f08 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     f12:	4a23      	ldr	r2, [pc, #140]	; (fa0 <Reset_Handler+0xbc>)
     f14:	4b23      	ldr	r3, [pc, #140]	; (fa4 <Reset_Handler+0xc0>)
     f16:	429a      	cmp	r2, r3
     f18:	d20a      	bcs.n	f30 <Reset_Handler+0x4c>
     f1a:	43d3      	mvns	r3, r2
     f1c:	4921      	ldr	r1, [pc, #132]	; (fa4 <Reset_Handler+0xc0>)
     f1e:	185b      	adds	r3, r3, r1
     f20:	2103      	movs	r1, #3
     f22:	438b      	bics	r3, r1
     f24:	3304      	adds	r3, #4
     f26:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     f28:	2100      	movs	r1, #0
     f2a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     f2c:	4293      	cmp	r3, r2
     f2e:	d1fc      	bne.n	f2a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f30:	4a1d      	ldr	r2, [pc, #116]	; (fa8 <Reset_Handler+0xc4>)
     f32:	21ff      	movs	r1, #255	; 0xff
     f34:	4b1d      	ldr	r3, [pc, #116]	; (fac <Reset_Handler+0xc8>)
     f36:	438b      	bics	r3, r1
     f38:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     f3a:	39fd      	subs	r1, #253	; 0xfd
     f3c:	2390      	movs	r3, #144	; 0x90
     f3e:	005b      	lsls	r3, r3, #1
     f40:	4a1b      	ldr	r2, [pc, #108]	; (fb0 <Reset_Handler+0xcc>)
     f42:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     f44:	4a1b      	ldr	r2, [pc, #108]	; (fb4 <Reset_Handler+0xd0>)
     f46:	78d3      	ldrb	r3, [r2, #3]
     f48:	2503      	movs	r5, #3
     f4a:	43ab      	bics	r3, r5
     f4c:	2402      	movs	r4, #2
     f4e:	4323      	orrs	r3, r4
     f50:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     f52:	78d3      	ldrb	r3, [r2, #3]
     f54:	270c      	movs	r7, #12
     f56:	43bb      	bics	r3, r7
     f58:	2608      	movs	r6, #8
     f5a:	4333      	orrs	r3, r6
     f5c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     f5e:	4b16      	ldr	r3, [pc, #88]	; (fb8 <Reset_Handler+0xd4>)
     f60:	7b98      	ldrb	r0, [r3, #14]
     f62:	2230      	movs	r2, #48	; 0x30
     f64:	4390      	bics	r0, r2
     f66:	2220      	movs	r2, #32
     f68:	4310      	orrs	r0, r2
     f6a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     f6c:	7b99      	ldrb	r1, [r3, #14]
     f6e:	43b9      	bics	r1, r7
     f70:	4331      	orrs	r1, r6
     f72:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     f74:	7b9a      	ldrb	r2, [r3, #14]
     f76:	43aa      	bics	r2, r5
     f78:	4322      	orrs	r2, r4
     f7a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     f7c:	4a0f      	ldr	r2, [pc, #60]	; (fbc <Reset_Handler+0xd8>)
     f7e:	6853      	ldr	r3, [r2, #4]
     f80:	2180      	movs	r1, #128	; 0x80
     f82:	430b      	orrs	r3, r1
     f84:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     f86:	4b0e      	ldr	r3, [pc, #56]	; (fc0 <Reset_Handler+0xdc>)
     f88:	4798      	blx	r3
        main();
     f8a:	4b0e      	ldr	r3, [pc, #56]	; (fc4 <Reset_Handler+0xe0>)
     f8c:	4798      	blx	r3
     f8e:	e7fe      	b.n	f8e <Reset_Handler+0xaa>
     f90:	00002ba0 	.word	0x00002ba0
     f94:	20000000 	.word	0x20000000
     f98:	20000004 	.word	0x20000004
     f9c:	20000004 	.word	0x20000004
     fa0:	20000004 	.word	0x20000004
     fa4:	20000084 	.word	0x20000084
     fa8:	e000ed00 	.word	0xe000ed00
     fac:	00000000 	.word	0x00000000
     fb0:	41007000 	.word	0x41007000
     fb4:	41005000 	.word	0x41005000
     fb8:	41004800 	.word	0x41004800
     fbc:	41004000 	.word	0x41004000
     fc0:	00002a65 	.word	0x00002a65
     fc4:	00001071 	.word	0x00001071

00000fc8 <i2c_master_setup>:
/************************************************************************/


void i2c_master_setup(void);

void i2c_master_setup(void){
     fc8:	b530      	push	{r4, r5, lr}
     fca:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     fcc:	aa01      	add	r2, sp, #4
     fce:	2364      	movs	r3, #100	; 0x64
     fd0:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     fd2:	4b20      	ldr	r3, [pc, #128]	; (1054 <i2c_master_setup+0x8c>)
     fd4:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     fd6:	2300      	movs	r3, #0
     fd8:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     fda:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     fdc:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     fde:	2180      	movs	r1, #128	; 0x80
     fe0:	0389      	lsls	r1, r1, #14
     fe2:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     fe4:	2101      	movs	r1, #1
     fe6:	4249      	negs	r1, r1
     fe8:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     fea:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     fec:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
     fee:	3125      	adds	r1, #37	; 0x25
     ff0:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     ff2:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     ff4:	3108      	adds	r1, #8
     ff6:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     ff8:	3101      	adds	r1, #1
     ffa:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     ffc:	3101      	adds	r1, #1
     ffe:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1000:	33d7      	adds	r3, #215	; 0xd7
    1002:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
    1004:	4b14      	ldr	r3, [pc, #80]	; (1058 <i2c_master_setup+0x90>)
    1006:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1008:	4c14      	ldr	r4, [pc, #80]	; (105c <i2c_master_setup+0x94>)
    100a:	4915      	ldr	r1, [pc, #84]	; (1060 <i2c_master_setup+0x98>)
    100c:	0020      	movs	r0, r4
    100e:	4b15      	ldr	r3, [pc, #84]	; (1064 <i2c_master_setup+0x9c>)
    1010:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1012:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1014:	2207      	movs	r2, #7
    1016:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1018:	421a      	tst	r2, r3
    101a:	d1fc      	bne.n	1016 <i2c_master_setup+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    101c:	6823      	ldr	r3, [r4, #0]
    101e:	2202      	movs	r2, #2
    1020:	4313      	orrs	r3, r2
    1022:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1024:	4d0d      	ldr	r5, [pc, #52]	; (105c <i2c_master_setup+0x94>)
    1026:	6828      	ldr	r0, [r5, #0]
    1028:	4b0f      	ldr	r3, [pc, #60]	; (1068 <i2c_master_setup+0xa0>)
    102a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    102c:	231f      	movs	r3, #31
    102e:	4018      	ands	r0, r3
    1030:	3b1e      	subs	r3, #30
    1032:	4083      	lsls	r3, r0
    1034:	4a0d      	ldr	r2, [pc, #52]	; (106c <i2c_master_setup+0xa4>)
    1036:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1038:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    103a:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    103c:	2110      	movs	r1, #16
    103e:	8b62      	ldrh	r2, [r4, #26]
    1040:	420a      	tst	r2, r1
    1042:	d104      	bne.n	104e <i2c_master_setup+0x86>
		timeout_counter++;
    1044:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1046:	4283      	cmp	r3, r0
    1048:	d3f9      	bcc.n	103e <i2c_master_setup+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    104a:	2310      	movs	r3, #16
    104c:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_instance);
	
}
    104e:	b00f      	add	sp, #60	; 0x3c
    1050:	bd30      	pop	{r4, r5, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	00000d48 	.word	0x00000d48
    1058:	00002710 	.word	0x00002710
    105c:	2000005c 	.word	0x2000005c
    1060:	42001000 	.word	0x42001000
    1064:	000001b9 	.word	0x000001b9
    1068:	000008f1 	.word	0x000008f1
    106c:	e000e100 	.word	0xe000e100

00001070 <main>:




int main (void)
{
    1070:	b510      	push	{r4, lr}
	system_init();
    1072:	4b02      	ldr	r3, [pc, #8]	; (107c <main+0xc>)
    1074:	4798      	blx	r3
	
	i2c_master_setup();
    1076:	4b02      	ldr	r3, [pc, #8]	; (1080 <main+0x10>)
    1078:	4798      	blx	r3
    107a:	e7fe      	b.n	107a <main+0xa>
    107c:	00000eb5 	.word	0x00000eb5
    1080:	00000fc9 	.word	0x00000fc9

00001084 <__udivsi3>:
    1084:	2200      	movs	r2, #0
    1086:	0843      	lsrs	r3, r0, #1
    1088:	428b      	cmp	r3, r1
    108a:	d374      	bcc.n	1176 <__udivsi3+0xf2>
    108c:	0903      	lsrs	r3, r0, #4
    108e:	428b      	cmp	r3, r1
    1090:	d35f      	bcc.n	1152 <__udivsi3+0xce>
    1092:	0a03      	lsrs	r3, r0, #8
    1094:	428b      	cmp	r3, r1
    1096:	d344      	bcc.n	1122 <__udivsi3+0x9e>
    1098:	0b03      	lsrs	r3, r0, #12
    109a:	428b      	cmp	r3, r1
    109c:	d328      	bcc.n	10f0 <__udivsi3+0x6c>
    109e:	0c03      	lsrs	r3, r0, #16
    10a0:	428b      	cmp	r3, r1
    10a2:	d30d      	bcc.n	10c0 <__udivsi3+0x3c>
    10a4:	22ff      	movs	r2, #255	; 0xff
    10a6:	0209      	lsls	r1, r1, #8
    10a8:	ba12      	rev	r2, r2
    10aa:	0c03      	lsrs	r3, r0, #16
    10ac:	428b      	cmp	r3, r1
    10ae:	d302      	bcc.n	10b6 <__udivsi3+0x32>
    10b0:	1212      	asrs	r2, r2, #8
    10b2:	0209      	lsls	r1, r1, #8
    10b4:	d065      	beq.n	1182 <__udivsi3+0xfe>
    10b6:	0b03      	lsrs	r3, r0, #12
    10b8:	428b      	cmp	r3, r1
    10ba:	d319      	bcc.n	10f0 <__udivsi3+0x6c>
    10bc:	e000      	b.n	10c0 <__udivsi3+0x3c>
    10be:	0a09      	lsrs	r1, r1, #8
    10c0:	0bc3      	lsrs	r3, r0, #15
    10c2:	428b      	cmp	r3, r1
    10c4:	d301      	bcc.n	10ca <__udivsi3+0x46>
    10c6:	03cb      	lsls	r3, r1, #15
    10c8:	1ac0      	subs	r0, r0, r3
    10ca:	4152      	adcs	r2, r2
    10cc:	0b83      	lsrs	r3, r0, #14
    10ce:	428b      	cmp	r3, r1
    10d0:	d301      	bcc.n	10d6 <__udivsi3+0x52>
    10d2:	038b      	lsls	r3, r1, #14
    10d4:	1ac0      	subs	r0, r0, r3
    10d6:	4152      	adcs	r2, r2
    10d8:	0b43      	lsrs	r3, r0, #13
    10da:	428b      	cmp	r3, r1
    10dc:	d301      	bcc.n	10e2 <__udivsi3+0x5e>
    10de:	034b      	lsls	r3, r1, #13
    10e0:	1ac0      	subs	r0, r0, r3
    10e2:	4152      	adcs	r2, r2
    10e4:	0b03      	lsrs	r3, r0, #12
    10e6:	428b      	cmp	r3, r1
    10e8:	d301      	bcc.n	10ee <__udivsi3+0x6a>
    10ea:	030b      	lsls	r3, r1, #12
    10ec:	1ac0      	subs	r0, r0, r3
    10ee:	4152      	adcs	r2, r2
    10f0:	0ac3      	lsrs	r3, r0, #11
    10f2:	428b      	cmp	r3, r1
    10f4:	d301      	bcc.n	10fa <__udivsi3+0x76>
    10f6:	02cb      	lsls	r3, r1, #11
    10f8:	1ac0      	subs	r0, r0, r3
    10fa:	4152      	adcs	r2, r2
    10fc:	0a83      	lsrs	r3, r0, #10
    10fe:	428b      	cmp	r3, r1
    1100:	d301      	bcc.n	1106 <__udivsi3+0x82>
    1102:	028b      	lsls	r3, r1, #10
    1104:	1ac0      	subs	r0, r0, r3
    1106:	4152      	adcs	r2, r2
    1108:	0a43      	lsrs	r3, r0, #9
    110a:	428b      	cmp	r3, r1
    110c:	d301      	bcc.n	1112 <__udivsi3+0x8e>
    110e:	024b      	lsls	r3, r1, #9
    1110:	1ac0      	subs	r0, r0, r3
    1112:	4152      	adcs	r2, r2
    1114:	0a03      	lsrs	r3, r0, #8
    1116:	428b      	cmp	r3, r1
    1118:	d301      	bcc.n	111e <__udivsi3+0x9a>
    111a:	020b      	lsls	r3, r1, #8
    111c:	1ac0      	subs	r0, r0, r3
    111e:	4152      	adcs	r2, r2
    1120:	d2cd      	bcs.n	10be <__udivsi3+0x3a>
    1122:	09c3      	lsrs	r3, r0, #7
    1124:	428b      	cmp	r3, r1
    1126:	d301      	bcc.n	112c <__udivsi3+0xa8>
    1128:	01cb      	lsls	r3, r1, #7
    112a:	1ac0      	subs	r0, r0, r3
    112c:	4152      	adcs	r2, r2
    112e:	0983      	lsrs	r3, r0, #6
    1130:	428b      	cmp	r3, r1
    1132:	d301      	bcc.n	1138 <__udivsi3+0xb4>
    1134:	018b      	lsls	r3, r1, #6
    1136:	1ac0      	subs	r0, r0, r3
    1138:	4152      	adcs	r2, r2
    113a:	0943      	lsrs	r3, r0, #5
    113c:	428b      	cmp	r3, r1
    113e:	d301      	bcc.n	1144 <__udivsi3+0xc0>
    1140:	014b      	lsls	r3, r1, #5
    1142:	1ac0      	subs	r0, r0, r3
    1144:	4152      	adcs	r2, r2
    1146:	0903      	lsrs	r3, r0, #4
    1148:	428b      	cmp	r3, r1
    114a:	d301      	bcc.n	1150 <__udivsi3+0xcc>
    114c:	010b      	lsls	r3, r1, #4
    114e:	1ac0      	subs	r0, r0, r3
    1150:	4152      	adcs	r2, r2
    1152:	08c3      	lsrs	r3, r0, #3
    1154:	428b      	cmp	r3, r1
    1156:	d301      	bcc.n	115c <__udivsi3+0xd8>
    1158:	00cb      	lsls	r3, r1, #3
    115a:	1ac0      	subs	r0, r0, r3
    115c:	4152      	adcs	r2, r2
    115e:	0883      	lsrs	r3, r0, #2
    1160:	428b      	cmp	r3, r1
    1162:	d301      	bcc.n	1168 <__udivsi3+0xe4>
    1164:	008b      	lsls	r3, r1, #2
    1166:	1ac0      	subs	r0, r0, r3
    1168:	4152      	adcs	r2, r2
    116a:	0843      	lsrs	r3, r0, #1
    116c:	428b      	cmp	r3, r1
    116e:	d301      	bcc.n	1174 <__udivsi3+0xf0>
    1170:	004b      	lsls	r3, r1, #1
    1172:	1ac0      	subs	r0, r0, r3
    1174:	4152      	adcs	r2, r2
    1176:	1a41      	subs	r1, r0, r1
    1178:	d200      	bcs.n	117c <__udivsi3+0xf8>
    117a:	4601      	mov	r1, r0
    117c:	4152      	adcs	r2, r2
    117e:	4610      	mov	r0, r2
    1180:	4770      	bx	lr
    1182:	e7ff      	b.n	1184 <__udivsi3+0x100>
    1184:	b501      	push	{r0, lr}
    1186:	2000      	movs	r0, #0
    1188:	f000 f806 	bl	1198 <__aeabi_idiv0>
    118c:	bd02      	pop	{r1, pc}
    118e:	46c0      	nop			; (mov r8, r8)

00001190 <__aeabi_uidivmod>:
    1190:	2900      	cmp	r1, #0
    1192:	d0f7      	beq.n	1184 <__udivsi3+0x100>
    1194:	e776      	b.n	1084 <__udivsi3>
    1196:	4770      	bx	lr

00001198 <__aeabi_idiv0>:
    1198:	4770      	bx	lr
    119a:	46c0      	nop			; (mov r8, r8)

0000119c <__aeabi_dadd>:
    119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    119e:	4645      	mov	r5, r8
    11a0:	46de      	mov	lr, fp
    11a2:	4657      	mov	r7, sl
    11a4:	464e      	mov	r6, r9
    11a6:	030c      	lsls	r4, r1, #12
    11a8:	b5e0      	push	{r5, r6, r7, lr}
    11aa:	004e      	lsls	r6, r1, #1
    11ac:	0fc9      	lsrs	r1, r1, #31
    11ae:	4688      	mov	r8, r1
    11b0:	000d      	movs	r5, r1
    11b2:	0a61      	lsrs	r1, r4, #9
    11b4:	0f44      	lsrs	r4, r0, #29
    11b6:	430c      	orrs	r4, r1
    11b8:	00c7      	lsls	r7, r0, #3
    11ba:	0319      	lsls	r1, r3, #12
    11bc:	0058      	lsls	r0, r3, #1
    11be:	0fdb      	lsrs	r3, r3, #31
    11c0:	469b      	mov	fp, r3
    11c2:	0a4b      	lsrs	r3, r1, #9
    11c4:	0f51      	lsrs	r1, r2, #29
    11c6:	430b      	orrs	r3, r1
    11c8:	0d76      	lsrs	r6, r6, #21
    11ca:	0d40      	lsrs	r0, r0, #21
    11cc:	0019      	movs	r1, r3
    11ce:	00d2      	lsls	r2, r2, #3
    11d0:	45d8      	cmp	r8, fp
    11d2:	d100      	bne.n	11d6 <__aeabi_dadd+0x3a>
    11d4:	e0ae      	b.n	1334 <__aeabi_dadd+0x198>
    11d6:	1a35      	subs	r5, r6, r0
    11d8:	2d00      	cmp	r5, #0
    11da:	dc00      	bgt.n	11de <__aeabi_dadd+0x42>
    11dc:	e0f6      	b.n	13cc <__aeabi_dadd+0x230>
    11de:	2800      	cmp	r0, #0
    11e0:	d10f      	bne.n	1202 <__aeabi_dadd+0x66>
    11e2:	4313      	orrs	r3, r2
    11e4:	d100      	bne.n	11e8 <__aeabi_dadd+0x4c>
    11e6:	e0db      	b.n	13a0 <__aeabi_dadd+0x204>
    11e8:	1e6b      	subs	r3, r5, #1
    11ea:	2b00      	cmp	r3, #0
    11ec:	d000      	beq.n	11f0 <__aeabi_dadd+0x54>
    11ee:	e137      	b.n	1460 <__aeabi_dadd+0x2c4>
    11f0:	1aba      	subs	r2, r7, r2
    11f2:	4297      	cmp	r7, r2
    11f4:	41bf      	sbcs	r7, r7
    11f6:	1a64      	subs	r4, r4, r1
    11f8:	427f      	negs	r7, r7
    11fa:	1be4      	subs	r4, r4, r7
    11fc:	2601      	movs	r6, #1
    11fe:	0017      	movs	r7, r2
    1200:	e024      	b.n	124c <__aeabi_dadd+0xb0>
    1202:	4bc6      	ldr	r3, [pc, #792]	; (151c <__aeabi_dadd+0x380>)
    1204:	429e      	cmp	r6, r3
    1206:	d04d      	beq.n	12a4 <__aeabi_dadd+0x108>
    1208:	2380      	movs	r3, #128	; 0x80
    120a:	041b      	lsls	r3, r3, #16
    120c:	4319      	orrs	r1, r3
    120e:	2d38      	cmp	r5, #56	; 0x38
    1210:	dd00      	ble.n	1214 <__aeabi_dadd+0x78>
    1212:	e107      	b.n	1424 <__aeabi_dadd+0x288>
    1214:	2d1f      	cmp	r5, #31
    1216:	dd00      	ble.n	121a <__aeabi_dadd+0x7e>
    1218:	e138      	b.n	148c <__aeabi_dadd+0x2f0>
    121a:	2020      	movs	r0, #32
    121c:	1b43      	subs	r3, r0, r5
    121e:	469a      	mov	sl, r3
    1220:	000b      	movs	r3, r1
    1222:	4650      	mov	r0, sl
    1224:	4083      	lsls	r3, r0
    1226:	4699      	mov	r9, r3
    1228:	0013      	movs	r3, r2
    122a:	4648      	mov	r0, r9
    122c:	40eb      	lsrs	r3, r5
    122e:	4318      	orrs	r0, r3
    1230:	0003      	movs	r3, r0
    1232:	4650      	mov	r0, sl
    1234:	4082      	lsls	r2, r0
    1236:	1e50      	subs	r0, r2, #1
    1238:	4182      	sbcs	r2, r0
    123a:	40e9      	lsrs	r1, r5
    123c:	431a      	orrs	r2, r3
    123e:	1aba      	subs	r2, r7, r2
    1240:	1a61      	subs	r1, r4, r1
    1242:	4297      	cmp	r7, r2
    1244:	41a4      	sbcs	r4, r4
    1246:	0017      	movs	r7, r2
    1248:	4264      	negs	r4, r4
    124a:	1b0c      	subs	r4, r1, r4
    124c:	0223      	lsls	r3, r4, #8
    124e:	d562      	bpl.n	1316 <__aeabi_dadd+0x17a>
    1250:	0264      	lsls	r4, r4, #9
    1252:	0a65      	lsrs	r5, r4, #9
    1254:	2d00      	cmp	r5, #0
    1256:	d100      	bne.n	125a <__aeabi_dadd+0xbe>
    1258:	e0df      	b.n	141a <__aeabi_dadd+0x27e>
    125a:	0028      	movs	r0, r5
    125c:	f001 fbe4 	bl	2a28 <__clzsi2>
    1260:	0003      	movs	r3, r0
    1262:	3b08      	subs	r3, #8
    1264:	2b1f      	cmp	r3, #31
    1266:	dd00      	ble.n	126a <__aeabi_dadd+0xce>
    1268:	e0d2      	b.n	1410 <__aeabi_dadd+0x274>
    126a:	2220      	movs	r2, #32
    126c:	003c      	movs	r4, r7
    126e:	1ad2      	subs	r2, r2, r3
    1270:	409d      	lsls	r5, r3
    1272:	40d4      	lsrs	r4, r2
    1274:	409f      	lsls	r7, r3
    1276:	4325      	orrs	r5, r4
    1278:	429e      	cmp	r6, r3
    127a:	dd00      	ble.n	127e <__aeabi_dadd+0xe2>
    127c:	e0c4      	b.n	1408 <__aeabi_dadd+0x26c>
    127e:	1b9e      	subs	r6, r3, r6
    1280:	1c73      	adds	r3, r6, #1
    1282:	2b1f      	cmp	r3, #31
    1284:	dd00      	ble.n	1288 <__aeabi_dadd+0xec>
    1286:	e0f1      	b.n	146c <__aeabi_dadd+0x2d0>
    1288:	2220      	movs	r2, #32
    128a:	0038      	movs	r0, r7
    128c:	0029      	movs	r1, r5
    128e:	1ad2      	subs	r2, r2, r3
    1290:	40d8      	lsrs	r0, r3
    1292:	4091      	lsls	r1, r2
    1294:	4097      	lsls	r7, r2
    1296:	002c      	movs	r4, r5
    1298:	4301      	orrs	r1, r0
    129a:	1e78      	subs	r0, r7, #1
    129c:	4187      	sbcs	r7, r0
    129e:	40dc      	lsrs	r4, r3
    12a0:	2600      	movs	r6, #0
    12a2:	430f      	orrs	r7, r1
    12a4:	077b      	lsls	r3, r7, #29
    12a6:	d009      	beq.n	12bc <__aeabi_dadd+0x120>
    12a8:	230f      	movs	r3, #15
    12aa:	403b      	ands	r3, r7
    12ac:	2b04      	cmp	r3, #4
    12ae:	d005      	beq.n	12bc <__aeabi_dadd+0x120>
    12b0:	1d3b      	adds	r3, r7, #4
    12b2:	42bb      	cmp	r3, r7
    12b4:	41bf      	sbcs	r7, r7
    12b6:	427f      	negs	r7, r7
    12b8:	19e4      	adds	r4, r4, r7
    12ba:	001f      	movs	r7, r3
    12bc:	0223      	lsls	r3, r4, #8
    12be:	d52c      	bpl.n	131a <__aeabi_dadd+0x17e>
    12c0:	4b96      	ldr	r3, [pc, #600]	; (151c <__aeabi_dadd+0x380>)
    12c2:	3601      	adds	r6, #1
    12c4:	429e      	cmp	r6, r3
    12c6:	d100      	bne.n	12ca <__aeabi_dadd+0x12e>
    12c8:	e09a      	b.n	1400 <__aeabi_dadd+0x264>
    12ca:	4645      	mov	r5, r8
    12cc:	4b94      	ldr	r3, [pc, #592]	; (1520 <__aeabi_dadd+0x384>)
    12ce:	08ff      	lsrs	r7, r7, #3
    12d0:	401c      	ands	r4, r3
    12d2:	0760      	lsls	r0, r4, #29
    12d4:	0576      	lsls	r6, r6, #21
    12d6:	0264      	lsls	r4, r4, #9
    12d8:	4307      	orrs	r7, r0
    12da:	0b24      	lsrs	r4, r4, #12
    12dc:	0d76      	lsrs	r6, r6, #21
    12de:	2100      	movs	r1, #0
    12e0:	0324      	lsls	r4, r4, #12
    12e2:	0b23      	lsrs	r3, r4, #12
    12e4:	0d0c      	lsrs	r4, r1, #20
    12e6:	4a8f      	ldr	r2, [pc, #572]	; (1524 <__aeabi_dadd+0x388>)
    12e8:	0524      	lsls	r4, r4, #20
    12ea:	431c      	orrs	r4, r3
    12ec:	4014      	ands	r4, r2
    12ee:	0533      	lsls	r3, r6, #20
    12f0:	4323      	orrs	r3, r4
    12f2:	005b      	lsls	r3, r3, #1
    12f4:	07ed      	lsls	r5, r5, #31
    12f6:	085b      	lsrs	r3, r3, #1
    12f8:	432b      	orrs	r3, r5
    12fa:	0038      	movs	r0, r7
    12fc:	0019      	movs	r1, r3
    12fe:	bc3c      	pop	{r2, r3, r4, r5}
    1300:	4690      	mov	r8, r2
    1302:	4699      	mov	r9, r3
    1304:	46a2      	mov	sl, r4
    1306:	46ab      	mov	fp, r5
    1308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130a:	4664      	mov	r4, ip
    130c:	4304      	orrs	r4, r0
    130e:	d100      	bne.n	1312 <__aeabi_dadd+0x176>
    1310:	e211      	b.n	1736 <__aeabi_dadd+0x59a>
    1312:	0004      	movs	r4, r0
    1314:	4667      	mov	r7, ip
    1316:	077b      	lsls	r3, r7, #29
    1318:	d1c6      	bne.n	12a8 <__aeabi_dadd+0x10c>
    131a:	4645      	mov	r5, r8
    131c:	0760      	lsls	r0, r4, #29
    131e:	08ff      	lsrs	r7, r7, #3
    1320:	4307      	orrs	r7, r0
    1322:	08e4      	lsrs	r4, r4, #3
    1324:	4b7d      	ldr	r3, [pc, #500]	; (151c <__aeabi_dadd+0x380>)
    1326:	429e      	cmp	r6, r3
    1328:	d030      	beq.n	138c <__aeabi_dadd+0x1f0>
    132a:	0324      	lsls	r4, r4, #12
    132c:	0576      	lsls	r6, r6, #21
    132e:	0b24      	lsrs	r4, r4, #12
    1330:	0d76      	lsrs	r6, r6, #21
    1332:	e7d4      	b.n	12de <__aeabi_dadd+0x142>
    1334:	1a33      	subs	r3, r6, r0
    1336:	469a      	mov	sl, r3
    1338:	2b00      	cmp	r3, #0
    133a:	dd78      	ble.n	142e <__aeabi_dadd+0x292>
    133c:	2800      	cmp	r0, #0
    133e:	d031      	beq.n	13a4 <__aeabi_dadd+0x208>
    1340:	4876      	ldr	r0, [pc, #472]	; (151c <__aeabi_dadd+0x380>)
    1342:	4286      	cmp	r6, r0
    1344:	d0ae      	beq.n	12a4 <__aeabi_dadd+0x108>
    1346:	2080      	movs	r0, #128	; 0x80
    1348:	0400      	lsls	r0, r0, #16
    134a:	4301      	orrs	r1, r0
    134c:	4653      	mov	r3, sl
    134e:	2b38      	cmp	r3, #56	; 0x38
    1350:	dc00      	bgt.n	1354 <__aeabi_dadd+0x1b8>
    1352:	e0e9      	b.n	1528 <__aeabi_dadd+0x38c>
    1354:	430a      	orrs	r2, r1
    1356:	1e51      	subs	r1, r2, #1
    1358:	418a      	sbcs	r2, r1
    135a:	2100      	movs	r1, #0
    135c:	19d2      	adds	r2, r2, r7
    135e:	42ba      	cmp	r2, r7
    1360:	41bf      	sbcs	r7, r7
    1362:	1909      	adds	r1, r1, r4
    1364:	427c      	negs	r4, r7
    1366:	0017      	movs	r7, r2
    1368:	190c      	adds	r4, r1, r4
    136a:	0223      	lsls	r3, r4, #8
    136c:	d5d3      	bpl.n	1316 <__aeabi_dadd+0x17a>
    136e:	4b6b      	ldr	r3, [pc, #428]	; (151c <__aeabi_dadd+0x380>)
    1370:	3601      	adds	r6, #1
    1372:	429e      	cmp	r6, r3
    1374:	d100      	bne.n	1378 <__aeabi_dadd+0x1dc>
    1376:	e13a      	b.n	15ee <__aeabi_dadd+0x452>
    1378:	2001      	movs	r0, #1
    137a:	4b69      	ldr	r3, [pc, #420]	; (1520 <__aeabi_dadd+0x384>)
    137c:	401c      	ands	r4, r3
    137e:	087b      	lsrs	r3, r7, #1
    1380:	4007      	ands	r7, r0
    1382:	431f      	orrs	r7, r3
    1384:	07e0      	lsls	r0, r4, #31
    1386:	4307      	orrs	r7, r0
    1388:	0864      	lsrs	r4, r4, #1
    138a:	e78b      	b.n	12a4 <__aeabi_dadd+0x108>
    138c:	0023      	movs	r3, r4
    138e:	433b      	orrs	r3, r7
    1390:	d100      	bne.n	1394 <__aeabi_dadd+0x1f8>
    1392:	e1cb      	b.n	172c <__aeabi_dadd+0x590>
    1394:	2280      	movs	r2, #128	; 0x80
    1396:	0312      	lsls	r2, r2, #12
    1398:	4314      	orrs	r4, r2
    139a:	0324      	lsls	r4, r4, #12
    139c:	0b24      	lsrs	r4, r4, #12
    139e:	e79e      	b.n	12de <__aeabi_dadd+0x142>
    13a0:	002e      	movs	r6, r5
    13a2:	e77f      	b.n	12a4 <__aeabi_dadd+0x108>
    13a4:	0008      	movs	r0, r1
    13a6:	4310      	orrs	r0, r2
    13a8:	d100      	bne.n	13ac <__aeabi_dadd+0x210>
    13aa:	e0b4      	b.n	1516 <__aeabi_dadd+0x37a>
    13ac:	1e58      	subs	r0, r3, #1
    13ae:	2800      	cmp	r0, #0
    13b0:	d000      	beq.n	13b4 <__aeabi_dadd+0x218>
    13b2:	e0de      	b.n	1572 <__aeabi_dadd+0x3d6>
    13b4:	18ba      	adds	r2, r7, r2
    13b6:	42ba      	cmp	r2, r7
    13b8:	419b      	sbcs	r3, r3
    13ba:	1864      	adds	r4, r4, r1
    13bc:	425b      	negs	r3, r3
    13be:	18e4      	adds	r4, r4, r3
    13c0:	0017      	movs	r7, r2
    13c2:	2601      	movs	r6, #1
    13c4:	0223      	lsls	r3, r4, #8
    13c6:	d5a6      	bpl.n	1316 <__aeabi_dadd+0x17a>
    13c8:	2602      	movs	r6, #2
    13ca:	e7d5      	b.n	1378 <__aeabi_dadd+0x1dc>
    13cc:	2d00      	cmp	r5, #0
    13ce:	d16e      	bne.n	14ae <__aeabi_dadd+0x312>
    13d0:	1c70      	adds	r0, r6, #1
    13d2:	0540      	lsls	r0, r0, #21
    13d4:	0d40      	lsrs	r0, r0, #21
    13d6:	2801      	cmp	r0, #1
    13d8:	dc00      	bgt.n	13dc <__aeabi_dadd+0x240>
    13da:	e0f9      	b.n	15d0 <__aeabi_dadd+0x434>
    13dc:	1ab8      	subs	r0, r7, r2
    13de:	4684      	mov	ip, r0
    13e0:	4287      	cmp	r7, r0
    13e2:	4180      	sbcs	r0, r0
    13e4:	1ae5      	subs	r5, r4, r3
    13e6:	4240      	negs	r0, r0
    13e8:	1a2d      	subs	r5, r5, r0
    13ea:	0228      	lsls	r0, r5, #8
    13ec:	d400      	bmi.n	13f0 <__aeabi_dadd+0x254>
    13ee:	e089      	b.n	1504 <__aeabi_dadd+0x368>
    13f0:	1bd7      	subs	r7, r2, r7
    13f2:	42ba      	cmp	r2, r7
    13f4:	4192      	sbcs	r2, r2
    13f6:	1b1c      	subs	r4, r3, r4
    13f8:	4252      	negs	r2, r2
    13fa:	1aa5      	subs	r5, r4, r2
    13fc:	46d8      	mov	r8, fp
    13fe:	e729      	b.n	1254 <__aeabi_dadd+0xb8>
    1400:	4645      	mov	r5, r8
    1402:	2400      	movs	r4, #0
    1404:	2700      	movs	r7, #0
    1406:	e76a      	b.n	12de <__aeabi_dadd+0x142>
    1408:	4c45      	ldr	r4, [pc, #276]	; (1520 <__aeabi_dadd+0x384>)
    140a:	1af6      	subs	r6, r6, r3
    140c:	402c      	ands	r4, r5
    140e:	e749      	b.n	12a4 <__aeabi_dadd+0x108>
    1410:	003d      	movs	r5, r7
    1412:	3828      	subs	r0, #40	; 0x28
    1414:	4085      	lsls	r5, r0
    1416:	2700      	movs	r7, #0
    1418:	e72e      	b.n	1278 <__aeabi_dadd+0xdc>
    141a:	0038      	movs	r0, r7
    141c:	f001 fb04 	bl	2a28 <__clzsi2>
    1420:	3020      	adds	r0, #32
    1422:	e71d      	b.n	1260 <__aeabi_dadd+0xc4>
    1424:	430a      	orrs	r2, r1
    1426:	1e51      	subs	r1, r2, #1
    1428:	418a      	sbcs	r2, r1
    142a:	2100      	movs	r1, #0
    142c:	e707      	b.n	123e <__aeabi_dadd+0xa2>
    142e:	2b00      	cmp	r3, #0
    1430:	d000      	beq.n	1434 <__aeabi_dadd+0x298>
    1432:	e0f3      	b.n	161c <__aeabi_dadd+0x480>
    1434:	1c70      	adds	r0, r6, #1
    1436:	0543      	lsls	r3, r0, #21
    1438:	0d5b      	lsrs	r3, r3, #21
    143a:	2b01      	cmp	r3, #1
    143c:	dc00      	bgt.n	1440 <__aeabi_dadd+0x2a4>
    143e:	e0ad      	b.n	159c <__aeabi_dadd+0x400>
    1440:	4b36      	ldr	r3, [pc, #216]	; (151c <__aeabi_dadd+0x380>)
    1442:	4298      	cmp	r0, r3
    1444:	d100      	bne.n	1448 <__aeabi_dadd+0x2ac>
    1446:	e0d1      	b.n	15ec <__aeabi_dadd+0x450>
    1448:	18ba      	adds	r2, r7, r2
    144a:	42ba      	cmp	r2, r7
    144c:	41bf      	sbcs	r7, r7
    144e:	1864      	adds	r4, r4, r1
    1450:	427f      	negs	r7, r7
    1452:	19e4      	adds	r4, r4, r7
    1454:	07e7      	lsls	r7, r4, #31
    1456:	0852      	lsrs	r2, r2, #1
    1458:	4317      	orrs	r7, r2
    145a:	0864      	lsrs	r4, r4, #1
    145c:	0006      	movs	r6, r0
    145e:	e721      	b.n	12a4 <__aeabi_dadd+0x108>
    1460:	482e      	ldr	r0, [pc, #184]	; (151c <__aeabi_dadd+0x380>)
    1462:	4285      	cmp	r5, r0
    1464:	d100      	bne.n	1468 <__aeabi_dadd+0x2cc>
    1466:	e093      	b.n	1590 <__aeabi_dadd+0x3f4>
    1468:	001d      	movs	r5, r3
    146a:	e6d0      	b.n	120e <__aeabi_dadd+0x72>
    146c:	0029      	movs	r1, r5
    146e:	3e1f      	subs	r6, #31
    1470:	40f1      	lsrs	r1, r6
    1472:	2b20      	cmp	r3, #32
    1474:	d100      	bne.n	1478 <__aeabi_dadd+0x2dc>
    1476:	e08d      	b.n	1594 <__aeabi_dadd+0x3f8>
    1478:	2240      	movs	r2, #64	; 0x40
    147a:	1ad3      	subs	r3, r2, r3
    147c:	409d      	lsls	r5, r3
    147e:	432f      	orrs	r7, r5
    1480:	1e7d      	subs	r5, r7, #1
    1482:	41af      	sbcs	r7, r5
    1484:	2400      	movs	r4, #0
    1486:	430f      	orrs	r7, r1
    1488:	2600      	movs	r6, #0
    148a:	e744      	b.n	1316 <__aeabi_dadd+0x17a>
    148c:	002b      	movs	r3, r5
    148e:	0008      	movs	r0, r1
    1490:	3b20      	subs	r3, #32
    1492:	40d8      	lsrs	r0, r3
    1494:	0003      	movs	r3, r0
    1496:	2d20      	cmp	r5, #32
    1498:	d100      	bne.n	149c <__aeabi_dadd+0x300>
    149a:	e07d      	b.n	1598 <__aeabi_dadd+0x3fc>
    149c:	2040      	movs	r0, #64	; 0x40
    149e:	1b45      	subs	r5, r0, r5
    14a0:	40a9      	lsls	r1, r5
    14a2:	430a      	orrs	r2, r1
    14a4:	1e51      	subs	r1, r2, #1
    14a6:	418a      	sbcs	r2, r1
    14a8:	2100      	movs	r1, #0
    14aa:	431a      	orrs	r2, r3
    14ac:	e6c7      	b.n	123e <__aeabi_dadd+0xa2>
    14ae:	2e00      	cmp	r6, #0
    14b0:	d050      	beq.n	1554 <__aeabi_dadd+0x3b8>
    14b2:	4e1a      	ldr	r6, [pc, #104]	; (151c <__aeabi_dadd+0x380>)
    14b4:	42b0      	cmp	r0, r6
    14b6:	d057      	beq.n	1568 <__aeabi_dadd+0x3cc>
    14b8:	2680      	movs	r6, #128	; 0x80
    14ba:	426b      	negs	r3, r5
    14bc:	4699      	mov	r9, r3
    14be:	0436      	lsls	r6, r6, #16
    14c0:	4334      	orrs	r4, r6
    14c2:	464b      	mov	r3, r9
    14c4:	2b38      	cmp	r3, #56	; 0x38
    14c6:	dd00      	ble.n	14ca <__aeabi_dadd+0x32e>
    14c8:	e0d6      	b.n	1678 <__aeabi_dadd+0x4dc>
    14ca:	2b1f      	cmp	r3, #31
    14cc:	dd00      	ble.n	14d0 <__aeabi_dadd+0x334>
    14ce:	e135      	b.n	173c <__aeabi_dadd+0x5a0>
    14d0:	2620      	movs	r6, #32
    14d2:	1af5      	subs	r5, r6, r3
    14d4:	0026      	movs	r6, r4
    14d6:	40ae      	lsls	r6, r5
    14d8:	46b2      	mov	sl, r6
    14da:	003e      	movs	r6, r7
    14dc:	40de      	lsrs	r6, r3
    14de:	46ac      	mov	ip, r5
    14e0:	0035      	movs	r5, r6
    14e2:	4656      	mov	r6, sl
    14e4:	432e      	orrs	r6, r5
    14e6:	4665      	mov	r5, ip
    14e8:	40af      	lsls	r7, r5
    14ea:	1e7d      	subs	r5, r7, #1
    14ec:	41af      	sbcs	r7, r5
    14ee:	40dc      	lsrs	r4, r3
    14f0:	4337      	orrs	r7, r6
    14f2:	1bd7      	subs	r7, r2, r7
    14f4:	42ba      	cmp	r2, r7
    14f6:	4192      	sbcs	r2, r2
    14f8:	1b0c      	subs	r4, r1, r4
    14fa:	4252      	negs	r2, r2
    14fc:	1aa4      	subs	r4, r4, r2
    14fe:	0006      	movs	r6, r0
    1500:	46d8      	mov	r8, fp
    1502:	e6a3      	b.n	124c <__aeabi_dadd+0xb0>
    1504:	4664      	mov	r4, ip
    1506:	4667      	mov	r7, ip
    1508:	432c      	orrs	r4, r5
    150a:	d000      	beq.n	150e <__aeabi_dadd+0x372>
    150c:	e6a2      	b.n	1254 <__aeabi_dadd+0xb8>
    150e:	2500      	movs	r5, #0
    1510:	2600      	movs	r6, #0
    1512:	2700      	movs	r7, #0
    1514:	e706      	b.n	1324 <__aeabi_dadd+0x188>
    1516:	001e      	movs	r6, r3
    1518:	e6c4      	b.n	12a4 <__aeabi_dadd+0x108>
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	000007ff 	.word	0x000007ff
    1520:	ff7fffff 	.word	0xff7fffff
    1524:	800fffff 	.word	0x800fffff
    1528:	2b1f      	cmp	r3, #31
    152a:	dc63      	bgt.n	15f4 <__aeabi_dadd+0x458>
    152c:	2020      	movs	r0, #32
    152e:	1ac3      	subs	r3, r0, r3
    1530:	0008      	movs	r0, r1
    1532:	4098      	lsls	r0, r3
    1534:	469c      	mov	ip, r3
    1536:	4683      	mov	fp, r0
    1538:	4653      	mov	r3, sl
    153a:	0010      	movs	r0, r2
    153c:	40d8      	lsrs	r0, r3
    153e:	0003      	movs	r3, r0
    1540:	4658      	mov	r0, fp
    1542:	4318      	orrs	r0, r3
    1544:	4663      	mov	r3, ip
    1546:	409a      	lsls	r2, r3
    1548:	1e53      	subs	r3, r2, #1
    154a:	419a      	sbcs	r2, r3
    154c:	4653      	mov	r3, sl
    154e:	4302      	orrs	r2, r0
    1550:	40d9      	lsrs	r1, r3
    1552:	e703      	b.n	135c <__aeabi_dadd+0x1c0>
    1554:	0026      	movs	r6, r4
    1556:	433e      	orrs	r6, r7
    1558:	d006      	beq.n	1568 <__aeabi_dadd+0x3cc>
    155a:	43eb      	mvns	r3, r5
    155c:	4699      	mov	r9, r3
    155e:	2b00      	cmp	r3, #0
    1560:	d0c7      	beq.n	14f2 <__aeabi_dadd+0x356>
    1562:	4e94      	ldr	r6, [pc, #592]	; (17b4 <__aeabi_dadd+0x618>)
    1564:	42b0      	cmp	r0, r6
    1566:	d1ac      	bne.n	14c2 <__aeabi_dadd+0x326>
    1568:	000c      	movs	r4, r1
    156a:	0017      	movs	r7, r2
    156c:	0006      	movs	r6, r0
    156e:	46d8      	mov	r8, fp
    1570:	e698      	b.n	12a4 <__aeabi_dadd+0x108>
    1572:	4b90      	ldr	r3, [pc, #576]	; (17b4 <__aeabi_dadd+0x618>)
    1574:	459a      	cmp	sl, r3
    1576:	d00b      	beq.n	1590 <__aeabi_dadd+0x3f4>
    1578:	4682      	mov	sl, r0
    157a:	e6e7      	b.n	134c <__aeabi_dadd+0x1b0>
    157c:	2800      	cmp	r0, #0
    157e:	d000      	beq.n	1582 <__aeabi_dadd+0x3e6>
    1580:	e09e      	b.n	16c0 <__aeabi_dadd+0x524>
    1582:	0018      	movs	r0, r3
    1584:	4310      	orrs	r0, r2
    1586:	d100      	bne.n	158a <__aeabi_dadd+0x3ee>
    1588:	e0e9      	b.n	175e <__aeabi_dadd+0x5c2>
    158a:	001c      	movs	r4, r3
    158c:	0017      	movs	r7, r2
    158e:	46d8      	mov	r8, fp
    1590:	4e88      	ldr	r6, [pc, #544]	; (17b4 <__aeabi_dadd+0x618>)
    1592:	e687      	b.n	12a4 <__aeabi_dadd+0x108>
    1594:	2500      	movs	r5, #0
    1596:	e772      	b.n	147e <__aeabi_dadd+0x2e2>
    1598:	2100      	movs	r1, #0
    159a:	e782      	b.n	14a2 <__aeabi_dadd+0x306>
    159c:	0023      	movs	r3, r4
    159e:	433b      	orrs	r3, r7
    15a0:	2e00      	cmp	r6, #0
    15a2:	d000      	beq.n	15a6 <__aeabi_dadd+0x40a>
    15a4:	e0ab      	b.n	16fe <__aeabi_dadd+0x562>
    15a6:	2b00      	cmp	r3, #0
    15a8:	d100      	bne.n	15ac <__aeabi_dadd+0x410>
    15aa:	e0e7      	b.n	177c <__aeabi_dadd+0x5e0>
    15ac:	000b      	movs	r3, r1
    15ae:	4313      	orrs	r3, r2
    15b0:	d100      	bne.n	15b4 <__aeabi_dadd+0x418>
    15b2:	e677      	b.n	12a4 <__aeabi_dadd+0x108>
    15b4:	18ba      	adds	r2, r7, r2
    15b6:	42ba      	cmp	r2, r7
    15b8:	41bf      	sbcs	r7, r7
    15ba:	1864      	adds	r4, r4, r1
    15bc:	427f      	negs	r7, r7
    15be:	19e4      	adds	r4, r4, r7
    15c0:	0223      	lsls	r3, r4, #8
    15c2:	d400      	bmi.n	15c6 <__aeabi_dadd+0x42a>
    15c4:	e0f2      	b.n	17ac <__aeabi_dadd+0x610>
    15c6:	4b7c      	ldr	r3, [pc, #496]	; (17b8 <__aeabi_dadd+0x61c>)
    15c8:	0017      	movs	r7, r2
    15ca:	401c      	ands	r4, r3
    15cc:	0006      	movs	r6, r0
    15ce:	e669      	b.n	12a4 <__aeabi_dadd+0x108>
    15d0:	0020      	movs	r0, r4
    15d2:	4338      	orrs	r0, r7
    15d4:	2e00      	cmp	r6, #0
    15d6:	d1d1      	bne.n	157c <__aeabi_dadd+0x3e0>
    15d8:	2800      	cmp	r0, #0
    15da:	d15b      	bne.n	1694 <__aeabi_dadd+0x4f8>
    15dc:	001c      	movs	r4, r3
    15de:	4314      	orrs	r4, r2
    15e0:	d100      	bne.n	15e4 <__aeabi_dadd+0x448>
    15e2:	e0a8      	b.n	1736 <__aeabi_dadd+0x59a>
    15e4:	001c      	movs	r4, r3
    15e6:	0017      	movs	r7, r2
    15e8:	46d8      	mov	r8, fp
    15ea:	e65b      	b.n	12a4 <__aeabi_dadd+0x108>
    15ec:	0006      	movs	r6, r0
    15ee:	2400      	movs	r4, #0
    15f0:	2700      	movs	r7, #0
    15f2:	e697      	b.n	1324 <__aeabi_dadd+0x188>
    15f4:	4650      	mov	r0, sl
    15f6:	000b      	movs	r3, r1
    15f8:	3820      	subs	r0, #32
    15fa:	40c3      	lsrs	r3, r0
    15fc:	4699      	mov	r9, r3
    15fe:	4653      	mov	r3, sl
    1600:	2b20      	cmp	r3, #32
    1602:	d100      	bne.n	1606 <__aeabi_dadd+0x46a>
    1604:	e095      	b.n	1732 <__aeabi_dadd+0x596>
    1606:	2340      	movs	r3, #64	; 0x40
    1608:	4650      	mov	r0, sl
    160a:	1a1b      	subs	r3, r3, r0
    160c:	4099      	lsls	r1, r3
    160e:	430a      	orrs	r2, r1
    1610:	1e51      	subs	r1, r2, #1
    1612:	418a      	sbcs	r2, r1
    1614:	464b      	mov	r3, r9
    1616:	2100      	movs	r1, #0
    1618:	431a      	orrs	r2, r3
    161a:	e69f      	b.n	135c <__aeabi_dadd+0x1c0>
    161c:	2e00      	cmp	r6, #0
    161e:	d130      	bne.n	1682 <__aeabi_dadd+0x4e6>
    1620:	0026      	movs	r6, r4
    1622:	433e      	orrs	r6, r7
    1624:	d067      	beq.n	16f6 <__aeabi_dadd+0x55a>
    1626:	43db      	mvns	r3, r3
    1628:	469a      	mov	sl, r3
    162a:	2b00      	cmp	r3, #0
    162c:	d01c      	beq.n	1668 <__aeabi_dadd+0x4cc>
    162e:	4e61      	ldr	r6, [pc, #388]	; (17b4 <__aeabi_dadd+0x618>)
    1630:	42b0      	cmp	r0, r6
    1632:	d060      	beq.n	16f6 <__aeabi_dadd+0x55a>
    1634:	4653      	mov	r3, sl
    1636:	2b38      	cmp	r3, #56	; 0x38
    1638:	dd00      	ble.n	163c <__aeabi_dadd+0x4a0>
    163a:	e096      	b.n	176a <__aeabi_dadd+0x5ce>
    163c:	2b1f      	cmp	r3, #31
    163e:	dd00      	ble.n	1642 <__aeabi_dadd+0x4a6>
    1640:	e09f      	b.n	1782 <__aeabi_dadd+0x5e6>
    1642:	2620      	movs	r6, #32
    1644:	1af3      	subs	r3, r6, r3
    1646:	0026      	movs	r6, r4
    1648:	409e      	lsls	r6, r3
    164a:	469c      	mov	ip, r3
    164c:	46b3      	mov	fp, r6
    164e:	4653      	mov	r3, sl
    1650:	003e      	movs	r6, r7
    1652:	40de      	lsrs	r6, r3
    1654:	0033      	movs	r3, r6
    1656:	465e      	mov	r6, fp
    1658:	431e      	orrs	r6, r3
    165a:	4663      	mov	r3, ip
    165c:	409f      	lsls	r7, r3
    165e:	1e7b      	subs	r3, r7, #1
    1660:	419f      	sbcs	r7, r3
    1662:	4653      	mov	r3, sl
    1664:	40dc      	lsrs	r4, r3
    1666:	4337      	orrs	r7, r6
    1668:	18bf      	adds	r7, r7, r2
    166a:	4297      	cmp	r7, r2
    166c:	4192      	sbcs	r2, r2
    166e:	1864      	adds	r4, r4, r1
    1670:	4252      	negs	r2, r2
    1672:	18a4      	adds	r4, r4, r2
    1674:	0006      	movs	r6, r0
    1676:	e678      	b.n	136a <__aeabi_dadd+0x1ce>
    1678:	4327      	orrs	r7, r4
    167a:	1e7c      	subs	r4, r7, #1
    167c:	41a7      	sbcs	r7, r4
    167e:	2400      	movs	r4, #0
    1680:	e737      	b.n	14f2 <__aeabi_dadd+0x356>
    1682:	4e4c      	ldr	r6, [pc, #304]	; (17b4 <__aeabi_dadd+0x618>)
    1684:	42b0      	cmp	r0, r6
    1686:	d036      	beq.n	16f6 <__aeabi_dadd+0x55a>
    1688:	2680      	movs	r6, #128	; 0x80
    168a:	425b      	negs	r3, r3
    168c:	0436      	lsls	r6, r6, #16
    168e:	469a      	mov	sl, r3
    1690:	4334      	orrs	r4, r6
    1692:	e7cf      	b.n	1634 <__aeabi_dadd+0x498>
    1694:	0018      	movs	r0, r3
    1696:	4310      	orrs	r0, r2
    1698:	d100      	bne.n	169c <__aeabi_dadd+0x500>
    169a:	e603      	b.n	12a4 <__aeabi_dadd+0x108>
    169c:	1ab8      	subs	r0, r7, r2
    169e:	4684      	mov	ip, r0
    16a0:	4567      	cmp	r7, ip
    16a2:	41ad      	sbcs	r5, r5
    16a4:	1ae0      	subs	r0, r4, r3
    16a6:	426d      	negs	r5, r5
    16a8:	1b40      	subs	r0, r0, r5
    16aa:	0205      	lsls	r5, r0, #8
    16ac:	d400      	bmi.n	16b0 <__aeabi_dadd+0x514>
    16ae:	e62c      	b.n	130a <__aeabi_dadd+0x16e>
    16b0:	1bd7      	subs	r7, r2, r7
    16b2:	42ba      	cmp	r2, r7
    16b4:	4192      	sbcs	r2, r2
    16b6:	1b1c      	subs	r4, r3, r4
    16b8:	4252      	negs	r2, r2
    16ba:	1aa4      	subs	r4, r4, r2
    16bc:	46d8      	mov	r8, fp
    16be:	e5f1      	b.n	12a4 <__aeabi_dadd+0x108>
    16c0:	0018      	movs	r0, r3
    16c2:	4310      	orrs	r0, r2
    16c4:	d100      	bne.n	16c8 <__aeabi_dadd+0x52c>
    16c6:	e763      	b.n	1590 <__aeabi_dadd+0x3f4>
    16c8:	08f8      	lsrs	r0, r7, #3
    16ca:	0767      	lsls	r7, r4, #29
    16cc:	4307      	orrs	r7, r0
    16ce:	2080      	movs	r0, #128	; 0x80
    16d0:	08e4      	lsrs	r4, r4, #3
    16d2:	0300      	lsls	r0, r0, #12
    16d4:	4204      	tst	r4, r0
    16d6:	d008      	beq.n	16ea <__aeabi_dadd+0x54e>
    16d8:	08dd      	lsrs	r5, r3, #3
    16da:	4205      	tst	r5, r0
    16dc:	d105      	bne.n	16ea <__aeabi_dadd+0x54e>
    16de:	08d2      	lsrs	r2, r2, #3
    16e0:	0759      	lsls	r1, r3, #29
    16e2:	4311      	orrs	r1, r2
    16e4:	000f      	movs	r7, r1
    16e6:	002c      	movs	r4, r5
    16e8:	46d8      	mov	r8, fp
    16ea:	0f7b      	lsrs	r3, r7, #29
    16ec:	00e4      	lsls	r4, r4, #3
    16ee:	431c      	orrs	r4, r3
    16f0:	00ff      	lsls	r7, r7, #3
    16f2:	4e30      	ldr	r6, [pc, #192]	; (17b4 <__aeabi_dadd+0x618>)
    16f4:	e5d6      	b.n	12a4 <__aeabi_dadd+0x108>
    16f6:	000c      	movs	r4, r1
    16f8:	0017      	movs	r7, r2
    16fa:	0006      	movs	r6, r0
    16fc:	e5d2      	b.n	12a4 <__aeabi_dadd+0x108>
    16fe:	2b00      	cmp	r3, #0
    1700:	d038      	beq.n	1774 <__aeabi_dadd+0x5d8>
    1702:	000b      	movs	r3, r1
    1704:	4313      	orrs	r3, r2
    1706:	d100      	bne.n	170a <__aeabi_dadd+0x56e>
    1708:	e742      	b.n	1590 <__aeabi_dadd+0x3f4>
    170a:	08f8      	lsrs	r0, r7, #3
    170c:	0767      	lsls	r7, r4, #29
    170e:	4307      	orrs	r7, r0
    1710:	2080      	movs	r0, #128	; 0x80
    1712:	08e4      	lsrs	r4, r4, #3
    1714:	0300      	lsls	r0, r0, #12
    1716:	4204      	tst	r4, r0
    1718:	d0e7      	beq.n	16ea <__aeabi_dadd+0x54e>
    171a:	08cb      	lsrs	r3, r1, #3
    171c:	4203      	tst	r3, r0
    171e:	d1e4      	bne.n	16ea <__aeabi_dadd+0x54e>
    1720:	08d2      	lsrs	r2, r2, #3
    1722:	0749      	lsls	r1, r1, #29
    1724:	4311      	orrs	r1, r2
    1726:	000f      	movs	r7, r1
    1728:	001c      	movs	r4, r3
    172a:	e7de      	b.n	16ea <__aeabi_dadd+0x54e>
    172c:	2700      	movs	r7, #0
    172e:	2400      	movs	r4, #0
    1730:	e5d5      	b.n	12de <__aeabi_dadd+0x142>
    1732:	2100      	movs	r1, #0
    1734:	e76b      	b.n	160e <__aeabi_dadd+0x472>
    1736:	2500      	movs	r5, #0
    1738:	2700      	movs	r7, #0
    173a:	e5f3      	b.n	1324 <__aeabi_dadd+0x188>
    173c:	464e      	mov	r6, r9
    173e:	0025      	movs	r5, r4
    1740:	3e20      	subs	r6, #32
    1742:	40f5      	lsrs	r5, r6
    1744:	464b      	mov	r3, r9
    1746:	002e      	movs	r6, r5
    1748:	2b20      	cmp	r3, #32
    174a:	d02d      	beq.n	17a8 <__aeabi_dadd+0x60c>
    174c:	2540      	movs	r5, #64	; 0x40
    174e:	1aed      	subs	r5, r5, r3
    1750:	40ac      	lsls	r4, r5
    1752:	4327      	orrs	r7, r4
    1754:	1e7c      	subs	r4, r7, #1
    1756:	41a7      	sbcs	r7, r4
    1758:	2400      	movs	r4, #0
    175a:	4337      	orrs	r7, r6
    175c:	e6c9      	b.n	14f2 <__aeabi_dadd+0x356>
    175e:	2480      	movs	r4, #128	; 0x80
    1760:	2500      	movs	r5, #0
    1762:	0324      	lsls	r4, r4, #12
    1764:	4e13      	ldr	r6, [pc, #76]	; (17b4 <__aeabi_dadd+0x618>)
    1766:	2700      	movs	r7, #0
    1768:	e5dc      	b.n	1324 <__aeabi_dadd+0x188>
    176a:	4327      	orrs	r7, r4
    176c:	1e7c      	subs	r4, r7, #1
    176e:	41a7      	sbcs	r7, r4
    1770:	2400      	movs	r4, #0
    1772:	e779      	b.n	1668 <__aeabi_dadd+0x4cc>
    1774:	000c      	movs	r4, r1
    1776:	0017      	movs	r7, r2
    1778:	4e0e      	ldr	r6, [pc, #56]	; (17b4 <__aeabi_dadd+0x618>)
    177a:	e593      	b.n	12a4 <__aeabi_dadd+0x108>
    177c:	000c      	movs	r4, r1
    177e:	0017      	movs	r7, r2
    1780:	e590      	b.n	12a4 <__aeabi_dadd+0x108>
    1782:	4656      	mov	r6, sl
    1784:	0023      	movs	r3, r4
    1786:	3e20      	subs	r6, #32
    1788:	40f3      	lsrs	r3, r6
    178a:	4699      	mov	r9, r3
    178c:	4653      	mov	r3, sl
    178e:	2b20      	cmp	r3, #32
    1790:	d00e      	beq.n	17b0 <__aeabi_dadd+0x614>
    1792:	2340      	movs	r3, #64	; 0x40
    1794:	4656      	mov	r6, sl
    1796:	1b9b      	subs	r3, r3, r6
    1798:	409c      	lsls	r4, r3
    179a:	4327      	orrs	r7, r4
    179c:	1e7c      	subs	r4, r7, #1
    179e:	41a7      	sbcs	r7, r4
    17a0:	464b      	mov	r3, r9
    17a2:	2400      	movs	r4, #0
    17a4:	431f      	orrs	r7, r3
    17a6:	e75f      	b.n	1668 <__aeabi_dadd+0x4cc>
    17a8:	2400      	movs	r4, #0
    17aa:	e7d2      	b.n	1752 <__aeabi_dadd+0x5b6>
    17ac:	0017      	movs	r7, r2
    17ae:	e5b2      	b.n	1316 <__aeabi_dadd+0x17a>
    17b0:	2400      	movs	r4, #0
    17b2:	e7f2      	b.n	179a <__aeabi_dadd+0x5fe>
    17b4:	000007ff 	.word	0x000007ff
    17b8:	ff7fffff 	.word	0xff7fffff

000017bc <__aeabi_ddiv>:
    17bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17be:	4657      	mov	r7, sl
    17c0:	4645      	mov	r5, r8
    17c2:	46de      	mov	lr, fp
    17c4:	464e      	mov	r6, r9
    17c6:	b5e0      	push	{r5, r6, r7, lr}
    17c8:	004c      	lsls	r4, r1, #1
    17ca:	030e      	lsls	r6, r1, #12
    17cc:	b087      	sub	sp, #28
    17ce:	4683      	mov	fp, r0
    17d0:	4692      	mov	sl, r2
    17d2:	001d      	movs	r5, r3
    17d4:	4680      	mov	r8, r0
    17d6:	0b36      	lsrs	r6, r6, #12
    17d8:	0d64      	lsrs	r4, r4, #21
    17da:	0fcf      	lsrs	r7, r1, #31
    17dc:	2c00      	cmp	r4, #0
    17de:	d04f      	beq.n	1880 <__aeabi_ddiv+0xc4>
    17e0:	4b6f      	ldr	r3, [pc, #444]	; (19a0 <__aeabi_ddiv+0x1e4>)
    17e2:	429c      	cmp	r4, r3
    17e4:	d035      	beq.n	1852 <__aeabi_ddiv+0x96>
    17e6:	2380      	movs	r3, #128	; 0x80
    17e8:	0f42      	lsrs	r2, r0, #29
    17ea:	041b      	lsls	r3, r3, #16
    17ec:	00f6      	lsls	r6, r6, #3
    17ee:	4313      	orrs	r3, r2
    17f0:	4333      	orrs	r3, r6
    17f2:	4699      	mov	r9, r3
    17f4:	00c3      	lsls	r3, r0, #3
    17f6:	4698      	mov	r8, r3
    17f8:	4b6a      	ldr	r3, [pc, #424]	; (19a4 <__aeabi_ddiv+0x1e8>)
    17fa:	2600      	movs	r6, #0
    17fc:	469c      	mov	ip, r3
    17fe:	2300      	movs	r3, #0
    1800:	4464      	add	r4, ip
    1802:	9303      	str	r3, [sp, #12]
    1804:	032b      	lsls	r3, r5, #12
    1806:	0b1b      	lsrs	r3, r3, #12
    1808:	469b      	mov	fp, r3
    180a:	006b      	lsls	r3, r5, #1
    180c:	0fed      	lsrs	r5, r5, #31
    180e:	4650      	mov	r0, sl
    1810:	0d5b      	lsrs	r3, r3, #21
    1812:	9501      	str	r5, [sp, #4]
    1814:	d05e      	beq.n	18d4 <__aeabi_ddiv+0x118>
    1816:	4a62      	ldr	r2, [pc, #392]	; (19a0 <__aeabi_ddiv+0x1e4>)
    1818:	4293      	cmp	r3, r2
    181a:	d053      	beq.n	18c4 <__aeabi_ddiv+0x108>
    181c:	465a      	mov	r2, fp
    181e:	00d1      	lsls	r1, r2, #3
    1820:	2280      	movs	r2, #128	; 0x80
    1822:	0f40      	lsrs	r0, r0, #29
    1824:	0412      	lsls	r2, r2, #16
    1826:	4302      	orrs	r2, r0
    1828:	430a      	orrs	r2, r1
    182a:	4693      	mov	fp, r2
    182c:	4652      	mov	r2, sl
    182e:	00d1      	lsls	r1, r2, #3
    1830:	4a5c      	ldr	r2, [pc, #368]	; (19a4 <__aeabi_ddiv+0x1e8>)
    1832:	4694      	mov	ip, r2
    1834:	2200      	movs	r2, #0
    1836:	4463      	add	r3, ip
    1838:	0038      	movs	r0, r7
    183a:	4068      	eors	r0, r5
    183c:	4684      	mov	ip, r0
    183e:	9002      	str	r0, [sp, #8]
    1840:	1ae4      	subs	r4, r4, r3
    1842:	4316      	orrs	r6, r2
    1844:	2e0f      	cmp	r6, #15
    1846:	d900      	bls.n	184a <__aeabi_ddiv+0x8e>
    1848:	e0b4      	b.n	19b4 <__aeabi_ddiv+0x1f8>
    184a:	4b57      	ldr	r3, [pc, #348]	; (19a8 <__aeabi_ddiv+0x1ec>)
    184c:	00b6      	lsls	r6, r6, #2
    184e:	599b      	ldr	r3, [r3, r6]
    1850:	469f      	mov	pc, r3
    1852:	0003      	movs	r3, r0
    1854:	4333      	orrs	r3, r6
    1856:	4699      	mov	r9, r3
    1858:	d16c      	bne.n	1934 <__aeabi_ddiv+0x178>
    185a:	2300      	movs	r3, #0
    185c:	4698      	mov	r8, r3
    185e:	3302      	adds	r3, #2
    1860:	2608      	movs	r6, #8
    1862:	9303      	str	r3, [sp, #12]
    1864:	e7ce      	b.n	1804 <__aeabi_ddiv+0x48>
    1866:	46cb      	mov	fp, r9
    1868:	4641      	mov	r1, r8
    186a:	9a03      	ldr	r2, [sp, #12]
    186c:	9701      	str	r7, [sp, #4]
    186e:	2a02      	cmp	r2, #2
    1870:	d165      	bne.n	193e <__aeabi_ddiv+0x182>
    1872:	9b01      	ldr	r3, [sp, #4]
    1874:	4c4a      	ldr	r4, [pc, #296]	; (19a0 <__aeabi_ddiv+0x1e4>)
    1876:	469c      	mov	ip, r3
    1878:	2300      	movs	r3, #0
    187a:	2200      	movs	r2, #0
    187c:	4698      	mov	r8, r3
    187e:	e06b      	b.n	1958 <__aeabi_ddiv+0x19c>
    1880:	0003      	movs	r3, r0
    1882:	4333      	orrs	r3, r6
    1884:	4699      	mov	r9, r3
    1886:	d04e      	beq.n	1926 <__aeabi_ddiv+0x16a>
    1888:	2e00      	cmp	r6, #0
    188a:	d100      	bne.n	188e <__aeabi_ddiv+0xd2>
    188c:	e1bc      	b.n	1c08 <__aeabi_ddiv+0x44c>
    188e:	0030      	movs	r0, r6
    1890:	f001 f8ca 	bl	2a28 <__clzsi2>
    1894:	0003      	movs	r3, r0
    1896:	3b0b      	subs	r3, #11
    1898:	2b1c      	cmp	r3, #28
    189a:	dd00      	ble.n	189e <__aeabi_ddiv+0xe2>
    189c:	e1ac      	b.n	1bf8 <__aeabi_ddiv+0x43c>
    189e:	221d      	movs	r2, #29
    18a0:	1ad3      	subs	r3, r2, r3
    18a2:	465a      	mov	r2, fp
    18a4:	0001      	movs	r1, r0
    18a6:	40da      	lsrs	r2, r3
    18a8:	3908      	subs	r1, #8
    18aa:	408e      	lsls	r6, r1
    18ac:	0013      	movs	r3, r2
    18ae:	4333      	orrs	r3, r6
    18b0:	4699      	mov	r9, r3
    18b2:	465b      	mov	r3, fp
    18b4:	408b      	lsls	r3, r1
    18b6:	4698      	mov	r8, r3
    18b8:	2300      	movs	r3, #0
    18ba:	4c3c      	ldr	r4, [pc, #240]	; (19ac <__aeabi_ddiv+0x1f0>)
    18bc:	2600      	movs	r6, #0
    18be:	1a24      	subs	r4, r4, r0
    18c0:	9303      	str	r3, [sp, #12]
    18c2:	e79f      	b.n	1804 <__aeabi_ddiv+0x48>
    18c4:	4651      	mov	r1, sl
    18c6:	465a      	mov	r2, fp
    18c8:	4311      	orrs	r1, r2
    18ca:	d129      	bne.n	1920 <__aeabi_ddiv+0x164>
    18cc:	2200      	movs	r2, #0
    18ce:	4693      	mov	fp, r2
    18d0:	3202      	adds	r2, #2
    18d2:	e7b1      	b.n	1838 <__aeabi_ddiv+0x7c>
    18d4:	4659      	mov	r1, fp
    18d6:	4301      	orrs	r1, r0
    18d8:	d01e      	beq.n	1918 <__aeabi_ddiv+0x15c>
    18da:	465b      	mov	r3, fp
    18dc:	2b00      	cmp	r3, #0
    18de:	d100      	bne.n	18e2 <__aeabi_ddiv+0x126>
    18e0:	e19e      	b.n	1c20 <__aeabi_ddiv+0x464>
    18e2:	4658      	mov	r0, fp
    18e4:	f001 f8a0 	bl	2a28 <__clzsi2>
    18e8:	0003      	movs	r3, r0
    18ea:	3b0b      	subs	r3, #11
    18ec:	2b1c      	cmp	r3, #28
    18ee:	dd00      	ble.n	18f2 <__aeabi_ddiv+0x136>
    18f0:	e18f      	b.n	1c12 <__aeabi_ddiv+0x456>
    18f2:	0002      	movs	r2, r0
    18f4:	4659      	mov	r1, fp
    18f6:	3a08      	subs	r2, #8
    18f8:	4091      	lsls	r1, r2
    18fa:	468b      	mov	fp, r1
    18fc:	211d      	movs	r1, #29
    18fe:	1acb      	subs	r3, r1, r3
    1900:	4651      	mov	r1, sl
    1902:	40d9      	lsrs	r1, r3
    1904:	000b      	movs	r3, r1
    1906:	4659      	mov	r1, fp
    1908:	430b      	orrs	r3, r1
    190a:	4651      	mov	r1, sl
    190c:	469b      	mov	fp, r3
    190e:	4091      	lsls	r1, r2
    1910:	4b26      	ldr	r3, [pc, #152]	; (19ac <__aeabi_ddiv+0x1f0>)
    1912:	2200      	movs	r2, #0
    1914:	1a1b      	subs	r3, r3, r0
    1916:	e78f      	b.n	1838 <__aeabi_ddiv+0x7c>
    1918:	2300      	movs	r3, #0
    191a:	2201      	movs	r2, #1
    191c:	469b      	mov	fp, r3
    191e:	e78b      	b.n	1838 <__aeabi_ddiv+0x7c>
    1920:	4651      	mov	r1, sl
    1922:	2203      	movs	r2, #3
    1924:	e788      	b.n	1838 <__aeabi_ddiv+0x7c>
    1926:	2300      	movs	r3, #0
    1928:	4698      	mov	r8, r3
    192a:	3301      	adds	r3, #1
    192c:	2604      	movs	r6, #4
    192e:	2400      	movs	r4, #0
    1930:	9303      	str	r3, [sp, #12]
    1932:	e767      	b.n	1804 <__aeabi_ddiv+0x48>
    1934:	2303      	movs	r3, #3
    1936:	46b1      	mov	r9, r6
    1938:	9303      	str	r3, [sp, #12]
    193a:	260c      	movs	r6, #12
    193c:	e762      	b.n	1804 <__aeabi_ddiv+0x48>
    193e:	2a03      	cmp	r2, #3
    1940:	d100      	bne.n	1944 <__aeabi_ddiv+0x188>
    1942:	e25c      	b.n	1dfe <__aeabi_ddiv+0x642>
    1944:	9b01      	ldr	r3, [sp, #4]
    1946:	2a01      	cmp	r2, #1
    1948:	d000      	beq.n	194c <__aeabi_ddiv+0x190>
    194a:	e1e4      	b.n	1d16 <__aeabi_ddiv+0x55a>
    194c:	4013      	ands	r3, r2
    194e:	469c      	mov	ip, r3
    1950:	2300      	movs	r3, #0
    1952:	2400      	movs	r4, #0
    1954:	2200      	movs	r2, #0
    1956:	4698      	mov	r8, r3
    1958:	2100      	movs	r1, #0
    195a:	0312      	lsls	r2, r2, #12
    195c:	0b13      	lsrs	r3, r2, #12
    195e:	0d0a      	lsrs	r2, r1, #20
    1960:	0512      	lsls	r2, r2, #20
    1962:	431a      	orrs	r2, r3
    1964:	0523      	lsls	r3, r4, #20
    1966:	4c12      	ldr	r4, [pc, #72]	; (19b0 <__aeabi_ddiv+0x1f4>)
    1968:	4640      	mov	r0, r8
    196a:	4022      	ands	r2, r4
    196c:	4313      	orrs	r3, r2
    196e:	4662      	mov	r2, ip
    1970:	005b      	lsls	r3, r3, #1
    1972:	07d2      	lsls	r2, r2, #31
    1974:	085b      	lsrs	r3, r3, #1
    1976:	4313      	orrs	r3, r2
    1978:	0019      	movs	r1, r3
    197a:	b007      	add	sp, #28
    197c:	bc3c      	pop	{r2, r3, r4, r5}
    197e:	4690      	mov	r8, r2
    1980:	4699      	mov	r9, r3
    1982:	46a2      	mov	sl, r4
    1984:	46ab      	mov	fp, r5
    1986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1988:	2300      	movs	r3, #0
    198a:	2280      	movs	r2, #128	; 0x80
    198c:	469c      	mov	ip, r3
    198e:	0312      	lsls	r2, r2, #12
    1990:	4698      	mov	r8, r3
    1992:	4c03      	ldr	r4, [pc, #12]	; (19a0 <__aeabi_ddiv+0x1e4>)
    1994:	e7e0      	b.n	1958 <__aeabi_ddiv+0x19c>
    1996:	2300      	movs	r3, #0
    1998:	4c01      	ldr	r4, [pc, #4]	; (19a0 <__aeabi_ddiv+0x1e4>)
    199a:	2200      	movs	r2, #0
    199c:	4698      	mov	r8, r3
    199e:	e7db      	b.n	1958 <__aeabi_ddiv+0x19c>
    19a0:	000007ff 	.word	0x000007ff
    19a4:	fffffc01 	.word	0xfffffc01
    19a8:	00002b00 	.word	0x00002b00
    19ac:	fffffc0d 	.word	0xfffffc0d
    19b0:	800fffff 	.word	0x800fffff
    19b4:	45d9      	cmp	r9, fp
    19b6:	d900      	bls.n	19ba <__aeabi_ddiv+0x1fe>
    19b8:	e139      	b.n	1c2e <__aeabi_ddiv+0x472>
    19ba:	d100      	bne.n	19be <__aeabi_ddiv+0x202>
    19bc:	e134      	b.n	1c28 <__aeabi_ddiv+0x46c>
    19be:	2300      	movs	r3, #0
    19c0:	4646      	mov	r6, r8
    19c2:	464d      	mov	r5, r9
    19c4:	469a      	mov	sl, r3
    19c6:	3c01      	subs	r4, #1
    19c8:	465b      	mov	r3, fp
    19ca:	0e0a      	lsrs	r2, r1, #24
    19cc:	021b      	lsls	r3, r3, #8
    19ce:	431a      	orrs	r2, r3
    19d0:	020b      	lsls	r3, r1, #8
    19d2:	0c17      	lsrs	r7, r2, #16
    19d4:	9303      	str	r3, [sp, #12]
    19d6:	0413      	lsls	r3, r2, #16
    19d8:	0c1b      	lsrs	r3, r3, #16
    19da:	0039      	movs	r1, r7
    19dc:	0028      	movs	r0, r5
    19de:	4690      	mov	r8, r2
    19e0:	9301      	str	r3, [sp, #4]
    19e2:	f7ff fb4f 	bl	1084 <__udivsi3>
    19e6:	0002      	movs	r2, r0
    19e8:	9b01      	ldr	r3, [sp, #4]
    19ea:	4683      	mov	fp, r0
    19ec:	435a      	muls	r2, r3
    19ee:	0028      	movs	r0, r5
    19f0:	0039      	movs	r1, r7
    19f2:	4691      	mov	r9, r2
    19f4:	f7ff fbcc 	bl	1190 <__aeabi_uidivmod>
    19f8:	0c35      	lsrs	r5, r6, #16
    19fa:	0409      	lsls	r1, r1, #16
    19fc:	430d      	orrs	r5, r1
    19fe:	45a9      	cmp	r9, r5
    1a00:	d90d      	bls.n	1a1e <__aeabi_ddiv+0x262>
    1a02:	465b      	mov	r3, fp
    1a04:	4445      	add	r5, r8
    1a06:	3b01      	subs	r3, #1
    1a08:	45a8      	cmp	r8, r5
    1a0a:	d900      	bls.n	1a0e <__aeabi_ddiv+0x252>
    1a0c:	e13a      	b.n	1c84 <__aeabi_ddiv+0x4c8>
    1a0e:	45a9      	cmp	r9, r5
    1a10:	d800      	bhi.n	1a14 <__aeabi_ddiv+0x258>
    1a12:	e137      	b.n	1c84 <__aeabi_ddiv+0x4c8>
    1a14:	2302      	movs	r3, #2
    1a16:	425b      	negs	r3, r3
    1a18:	469c      	mov	ip, r3
    1a1a:	4445      	add	r5, r8
    1a1c:	44e3      	add	fp, ip
    1a1e:	464b      	mov	r3, r9
    1a20:	1aeb      	subs	r3, r5, r3
    1a22:	0039      	movs	r1, r7
    1a24:	0018      	movs	r0, r3
    1a26:	9304      	str	r3, [sp, #16]
    1a28:	f7ff fb2c 	bl	1084 <__udivsi3>
    1a2c:	9b01      	ldr	r3, [sp, #4]
    1a2e:	0005      	movs	r5, r0
    1a30:	4343      	muls	r3, r0
    1a32:	0039      	movs	r1, r7
    1a34:	9804      	ldr	r0, [sp, #16]
    1a36:	4699      	mov	r9, r3
    1a38:	f7ff fbaa 	bl	1190 <__aeabi_uidivmod>
    1a3c:	0433      	lsls	r3, r6, #16
    1a3e:	0409      	lsls	r1, r1, #16
    1a40:	0c1b      	lsrs	r3, r3, #16
    1a42:	430b      	orrs	r3, r1
    1a44:	4599      	cmp	r9, r3
    1a46:	d909      	bls.n	1a5c <__aeabi_ddiv+0x2a0>
    1a48:	4443      	add	r3, r8
    1a4a:	1e6a      	subs	r2, r5, #1
    1a4c:	4598      	cmp	r8, r3
    1a4e:	d900      	bls.n	1a52 <__aeabi_ddiv+0x296>
    1a50:	e11a      	b.n	1c88 <__aeabi_ddiv+0x4cc>
    1a52:	4599      	cmp	r9, r3
    1a54:	d800      	bhi.n	1a58 <__aeabi_ddiv+0x29c>
    1a56:	e117      	b.n	1c88 <__aeabi_ddiv+0x4cc>
    1a58:	3d02      	subs	r5, #2
    1a5a:	4443      	add	r3, r8
    1a5c:	464a      	mov	r2, r9
    1a5e:	1a9b      	subs	r3, r3, r2
    1a60:	465a      	mov	r2, fp
    1a62:	0412      	lsls	r2, r2, #16
    1a64:	432a      	orrs	r2, r5
    1a66:	9903      	ldr	r1, [sp, #12]
    1a68:	4693      	mov	fp, r2
    1a6a:	0c10      	lsrs	r0, r2, #16
    1a6c:	0c0a      	lsrs	r2, r1, #16
    1a6e:	4691      	mov	r9, r2
    1a70:	0409      	lsls	r1, r1, #16
    1a72:	465a      	mov	r2, fp
    1a74:	0c09      	lsrs	r1, r1, #16
    1a76:	464e      	mov	r6, r9
    1a78:	000d      	movs	r5, r1
    1a7a:	0412      	lsls	r2, r2, #16
    1a7c:	0c12      	lsrs	r2, r2, #16
    1a7e:	4345      	muls	r5, r0
    1a80:	9105      	str	r1, [sp, #20]
    1a82:	4351      	muls	r1, r2
    1a84:	4372      	muls	r2, r6
    1a86:	4370      	muls	r0, r6
    1a88:	1952      	adds	r2, r2, r5
    1a8a:	0c0e      	lsrs	r6, r1, #16
    1a8c:	18b2      	adds	r2, r6, r2
    1a8e:	4295      	cmp	r5, r2
    1a90:	d903      	bls.n	1a9a <__aeabi_ddiv+0x2de>
    1a92:	2580      	movs	r5, #128	; 0x80
    1a94:	026d      	lsls	r5, r5, #9
    1a96:	46ac      	mov	ip, r5
    1a98:	4460      	add	r0, ip
    1a9a:	0c15      	lsrs	r5, r2, #16
    1a9c:	0409      	lsls	r1, r1, #16
    1a9e:	0412      	lsls	r2, r2, #16
    1aa0:	0c09      	lsrs	r1, r1, #16
    1aa2:	1828      	adds	r0, r5, r0
    1aa4:	1852      	adds	r2, r2, r1
    1aa6:	4283      	cmp	r3, r0
    1aa8:	d200      	bcs.n	1aac <__aeabi_ddiv+0x2f0>
    1aaa:	e0ce      	b.n	1c4a <__aeabi_ddiv+0x48e>
    1aac:	d100      	bne.n	1ab0 <__aeabi_ddiv+0x2f4>
    1aae:	e0c8      	b.n	1c42 <__aeabi_ddiv+0x486>
    1ab0:	1a1d      	subs	r5, r3, r0
    1ab2:	4653      	mov	r3, sl
    1ab4:	1a9e      	subs	r6, r3, r2
    1ab6:	45b2      	cmp	sl, r6
    1ab8:	4192      	sbcs	r2, r2
    1aba:	4252      	negs	r2, r2
    1abc:	1aab      	subs	r3, r5, r2
    1abe:	469a      	mov	sl, r3
    1ac0:	4598      	cmp	r8, r3
    1ac2:	d100      	bne.n	1ac6 <__aeabi_ddiv+0x30a>
    1ac4:	e117      	b.n	1cf6 <__aeabi_ddiv+0x53a>
    1ac6:	0039      	movs	r1, r7
    1ac8:	0018      	movs	r0, r3
    1aca:	f7ff fadb 	bl	1084 <__udivsi3>
    1ace:	9b01      	ldr	r3, [sp, #4]
    1ad0:	0005      	movs	r5, r0
    1ad2:	4343      	muls	r3, r0
    1ad4:	0039      	movs	r1, r7
    1ad6:	4650      	mov	r0, sl
    1ad8:	9304      	str	r3, [sp, #16]
    1ada:	f7ff fb59 	bl	1190 <__aeabi_uidivmod>
    1ade:	9804      	ldr	r0, [sp, #16]
    1ae0:	040b      	lsls	r3, r1, #16
    1ae2:	0c31      	lsrs	r1, r6, #16
    1ae4:	4319      	orrs	r1, r3
    1ae6:	4288      	cmp	r0, r1
    1ae8:	d909      	bls.n	1afe <__aeabi_ddiv+0x342>
    1aea:	4441      	add	r1, r8
    1aec:	1e6b      	subs	r3, r5, #1
    1aee:	4588      	cmp	r8, r1
    1af0:	d900      	bls.n	1af4 <__aeabi_ddiv+0x338>
    1af2:	e107      	b.n	1d04 <__aeabi_ddiv+0x548>
    1af4:	4288      	cmp	r0, r1
    1af6:	d800      	bhi.n	1afa <__aeabi_ddiv+0x33e>
    1af8:	e104      	b.n	1d04 <__aeabi_ddiv+0x548>
    1afa:	3d02      	subs	r5, #2
    1afc:	4441      	add	r1, r8
    1afe:	9b04      	ldr	r3, [sp, #16]
    1b00:	1acb      	subs	r3, r1, r3
    1b02:	0018      	movs	r0, r3
    1b04:	0039      	movs	r1, r7
    1b06:	9304      	str	r3, [sp, #16]
    1b08:	f7ff fabc 	bl	1084 <__udivsi3>
    1b0c:	9b01      	ldr	r3, [sp, #4]
    1b0e:	4682      	mov	sl, r0
    1b10:	4343      	muls	r3, r0
    1b12:	0039      	movs	r1, r7
    1b14:	9804      	ldr	r0, [sp, #16]
    1b16:	9301      	str	r3, [sp, #4]
    1b18:	f7ff fb3a 	bl	1190 <__aeabi_uidivmod>
    1b1c:	9801      	ldr	r0, [sp, #4]
    1b1e:	040b      	lsls	r3, r1, #16
    1b20:	0431      	lsls	r1, r6, #16
    1b22:	0c09      	lsrs	r1, r1, #16
    1b24:	4319      	orrs	r1, r3
    1b26:	4288      	cmp	r0, r1
    1b28:	d90d      	bls.n	1b46 <__aeabi_ddiv+0x38a>
    1b2a:	4653      	mov	r3, sl
    1b2c:	4441      	add	r1, r8
    1b2e:	3b01      	subs	r3, #1
    1b30:	4588      	cmp	r8, r1
    1b32:	d900      	bls.n	1b36 <__aeabi_ddiv+0x37a>
    1b34:	e0e8      	b.n	1d08 <__aeabi_ddiv+0x54c>
    1b36:	4288      	cmp	r0, r1
    1b38:	d800      	bhi.n	1b3c <__aeabi_ddiv+0x380>
    1b3a:	e0e5      	b.n	1d08 <__aeabi_ddiv+0x54c>
    1b3c:	2302      	movs	r3, #2
    1b3e:	425b      	negs	r3, r3
    1b40:	469c      	mov	ip, r3
    1b42:	4441      	add	r1, r8
    1b44:	44e2      	add	sl, ip
    1b46:	9b01      	ldr	r3, [sp, #4]
    1b48:	042d      	lsls	r5, r5, #16
    1b4a:	1ace      	subs	r6, r1, r3
    1b4c:	4651      	mov	r1, sl
    1b4e:	4329      	orrs	r1, r5
    1b50:	9d05      	ldr	r5, [sp, #20]
    1b52:	464f      	mov	r7, r9
    1b54:	002a      	movs	r2, r5
    1b56:	040b      	lsls	r3, r1, #16
    1b58:	0c08      	lsrs	r0, r1, #16
    1b5a:	0c1b      	lsrs	r3, r3, #16
    1b5c:	435a      	muls	r2, r3
    1b5e:	4345      	muls	r5, r0
    1b60:	437b      	muls	r3, r7
    1b62:	4378      	muls	r0, r7
    1b64:	195b      	adds	r3, r3, r5
    1b66:	0c17      	lsrs	r7, r2, #16
    1b68:	18fb      	adds	r3, r7, r3
    1b6a:	429d      	cmp	r5, r3
    1b6c:	d903      	bls.n	1b76 <__aeabi_ddiv+0x3ba>
    1b6e:	2580      	movs	r5, #128	; 0x80
    1b70:	026d      	lsls	r5, r5, #9
    1b72:	46ac      	mov	ip, r5
    1b74:	4460      	add	r0, ip
    1b76:	0c1d      	lsrs	r5, r3, #16
    1b78:	0412      	lsls	r2, r2, #16
    1b7a:	041b      	lsls	r3, r3, #16
    1b7c:	0c12      	lsrs	r2, r2, #16
    1b7e:	1828      	adds	r0, r5, r0
    1b80:	189b      	adds	r3, r3, r2
    1b82:	4286      	cmp	r6, r0
    1b84:	d200      	bcs.n	1b88 <__aeabi_ddiv+0x3cc>
    1b86:	e093      	b.n	1cb0 <__aeabi_ddiv+0x4f4>
    1b88:	d100      	bne.n	1b8c <__aeabi_ddiv+0x3d0>
    1b8a:	e08e      	b.n	1caa <__aeabi_ddiv+0x4ee>
    1b8c:	2301      	movs	r3, #1
    1b8e:	4319      	orrs	r1, r3
    1b90:	4ba0      	ldr	r3, [pc, #640]	; (1e14 <__aeabi_ddiv+0x658>)
    1b92:	18e3      	adds	r3, r4, r3
    1b94:	2b00      	cmp	r3, #0
    1b96:	dc00      	bgt.n	1b9a <__aeabi_ddiv+0x3de>
    1b98:	e099      	b.n	1cce <__aeabi_ddiv+0x512>
    1b9a:	074a      	lsls	r2, r1, #29
    1b9c:	d000      	beq.n	1ba0 <__aeabi_ddiv+0x3e4>
    1b9e:	e09e      	b.n	1cde <__aeabi_ddiv+0x522>
    1ba0:	465a      	mov	r2, fp
    1ba2:	01d2      	lsls	r2, r2, #7
    1ba4:	d506      	bpl.n	1bb4 <__aeabi_ddiv+0x3f8>
    1ba6:	465a      	mov	r2, fp
    1ba8:	4b9b      	ldr	r3, [pc, #620]	; (1e18 <__aeabi_ddiv+0x65c>)
    1baa:	401a      	ands	r2, r3
    1bac:	2380      	movs	r3, #128	; 0x80
    1bae:	4693      	mov	fp, r2
    1bb0:	00db      	lsls	r3, r3, #3
    1bb2:	18e3      	adds	r3, r4, r3
    1bb4:	4a99      	ldr	r2, [pc, #612]	; (1e1c <__aeabi_ddiv+0x660>)
    1bb6:	4293      	cmp	r3, r2
    1bb8:	dd68      	ble.n	1c8c <__aeabi_ddiv+0x4d0>
    1bba:	2301      	movs	r3, #1
    1bbc:	9a02      	ldr	r2, [sp, #8]
    1bbe:	4c98      	ldr	r4, [pc, #608]	; (1e20 <__aeabi_ddiv+0x664>)
    1bc0:	401a      	ands	r2, r3
    1bc2:	2300      	movs	r3, #0
    1bc4:	4694      	mov	ip, r2
    1bc6:	4698      	mov	r8, r3
    1bc8:	2200      	movs	r2, #0
    1bca:	e6c5      	b.n	1958 <__aeabi_ddiv+0x19c>
    1bcc:	2280      	movs	r2, #128	; 0x80
    1bce:	464b      	mov	r3, r9
    1bd0:	0312      	lsls	r2, r2, #12
    1bd2:	4213      	tst	r3, r2
    1bd4:	d00a      	beq.n	1bec <__aeabi_ddiv+0x430>
    1bd6:	465b      	mov	r3, fp
    1bd8:	4213      	tst	r3, r2
    1bda:	d106      	bne.n	1bea <__aeabi_ddiv+0x42e>
    1bdc:	431a      	orrs	r2, r3
    1bde:	0312      	lsls	r2, r2, #12
    1be0:	0b12      	lsrs	r2, r2, #12
    1be2:	46ac      	mov	ip, r5
    1be4:	4688      	mov	r8, r1
    1be6:	4c8e      	ldr	r4, [pc, #568]	; (1e20 <__aeabi_ddiv+0x664>)
    1be8:	e6b6      	b.n	1958 <__aeabi_ddiv+0x19c>
    1bea:	464b      	mov	r3, r9
    1bec:	431a      	orrs	r2, r3
    1bee:	0312      	lsls	r2, r2, #12
    1bf0:	0b12      	lsrs	r2, r2, #12
    1bf2:	46bc      	mov	ip, r7
    1bf4:	4c8a      	ldr	r4, [pc, #552]	; (1e20 <__aeabi_ddiv+0x664>)
    1bf6:	e6af      	b.n	1958 <__aeabi_ddiv+0x19c>
    1bf8:	0003      	movs	r3, r0
    1bfa:	465a      	mov	r2, fp
    1bfc:	3b28      	subs	r3, #40	; 0x28
    1bfe:	409a      	lsls	r2, r3
    1c00:	2300      	movs	r3, #0
    1c02:	4691      	mov	r9, r2
    1c04:	4698      	mov	r8, r3
    1c06:	e657      	b.n	18b8 <__aeabi_ddiv+0xfc>
    1c08:	4658      	mov	r0, fp
    1c0a:	f000 ff0d 	bl	2a28 <__clzsi2>
    1c0e:	3020      	adds	r0, #32
    1c10:	e640      	b.n	1894 <__aeabi_ddiv+0xd8>
    1c12:	0003      	movs	r3, r0
    1c14:	4652      	mov	r2, sl
    1c16:	3b28      	subs	r3, #40	; 0x28
    1c18:	409a      	lsls	r2, r3
    1c1a:	2100      	movs	r1, #0
    1c1c:	4693      	mov	fp, r2
    1c1e:	e677      	b.n	1910 <__aeabi_ddiv+0x154>
    1c20:	f000 ff02 	bl	2a28 <__clzsi2>
    1c24:	3020      	adds	r0, #32
    1c26:	e65f      	b.n	18e8 <__aeabi_ddiv+0x12c>
    1c28:	4588      	cmp	r8, r1
    1c2a:	d200      	bcs.n	1c2e <__aeabi_ddiv+0x472>
    1c2c:	e6c7      	b.n	19be <__aeabi_ddiv+0x202>
    1c2e:	464b      	mov	r3, r9
    1c30:	07de      	lsls	r6, r3, #31
    1c32:	085d      	lsrs	r5, r3, #1
    1c34:	4643      	mov	r3, r8
    1c36:	085b      	lsrs	r3, r3, #1
    1c38:	431e      	orrs	r6, r3
    1c3a:	4643      	mov	r3, r8
    1c3c:	07db      	lsls	r3, r3, #31
    1c3e:	469a      	mov	sl, r3
    1c40:	e6c2      	b.n	19c8 <__aeabi_ddiv+0x20c>
    1c42:	2500      	movs	r5, #0
    1c44:	4592      	cmp	sl, r2
    1c46:	d300      	bcc.n	1c4a <__aeabi_ddiv+0x48e>
    1c48:	e733      	b.n	1ab2 <__aeabi_ddiv+0x2f6>
    1c4a:	9e03      	ldr	r6, [sp, #12]
    1c4c:	4659      	mov	r1, fp
    1c4e:	46b4      	mov	ip, r6
    1c50:	44e2      	add	sl, ip
    1c52:	45b2      	cmp	sl, r6
    1c54:	41ad      	sbcs	r5, r5
    1c56:	426d      	negs	r5, r5
    1c58:	4445      	add	r5, r8
    1c5a:	18eb      	adds	r3, r5, r3
    1c5c:	3901      	subs	r1, #1
    1c5e:	4598      	cmp	r8, r3
    1c60:	d207      	bcs.n	1c72 <__aeabi_ddiv+0x4b6>
    1c62:	4298      	cmp	r0, r3
    1c64:	d900      	bls.n	1c68 <__aeabi_ddiv+0x4ac>
    1c66:	e07f      	b.n	1d68 <__aeabi_ddiv+0x5ac>
    1c68:	d100      	bne.n	1c6c <__aeabi_ddiv+0x4b0>
    1c6a:	e0bc      	b.n	1de6 <__aeabi_ddiv+0x62a>
    1c6c:	1a1d      	subs	r5, r3, r0
    1c6e:	468b      	mov	fp, r1
    1c70:	e71f      	b.n	1ab2 <__aeabi_ddiv+0x2f6>
    1c72:	4598      	cmp	r8, r3
    1c74:	d1fa      	bne.n	1c6c <__aeabi_ddiv+0x4b0>
    1c76:	9d03      	ldr	r5, [sp, #12]
    1c78:	4555      	cmp	r5, sl
    1c7a:	d9f2      	bls.n	1c62 <__aeabi_ddiv+0x4a6>
    1c7c:	4643      	mov	r3, r8
    1c7e:	468b      	mov	fp, r1
    1c80:	1a1d      	subs	r5, r3, r0
    1c82:	e716      	b.n	1ab2 <__aeabi_ddiv+0x2f6>
    1c84:	469b      	mov	fp, r3
    1c86:	e6ca      	b.n	1a1e <__aeabi_ddiv+0x262>
    1c88:	0015      	movs	r5, r2
    1c8a:	e6e7      	b.n	1a5c <__aeabi_ddiv+0x2a0>
    1c8c:	465a      	mov	r2, fp
    1c8e:	08c9      	lsrs	r1, r1, #3
    1c90:	0752      	lsls	r2, r2, #29
    1c92:	430a      	orrs	r2, r1
    1c94:	055b      	lsls	r3, r3, #21
    1c96:	4690      	mov	r8, r2
    1c98:	0d5c      	lsrs	r4, r3, #21
    1c9a:	465a      	mov	r2, fp
    1c9c:	2301      	movs	r3, #1
    1c9e:	9902      	ldr	r1, [sp, #8]
    1ca0:	0252      	lsls	r2, r2, #9
    1ca2:	4019      	ands	r1, r3
    1ca4:	0b12      	lsrs	r2, r2, #12
    1ca6:	468c      	mov	ip, r1
    1ca8:	e656      	b.n	1958 <__aeabi_ddiv+0x19c>
    1caa:	2b00      	cmp	r3, #0
    1cac:	d100      	bne.n	1cb0 <__aeabi_ddiv+0x4f4>
    1cae:	e76f      	b.n	1b90 <__aeabi_ddiv+0x3d4>
    1cb0:	4446      	add	r6, r8
    1cb2:	1e4a      	subs	r2, r1, #1
    1cb4:	45b0      	cmp	r8, r6
    1cb6:	d929      	bls.n	1d0c <__aeabi_ddiv+0x550>
    1cb8:	0011      	movs	r1, r2
    1cba:	4286      	cmp	r6, r0
    1cbc:	d000      	beq.n	1cc0 <__aeabi_ddiv+0x504>
    1cbe:	e765      	b.n	1b8c <__aeabi_ddiv+0x3d0>
    1cc0:	9a03      	ldr	r2, [sp, #12]
    1cc2:	4293      	cmp	r3, r2
    1cc4:	d000      	beq.n	1cc8 <__aeabi_ddiv+0x50c>
    1cc6:	e761      	b.n	1b8c <__aeabi_ddiv+0x3d0>
    1cc8:	e762      	b.n	1b90 <__aeabi_ddiv+0x3d4>
    1cca:	2101      	movs	r1, #1
    1ccc:	4249      	negs	r1, r1
    1cce:	2001      	movs	r0, #1
    1cd0:	1ac2      	subs	r2, r0, r3
    1cd2:	2a38      	cmp	r2, #56	; 0x38
    1cd4:	dd21      	ble.n	1d1a <__aeabi_ddiv+0x55e>
    1cd6:	9b02      	ldr	r3, [sp, #8]
    1cd8:	4003      	ands	r3, r0
    1cda:	469c      	mov	ip, r3
    1cdc:	e638      	b.n	1950 <__aeabi_ddiv+0x194>
    1cde:	220f      	movs	r2, #15
    1ce0:	400a      	ands	r2, r1
    1ce2:	2a04      	cmp	r2, #4
    1ce4:	d100      	bne.n	1ce8 <__aeabi_ddiv+0x52c>
    1ce6:	e75b      	b.n	1ba0 <__aeabi_ddiv+0x3e4>
    1ce8:	000a      	movs	r2, r1
    1cea:	1d11      	adds	r1, r2, #4
    1cec:	4291      	cmp	r1, r2
    1cee:	4192      	sbcs	r2, r2
    1cf0:	4252      	negs	r2, r2
    1cf2:	4493      	add	fp, r2
    1cf4:	e754      	b.n	1ba0 <__aeabi_ddiv+0x3e4>
    1cf6:	4b47      	ldr	r3, [pc, #284]	; (1e14 <__aeabi_ddiv+0x658>)
    1cf8:	18e3      	adds	r3, r4, r3
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	dde5      	ble.n	1cca <__aeabi_ddiv+0x50e>
    1cfe:	2201      	movs	r2, #1
    1d00:	4252      	negs	r2, r2
    1d02:	e7f2      	b.n	1cea <__aeabi_ddiv+0x52e>
    1d04:	001d      	movs	r5, r3
    1d06:	e6fa      	b.n	1afe <__aeabi_ddiv+0x342>
    1d08:	469a      	mov	sl, r3
    1d0a:	e71c      	b.n	1b46 <__aeabi_ddiv+0x38a>
    1d0c:	42b0      	cmp	r0, r6
    1d0e:	d839      	bhi.n	1d84 <__aeabi_ddiv+0x5c8>
    1d10:	d06e      	beq.n	1df0 <__aeabi_ddiv+0x634>
    1d12:	0011      	movs	r1, r2
    1d14:	e73a      	b.n	1b8c <__aeabi_ddiv+0x3d0>
    1d16:	9302      	str	r3, [sp, #8]
    1d18:	e73a      	b.n	1b90 <__aeabi_ddiv+0x3d4>
    1d1a:	2a1f      	cmp	r2, #31
    1d1c:	dc3c      	bgt.n	1d98 <__aeabi_ddiv+0x5dc>
    1d1e:	2320      	movs	r3, #32
    1d20:	1a9b      	subs	r3, r3, r2
    1d22:	000c      	movs	r4, r1
    1d24:	4658      	mov	r0, fp
    1d26:	4099      	lsls	r1, r3
    1d28:	4098      	lsls	r0, r3
    1d2a:	1e4b      	subs	r3, r1, #1
    1d2c:	4199      	sbcs	r1, r3
    1d2e:	465b      	mov	r3, fp
    1d30:	40d4      	lsrs	r4, r2
    1d32:	40d3      	lsrs	r3, r2
    1d34:	4320      	orrs	r0, r4
    1d36:	4308      	orrs	r0, r1
    1d38:	001a      	movs	r2, r3
    1d3a:	0743      	lsls	r3, r0, #29
    1d3c:	d009      	beq.n	1d52 <__aeabi_ddiv+0x596>
    1d3e:	230f      	movs	r3, #15
    1d40:	4003      	ands	r3, r0
    1d42:	2b04      	cmp	r3, #4
    1d44:	d005      	beq.n	1d52 <__aeabi_ddiv+0x596>
    1d46:	0001      	movs	r1, r0
    1d48:	1d08      	adds	r0, r1, #4
    1d4a:	4288      	cmp	r0, r1
    1d4c:	419b      	sbcs	r3, r3
    1d4e:	425b      	negs	r3, r3
    1d50:	18d2      	adds	r2, r2, r3
    1d52:	0213      	lsls	r3, r2, #8
    1d54:	d53a      	bpl.n	1dcc <__aeabi_ddiv+0x610>
    1d56:	2301      	movs	r3, #1
    1d58:	9a02      	ldr	r2, [sp, #8]
    1d5a:	2401      	movs	r4, #1
    1d5c:	401a      	ands	r2, r3
    1d5e:	2300      	movs	r3, #0
    1d60:	4694      	mov	ip, r2
    1d62:	4698      	mov	r8, r3
    1d64:	2200      	movs	r2, #0
    1d66:	e5f7      	b.n	1958 <__aeabi_ddiv+0x19c>
    1d68:	2102      	movs	r1, #2
    1d6a:	4249      	negs	r1, r1
    1d6c:	468c      	mov	ip, r1
    1d6e:	9d03      	ldr	r5, [sp, #12]
    1d70:	44e3      	add	fp, ip
    1d72:	46ac      	mov	ip, r5
    1d74:	44e2      	add	sl, ip
    1d76:	45aa      	cmp	sl, r5
    1d78:	41ad      	sbcs	r5, r5
    1d7a:	426d      	negs	r5, r5
    1d7c:	4445      	add	r5, r8
    1d7e:	18ed      	adds	r5, r5, r3
    1d80:	1a2d      	subs	r5, r5, r0
    1d82:	e696      	b.n	1ab2 <__aeabi_ddiv+0x2f6>
    1d84:	1e8a      	subs	r2, r1, #2
    1d86:	9903      	ldr	r1, [sp, #12]
    1d88:	004d      	lsls	r5, r1, #1
    1d8a:	428d      	cmp	r5, r1
    1d8c:	4189      	sbcs	r1, r1
    1d8e:	4249      	negs	r1, r1
    1d90:	4441      	add	r1, r8
    1d92:	1876      	adds	r6, r6, r1
    1d94:	9503      	str	r5, [sp, #12]
    1d96:	e78f      	b.n	1cb8 <__aeabi_ddiv+0x4fc>
    1d98:	201f      	movs	r0, #31
    1d9a:	4240      	negs	r0, r0
    1d9c:	1ac3      	subs	r3, r0, r3
    1d9e:	4658      	mov	r0, fp
    1da0:	40d8      	lsrs	r0, r3
    1da2:	0003      	movs	r3, r0
    1da4:	2a20      	cmp	r2, #32
    1da6:	d028      	beq.n	1dfa <__aeabi_ddiv+0x63e>
    1da8:	2040      	movs	r0, #64	; 0x40
    1daa:	465d      	mov	r5, fp
    1dac:	1a82      	subs	r2, r0, r2
    1dae:	4095      	lsls	r5, r2
    1db0:	4329      	orrs	r1, r5
    1db2:	1e4a      	subs	r2, r1, #1
    1db4:	4191      	sbcs	r1, r2
    1db6:	4319      	orrs	r1, r3
    1db8:	2307      	movs	r3, #7
    1dba:	2200      	movs	r2, #0
    1dbc:	400b      	ands	r3, r1
    1dbe:	d009      	beq.n	1dd4 <__aeabi_ddiv+0x618>
    1dc0:	230f      	movs	r3, #15
    1dc2:	2200      	movs	r2, #0
    1dc4:	400b      	ands	r3, r1
    1dc6:	0008      	movs	r0, r1
    1dc8:	2b04      	cmp	r3, #4
    1dca:	d1bd      	bne.n	1d48 <__aeabi_ddiv+0x58c>
    1dcc:	0001      	movs	r1, r0
    1dce:	0753      	lsls	r3, r2, #29
    1dd0:	0252      	lsls	r2, r2, #9
    1dd2:	0b12      	lsrs	r2, r2, #12
    1dd4:	08c9      	lsrs	r1, r1, #3
    1dd6:	4319      	orrs	r1, r3
    1dd8:	2301      	movs	r3, #1
    1dda:	4688      	mov	r8, r1
    1ddc:	9902      	ldr	r1, [sp, #8]
    1dde:	2400      	movs	r4, #0
    1de0:	4019      	ands	r1, r3
    1de2:	468c      	mov	ip, r1
    1de4:	e5b8      	b.n	1958 <__aeabi_ddiv+0x19c>
    1de6:	4552      	cmp	r2, sl
    1de8:	d8be      	bhi.n	1d68 <__aeabi_ddiv+0x5ac>
    1dea:	468b      	mov	fp, r1
    1dec:	2500      	movs	r5, #0
    1dee:	e660      	b.n	1ab2 <__aeabi_ddiv+0x2f6>
    1df0:	9d03      	ldr	r5, [sp, #12]
    1df2:	429d      	cmp	r5, r3
    1df4:	d3c6      	bcc.n	1d84 <__aeabi_ddiv+0x5c8>
    1df6:	0011      	movs	r1, r2
    1df8:	e762      	b.n	1cc0 <__aeabi_ddiv+0x504>
    1dfa:	2500      	movs	r5, #0
    1dfc:	e7d8      	b.n	1db0 <__aeabi_ddiv+0x5f4>
    1dfe:	2280      	movs	r2, #128	; 0x80
    1e00:	465b      	mov	r3, fp
    1e02:	0312      	lsls	r2, r2, #12
    1e04:	431a      	orrs	r2, r3
    1e06:	9b01      	ldr	r3, [sp, #4]
    1e08:	0312      	lsls	r2, r2, #12
    1e0a:	0b12      	lsrs	r2, r2, #12
    1e0c:	469c      	mov	ip, r3
    1e0e:	4688      	mov	r8, r1
    1e10:	4c03      	ldr	r4, [pc, #12]	; (1e20 <__aeabi_ddiv+0x664>)
    1e12:	e5a1      	b.n	1958 <__aeabi_ddiv+0x19c>
    1e14:	000003ff 	.word	0x000003ff
    1e18:	feffffff 	.word	0xfeffffff
    1e1c:	000007fe 	.word	0x000007fe
    1e20:	000007ff 	.word	0x000007ff

00001e24 <__aeabi_dmul>:
    1e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e26:	4657      	mov	r7, sl
    1e28:	4645      	mov	r5, r8
    1e2a:	46de      	mov	lr, fp
    1e2c:	464e      	mov	r6, r9
    1e2e:	b5e0      	push	{r5, r6, r7, lr}
    1e30:	030c      	lsls	r4, r1, #12
    1e32:	4698      	mov	r8, r3
    1e34:	004e      	lsls	r6, r1, #1
    1e36:	0b23      	lsrs	r3, r4, #12
    1e38:	b087      	sub	sp, #28
    1e3a:	0007      	movs	r7, r0
    1e3c:	4692      	mov	sl, r2
    1e3e:	469b      	mov	fp, r3
    1e40:	0d76      	lsrs	r6, r6, #21
    1e42:	0fcd      	lsrs	r5, r1, #31
    1e44:	2e00      	cmp	r6, #0
    1e46:	d06b      	beq.n	1f20 <__aeabi_dmul+0xfc>
    1e48:	4b6d      	ldr	r3, [pc, #436]	; (2000 <__aeabi_dmul+0x1dc>)
    1e4a:	429e      	cmp	r6, r3
    1e4c:	d035      	beq.n	1eba <__aeabi_dmul+0x96>
    1e4e:	2480      	movs	r4, #128	; 0x80
    1e50:	465b      	mov	r3, fp
    1e52:	0f42      	lsrs	r2, r0, #29
    1e54:	0424      	lsls	r4, r4, #16
    1e56:	00db      	lsls	r3, r3, #3
    1e58:	4314      	orrs	r4, r2
    1e5a:	431c      	orrs	r4, r3
    1e5c:	00c3      	lsls	r3, r0, #3
    1e5e:	4699      	mov	r9, r3
    1e60:	4b68      	ldr	r3, [pc, #416]	; (2004 <__aeabi_dmul+0x1e0>)
    1e62:	46a3      	mov	fp, r4
    1e64:	469c      	mov	ip, r3
    1e66:	2300      	movs	r3, #0
    1e68:	2700      	movs	r7, #0
    1e6a:	4466      	add	r6, ip
    1e6c:	9302      	str	r3, [sp, #8]
    1e6e:	4643      	mov	r3, r8
    1e70:	031c      	lsls	r4, r3, #12
    1e72:	005a      	lsls	r2, r3, #1
    1e74:	0fdb      	lsrs	r3, r3, #31
    1e76:	4650      	mov	r0, sl
    1e78:	0b24      	lsrs	r4, r4, #12
    1e7a:	0d52      	lsrs	r2, r2, #21
    1e7c:	4698      	mov	r8, r3
    1e7e:	d100      	bne.n	1e82 <__aeabi_dmul+0x5e>
    1e80:	e076      	b.n	1f70 <__aeabi_dmul+0x14c>
    1e82:	4b5f      	ldr	r3, [pc, #380]	; (2000 <__aeabi_dmul+0x1dc>)
    1e84:	429a      	cmp	r2, r3
    1e86:	d06d      	beq.n	1f64 <__aeabi_dmul+0x140>
    1e88:	2380      	movs	r3, #128	; 0x80
    1e8a:	0f41      	lsrs	r1, r0, #29
    1e8c:	041b      	lsls	r3, r3, #16
    1e8e:	430b      	orrs	r3, r1
    1e90:	495c      	ldr	r1, [pc, #368]	; (2004 <__aeabi_dmul+0x1e0>)
    1e92:	00e4      	lsls	r4, r4, #3
    1e94:	468c      	mov	ip, r1
    1e96:	431c      	orrs	r4, r3
    1e98:	00c3      	lsls	r3, r0, #3
    1e9a:	2000      	movs	r0, #0
    1e9c:	4462      	add	r2, ip
    1e9e:	4641      	mov	r1, r8
    1ea0:	18b6      	adds	r6, r6, r2
    1ea2:	4069      	eors	r1, r5
    1ea4:	1c72      	adds	r2, r6, #1
    1ea6:	9101      	str	r1, [sp, #4]
    1ea8:	4694      	mov	ip, r2
    1eaa:	4307      	orrs	r7, r0
    1eac:	2f0f      	cmp	r7, #15
    1eae:	d900      	bls.n	1eb2 <__aeabi_dmul+0x8e>
    1eb0:	e0b0      	b.n	2014 <__aeabi_dmul+0x1f0>
    1eb2:	4a55      	ldr	r2, [pc, #340]	; (2008 <__aeabi_dmul+0x1e4>)
    1eb4:	00bf      	lsls	r7, r7, #2
    1eb6:	59d2      	ldr	r2, [r2, r7]
    1eb8:	4697      	mov	pc, r2
    1eba:	465b      	mov	r3, fp
    1ebc:	4303      	orrs	r3, r0
    1ebe:	4699      	mov	r9, r3
    1ec0:	d000      	beq.n	1ec4 <__aeabi_dmul+0xa0>
    1ec2:	e087      	b.n	1fd4 <__aeabi_dmul+0x1b0>
    1ec4:	2300      	movs	r3, #0
    1ec6:	469b      	mov	fp, r3
    1ec8:	3302      	adds	r3, #2
    1eca:	2708      	movs	r7, #8
    1ecc:	9302      	str	r3, [sp, #8]
    1ece:	e7ce      	b.n	1e6e <__aeabi_dmul+0x4a>
    1ed0:	4642      	mov	r2, r8
    1ed2:	9201      	str	r2, [sp, #4]
    1ed4:	2802      	cmp	r0, #2
    1ed6:	d067      	beq.n	1fa8 <__aeabi_dmul+0x184>
    1ed8:	2803      	cmp	r0, #3
    1eda:	d100      	bne.n	1ede <__aeabi_dmul+0xba>
    1edc:	e20e      	b.n	22fc <__aeabi_dmul+0x4d8>
    1ede:	2801      	cmp	r0, #1
    1ee0:	d000      	beq.n	1ee4 <__aeabi_dmul+0xc0>
    1ee2:	e162      	b.n	21aa <__aeabi_dmul+0x386>
    1ee4:	2300      	movs	r3, #0
    1ee6:	2400      	movs	r4, #0
    1ee8:	2200      	movs	r2, #0
    1eea:	4699      	mov	r9, r3
    1eec:	9901      	ldr	r1, [sp, #4]
    1eee:	4001      	ands	r1, r0
    1ef0:	b2cd      	uxtb	r5, r1
    1ef2:	2100      	movs	r1, #0
    1ef4:	0312      	lsls	r2, r2, #12
    1ef6:	0d0b      	lsrs	r3, r1, #20
    1ef8:	0b12      	lsrs	r2, r2, #12
    1efa:	051b      	lsls	r3, r3, #20
    1efc:	4313      	orrs	r3, r2
    1efe:	4a43      	ldr	r2, [pc, #268]	; (200c <__aeabi_dmul+0x1e8>)
    1f00:	0524      	lsls	r4, r4, #20
    1f02:	4013      	ands	r3, r2
    1f04:	431c      	orrs	r4, r3
    1f06:	0064      	lsls	r4, r4, #1
    1f08:	07ed      	lsls	r5, r5, #31
    1f0a:	0864      	lsrs	r4, r4, #1
    1f0c:	432c      	orrs	r4, r5
    1f0e:	4648      	mov	r0, r9
    1f10:	0021      	movs	r1, r4
    1f12:	b007      	add	sp, #28
    1f14:	bc3c      	pop	{r2, r3, r4, r5}
    1f16:	4690      	mov	r8, r2
    1f18:	4699      	mov	r9, r3
    1f1a:	46a2      	mov	sl, r4
    1f1c:	46ab      	mov	fp, r5
    1f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f20:	4303      	orrs	r3, r0
    1f22:	4699      	mov	r9, r3
    1f24:	d04f      	beq.n	1fc6 <__aeabi_dmul+0x1a2>
    1f26:	465b      	mov	r3, fp
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d100      	bne.n	1f2e <__aeabi_dmul+0x10a>
    1f2c:	e189      	b.n	2242 <__aeabi_dmul+0x41e>
    1f2e:	4658      	mov	r0, fp
    1f30:	f000 fd7a 	bl	2a28 <__clzsi2>
    1f34:	0003      	movs	r3, r0
    1f36:	3b0b      	subs	r3, #11
    1f38:	2b1c      	cmp	r3, #28
    1f3a:	dd00      	ble.n	1f3e <__aeabi_dmul+0x11a>
    1f3c:	e17a      	b.n	2234 <__aeabi_dmul+0x410>
    1f3e:	221d      	movs	r2, #29
    1f40:	1ad3      	subs	r3, r2, r3
    1f42:	003a      	movs	r2, r7
    1f44:	0001      	movs	r1, r0
    1f46:	465c      	mov	r4, fp
    1f48:	40da      	lsrs	r2, r3
    1f4a:	3908      	subs	r1, #8
    1f4c:	408c      	lsls	r4, r1
    1f4e:	0013      	movs	r3, r2
    1f50:	408f      	lsls	r7, r1
    1f52:	4323      	orrs	r3, r4
    1f54:	469b      	mov	fp, r3
    1f56:	46b9      	mov	r9, r7
    1f58:	2300      	movs	r3, #0
    1f5a:	4e2d      	ldr	r6, [pc, #180]	; (2010 <__aeabi_dmul+0x1ec>)
    1f5c:	2700      	movs	r7, #0
    1f5e:	1a36      	subs	r6, r6, r0
    1f60:	9302      	str	r3, [sp, #8]
    1f62:	e784      	b.n	1e6e <__aeabi_dmul+0x4a>
    1f64:	4653      	mov	r3, sl
    1f66:	4323      	orrs	r3, r4
    1f68:	d12a      	bne.n	1fc0 <__aeabi_dmul+0x19c>
    1f6a:	2400      	movs	r4, #0
    1f6c:	2002      	movs	r0, #2
    1f6e:	e796      	b.n	1e9e <__aeabi_dmul+0x7a>
    1f70:	4653      	mov	r3, sl
    1f72:	4323      	orrs	r3, r4
    1f74:	d020      	beq.n	1fb8 <__aeabi_dmul+0x194>
    1f76:	2c00      	cmp	r4, #0
    1f78:	d100      	bne.n	1f7c <__aeabi_dmul+0x158>
    1f7a:	e157      	b.n	222c <__aeabi_dmul+0x408>
    1f7c:	0020      	movs	r0, r4
    1f7e:	f000 fd53 	bl	2a28 <__clzsi2>
    1f82:	0003      	movs	r3, r0
    1f84:	3b0b      	subs	r3, #11
    1f86:	2b1c      	cmp	r3, #28
    1f88:	dd00      	ble.n	1f8c <__aeabi_dmul+0x168>
    1f8a:	e149      	b.n	2220 <__aeabi_dmul+0x3fc>
    1f8c:	211d      	movs	r1, #29
    1f8e:	1acb      	subs	r3, r1, r3
    1f90:	4651      	mov	r1, sl
    1f92:	0002      	movs	r2, r0
    1f94:	40d9      	lsrs	r1, r3
    1f96:	4653      	mov	r3, sl
    1f98:	3a08      	subs	r2, #8
    1f9a:	4094      	lsls	r4, r2
    1f9c:	4093      	lsls	r3, r2
    1f9e:	430c      	orrs	r4, r1
    1fa0:	4a1b      	ldr	r2, [pc, #108]	; (2010 <__aeabi_dmul+0x1ec>)
    1fa2:	1a12      	subs	r2, r2, r0
    1fa4:	2000      	movs	r0, #0
    1fa6:	e77a      	b.n	1e9e <__aeabi_dmul+0x7a>
    1fa8:	2501      	movs	r5, #1
    1faa:	9b01      	ldr	r3, [sp, #4]
    1fac:	4c14      	ldr	r4, [pc, #80]	; (2000 <__aeabi_dmul+0x1dc>)
    1fae:	401d      	ands	r5, r3
    1fb0:	2300      	movs	r3, #0
    1fb2:	2200      	movs	r2, #0
    1fb4:	4699      	mov	r9, r3
    1fb6:	e79c      	b.n	1ef2 <__aeabi_dmul+0xce>
    1fb8:	2400      	movs	r4, #0
    1fba:	2200      	movs	r2, #0
    1fbc:	2001      	movs	r0, #1
    1fbe:	e76e      	b.n	1e9e <__aeabi_dmul+0x7a>
    1fc0:	4653      	mov	r3, sl
    1fc2:	2003      	movs	r0, #3
    1fc4:	e76b      	b.n	1e9e <__aeabi_dmul+0x7a>
    1fc6:	2300      	movs	r3, #0
    1fc8:	469b      	mov	fp, r3
    1fca:	3301      	adds	r3, #1
    1fcc:	2704      	movs	r7, #4
    1fce:	2600      	movs	r6, #0
    1fd0:	9302      	str	r3, [sp, #8]
    1fd2:	e74c      	b.n	1e6e <__aeabi_dmul+0x4a>
    1fd4:	2303      	movs	r3, #3
    1fd6:	4681      	mov	r9, r0
    1fd8:	270c      	movs	r7, #12
    1fda:	9302      	str	r3, [sp, #8]
    1fdc:	e747      	b.n	1e6e <__aeabi_dmul+0x4a>
    1fde:	2280      	movs	r2, #128	; 0x80
    1fe0:	2300      	movs	r3, #0
    1fe2:	2500      	movs	r5, #0
    1fe4:	0312      	lsls	r2, r2, #12
    1fe6:	4699      	mov	r9, r3
    1fe8:	4c05      	ldr	r4, [pc, #20]	; (2000 <__aeabi_dmul+0x1dc>)
    1fea:	e782      	b.n	1ef2 <__aeabi_dmul+0xce>
    1fec:	465c      	mov	r4, fp
    1fee:	464b      	mov	r3, r9
    1ff0:	9802      	ldr	r0, [sp, #8]
    1ff2:	e76f      	b.n	1ed4 <__aeabi_dmul+0xb0>
    1ff4:	465c      	mov	r4, fp
    1ff6:	464b      	mov	r3, r9
    1ff8:	9501      	str	r5, [sp, #4]
    1ffa:	9802      	ldr	r0, [sp, #8]
    1ffc:	e76a      	b.n	1ed4 <__aeabi_dmul+0xb0>
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	000007ff 	.word	0x000007ff
    2004:	fffffc01 	.word	0xfffffc01
    2008:	00002b40 	.word	0x00002b40
    200c:	800fffff 	.word	0x800fffff
    2010:	fffffc0d 	.word	0xfffffc0d
    2014:	464a      	mov	r2, r9
    2016:	4649      	mov	r1, r9
    2018:	0c17      	lsrs	r7, r2, #16
    201a:	0c1a      	lsrs	r2, r3, #16
    201c:	041b      	lsls	r3, r3, #16
    201e:	0c1b      	lsrs	r3, r3, #16
    2020:	0408      	lsls	r0, r1, #16
    2022:	0019      	movs	r1, r3
    2024:	0c00      	lsrs	r0, r0, #16
    2026:	4341      	muls	r1, r0
    2028:	0015      	movs	r5, r2
    202a:	4688      	mov	r8, r1
    202c:	0019      	movs	r1, r3
    202e:	437d      	muls	r5, r7
    2030:	4379      	muls	r1, r7
    2032:	9503      	str	r5, [sp, #12]
    2034:	4689      	mov	r9, r1
    2036:	0029      	movs	r1, r5
    2038:	0015      	movs	r5, r2
    203a:	4345      	muls	r5, r0
    203c:	444d      	add	r5, r9
    203e:	9502      	str	r5, [sp, #8]
    2040:	4645      	mov	r5, r8
    2042:	0c2d      	lsrs	r5, r5, #16
    2044:	46aa      	mov	sl, r5
    2046:	9d02      	ldr	r5, [sp, #8]
    2048:	4455      	add	r5, sl
    204a:	45a9      	cmp	r9, r5
    204c:	d906      	bls.n	205c <__aeabi_dmul+0x238>
    204e:	468a      	mov	sl, r1
    2050:	2180      	movs	r1, #128	; 0x80
    2052:	0249      	lsls	r1, r1, #9
    2054:	4689      	mov	r9, r1
    2056:	44ca      	add	sl, r9
    2058:	4651      	mov	r1, sl
    205a:	9103      	str	r1, [sp, #12]
    205c:	0c29      	lsrs	r1, r5, #16
    205e:	9104      	str	r1, [sp, #16]
    2060:	4641      	mov	r1, r8
    2062:	0409      	lsls	r1, r1, #16
    2064:	042d      	lsls	r5, r5, #16
    2066:	0c09      	lsrs	r1, r1, #16
    2068:	4688      	mov	r8, r1
    206a:	0029      	movs	r1, r5
    206c:	0c25      	lsrs	r5, r4, #16
    206e:	0424      	lsls	r4, r4, #16
    2070:	4441      	add	r1, r8
    2072:	0c24      	lsrs	r4, r4, #16
    2074:	9105      	str	r1, [sp, #20]
    2076:	0021      	movs	r1, r4
    2078:	4341      	muls	r1, r0
    207a:	4688      	mov	r8, r1
    207c:	0021      	movs	r1, r4
    207e:	4379      	muls	r1, r7
    2080:	468a      	mov	sl, r1
    2082:	4368      	muls	r0, r5
    2084:	4641      	mov	r1, r8
    2086:	4450      	add	r0, sl
    2088:	4681      	mov	r9, r0
    208a:	0c08      	lsrs	r0, r1, #16
    208c:	4448      	add	r0, r9
    208e:	436f      	muls	r7, r5
    2090:	4582      	cmp	sl, r0
    2092:	d903      	bls.n	209c <__aeabi_dmul+0x278>
    2094:	2180      	movs	r1, #128	; 0x80
    2096:	0249      	lsls	r1, r1, #9
    2098:	4689      	mov	r9, r1
    209a:	444f      	add	r7, r9
    209c:	0c01      	lsrs	r1, r0, #16
    209e:	4689      	mov	r9, r1
    20a0:	0039      	movs	r1, r7
    20a2:	4449      	add	r1, r9
    20a4:	9102      	str	r1, [sp, #8]
    20a6:	4641      	mov	r1, r8
    20a8:	040f      	lsls	r7, r1, #16
    20aa:	9904      	ldr	r1, [sp, #16]
    20ac:	0c3f      	lsrs	r7, r7, #16
    20ae:	4688      	mov	r8, r1
    20b0:	0400      	lsls	r0, r0, #16
    20b2:	19c0      	adds	r0, r0, r7
    20b4:	4480      	add	r8, r0
    20b6:	4641      	mov	r1, r8
    20b8:	9104      	str	r1, [sp, #16]
    20ba:	4659      	mov	r1, fp
    20bc:	0c0f      	lsrs	r7, r1, #16
    20be:	0409      	lsls	r1, r1, #16
    20c0:	0c09      	lsrs	r1, r1, #16
    20c2:	4688      	mov	r8, r1
    20c4:	4359      	muls	r1, r3
    20c6:	468a      	mov	sl, r1
    20c8:	0039      	movs	r1, r7
    20ca:	4351      	muls	r1, r2
    20cc:	4689      	mov	r9, r1
    20ce:	4641      	mov	r1, r8
    20d0:	434a      	muls	r2, r1
    20d2:	4651      	mov	r1, sl
    20d4:	0c09      	lsrs	r1, r1, #16
    20d6:	468b      	mov	fp, r1
    20d8:	437b      	muls	r3, r7
    20da:	18d2      	adds	r2, r2, r3
    20dc:	445a      	add	r2, fp
    20de:	4293      	cmp	r3, r2
    20e0:	d903      	bls.n	20ea <__aeabi_dmul+0x2c6>
    20e2:	2380      	movs	r3, #128	; 0x80
    20e4:	025b      	lsls	r3, r3, #9
    20e6:	469b      	mov	fp, r3
    20e8:	44d9      	add	r9, fp
    20ea:	4651      	mov	r1, sl
    20ec:	0409      	lsls	r1, r1, #16
    20ee:	0c09      	lsrs	r1, r1, #16
    20f0:	468a      	mov	sl, r1
    20f2:	4641      	mov	r1, r8
    20f4:	4361      	muls	r1, r4
    20f6:	437c      	muls	r4, r7
    20f8:	0c13      	lsrs	r3, r2, #16
    20fa:	0412      	lsls	r2, r2, #16
    20fc:	444b      	add	r3, r9
    20fe:	4452      	add	r2, sl
    2100:	46a1      	mov	r9, r4
    2102:	468a      	mov	sl, r1
    2104:	003c      	movs	r4, r7
    2106:	4641      	mov	r1, r8
    2108:	436c      	muls	r4, r5
    210a:	434d      	muls	r5, r1
    210c:	4651      	mov	r1, sl
    210e:	444d      	add	r5, r9
    2110:	0c0f      	lsrs	r7, r1, #16
    2112:	197d      	adds	r5, r7, r5
    2114:	45a9      	cmp	r9, r5
    2116:	d903      	bls.n	2120 <__aeabi_dmul+0x2fc>
    2118:	2180      	movs	r1, #128	; 0x80
    211a:	0249      	lsls	r1, r1, #9
    211c:	4688      	mov	r8, r1
    211e:	4444      	add	r4, r8
    2120:	9f04      	ldr	r7, [sp, #16]
    2122:	9903      	ldr	r1, [sp, #12]
    2124:	46b8      	mov	r8, r7
    2126:	4441      	add	r1, r8
    2128:	468b      	mov	fp, r1
    212a:	4583      	cmp	fp, r0
    212c:	4180      	sbcs	r0, r0
    212e:	4241      	negs	r1, r0
    2130:	4688      	mov	r8, r1
    2132:	4651      	mov	r1, sl
    2134:	0408      	lsls	r0, r1, #16
    2136:	042f      	lsls	r7, r5, #16
    2138:	0c00      	lsrs	r0, r0, #16
    213a:	183f      	adds	r7, r7, r0
    213c:	4658      	mov	r0, fp
    213e:	9902      	ldr	r1, [sp, #8]
    2140:	1810      	adds	r0, r2, r0
    2142:	4689      	mov	r9, r1
    2144:	4290      	cmp	r0, r2
    2146:	4192      	sbcs	r2, r2
    2148:	444f      	add	r7, r9
    214a:	46ba      	mov	sl, r7
    214c:	4252      	negs	r2, r2
    214e:	4699      	mov	r9, r3
    2150:	4693      	mov	fp, r2
    2152:	44c2      	add	sl, r8
    2154:	44d1      	add	r9, sl
    2156:	44cb      	add	fp, r9
    2158:	428f      	cmp	r7, r1
    215a:	41bf      	sbcs	r7, r7
    215c:	45c2      	cmp	sl, r8
    215e:	4189      	sbcs	r1, r1
    2160:	4599      	cmp	r9, r3
    2162:	419b      	sbcs	r3, r3
    2164:	4593      	cmp	fp, r2
    2166:	4192      	sbcs	r2, r2
    2168:	427f      	negs	r7, r7
    216a:	4249      	negs	r1, r1
    216c:	0c2d      	lsrs	r5, r5, #16
    216e:	4252      	negs	r2, r2
    2170:	430f      	orrs	r7, r1
    2172:	425b      	negs	r3, r3
    2174:	4313      	orrs	r3, r2
    2176:	197f      	adds	r7, r7, r5
    2178:	18ff      	adds	r7, r7, r3
    217a:	465b      	mov	r3, fp
    217c:	193c      	adds	r4, r7, r4
    217e:	0ddb      	lsrs	r3, r3, #23
    2180:	9a05      	ldr	r2, [sp, #20]
    2182:	0264      	lsls	r4, r4, #9
    2184:	431c      	orrs	r4, r3
    2186:	0243      	lsls	r3, r0, #9
    2188:	4313      	orrs	r3, r2
    218a:	1e5d      	subs	r5, r3, #1
    218c:	41ab      	sbcs	r3, r5
    218e:	465a      	mov	r2, fp
    2190:	0dc0      	lsrs	r0, r0, #23
    2192:	4303      	orrs	r3, r0
    2194:	0252      	lsls	r2, r2, #9
    2196:	4313      	orrs	r3, r2
    2198:	01e2      	lsls	r2, r4, #7
    219a:	d556      	bpl.n	224a <__aeabi_dmul+0x426>
    219c:	2001      	movs	r0, #1
    219e:	085a      	lsrs	r2, r3, #1
    21a0:	4003      	ands	r3, r0
    21a2:	4313      	orrs	r3, r2
    21a4:	07e2      	lsls	r2, r4, #31
    21a6:	4313      	orrs	r3, r2
    21a8:	0864      	lsrs	r4, r4, #1
    21aa:	485a      	ldr	r0, [pc, #360]	; (2314 <__aeabi_dmul+0x4f0>)
    21ac:	4460      	add	r0, ip
    21ae:	2800      	cmp	r0, #0
    21b0:	dd4d      	ble.n	224e <__aeabi_dmul+0x42a>
    21b2:	075a      	lsls	r2, r3, #29
    21b4:	d009      	beq.n	21ca <__aeabi_dmul+0x3a6>
    21b6:	220f      	movs	r2, #15
    21b8:	401a      	ands	r2, r3
    21ba:	2a04      	cmp	r2, #4
    21bc:	d005      	beq.n	21ca <__aeabi_dmul+0x3a6>
    21be:	1d1a      	adds	r2, r3, #4
    21c0:	429a      	cmp	r2, r3
    21c2:	419b      	sbcs	r3, r3
    21c4:	425b      	negs	r3, r3
    21c6:	18e4      	adds	r4, r4, r3
    21c8:	0013      	movs	r3, r2
    21ca:	01e2      	lsls	r2, r4, #7
    21cc:	d504      	bpl.n	21d8 <__aeabi_dmul+0x3b4>
    21ce:	2080      	movs	r0, #128	; 0x80
    21d0:	4a51      	ldr	r2, [pc, #324]	; (2318 <__aeabi_dmul+0x4f4>)
    21d2:	00c0      	lsls	r0, r0, #3
    21d4:	4014      	ands	r4, r2
    21d6:	4460      	add	r0, ip
    21d8:	4a50      	ldr	r2, [pc, #320]	; (231c <__aeabi_dmul+0x4f8>)
    21da:	4290      	cmp	r0, r2
    21dc:	dd00      	ble.n	21e0 <__aeabi_dmul+0x3bc>
    21de:	e6e3      	b.n	1fa8 <__aeabi_dmul+0x184>
    21e0:	2501      	movs	r5, #1
    21e2:	08db      	lsrs	r3, r3, #3
    21e4:	0762      	lsls	r2, r4, #29
    21e6:	431a      	orrs	r2, r3
    21e8:	0264      	lsls	r4, r4, #9
    21ea:	9b01      	ldr	r3, [sp, #4]
    21ec:	4691      	mov	r9, r2
    21ee:	0b22      	lsrs	r2, r4, #12
    21f0:	0544      	lsls	r4, r0, #21
    21f2:	0d64      	lsrs	r4, r4, #21
    21f4:	401d      	ands	r5, r3
    21f6:	e67c      	b.n	1ef2 <__aeabi_dmul+0xce>
    21f8:	2280      	movs	r2, #128	; 0x80
    21fa:	4659      	mov	r1, fp
    21fc:	0312      	lsls	r2, r2, #12
    21fe:	4211      	tst	r1, r2
    2200:	d008      	beq.n	2214 <__aeabi_dmul+0x3f0>
    2202:	4214      	tst	r4, r2
    2204:	d106      	bne.n	2214 <__aeabi_dmul+0x3f0>
    2206:	4322      	orrs	r2, r4
    2208:	0312      	lsls	r2, r2, #12
    220a:	0b12      	lsrs	r2, r2, #12
    220c:	4645      	mov	r5, r8
    220e:	4699      	mov	r9, r3
    2210:	4c43      	ldr	r4, [pc, #268]	; (2320 <__aeabi_dmul+0x4fc>)
    2212:	e66e      	b.n	1ef2 <__aeabi_dmul+0xce>
    2214:	465b      	mov	r3, fp
    2216:	431a      	orrs	r2, r3
    2218:	0312      	lsls	r2, r2, #12
    221a:	0b12      	lsrs	r2, r2, #12
    221c:	4c40      	ldr	r4, [pc, #256]	; (2320 <__aeabi_dmul+0x4fc>)
    221e:	e668      	b.n	1ef2 <__aeabi_dmul+0xce>
    2220:	0003      	movs	r3, r0
    2222:	4654      	mov	r4, sl
    2224:	3b28      	subs	r3, #40	; 0x28
    2226:	409c      	lsls	r4, r3
    2228:	2300      	movs	r3, #0
    222a:	e6b9      	b.n	1fa0 <__aeabi_dmul+0x17c>
    222c:	f000 fbfc 	bl	2a28 <__clzsi2>
    2230:	3020      	adds	r0, #32
    2232:	e6a6      	b.n	1f82 <__aeabi_dmul+0x15e>
    2234:	0003      	movs	r3, r0
    2236:	3b28      	subs	r3, #40	; 0x28
    2238:	409f      	lsls	r7, r3
    223a:	2300      	movs	r3, #0
    223c:	46bb      	mov	fp, r7
    223e:	4699      	mov	r9, r3
    2240:	e68a      	b.n	1f58 <__aeabi_dmul+0x134>
    2242:	f000 fbf1 	bl	2a28 <__clzsi2>
    2246:	3020      	adds	r0, #32
    2248:	e674      	b.n	1f34 <__aeabi_dmul+0x110>
    224a:	46b4      	mov	ip, r6
    224c:	e7ad      	b.n	21aa <__aeabi_dmul+0x386>
    224e:	2501      	movs	r5, #1
    2250:	1a2a      	subs	r2, r5, r0
    2252:	2a38      	cmp	r2, #56	; 0x38
    2254:	dd06      	ble.n	2264 <__aeabi_dmul+0x440>
    2256:	9b01      	ldr	r3, [sp, #4]
    2258:	2400      	movs	r4, #0
    225a:	401d      	ands	r5, r3
    225c:	2300      	movs	r3, #0
    225e:	2200      	movs	r2, #0
    2260:	4699      	mov	r9, r3
    2262:	e646      	b.n	1ef2 <__aeabi_dmul+0xce>
    2264:	2a1f      	cmp	r2, #31
    2266:	dc21      	bgt.n	22ac <__aeabi_dmul+0x488>
    2268:	2520      	movs	r5, #32
    226a:	0020      	movs	r0, r4
    226c:	1aad      	subs	r5, r5, r2
    226e:	001e      	movs	r6, r3
    2270:	40ab      	lsls	r3, r5
    2272:	40a8      	lsls	r0, r5
    2274:	40d6      	lsrs	r6, r2
    2276:	1e5d      	subs	r5, r3, #1
    2278:	41ab      	sbcs	r3, r5
    227a:	4330      	orrs	r0, r6
    227c:	4318      	orrs	r0, r3
    227e:	40d4      	lsrs	r4, r2
    2280:	0743      	lsls	r3, r0, #29
    2282:	d009      	beq.n	2298 <__aeabi_dmul+0x474>
    2284:	230f      	movs	r3, #15
    2286:	4003      	ands	r3, r0
    2288:	2b04      	cmp	r3, #4
    228a:	d005      	beq.n	2298 <__aeabi_dmul+0x474>
    228c:	0003      	movs	r3, r0
    228e:	1d18      	adds	r0, r3, #4
    2290:	4298      	cmp	r0, r3
    2292:	419b      	sbcs	r3, r3
    2294:	425b      	negs	r3, r3
    2296:	18e4      	adds	r4, r4, r3
    2298:	0223      	lsls	r3, r4, #8
    229a:	d521      	bpl.n	22e0 <__aeabi_dmul+0x4bc>
    229c:	2501      	movs	r5, #1
    229e:	9b01      	ldr	r3, [sp, #4]
    22a0:	2401      	movs	r4, #1
    22a2:	401d      	ands	r5, r3
    22a4:	2300      	movs	r3, #0
    22a6:	2200      	movs	r2, #0
    22a8:	4699      	mov	r9, r3
    22aa:	e622      	b.n	1ef2 <__aeabi_dmul+0xce>
    22ac:	251f      	movs	r5, #31
    22ae:	0021      	movs	r1, r4
    22b0:	426d      	negs	r5, r5
    22b2:	1a28      	subs	r0, r5, r0
    22b4:	40c1      	lsrs	r1, r0
    22b6:	0008      	movs	r0, r1
    22b8:	2a20      	cmp	r2, #32
    22ba:	d01d      	beq.n	22f8 <__aeabi_dmul+0x4d4>
    22bc:	355f      	adds	r5, #95	; 0x5f
    22be:	1aaa      	subs	r2, r5, r2
    22c0:	4094      	lsls	r4, r2
    22c2:	4323      	orrs	r3, r4
    22c4:	1e5c      	subs	r4, r3, #1
    22c6:	41a3      	sbcs	r3, r4
    22c8:	2507      	movs	r5, #7
    22ca:	4303      	orrs	r3, r0
    22cc:	401d      	ands	r5, r3
    22ce:	2200      	movs	r2, #0
    22d0:	2d00      	cmp	r5, #0
    22d2:	d009      	beq.n	22e8 <__aeabi_dmul+0x4c4>
    22d4:	220f      	movs	r2, #15
    22d6:	2400      	movs	r4, #0
    22d8:	401a      	ands	r2, r3
    22da:	0018      	movs	r0, r3
    22dc:	2a04      	cmp	r2, #4
    22de:	d1d6      	bne.n	228e <__aeabi_dmul+0x46a>
    22e0:	0003      	movs	r3, r0
    22e2:	0765      	lsls	r5, r4, #29
    22e4:	0264      	lsls	r4, r4, #9
    22e6:	0b22      	lsrs	r2, r4, #12
    22e8:	08db      	lsrs	r3, r3, #3
    22ea:	432b      	orrs	r3, r5
    22ec:	2501      	movs	r5, #1
    22ee:	4699      	mov	r9, r3
    22f0:	9b01      	ldr	r3, [sp, #4]
    22f2:	2400      	movs	r4, #0
    22f4:	401d      	ands	r5, r3
    22f6:	e5fc      	b.n	1ef2 <__aeabi_dmul+0xce>
    22f8:	2400      	movs	r4, #0
    22fa:	e7e2      	b.n	22c2 <__aeabi_dmul+0x49e>
    22fc:	2280      	movs	r2, #128	; 0x80
    22fe:	2501      	movs	r5, #1
    2300:	0312      	lsls	r2, r2, #12
    2302:	4322      	orrs	r2, r4
    2304:	9901      	ldr	r1, [sp, #4]
    2306:	0312      	lsls	r2, r2, #12
    2308:	0b12      	lsrs	r2, r2, #12
    230a:	400d      	ands	r5, r1
    230c:	4699      	mov	r9, r3
    230e:	4c04      	ldr	r4, [pc, #16]	; (2320 <__aeabi_dmul+0x4fc>)
    2310:	e5ef      	b.n	1ef2 <__aeabi_dmul+0xce>
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	000003ff 	.word	0x000003ff
    2318:	feffffff 	.word	0xfeffffff
    231c:	000007fe 	.word	0x000007fe
    2320:	000007ff 	.word	0x000007ff

00002324 <__aeabi_dsub>:
    2324:	b5f0      	push	{r4, r5, r6, r7, lr}
    2326:	4646      	mov	r6, r8
    2328:	46d6      	mov	lr, sl
    232a:	464f      	mov	r7, r9
    232c:	030c      	lsls	r4, r1, #12
    232e:	b5c0      	push	{r6, r7, lr}
    2330:	0fcd      	lsrs	r5, r1, #31
    2332:	004e      	lsls	r6, r1, #1
    2334:	0a61      	lsrs	r1, r4, #9
    2336:	0f44      	lsrs	r4, r0, #29
    2338:	430c      	orrs	r4, r1
    233a:	00c1      	lsls	r1, r0, #3
    233c:	0058      	lsls	r0, r3, #1
    233e:	0d40      	lsrs	r0, r0, #21
    2340:	4684      	mov	ip, r0
    2342:	468a      	mov	sl, r1
    2344:	000f      	movs	r7, r1
    2346:	0319      	lsls	r1, r3, #12
    2348:	0f50      	lsrs	r0, r2, #29
    234a:	0a49      	lsrs	r1, r1, #9
    234c:	4301      	orrs	r1, r0
    234e:	48c6      	ldr	r0, [pc, #792]	; (2668 <__aeabi_dsub+0x344>)
    2350:	0d76      	lsrs	r6, r6, #21
    2352:	46a8      	mov	r8, r5
    2354:	0fdb      	lsrs	r3, r3, #31
    2356:	00d2      	lsls	r2, r2, #3
    2358:	4584      	cmp	ip, r0
    235a:	d100      	bne.n	235e <__aeabi_dsub+0x3a>
    235c:	e0d8      	b.n	2510 <__aeabi_dsub+0x1ec>
    235e:	2001      	movs	r0, #1
    2360:	4043      	eors	r3, r0
    2362:	42ab      	cmp	r3, r5
    2364:	d100      	bne.n	2368 <__aeabi_dsub+0x44>
    2366:	e0a6      	b.n	24b6 <__aeabi_dsub+0x192>
    2368:	4660      	mov	r0, ip
    236a:	1a35      	subs	r5, r6, r0
    236c:	2d00      	cmp	r5, #0
    236e:	dc00      	bgt.n	2372 <__aeabi_dsub+0x4e>
    2370:	e105      	b.n	257e <__aeabi_dsub+0x25a>
    2372:	2800      	cmp	r0, #0
    2374:	d110      	bne.n	2398 <__aeabi_dsub+0x74>
    2376:	000b      	movs	r3, r1
    2378:	4313      	orrs	r3, r2
    237a:	d100      	bne.n	237e <__aeabi_dsub+0x5a>
    237c:	e0d7      	b.n	252e <__aeabi_dsub+0x20a>
    237e:	1e6b      	subs	r3, r5, #1
    2380:	2b00      	cmp	r3, #0
    2382:	d000      	beq.n	2386 <__aeabi_dsub+0x62>
    2384:	e14b      	b.n	261e <__aeabi_dsub+0x2fa>
    2386:	4653      	mov	r3, sl
    2388:	1a9f      	subs	r7, r3, r2
    238a:	45ba      	cmp	sl, r7
    238c:	4180      	sbcs	r0, r0
    238e:	1a64      	subs	r4, r4, r1
    2390:	4240      	negs	r0, r0
    2392:	1a24      	subs	r4, r4, r0
    2394:	2601      	movs	r6, #1
    2396:	e01e      	b.n	23d6 <__aeabi_dsub+0xb2>
    2398:	4bb3      	ldr	r3, [pc, #716]	; (2668 <__aeabi_dsub+0x344>)
    239a:	429e      	cmp	r6, r3
    239c:	d048      	beq.n	2430 <__aeabi_dsub+0x10c>
    239e:	2380      	movs	r3, #128	; 0x80
    23a0:	041b      	lsls	r3, r3, #16
    23a2:	4319      	orrs	r1, r3
    23a4:	2d38      	cmp	r5, #56	; 0x38
    23a6:	dd00      	ble.n	23aa <__aeabi_dsub+0x86>
    23a8:	e119      	b.n	25de <__aeabi_dsub+0x2ba>
    23aa:	2d1f      	cmp	r5, #31
    23ac:	dd00      	ble.n	23b0 <__aeabi_dsub+0x8c>
    23ae:	e14c      	b.n	264a <__aeabi_dsub+0x326>
    23b0:	2320      	movs	r3, #32
    23b2:	000f      	movs	r7, r1
    23b4:	1b5b      	subs	r3, r3, r5
    23b6:	0010      	movs	r0, r2
    23b8:	409a      	lsls	r2, r3
    23ba:	409f      	lsls	r7, r3
    23bc:	40e8      	lsrs	r0, r5
    23be:	1e53      	subs	r3, r2, #1
    23c0:	419a      	sbcs	r2, r3
    23c2:	40e9      	lsrs	r1, r5
    23c4:	4307      	orrs	r7, r0
    23c6:	4317      	orrs	r7, r2
    23c8:	4653      	mov	r3, sl
    23ca:	1bdf      	subs	r7, r3, r7
    23cc:	1a61      	subs	r1, r4, r1
    23ce:	45ba      	cmp	sl, r7
    23d0:	41a4      	sbcs	r4, r4
    23d2:	4264      	negs	r4, r4
    23d4:	1b0c      	subs	r4, r1, r4
    23d6:	0223      	lsls	r3, r4, #8
    23d8:	d400      	bmi.n	23dc <__aeabi_dsub+0xb8>
    23da:	e0c5      	b.n	2568 <__aeabi_dsub+0x244>
    23dc:	0264      	lsls	r4, r4, #9
    23de:	0a65      	lsrs	r5, r4, #9
    23e0:	2d00      	cmp	r5, #0
    23e2:	d100      	bne.n	23e6 <__aeabi_dsub+0xc2>
    23e4:	e0f6      	b.n	25d4 <__aeabi_dsub+0x2b0>
    23e6:	0028      	movs	r0, r5
    23e8:	f000 fb1e 	bl	2a28 <__clzsi2>
    23ec:	0003      	movs	r3, r0
    23ee:	3b08      	subs	r3, #8
    23f0:	2b1f      	cmp	r3, #31
    23f2:	dd00      	ble.n	23f6 <__aeabi_dsub+0xd2>
    23f4:	e0e9      	b.n	25ca <__aeabi_dsub+0x2a6>
    23f6:	2220      	movs	r2, #32
    23f8:	003c      	movs	r4, r7
    23fa:	1ad2      	subs	r2, r2, r3
    23fc:	409d      	lsls	r5, r3
    23fe:	40d4      	lsrs	r4, r2
    2400:	409f      	lsls	r7, r3
    2402:	4325      	orrs	r5, r4
    2404:	429e      	cmp	r6, r3
    2406:	dd00      	ble.n	240a <__aeabi_dsub+0xe6>
    2408:	e0db      	b.n	25c2 <__aeabi_dsub+0x29e>
    240a:	1b9e      	subs	r6, r3, r6
    240c:	1c73      	adds	r3, r6, #1
    240e:	2b1f      	cmp	r3, #31
    2410:	dd00      	ble.n	2414 <__aeabi_dsub+0xf0>
    2412:	e10a      	b.n	262a <__aeabi_dsub+0x306>
    2414:	2220      	movs	r2, #32
    2416:	0038      	movs	r0, r7
    2418:	1ad2      	subs	r2, r2, r3
    241a:	0029      	movs	r1, r5
    241c:	4097      	lsls	r7, r2
    241e:	002c      	movs	r4, r5
    2420:	4091      	lsls	r1, r2
    2422:	40d8      	lsrs	r0, r3
    2424:	1e7a      	subs	r2, r7, #1
    2426:	4197      	sbcs	r7, r2
    2428:	40dc      	lsrs	r4, r3
    242a:	2600      	movs	r6, #0
    242c:	4301      	orrs	r1, r0
    242e:	430f      	orrs	r7, r1
    2430:	077b      	lsls	r3, r7, #29
    2432:	d009      	beq.n	2448 <__aeabi_dsub+0x124>
    2434:	230f      	movs	r3, #15
    2436:	403b      	ands	r3, r7
    2438:	2b04      	cmp	r3, #4
    243a:	d005      	beq.n	2448 <__aeabi_dsub+0x124>
    243c:	1d3b      	adds	r3, r7, #4
    243e:	42bb      	cmp	r3, r7
    2440:	41bf      	sbcs	r7, r7
    2442:	427f      	negs	r7, r7
    2444:	19e4      	adds	r4, r4, r7
    2446:	001f      	movs	r7, r3
    2448:	0223      	lsls	r3, r4, #8
    244a:	d525      	bpl.n	2498 <__aeabi_dsub+0x174>
    244c:	4b86      	ldr	r3, [pc, #536]	; (2668 <__aeabi_dsub+0x344>)
    244e:	3601      	adds	r6, #1
    2450:	429e      	cmp	r6, r3
    2452:	d100      	bne.n	2456 <__aeabi_dsub+0x132>
    2454:	e0af      	b.n	25b6 <__aeabi_dsub+0x292>
    2456:	4b85      	ldr	r3, [pc, #532]	; (266c <__aeabi_dsub+0x348>)
    2458:	2501      	movs	r5, #1
    245a:	401c      	ands	r4, r3
    245c:	4643      	mov	r3, r8
    245e:	0762      	lsls	r2, r4, #29
    2460:	08ff      	lsrs	r7, r7, #3
    2462:	0264      	lsls	r4, r4, #9
    2464:	0576      	lsls	r6, r6, #21
    2466:	4317      	orrs	r7, r2
    2468:	0b24      	lsrs	r4, r4, #12
    246a:	0d76      	lsrs	r6, r6, #21
    246c:	401d      	ands	r5, r3
    246e:	2100      	movs	r1, #0
    2470:	0324      	lsls	r4, r4, #12
    2472:	0b23      	lsrs	r3, r4, #12
    2474:	0d0c      	lsrs	r4, r1, #20
    2476:	4a7e      	ldr	r2, [pc, #504]	; (2670 <__aeabi_dsub+0x34c>)
    2478:	0524      	lsls	r4, r4, #20
    247a:	431c      	orrs	r4, r3
    247c:	4014      	ands	r4, r2
    247e:	0533      	lsls	r3, r6, #20
    2480:	4323      	orrs	r3, r4
    2482:	005b      	lsls	r3, r3, #1
    2484:	07ed      	lsls	r5, r5, #31
    2486:	085b      	lsrs	r3, r3, #1
    2488:	432b      	orrs	r3, r5
    248a:	0038      	movs	r0, r7
    248c:	0019      	movs	r1, r3
    248e:	bc1c      	pop	{r2, r3, r4}
    2490:	4690      	mov	r8, r2
    2492:	4699      	mov	r9, r3
    2494:	46a2      	mov	sl, r4
    2496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2498:	2501      	movs	r5, #1
    249a:	4643      	mov	r3, r8
    249c:	0762      	lsls	r2, r4, #29
    249e:	08ff      	lsrs	r7, r7, #3
    24a0:	4317      	orrs	r7, r2
    24a2:	08e4      	lsrs	r4, r4, #3
    24a4:	401d      	ands	r5, r3
    24a6:	4b70      	ldr	r3, [pc, #448]	; (2668 <__aeabi_dsub+0x344>)
    24a8:	429e      	cmp	r6, r3
    24aa:	d036      	beq.n	251a <__aeabi_dsub+0x1f6>
    24ac:	0324      	lsls	r4, r4, #12
    24ae:	0576      	lsls	r6, r6, #21
    24b0:	0b24      	lsrs	r4, r4, #12
    24b2:	0d76      	lsrs	r6, r6, #21
    24b4:	e7db      	b.n	246e <__aeabi_dsub+0x14a>
    24b6:	4663      	mov	r3, ip
    24b8:	1af3      	subs	r3, r6, r3
    24ba:	2b00      	cmp	r3, #0
    24bc:	dc00      	bgt.n	24c0 <__aeabi_dsub+0x19c>
    24be:	e094      	b.n	25ea <__aeabi_dsub+0x2c6>
    24c0:	4660      	mov	r0, ip
    24c2:	2800      	cmp	r0, #0
    24c4:	d035      	beq.n	2532 <__aeabi_dsub+0x20e>
    24c6:	4868      	ldr	r0, [pc, #416]	; (2668 <__aeabi_dsub+0x344>)
    24c8:	4286      	cmp	r6, r0
    24ca:	d0b1      	beq.n	2430 <__aeabi_dsub+0x10c>
    24cc:	2780      	movs	r7, #128	; 0x80
    24ce:	043f      	lsls	r7, r7, #16
    24d0:	4339      	orrs	r1, r7
    24d2:	2b38      	cmp	r3, #56	; 0x38
    24d4:	dc00      	bgt.n	24d8 <__aeabi_dsub+0x1b4>
    24d6:	e0fd      	b.n	26d4 <__aeabi_dsub+0x3b0>
    24d8:	430a      	orrs	r2, r1
    24da:	0017      	movs	r7, r2
    24dc:	2100      	movs	r1, #0
    24de:	1e7a      	subs	r2, r7, #1
    24e0:	4197      	sbcs	r7, r2
    24e2:	4457      	add	r7, sl
    24e4:	4557      	cmp	r7, sl
    24e6:	4180      	sbcs	r0, r0
    24e8:	1909      	adds	r1, r1, r4
    24ea:	4244      	negs	r4, r0
    24ec:	190c      	adds	r4, r1, r4
    24ee:	0223      	lsls	r3, r4, #8
    24f0:	d53a      	bpl.n	2568 <__aeabi_dsub+0x244>
    24f2:	4b5d      	ldr	r3, [pc, #372]	; (2668 <__aeabi_dsub+0x344>)
    24f4:	3601      	adds	r6, #1
    24f6:	429e      	cmp	r6, r3
    24f8:	d100      	bne.n	24fc <__aeabi_dsub+0x1d8>
    24fa:	e14b      	b.n	2794 <__aeabi_dsub+0x470>
    24fc:	2201      	movs	r2, #1
    24fe:	4b5b      	ldr	r3, [pc, #364]	; (266c <__aeabi_dsub+0x348>)
    2500:	401c      	ands	r4, r3
    2502:	087b      	lsrs	r3, r7, #1
    2504:	4017      	ands	r7, r2
    2506:	431f      	orrs	r7, r3
    2508:	07e2      	lsls	r2, r4, #31
    250a:	4317      	orrs	r7, r2
    250c:	0864      	lsrs	r4, r4, #1
    250e:	e78f      	b.n	2430 <__aeabi_dsub+0x10c>
    2510:	0008      	movs	r0, r1
    2512:	4310      	orrs	r0, r2
    2514:	d000      	beq.n	2518 <__aeabi_dsub+0x1f4>
    2516:	e724      	b.n	2362 <__aeabi_dsub+0x3e>
    2518:	e721      	b.n	235e <__aeabi_dsub+0x3a>
    251a:	0023      	movs	r3, r4
    251c:	433b      	orrs	r3, r7
    251e:	d100      	bne.n	2522 <__aeabi_dsub+0x1fe>
    2520:	e1b9      	b.n	2896 <__aeabi_dsub+0x572>
    2522:	2280      	movs	r2, #128	; 0x80
    2524:	0312      	lsls	r2, r2, #12
    2526:	4314      	orrs	r4, r2
    2528:	0324      	lsls	r4, r4, #12
    252a:	0b24      	lsrs	r4, r4, #12
    252c:	e79f      	b.n	246e <__aeabi_dsub+0x14a>
    252e:	002e      	movs	r6, r5
    2530:	e77e      	b.n	2430 <__aeabi_dsub+0x10c>
    2532:	0008      	movs	r0, r1
    2534:	4310      	orrs	r0, r2
    2536:	d100      	bne.n	253a <__aeabi_dsub+0x216>
    2538:	e0ca      	b.n	26d0 <__aeabi_dsub+0x3ac>
    253a:	1e58      	subs	r0, r3, #1
    253c:	4684      	mov	ip, r0
    253e:	2800      	cmp	r0, #0
    2540:	d000      	beq.n	2544 <__aeabi_dsub+0x220>
    2542:	e0e7      	b.n	2714 <__aeabi_dsub+0x3f0>
    2544:	4452      	add	r2, sl
    2546:	4552      	cmp	r2, sl
    2548:	4180      	sbcs	r0, r0
    254a:	1864      	adds	r4, r4, r1
    254c:	4240      	negs	r0, r0
    254e:	1824      	adds	r4, r4, r0
    2550:	0017      	movs	r7, r2
    2552:	2601      	movs	r6, #1
    2554:	0223      	lsls	r3, r4, #8
    2556:	d507      	bpl.n	2568 <__aeabi_dsub+0x244>
    2558:	2602      	movs	r6, #2
    255a:	e7cf      	b.n	24fc <__aeabi_dsub+0x1d8>
    255c:	4664      	mov	r4, ip
    255e:	432c      	orrs	r4, r5
    2560:	d100      	bne.n	2564 <__aeabi_dsub+0x240>
    2562:	e1b3      	b.n	28cc <__aeabi_dsub+0x5a8>
    2564:	002c      	movs	r4, r5
    2566:	4667      	mov	r7, ip
    2568:	077b      	lsls	r3, r7, #29
    256a:	d000      	beq.n	256e <__aeabi_dsub+0x24a>
    256c:	e762      	b.n	2434 <__aeabi_dsub+0x110>
    256e:	0763      	lsls	r3, r4, #29
    2570:	08ff      	lsrs	r7, r7, #3
    2572:	431f      	orrs	r7, r3
    2574:	2501      	movs	r5, #1
    2576:	4643      	mov	r3, r8
    2578:	08e4      	lsrs	r4, r4, #3
    257a:	401d      	ands	r5, r3
    257c:	e793      	b.n	24a6 <__aeabi_dsub+0x182>
    257e:	2d00      	cmp	r5, #0
    2580:	d178      	bne.n	2674 <__aeabi_dsub+0x350>
    2582:	1c75      	adds	r5, r6, #1
    2584:	056d      	lsls	r5, r5, #21
    2586:	0d6d      	lsrs	r5, r5, #21
    2588:	2d01      	cmp	r5, #1
    258a:	dc00      	bgt.n	258e <__aeabi_dsub+0x26a>
    258c:	e0f2      	b.n	2774 <__aeabi_dsub+0x450>
    258e:	4650      	mov	r0, sl
    2590:	1a80      	subs	r0, r0, r2
    2592:	4582      	cmp	sl, r0
    2594:	41bf      	sbcs	r7, r7
    2596:	1a65      	subs	r5, r4, r1
    2598:	427f      	negs	r7, r7
    259a:	1bed      	subs	r5, r5, r7
    259c:	4684      	mov	ip, r0
    259e:	0228      	lsls	r0, r5, #8
    25a0:	d400      	bmi.n	25a4 <__aeabi_dsub+0x280>
    25a2:	e08c      	b.n	26be <__aeabi_dsub+0x39a>
    25a4:	4650      	mov	r0, sl
    25a6:	1a17      	subs	r7, r2, r0
    25a8:	42ba      	cmp	r2, r7
    25aa:	4192      	sbcs	r2, r2
    25ac:	1b0c      	subs	r4, r1, r4
    25ae:	4255      	negs	r5, r2
    25b0:	1b65      	subs	r5, r4, r5
    25b2:	4698      	mov	r8, r3
    25b4:	e714      	b.n	23e0 <__aeabi_dsub+0xbc>
    25b6:	2501      	movs	r5, #1
    25b8:	4643      	mov	r3, r8
    25ba:	2400      	movs	r4, #0
    25bc:	401d      	ands	r5, r3
    25be:	2700      	movs	r7, #0
    25c0:	e755      	b.n	246e <__aeabi_dsub+0x14a>
    25c2:	4c2a      	ldr	r4, [pc, #168]	; (266c <__aeabi_dsub+0x348>)
    25c4:	1af6      	subs	r6, r6, r3
    25c6:	402c      	ands	r4, r5
    25c8:	e732      	b.n	2430 <__aeabi_dsub+0x10c>
    25ca:	003d      	movs	r5, r7
    25cc:	3828      	subs	r0, #40	; 0x28
    25ce:	4085      	lsls	r5, r0
    25d0:	2700      	movs	r7, #0
    25d2:	e717      	b.n	2404 <__aeabi_dsub+0xe0>
    25d4:	0038      	movs	r0, r7
    25d6:	f000 fa27 	bl	2a28 <__clzsi2>
    25da:	3020      	adds	r0, #32
    25dc:	e706      	b.n	23ec <__aeabi_dsub+0xc8>
    25de:	430a      	orrs	r2, r1
    25e0:	0017      	movs	r7, r2
    25e2:	2100      	movs	r1, #0
    25e4:	1e7a      	subs	r2, r7, #1
    25e6:	4197      	sbcs	r7, r2
    25e8:	e6ee      	b.n	23c8 <__aeabi_dsub+0xa4>
    25ea:	2b00      	cmp	r3, #0
    25ec:	d000      	beq.n	25f0 <__aeabi_dsub+0x2cc>
    25ee:	e0e5      	b.n	27bc <__aeabi_dsub+0x498>
    25f0:	1c73      	adds	r3, r6, #1
    25f2:	469c      	mov	ip, r3
    25f4:	055b      	lsls	r3, r3, #21
    25f6:	0d5b      	lsrs	r3, r3, #21
    25f8:	2b01      	cmp	r3, #1
    25fa:	dc00      	bgt.n	25fe <__aeabi_dsub+0x2da>
    25fc:	e09f      	b.n	273e <__aeabi_dsub+0x41a>
    25fe:	4b1a      	ldr	r3, [pc, #104]	; (2668 <__aeabi_dsub+0x344>)
    2600:	459c      	cmp	ip, r3
    2602:	d100      	bne.n	2606 <__aeabi_dsub+0x2e2>
    2604:	e0c5      	b.n	2792 <__aeabi_dsub+0x46e>
    2606:	4452      	add	r2, sl
    2608:	4552      	cmp	r2, sl
    260a:	4180      	sbcs	r0, r0
    260c:	1864      	adds	r4, r4, r1
    260e:	4240      	negs	r0, r0
    2610:	1824      	adds	r4, r4, r0
    2612:	07e7      	lsls	r7, r4, #31
    2614:	0852      	lsrs	r2, r2, #1
    2616:	4317      	orrs	r7, r2
    2618:	0864      	lsrs	r4, r4, #1
    261a:	4666      	mov	r6, ip
    261c:	e708      	b.n	2430 <__aeabi_dsub+0x10c>
    261e:	4812      	ldr	r0, [pc, #72]	; (2668 <__aeabi_dsub+0x344>)
    2620:	4285      	cmp	r5, r0
    2622:	d100      	bne.n	2626 <__aeabi_dsub+0x302>
    2624:	e085      	b.n	2732 <__aeabi_dsub+0x40e>
    2626:	001d      	movs	r5, r3
    2628:	e6bc      	b.n	23a4 <__aeabi_dsub+0x80>
    262a:	0029      	movs	r1, r5
    262c:	3e1f      	subs	r6, #31
    262e:	40f1      	lsrs	r1, r6
    2630:	2b20      	cmp	r3, #32
    2632:	d100      	bne.n	2636 <__aeabi_dsub+0x312>
    2634:	e07f      	b.n	2736 <__aeabi_dsub+0x412>
    2636:	2240      	movs	r2, #64	; 0x40
    2638:	1ad3      	subs	r3, r2, r3
    263a:	409d      	lsls	r5, r3
    263c:	432f      	orrs	r7, r5
    263e:	1e7d      	subs	r5, r7, #1
    2640:	41af      	sbcs	r7, r5
    2642:	2400      	movs	r4, #0
    2644:	430f      	orrs	r7, r1
    2646:	2600      	movs	r6, #0
    2648:	e78e      	b.n	2568 <__aeabi_dsub+0x244>
    264a:	002b      	movs	r3, r5
    264c:	000f      	movs	r7, r1
    264e:	3b20      	subs	r3, #32
    2650:	40df      	lsrs	r7, r3
    2652:	2d20      	cmp	r5, #32
    2654:	d071      	beq.n	273a <__aeabi_dsub+0x416>
    2656:	2340      	movs	r3, #64	; 0x40
    2658:	1b5d      	subs	r5, r3, r5
    265a:	40a9      	lsls	r1, r5
    265c:	430a      	orrs	r2, r1
    265e:	1e51      	subs	r1, r2, #1
    2660:	418a      	sbcs	r2, r1
    2662:	2100      	movs	r1, #0
    2664:	4317      	orrs	r7, r2
    2666:	e6af      	b.n	23c8 <__aeabi_dsub+0xa4>
    2668:	000007ff 	.word	0x000007ff
    266c:	ff7fffff 	.word	0xff7fffff
    2670:	800fffff 	.word	0x800fffff
    2674:	2e00      	cmp	r6, #0
    2676:	d03e      	beq.n	26f6 <__aeabi_dsub+0x3d2>
    2678:	4eb3      	ldr	r6, [pc, #716]	; (2948 <__aeabi_dsub+0x624>)
    267a:	45b4      	cmp	ip, r6
    267c:	d045      	beq.n	270a <__aeabi_dsub+0x3e6>
    267e:	2680      	movs	r6, #128	; 0x80
    2680:	0436      	lsls	r6, r6, #16
    2682:	426d      	negs	r5, r5
    2684:	4334      	orrs	r4, r6
    2686:	2d38      	cmp	r5, #56	; 0x38
    2688:	dd00      	ble.n	268c <__aeabi_dsub+0x368>
    268a:	e0a8      	b.n	27de <__aeabi_dsub+0x4ba>
    268c:	2d1f      	cmp	r5, #31
    268e:	dd00      	ble.n	2692 <__aeabi_dsub+0x36e>
    2690:	e11f      	b.n	28d2 <__aeabi_dsub+0x5ae>
    2692:	2620      	movs	r6, #32
    2694:	0027      	movs	r7, r4
    2696:	4650      	mov	r0, sl
    2698:	1b76      	subs	r6, r6, r5
    269a:	40b7      	lsls	r7, r6
    269c:	40e8      	lsrs	r0, r5
    269e:	4307      	orrs	r7, r0
    26a0:	4650      	mov	r0, sl
    26a2:	40b0      	lsls	r0, r6
    26a4:	1e46      	subs	r6, r0, #1
    26a6:	41b0      	sbcs	r0, r6
    26a8:	40ec      	lsrs	r4, r5
    26aa:	4338      	orrs	r0, r7
    26ac:	1a17      	subs	r7, r2, r0
    26ae:	42ba      	cmp	r2, r7
    26b0:	4192      	sbcs	r2, r2
    26b2:	1b0c      	subs	r4, r1, r4
    26b4:	4252      	negs	r2, r2
    26b6:	1aa4      	subs	r4, r4, r2
    26b8:	4666      	mov	r6, ip
    26ba:	4698      	mov	r8, r3
    26bc:	e68b      	b.n	23d6 <__aeabi_dsub+0xb2>
    26be:	4664      	mov	r4, ip
    26c0:	4667      	mov	r7, ip
    26c2:	432c      	orrs	r4, r5
    26c4:	d000      	beq.n	26c8 <__aeabi_dsub+0x3a4>
    26c6:	e68b      	b.n	23e0 <__aeabi_dsub+0xbc>
    26c8:	2500      	movs	r5, #0
    26ca:	2600      	movs	r6, #0
    26cc:	2700      	movs	r7, #0
    26ce:	e6ea      	b.n	24a6 <__aeabi_dsub+0x182>
    26d0:	001e      	movs	r6, r3
    26d2:	e6ad      	b.n	2430 <__aeabi_dsub+0x10c>
    26d4:	2b1f      	cmp	r3, #31
    26d6:	dc60      	bgt.n	279a <__aeabi_dsub+0x476>
    26d8:	2720      	movs	r7, #32
    26da:	1af8      	subs	r0, r7, r3
    26dc:	000f      	movs	r7, r1
    26de:	4684      	mov	ip, r0
    26e0:	4087      	lsls	r7, r0
    26e2:	0010      	movs	r0, r2
    26e4:	40d8      	lsrs	r0, r3
    26e6:	4307      	orrs	r7, r0
    26e8:	4660      	mov	r0, ip
    26ea:	4082      	lsls	r2, r0
    26ec:	1e50      	subs	r0, r2, #1
    26ee:	4182      	sbcs	r2, r0
    26f0:	40d9      	lsrs	r1, r3
    26f2:	4317      	orrs	r7, r2
    26f4:	e6f5      	b.n	24e2 <__aeabi_dsub+0x1be>
    26f6:	0026      	movs	r6, r4
    26f8:	4650      	mov	r0, sl
    26fa:	4306      	orrs	r6, r0
    26fc:	d005      	beq.n	270a <__aeabi_dsub+0x3e6>
    26fe:	43ed      	mvns	r5, r5
    2700:	2d00      	cmp	r5, #0
    2702:	d0d3      	beq.n	26ac <__aeabi_dsub+0x388>
    2704:	4e90      	ldr	r6, [pc, #576]	; (2948 <__aeabi_dsub+0x624>)
    2706:	45b4      	cmp	ip, r6
    2708:	d1bd      	bne.n	2686 <__aeabi_dsub+0x362>
    270a:	000c      	movs	r4, r1
    270c:	0017      	movs	r7, r2
    270e:	4666      	mov	r6, ip
    2710:	4698      	mov	r8, r3
    2712:	e68d      	b.n	2430 <__aeabi_dsub+0x10c>
    2714:	488c      	ldr	r0, [pc, #560]	; (2948 <__aeabi_dsub+0x624>)
    2716:	4283      	cmp	r3, r0
    2718:	d00b      	beq.n	2732 <__aeabi_dsub+0x40e>
    271a:	4663      	mov	r3, ip
    271c:	e6d9      	b.n	24d2 <__aeabi_dsub+0x1ae>
    271e:	2d00      	cmp	r5, #0
    2720:	d000      	beq.n	2724 <__aeabi_dsub+0x400>
    2722:	e096      	b.n	2852 <__aeabi_dsub+0x52e>
    2724:	0008      	movs	r0, r1
    2726:	4310      	orrs	r0, r2
    2728:	d100      	bne.n	272c <__aeabi_dsub+0x408>
    272a:	e0e2      	b.n	28f2 <__aeabi_dsub+0x5ce>
    272c:	000c      	movs	r4, r1
    272e:	0017      	movs	r7, r2
    2730:	4698      	mov	r8, r3
    2732:	4e85      	ldr	r6, [pc, #532]	; (2948 <__aeabi_dsub+0x624>)
    2734:	e67c      	b.n	2430 <__aeabi_dsub+0x10c>
    2736:	2500      	movs	r5, #0
    2738:	e780      	b.n	263c <__aeabi_dsub+0x318>
    273a:	2100      	movs	r1, #0
    273c:	e78e      	b.n	265c <__aeabi_dsub+0x338>
    273e:	0023      	movs	r3, r4
    2740:	4650      	mov	r0, sl
    2742:	4303      	orrs	r3, r0
    2744:	2e00      	cmp	r6, #0
    2746:	d000      	beq.n	274a <__aeabi_dsub+0x426>
    2748:	e0a8      	b.n	289c <__aeabi_dsub+0x578>
    274a:	2b00      	cmp	r3, #0
    274c:	d100      	bne.n	2750 <__aeabi_dsub+0x42c>
    274e:	e0de      	b.n	290e <__aeabi_dsub+0x5ea>
    2750:	000b      	movs	r3, r1
    2752:	4313      	orrs	r3, r2
    2754:	d100      	bne.n	2758 <__aeabi_dsub+0x434>
    2756:	e66b      	b.n	2430 <__aeabi_dsub+0x10c>
    2758:	4452      	add	r2, sl
    275a:	4552      	cmp	r2, sl
    275c:	4180      	sbcs	r0, r0
    275e:	1864      	adds	r4, r4, r1
    2760:	4240      	negs	r0, r0
    2762:	1824      	adds	r4, r4, r0
    2764:	0017      	movs	r7, r2
    2766:	0223      	lsls	r3, r4, #8
    2768:	d400      	bmi.n	276c <__aeabi_dsub+0x448>
    276a:	e6fd      	b.n	2568 <__aeabi_dsub+0x244>
    276c:	4b77      	ldr	r3, [pc, #476]	; (294c <__aeabi_dsub+0x628>)
    276e:	4666      	mov	r6, ip
    2770:	401c      	ands	r4, r3
    2772:	e65d      	b.n	2430 <__aeabi_dsub+0x10c>
    2774:	0025      	movs	r5, r4
    2776:	4650      	mov	r0, sl
    2778:	4305      	orrs	r5, r0
    277a:	2e00      	cmp	r6, #0
    277c:	d1cf      	bne.n	271e <__aeabi_dsub+0x3fa>
    277e:	2d00      	cmp	r5, #0
    2780:	d14f      	bne.n	2822 <__aeabi_dsub+0x4fe>
    2782:	000c      	movs	r4, r1
    2784:	4314      	orrs	r4, r2
    2786:	d100      	bne.n	278a <__aeabi_dsub+0x466>
    2788:	e0a0      	b.n	28cc <__aeabi_dsub+0x5a8>
    278a:	000c      	movs	r4, r1
    278c:	0017      	movs	r7, r2
    278e:	4698      	mov	r8, r3
    2790:	e64e      	b.n	2430 <__aeabi_dsub+0x10c>
    2792:	4666      	mov	r6, ip
    2794:	2400      	movs	r4, #0
    2796:	2700      	movs	r7, #0
    2798:	e685      	b.n	24a6 <__aeabi_dsub+0x182>
    279a:	001f      	movs	r7, r3
    279c:	0008      	movs	r0, r1
    279e:	3f20      	subs	r7, #32
    27a0:	40f8      	lsrs	r0, r7
    27a2:	0007      	movs	r7, r0
    27a4:	2b20      	cmp	r3, #32
    27a6:	d100      	bne.n	27aa <__aeabi_dsub+0x486>
    27a8:	e08e      	b.n	28c8 <__aeabi_dsub+0x5a4>
    27aa:	2040      	movs	r0, #64	; 0x40
    27ac:	1ac3      	subs	r3, r0, r3
    27ae:	4099      	lsls	r1, r3
    27b0:	430a      	orrs	r2, r1
    27b2:	1e51      	subs	r1, r2, #1
    27b4:	418a      	sbcs	r2, r1
    27b6:	2100      	movs	r1, #0
    27b8:	4317      	orrs	r7, r2
    27ba:	e692      	b.n	24e2 <__aeabi_dsub+0x1be>
    27bc:	2e00      	cmp	r6, #0
    27be:	d114      	bne.n	27ea <__aeabi_dsub+0x4c6>
    27c0:	0026      	movs	r6, r4
    27c2:	4650      	mov	r0, sl
    27c4:	4306      	orrs	r6, r0
    27c6:	d062      	beq.n	288e <__aeabi_dsub+0x56a>
    27c8:	43db      	mvns	r3, r3
    27ca:	2b00      	cmp	r3, #0
    27cc:	d15c      	bne.n	2888 <__aeabi_dsub+0x564>
    27ce:	1887      	adds	r7, r0, r2
    27d0:	4297      	cmp	r7, r2
    27d2:	4192      	sbcs	r2, r2
    27d4:	1864      	adds	r4, r4, r1
    27d6:	4252      	negs	r2, r2
    27d8:	18a4      	adds	r4, r4, r2
    27da:	4666      	mov	r6, ip
    27dc:	e687      	b.n	24ee <__aeabi_dsub+0x1ca>
    27de:	4650      	mov	r0, sl
    27e0:	4320      	orrs	r0, r4
    27e2:	1e44      	subs	r4, r0, #1
    27e4:	41a0      	sbcs	r0, r4
    27e6:	2400      	movs	r4, #0
    27e8:	e760      	b.n	26ac <__aeabi_dsub+0x388>
    27ea:	4e57      	ldr	r6, [pc, #348]	; (2948 <__aeabi_dsub+0x624>)
    27ec:	45b4      	cmp	ip, r6
    27ee:	d04e      	beq.n	288e <__aeabi_dsub+0x56a>
    27f0:	2680      	movs	r6, #128	; 0x80
    27f2:	0436      	lsls	r6, r6, #16
    27f4:	425b      	negs	r3, r3
    27f6:	4334      	orrs	r4, r6
    27f8:	2b38      	cmp	r3, #56	; 0x38
    27fa:	dd00      	ble.n	27fe <__aeabi_dsub+0x4da>
    27fc:	e07f      	b.n	28fe <__aeabi_dsub+0x5da>
    27fe:	2b1f      	cmp	r3, #31
    2800:	dd00      	ble.n	2804 <__aeabi_dsub+0x4e0>
    2802:	e08b      	b.n	291c <__aeabi_dsub+0x5f8>
    2804:	2620      	movs	r6, #32
    2806:	0027      	movs	r7, r4
    2808:	4650      	mov	r0, sl
    280a:	1af6      	subs	r6, r6, r3
    280c:	40b7      	lsls	r7, r6
    280e:	40d8      	lsrs	r0, r3
    2810:	4307      	orrs	r7, r0
    2812:	4650      	mov	r0, sl
    2814:	40b0      	lsls	r0, r6
    2816:	1e46      	subs	r6, r0, #1
    2818:	41b0      	sbcs	r0, r6
    281a:	4307      	orrs	r7, r0
    281c:	40dc      	lsrs	r4, r3
    281e:	18bf      	adds	r7, r7, r2
    2820:	e7d6      	b.n	27d0 <__aeabi_dsub+0x4ac>
    2822:	000d      	movs	r5, r1
    2824:	4315      	orrs	r5, r2
    2826:	d100      	bne.n	282a <__aeabi_dsub+0x506>
    2828:	e602      	b.n	2430 <__aeabi_dsub+0x10c>
    282a:	4650      	mov	r0, sl
    282c:	1a80      	subs	r0, r0, r2
    282e:	4582      	cmp	sl, r0
    2830:	41bf      	sbcs	r7, r7
    2832:	1a65      	subs	r5, r4, r1
    2834:	427f      	negs	r7, r7
    2836:	1bed      	subs	r5, r5, r7
    2838:	4684      	mov	ip, r0
    283a:	0228      	lsls	r0, r5, #8
    283c:	d400      	bmi.n	2840 <__aeabi_dsub+0x51c>
    283e:	e68d      	b.n	255c <__aeabi_dsub+0x238>
    2840:	4650      	mov	r0, sl
    2842:	1a17      	subs	r7, r2, r0
    2844:	42ba      	cmp	r2, r7
    2846:	4192      	sbcs	r2, r2
    2848:	1b0c      	subs	r4, r1, r4
    284a:	4252      	negs	r2, r2
    284c:	1aa4      	subs	r4, r4, r2
    284e:	4698      	mov	r8, r3
    2850:	e5ee      	b.n	2430 <__aeabi_dsub+0x10c>
    2852:	000d      	movs	r5, r1
    2854:	4315      	orrs	r5, r2
    2856:	d100      	bne.n	285a <__aeabi_dsub+0x536>
    2858:	e76b      	b.n	2732 <__aeabi_dsub+0x40e>
    285a:	4650      	mov	r0, sl
    285c:	0767      	lsls	r7, r4, #29
    285e:	08c0      	lsrs	r0, r0, #3
    2860:	4307      	orrs	r7, r0
    2862:	2080      	movs	r0, #128	; 0x80
    2864:	08e4      	lsrs	r4, r4, #3
    2866:	0300      	lsls	r0, r0, #12
    2868:	4204      	tst	r4, r0
    286a:	d007      	beq.n	287c <__aeabi_dsub+0x558>
    286c:	08cd      	lsrs	r5, r1, #3
    286e:	4205      	tst	r5, r0
    2870:	d104      	bne.n	287c <__aeabi_dsub+0x558>
    2872:	002c      	movs	r4, r5
    2874:	4698      	mov	r8, r3
    2876:	08d7      	lsrs	r7, r2, #3
    2878:	0749      	lsls	r1, r1, #29
    287a:	430f      	orrs	r7, r1
    287c:	0f7b      	lsrs	r3, r7, #29
    287e:	00e4      	lsls	r4, r4, #3
    2880:	431c      	orrs	r4, r3
    2882:	00ff      	lsls	r7, r7, #3
    2884:	4e30      	ldr	r6, [pc, #192]	; (2948 <__aeabi_dsub+0x624>)
    2886:	e5d3      	b.n	2430 <__aeabi_dsub+0x10c>
    2888:	4e2f      	ldr	r6, [pc, #188]	; (2948 <__aeabi_dsub+0x624>)
    288a:	45b4      	cmp	ip, r6
    288c:	d1b4      	bne.n	27f8 <__aeabi_dsub+0x4d4>
    288e:	000c      	movs	r4, r1
    2890:	0017      	movs	r7, r2
    2892:	4666      	mov	r6, ip
    2894:	e5cc      	b.n	2430 <__aeabi_dsub+0x10c>
    2896:	2700      	movs	r7, #0
    2898:	2400      	movs	r4, #0
    289a:	e5e8      	b.n	246e <__aeabi_dsub+0x14a>
    289c:	2b00      	cmp	r3, #0
    289e:	d039      	beq.n	2914 <__aeabi_dsub+0x5f0>
    28a0:	000b      	movs	r3, r1
    28a2:	4313      	orrs	r3, r2
    28a4:	d100      	bne.n	28a8 <__aeabi_dsub+0x584>
    28a6:	e744      	b.n	2732 <__aeabi_dsub+0x40e>
    28a8:	08c0      	lsrs	r0, r0, #3
    28aa:	0767      	lsls	r7, r4, #29
    28ac:	4307      	orrs	r7, r0
    28ae:	2080      	movs	r0, #128	; 0x80
    28b0:	08e4      	lsrs	r4, r4, #3
    28b2:	0300      	lsls	r0, r0, #12
    28b4:	4204      	tst	r4, r0
    28b6:	d0e1      	beq.n	287c <__aeabi_dsub+0x558>
    28b8:	08cb      	lsrs	r3, r1, #3
    28ba:	4203      	tst	r3, r0
    28bc:	d1de      	bne.n	287c <__aeabi_dsub+0x558>
    28be:	08d7      	lsrs	r7, r2, #3
    28c0:	0749      	lsls	r1, r1, #29
    28c2:	430f      	orrs	r7, r1
    28c4:	001c      	movs	r4, r3
    28c6:	e7d9      	b.n	287c <__aeabi_dsub+0x558>
    28c8:	2100      	movs	r1, #0
    28ca:	e771      	b.n	27b0 <__aeabi_dsub+0x48c>
    28cc:	2500      	movs	r5, #0
    28ce:	2700      	movs	r7, #0
    28d0:	e5e9      	b.n	24a6 <__aeabi_dsub+0x182>
    28d2:	002e      	movs	r6, r5
    28d4:	0027      	movs	r7, r4
    28d6:	3e20      	subs	r6, #32
    28d8:	40f7      	lsrs	r7, r6
    28da:	2d20      	cmp	r5, #32
    28dc:	d02f      	beq.n	293e <__aeabi_dsub+0x61a>
    28de:	2640      	movs	r6, #64	; 0x40
    28e0:	1b75      	subs	r5, r6, r5
    28e2:	40ac      	lsls	r4, r5
    28e4:	4650      	mov	r0, sl
    28e6:	4320      	orrs	r0, r4
    28e8:	1e44      	subs	r4, r0, #1
    28ea:	41a0      	sbcs	r0, r4
    28ec:	2400      	movs	r4, #0
    28ee:	4338      	orrs	r0, r7
    28f0:	e6dc      	b.n	26ac <__aeabi_dsub+0x388>
    28f2:	2480      	movs	r4, #128	; 0x80
    28f4:	2500      	movs	r5, #0
    28f6:	0324      	lsls	r4, r4, #12
    28f8:	4e13      	ldr	r6, [pc, #76]	; (2948 <__aeabi_dsub+0x624>)
    28fa:	2700      	movs	r7, #0
    28fc:	e5d3      	b.n	24a6 <__aeabi_dsub+0x182>
    28fe:	4650      	mov	r0, sl
    2900:	4320      	orrs	r0, r4
    2902:	0007      	movs	r7, r0
    2904:	1e78      	subs	r0, r7, #1
    2906:	4187      	sbcs	r7, r0
    2908:	2400      	movs	r4, #0
    290a:	18bf      	adds	r7, r7, r2
    290c:	e760      	b.n	27d0 <__aeabi_dsub+0x4ac>
    290e:	000c      	movs	r4, r1
    2910:	0017      	movs	r7, r2
    2912:	e58d      	b.n	2430 <__aeabi_dsub+0x10c>
    2914:	000c      	movs	r4, r1
    2916:	0017      	movs	r7, r2
    2918:	4e0b      	ldr	r6, [pc, #44]	; (2948 <__aeabi_dsub+0x624>)
    291a:	e589      	b.n	2430 <__aeabi_dsub+0x10c>
    291c:	001e      	movs	r6, r3
    291e:	0027      	movs	r7, r4
    2920:	3e20      	subs	r6, #32
    2922:	40f7      	lsrs	r7, r6
    2924:	2b20      	cmp	r3, #32
    2926:	d00c      	beq.n	2942 <__aeabi_dsub+0x61e>
    2928:	2640      	movs	r6, #64	; 0x40
    292a:	1af3      	subs	r3, r6, r3
    292c:	409c      	lsls	r4, r3
    292e:	4650      	mov	r0, sl
    2930:	4320      	orrs	r0, r4
    2932:	1e44      	subs	r4, r0, #1
    2934:	41a0      	sbcs	r0, r4
    2936:	4307      	orrs	r7, r0
    2938:	2400      	movs	r4, #0
    293a:	18bf      	adds	r7, r7, r2
    293c:	e748      	b.n	27d0 <__aeabi_dsub+0x4ac>
    293e:	2400      	movs	r4, #0
    2940:	e7d0      	b.n	28e4 <__aeabi_dsub+0x5c0>
    2942:	2400      	movs	r4, #0
    2944:	e7f3      	b.n	292e <__aeabi_dsub+0x60a>
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	000007ff 	.word	0x000007ff
    294c:	ff7fffff 	.word	0xff7fffff

00002950 <__aeabi_d2iz>:
    2950:	b530      	push	{r4, r5, lr}
    2952:	4d13      	ldr	r5, [pc, #76]	; (29a0 <__aeabi_d2iz+0x50>)
    2954:	030a      	lsls	r2, r1, #12
    2956:	004b      	lsls	r3, r1, #1
    2958:	0b12      	lsrs	r2, r2, #12
    295a:	0d5b      	lsrs	r3, r3, #21
    295c:	0fc9      	lsrs	r1, r1, #31
    295e:	2400      	movs	r4, #0
    2960:	42ab      	cmp	r3, r5
    2962:	dd10      	ble.n	2986 <__aeabi_d2iz+0x36>
    2964:	4c0f      	ldr	r4, [pc, #60]	; (29a4 <__aeabi_d2iz+0x54>)
    2966:	42a3      	cmp	r3, r4
    2968:	dc0f      	bgt.n	298a <__aeabi_d2iz+0x3a>
    296a:	2480      	movs	r4, #128	; 0x80
    296c:	4d0e      	ldr	r5, [pc, #56]	; (29a8 <__aeabi_d2iz+0x58>)
    296e:	0364      	lsls	r4, r4, #13
    2970:	4322      	orrs	r2, r4
    2972:	1aed      	subs	r5, r5, r3
    2974:	2d1f      	cmp	r5, #31
    2976:	dd0b      	ble.n	2990 <__aeabi_d2iz+0x40>
    2978:	480c      	ldr	r0, [pc, #48]	; (29ac <__aeabi_d2iz+0x5c>)
    297a:	1ac3      	subs	r3, r0, r3
    297c:	40da      	lsrs	r2, r3
    297e:	4254      	negs	r4, r2
    2980:	2900      	cmp	r1, #0
    2982:	d100      	bne.n	2986 <__aeabi_d2iz+0x36>
    2984:	0014      	movs	r4, r2
    2986:	0020      	movs	r0, r4
    2988:	bd30      	pop	{r4, r5, pc}
    298a:	4b09      	ldr	r3, [pc, #36]	; (29b0 <__aeabi_d2iz+0x60>)
    298c:	18cc      	adds	r4, r1, r3
    298e:	e7fa      	b.n	2986 <__aeabi_d2iz+0x36>
    2990:	4c08      	ldr	r4, [pc, #32]	; (29b4 <__aeabi_d2iz+0x64>)
    2992:	40e8      	lsrs	r0, r5
    2994:	46a4      	mov	ip, r4
    2996:	4463      	add	r3, ip
    2998:	409a      	lsls	r2, r3
    299a:	4302      	orrs	r2, r0
    299c:	e7ef      	b.n	297e <__aeabi_d2iz+0x2e>
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	000003fe 	.word	0x000003fe
    29a4:	0000041d 	.word	0x0000041d
    29a8:	00000433 	.word	0x00000433
    29ac:	00000413 	.word	0x00000413
    29b0:	7fffffff 	.word	0x7fffffff
    29b4:	fffffbed 	.word	0xfffffbed

000029b8 <__aeabi_ui2d>:
    29b8:	b510      	push	{r4, lr}
    29ba:	1e04      	subs	r4, r0, #0
    29bc:	d028      	beq.n	2a10 <__aeabi_ui2d+0x58>
    29be:	f000 f833 	bl	2a28 <__clzsi2>
    29c2:	4b15      	ldr	r3, [pc, #84]	; (2a18 <__aeabi_ui2d+0x60>)
    29c4:	4a15      	ldr	r2, [pc, #84]	; (2a1c <__aeabi_ui2d+0x64>)
    29c6:	1a1b      	subs	r3, r3, r0
    29c8:	1ad2      	subs	r2, r2, r3
    29ca:	2a1f      	cmp	r2, #31
    29cc:	dd15      	ble.n	29fa <__aeabi_ui2d+0x42>
    29ce:	4a14      	ldr	r2, [pc, #80]	; (2a20 <__aeabi_ui2d+0x68>)
    29d0:	1ad2      	subs	r2, r2, r3
    29d2:	4094      	lsls	r4, r2
    29d4:	2200      	movs	r2, #0
    29d6:	0324      	lsls	r4, r4, #12
    29d8:	055b      	lsls	r3, r3, #21
    29da:	0b24      	lsrs	r4, r4, #12
    29dc:	0d5b      	lsrs	r3, r3, #21
    29de:	2100      	movs	r1, #0
    29e0:	0010      	movs	r0, r2
    29e2:	0324      	lsls	r4, r4, #12
    29e4:	0d0a      	lsrs	r2, r1, #20
    29e6:	0b24      	lsrs	r4, r4, #12
    29e8:	0512      	lsls	r2, r2, #20
    29ea:	4322      	orrs	r2, r4
    29ec:	4c0d      	ldr	r4, [pc, #52]	; (2a24 <__aeabi_ui2d+0x6c>)
    29ee:	051b      	lsls	r3, r3, #20
    29f0:	4022      	ands	r2, r4
    29f2:	4313      	orrs	r3, r2
    29f4:	005b      	lsls	r3, r3, #1
    29f6:	0859      	lsrs	r1, r3, #1
    29f8:	bd10      	pop	{r4, pc}
    29fa:	0021      	movs	r1, r4
    29fc:	4091      	lsls	r1, r2
    29fe:	000a      	movs	r2, r1
    2a00:	210b      	movs	r1, #11
    2a02:	1a08      	subs	r0, r1, r0
    2a04:	40c4      	lsrs	r4, r0
    2a06:	055b      	lsls	r3, r3, #21
    2a08:	0324      	lsls	r4, r4, #12
    2a0a:	0b24      	lsrs	r4, r4, #12
    2a0c:	0d5b      	lsrs	r3, r3, #21
    2a0e:	e7e6      	b.n	29de <__aeabi_ui2d+0x26>
    2a10:	2300      	movs	r3, #0
    2a12:	2400      	movs	r4, #0
    2a14:	2200      	movs	r2, #0
    2a16:	e7e2      	b.n	29de <__aeabi_ui2d+0x26>
    2a18:	0000041e 	.word	0x0000041e
    2a1c:	00000433 	.word	0x00000433
    2a20:	00000413 	.word	0x00000413
    2a24:	800fffff 	.word	0x800fffff

00002a28 <__clzsi2>:
    2a28:	211c      	movs	r1, #28
    2a2a:	2301      	movs	r3, #1
    2a2c:	041b      	lsls	r3, r3, #16
    2a2e:	4298      	cmp	r0, r3
    2a30:	d301      	bcc.n	2a36 <__clzsi2+0xe>
    2a32:	0c00      	lsrs	r0, r0, #16
    2a34:	3910      	subs	r1, #16
    2a36:	0a1b      	lsrs	r3, r3, #8
    2a38:	4298      	cmp	r0, r3
    2a3a:	d301      	bcc.n	2a40 <__clzsi2+0x18>
    2a3c:	0a00      	lsrs	r0, r0, #8
    2a3e:	3908      	subs	r1, #8
    2a40:	091b      	lsrs	r3, r3, #4
    2a42:	4298      	cmp	r0, r3
    2a44:	d301      	bcc.n	2a4a <__clzsi2+0x22>
    2a46:	0900      	lsrs	r0, r0, #4
    2a48:	3904      	subs	r1, #4
    2a4a:	a202      	add	r2, pc, #8	; (adr r2, 2a54 <__clzsi2+0x2c>)
    2a4c:	5c10      	ldrb	r0, [r2, r0]
    2a4e:	1840      	adds	r0, r0, r1
    2a50:	4770      	bx	lr
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	02020304 	.word	0x02020304
    2a58:	01010101 	.word	0x01010101
	...

00002a64 <__libc_init_array>:
    2a64:	b570      	push	{r4, r5, r6, lr}
    2a66:	2600      	movs	r6, #0
    2a68:	4d0c      	ldr	r5, [pc, #48]	; (2a9c <__libc_init_array+0x38>)
    2a6a:	4c0d      	ldr	r4, [pc, #52]	; (2aa0 <__libc_init_array+0x3c>)
    2a6c:	1b64      	subs	r4, r4, r5
    2a6e:	10a4      	asrs	r4, r4, #2
    2a70:	42a6      	cmp	r6, r4
    2a72:	d109      	bne.n	2a88 <__libc_init_array+0x24>
    2a74:	2600      	movs	r6, #0
    2a76:	f000 f883 	bl	2b80 <_init>
    2a7a:	4d0a      	ldr	r5, [pc, #40]	; (2aa4 <__libc_init_array+0x40>)
    2a7c:	4c0a      	ldr	r4, [pc, #40]	; (2aa8 <__libc_init_array+0x44>)
    2a7e:	1b64      	subs	r4, r4, r5
    2a80:	10a4      	asrs	r4, r4, #2
    2a82:	42a6      	cmp	r6, r4
    2a84:	d105      	bne.n	2a92 <__libc_init_array+0x2e>
    2a86:	bd70      	pop	{r4, r5, r6, pc}
    2a88:	00b3      	lsls	r3, r6, #2
    2a8a:	58eb      	ldr	r3, [r5, r3]
    2a8c:	4798      	blx	r3
    2a8e:	3601      	adds	r6, #1
    2a90:	e7ee      	b.n	2a70 <__libc_init_array+0xc>
    2a92:	00b3      	lsls	r3, r6, #2
    2a94:	58eb      	ldr	r3, [r5, r3]
    2a96:	4798      	blx	r3
    2a98:	3601      	adds	r6, #1
    2a9a:	e7f2      	b.n	2a82 <__libc_init_array+0x1e>
    2a9c:	00002b8c 	.word	0x00002b8c
    2aa0:	00002b8c 	.word	0x00002b8c
    2aa4:	00002b8c 	.word	0x00002b8c
    2aa8:	00002b90 	.word	0x00002b90
    2aac:	42000800 	.word	0x42000800
    2ab0:	42000c00 	.word	0x42000c00
    2ab4:	42001000 	.word	0x42001000
    2ab8:	00000952 	.word	0x00000952
    2abc:	0000094e 	.word	0x0000094e
    2ac0:	0000094e 	.word	0x0000094e
    2ac4:	000009b4 	.word	0x000009b4
    2ac8:	000009b4 	.word	0x000009b4
    2acc:	00000966 	.word	0x00000966
    2ad0:	00000958 	.word	0x00000958
    2ad4:	0000096c 	.word	0x0000096c
    2ad8:	000009a2 	.word	0x000009a2
    2adc:	00000a3c 	.word	0x00000a3c
    2ae0:	00000a1c 	.word	0x00000a1c
    2ae4:	00000a1c 	.word	0x00000a1c
    2ae8:	00000aa8 	.word	0x00000aa8
    2aec:	00000a2e 	.word	0x00000a2e
    2af0:	00000a4a 	.word	0x00000a4a
    2af4:	00000a20 	.word	0x00000a20
    2af8:	00000a58 	.word	0x00000a58
    2afc:	00000a98 	.word	0x00000a98
    2b00:	000019b4 	.word	0x000019b4
    2b04:	00001996 	.word	0x00001996
    2b08:	00001950 	.word	0x00001950
    2b0c:	0000186e 	.word	0x0000186e
    2b10:	00001950 	.word	0x00001950
    2b14:	00001988 	.word	0x00001988
    2b18:	00001950 	.word	0x00001950
    2b1c:	0000186e 	.word	0x0000186e
    2b20:	00001996 	.word	0x00001996
    2b24:	00001996 	.word	0x00001996
    2b28:	00001988 	.word	0x00001988
    2b2c:	0000186e 	.word	0x0000186e
    2b30:	00001866 	.word	0x00001866
    2b34:	00001866 	.word	0x00001866
    2b38:	00001866 	.word	0x00001866
    2b3c:	00001bcc 	.word	0x00001bcc
    2b40:	00002014 	.word	0x00002014
    2b44:	00001ed4 	.word	0x00001ed4
    2b48:	00001ed4 	.word	0x00001ed4
    2b4c:	00001ed0 	.word	0x00001ed0
    2b50:	00001fec 	.word	0x00001fec
    2b54:	00001fec 	.word	0x00001fec
    2b58:	00001fde 	.word	0x00001fde
    2b5c:	00001ed0 	.word	0x00001ed0
    2b60:	00001fec 	.word	0x00001fec
    2b64:	00001fde 	.word	0x00001fde
    2b68:	00001fec 	.word	0x00001fec
    2b6c:	00001ed0 	.word	0x00001ed0
    2b70:	00001ff4 	.word	0x00001ff4
    2b74:	00001ff4 	.word	0x00001ff4
    2b78:	00001ff4 	.word	0x00001ff4
    2b7c:	000021f8 	.word	0x000021f8

00002b80 <_init>:
    2b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b86:	bc08      	pop	{r3}
    2b88:	469e      	mov	lr, r3
    2b8a:	4770      	bx	lr

00002b8c <__init_array_start>:
    2b8c:	000000b5 	.word	0x000000b5

00002b90 <_fini>:
    2b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b96:	bc08      	pop	{r3}
    2b98:	469e      	mov	lr, r3
    2b9a:	4770      	bx	lr

00002b9c <__fini_array_start>:
    2b9c:	0000008d 	.word	0x0000008d
