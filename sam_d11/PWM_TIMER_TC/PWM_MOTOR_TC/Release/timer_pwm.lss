
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ccc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00003ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e4  20000020  00003cec  00020020  2**2
                  ALLOC
  3 .stack        00000404  20000204  00003ed0  00020020  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005233a  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005756  00000000  00000000  000723dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006645  00000000  00000000  00077b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000798  00000000  00000000  0007e178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bd0  00000000  00000000  0007e910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a84a  00000000  00000000  0007f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013b82  00000000  00000000  00099d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007c591  00000000  00000000  000ad8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001368  00000000  00000000  00129e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 06 00 20 e5 1e 00 00 e3 1e 00 00 e3 1e 00 00     ... ............
	...
      2c:	e3 1e 00 00 00 00 00 00 00 00 00 00 e3 1e 00 00     ................
      3c:	e3 1e 00 00 e3 1e 00 00 e3 1e 00 00 e3 1e 00 00     ................
      4c:	e3 1e 00 00 e3 1e 00 00 e3 1e 00 00 e3 1e 00 00     ................
      5c:	e3 1e 00 00 e3 1e 00 00 59 14 00 00 69 14 00 00     ........Y...i...
      6c:	79 14 00 00 ad 1b 00 00 39 1c 00 00 43 1c 00 00     y.......9...C...
      7c:	e3 1e 00 00 e3 1e 00 00 e3 1e 00 00 e3 1e 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	00003ccc 	.word	0x00003ccc

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	00003ccc 	.word	0x00003ccc
      e4:	00003ccc 	.word	0x00003ccc
      e8:	00000000 	.word	0x00000000

000000ec <adc_get_status.isra.1>:
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
      ec:	7e03      	ldrb	r3, [r0, #24]
      ee:	2001      	movs	r0, #1
      f0:	b2db      	uxtb	r3, r3
      f2:	4018      	ands	r0, r3
      f4:	2202      	movs	r2, #2
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
      f6:	0759      	lsls	r1, r3, #29
      f8:	d500      	bpl.n	fc <adc_get_status.isra.1+0x10>
		status_flags |= ADC_STATUS_WINDOW;
      fa:	4310      	orrs	r0, r2
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
      fc:	4213      	tst	r3, r2
      fe:	d001      	beq.n	104 <adc_get_status.isra.1+0x18>
		status_flags |= ADC_STATUS_OVERRUN;
     100:	2304      	movs	r3, #4
     102:	4318      	orrs	r0, r3
	}

	return status_flags;
}
     104:	4770      	bx	lr
	...

00000108 <configure_adc>:


uint16_t adc_result;

void configure_adc(void)
{
     108:	b510      	push	{r4, lr}
     10a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
     10c:	4668      	mov	r0, sp
     10e:	f000 f865 	bl	1dc <adc_get_config_defaults>
	

	adc_init(&adc_instance, ADC, &config_adc);
     112:	4c0c      	ldr	r4, [pc, #48]	; (144 <configure_adc+0x3c>)
     114:	466a      	mov	r2, sp
     116:	490c      	ldr	r1, [pc, #48]	; (148 <configure_adc+0x40>)
     118:	0020      	movs	r0, r4
     11a:	f000 f881 	bl	220 <adc_init>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     11e:	6823      	ldr	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     120:	7e5a      	ldrb	r2, [r3, #25]
     122:	b252      	sxtb	r2, r2
     124:	2a00      	cmp	r2, #0
     126:	dbfb      	blt.n	120 <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     128:	220f      	movs	r2, #15
     12a:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     12c:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     12e:	7819      	ldrb	r1, [r3, #0]
     130:	3a0d      	subs	r2, #13
     132:	430a      	orrs	r2, r1
     134:	701a      	strb	r2, [r3, #0]
     136:	6822      	ldr	r2, [r4, #0]
     138:	7e53      	ldrb	r3, [r2, #25]
     13a:	b25b      	sxtb	r3, r3
     13c:	2b00      	cmp	r3, #0
     13e:	dbfb      	blt.n	138 <configure_adc+0x30>
	adc_enable(&adc_instance);
}
     140:	b00c      	add	sp, #48	; 0x30
     142:	bd10      	pop	{r4, pc}
     144:	2000009c 	.word	0x2000009c
     148:	42002000 	.word	0x42002000

0000014c <sample_adc>:


void sample_adc(void){
     14c:	b570      	push	{r4, r5, r6, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     14e:	4c13      	ldr	r4, [pc, #76]	; (19c <sample_adc+0x50>)
     150:	6823      	ldr	r3, [r4, #0]
     152:	7e5a      	ldrb	r2, [r3, #25]
     154:	b252      	sxtb	r2, r2
     156:	2a00      	cmp	r2, #0
     158:	dbfb      	blt.n	152 <sample_adc+0x6>

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     15a:	2202      	movs	r2, #2
     15c:	7b19      	ldrb	r1, [r3, #12]
     15e:	430a      	orrs	r2, r1
     160:	731a      	strb	r2, [r3, #12]
     162:	7e5a      	ldrb	r2, [r3, #25]
     164:	b252      	sxtb	r2, r2
     166:	2a00      	cmp	r2, #0
     168:	dbfb      	blt.n	162 <sample_adc+0x16>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     16a:	2501      	movs	r5, #1
     16c:	6820      	ldr	r0, [r4, #0]
     16e:	f7ff ffbd 	bl	ec <adc_get_status.isra.1>
     172:	4228      	tst	r0, r5
     174:	d0fa      	beq.n	16c <sample_adc+0x20>
		/* Result not ready */
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;
     176:	6820      	ldr	r0, [r4, #0]
     178:	7e43      	ldrb	r3, [r0, #25]
     17a:	b25b      	sxtb	r3, r3
     17c:	2b00      	cmp	r3, #0
     17e:	dbfb      	blt.n	178 <sample_adc+0x2c>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     180:	8b42      	ldrh	r2, [r0, #26]
     182:	4b07      	ldr	r3, [pc, #28]	; (1a0 <sample_adc+0x54>)
     184:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     186:	2301      	movs	r3, #1
     188:	7603      	strb	r3, [r0, #24]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     18a:	f7ff ffaf 	bl	ec <adc_get_status.isra.1>
     18e:	0743      	lsls	r3, r0, #29
     190:	d502      	bpl.n	198 <sample_adc+0x4c>
	adc_module->INTFLAG.reg = int_flags;
     192:	2202      	movs	r2, #2
     194:	6823      	ldr	r3, [r4, #0]
     196:	761a      	strb	r2, [r3, #24]
	adc_start_conversion(&adc_instance);
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
     198:	bd70      	pop	{r4, r5, r6, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	2000009c 	.word	0x2000009c
     1a0:	20000098 	.word	0x20000098

000001a4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     1a4:	b530      	push	{r4, r5, lr}
     1a6:	b097      	sub	sp, #92	; 0x5c
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     1a8:	ad02      	add	r5, sp, #8
{
     1aa:	0004      	movs	r4, r0
	const uint32_t pinmapping[] = {
     1ac:	2250      	movs	r2, #80	; 0x50
     1ae:	490a      	ldr	r1, [pc, #40]	; (1d8 <_adc_configure_ain_pin+0x34>)
     1b0:	0028      	movs	r0, r5
     1b2:	f003 fcdb 	bl	3b6c <memcpy>
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     1b6:	2c09      	cmp	r4, #9
     1b8:	d80b      	bhi.n	1d2 <_adc_configure_ain_pin+0x2e>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1ba:	2300      	movs	r3, #0
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     1bc:	00a4      	lsls	r4, r4, #2
     1be:	5960      	ldr	r0, [r4, r5]
     1c0:	a901      	add	r1, sp, #4
     1c2:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1c4:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     1c6:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;

		system_pinmux_pin_set_config(pin_map_result, &config);
     1c8:	b2c0      	uxtb	r0, r0
		config.mux_position = 1;
     1ca:	3301      	adds	r3, #1
     1cc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     1ce:	f001 fc7f 	bl	1ad0 <system_pinmux_pin_set_config>
	}
}
     1d2:	b017      	add	sp, #92	; 0x5c
     1d4:	bd30      	pop	{r4, r5, pc}
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	00003b80 	.word	0x00003b80

000001dc <adc_get_config_defaults>:
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1dc:	22c0      	movs	r2, #192	; 0xc0
     1de:	0152      	lsls	r2, r2, #5
     1e0:	81c2      	strh	r2, [r0, #14]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1e2:	0002      	movs	r2, r0
	config->clock_source                  = GCLK_GENERATOR_0;
     1e4:	2300      	movs	r3, #0
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1e6:	322a      	adds	r2, #42	; 0x2a
	config->clock_source                  = GCLK_GENERATOR_0;
     1e8:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1ea:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1ec:	8043      	strh	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1ee:	7103      	strb	r3, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1f0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1f2:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     1f4:	61c3      	str	r3, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1f6:	6083      	str	r3, [r0, #8]
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1f8:	7303      	strb	r3, [r0, #12]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1fa:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1fc:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1fe:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     200:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     202:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     204:	7013      	strb	r3, [r2, #0]
	config->correction.correction_enable  = false;
     206:	1d42      	adds	r2, r0, #5
	config->run_in_standby                = false;
     208:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     20a:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     20c:	77d3      	strb	r3, [r2, #31]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     20e:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     210:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     212:	75c3      	strb	r3, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     214:	3226      	adds	r2, #38	; 0x26
	config->pin_scan.inputs_to_scan       = 0;
     216:	302c      	adds	r0, #44	; 0x2c
	config->pin_scan.offset_start_scan    = 0;
     218:	7013      	strb	r3, [r2, #0]
	config->pin_scan.inputs_to_scan       = 0;
     21a:	7003      	strb	r3, [r0, #0]
}
     21c:	4770      	bx	lr
	...

00000220 <adc_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     220:	2380      	movs	r3, #128	; 0x80
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     222:	b5f0      	push	{r4, r5, r6, r7, lr}
     224:	0014      	movs	r4, r2
     226:	4aab      	ldr	r2, [pc, #684]	; (4d4 <STACK_SIZE+0xd4>)
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     228:	6001      	str	r1, [r0, #0]
{
     22a:	0007      	movs	r7, r0
     22c:	6a10      	ldr	r0, [r2, #32]
     22e:	005b      	lsls	r3, r3, #1
     230:	4303      	orrs	r3, r0
     232:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     234:	780b      	ldrb	r3, [r1, #0]
{
     236:	b087      	sub	sp, #28
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     238:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     23a:	07db      	lsls	r3, r3, #31
     23c:	d500      	bpl.n	240 <adc_init+0x20>
     23e:	e0e5      	b.n	40c <STACK_SIZE+0xc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     240:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     242:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     244:	079b      	lsls	r3, r3, #30
     246:	d500      	bpl.n	24a <adc_init+0x2a>
     248:	e0e0      	b.n	40c <STACK_SIZE+0xc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     24a:	7863      	ldrb	r3, [r4, #1]
     24c:	713b      	strb	r3, [r7, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     24e:	2b00      	cmp	r3, #0
     250:	d104      	bne.n	25c <adc_init+0x3c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     252:	4aa1      	ldr	r2, [pc, #644]	; (4d8 <STACK_SIZE+0xd8>)
     254:	3304      	adds	r3, #4
     256:	6c11      	ldr	r1, [r2, #64]	; 0x40
     258:	430b      	orrs	r3, r1
     25a:	6413      	str	r3, [r2, #64]	; 0x40
	gclk_chan_conf.source_generator = config->clock_source;
     25c:	7823      	ldrb	r3, [r4, #0]
     25e:	a905      	add	r1, sp, #20
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     260:	2013      	movs	r0, #19
	gclk_chan_conf.source_generator = config->clock_source;
     262:	700b      	strb	r3, [r1, #0]
	Adc *const adc_module = module_inst->hw;
     264:	683d      	ldr	r5, [r7, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     266:	f001 fbd1 	bl	1a0c <system_gclk_chan_set_config>
	system_gclk_chan_enable(ADC_GCLK_ID);
     26a:	2013      	movs	r0, #19
     26c:	f001 fb92 	bl	1994 <system_gclk_chan_enable>
	if (config->pin_scan.inputs_to_scan != 0) {
     270:	0023      	movs	r3, r4
     272:	332c      	adds	r3, #44	; 0x2c
     274:	9302      	str	r3, [sp, #8]
     276:	781b      	ldrb	r3, [r3, #0]
     278:	7b22      	ldrb	r2, [r4, #12]
     27a:	9201      	str	r2, [sp, #4]
     27c:	2b00      	cmp	r3, #0
     27e:	d033      	beq.n	2e8 <adc_init+0xc8>
		uint8_t offset = config->pin_scan.offset_start_scan;
     280:	0022      	movs	r2, r4
     282:	322b      	adds	r2, #43	; 0x2b
		uint8_t start_pin =
     284:	7816      	ldrb	r6, [r2, #0]
     286:	9a01      	ldr	r2, [sp, #4]
     288:	1996      	adds	r6, r2, r6
     28a:	b2f6      	uxtb	r6, r6
		uint8_t end_pin =
     28c:	199b      	adds	r3, r3, r6
     28e:	b2db      	uxtb	r3, r3
     290:	9303      	str	r3, [sp, #12]
     292:	9b01      	ldr	r3, [sp, #4]
     294:	1af0      	subs	r0, r6, r3
		while (start_pin < end_pin) {
     296:	9b03      	ldr	r3, [sp, #12]
     298:	b2c0      	uxtb	r0, r0
     29a:	42b3      	cmp	r3, r6
     29c:	d81b      	bhi.n	2d6 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     29e:	89e0      	ldrh	r0, [r4, #14]
     2a0:	f7ff ff80 	bl	1a4 <_adc_configure_ain_pin>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2a4:	7d63      	ldrb	r3, [r4, #21]
     2a6:	009b      	lsls	r3, r3, #2
     2a8:	b2db      	uxtb	r3, r3
     2aa:	702b      	strb	r3, [r5, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2ac:	7da3      	ldrb	r3, [r4, #22]
     2ae:	7862      	ldrb	r2, [r4, #1]
     2b0:	01db      	lsls	r3, r3, #7
     2b2:	4313      	orrs	r3, r2
     2b4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2b6:	706b      	strb	r3, [r5, #1]
	switch (config->resolution) {
     2b8:	7923      	ldrb	r3, [r4, #4]
     2ba:	2b30      	cmp	r3, #48	; 0x30
     2bc:	d100      	bne.n	2c0 <adc_init+0xa0>
     2be:	e0b2      	b.n	426 <STACK_SIZE+0x26>
     2c0:	d816      	bhi.n	2f0 <adc_init+0xd0>
     2c2:	2b10      	cmp	r3, #16
     2c4:	d100      	bne.n	2c8 <adc_init+0xa8>
     2c6:	e0ab      	b.n	420 <STACK_SIZE+0x20>
     2c8:	2b20      	cmp	r3, #32
     2ca:	d100      	bne.n	2ce <adc_init+0xae>
     2cc:	e0ab      	b.n	426 <STACK_SIZE+0x26>
     2ce:	2b00      	cmp	r3, #0
     2d0:	d118      	bne.n	304 <adc_init+0xe4>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2d2:	001a      	movs	r2, r3
     2d4:	e0a5      	b.n	422 <STACK_SIZE+0x22>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2d6:	230f      	movs	r3, #15
     2d8:	4018      	ands	r0, r3
     2da:	7b23      	ldrb	r3, [r4, #12]
			start_pin++;
     2dc:	3601      	adds	r6, #1
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2de:	18c0      	adds	r0, r0, r3
     2e0:	f7ff ff60 	bl	1a4 <_adc_configure_ain_pin>
			start_pin++;
     2e4:	b2f6      	uxtb	r6, r6
     2e6:	e7d4      	b.n	292 <adc_init+0x72>
		_adc_configure_ain_pin(config->positive_input);
     2e8:	9801      	ldr	r0, [sp, #4]
     2ea:	f7ff ff5b 	bl	1a4 <_adc_configure_ain_pin>
     2ee:	e7d6      	b.n	29e <adc_init+0x7e>
	switch (config->resolution) {
     2f0:	2b32      	cmp	r3, #50	; 0x32
     2f2:	d009      	beq.n	308 <adc_init+0xe8>
     2f4:	d200      	bcs.n	2f8 <adc_init+0xd8>
     2f6:	e098      	b.n	42a <STACK_SIZE+0x2a>
     2f8:	2b33      	cmp	r3, #51	; 0x33
     2fa:	d100      	bne.n	2fe <adc_init+0xde>
     2fc:	e08c      	b.n	418 <STACK_SIZE+0x18>
     2fe:	2b34      	cmp	r3, #52	; 0x34
     300:	d100      	bne.n	304 <adc_init+0xe4>
     302:	e085      	b.n	410 <STACK_SIZE+0x10>
		return STATUS_ERR_INVALID_ARG;
     304:	2017      	movs	r0, #23
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     306:	e081      	b.n	40c <STACK_SIZE+0xc>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     308:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     30a:	2310      	movs	r3, #16
		adjres = ADC_DIVIDE_RESULT_4;
     30c:	2102      	movs	r1, #2
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     30e:	2070      	movs	r0, #112	; 0x70
     310:	0109      	lsls	r1, r1, #4
     312:	4001      	ands	r1, r0
     314:	430a      	orrs	r2, r1
     316:	70aa      	strb	r2, [r5, #2]
	if (config->sample_length > 63) {
     318:	7de2      	ldrb	r2, [r4, #23]
     31a:	2a3f      	cmp	r2, #63	; 0x3f
     31c:	d8f2      	bhi.n	304 <adc_init+0xe4>
		adc_module->SAMPCTRL.reg =
     31e:	70ea      	strb	r2, [r5, #3]
     320:	6839      	ldr	r1, [r7, #0]
     322:	7e4a      	ldrb	r2, [r1, #25]
     324:	b252      	sxtb	r2, r2
     326:	2a00      	cmp	r2, #0
     328:	dbfb      	blt.n	322 <adc_init+0x102>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     32a:	8861      	ldrh	r1, [r4, #2]
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     32c:	7ce2      	ldrb	r2, [r4, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     32e:	430a      	orrs	r2, r1
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     330:	1d61      	adds	r1, r4, #5
     332:	7fc8      	ldrb	r0, [r1, #31]
     334:	00c0      	lsls	r0, r0, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     336:	4302      	orrs	r2, r0
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     338:	7d20      	ldrb	r0, [r4, #20]
     33a:	0080      	lsls	r0, r0, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     33c:	4302      	orrs	r2, r0
     33e:	7ca0      	ldrb	r0, [r4, #18]
     340:	0040      	lsls	r0, r0, #1
     342:	4302      	orrs	r2, r0
     344:	431a      	orrs	r2, r3
	adc_module->CTRLB.reg =
     346:	80aa      	strh	r2, [r5, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     348:	7e22      	ldrb	r2, [r4, #24]
     34a:	4694      	mov	ip, r2
     34c:	2a00      	cmp	r2, #0
     34e:	d007      	beq.n	360 <adc_init+0x140>
		switch (resolution) {
     350:	2b10      	cmp	r3, #16
     352:	d100      	bne.n	356 <adc_init+0x136>
     354:	e0af      	b.n	4b6 <STACK_SIZE+0xb6>
     356:	d900      	bls.n	35a <adc_init+0x13a>
     358:	e069      	b.n	42e <STACK_SIZE+0x2e>
     35a:	2b00      	cmp	r3, #0
     35c:	d100      	bne.n	360 <adc_init+0x140>
     35e:	e09b      	b.n	498 <STACK_SIZE+0x98>
     360:	6838      	ldr	r0, [r7, #0]
     362:	7e43      	ldrb	r3, [r0, #25]
     364:	b25b      	sxtb	r3, r3
     366:	2b00      	cmp	r3, #0
     368:	dbfb      	blt.n	362 <adc_init+0x142>
	adc_module->WINCTRL.reg = config->window.window_mode;
     36a:	4663      	mov	r3, ip
     36c:	722b      	strb	r3, [r5, #8]
     36e:	683a      	ldr	r2, [r7, #0]
     370:	7e53      	ldrb	r3, [r2, #25]
     372:	b25b      	sxtb	r3, r3
     374:	2b00      	cmp	r3, #0
     376:	dbfb      	blt.n	370 <adc_init+0x150>
	adc_module->WINLT.reg =
     378:	8ba3      	ldrh	r3, [r4, #28]
     37a:	83ab      	strh	r3, [r5, #28]
     37c:	683a      	ldr	r2, [r7, #0]
     37e:	7e53      	ldrb	r3, [r2, #25]
     380:	b25b      	sxtb	r3, r3
     382:	2b00      	cmp	r3, #0
     384:	dbfb      	blt.n	37e <adc_init+0x15e>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     386:	8c23      	ldrh	r3, [r4, #32]
     388:	842b      	strh	r3, [r5, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     38a:	9b02      	ldr	r3, [sp, #8]
     38c:	781a      	ldrb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     38e:	2a00      	cmp	r2, #0
     390:	d003      	beq.n	39a <adc_init+0x17a>
		inputs_to_scan--;
     392:	3a01      	subs	r2, #1
     394:	b2d2      	uxtb	r2, r2
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     396:	2a0f      	cmp	r2, #15
     398:	d8b4      	bhi.n	304 <adc_init+0xe4>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     39a:	0023      	movs	r3, r4
     39c:	332b      	adds	r3, #43	; 0x2b
     39e:	7818      	ldrb	r0, [r3, #0]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3a0:	280f      	cmp	r0, #15
     3a2:	d8af      	bhi.n	304 <adc_init+0xe4>
     3a4:	683e      	ldr	r6, [r7, #0]
     3a6:	7e73      	ldrb	r3, [r6, #25]
     3a8:	b25b      	sxtb	r3, r3
     3aa:	2b00      	cmp	r3, #0
     3ac:	dbfb      	blt.n	3a6 <adc_init+0x186>
			config->positive_input;
     3ae:	7b26      	ldrb	r6, [r4, #12]
			config->negative_input |
     3b0:	89e3      	ldrh	r3, [r4, #14]
			(config->pin_scan.offset_start_scan <<
     3b2:	0500      	lsls	r0, r0, #20
			config->negative_input |
     3b4:	4333      	orrs	r3, r6
     3b6:	68a6      	ldr	r6, [r4, #8]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     3b8:	0412      	lsls	r2, r2, #16
			config->negative_input |
     3ba:	4333      	orrs	r3, r6
     3bc:	4303      	orrs	r3, r0
     3be:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     3c0:	612b      	str	r3, [r5, #16]
	adc_module->EVCTRL.reg = config->event_action;
     3c2:	0023      	movs	r3, r4
     3c4:	332a      	adds	r3, #42	; 0x2a
     3c6:	781b      	ldrb	r3, [r3, #0]
     3c8:	752b      	strb	r3, [r5, #20]
	adc_module->INTENCLR.reg =
     3ca:	230f      	movs	r3, #15
     3cc:	75ab      	strb	r3, [r5, #22]
	if (config->correction.correction_enable){
     3ce:	7fcb      	ldrb	r3, [r1, #31]
     3d0:	2b00      	cmp	r3, #0
     3d2:	d00c      	beq.n	3ee <adc_init+0x1ce>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     3d6:	4941      	ldr	r1, [pc, #260]	; (4dc <STACK_SIZE+0xdc>)
     3d8:	428b      	cmp	r3, r1
     3da:	d893      	bhi.n	304 <adc_init+0xe4>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     3dc:	84ab      	strh	r3, [r5, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     3de:	2380      	movs	r3, #128	; 0x80
     3e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     3e2:	011b      	lsls	r3, r3, #4
     3e4:	18d3      	adds	r3, r2, r3
     3e6:	b29b      	uxth	r3, r3
     3e8:	428b      	cmp	r3, r1
     3ea:	d88b      	bhi.n	304 <adc_init+0xe4>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     3ec:	84ea      	strh	r2, [r5, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     3ee:	22e0      	movs	r2, #224	; 0xe0
     3f0:	4b3b      	ldr	r3, [pc, #236]	; (4e0 <STACK_SIZE+0xe0>)
	return STATUS_OK;
     3f2:	2000      	movs	r0, #0
			ADC_CALIB_BIAS_CAL(
     3f4:	6819      	ldr	r1, [r3, #0]
     3f6:	00d2      	lsls	r2, r2, #3
     3f8:	014b      	lsls	r3, r1, #5
			ADC_CALIB_LINEARITY_CAL(
     3fa:	0019      	movs	r1, r3
			ADC_CALIB_BIAS_CAL(
     3fc:	401a      	ands	r2, r3
			ADC_CALIB_LINEARITY_CAL(
     3fe:	4b39      	ldr	r3, [pc, #228]	; (4e4 <STACK_SIZE+0xe4>)
     400:	681b      	ldr	r3, [r3, #0]
     402:	0edb      	lsrs	r3, r3, #27
     404:	430b      	orrs	r3, r1
     406:	b2db      	uxtb	r3, r3
			) |
     408:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     40a:	852b      	strh	r3, [r5, #40]	; 0x28
}
     40c:	b007      	add	sp, #28
     40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adjres = config->divide_result;
     410:	7c61      	ldrb	r1, [r4, #17]
		accumulate = config->accumulate_samples;
     412:	7c22      	ldrb	r2, [r4, #16]
		resolution = ADC_RESOLUTION_16BIT;
     414:	2310      	movs	r3, #16
     416:	e77a      	b.n	30e <adc_init+0xee>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     418:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     41a:	2310      	movs	r3, #16
		adjres = ADC_DIVIDE_RESULT_2;
     41c:	2101      	movs	r1, #1
     41e:	e776      	b.n	30e <adc_init+0xee>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     420:	2208      	movs	r2, #8
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     422:	2100      	movs	r1, #0
     424:	e773      	b.n	30e <adc_init+0xee>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     426:	2200      	movs	r2, #0
     428:	e7fb      	b.n	422 <STACK_SIZE+0x22>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     42a:	2202      	movs	r2, #2
     42c:	e7f5      	b.n	41a <STACK_SIZE+0x1a>
		switch (resolution) {
     42e:	2b20      	cmp	r3, #32
     430:	d018      	beq.n	464 <STACK_SIZE+0x64>
     432:	2b30      	cmp	r3, #48	; 0x30
     434:	d000      	beq.n	438 <STACK_SIZE+0x38>
     436:	e793      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     438:	7ce3      	ldrb	r3, [r4, #19]
     43a:	69e0      	ldr	r0, [r4, #28]
     43c:	2b00      	cmp	r3, #0
     43e:	d009      	beq.n	454 <STACK_SIZE+0x54>
					(config->window.window_lower_value > 127 ||
     440:	0003      	movs	r3, r0
     442:	3380      	adds	r3, #128	; 0x80
			if (config->differential_mode &&
     444:	2bff      	cmp	r3, #255	; 0xff
     446:	d900      	bls.n	44a <STACK_SIZE+0x4a>
     448:	e75c      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -128 ||
     44a:	6a23      	ldr	r3, [r4, #32]
     44c:	3380      	adds	r3, #128	; 0x80
     44e:	2bff      	cmp	r3, #255	; 0xff
     450:	d900      	bls.n	454 <STACK_SIZE+0x54>
     452:	e757      	b.n	304 <adc_init+0xe4>
			} else if (config->window.window_lower_value > 255 ||
     454:	28ff      	cmp	r0, #255	; 0xff
     456:	dd00      	ble.n	45a <STACK_SIZE+0x5a>
     458:	e754      	b.n	304 <adc_init+0xe4>
     45a:	6a23      	ldr	r3, [r4, #32]
     45c:	2bff      	cmp	r3, #255	; 0xff
     45e:	dd00      	ble.n	462 <STACK_SIZE+0x62>
     460:	e750      	b.n	304 <adc_init+0xe4>
     462:	e77d      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     464:	7ce0      	ldrb	r0, [r4, #19]
     466:	69e6      	ldr	r6, [r4, #28]
     468:	4b1f      	ldr	r3, [pc, #124]	; (4e8 <STACK_SIZE+0xe8>)
     46a:	2800      	cmp	r0, #0
     46c:	d00c      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 511 ||
     46e:	2080      	movs	r0, #128	; 0x80
     470:	0080      	lsls	r0, r0, #2
     472:	1830      	adds	r0, r6, r0
			if (config->differential_mode &&
     474:	4298      	cmp	r0, r3
     476:	d900      	bls.n	47a <STACK_SIZE+0x7a>
     478:	e744      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -512 ||
     47a:	2280      	movs	r2, #128	; 0x80
     47c:	6a20      	ldr	r0, [r4, #32]
     47e:	0092      	lsls	r2, r2, #2
					config->window.window_lower_value < -2048 ||
     480:	1810      	adds	r0, r2, r0
     482:	4298      	cmp	r0, r3
     484:	d900      	bls.n	488 <STACK_SIZE+0x88>
     486:	e73d      	b.n	304 <adc_init+0xe4>
			} else if (config->window.window_lower_value > 65535 ||
     488:	429e      	cmp	r6, r3
     48a:	dd00      	ble.n	48e <STACK_SIZE+0x8e>
     48c:	e73a      	b.n	304 <adc_init+0xe4>
     48e:	6a22      	ldr	r2, [r4, #32]
     490:	429a      	cmp	r2, r3
     492:	dd00      	ble.n	496 <STACK_SIZE+0x96>
     494:	e736      	b.n	304 <adc_init+0xe4>
     496:	e763      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     498:	7ce0      	ldrb	r0, [r4, #19]
     49a:	69e6      	ldr	r6, [r4, #28]
     49c:	4b0f      	ldr	r3, [pc, #60]	; (4dc <STACK_SIZE+0xdc>)
     49e:	2800      	cmp	r0, #0
     4a0:	d0f2      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 2047 ||
     4a2:	2280      	movs	r2, #128	; 0x80
     4a4:	0112      	lsls	r2, r2, #4
     4a6:	18b0      	adds	r0, r6, r2
			if (config->differential_mode &&
     4a8:	4298      	cmp	r0, r3
     4aa:	d900      	bls.n	4ae <STACK_SIZE+0xae>
     4ac:	e72a      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -2048 ||
     4ae:	2080      	movs	r0, #128	; 0x80
     4b0:	6a22      	ldr	r2, [r4, #32]
     4b2:	0100      	lsls	r0, r0, #4
     4b4:	e7e4      	b.n	480 <STACK_SIZE+0x80>
			if (config->differential_mode &&
     4b6:	7ce0      	ldrb	r0, [r4, #19]
     4b8:	69e6      	ldr	r6, [r4, #28]
     4ba:	4b0c      	ldr	r3, [pc, #48]	; (4ec <STACK_SIZE+0xec>)
     4bc:	2800      	cmp	r0, #0
     4be:	d0e3      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 32767 ||
     4c0:	2280      	movs	r2, #128	; 0x80
     4c2:	0212      	lsls	r2, r2, #8
     4c4:	18b0      	adds	r0, r6, r2
			if (config->differential_mode &&
     4c6:	4298      	cmp	r0, r3
     4c8:	d900      	bls.n	4cc <STACK_SIZE+0xcc>
     4ca:	e71b      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -32768 ||
     4cc:	2080      	movs	r0, #128	; 0x80
     4ce:	6a22      	ldr	r2, [r4, #32]
     4d0:	0200      	lsls	r0, r0, #8
     4d2:	e7d5      	b.n	480 <STACK_SIZE+0x80>
     4d4:	40000400 	.word	0x40000400
     4d8:	40000800 	.word	0x40000800
     4dc:	00000fff 	.word	0x00000fff
     4e0:	00806024 	.word	0x00806024
     4e4:	00806020 	.word	0x00806020
     4e8:	000003ff 	.word	0x000003ff
     4ec:	0000ffff 	.word	0x0000ffff

000004f0 <is_button_one_pressed>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     4f0:	4b14      	ldr	r3, [pc, #80]	; (544 <is_button_one_pressed+0x54>)
     4f2:	4915      	ldr	r1, [pc, #84]	; (548 <is_button_one_pressed+0x58>)
     4f4:	6a18      	ldr	r0, [r3, #32]
     4f6:	4a15      	ldr	r2, [pc, #84]	; (54c <is_button_one_pressed+0x5c>)
     4f8:	4b15      	ldr	r3, [pc, #84]	; (550 <is_button_one_pressed+0x60>)
/************************************************************************/
/* Button 1 function													*/
/************************************************************************/
bool is_button_one_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_1)) {
     4fa:	0440      	lsls	r0, r0, #17
     4fc:	d418      	bmi.n	530 <is_button_one_pressed+0x40>
    BUTTON_ONE_PRESS_STATUS = true;
     4fe:	2001      	movs	r0, #1
     500:	7008      	strb	r0, [r1, #0]
    press_B1_delay_count--;
     502:	6819      	ldr	r1, [r3, #0]
     504:	3901      	subs	r1, #1
     506:	6019      	str	r1, [r3, #0]
    long_press_B1_delay_count--;
     508:	6811      	ldr	r1, [r2, #0]
     50a:	3901      	subs	r1, #1

  } else {
    BUTTON_ONE_PRESS_STATUS = false;
    press_B1_delay_count = DELAY_DEBOUNCE_CN;
    long_press_B1_delay_count = DELAY_PRESS_CN;
     50c:	6011      	str	r1, [r2, #0]

  }

  // long press delay logic
  if (long_press_B1_delay_count <= 0) {
     50e:	6811      	ldr	r1, [r2, #0]
     510:	2900      	cmp	r1, #0
     512:	dc04      	bgt.n	51e <is_button_one_pressed+0x2e>
    LongPressB1Flag = true;
     514:	2001      	movs	r0, #1
     516:	490f      	ldr	r1, [pc, #60]	; (554 <is_button_one_pressed+0x64>)
     518:	7008      	strb	r0, [r1, #0]
    long_press_B1_delay_count = 0;
     51a:	2100      	movs	r1, #0
     51c:	6011      	str	r1, [r2, #0]
     51e:	2000      	movs	r0, #0
  }

  // debounce logic
  if (press_B1_delay_count <= 0) {
     520:	6819      	ldr	r1, [r3, #0]
     522:	4a0d      	ldr	r2, [pc, #52]	; (558 <is_button_one_pressed+0x68>)
     524:	4281      	cmp	r1, r0
     526:	dc0a      	bgt.n	53e <is_button_one_pressed+0x4e>
    BUTTON_ONE_RELEASE_STATUS = false;
     528:	7010      	strb	r0, [r2, #0]
    press_B1_delay_count = 0;
     52a:	6018      	str	r0, [r3, #0]
    return true;
     52c:	3001      	adds	r0, #1

  } else {
    BUTTON_ONE_RELEASE_STATUS = true;
    return false;
  }
}
     52e:	4770      	bx	lr
    BUTTON_ONE_PRESS_STATUS = false;
     530:	2000      	movs	r0, #0
     532:	7008      	strb	r0, [r1, #0]
    press_B1_delay_count = DELAY_DEBOUNCE_CN;
     534:	2102      	movs	r1, #2
     536:	6019      	str	r1, [r3, #0]
    long_press_B1_delay_count = DELAY_PRESS_CN;
     538:	318f      	adds	r1, #143	; 0x8f
     53a:	31ff      	adds	r1, #255	; 0xff
     53c:	e7e6      	b.n	50c <is_button_one_pressed+0x1c>
    BUTTON_ONE_RELEASE_STATUS = true;
     53e:	2301      	movs	r3, #1
     540:	7013      	strb	r3, [r2, #0]
    return false;
     542:	e7f4      	b.n	52e <is_button_one_pressed+0x3e>
     544:	41004400 	.word	0x41004400
     548:	2000003c 	.word	0x2000003c
     54c:	20000000 	.word	0x20000000
     550:	20000008 	.word	0x20000008
     554:	20000040 	.word	0x20000040
     558:	2000003d 	.word	0x2000003d

0000055c <is_button_two_pressed>:
     55c:	4b14      	ldr	r3, [pc, #80]	; (5b0 <is_button_two_pressed+0x54>)
     55e:	4915      	ldr	r1, [pc, #84]	; (5b4 <is_button_two_pressed+0x58>)
     560:	6a18      	ldr	r0, [r3, #32]
     562:	4a15      	ldr	r2, [pc, #84]	; (5b8 <is_button_two_pressed+0x5c>)
     564:	4b15      	ldr	r3, [pc, #84]	; (5bc <is_button_two_pressed+0x60>)
/************************************************************************/
/* Button 2 function														*/
/************************************************************************/
bool is_button_two_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_2)) {
     566:	0400      	lsls	r0, r0, #16
     568:	d418      	bmi.n	59c <is_button_two_pressed+0x40>
    BUTTON_TWO_PRESS_STATUS = true;
     56a:	2001      	movs	r0, #1
     56c:	7008      	strb	r0, [r1, #0]
    press_B2_delay_count--;
     56e:	6819      	ldr	r1, [r3, #0]
     570:	3901      	subs	r1, #1
     572:	6019      	str	r1, [r3, #0]
    long_press_B2_delay_count--;
     574:	6811      	ldr	r1, [r2, #0]
     576:	3901      	subs	r1, #1

  } else {
    BUTTON_TWO_PRESS_STATUS = false;
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
    long_press_B2_delay_count = DELAY_PRESS_CN;
     578:	6011      	str	r1, [r2, #0]

  }

  // long press delay logic
  if (long_press_B2_delay_count <= 0) {
     57a:	6811      	ldr	r1, [r2, #0]
     57c:	2900      	cmp	r1, #0
     57e:	dc04      	bgt.n	58a <is_button_two_pressed+0x2e>
    LongPressB2Flag = true;
     580:	2001      	movs	r0, #1
     582:	490f      	ldr	r1, [pc, #60]	; (5c0 <is_button_two_pressed+0x64>)
     584:	7008      	strb	r0, [r1, #0]
    long_press_B2_delay_count = 0;
     586:	2100      	movs	r1, #0
     588:	6011      	str	r1, [r2, #0]
     58a:	2000      	movs	r0, #0
  }

  // debounce logic
  if (press_B2_delay_count <= 0) {
     58c:	6819      	ldr	r1, [r3, #0]
     58e:	4a0d      	ldr	r2, [pc, #52]	; (5c4 <is_button_two_pressed+0x68>)
     590:	4281      	cmp	r1, r0
     592:	dc0a      	bgt.n	5aa <is_button_two_pressed+0x4e>
    BUTTON_TWO_RELEASE_STATUS = false;
     594:	7010      	strb	r0, [r2, #0]
    press_B2_delay_count = 0;
     596:	6018      	str	r0, [r3, #0]
    return true;
     598:	3001      	adds	r0, #1

  } else {
    BUTTON_TWO_RELEASE_STATUS = true;
    return false;
  }
     59a:	4770      	bx	lr
    BUTTON_TWO_PRESS_STATUS = false;
     59c:	2000      	movs	r0, #0
     59e:	7008      	strb	r0, [r1, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     5a0:	2102      	movs	r1, #2
     5a2:	6019      	str	r1, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     5a4:	318f      	adds	r1, #143	; 0x8f
     5a6:	31ff      	adds	r1, #255	; 0xff
     5a8:	e7e6      	b.n	578 <is_button_two_pressed+0x1c>
    BUTTON_TWO_RELEASE_STATUS = true;
     5aa:	2301      	movs	r3, #1
     5ac:	7013      	strb	r3, [r2, #0]
    return false;
     5ae:	e7f4      	b.n	59a <is_button_two_pressed+0x3e>
     5b0:	41004400 	.word	0x41004400
     5b4:	2000003e 	.word	0x2000003e
     5b8:	20000004 	.word	0x20000004
     5bc:	2000000c 	.word	0x2000000c
     5c0:	20000041 	.word	0x20000041
     5c4:	2000003f 	.word	0x2000003f

000005c8 <set_pwm_color_channel>:
#include "pwm_led.h"

uint8_t pwm_led_toggle_count = 0;


void set_pwm_color_channel(uint8_t channel, bool enable) {
     5c8:	b510      	push	{r4, lr}
     5ca:	1e0a      	subs	r2, r1, #0
     5cc:	4c0a      	ldr	r4, [pc, #40]	; (5f8 <set_pwm_color_channel+0x30>)
	
	
	if (enable){
     5ce:	d000      	beq.n	5d2 <set_pwm_color_channel+0xa>
		tcc_set_compare_value(&tcc_instance,
     5d0:	4a0a      	ldr	r2, [pc, #40]	; (5fc <set_pwm_color_channel+0x34>)
		channel,
		0x3FF);
	}else{
		tcc_set_compare_value(&tcc_instance,
     5d2:	0001      	movs	r1, r0
     5d4:	0020      	movs	r0, r4
     5d6:	f001 fac3 	bl	1b60 <tcc_set_compare_value>
	Tcc *const tcc_module = module_inst->hw;
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     5da:	2104      	movs	r1, #4
     5dc:	201f      	movs	r0, #31
     5de:	6822      	ldr	r2, [r4, #0]
     5e0:	6893      	ldr	r3, [r2, #8]
     5e2:	420b      	tst	r3, r1
     5e4:	d1fc      	bne.n	5e0 <set_pwm_color_channel+0x18>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     5e6:	7953      	ldrb	r3, [r2, #5]
     5e8:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     5ea:	d002      	beq.n	5f2 <set_pwm_color_channel+0x2a>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     5ec:	2b60      	cmp	r3, #96	; 0x60
     5ee:	d1f7      	bne.n	5e0 <set_pwm_color_channel+0x18>
		channel,
		ZERO_DUTY_CYCLE);
	}
	
	tcc_force_double_buffer_update(&tcc_instance);
}
     5f0:	bd10      	pop	{r4, pc}
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     5f2:	2360      	movs	r3, #96	; 0x60
     5f4:	7153      	strb	r3, [r2, #5]
     5f6:	e7fb      	b.n	5f0 <set_pwm_color_channel+0x28>
     5f8:	200000a4 	.word	0x200000a4
     5fc:	000003ff 	.word	0x000003ff

00000600 <pwm_led_system_cleanup>:



void pwm_led_system_cleanup(void) {
	set_pwm_color_channel(RED_CHANNEL, false);
     600:	2100      	movs	r1, #0
void pwm_led_system_cleanup(void) {
     602:	b510      	push	{r4, lr}
	set_pwm_color_channel(RED_CHANNEL, false);
     604:	0008      	movs	r0, r1
     606:	f7ff ffdf 	bl	5c8 <set_pwm_color_channel>
	set_pwm_color_channel(BLUE_CHANNEL, false);
     60a:	2100      	movs	r1, #0
     60c:	2002      	movs	r0, #2
     60e:	f7ff ffdb 	bl	5c8 <set_pwm_color_channel>
	set_pwm_color_channel(GREEN_CHANNEL, false);
     612:	2100      	movs	r1, #0
     614:	2001      	movs	r0, #1
     616:	f7ff ffd7 	bl	5c8 <set_pwm_color_channel>
	set_pwm_color_channel(WHITE_CHANNEL, false);
     61a:	2100      	movs	r1, #0
     61c:	2003      	movs	r0, #3
     61e:	f7ff ffd3 	bl	5c8 <set_pwm_color_channel>
}
     622:	bd10      	pop	{r4, pc}

00000624 <set_pwm_color>:



void set_pwm_color(int color) {
     624:	b510      	push	{r4, lr}
     626:	0004      	movs	r4, r0
	
	pwm_led_system_cleanup();
     628:	f7ff ffea 	bl	600 <pwm_led_system_cleanup>
	
	switch (color) {
     62c:	2c06      	cmp	r4, #6
     62e:	d80a      	bhi.n	646 <set_pwm_color+0x22>
     630:	0020      	movs	r0, r4
		case 5:  // Purple (Red + Blue)
		set_pwm_color_channel(RED_CHANNEL, true);
		set_pwm_color_channel(BLUE_CHANNEL, true);
		break;
		case 6:  // Cyan (Blue + Green)
		set_pwm_color_channel(BLUE_CHANNEL, true);
     632:	2101      	movs	r1, #1
	switch (color) {
     634:	f001 fd7c 	bl	2130 <__gnu_thumb1_case_uqi>
     638:	08140e04 	.word	0x08140e04
     63c:	100a      	.short	0x100a
     63e:	16          	.byte	0x16
     63f:	00          	.byte	0x00
		set_pwm_color_channel(RED_CHANNEL, true);
     640:	2000      	movs	r0, #0
		set_pwm_color_channel(GREEN_CHANNEL, true);
     642:	f7ff ffc1 	bl	5c8 <set_pwm_color_channel>
		break;
		default:
		break;
	}
}
     646:	bd10      	pop	{r4, pc}
		set_pwm_color_channel(WHITE_CHANNEL, true);
     648:	2003      	movs	r0, #3
     64a:	e7fa      	b.n	642 <set_pwm_color+0x1e>
		set_pwm_color_channel(RED_CHANNEL, true);
     64c:	2000      	movs	r0, #0
		set_pwm_color_channel(BLUE_CHANNEL, true);
     64e:	f7ff ffbb 	bl	5c8 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
     652:	2101      	movs	r1, #1
     654:	0008      	movs	r0, r1
     656:	e7f4      	b.n	642 <set_pwm_color+0x1e>
		set_pwm_color_channel(RED_CHANNEL, true);
     658:	2000      	movs	r0, #0
     65a:	f7ff ffb5 	bl	5c8 <set_pwm_color_channel>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     65e:	2101      	movs	r1, #1
     660:	2002      	movs	r0, #2
     662:	e7ee      	b.n	642 <set_pwm_color+0x1e>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     664:	2002      	movs	r0, #2
     666:	e7f2      	b.n	64e <set_pwm_color+0x2a>

00000668 <cycle_pwm_led>:
	tcc_enable(&tcc_instance);
	
}


void cycle_pwm_led(void) {
     668:	b510      	push	{r4, lr}
	switch (pwm_led_toggle_count) {
     66a:	4c13      	ldr	r4, [pc, #76]	; (6b8 <cycle_pwm_led+0x50>)
     66c:	7820      	ldrb	r0, [r4, #0]
     66e:	3801      	subs	r0, #1
     670:	2806      	cmp	r0, #6
     672:	d81b      	bhi.n	6ac <cycle_pwm_led+0x44>
     674:	f001 fd5c 	bl	2130 <__gnu_thumb1_case_uqi>
     678:	12100a04 	.word	0x12100a04
     67c:	1614      	.short	0x1614
     67e:	18          	.byte	0x18
     67f:	00          	.byte	0x00
		case 1:
		SET_RED;
     680:	2000      	movs	r0, #0
     682:	f7ff ffcf 	bl	624 <set_pwm_color>
		set_color_red();
     686:	f001 fca1 	bl	1fcc <set_color_red>
		case 8:
		pwm_led_system_cleanup();							// Reset to 1 for red
		pwm_led_toggle_count = 0;
		break;
	}
}
     68a:	bd10      	pop	{r4, pc}
		set_color_blue();
     68c:	f001 fcba 	bl	2004 <set_color_blue>
		SET_GRN;
     690:	2001      	movs	r0, #1
		SET_WHT;
     692:	f7ff ffc7 	bl	624 <set_pwm_color>
		break;
     696:	e7f8      	b.n	68a <cycle_pwm_led+0x22>
		SET_BLU;
     698:	2002      	movs	r0, #2
     69a:	e7fa      	b.n	692 <cycle_pwm_led+0x2a>
		SET_YLW;
     69c:	2004      	movs	r0, #4
     69e:	e7f8      	b.n	692 <cycle_pwm_led+0x2a>
		SET_PLE;
     6a0:	2005      	movs	r0, #5
     6a2:	e7f6      	b.n	692 <cycle_pwm_led+0x2a>
		SET_CYN;
     6a4:	2006      	movs	r0, #6
     6a6:	e7f4      	b.n	692 <cycle_pwm_led+0x2a>
		SET_WHT;
     6a8:	2003      	movs	r0, #3
     6aa:	e7f2      	b.n	692 <cycle_pwm_led+0x2a>
		pwm_led_system_cleanup();							// Reset to 1 for red
     6ac:	f7ff ffa8 	bl	600 <pwm_led_system_cleanup>
		pwm_led_toggle_count = 0;
     6b0:	2300      	movs	r3, #0
     6b2:	7023      	strb	r3, [r4, #0]
}
     6b4:	e7e9      	b.n	68a <cycle_pwm_led+0x22>
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	20000042 	.word	0x20000042

000006bc <configure_pwm_generator>:
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);

	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     6bc:	21a0      	movs	r1, #160	; 0xa0
{
     6be:	b500      	push	{lr}
     6c0:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     6c2:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     6c4:	00c9      	lsls	r1, r1, #3
     6c6:	8091      	strh	r1, [r2, #4]

	config_tc.counter_8_bit.value = 0;
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     6c8:	212d      	movs	r1, #45	; 0x2d
     6ca:	2300      	movs	r3, #0
     6cc:	2055      	movs	r0, #85	; 0x55
     6ce:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
     6d0:	8513      	strh	r3, [r2, #40]	; 0x28
     6d2:	7008      	strb	r0, [r1, #0]

	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     6d4:	212e      	movs	r1, #46	; 0x2e
     6d6:	3840      	subs	r0, #64	; 0x40
     6d8:	4469      	add	r1, sp
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     6da:	8553      	strh	r3, [r2, #42]	; 0x2a
     6dc:	7008      	strb	r0, [r1, #0]

	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     6de:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
     6e0:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     6e2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     6e4:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     6e6:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     6e8:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     6ea:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     6ec:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     6ee:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     6f0:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     6f2:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     6f4:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     6f6:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
     6f8:	3304      	adds	r3, #4
     6fa:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     6fc:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     6fe:	6193      	str	r3, [r2, #24]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     700:	3936      	subs	r1, #54	; 0x36

	config_tc.pwm_channel[0].enabled = true;
     702:	3b03      	subs	r3, #3
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     704:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].enabled = true;
     706:	7413      	strb	r3, [r2, #16]
	
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     708:	4902      	ldr	r1, [pc, #8]	; (714 <configure_pwm_generator+0x58>)
     70a:	4803      	ldr	r0, [pc, #12]	; (718 <configure_pwm_generator+0x5c>)
     70c:	f001 fab0 	bl	1c70 <tc_init>
}
     710:	b00f      	add	sp, #60	; 0x3c
     712:	bd00      	pop	{pc}
     714:	42001c00 	.word	0x42001c00
     718:	200001a4 	.word	0x200001a4

0000071c <motor_enable>:



void motor_enable(void){
     71c:	4b08      	ldr	r3, [pc, #32]	; (740 <motor_enable+0x24>)
     71e:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     720:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     722:	b252      	sxtb	r2, r2
     724:	2a00      	cmp	r2, #0
     726:	dbfb      	blt.n	720 <motor_enable+0x4>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     728:	2202      	movs	r2, #2
     72a:	8819      	ldrh	r1, [r3, #0]
     72c:	430a      	orrs	r2, r1
     72e:	801a      	strh	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     730:	2240      	movs	r2, #64	; 0x40
     732:	4b04      	ldr	r3, [pc, #16]	; (744 <motor_enable+0x28>)
     734:	619a      	str	r2, [r3, #24]
	tc_enable(&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
	motor_running = true;
     736:	4b04      	ldr	r3, [pc, #16]	; (748 <motor_enable+0x2c>)
     738:	3a3f      	subs	r2, #63	; 0x3f
     73a:	701a      	strb	r2, [r3, #0]

}
     73c:	4770      	bx	lr
     73e:	46c0      	nop			; (mov r8, r8)
     740:	200001a4 	.word	0x200001a4
     744:	41004400 	.word	0x41004400
     748:	20000044 	.word	0x20000044

0000074c <motor_disable>:


void motor_disable(void){
	pulsating_motor_routine = false;
     74c:	2100      	movs	r1, #0
     74e:	4b0e      	ldr	r3, [pc, #56]	; (788 <motor_disable+0x3c>)
void motor_disable(void){
     750:	b510      	push	{r4, lr}
	motor_toggle_count = 0;

	tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     752:	4c0e      	ldr	r4, [pc, #56]	; (78c <motor_disable+0x40>)
	pulsating_motor_routine = false;
     754:	7019      	strb	r1, [r3, #0]
	motor_toggle_count = 0;
     756:	4b0e      	ldr	r3, [pc, #56]	; (790 <motor_disable+0x44>)
	tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     758:	2215      	movs	r2, #21
     75a:	0020      	movs	r0, r4
	motor_toggle_count = 0;
     75c:	7019      	strb	r1, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     75e:	f001 fb9b 	bl	1e98 <tc_set_compare_value>
     762:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     764:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     766:	b252      	sxtb	r2, r2
     768:	2a00      	cmp	r2, #0
     76a:	dbfb      	blt.n	764 <motor_disable+0x18>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     76c:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     76e:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     770:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     772:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     774:	881a      	ldrh	r2, [r3, #0]
     776:	438a      	bics	r2, r1
     778:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     77a:	2240      	movs	r2, #64	; 0x40
     77c:	4b05      	ldr	r3, [pc, #20]	; (794 <motor_disable+0x48>)
     77e:	615a      	str	r2, [r3, #20]
	

	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
	motor_running = false;
     780:	2200      	movs	r2, #0
     782:	4b05      	ldr	r3, [pc, #20]	; (798 <motor_disable+0x4c>)
     784:	701a      	strb	r2, [r3, #0]
}
     786:	bd10      	pop	{r4, pc}
     788:	20000046 	.word	0x20000046
     78c:	200001a4 	.word	0x200001a4
     790:	20000045 	.word	0x20000045
     794:	41004400 	.word	0x41004400
     798:	20000044 	.word	0x20000044

0000079c <cycle_pwm_motor>:



void cycle_pwm_motor (void)
{
     79c:	b510      	push	{r4, lr}
	{
		if (motor_running)
     79e:	4b0e      	ldr	r3, [pc, #56]	; (7d8 <cycle_pwm_motor+0x3c>)
     7a0:	781b      	ldrb	r3, [r3, #0]
     7a2:	2b00      	cmp	r3, #0
     7a4:	d00b      	beq.n	7be <cycle_pwm_motor+0x22>
		{
			
			if (motor_toggle_count == 2)
     7a6:	4b0d      	ldr	r3, [pc, #52]	; (7dc <cycle_pwm_motor+0x40>)
			{
				tc_set_compare_value (&pwm_generator_instance,
     7a8:	2222      	movs	r2, #34	; 0x22
			if (motor_toggle_count == 2)
     7aa:	781b      	ldrb	r3, [r3, #0]
     7ac:	2b02      	cmp	r3, #2
     7ae:	d002      	beq.n	7b6 <cycle_pwm_motor+0x1a>
				TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
			}
			else if (motor_toggle_count == 3)
     7b0:	2b03      	cmp	r3, #3
     7b2:	d105      	bne.n	7c0 <cycle_pwm_motor+0x24>
			{
				tc_set_compare_value (&pwm_generator_instance,
     7b4:	224d      	movs	r2, #77	; 0x4d
     7b6:	2100      	movs	r1, #0
     7b8:	4809      	ldr	r0, [pc, #36]	; (7e0 <cycle_pwm_motor+0x44>)
     7ba:	f001 fb6d 	bl	1e98 <tc_set_compare_value>
				
			}
		}
	}

}
     7be:	bd10      	pop	{r4, pc}
			else if (motor_toggle_count == 4)
     7c0:	2b04      	cmp	r3, #4
     7c2:	d104      	bne.n	7ce <cycle_pwm_motor+0x32>
				pulsating_motor_routine = true;
     7c4:	2201      	movs	r2, #1
     7c6:	4b07      	ldr	r3, [pc, #28]	; (7e4 <cycle_pwm_motor+0x48>)
     7c8:	701a      	strb	r2, [r3, #0]
				tc_set_compare_value (&pwm_generator_instance,
     7ca:	324c      	adds	r2, #76	; 0x4c
     7cc:	e7f3      	b.n	7b6 <cycle_pwm_motor+0x1a>
			else if (motor_toggle_count > 4)
     7ce:	2b04      	cmp	r3, #4
     7d0:	d9f5      	bls.n	7be <cycle_pwm_motor+0x22>
					motor_disable();
     7d2:	f7ff ffbb 	bl	74c <motor_disable>
}
     7d6:	e7f2      	b.n	7be <cycle_pwm_motor+0x22>
     7d8:	20000044 	.word	0x20000044
     7dc:	20000045 	.word	0x20000045
     7e0:	200001a4 	.word	0x200001a4
     7e4:	20000046 	.word	0x20000046

000007e8 <toggle_nsleep>:



 void toggle_nsleep(void){
	 static bool PULSATING_MOTOR = false;
	 if (pulsating_motor_routine){
     7e8:	4b08      	ldr	r3, [pc, #32]	; (80c <toggle_nsleep+0x24>)
     7ea:	781b      	ldrb	r3, [r3, #0]
     7ec:	2b00      	cmp	r3, #0
     7ee:	d008      	beq.n	802 <toggle_nsleep+0x1a>
		 if (PULSATING_MOTOR){
     7f0:	4b07      	ldr	r3, [pc, #28]	; (810 <toggle_nsleep+0x28>)
     7f2:	4a08      	ldr	r2, [pc, #32]	; (814 <toggle_nsleep+0x2c>)
     7f4:	7818      	ldrb	r0, [r3, #0]
     7f6:	2140      	movs	r1, #64	; 0x40
     7f8:	2800      	cmp	r0, #0
     7fa:	d003      	beq.n	804 <toggle_nsleep+0x1c>
     7fc:	6151      	str	r1, [r2, #20]
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			 PULSATING_MOTOR = false;
     7fe:	2200      	movs	r2, #0
     800:	701a      	strb	r2, [r3, #0]
			 }else{
			 PULSATING_MOTOR = true;
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
		 }
	 }
 }
     802:	4770      	bx	lr
			 PULSATING_MOTOR = true;
     804:	2001      	movs	r0, #1
     806:	7018      	strb	r0, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
     808:	6191      	str	r1, [r2, #24]
 }
     80a:	e7fa      	b.n	802 <toggle_nsleep+0x1a>
     80c:	20000046 	.word	0x20000046
     810:	20000043 	.word	0x20000043
     814:	41004400 	.word	0x41004400

00000818 <regular_routine>:

 }



 void regular_routine(void) {
     818:	b510      	push	{r4, lr}
	 static bool motor_status_changed = false;
	 static bool led_button_status_changed = false;

	 //-------------------------------------------------------------

	 if (is_button_one_pressed()) {
     81a:	f7ff fe69 	bl	4f0 <is_button_one_pressed>
     81e:	2800      	cmp	r0, #0
     820:	d007      	beq.n	832 <regular_routine+0x1a>
		if (LongPressB1Flag) {
     822:	4c2b      	ldr	r4, [pc, #172]	; (8d0 <regular_routine+0xb8>)
     824:	7823      	ldrb	r3, [r4, #0]
     826:	2b00      	cmp	r3, #0
     828:	d02f      	beq.n	88a <regular_routine+0x72>
	 motor_disable();						// shutdown pwm motor
     82a:	f7ff ff8f 	bl	74c <motor_disable>
			system_inactive();
			LongPressB1Flag = false; // ALLOW IT TO CYCLE AGAIN
     82e:	2300      	movs	r3, #0
     830:	7023      	strb	r3, [r4, #0]
				}
		}
		 }
	 }

	 if (BUTTON_ONE_RELEASE_STATUS) {
     832:	4b28      	ldr	r3, [pc, #160]	; (8d4 <regular_routine+0xbc>)
     834:	781b      	ldrb	r3, [r3, #0]
     836:	2b00      	cmp	r3, #0
     838:	d002      	beq.n	840 <regular_routine+0x28>
		 motor_status_changed = false;
     83a:	2200      	movs	r2, #0
     83c:	4b26      	ldr	r3, [pc, #152]	; (8d8 <regular_routine+0xc0>)
     83e:	701a      	strb	r2, [r3, #0]
	 }

	 //-------------------------------------------------------

	 if (is_button_two_pressed()) {
     840:	f7ff fe8c 	bl	55c <is_button_two_pressed>
     844:	2800      	cmp	r0, #0
     846:	d007      	beq.n	858 <regular_routine+0x40>
		 if (LongPressB2Flag) {
     848:	4c24      	ldr	r4, [pc, #144]	; (8dc <regular_routine+0xc4>)
     84a:	7823      	ldrb	r3, [r4, #0]
     84c:	2b00      	cmp	r3, #0
     84e:	d030      	beq.n	8b2 <regular_routine+0x9a>
	 motor_disable();						// shutdown pwm motor
     850:	f7ff ff7c 	bl	74c <motor_disable>
			 system_inactive();
			 LongPressB2Flag = false; // ALLOW IT TO CYCLE AGAIN
     854:	2300      	movs	r3, #0
     856:	7023      	strb	r3, [r4, #0]
				 led_button_status_changed = true;
				 cycle_pwm_led();
			 }
		 }
	 }
	 if (BUTTON_TWO_RELEASE_STATUS) {
     858:	4b21      	ldr	r3, [pc, #132]	; (8e0 <regular_routine+0xc8>)
     85a:	781b      	ldrb	r3, [r3, #0]
     85c:	2b00      	cmp	r3, #0
     85e:	d002      	beq.n	866 <regular_routine+0x4e>
		 led_button_status_changed = false;
     860:	2200      	movs	r2, #0
     862:	4b20      	ldr	r3, [pc, #128]	; (8e4 <regular_routine+0xcc>)
     864:	701a      	strb	r2, [r3, #0]
	 }

	 if (Vbus_State == false) {
     866:	4b20      	ldr	r3, [pc, #128]	; (8e8 <regular_routine+0xd0>)
     868:	781b      	ldrb	r3, [r3, #0]
     86a:	2b00      	cmp	r3, #0
     86c:	d00c      	beq.n	888 <regular_routine+0x70>
		;																					// Enable Motor PWM
	 } else {
	
		if (motor_running){
     86e:	4b1f      	ldr	r3, [pc, #124]	; (8ec <regular_routine+0xd4>)
     870:	781b      	ldrb	r3, [r3, #0]
     872:	2b00      	cmp	r3, #0
     874:	d001      	beq.n	87a <regular_routine+0x62>
	 motor_disable();						// shutdown pwm motor
     876:	f7ff ff69 	bl	74c <motor_disable>
			system_inactive();
		}
																			// ITS PLUGGED IN
		if (Chargn_On_State == false) {															// battery charging (plugged in)
     87a:	4b1d      	ldr	r3, [pc, #116]	; (8f0 <regular_routine+0xd8>)
     87c:	781a      	ldrb	r2, [r3, #0]
     87e:	4b1d      	ldr	r3, [pc, #116]	; (8f4 <regular_routine+0xdc>)
     880:	2a00      	cmp	r2, #0
     882:	d123      	bne.n	8cc <regular_routine+0xb4>
			BATTERY_CHARGING = true;													// show battery charge routine
     884:	3201      	adds	r2, #1
		} else {
			BATTERY_CHARGING = false;
     886:	701a      	strb	r2, [r3, #0]
			//BATTERY_CHARGED = false;
		}
		
	}
 }
     888:	bd10      	pop	{r4, pc}
			if (!motor_status_changed) {
     88a:	4a13      	ldr	r2, [pc, #76]	; (8d8 <regular_routine+0xc0>)
     88c:	7813      	ldrb	r3, [r2, #0]
     88e:	2b00      	cmp	r3, #0
     890:	d1cf      	bne.n	832 <regular_routine+0x1a>
				motor_toggle_count++;
     892:	4919      	ldr	r1, [pc, #100]	; (8f8 <regular_routine+0xe0>)
     894:	780b      	ldrb	r3, [r1, #0]
     896:	3301      	adds	r3, #1
     898:	700b      	strb	r3, [r1, #0]
				motor_status_changed = true;
     89a:	2301      	movs	r3, #1
     89c:	7013      	strb	r3, [r2, #0]
				if (!motor_running) {
     89e:	4b13      	ldr	r3, [pc, #76]	; (8ec <regular_routine+0xd4>)
     8a0:	781b      	ldrb	r3, [r3, #0]
     8a2:	2b00      	cmp	r3, #0
     8a4:	d102      	bne.n	8ac <regular_routine+0x94>
					motor_enable();
     8a6:	f7ff ff39 	bl	71c <motor_enable>
     8aa:	e7c2      	b.n	832 <regular_routine+0x1a>
					cycle_pwm_motor();
     8ac:	f7ff ff76 	bl	79c <cycle_pwm_motor>
     8b0:	e7bf      	b.n	832 <regular_routine+0x1a>
			 if (!led_button_status_changed) {
     8b2:	4a0c      	ldr	r2, [pc, #48]	; (8e4 <regular_routine+0xcc>)
     8b4:	7813      	ldrb	r3, [r2, #0]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d1ce      	bne.n	858 <regular_routine+0x40>
				 pwm_led_toggle_count++;
     8ba:	4910      	ldr	r1, [pc, #64]	; (8fc <regular_routine+0xe4>)
     8bc:	780b      	ldrb	r3, [r1, #0]
     8be:	3301      	adds	r3, #1
     8c0:	700b      	strb	r3, [r1, #0]
				 led_button_status_changed = true;
     8c2:	2301      	movs	r3, #1
     8c4:	7013      	strb	r3, [r2, #0]
				 cycle_pwm_led();
     8c6:	f7ff fecf 	bl	668 <cycle_pwm_led>
     8ca:	e7c5      	b.n	858 <regular_routine+0x40>
			BATTERY_CHARGING = false;
     8cc:	2200      	movs	r2, #0
     8ce:	e7da      	b.n	886 <regular_routine+0x6e>
     8d0:	20000040 	.word	0x20000040
     8d4:	2000003d 	.word	0x2000003d
     8d8:	2000004c 	.word	0x2000004c
     8dc:	20000041 	.word	0x20000041
     8e0:	2000003f 	.word	0x2000003f
     8e4:	2000004b 	.word	0x2000004b
     8e8:	200001c1 	.word	0x200001c1
     8ec:	20000044 	.word	0x20000044
     8f0:	200001c2 	.word	0x200001c2
     8f4:	20000048 	.word	0x20000048
     8f8:	20000045 	.word	0x20000045
     8fc:	20000042 	.word	0x20000042

00000900 <get_battery_level>:
	//return state;
//}


void get_battery_level(void) {
	if (adc_result < VOLTAGE_THRESH_LOWEST) {
     900:	4b11      	ldr	r3, [pc, #68]	; (948 <get_battery_level+0x48>)
     902:	4a12      	ldr	r2, [pc, #72]	; (94c <get_battery_level+0x4c>)
     904:	881b      	ldrh	r3, [r3, #0]
     906:	4293      	cmp	r3, r2
     908:	d808      	bhi.n	91c <get_battery_level+0x1c>
		BATTERY_LOWEST = true;
     90a:	2201      	movs	r2, #1
     90c:	4b10      	ldr	r3, [pc, #64]	; (950 <get_battery_level+0x50>)
     90e:	701a      	strb	r2, [r3, #0]
		BATTERY_LOW = false;
     910:	2300      	movs	r3, #0
     912:	4a10      	ldr	r2, [pc, #64]	; (954 <get_battery_level+0x54>)
     914:	7013      	strb	r3, [r2, #0]

	}
	else if (adc_result < VOLTAGE_THRESH_LOW) {
		BATTERY_LOWEST = false;
		BATTERY_LOW = true;
		BATTERY_CHARGED = false;
     916:	4a10      	ldr	r2, [pc, #64]	; (958 <get_battery_level+0x58>)
     918:	7013      	strb	r3, [r2, #0]
		BATTERY_LOW = false;
		BATTERY_CHARGED = true;
	}
	else{
	}
}
     91a:	4770      	bx	lr
	else if (adc_result < VOLTAGE_THRESH_LOW) {
     91c:	4a0f      	ldr	r2, [pc, #60]	; (95c <get_battery_level+0x5c>)
     91e:	4293      	cmp	r3, r2
     920:	d806      	bhi.n	930 <get_battery_level+0x30>
		BATTERY_LOWEST = false;
     922:	2300      	movs	r3, #0
		BATTERY_LOW = true;
     924:	2101      	movs	r1, #1
		BATTERY_LOWEST = false;
     926:	4a0a      	ldr	r2, [pc, #40]	; (950 <get_battery_level+0x50>)
     928:	7013      	strb	r3, [r2, #0]
		BATTERY_LOW = true;
     92a:	4a0a      	ldr	r2, [pc, #40]	; (954 <get_battery_level+0x54>)
     92c:	7011      	strb	r1, [r2, #0]
     92e:	e7f2      	b.n	916 <get_battery_level+0x16>
	else if (adc_result < VOLTAGE_THRESH_MAX){
     930:	4a0b      	ldr	r2, [pc, #44]	; (960 <get_battery_level+0x60>)
     932:	4293      	cmp	r3, r2
     934:	d8f1      	bhi.n	91a <get_battery_level+0x1a>
		BATTERY_LOWEST = false;
     936:	2300      	movs	r3, #0
     938:	4a05      	ldr	r2, [pc, #20]	; (950 <get_battery_level+0x50>)
     93a:	7013      	strb	r3, [r2, #0]
		BATTERY_LOW = false;
     93c:	4a05      	ldr	r2, [pc, #20]	; (954 <get_battery_level+0x54>)
     93e:	7013      	strb	r3, [r2, #0]
		BATTERY_CHARGED = true;
     940:	2201      	movs	r2, #1
     942:	4b05      	ldr	r3, [pc, #20]	; (958 <get_battery_level+0x58>)
     944:	701a      	strb	r2, [r3, #0]
}
     946:	e7e8      	b.n	91a <get_battery_level+0x1a>
     948:	20000098 	.word	0x20000098
     94c:	00000c79 	.word	0x00000c79
     950:	2000004a 	.word	0x2000004a
     954:	20000049 	.word	0x20000049
     958:	20000047 	.word	0x20000047
     95c:	00000d2b 	.word	0x00000d2b
     960:	00000e8e 	.word	0x00000e8e

00000964 <blink_leds>:

 



  void blink_leds(void){
     964:	b510      	push	{r4, lr}
	  if (BATTERY_LOW || BATTERY_CHARGING){
     966:	4b05      	ldr	r3, [pc, #20]	; (97c <blink_leds+0x18>)
     968:	781b      	ldrb	r3, [r3, #0]
     96a:	2b00      	cmp	r3, #0
     96c:	d103      	bne.n	976 <blink_leds+0x12>
     96e:	4b04      	ldr	r3, [pc, #16]	; (980 <blink_leds+0x1c>)
     970:	781b      	ldrb	r3, [r3, #0]
     972:	2b00      	cmp	r3, #0
     974:	d001      	beq.n	97a <blink_leds+0x16>
		  toggle_red_led();
     976:	f001 fb61 	bl	203c <toggle_red_led>
	  }
  }
     97a:	bd10      	pop	{r4, pc}
     97c:	20000049 	.word	0x20000049
     980:	20000048 	.word	0x20000048

00000984 <system_logic>:

 void system_logic(void) {
     984:	b510      	push	{r4, lr}

	 
	 if (SYS_TICK_10MS) {
     986:	4b0b      	ldr	r3, [pc, #44]	; (9b4 <system_logic+0x30>)
     988:	781a      	ldrb	r2, [r3, #0]
     98a:	2a00      	cmp	r2, #0
     98c:	d003      	beq.n	996 <system_logic+0x12>
		 SYS_TICK_10MS = false;
     98e:	2200      	movs	r2, #0
     990:	701a      	strb	r2, [r3, #0]
		 regular_routine();
     992:	f7ff ff41 	bl	818 <regular_routine>

	 }

	 if (SYS_TICK_200MS) {
     996:	4b08      	ldr	r3, [pc, #32]	; (9b8 <system_logic+0x34>)
     998:	781a      	ldrb	r2, [r3, #0]
     99a:	2a00      	cmp	r2, #0
     99c:	d009      	beq.n	9b2 <system_logic+0x2e>
		 SYS_TICK_200MS = false;
     99e:	2200      	movs	r2, #0
     9a0:	701a      	strb	r2, [r3, #0]
		 toggle_nsleep();
     9a2:	f7ff ff21 	bl	7e8 <toggle_nsleep>
		 sample_adc();
     9a6:	f7ff fbd1 	bl	14c <sample_adc>
		 get_battery_level();
     9aa:	f7ff ffa9 	bl	900 <get_battery_level>
		 blink_leds();
     9ae:	f7ff ffd9 	bl	964 <blink_leds>
	 }




     9b2:	bd10      	pop	{r4, pc}
     9b4:	2000004e 	.word	0x2000004e
     9b8:	2000004f 	.word	0x2000004f

000009bc <sys_tc_callback>:
	static int tick_count_100ms;
	static int tick_count_200ms;
	//static int tick_count_500ms;
	//static int tick_count_1000ms;

	tick_count_1ms++;
     9bc:	4919      	ldr	r1, [pc, #100]	; (a24 <sys_tc_callback+0x68>)
     9be:	680b      	ldr	r3, [r1, #0]
     9c0:	1c5a      	adds	r2, r3, #1
     9c2:	600a      	str	r2, [r1, #0]
     9c4:	4b18      	ldr	r3, [pc, #96]	; (a28 <sys_tc_callback+0x6c>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
     9c6:	2a09      	cmp	r2, #9
     9c8:	dd07      	ble.n	9da <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
     9ca:	681a      	ldr	r2, [r3, #0]
     9cc:	3201      	adds	r2, #1
     9ce:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
     9d0:	2200      	movs	r2, #0
     9d2:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
     9d4:	2101      	movs	r1, #1
     9d6:	4a15      	ldr	r2, [pc, #84]	; (a2c <sys_tc_callback+0x70>)
     9d8:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
     9da:	6819      	ldr	r1, [r3, #0]
     9dc:	4a14      	ldr	r2, [pc, #80]	; (a30 <sys_tc_callback+0x74>)
     9de:	2904      	cmp	r1, #4
     9e0:	dd07      	ble.n	9f2 <sys_tc_callback+0x36>
	{
		tick_count_50ms++;
     9e2:	6811      	ldr	r1, [r2, #0]
     9e4:	3101      	adds	r1, #1
     9e6:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
     9e8:	2100      	movs	r1, #0
     9ea:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
     9ec:	4b11      	ldr	r3, [pc, #68]	; (a34 <sys_tc_callback+0x78>)
     9ee:	3101      	adds	r1, #1
     9f0:	7019      	strb	r1, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
     9f2:	6811      	ldr	r1, [r2, #0]
     9f4:	4b10      	ldr	r3, [pc, #64]	; (a38 <sys_tc_callback+0x7c>)
     9f6:	2901      	cmp	r1, #1
     9f8:	dd07      	ble.n	a0a <sys_tc_callback+0x4e>
	{
		tick_count_100ms++;
     9fa:	6819      	ldr	r1, [r3, #0]
     9fc:	3101      	adds	r1, #1
     9fe:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
     a00:	2100      	movs	r1, #0
     a02:	6011      	str	r1, [r2, #0]
		SYS_TICK_100MS = true;									// Flag for 100ms interval
     a04:	4a0d      	ldr	r2, [pc, #52]	; (a3c <sys_tc_callback+0x80>)
     a06:	3101      	adds	r1, #1
     a08:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
     a0a:	681a      	ldr	r2, [r3, #0]
     a0c:	2a01      	cmp	r2, #1
     a0e:	dd08      	ble.n	a22 <sys_tc_callback+0x66>
	{
		tick_count_200ms++;
     a10:	490b      	ldr	r1, [pc, #44]	; (a40 <sys_tc_callback+0x84>)
     a12:	680a      	ldr	r2, [r1, #0]
     a14:	3201      	adds	r2, #1
     a16:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
     a18:	2200      	movs	r2, #0
     a1a:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
     a1c:	4b09      	ldr	r3, [pc, #36]	; (a44 <sys_tc_callback+0x88>)
     a1e:	3201      	adds	r2, #1
     a20:	701a      	strb	r2, [r3, #0]
		//tick_count_500ms = 0;
		//SYS_TICK_1000MS = true;                                 // Flag for 1000ms interval
		////port_pin_toggle_output_level (LED0_PIN);               // visually check sys clock on PA16
	//}
	
}
     a22:	4770      	bx	lr
     a24:	2000005c 	.word	0x2000005c
     a28:	20000058 	.word	0x20000058
     a2c:	2000004e 	.word	0x2000004e
     a30:	20000064 	.word	0x20000064
     a34:	20000050 	.word	0x20000050
     a38:	20000054 	.word	0x20000054
     a3c:	2000004d 	.word	0x2000004d
     a40:	20000060 	.word	0x20000060
     a44:	2000004f 	.word	0x2000004f

00000a48 <configure_port_pins>:
{
     a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     a4a:	2502      	movs	r5, #2
	config->direction  = PORT_PIN_DIR_INPUT;
     a4c:	2700      	movs	r7, #0
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     a4e:	2601      	movs	r6, #1
     a50:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     a52:	0021      	movs	r1, r4
     a54:	201b      	movs	r0, #27
     a56:	7027      	strb	r7, [r4, #0]
	config->powersave  = false;
     a58:	70a7      	strb	r7, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     a5a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     a5c:	f000 f91c 	bl	c98 <port_pin_set_config>
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     a60:	0021      	movs	r1, r4
     a62:	2006      	movs	r0, #6
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     a64:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     a66:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     a68:	f000 f916 	bl	c98 <port_pin_set_config>
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     a6c:	0021      	movs	r1, r4
     a6e:	2007      	movs	r0, #7
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     a70:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;								// START AT PULL UP.
     a72:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     a74:	f000 f910 	bl	c98 <port_pin_set_config>
	port_pin_set_config(BUTTON_2, &config_port_pin);
     a78:	0021      	movs	r1, r4
     a7a:	200f      	movs	r0, #15
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     a7c:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     a7e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
     a80:	f000 f90a 	bl	c98 <port_pin_set_config>
	port_pin_set_config(CHARGING_PIN, &config_port_pin);
     a84:	0021      	movs	r1, r4
     a86:	200b      	movs	r0, #11
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     a88:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     a8a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(CHARGING_PIN, &config_port_pin);
     a8c:	f000 f904 	bl	c98 <port_pin_set_config>
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     a90:	0021      	movs	r1, r4
     a92:	2003      	movs	r0, #3
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     a94:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     a96:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     a98:	f000 f8fe 	bl	c98 <port_pin_set_config>
	port_pin_set_config(SAMPLE_ADC_PIN, &config_port_pin);
     a9c:	0028      	movs	r0, r5
     a9e:	0021      	movs	r1, r4
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     aa0:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     aa2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(SAMPLE_ADC_PIN, &config_port_pin);
     aa4:	f000 f8f8 	bl	c98 <port_pin_set_config>
	port_pin_set_config(XPLAINED_LED, &config_port_pin);
     aa8:	0021      	movs	r1, r4
     aaa:	2010      	movs	r0, #16
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     aac:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(XPLAINED_LED, &config_port_pin);
     aae:	f000 f8f3 	bl	c98 <port_pin_set_config>
	port_pin_set_config(BUTTON_1, &config_port_pin);
     ab2:	0021      	movs	r1, r4
     ab4:	200e      	movs	r0, #14
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     ab6:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
     ab8:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_1, &config_port_pin);
     aba:	f000 f8ed 	bl	c98 <port_pin_set_config>
}
     abe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000ac0 <configure_system_tc>:
	config->clock_source               = GCLK_GENERATOR_0;
     ac0:	2300      	movs	r3, #0
 {
     ac2:	b510      	push	{r4, lr}
     ac4:	b08e      	sub	sp, #56	; 0x38
     ac6:	aa01      	add	r2, sp, #4
	config->counter_16_bit.value                   = 0x0000;
     ac8:	8513      	strh	r3, [r2, #40]	; 0x28
	config->clock_source               = GCLK_GENERATOR_0;
     aca:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     acc:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     ace:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     ad0:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     ad2:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     ad4:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     ad6:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     ad8:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     ada:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     adc:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     ade:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     ae0:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     ae2:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     ae4:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     ae6:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     ae8:	8593      	strh	r3, [r2, #44]	; 0x2c
	 config_tc.counter_size = TC_COUNTER_SIZE;
     aea:	3304      	adds	r3, #4
     aec:	7093      	strb	r3, [r2, #2]
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     aee:	23a0      	movs	r3, #160	; 0xa0
     af0:	00db      	lsls	r3, r3, #3
     af2:	8093      	strh	r3, [r2, #4]
	 config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
     af4:	232d      	movs	r3, #45	; 0x2d
     af6:	216f      	movs	r1, #111	; 0x6f
     af8:	446b      	add	r3, sp
     afa:	7019      	strb	r1, [r3, #0]
	 config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     afc:	2301      	movs	r3, #1
	 tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
     afe:	4c08      	ldr	r4, [pc, #32]	; (b20 <configure_system_tc+0x60>)
	 config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     b00:	7413      	strb	r3, [r2, #16]
	 tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
     b02:	4908      	ldr	r1, [pc, #32]	; (b24 <configure_system_tc+0x64>)
     b04:	0020      	movs	r0, r4
     b06:	f001 f8b3 	bl	1c70 <tc_init>
     b0a:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b0c:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     b0e:	b252      	sxtb	r2, r2
     b10:	2a00      	cmp	r2, #0
     b12:	dbfb      	blt.n	b0c <configure_system_tc+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     b14:	2202      	movs	r2, #2
     b16:	8819      	ldrh	r1, [r3, #0]
     b18:	430a      	orrs	r2, r1
     b1a:	801a      	strh	r2, [r3, #0]
 }
     b1c:	b00e      	add	sp, #56	; 0x38
     b1e:	bd10      	pop	{r4, pc}
     b20:	200000e4 	.word	0x200000e4
     b24:	42001800 	.word	0x42001800

00000b28 <system_tc_callbacks>:
{
     b28:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
     b2a:	4c0c      	ldr	r4, [pc, #48]	; (b5c <system_tc_callbacks+0x34>)
     b2c:	2200      	movs	r2, #0
     b2e:	490c      	ldr	r1, [pc, #48]	; (b60 <system_tc_callbacks+0x38>)
     b30:	0020      	movs	r0, r4
     b32:	f001 f840 	bl	1bb6 <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     b36:	6820      	ldr	r0, [r4, #0]
     b38:	f001 f888 	bl	1c4c <_tc_get_inst_index>
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     b3c:	4b09      	ldr	r3, [pc, #36]	; (b64 <system_tc_callbacks+0x3c>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b3e:	5c1a      	ldrb	r2, [r3, r0]
     b40:	231f      	movs	r3, #31
     b42:	401a      	ands	r2, r3
     b44:	3b1e      	subs	r3, #30
     b46:	0019      	movs	r1, r3
     b48:	4091      	lsls	r1, r2
     b4a:	4a07      	ldr	r2, [pc, #28]	; (b68 <system_tc_callbacks+0x40>)
     b4c:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     b4e:	7e62      	ldrb	r2, [r4, #25]
     b50:	431a      	orrs	r2, r3
     b52:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     b54:	6822      	ldr	r2, [r4, #0]
     b56:	7353      	strb	r3, [r2, #13]
}
     b58:	bd10      	pop	{r4, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	200000e4 	.word	0x200000e4
     b60:	000009bd 	.word	0x000009bd
     b64:	00003bd0 	.word	0x00003bd0
     b68:	e000e100 	.word	0xe000e100

00000b6c <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
     b6c:	2240      	movs	r2, #64	; 0x40
     b6e:	4b07      	ldr	r3, [pc, #28]	; (b8c <startup_default_pin_state+0x20>)
     b70:	615a      	str	r2, [r3, #20]
     b72:	1892      	adds	r2, r2, r2
     b74:	615a      	str	r2, [r3, #20]
     b76:	2280      	movs	r2, #128	; 0x80
     b78:	0212      	lsls	r2, r2, #8
     b7a:	615a      	str	r2, [r3, #20]
     b7c:	2280      	movs	r2, #128	; 0x80
     b7e:	0112      	lsls	r2, r2, #4
     b80:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     b82:	2208      	movs	r2, #8
     b84:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
     b86:	3a04      	subs	r2, #4
     b88:	615a      	str	r2, [r3, #20]
	 port_pin_set_output_level(SWITCH_OFF_PIN,LOW);
	 port_pin_set_output_level(BUTTON_2,LOW);
	 port_pin_set_output_level(CHARGING_PIN,LOW);
	 port_pin_set_output_level(CHARGN_OFF_PIN,HIGH);
	 port_pin_set_output_level(SAMPLE_ADC_PIN,LOW);
 }
     b8a:	4770      	bx	lr
     b8c:	41004400 	.word	0x41004400

00000b90 <startup_sys_configs>:


/************************************************************************/
/* SYSTEM startup function call (config functions)						*/
/************************************************************************/
void startup_sys_configs(void){
     b90:	b510      	push	{r4, lr}
	system_init();									// System Initialize
     b92:	f000 ffb2 	bl	1afa <system_init>
	cpu_irq_enable();
     b96:	2201      	movs	r2, #1
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <startup_sys_configs+0x30>)
     b9a:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     b9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ba0:	b662      	cpsie	i
	system_interrupt_enable_global();				// System Interrupts
	configure_port_pins();							// System PORTs
     ba2:	f7ff ff51 	bl	a48 <configure_port_pins>
	startup_default_pin_state();
     ba6:	f7ff ffe1 	bl	b6c <startup_default_pin_state>
	configure_system_tc();							// System Clock
     baa:	f7ff ff89 	bl	ac0 <configure_system_tc>
	system_tc_callbacks();							// System Clock Callback
     bae:	f7ff ffbb 	bl	b28 <system_tc_callbacks>
	i2c_master_setup();								// Startup I2C
     bb2:	f001 fa65 	bl	2080 <i2c_master_setup>
	//configure_pwm_tcc();							// Startup PWM
	configure_adc();
     bb6:	f7ff faa7 	bl	108 <configure_adc>
	configure_pwm_generator();
     bba:	f7ff fd7f 	bl	6bc <configure_pwm_generator>
     bbe:	bd10      	pop	{r4, pc}
     bc0:	20000010 	.word	0x20000010

00000bc4 <update_battery_states>:
	return (port_base->IN.reg & pin_mask);
     bc4:	2101      	movs	r1, #1
     bc6:	4b06      	ldr	r3, [pc, #24]	; (be0 <update_battery_states+0x1c>)
#define CHARGED_STATE port_pin_get_input_level(CHARGING_PIN)
//#define CHARGN_OFF_STATE port_pin_get_input_level(CHARGN_OFF_PIN)


void update_battery_states(void) {
  Vbus_State = VBUS_STATE;
     bc8:	4806      	ldr	r0, [pc, #24]	; (be4 <update_battery_states+0x20>)
     bca:	6a1a      	ldr	r2, [r3, #32]
     bcc:	0ed2      	lsrs	r2, r2, #27
     bce:	400a      	ands	r2, r1
     bd0:	7002      	strb	r2, [r0, #0]
     bd2:	6a1b      	ldr	r3, [r3, #32]
  Charged_State = CHARGED_STATE;
     bd4:	4a04      	ldr	r2, [pc, #16]	; (be8 <update_battery_states+0x24>)
     bd6:	0adb      	lsrs	r3, r3, #11
     bd8:	400b      	ands	r3, r1
     bda:	7013      	strb	r3, [r2, #0]
}
     bdc:	4770      	bx	lr
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	41004400 	.word	0x41004400
     be4:	200001c1 	.word	0x200001c1
     be8:	200001c3 	.word	0x200001c3

00000bec <display_battery_state>:





void display_battery_state(void) {
     bec:	b510      	push	{r4, lr}
  2. Steady red light when device has a low battery
  3. Blinking green light when device is charging
  4. Steady green light when the device is at least 100% charged.
  */

  if (Vbus_State) {
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <display_battery_state+0x2c>)
     bf0:	781b      	ldrb	r3, [r3, #0]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d002      	beq.n	bfc <display_battery_state+0x10>
	  if (BATTERY_CHARGING) {
		  set_color_green();  //  blink
     bf6:	f001 f9cf 	bl	1f98 <set_color_green>
  }

        
 

}
     bfa:	bd10      	pop	{r4, pc}
	  if (BATTERY_LOWEST) {
     bfc:	4b07      	ldr	r3, [pc, #28]	; (c1c <display_battery_state+0x30>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	2b00      	cmp	r3, #0
     c02:	d1fa      	bne.n	bfa <display_battery_state+0xe>
		  } else if (BATTERY_LOW) {
     c04:	4b06      	ldr	r3, [pc, #24]	; (c20 <display_battery_state+0x34>)
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d1f6      	bne.n	bfa <display_battery_state+0xe>
		  } else if (BATTERY_CHARGED) {
     c0c:	4b05      	ldr	r3, [pc, #20]	; (c24 <display_battery_state+0x38>)
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	2b00      	cmp	r3, #0
     c12:	d0f2      	beq.n	bfa <display_battery_state+0xe>
     c14:	e7ef      	b.n	bf6 <display_battery_state+0xa>
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	200001c1 	.word	0x200001c1
     c1c:	2000004a 	.word	0x2000004a
     c20:	20000049 	.word	0x20000049
     c24:	20000047 	.word	0x20000047

00000c28 <system_state>:

/************************************************************************/
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void) {
     c28:	b510      	push	{r4, lr}
  update_battery_states();
     c2a:	f7ff ffcb 	bl	bc4 <update_battery_states>
  display_battery_state();
     c2e:	f7ff ffdd 	bl	bec <display_battery_state>
     c32:	bd10      	pop	{r4, pc}

00000c34 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c34:	4b09      	ldr	r3, [pc, #36]	; (c5c <cpu_irq_enter_critical+0x28>)
     c36:	6819      	ldr	r1, [r3, #0]
     c38:	2900      	cmp	r1, #0
     c3a:	d10b      	bne.n	c54 <cpu_irq_enter_critical+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c3c:	f3ef 8010 	mrs	r0, PRIMASK
     c40:	4a07      	ldr	r2, [pc, #28]	; (c60 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     c42:	2800      	cmp	r0, #0
     c44:	d105      	bne.n	c52 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     c46:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     c48:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c4c:	4905      	ldr	r1, [pc, #20]	; (c64 <cpu_irq_enter_critical+0x30>)
     c4e:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     c50:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c52:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c54:	681a      	ldr	r2, [r3, #0]
     c56:	3201      	adds	r2, #1
     c58:	601a      	str	r2, [r3, #0]
}
     c5a:	4770      	bx	lr
     c5c:	20000068 	.word	0x20000068
     c60:	2000006c 	.word	0x2000006c
     c64:	20000010 	.word	0x20000010

00000c68 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c68:	4b08      	ldr	r3, [pc, #32]	; (c8c <cpu_irq_leave_critical+0x24>)
     c6a:	681a      	ldr	r2, [r3, #0]
     c6c:	3a01      	subs	r2, #1
     c6e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d109      	bne.n	c8a <cpu_irq_leave_critical+0x22>
     c76:	4b06      	ldr	r3, [pc, #24]	; (c90 <cpu_irq_leave_critical+0x28>)
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d005      	beq.n	c8a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c7e:	2201      	movs	r2, #1
     c80:	4b04      	ldr	r3, [pc, #16]	; (c94 <cpu_irq_leave_critical+0x2c>)
     c82:	701a      	strb	r2, [r3, #0]
     c84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c88:	b662      	cpsie	i
	}
}
     c8a:	4770      	bx	lr
     c8c:	20000068 	.word	0x20000068
     c90:	2000006c 	.word	0x2000006c
     c94:	20000010 	.word	0x20000010

00000c98 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     c98:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c9a:	2280      	movs	r2, #128	; 0x80
     c9c:	ab01      	add	r3, sp, #4
     c9e:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ca0:	780a      	ldrb	r2, [r1, #0]
     ca2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ca4:	784a      	ldrb	r2, [r1, #1]
     ca6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     ca8:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     caa:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     cac:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     cae:	f000 ff0f 	bl	1ad0 <system_pinmux_pin_set_config>
}
     cb2:	bd07      	pop	{r0, r1, r2, pc}

00000cb4 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     cb4:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     cb6:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     cb8:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     cba:	421a      	tst	r2, r3
     cbc:	d1fc      	bne.n	cb8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     cbe:	4770      	bx	lr

00000cc0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cc2:	0007      	movs	r7, r0
     cc4:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     cc6:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cc8:	0008      	movs	r0, r1
{
     cca:	0014      	movs	r4, r2
     ccc:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cce:	f000 fb7d 	bl	13cc <_sercom_get_sercom_inst_index>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     cd2:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     cd4:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     cd6:	409d      	lsls	r5, r3
     cd8:	002b      	movs	r3, r5
     cda:	4a9a      	ldr	r2, [pc, #616]	; (f44 <i2c_master_init+0x284>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     cdc:	300e      	adds	r0, #14
     cde:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ce0:	b2c5      	uxtb	r5, r0
     ce2:	430b      	orrs	r3, r1
     ce4:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     ce6:	7b23      	ldrb	r3, [r4, #12]
     ce8:	aa08      	add	r2, sp, #32
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cea:	0011      	movs	r1, r2
     cec:	0028      	movs	r0, r5
	gclk_chan_conf.source_generator = config->generator_source;
     cee:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cf0:	f000 fe8c 	bl	1a0c <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
     cf4:	0028      	movs	r0, r5
     cf6:	f000 fe4d 	bl	1994 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
     cfa:	7b20      	ldrb	r0, [r4, #12]
     cfc:	2100      	movs	r1, #0
     cfe:	f000 faed 	bl	12dc <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     d02:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     d04:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     d06:	079b      	lsls	r3, r3, #30
     d08:	d500      	bpl.n	d0c <i2c_master_init+0x4c>
     d0a:	e10d      	b.n	f28 <i2c_master_init+0x268>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     d0c:	2301      	movs	r3, #1
     d0e:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     d10:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     d12:	401d      	ands	r5, r3
     d14:	d000      	beq.n	d18 <i2c_master_init+0x58>
     d16:	e107      	b.n	f28 <i2c_master_init+0x268>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     d18:	6838      	ldr	r0, [r7, #0]
     d1a:	f000 fb57 	bl	13cc <_sercom_get_sercom_inst_index>
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     d1e:	498a      	ldr	r1, [pc, #552]	; (f48 <i2c_master_init+0x288>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     d20:	9001      	str	r0, [sp, #4]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     d22:	f000 fb71 	bl	1408 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
     d26:	9b01      	ldr	r3, [sp, #4]

	/* Initialize values in module. */
	module->registered_callback = 0;
     d28:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     d2a:	009a      	lsls	r2, r3, #2
     d2c:	4b87      	ldr	r3, [pc, #540]	; (f4c <i2c_master_init+0x28c>)
	module->enabled_callback = 0;
     d2e:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     d30:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     d32:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     d34:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     d36:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     d38:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     d3a:	2314      	movs	r3, #20
	module->buffer = NULL;
     d3c:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     d3e:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d40:	683b      	ldr	r3, [r7, #0]
     d42:	ae09      	add	r6, sp, #36	; 0x24
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     d44:	0018      	movs	r0, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d46:	9301      	str	r3, [sp, #4]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     d48:	f000 fb40 	bl	13cc <_sercom_get_sercom_inst_index>
     d4c:	2380      	movs	r3, #128	; 0x80
     d4e:	9004      	str	r0, [sp, #16]
	uint32_t pad0 = config->pinmux_pad0;
     d50:	69e0      	ldr	r0, [r4, #28]
     d52:	7033      	strb	r3, [r6, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d54:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d56:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     d58:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d5a:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     d5c:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     d5e:	2800      	cmp	r0, #0
     d60:	d103      	bne.n	d6a <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     d62:	0001      	movs	r1, r0
     d64:	9801      	ldr	r0, [sp, #4]
     d66:	f000 fad7 	bl	1318 <_sercom_get_default_pad>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     d6a:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     d6c:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     d6e:	0c00      	lsrs	r0, r0, #16
     d70:	b2c0      	uxtb	r0, r0
     d72:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     d74:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     d76:	f000 feab 	bl	1ad0 <system_pinmux_pin_set_config>
	if (pad1 == PINMUX_DEFAULT) {
     d7a:	2d00      	cmp	r5, #0
     d7c:	d104      	bne.n	d88 <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     d7e:	2101      	movs	r1, #1
     d80:	9801      	ldr	r0, [sp, #4]
     d82:	f000 fac9 	bl	1318 <_sercom_get_default_pad>
     d86:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     d88:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     d8a:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     d8c:	0c2d      	lsrs	r5, r5, #16
     d8e:	b2e8      	uxtb	r0, r5
     d90:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     d92:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     d94:	f000 fe9c 	bl	1ad0 <system_pinmux_pin_set_config>
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     d98:	8aa3      	ldrh	r3, [r4, #20]
     d9a:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     d9c:	8ae3      	ldrh	r3, [r4, #22]
     d9e:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     da0:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     da2:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     da4:	2a00      	cmp	r2, #0
     da6:	d106      	bne.n	db6 <i2c_master_init+0xf6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     da8:	4b69      	ldr	r3, [pc, #420]	; (f50 <i2c_master_init+0x290>)
     daa:	3202      	adds	r2, #2
     dac:	789b      	ldrb	r3, [r3, #2]
     dae:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     db0:	1e5f      	subs	r7, r3, #1
     db2:	41bb      	sbcs	r3, r7
     db4:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     db6:	68a2      	ldr	r2, [r4, #8]
     db8:	6927      	ldr	r7, [r4, #16]
     dba:	4317      	orrs	r7, r2
     dbc:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     dbe:	1d63      	adds	r3, r4, #5
     dc0:	7fdb      	ldrb	r3, [r3, #31]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d002      	beq.n	dcc <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     dc6:	2380      	movs	r3, #128	; 0x80
     dc8:	05db      	lsls	r3, r3, #23
     dca:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     dcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     dce:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     dd0:	0023      	movs	r3, r4
     dd2:	332c      	adds	r3, #44	; 0x2c
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	2b00      	cmp	r3, #0
     dd8:	d103      	bne.n	de2 <i2c_master_init+0x122>
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	049b      	lsls	r3, r3, #18
     dde:	429a      	cmp	r2, r3
     de0:	d102      	bne.n	de8 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     de2:	2380      	movs	r3, #128	; 0x80
     de4:	051b      	lsls	r3, r3, #20
     de6:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     de8:	0023      	movs	r3, r4
     dea:	332d      	adds	r3, #45	; 0x2d
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	2b00      	cmp	r3, #0
     df0:	d002      	beq.n	df8 <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     df2:	2380      	movs	r3, #128	; 0x80
     df4:	041b      	lsls	r3, r3, #16
     df6:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     df8:	0023      	movs	r3, r4
     dfa:	332e      	adds	r3, #46	; 0x2e
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	2b00      	cmp	r3, #0
     e00:	d002      	beq.n	e08 <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     e02:	2380      	movs	r3, #128	; 0x80
     e04:	03db      	lsls	r3, r3, #15
     e06:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     e08:	9b01      	ldr	r3, [sp, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     e0a:	9804      	ldr	r0, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     e0c:	681b      	ldr	r3, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     e0e:	9a01      	ldr	r2, [sp, #4]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     e10:	431f      	orrs	r7, r3
     e12:	9b01      	ldr	r3, [sp, #4]
	uint32_t fscl        = 1000 * config->baud_rate;
     e14:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     e16:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     e18:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     e1a:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     e1c:	005b      	lsls	r3, r3, #1
     e1e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     e20:	b2c0      	uxtb	r0, r0
     e22:	f000 fdff 	bl	1a24 <system_gclk_chan_get_hz>
	uint32_t fscl        = 1000 * config->baud_rate;
     e26:	6823      	ldr	r3, [r4, #0]
     e28:	00ad      	lsls	r5, r5, #2
     e2a:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     e2c:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     e2e:	9004      	str	r0, [sp, #16]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     e30:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     e32:	f002 fe21 	bl	3a78 <__aeabi_ui2d>
     e36:	0006      	movs	r6, r0
     e38:	0068      	lsls	r0, r5, #1
     e3a:	000f      	movs	r7, r1
     e3c:	f002 fe1c 	bl	3a78 <__aeabi_ui2d>
     e40:	9002      	str	r0, [sp, #8]
     e42:	9103      	str	r1, [sp, #12]
     e44:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     e46:	f002 fe17 	bl	3a78 <__aeabi_ui2d>
     e4a:	4a42      	ldr	r2, [pc, #264]	; (f54 <i2c_master_init+0x294>)
     e4c:	9006      	str	r0, [sp, #24]
     e4e:	9107      	str	r1, [sp, #28]
     e50:	4b41      	ldr	r3, [pc, #260]	; (f58 <i2c_master_init+0x298>)
     e52:	0030      	movs	r0, r6
     e54:	0039      	movs	r1, r7
     e56:	f002 f845 	bl	2ee4 <__aeabi_dmul>
     e5a:	0002      	movs	r2, r0
     e5c:	000b      	movs	r3, r1
     e5e:	9806      	ldr	r0, [sp, #24]
     e60:	9907      	ldr	r1, [sp, #28]
     e62:	f002 f83f 	bl	2ee4 <__aeabi_dmul>
     e66:	2200      	movs	r2, #0
     e68:	4b3c      	ldr	r3, [pc, #240]	; (f5c <i2c_master_init+0x29c>)
     e6a:	f001 f9f7 	bl	225c <__aeabi_dadd>
     e6e:	9006      	str	r0, [sp, #24]
     e70:	9107      	str	r1, [sp, #28]
     e72:	0028      	movs	r0, r5
     e74:	f002 fe00 	bl	3a78 <__aeabi_ui2d>
     e78:	0002      	movs	r2, r0
     e7a:	000b      	movs	r3, r1
     e7c:	9806      	ldr	r0, [sp, #24]
     e7e:	9907      	ldr	r1, [sp, #28]
     e80:	f002 f830 	bl	2ee4 <__aeabi_dmul>
     e84:	0002      	movs	r2, r0
     e86:	000b      	movs	r3, r1
     e88:	0030      	movs	r0, r6
     e8a:	0039      	movs	r1, r7
     e8c:	f002 faaa 	bl	33e4 <__aeabi_dsub>
     e90:	9a02      	ldr	r2, [sp, #8]
     e92:	9b03      	ldr	r3, [sp, #12]
     e94:	f001 f9e2 	bl	225c <__aeabi_dadd>
     e98:	2200      	movs	r2, #0
     e9a:	4b31      	ldr	r3, [pc, #196]	; (f60 <i2c_master_init+0x2a0>)
     e9c:	f002 faa2 	bl	33e4 <__aeabi_dsub>
     ea0:	9a02      	ldr	r2, [sp, #8]
     ea2:	9b03      	ldr	r3, [sp, #12]
     ea4:	f001 fcea 	bl	287c <__aeabi_ddiv>
     ea8:	f002 fdb2 	bl	3a10 <__aeabi_d2iz>
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     eac:	2380      	movs	r3, #128	; 0x80
     eae:	68a2      	ldr	r2, [r4, #8]
	tmp_baud = (int32_t)(div_ceil(
     eb0:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     eb2:	049b      	lsls	r3, r3, #18
     eb4:	429a      	cmp	r2, r3
     eb6:	d141      	bne.n	f3c <i2c_master_init+0x27c>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     eb8:	23fa      	movs	r3, #250	; 0xfa
     eba:	9d05      	ldr	r5, [sp, #20]
     ebc:	009b      	lsls	r3, r3, #2
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     ebe:	0032      	movs	r2, r6
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     ec0:	435d      	muls	r5, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     ec2:	0030      	movs	r0, r6
     ec4:	003b      	movs	r3, r7
     ec6:	0039      	movs	r1, r7
     ec8:	f001 f9c8 	bl	225c <__aeabi_dadd>
     ecc:	0006      	movs	r6, r0
     ece:	0028      	movs	r0, r5
     ed0:	000f      	movs	r7, r1
     ed2:	f002 fdd1 	bl	3a78 <__aeabi_ui2d>
     ed6:	2200      	movs	r2, #0
     ed8:	4b22      	ldr	r3, [pc, #136]	; (f64 <i2c_master_init+0x2a4>)
     eda:	f002 f803 	bl	2ee4 <__aeabi_dmul>
     ede:	0002      	movs	r2, r0
     ee0:	000b      	movs	r3, r1
     ee2:	0030      	movs	r0, r6
     ee4:	0039      	movs	r1, r7
     ee6:	f001 fcc9 	bl	287c <__aeabi_ddiv>
     eea:	2200      	movs	r2, #0
     eec:	4b1c      	ldr	r3, [pc, #112]	; (f60 <i2c_master_init+0x2a0>)
     eee:	f002 fa79 	bl	33e4 <__aeabi_dsub>
     ef2:	f002 fd8d 	bl	3a10 <__aeabi_d2iz>
     ef6:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     ef8:	d018      	beq.n	f2c <i2c_master_init+0x26c>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     efa:	0029      	movs	r1, r5
     efc:	9804      	ldr	r0, [sp, #16]
     efe:	f001 f921 	bl	2144 <__udivsi3>
     f02:	3802      	subs	r0, #2
     f04:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     f06:	9a02      	ldr	r2, [sp, #8]
     f08:	2040      	movs	r0, #64	; 0x40
     f0a:	2aff      	cmp	r2, #255	; 0xff
     f0c:	d80c      	bhi.n	f28 <i2c_master_init+0x268>
     f0e:	2bff      	cmp	r3, #255	; 0xff
     f10:	d80a      	bhi.n	f28 <i2c_master_init+0x268>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     f12:	20ff      	movs	r0, #255	; 0xff
     f14:	0014      	movs	r4, r2
     f16:	0400      	lsls	r0, r0, #16
     f18:	041b      	lsls	r3, r3, #16
     f1a:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     f1c:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     f1e:	0636      	lsls	r6, r6, #24
     f20:	4334      	orrs	r4, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     f22:	9a01      	ldr	r2, [sp, #4]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     f24:	4323      	orrs	r3, r4
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     f26:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     f28:	b00b      	add	sp, #44	; 0x2c
     f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     f2c:	9b04      	ldr	r3, [sp, #16]
     f2e:	0069      	lsls	r1, r5, #1
     f30:	1e48      	subs	r0, r1, #1
     f32:	18c0      	adds	r0, r0, r3
     f34:	f001 f906 	bl	2144 <__udivsi3>
     f38:	1e43      	subs	r3, r0, #1
     f3a:	e7e4      	b.n	f06 <i2c_master_init+0x246>
	int32_t tmp_baudlow_hs = 0;
     f3c:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     f3e:	0033      	movs	r3, r6
     f40:	e7e1      	b.n	f06 <i2c_master_init+0x246>
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	40000400 	.word	0x40000400
     f48:	0000115d 	.word	0x0000115d
     f4c:	200001c4 	.word	0x200001c4
     f50:	41002000 	.word	0x41002000
     f54:	e826d695 	.word	0xe826d695
     f58:	3e112e0b 	.word	0x3e112e0b
     f5c:	40240000 	.word	0x40240000
     f60:	3ff00000 	.word	0x3ff00000
     f64:	40080000 	.word	0x40080000

00000f68 <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     f68:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f6a:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     f6c:	7e19      	ldrb	r1, [r3, #24]
     f6e:	4211      	tst	r1, r2
     f70:	d006      	beq.n	f80 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     f72:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     f74:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     f76:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     f78:	4213      	tst	r3, r2
     f7a:	d10a      	bne.n	f92 <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     f7c:	2000      	movs	r0, #0
     f7e:	e008      	b.n	f92 <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     f80:	8b5a      	ldrh	r2, [r3, #26]
     f82:	0752      	lsls	r2, r2, #29
     f84:	d5fa      	bpl.n	f7c <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f86:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
     f88:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f8a:	6859      	ldr	r1, [r3, #4]
     f8c:	0292      	lsls	r2, r2, #10
     f8e:	430a      	orrs	r2, r1
     f90:	605a      	str	r2, [r3, #4]
}
     f92:	4770      	bx	lr

00000f94 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     f94:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     f96:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     f98:	2601      	movs	r6, #1
     f9a:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f9c:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     f9e:	7e0b      	ldrb	r3, [r1, #24]
     fa0:	4033      	ands	r3, r6
     fa2:	d102      	bne.n	faa <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     fa4:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     fa6:	4225      	tst	r5, r4
     fa8:	d001      	beq.n	fae <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     faa:	2000      	movs	r0, #0
     fac:	e005      	b.n	fba <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
     fae:	3201      	adds	r2, #1
     fb0:	8903      	ldrh	r3, [r0, #8]
     fb2:	b292      	uxth	r2, r2
     fb4:	4293      	cmp	r3, r2
     fb6:	d8f2      	bhi.n	f9e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     fb8:	2012      	movs	r0, #18
}
     fba:	bd70      	pop	{r4, r5, r6, pc}

00000fbc <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     fbc:	2380      	movs	r3, #128	; 0x80
{
     fbe:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     fc0:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     fc2:	02db      	lsls	r3, r3, #11
     fc4:	6862      	ldr	r2, [r4, #4]
     fc6:	4313      	orrs	r3, r2
     fc8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     fca:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     fcc:	f7ff ffe2 	bl	f94 <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     fd0:	2301      	movs	r3, #1
     fd2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     fd4:	bd10      	pop	{r4, pc}
	...

00000fd8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     fda:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     fdc:	884b      	ldrh	r3, [r1, #2]
{
     fde:	0005      	movs	r5, r0
	uint16_t tmp_data_length = packet->data_length;
     fe0:	9301      	str	r3, [sp, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     fe2:	6804      	ldr	r4, [r0, #0]

	_i2c_master_wait_for_sync(module);
     fe4:	f7ff fe66 	bl	cb4 <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
     fe8:	7a7b      	ldrb	r3, [r7, #9]
     fea:	2b00      	cmp	r3, #0
     fec:	d003      	beq.n	ff6 <_i2c_master_write_packet+0x1e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     fee:	7ab9      	ldrb	r1, [r7, #10]
     ff0:	0028      	movs	r0, r5
     ff2:	f7ff ffe3 	bl	fbc <_i2c_master_send_hs_master_code>
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ff6:	6863      	ldr	r3, [r4, #4]
     ff8:	4a24      	ldr	r2, [pc, #144]	; (108c <_i2c_master_write_packet+0xb4>)
     ffa:	4013      	ands	r3, r2
     ffc:	6063      	str	r3, [r4, #4]
     ffe:	7a7a      	ldrb	r2, [r7, #9]
    1000:	883b      	ldrh	r3, [r7, #0]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1002:	7a39      	ldrb	r1, [r7, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1004:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1006:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1008:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
    100a:	2900      	cmp	r1, #0
    100c:	d002      	beq.n	1014 <_i2c_master_write_packet+0x3c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    100e:	2280      	movs	r2, #128	; 0x80
    1010:	0212      	lsls	r2, r2, #8
    1012:	4313      	orrs	r3, r2
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1014:	6263      	str	r3, [r4, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1016:	0028      	movs	r0, r5
    1018:	f7ff ffbc 	bl	f94 <_i2c_master_wait_for_bus>
    101c:	1e06      	subs	r6, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    101e:	d115      	bne.n	104c <_i2c_master_write_packet+0x74>
		tmp_status = _i2c_master_address_response(module);
    1020:	0028      	movs	r0, r5
    1022:	f7ff ffa1 	bl	f68 <_i2c_master_address_response>
    1026:	1e06      	subs	r6, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1028:	d110      	bne.n	104c <_i2c_master_write_packet+0x74>
    102a:	9000      	str	r0, [sp, #0]
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    102c:	9b00      	ldr	r3, [sp, #0]
    102e:	9a01      	ldr	r2, [sp, #4]
    1030:	4293      	cmp	r3, r2
    1032:	d10d      	bne.n	1050 <_i2c_master_write_packet+0x78>
    1034:	2600      	movs	r6, #0
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1036:	7aab      	ldrb	r3, [r5, #10]
    1038:	2b00      	cmp	r3, #0
    103a:	d007      	beq.n	104c <_i2c_master_write_packet+0x74>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    103c:	0028      	movs	r0, r5
    103e:	f7ff fe39 	bl	cb4 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1042:	23c0      	movs	r3, #192	; 0xc0
    1044:	6862      	ldr	r2, [r4, #4]
    1046:	029b      	lsls	r3, r3, #10
    1048:	4313      	orrs	r3, r2
    104a:	6063      	str	r3, [r4, #4]
		}
	}

	return tmp_status;
}
    104c:	0030      	movs	r0, r6
    104e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1050:	2220      	movs	r2, #32
    1052:	8b63      	ldrh	r3, [r4, #26]
    1054:	4213      	tst	r3, r2
    1056:	d016      	beq.n	1086 <_i2c_master_write_packet+0xae>
			_i2c_master_wait_for_sync(module);
    1058:	0028      	movs	r0, r5
    105a:	f7ff fe2b 	bl	cb4 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	9a00      	ldr	r2, [sp, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
    1062:	0028      	movs	r0, r5
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1064:	5c9a      	ldrb	r2, [r3, r2]
    1066:	0023      	movs	r3, r4
    1068:	3328      	adds	r3, #40	; 0x28
    106a:	701a      	strb	r2, [r3, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
    106c:	f7ff ff92 	bl	f94 <_i2c_master_wait_for_bus>
    1070:	1e06      	subs	r6, r0, #0
			if (tmp_status != STATUS_OK) {
    1072:	d1e0      	bne.n	1036 <_i2c_master_write_packet+0x5e>
    1074:	9a00      	ldr	r2, [sp, #0]
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1076:	8b63      	ldrh	r3, [r4, #26]
    1078:	3201      	adds	r2, #1
    107a:	9200      	str	r2, [sp, #0]
    107c:	2204      	movs	r2, #4
    107e:	4213      	tst	r3, r2
    1080:	d0d4      	beq.n	102c <_i2c_master_write_packet+0x54>
				tmp_status = STATUS_ERR_OVERFLOW;
    1082:	261e      	movs	r6, #30
    1084:	e7d7      	b.n	1036 <_i2c_master_write_packet+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
    1086:	2641      	movs	r6, #65	; 0x41
    1088:	e7e0      	b.n	104c <_i2c_master_write_packet+0x74>
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	fffbffff 	.word	0xfffbffff

00001090 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1090:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1092:	8b82      	ldrh	r2, [r0, #28]
{
    1094:	0003      	movs	r3, r0
		return STATUS_BUSY;
    1096:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
    1098:	2a00      	cmp	r2, #0
    109a:	d105      	bne.n	10a8 <i2c_master_write_packet_wait+0x18>
	}
#endif

	module->send_stop = true;
    109c:	3201      	adds	r2, #1
    109e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    10a0:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    10a2:	0018      	movs	r0, r3
    10a4:	f7ff ff98 	bl	fd8 <_i2c_master_write_packet>
}
    10a8:	bd10      	pop	{r4, pc}

000010aa <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    10aa:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    10ac:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    10ae:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    10b0:	421a      	tst	r2, r3
    10b2:	d1fc      	bne.n	10ae <_i2c_master_wait_for_sync+0x4>
}
    10b4:	4770      	bx	lr

000010b6 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    10b6:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10b8:	6805      	ldr	r5, [r0, #0]
{
    10ba:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    10bc:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    10be:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    10c0:	8b83      	ldrh	r3, [r0, #28]
    10c2:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
    10c4:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
    10c6:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    10c8:	3b01      	subs	r3, #1
    10ca:	b29b      	uxth	r3, r3
    10cc:	8383      	strh	r3, [r0, #28]
    10ce:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
    10d0:	0112      	lsls	r2, r2, #4
    10d2:	d50a      	bpl.n	10ea <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
    10d4:	2b00      	cmp	r3, #0
    10d6:	d00d      	beq.n	10f4 <_i2c_master_read+0x3e>
    10d8:	8b83      	ldrh	r3, [r0, #28]
    10da:	2b01      	cmp	r3, #1
    10dc:	d10a      	bne.n	10f4 <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    10de:	2380      	movs	r3, #128	; 0x80
    10e0:	686a      	ldr	r2, [r5, #4]
    10e2:	02db      	lsls	r3, r3, #11
    10e4:	4313      	orrs	r3, r2
    10e6:	606b      	str	r3, [r5, #4]
    10e8:	e004      	b.n	10f4 <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
    10ea:	2b00      	cmp	r3, #0
    10ec:	d002      	beq.n	10f4 <_i2c_master_read+0x3e>
    10ee:	8b83      	ldrh	r3, [r0, #28]
    10f0:	2b00      	cmp	r3, #0
    10f2:	d0f4      	beq.n	10de <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
    10f4:	8ba3      	ldrh	r3, [r4, #28]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d10a      	bne.n	1110 <_i2c_master_read+0x5a>
		if (module->send_stop) {
    10fa:	7aa3      	ldrb	r3, [r4, #10]
    10fc:	2b00      	cmp	r3, #0
    10fe:	d007      	beq.n	1110 <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1100:	0020      	movs	r0, r4
    1102:	f7ff ffd2 	bl	10aa <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1106:	23c0      	movs	r3, #192	; 0xc0
    1108:	686a      	ldr	r2, [r5, #4]
    110a:	029b      	lsls	r3, r3, #10
    110c:	4313      	orrs	r3, r2
    110e:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1110:	0020      	movs	r0, r4
    1112:	f7ff ffca 	bl	10aa <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1116:	6a23      	ldr	r3, [r4, #32]
    1118:	3528      	adds	r5, #40	; 0x28
    111a:	199e      	adds	r6, r3, r6
    111c:	782b      	ldrb	r3, [r5, #0]
    111e:	b2db      	uxtb	r3, r3
    1120:	7033      	strb	r3, [r6, #0]
}
    1122:	bd70      	pop	{r4, r5, r6, pc}

00001124 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1124:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1126:	6806      	ldr	r6, [r0, #0]
{
    1128:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    112a:	8b73      	ldrh	r3, [r6, #26]
    112c:	075b      	lsls	r3, r3, #29
    112e:	d503      	bpl.n	1138 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1130:	231e      	movs	r3, #30
    1132:	3406      	adds	r4, #6
    1134:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1136:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1138:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    113a:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
    113c:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
    113e:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
    1140:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
    1142:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
    1144:	3b01      	subs	r3, #1
    1146:	b29b      	uxth	r3, r3
    1148:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    114a:	f7ff ffae 	bl	10aa <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    114e:	6a23      	ldr	r3, [r4, #32]
    1150:	195d      	adds	r5, r3, r5
    1152:	782b      	ldrb	r3, [r5, #0]
    1154:	b2db      	uxtb	r3, r3
    1156:	7033      	strb	r3, [r6, #0]
    1158:	e7ed      	b.n	1136 <_i2c_master_write+0x12>
	...

0000115c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    115e:	4b5e      	ldr	r3, [pc, #376]	; (12d8 <_i2c_master_interrupt_handler+0x17c>)
    1160:	0080      	lsls	r0, r0, #2
    1162:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1164:	6825      	ldr	r5, [r4, #0]
    1166:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1168:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    116a:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
    116c:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    116e:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
    1170:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1172:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1174:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1176:	2a00      	cmp	r2, #0
    1178:	d12e      	bne.n	11d8 <_i2c_master_interrupt_handler+0x7c>
    117a:	8ba2      	ldrh	r2, [r4, #28]
    117c:	2a00      	cmp	r2, #0
    117e:	d02b      	beq.n	11d8 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1180:	2301      	movs	r3, #1
    1182:	7e2a      	ldrb	r2, [r5, #24]
    1184:	421a      	tst	r2, r3
    1186:	d006      	beq.n	1196 <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1188:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    118a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    118c:	8b6b      	ldrh	r3, [r5, #26]
    118e:	4013      	ands	r3, r2
    1190:	d010      	beq.n	11b4 <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1192:	2341      	movs	r3, #65	; 0x41
    1194:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
    1196:	8ba3      	ldrh	r3, [r4, #28]
    1198:	b29b      	uxth	r3, r3
    119a:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    119c:	7ff3      	ldrb	r3, [r6, #31]
    119e:	2b05      	cmp	r3, #5
    11a0:	d13c      	bne.n	121c <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    11a2:	1d63      	adds	r3, r4, #5
    11a4:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
    11a6:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    11a8:	2b00      	cmp	r3, #0
    11aa:	d000      	beq.n	11ae <_i2c_master_interrupt_handler+0x52>
    11ac:	e08a      	b.n	12c4 <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
    11ae:	f7ff ffb9 	bl	1124 <_i2c_master_write>
    11b2:	e033      	b.n	121c <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    11b4:	8b6a      	ldrh	r2, [r5, #26]
    11b6:	0752      	lsls	r2, r2, #29
    11b8:	d5ed      	bpl.n	1196 <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    11ba:	2218      	movs	r2, #24
    11bc:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
    11be:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    11c0:	7aa3      	ldrb	r3, [r4, #10]
    11c2:	2b00      	cmp	r3, #0
    11c4:	d0e7      	beq.n	1196 <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
    11c6:	0020      	movs	r0, r4
    11c8:	f7ff ff6f 	bl	10aa <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    11cc:	23c0      	movs	r3, #192	; 0xc0
    11ce:	686a      	ldr	r2, [r5, #4]
    11d0:	029b      	lsls	r3, r3, #10
    11d2:	4313      	orrs	r3, r2
    11d4:	606b      	str	r3, [r5, #4]
    11d6:	e7de      	b.n	1196 <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    11d8:	8b62      	ldrh	r2, [r4, #26]
    11da:	2a00      	cmp	r2, #0
    11dc:	d05f      	beq.n	129e <_i2c_master_interrupt_handler+0x142>
    11de:	8ba2      	ldrh	r2, [r4, #28]
    11e0:	2a00      	cmp	r2, #0
    11e2:	d15c      	bne.n	129e <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
    11e4:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    11e6:	2a05      	cmp	r2, #5
    11e8:	d159      	bne.n	129e <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    11ea:	1d62      	adds	r2, r4, #5
    11ec:	7fd2      	ldrb	r2, [r2, #31]
    11ee:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
    11f0:	2a00      	cmp	r2, #0
    11f2:	d154      	bne.n	129e <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
    11f4:	2303      	movs	r3, #3
    11f6:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    11f8:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
    11fa:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
    11fc:	7aa3      	ldrb	r3, [r4, #10]
    11fe:	2b00      	cmp	r3, #0
    1200:	d04a      	beq.n	1298 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
    1202:	0020      	movs	r0, r4
    1204:	f7ff ff51 	bl	10aa <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1208:	23c0      	movs	r3, #192	; 0xc0
    120a:	686a      	ldr	r2, [r5, #4]
    120c:	029b      	lsls	r3, r3, #10
    120e:	4313      	orrs	r3, r2
    1210:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1212:	07fb      	lsls	r3, r7, #31
    1214:	d502      	bpl.n	121c <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1216:	68e3      	ldr	r3, [r4, #12]
    1218:	0020      	movs	r0, r4
    121a:	4798      	blx	r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    121c:	8b63      	ldrh	r3, [r4, #26]
    121e:	2b00      	cmp	r3, #0
    1220:	d01b      	beq.n	125a <_i2c_master_interrupt_handler+0xfe>
    1222:	8ba3      	ldrh	r3, [r4, #28]
    1224:	2b00      	cmp	r3, #0
    1226:	d118      	bne.n	125a <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
    1228:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    122a:	2b05      	cmp	r3, #5
    122c:	d115      	bne.n	125a <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    122e:	1d63      	adds	r3, r4, #5
    1230:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
    1232:	2a01      	cmp	r2, #1
    1234:	d111      	bne.n	125a <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1236:	7e29      	ldrb	r1, [r5, #24]
    1238:	3201      	adds	r2, #1
    123a:	4211      	tst	r1, r2
    123c:	d000      	beq.n	1240 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    123e:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1240:	2203      	movs	r2, #3
    1242:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1244:	2200      	movs	r2, #0
    1246:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
    1248:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    124a:	07ba      	lsls	r2, r7, #30
    124c:	d53d      	bpl.n	12ca <_i2c_master_interrupt_handler+0x16e>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    124e:	7fda      	ldrb	r2, [r3, #31]
    1250:	2a01      	cmp	r2, #1
    1252:	d13a      	bne.n	12ca <_i2c_master_interrupt_handler+0x16e>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1254:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1256:	0020      	movs	r0, r4
    1258:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    125a:	7ff3      	ldrb	r3, [r6, #31]
    125c:	2b05      	cmp	r3, #5
    125e:	d01a      	beq.n	1296 <_i2c_master_interrupt_handler+0x13a>
    1260:	7ff3      	ldrb	r3, [r6, #31]
    1262:	2b00      	cmp	r3, #0
    1264:	d017      	beq.n	1296 <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1266:	2303      	movs	r3, #3
    1268:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    126a:	2300      	movs	r3, #0
    126c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    126e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1270:	7ff3      	ldrb	r3, [r6, #31]
    1272:	2b41      	cmp	r3, #65	; 0x41
    1274:	d00a      	beq.n	128c <_i2c_master_interrupt_handler+0x130>
    1276:	7aa3      	ldrb	r3, [r4, #10]
    1278:	2b00      	cmp	r3, #0
    127a:	d007      	beq.n	128c <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    127c:	0020      	movs	r0, r4
    127e:	f7ff ff14 	bl	10aa <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1282:	23e0      	movs	r3, #224	; 0xe0
    1284:	686a      	ldr	r2, [r5, #4]
    1286:	02db      	lsls	r3, r3, #11
    1288:	4313      	orrs	r3, r2
    128a:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    128c:	077b      	lsls	r3, r7, #29
    128e:	d502      	bpl.n	1296 <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1290:	6963      	ldr	r3, [r4, #20]
    1292:	0020      	movs	r0, r4
    1294:	4798      	blx	r3
		}
	}
}
    1296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1298:	2301      	movs	r3, #1
    129a:	762b      	strb	r3, [r5, #24]
    129c:	e7b9      	b.n	1212 <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    129e:	8b62      	ldrh	r2, [r4, #26]
    12a0:	2a00      	cmp	r2, #0
    12a2:	d0bb      	beq.n	121c <_i2c_master_interrupt_handler+0xc0>
    12a4:	8ba2      	ldrh	r2, [r4, #28]
    12a6:	2a00      	cmp	r2, #0
    12a8:	d0b8      	beq.n	121c <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    12aa:	8b6a      	ldrh	r2, [r5, #26]
    12ac:	0692      	lsls	r2, r2, #26
    12ae:	d500      	bpl.n	12b2 <_i2c_master_interrupt_handler+0x156>
    12b0:	e777      	b.n	11a2 <_i2c_master_interrupt_handler+0x46>
    12b2:	2b00      	cmp	r3, #0
    12b4:	d003      	beq.n	12be <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    12b6:	8ba3      	ldrh	r3, [r4, #28]
    12b8:	2b01      	cmp	r3, #1
    12ba:	d100      	bne.n	12be <_i2c_master_interrupt_handler+0x162>
    12bc:	e771      	b.n	11a2 <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
    12be:	2341      	movs	r3, #65	; 0x41
    12c0:	77f3      	strb	r3, [r6, #31]
    12c2:	e7ab      	b.n	121c <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
    12c4:	f7ff fef7 	bl	10b6 <_i2c_master_read>
    12c8:	e7a8      	b.n	121c <_i2c_master_interrupt_handler+0xc0>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    12ca:	07fa      	lsls	r2, r7, #31
    12cc:	d5c5      	bpl.n	125a <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    12ce:	7fdb      	ldrb	r3, [r3, #31]
    12d0:	2b00      	cmp	r3, #0
    12d2:	d1c2      	bne.n	125a <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    12d4:	68e3      	ldr	r3, [r4, #12]
    12d6:	e7be      	b.n	1256 <_i2c_master_interrupt_handler+0xfa>
    12d8:	200001c4 	.word	0x200001c4

000012dc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    12dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    12de:	4c0d      	ldr	r4, [pc, #52]	; (1314 <sercom_set_gclk_generator+0x38>)
{
    12e0:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    12e2:	7823      	ldrb	r3, [r4, #0]
    12e4:	2b00      	cmp	r3, #0
    12e6:	d001      	beq.n	12ec <sercom_set_gclk_generator+0x10>
    12e8:	2900      	cmp	r1, #0
    12ea:	d00c      	beq.n	1306 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    12ec:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    12ee:	200d      	movs	r0, #13
		gclk_chan_conf.source_generator = generator_source;
    12f0:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    12f2:	f000 fb8b 	bl	1a0c <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    12f6:	200d      	movs	r0, #13
    12f8:	f000 fb4c 	bl	1994 <system_gclk_chan_enable>

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    12fc:	2301      	movs	r3, #1

		return STATUS_OK;
    12fe:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    1300:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    1302:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1304:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
    1306:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    1308:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
    130a:	42ab      	cmp	r3, r5
    130c:	d0fa      	beq.n	1304 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
    130e:	201d      	movs	r0, #29
    1310:	e7f8      	b.n	1304 <sercom_set_gclk_generator+0x28>
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	2000006d 	.word	0x2000006d

00001318 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1318:	4a1d      	ldr	r2, [pc, #116]	; (1390 <_sercom_get_default_pad+0x78>)
{
    131a:	0003      	movs	r3, r0
    131c:	b500      	push	{lr}
    131e:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
    1320:	4293      	cmp	r3, r2
    1322:	d013      	beq.n	134c <_sercom_get_default_pad+0x34>
    1324:	4a1b      	ldr	r2, [pc, #108]	; (1394 <_sercom_get_default_pad+0x7c>)
    1326:	4293      	cmp	r3, r2
    1328:	d01d      	beq.n	1366 <_sercom_get_default_pad+0x4e>
    132a:	4a1b      	ldr	r2, [pc, #108]	; (1398 <_sercom_get_default_pad+0x80>)
    132c:	4293      	cmp	r3, r2
    132e:	d127      	bne.n	1380 <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1330:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1332:	2903      	cmp	r1, #3
    1334:	d804      	bhi.n	1340 <_sercom_get_default_pad+0x28>
    1336:	f000 fefb 	bl	2130 <__gnu_thumb1_case_uqi>
    133a:	0225      	.short	0x0225
    133c:	0705      	.short	0x0705
    133e:	4b17      	ldr	r3, [pc, #92]	; (139c <_sercom_get_default_pad+0x84>)
}
    1340:	0018      	movs	r0, r3
    1342:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1344:	4b16      	ldr	r3, [pc, #88]	; (13a0 <_sercom_get_default_pad+0x88>)
    1346:	e7fb      	b.n	1340 <_sercom_get_default_pad+0x28>
    1348:	4b16      	ldr	r3, [pc, #88]	; (13a4 <_sercom_get_default_pad+0x8c>)
    134a:	e7f9      	b.n	1340 <_sercom_get_default_pad+0x28>
	return 0;
    134c:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    134e:	2903      	cmp	r1, #3
    1350:	d8f6      	bhi.n	1340 <_sercom_get_default_pad+0x28>
    1352:	f000 feed 	bl	2130 <__gnu_thumb1_case_uqi>
    1356:	0219      	.short	0x0219
    1358:	0604      	.short	0x0604
    135a:	4b13      	ldr	r3, [pc, #76]	; (13a8 <_sercom_get_default_pad+0x90>)
    135c:	e7f0      	b.n	1340 <_sercom_get_default_pad+0x28>
    135e:	4b13      	ldr	r3, [pc, #76]	; (13ac <_sercom_get_default_pad+0x94>)
    1360:	e7ee      	b.n	1340 <_sercom_get_default_pad+0x28>
    1362:	4b13      	ldr	r3, [pc, #76]	; (13b0 <_sercom_get_default_pad+0x98>)
    1364:	e7ec      	b.n	1340 <_sercom_get_default_pad+0x28>
	return 0;
    1366:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1368:	2903      	cmp	r1, #3
    136a:	d8e9      	bhi.n	1340 <_sercom_get_default_pad+0x28>
    136c:	f000 fee0 	bl	2130 <__gnu_thumb1_case_uqi>
    1370:	0604020e 	.word	0x0604020e
    1374:	4b0f      	ldr	r3, [pc, #60]	; (13b4 <_sercom_get_default_pad+0x9c>)
    1376:	e7e3      	b.n	1340 <_sercom_get_default_pad+0x28>
    1378:	4b0f      	ldr	r3, [pc, #60]	; (13b8 <_sercom_get_default_pad+0xa0>)
    137a:	e7e1      	b.n	1340 <_sercom_get_default_pad+0x28>
    137c:	4b0f      	ldr	r3, [pc, #60]	; (13bc <_sercom_get_default_pad+0xa4>)
    137e:	e7df      	b.n	1340 <_sercom_get_default_pad+0x28>
	return 0;
    1380:	2300      	movs	r3, #0
    1382:	e7dd      	b.n	1340 <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1384:	4b0e      	ldr	r3, [pc, #56]	; (13c0 <_sercom_get_default_pad+0xa8>)
    1386:	e7db      	b.n	1340 <_sercom_get_default_pad+0x28>
    1388:	4b0e      	ldr	r3, [pc, #56]	; (13c4 <_sercom_get_default_pad+0xac>)
    138a:	e7d9      	b.n	1340 <_sercom_get_default_pad+0x28>
    138c:	4b0e      	ldr	r3, [pc, #56]	; (13c8 <_sercom_get_default_pad+0xb0>)
    138e:	e7d7      	b.n	1340 <_sercom_get_default_pad+0x28>
    1390:	42000c00 	.word	0x42000c00
    1394:	42001000 	.word	0x42001000
    1398:	42000800 	.word	0x42000800
    139c:	00050003 	.word	0x00050003
    13a0:	00060003 	.word	0x00060003
    13a4:	00070003 	.word	0x00070003
    13a8:	00170002 	.word	0x00170002
    13ac:	001e0003 	.word	0x001e0003
    13b0:	001f0003 	.word	0x001f0003
    13b4:	00170003 	.word	0x00170003
    13b8:	00100003 	.word	0x00100003
    13bc:	00190003 	.word	0x00190003
    13c0:	00040003 	.word	0x00040003
    13c4:	00160002 	.word	0x00160002
    13c8:	00160003 	.word	0x00160003

000013cc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    13cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    13ce:	4b0c      	ldr	r3, [pc, #48]	; (1400 <_sercom_get_sercom_inst_index+0x34>)
{
    13d0:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    13d2:	0018      	movs	r0, r3
    13d4:	aa01      	add	r2, sp, #4
    13d6:	c870      	ldmia	r0!, {r4, r5, r6}
    13d8:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    13da:	9a01      	ldr	r2, [sp, #4]
    13dc:	428a      	cmp	r2, r1
    13de:	d00a      	beq.n	13f6 <_sercom_get_sercom_inst_index+0x2a>
    13e0:	685a      	ldr	r2, [r3, #4]
    13e2:	428a      	cmp	r2, r1
    13e4:	d009      	beq.n	13fa <_sercom_get_sercom_inst_index+0x2e>
    13e6:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    13e8:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    13ea:	428b      	cmp	r3, r1
    13ec:	d101      	bne.n	13f2 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13ee:	3002      	adds	r0, #2
			return i;
    13f0:	b2c0      	uxtb	r0, r0
}
    13f2:	b004      	add	sp, #16
    13f4:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13f6:	2000      	movs	r0, #0
    13f8:	e7fa      	b.n	13f0 <_sercom_get_sercom_inst_index+0x24>
    13fa:	2001      	movs	r0, #1
    13fc:	e7f8      	b.n	13f0 <_sercom_get_sercom_inst_index+0x24>
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	00003bd4 	.word	0x00003bd4

00001404 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1404:	4770      	bx	lr
	...

00001408 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1408:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    140a:	4e09      	ldr	r6, [pc, #36]	; (1430 <_sercom_set_handler+0x28>)
    140c:	4b09      	ldr	r3, [pc, #36]	; (1434 <_sercom_set_handler+0x2c>)
    140e:	7832      	ldrb	r2, [r6, #0]
    1410:	2a00      	cmp	r2, #0
    1412:	d109      	bne.n	1428 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    1414:	4c08      	ldr	r4, [pc, #32]	; (1438 <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1416:	4d09      	ldr	r5, [pc, #36]	; (143c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1418:	6022      	str	r2, [r4, #0]
    141a:	6062      	str	r2, [r4, #4]
    141c:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
    141e:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1420:	601d      	str	r5, [r3, #0]
    1422:	605d      	str	r5, [r3, #4]
    1424:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
    1426:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1428:	0080      	lsls	r0, r0, #2
    142a:	5019      	str	r1, [r3, r0]
}
    142c:	bd70      	pop	{r4, r5, r6, pc}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	2000006f 	.word	0x2000006f
    1434:	20000070 	.word	0x20000070
    1438:	200001c4 	.word	0x200001c4
    143c:	00001405 	.word	0x00001405

00001440 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1440:	2309      	movs	r3, #9
{
    1442:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1444:	ac01      	add	r4, sp, #4
    1446:	7023      	strb	r3, [r4, #0]
    1448:	3301      	adds	r3, #1
    144a:	7063      	strb	r3, [r4, #1]
    144c:	3301      	adds	r3, #1
    144e:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1450:	f7ff ffbc 	bl	13cc <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1454:	5620      	ldrsb	r0, [r4, r0]
}
    1456:	bd16      	pop	{r1, r2, r4, pc}

00001458 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1458:	b510      	push	{r4, lr}
    145a:	4b02      	ldr	r3, [pc, #8]	; (1464 <SERCOM0_Handler+0xc>)
    145c:	2000      	movs	r0, #0
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	4798      	blx	r3
    1462:	bd10      	pop	{r4, pc}
    1464:	20000070 	.word	0x20000070

00001468 <SERCOM1_Handler>:
    1468:	b510      	push	{r4, lr}
    146a:	4b02      	ldr	r3, [pc, #8]	; (1474 <SERCOM1_Handler+0xc>)
    146c:	2001      	movs	r0, #1
    146e:	685b      	ldr	r3, [r3, #4]
    1470:	4798      	blx	r3
    1472:	bd10      	pop	{r4, pc}
    1474:	20000070 	.word	0x20000070

00001478 <SERCOM2_Handler>:
    1478:	b510      	push	{r4, lr}
    147a:	4b02      	ldr	r3, [pc, #8]	; (1484 <SERCOM2_Handler+0xc>)
    147c:	2002      	movs	r0, #2
    147e:	689b      	ldr	r3, [r3, #8]
    1480:	4798      	blx	r3
    1482:	bd10      	pop	{r4, pc}
    1484:	20000070 	.word	0x20000070

00001488 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1488:	2310      	movs	r3, #16
    148a:	4902      	ldr	r1, [pc, #8]	; (1494 <_system_dfll_wait_for_sync+0xc>)
    148c:	68ca      	ldr	r2, [r1, #12]
    148e:	421a      	tst	r2, r3
    1490:	d0fc      	beq.n	148c <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    1492:	4770      	bx	lr
    1494:	40000800 	.word	0x40000800

00001498 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1498:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
    149a:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
    149c:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    149e:	4d0a      	ldr	r5, [pc, #40]	; (14c8 <system_clock_source_enable.part.0+0x30>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    14a0:	4c0a      	ldr	r4, [pc, #40]	; (14cc <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    14a2:	682b      	ldr	r3, [r5, #0]
    14a4:	4313      	orrs	r3, r2
    14a6:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    14a8:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    14aa:	f7ff ffed 	bl	1488 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    14ae:	68ab      	ldr	r3, [r5, #8]
    14b0:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    14b2:	686b      	ldr	r3, [r5, #4]
    14b4:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    14b6:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    14b8:	f7ff ffe6 	bl	1488 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    14bc:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    14be:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    14c0:	b29b      	uxth	r3, r3
    14c2:	84a3      	strh	r3, [r4, #36]	; 0x24
}
    14c4:	bd70      	pop	{r4, r5, r6, pc}
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	2000007c 	.word	0x2000007c
    14cc:	40000800 	.word	0x40000800

000014d0 <system_clock_source_get_hz>:
{
    14d0:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    14d2:	2808      	cmp	r0, #8
    14d4:	d806      	bhi.n	14e4 <system_clock_source_get_hz+0x14>
    14d6:	f000 fe2b 	bl	2130 <__gnu_thumb1_case_uqi>
    14da:	0508      	.short	0x0508
    14dc:	12303005 	.word	0x12303005
    14e0:	150b      	.short	0x150b
    14e2:	28          	.byte	0x28
    14e3:	00          	.byte	0x00
		return 0;
    14e4:	2400      	movs	r4, #0
}
    14e6:	0020      	movs	r0, r4
    14e8:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    14ea:	4b16      	ldr	r3, [pc, #88]	; (1544 <system_clock_source_get_hz+0x74>)
    14ec:	691c      	ldr	r4, [r3, #16]
    14ee:	e7fa      	b.n	14e6 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    14f0:	4b15      	ldr	r3, [pc, #84]	; (1548 <system_clock_source_get_hz+0x78>)
    14f2:	4c16      	ldr	r4, [pc, #88]	; (154c <system_clock_source_get_hz+0x7c>)
    14f4:	6a1b      	ldr	r3, [r3, #32]
    14f6:	059b      	lsls	r3, r3, #22
    14f8:	0f9b      	lsrs	r3, r3, #30
    14fa:	40dc      	lsrs	r4, r3
    14fc:	e7f3      	b.n	14e6 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    14fe:	4b11      	ldr	r3, [pc, #68]	; (1544 <system_clock_source_get_hz+0x74>)
    1500:	695c      	ldr	r4, [r3, #20]
    1502:	e7f0      	b.n	14e6 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1504:	4d0f      	ldr	r5, [pc, #60]	; (1544 <system_clock_source_get_hz+0x74>)
			return 0;
    1506:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1508:	682b      	ldr	r3, [r5, #0]
    150a:	079b      	lsls	r3, r3, #30
    150c:	d5eb      	bpl.n	14e6 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    150e:	f7ff ffbb 	bl	1488 <_system_dfll_wait_for_sync>
		switch(_system_clock_inst.dfll.control &
    1512:	2224      	movs	r2, #36	; 0x24
    1514:	682b      	ldr	r3, [r5, #0]
    1516:	4013      	ands	r3, r2
    1518:	2b04      	cmp	r3, #4
    151a:	d111      	bne.n	1540 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    151c:	0020      	movs	r0, r4
    151e:	f000 fa81 	bl	1a24 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    1522:	68ac      	ldr	r4, [r5, #8]
    1524:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1526:	4344      	muls	r4, r0
    1528:	e7dd      	b.n	14e6 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    152a:	4b09      	ldr	r3, [pc, #36]	; (1550 <system_clock_source_get_hz+0x80>)
			return 0;
    152c:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    152e:	781b      	ldrb	r3, [r3, #0]
    1530:	075b      	lsls	r3, r3, #29
    1532:	d5d8      	bpl.n	14e6 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    1534:	4b03      	ldr	r3, [pc, #12]	; (1544 <system_clock_source_get_hz+0x74>)
    1536:	68dc      	ldr	r4, [r3, #12]
    1538:	e7d5      	b.n	14e6 <system_clock_source_get_hz+0x16>
		return 32768UL;
    153a:	2480      	movs	r4, #128	; 0x80
    153c:	0224      	lsls	r4, r4, #8
    153e:	e7d2      	b.n	14e6 <system_clock_source_get_hz+0x16>
			return 48000000UL;
    1540:	4c04      	ldr	r4, [pc, #16]	; (1554 <system_clock_source_get_hz+0x84>)
    1542:	e7d0      	b.n	14e6 <system_clock_source_get_hz+0x16>
    1544:	2000007c 	.word	0x2000007c
    1548:	40000800 	.word	0x40000800
    154c:	007a1200 	.word	0x007a1200
    1550:	40000850 	.word	0x40000850
    1554:	02dc6c00 	.word	0x02dc6c00

00001558 <system_clock_source_osc8m_set_config>:
{
    1558:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
    155a:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    155c:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
    155e:	7845      	ldrb	r5, [r0, #1]
    1560:	2001      	movs	r0, #1
    1562:	2640      	movs	r6, #64	; 0x40
    1564:	4005      	ands	r5, r0
    1566:	4020      	ands	r0, r4
    1568:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    156a:	4908      	ldr	r1, [pc, #32]	; (158c <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    156c:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    156e:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    1570:	01c0      	lsls	r0, r0, #7
    1572:	43b3      	bics	r3, r6
    1574:	432b      	orrs	r3, r5
    1576:	43a3      	bics	r3, r4
    1578:	4303      	orrs	r3, r0
    157a:	2003      	movs	r0, #3
    157c:	4002      	ands	r2, r0
    157e:	4804      	ldr	r0, [pc, #16]	; (1590 <system_clock_source_osc8m_set_config+0x38>)
    1580:	0212      	lsls	r2, r2, #8
    1582:	4003      	ands	r3, r0
    1584:	4313      	orrs	r3, r2
    1586:	620b      	str	r3, [r1, #32]
}
    1588:	bd70      	pop	{r4, r5, r6, pc}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	40000800 	.word	0x40000800
    1590:	fffffcff 	.word	0xfffffcff

00001594 <system_clock_source_osc32k_set_config>:
{
    1594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1596:	4f18      	ldr	r7, [pc, #96]	; (15f8 <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
    1598:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    159a:	69bb      	ldr	r3, [r7, #24]
    159c:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
    159e:	7803      	ldrb	r3, [r0, #0]
    15a0:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
    15a2:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
    15a4:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
    15a6:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    15a8:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    15aa:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
    15ac:	2201      	movs	r2, #1
    15ae:	4399      	bics	r1, r3
    15b0:	2308      	movs	r3, #8
    15b2:	7880      	ldrb	r0, [r0, #2]
    15b4:	4016      	ands	r6, r2
    15b6:	4010      	ands	r0, r2
    15b8:	0080      	lsls	r0, r0, #2
    15ba:	4308      	orrs	r0, r1
    15bc:	4398      	bics	r0, r3
    15be:	00f6      	lsls	r6, r6, #3
    15c0:	4306      	orrs	r6, r0
    15c2:	4015      	ands	r5, r2
    15c4:	01a8      	lsls	r0, r5, #6
    15c6:	0035      	movs	r5, r6
    15c8:	3338      	adds	r3, #56	; 0x38
    15ca:	439d      	bics	r5, r3
    15cc:	4305      	orrs	r5, r0
    15ce:	4014      	ands	r4, r2
    15d0:	01e3      	lsls	r3, r4, #7
    15d2:	2080      	movs	r0, #128	; 0x80
    15d4:	002c      	movs	r4, r5
    15d6:	4384      	bics	r4, r0
    15d8:	431c      	orrs	r4, r3
    15da:	2307      	movs	r3, #7
    15dc:	9901      	ldr	r1, [sp, #4]
    15de:	400b      	ands	r3, r1
    15e0:	4906      	ldr	r1, [pc, #24]	; (15fc <system_clock_source_osc32k_set_config+0x68>)
    15e2:	021b      	lsls	r3, r3, #8
    15e4:	4021      	ands	r1, r4
    15e6:	4319      	orrs	r1, r3
    15e8:	9b00      	ldr	r3, [sp, #0]
    15ea:	401a      	ands	r2, r3
    15ec:	0313      	lsls	r3, r2, #12
    15ee:	4a04      	ldr	r2, [pc, #16]	; (1600 <system_clock_source_osc32k_set_config+0x6c>)
    15f0:	400a      	ands	r2, r1
    15f2:	431a      	orrs	r2, r3
    15f4:	61ba      	str	r2, [r7, #24]
}
    15f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    15f8:	40000800 	.word	0x40000800
    15fc:	fffff8ff 	.word	0xfffff8ff
    1600:	ffffefff 	.word	0xffffefff

00001604 <system_clock_source_dfll_set_config>:
{
    1604:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1606:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1608:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    160a:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    160c:	059b      	lsls	r3, r3, #22
    160e:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1610:	0c12      	lsrs	r2, r2, #16
    1612:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    1614:	4b17      	ldr	r3, [pc, #92]	; (1674 <system_clock_source_dfll_set_config+0x70>)
    1616:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
    1618:	79c1      	ldrb	r1, [r0, #7]
    161a:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
    161c:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    161e:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
    1620:	8841      	ldrh	r1, [r0, #2]
    1622:	4321      	orrs	r1, r4
    1624:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1626:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1628:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    162a:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    162c:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
    162e:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1630:	2c04      	cmp	r4, #4
    1632:	d10d      	bne.n	1650 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1634:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1636:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1638:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    163a:	430a      	orrs	r2, r1
    163c:	89c1      	ldrh	r1, [r0, #14]
    163e:	480e      	ldr	r0, [pc, #56]	; (1678 <system_clock_source_dfll_set_config+0x74>)
    1640:	0409      	lsls	r1, r1, #16
    1642:	4001      	ands	r1, r0
    1644:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    1646:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1648:	681a      	ldr	r2, [r3, #0]
    164a:	4314      	orrs	r4, r2
    164c:	601c      	str	r4, [r3, #0]
}
    164e:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1650:	2c20      	cmp	r4, #32
    1652:	d1fc      	bne.n	164e <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1654:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1656:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1658:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    165a:	430a      	orrs	r2, r1
    165c:	89c1      	ldrh	r1, [r0, #14]
    165e:	4806      	ldr	r0, [pc, #24]	; (1678 <system_clock_source_dfll_set_config+0x74>)
    1660:	0409      	lsls	r1, r1, #16
    1662:	4001      	ands	r1, r0
    1664:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    1666:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    1668:	6819      	ldr	r1, [r3, #0]
    166a:	4a04      	ldr	r2, [pc, #16]	; (167c <system_clock_source_dfll_set_config+0x78>)
    166c:	430a      	orrs	r2, r1
    166e:	601a      	str	r2, [r3, #0]
}
    1670:	e7ed      	b.n	164e <system_clock_source_dfll_set_config+0x4a>
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	2000007c 	.word	0x2000007c
    1678:	03ff0000 	.word	0x03ff0000
    167c:	00000424 	.word	0x00000424

00001680 <system_clock_source_enable>:
{
    1680:	b510      	push	{r4, lr}
	switch (clock_source) {
    1682:	2808      	cmp	r0, #8
    1684:	d806      	bhi.n	1694 <system_clock_source_enable+0x14>
    1686:	f000 fd53 	bl	2130 <__gnu_thumb1_case_uqi>
    168a:	0514      	.short	0x0514
    168c:	1a0e0c05 	.word	0x1a0e0c05
    1690:	2007      	.short	0x2007
    1692:	23          	.byte	0x23
    1693:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
    1694:	2017      	movs	r0, #23
}
    1696:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1698:	2302      	movs	r3, #2
    169a:	4a10      	ldr	r2, [pc, #64]	; (16dc <system_clock_source_enable+0x5c>)
    169c:	6a11      	ldr	r1, [r2, #32]
    169e:	430b      	orrs	r3, r1
    16a0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    16a2:	2000      	movs	r0, #0
    16a4:	e7f7      	b.n	1696 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    16a6:	2302      	movs	r3, #2
    16a8:	4a0c      	ldr	r2, [pc, #48]	; (16dc <system_clock_source_enable+0x5c>)
    16aa:	6991      	ldr	r1, [r2, #24]
    16ac:	430b      	orrs	r3, r1
    16ae:	6193      	str	r3, [r2, #24]
    16b0:	e7f7      	b.n	16a2 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    16b2:	2302      	movs	r3, #2
    16b4:	4a09      	ldr	r2, [pc, #36]	; (16dc <system_clock_source_enable+0x5c>)
    16b6:	8a11      	ldrh	r1, [r2, #16]
    16b8:	430b      	orrs	r3, r1
    16ba:	8213      	strh	r3, [r2, #16]
    16bc:	e7f1      	b.n	16a2 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    16be:	2302      	movs	r3, #2
    16c0:	4a06      	ldr	r2, [pc, #24]	; (16dc <system_clock_source_enable+0x5c>)
    16c2:	8a91      	ldrh	r1, [r2, #20]
    16c4:	430b      	orrs	r3, r1
    16c6:	8293      	strh	r3, [r2, #20]
    16c8:	e7eb      	b.n	16a2 <system_clock_source_enable+0x22>
    16ca:	f7ff fee5 	bl	1498 <system_clock_source_enable.part.0>
    16ce:	e7e2      	b.n	1696 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    16d0:	2302      	movs	r3, #2
    16d2:	4a03      	ldr	r2, [pc, #12]	; (16e0 <system_clock_source_enable+0x60>)
    16d4:	7811      	ldrb	r1, [r2, #0]
    16d6:	430b      	orrs	r3, r1
    16d8:	7013      	strb	r3, [r2, #0]
    16da:	e7e2      	b.n	16a2 <system_clock_source_enable+0x22>
    16dc:	40000800 	.word	0x40000800
    16e0:	40000844 	.word	0x40000844

000016e4 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16e4:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    16e6:	221e      	movs	r2, #30
{
    16e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16ea:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16ec:	4e48      	ldr	r6, [pc, #288]	; (1810 <system_clock_init+0x12c>)
    16ee:	00db      	lsls	r3, r3, #3
    16f0:	4948      	ldr	r1, [pc, #288]	; (1814 <system_clock_init+0x130>)
    16f2:	60b3      	str	r3, [r6, #8]
    16f4:	684b      	ldr	r3, [r1, #4]
{
    16f6:	b08d      	sub	sp, #52	; 0x34
    16f8:	4393      	bics	r3, r2
    16fa:	3a1c      	subs	r2, #28
    16fc:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    16fe:	ac07      	add	r4, sp, #28
    1700:	604b      	str	r3, [r1, #4]
    1702:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1704:	b2e8      	uxtb	r0, r5
    1706:	0021      	movs	r1, r4
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1708:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    170a:	f000 f97f 	bl	1a0c <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    170e:	2d18      	cmp	r5, #24
    1710:	d1f8      	bne.n	1704 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    1712:	4f41      	ldr	r7, [pc, #260]	; (1818 <system_clock_init+0x134>)
	SYSCTRL->OSC32K.bit.CALIB =
    1714:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    1716:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
    1718:	4940      	ldr	r1, [pc, #256]	; (181c <system_clock_init+0x138>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    171a:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    171c:	0e5b      	lsrs	r3, r3, #25
    171e:	400a      	ands	r2, r1
    1720:	041b      	lsls	r3, r3, #16
    1722:	4313      	orrs	r3, r2
    1724:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
    1726:	2301      	movs	r3, #1
	config->run_in_standby      = false;
    1728:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
    172a:	a802      	add	r0, sp, #8
    172c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    172e:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1730:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1732:	3306      	adds	r3, #6
    1734:	7003      	strb	r3, [r0, #0]
	config->run_in_standby      = false;
    1736:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
    1738:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    173a:	f7ff ff2b 	bl	1594 <system_clock_source_osc32k_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    173e:	2004      	movs	r0, #4
    1740:	f7ff ff9e 	bl	1680 <system_clock_source_enable>
	config->fine_value      = 0xff / 4; /* Midpoint */
    1744:	233f      	movs	r3, #63	; 0x3f
    1746:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1748:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    174a:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    174c:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    174e:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1750:	71e5      	strb	r5, [r4, #7]
    1752:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
    1754:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1756:	683b      	ldr	r3, [r7, #0]
    1758:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    175a:	2b3f      	cmp	r3, #63	; 0x3f
    175c:	d100      	bne.n	1760 <system_clock_init+0x7c>
		coarse = 0x1f;
    175e:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
    1760:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1762:	23b7      	movs	r3, #183	; 0xb7
    1764:	00db      	lsls	r3, r3, #3
    1766:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1768:	2307      	movs	r3, #7
    176a:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    176c:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
    176e:	2500      	movs	r5, #0
	config->on_demand       = true;
    1770:	2701      	movs	r7, #1
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1772:	0020      	movs	r0, r4
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1774:	81e3      	strh	r3, [r4, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
    1776:	f7ff ff45 	bl	1604 <system_clock_source_dfll_set_config>
	config->run_in_standby  = false;
    177a:	a801      	add	r0, sp, #4
    177c:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    177e:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1780:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1782:	f7ff fee9 	bl	1558 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1786:	2006      	movs	r0, #6
    1788:	f7ff ff7a 	bl	1680 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    178c:	f000 f850 	bl	1830 <system_gclk_init>

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1790:	2304      	movs	r3, #4
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1792:	ac04      	add	r4, sp, #16
    1794:	0021      	movs	r1, r4
    1796:	0038      	movs	r0, r7
    1798:	7023      	strb	r3, [r4, #0]
    179a:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    179c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    179e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    17a0:	7265      	strb	r5, [r4, #9]
    17a2:	f000 f855 	bl	1850 <system_gclk_gen_set_config>
    17a6:	0038      	movs	r0, r7
    17a8:	f000 f8a0 	bl	18ec <system_gclk_gen_enable>
    17ac:	2307      	movs	r3, #7
    17ae:	0021      	movs	r1, r4
    17b0:	2003      	movs	r0, #3
    17b2:	7023      	strb	r3, [r4, #0]
	config->division_factor    = 1;
    17b4:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    17b6:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    17b8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    17ba:	7265      	strb	r5, [r4, #9]
    17bc:	f000 f848 	bl	1850 <system_gclk_gen_set_config>
    17c0:	2003      	movs	r0, #3
    17c2:	f000 f893 	bl	18ec <system_gclk_gen_enable>
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    17c6:	0021      	movs	r1, r4
    17c8:	0028      	movs	r0, r5
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    17ca:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    17cc:	f000 f91e 	bl	1a0c <system_gclk_chan_set_config>
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    17d0:	0028      	movs	r0, r5
    17d2:	f000 f8df 	bl	1994 <system_gclk_chan_enable>
    17d6:	f7ff fe5f 	bl	1498 <system_clock_source_enable.part.0>
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    17da:	22d0      	movs	r2, #208	; 0xd0
    17dc:	68f3      	ldr	r3, [r6, #12]
    17de:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    17e0:	2bd0      	cmp	r3, #208	; 0xd0
    17e2:	d1fb      	bne.n	17dc <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
    17e4:	2500      	movs	r5, #0
    17e6:	4b0e      	ldr	r3, [pc, #56]	; (1820 <system_clock_init+0x13c>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    17e8:	0021      	movs	r1, r4
    17ea:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    17ec:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    17ee:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    17f0:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    17f2:	2301      	movs	r3, #1
    17f4:	0028      	movs	r0, r5
    17f6:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    17f8:	3305      	adds	r3, #5
    17fa:	7023      	strb	r3, [r4, #0]
	config->high_when_disabled = false;
    17fc:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    17fe:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1800:	7265      	strb	r5, [r4, #9]
    1802:	f000 f825 	bl	1850 <system_gclk_gen_set_config>
    1806:	0028      	movs	r0, r5
    1808:	f000 f870 	bl	18ec <system_gclk_gen_enable>
#endif
}
    180c:	b00d      	add	sp, #52	; 0x34
    180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1810:	40000800 	.word	0x40000800
    1814:	41004000 	.word	0x41004000
    1818:	00806024 	.word	0x00806024
    181c:	ff80ffff 	.word	0xff80ffff
    1820:	40000400 	.word	0x40000400

00001824 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1824:	4b01      	ldr	r3, [pc, #4]	; (182c <system_gclk_is_syncing+0x8>)
    1826:	7858      	ldrb	r0, [r3, #1]
    1828:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    182a:	4770      	bx	lr
    182c:	40000c00 	.word	0x40000c00

00001830 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1830:	2308      	movs	r3, #8
    1832:	4a05      	ldr	r2, [pc, #20]	; (1848 <system_gclk_init+0x18>)
    1834:	6991      	ldr	r1, [r2, #24]
    1836:	430b      	orrs	r3, r1
    1838:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    183a:	2301      	movs	r3, #1
    183c:	4a03      	ldr	r2, [pc, #12]	; (184c <system_gclk_init+0x1c>)
    183e:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1840:	7811      	ldrb	r1, [r2, #0]
    1842:	4219      	tst	r1, r3
    1844:	d1fc      	bne.n	1840 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1846:	4770      	bx	lr
    1848:	40000400 	.word	0x40000400
    184c:	40000c00 	.word	0x40000c00

00001850 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1850:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1852:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1854:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1856:	0224      	lsls	r4, r4, #8
{
    1858:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    185a:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    185c:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    185e:	2b00      	cmp	r3, #0
    1860:	d002      	beq.n	1868 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1862:	2380      	movs	r3, #128	; 0x80
    1864:	02db      	lsls	r3, r3, #11
    1866:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1868:	7a4b      	ldrb	r3, [r1, #9]
    186a:	2b00      	cmp	r3, #0
    186c:	d002      	beq.n	1874 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    186e:	2380      	movs	r3, #128	; 0x80
    1870:	031b      	lsls	r3, r3, #12
    1872:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1874:	684b      	ldr	r3, [r1, #4]
    1876:	2b01      	cmp	r3, #1
    1878:	d912      	bls.n	18a0 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    187a:	1e5d      	subs	r5, r3, #1
    187c:	401d      	ands	r5, r3
    187e:	2202      	movs	r2, #2
    1880:	2d00      	cmp	r5, #0
    1882:	d006      	beq.n	1892 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1884:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1886:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    1888:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    188a:	029b      	lsls	r3, r3, #10
    188c:	e007      	b.n	189e <system_gclk_gen_set_config+0x4e>
				div2_count++;
    188e:	3501      	adds	r5, #1
						mask <<= 1) {
    1890:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1892:	429a      	cmp	r2, r3
    1894:	d3fb      	bcc.n	188e <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1896:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1898:	022d      	lsls	r5, r5, #8
    189a:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    189c:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    189e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    18a0:	7a0b      	ldrb	r3, [r1, #8]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d002      	beq.n	18ac <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    18a6:	2380      	movs	r3, #128	; 0x80
    18a8:	039b      	lsls	r3, r3, #14
    18aa:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    18ac:	f7ff ffba 	bl	1824 <system_gclk_is_syncing>
    18b0:	2800      	cmp	r0, #0
    18b2:	d1fb      	bne.n	18ac <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    18b4:	f7ff f9be 	bl	c34 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18b8:	4b0a      	ldr	r3, [pc, #40]	; (18e4 <system_gclk_gen_set_config+0x94>)
    18ba:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    18bc:	f7ff ffb2 	bl	1824 <system_gclk_is_syncing>
    18c0:	2800      	cmp	r0, #0
    18c2:	d1fb      	bne.n	18bc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    18c4:	4b08      	ldr	r3, [pc, #32]	; (18e8 <system_gclk_gen_set_config+0x98>)
    18c6:	609d      	str	r5, [r3, #8]
    18c8:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    18ca:	f7ff ffab 	bl	1824 <system_gclk_is_syncing>
    18ce:	2800      	cmp	r0, #0
    18d0:	d1fb      	bne.n	18ca <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    18d2:	2280      	movs	r2, #128	; 0x80
    18d4:	686b      	ldr	r3, [r5, #4]
    18d6:	0252      	lsls	r2, r2, #9
    18d8:	4013      	ands	r3, r2
    18da:	431c      	orrs	r4, r3
    18dc:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    18de:	f7ff f9c3 	bl	c68 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    18e2:	bd70      	pop	{r4, r5, r6, pc}
    18e4:	40000c08 	.word	0x40000c08
    18e8:	40000c00 	.word	0x40000c00

000018ec <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    18ec:	b510      	push	{r4, lr}
    18ee:	0004      	movs	r4, r0
	while (system_gclk_is_syncing()) {
    18f0:	f7ff ff98 	bl	1824 <system_gclk_is_syncing>
    18f4:	2800      	cmp	r0, #0
    18f6:	d1fb      	bne.n	18f0 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    18f8:	f7ff f99c 	bl	c34 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18fc:	4b07      	ldr	r3, [pc, #28]	; (191c <system_gclk_gen_enable+0x30>)
    18fe:	701c      	strb	r4, [r3, #0]
	while (system_gclk_is_syncing()) {
    1900:	f7ff ff90 	bl	1824 <system_gclk_is_syncing>
    1904:	2800      	cmp	r0, #0
    1906:	d1fb      	bne.n	1900 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1908:	2380      	movs	r3, #128	; 0x80
    190a:	4a05      	ldr	r2, [pc, #20]	; (1920 <system_gclk_gen_enable+0x34>)
    190c:	025b      	lsls	r3, r3, #9
    190e:	6851      	ldr	r1, [r2, #4]
    1910:	430b      	orrs	r3, r1
    1912:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1914:	f7ff f9a8 	bl	c68 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1918:	bd10      	pop	{r4, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	40000c04 	.word	0x40000c04
    1920:	40000c00 	.word	0x40000c00

00001924 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1926:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    1928:	f7ff ff7c 	bl	1824 <system_gclk_is_syncing>
    192c:	2800      	cmp	r0, #0
    192e:	d1fb      	bne.n	1928 <system_gclk_gen_get_hz+0x4>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1930:	4e15      	ldr	r6, [pc, #84]	; (1988 <system_gclk_gen_get_hz+0x64>)
	cpu_irq_enter_critical();
    1932:	f7ff f97f 	bl	c34 <cpu_irq_enter_critical>
    1936:	7037      	strb	r7, [r6, #0]
	while (system_gclk_is_syncing()) {
    1938:	f7ff ff74 	bl	1824 <system_gclk_is_syncing>
    193c:	2800      	cmp	r0, #0
    193e:	d1fb      	bne.n	1938 <system_gclk_gen_get_hz+0x14>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1940:	4c12      	ldr	r4, [pc, #72]	; (198c <system_gclk_gen_get_hz+0x68>)
    1942:	6860      	ldr	r0, [r4, #4]
    1944:	04c0      	lsls	r0, r0, #19
    1946:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1948:	f7ff fdc2 	bl	14d0 <system_clock_source_get_hz>
    194c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    194e:	7037      	strb	r7, [r6, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1950:	6866      	ldr	r6, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1952:	4b0f      	ldr	r3, [pc, #60]	; (1990 <system_gclk_gen_get_hz+0x6c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1954:	02f6      	lsls	r6, r6, #11
    1956:	0ff6      	lsrs	r6, r6, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1958:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    195a:	f7ff ff63 	bl	1824 <system_gclk_is_syncing>
    195e:	2800      	cmp	r0, #0
    1960:	d1fb      	bne.n	195a <system_gclk_gen_get_hz+0x36>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1962:	68a4      	ldr	r4, [r4, #8]
    1964:	0224      	lsls	r4, r4, #8
    1966:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1968:	f7ff f97e 	bl	c68 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    196c:	2e00      	cmp	r6, #0
    196e:	d108      	bne.n	1982 <system_gclk_gen_get_hz+0x5e>
    1970:	2c01      	cmp	r4, #1
    1972:	d904      	bls.n	197e <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
    1974:	0028      	movs	r0, r5
    1976:	0021      	movs	r1, r4
    1978:	f000 fbe4 	bl	2144 <__udivsi3>
    197c:	0005      	movs	r5, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    197e:	0028      	movs	r0, r5
    1980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    1982:	3401      	adds	r4, #1
    1984:	40e5      	lsrs	r5, r4
	return gen_input_hz;
    1986:	e7fa      	b.n	197e <system_gclk_gen_get_hz+0x5a>
    1988:	40000c04 	.word	0x40000c04
    198c:	40000c00 	.word	0x40000c00
    1990:	40000c08 	.word	0x40000c08

00001994 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1994:	b510      	push	{r4, lr}
    1996:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1998:	f7ff f94c 	bl	c34 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    199c:	4b05      	ldr	r3, [pc, #20]	; (19b4 <system_gclk_chan_enable+0x20>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    199e:	4a06      	ldr	r2, [pc, #24]	; (19b8 <system_gclk_chan_enable+0x24>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19a0:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    19a2:	2380      	movs	r3, #128	; 0x80
    19a4:	8851      	ldrh	r1, [r2, #2]
    19a6:	01db      	lsls	r3, r3, #7
    19a8:	430b      	orrs	r3, r1
    19aa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    19ac:	f7ff f95c 	bl	c68 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    19b0:	bd10      	pop	{r4, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	40000c02 	.word	0x40000c02
    19b8:	40000c00 	.word	0x40000c00

000019bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    19bc:	b510      	push	{r4, lr}
    19be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19c0:	f7ff f938 	bl	c34 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19c4:	4b0d      	ldr	r3, [pc, #52]	; (19fc <system_gclk_chan_disable+0x40>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    19c6:	4a0e      	ldr	r2, [pc, #56]	; (1a00 <system_gclk_chan_disable+0x44>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19c8:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19ca:	4b0e      	ldr	r3, [pc, #56]	; (1a04 <system_gclk_chan_disable+0x48>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19cc:	4c0e      	ldr	r4, [pc, #56]	; (1a08 <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19ce:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    19d0:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19d2:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    19d4:	4011      	ands	r1, r2
    19d6:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19d8:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19da:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19dc:	4021      	ands	r1, r4
    19de:	8059      	strh	r1, [r3, #2]
    19e0:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    19e2:	2280      	movs	r2, #128	; 0x80
    19e4:	01d2      	lsls	r2, r2, #7
    19e6:	885c      	ldrh	r4, [r3, #2]
    19e8:	4214      	tst	r4, r2
    19ea:	d1fc      	bne.n	19e6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    19ec:	885a      	ldrh	r2, [r3, #2]
    19ee:	0200      	lsls	r0, r0, #8
    19f0:	400a      	ands	r2, r1
    19f2:	4302      	orrs	r2, r0
    19f4:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    19f6:	f7ff f937 	bl	c68 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    19fa:	bd10      	pop	{r4, pc}
    19fc:	40000c02 	.word	0x40000c02
    1a00:	fffff0ff 	.word	0xfffff0ff
    1a04:	40000c00 	.word	0x40000c00
    1a08:	ffffbfff 	.word	0xffffbfff

00001a0c <system_gclk_chan_set_config>:
{
    1a0c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a0e:	780c      	ldrb	r4, [r1, #0]
    1a10:	0224      	lsls	r4, r4, #8
    1a12:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a14:	f7ff ffd2 	bl	19bc <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a18:	4b01      	ldr	r3, [pc, #4]	; (1a20 <system_gclk_chan_set_config+0x14>)
    1a1a:	b2a4      	uxth	r4, r4
    1a1c:	805c      	strh	r4, [r3, #2]
}
    1a1e:	bd10      	pop	{r4, pc}
    1a20:	40000c00 	.word	0x40000c00

00001a24 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a24:	b510      	push	{r4, lr}
    1a26:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a28:	f7ff f904 	bl	c34 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a2c:	4b05      	ldr	r3, [pc, #20]	; (1a44 <system_gclk_chan_get_hz+0x20>)
    1a2e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a30:	4b05      	ldr	r3, [pc, #20]	; (1a48 <system_gclk_chan_get_hz+0x24>)
    1a32:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1a34:	f7ff f918 	bl	c68 <cpu_irq_leave_critical>
    1a38:	0524      	lsls	r4, r4, #20
    1a3a:	0f24      	lsrs	r4, r4, #28

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a3c:	0020      	movs	r0, r4
    1a3e:	f7ff ff71 	bl	1924 <system_gclk_gen_get_hz>
}
    1a42:	bd10      	pop	{r4, pc}
    1a44:	40000c02 	.word	0x40000c02
    1a48:	40000c00 	.word	0x40000c00

00001a4c <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a4c:	78d3      	ldrb	r3, [r2, #3]
{
    1a4e:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1a50:	2b00      	cmp	r3, #0
    1a52:	d135      	bne.n	1ac0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a54:	7814      	ldrb	r4, [r2, #0]
    1a56:	2c80      	cmp	r4, #128	; 0x80
    1a58:	d003      	beq.n	1a62 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a5a:	2380      	movs	r3, #128	; 0x80
    1a5c:	0624      	lsls	r4, r4, #24
    1a5e:	025b      	lsls	r3, r3, #9
    1a60:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a62:	2502      	movs	r5, #2
    1a64:	7854      	ldrb	r4, [r2, #1]
    1a66:	43ac      	bics	r4, r5
    1a68:	d106      	bne.n	1a78 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a6a:	7894      	ldrb	r4, [r2, #2]
    1a6c:	2c00      	cmp	r4, #0
    1a6e:	d124      	bne.n	1aba <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a70:	2480      	movs	r4, #128	; 0x80
    1a72:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a74:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a76:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a78:	7854      	ldrb	r4, [r2, #1]
    1a7a:	3c01      	subs	r4, #1
    1a7c:	2c01      	cmp	r4, #1
    1a7e:	d801      	bhi.n	1a84 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a80:	4c12      	ldr	r4, [pc, #72]	; (1acc <_system_pinmux_config+0x80>)
    1a82:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a84:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a86:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a88:	05e4      	lsls	r4, r4, #23
    1a8a:	432c      	orrs	r4, r5
    1a8c:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a8e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a90:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a92:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a94:	0624      	lsls	r4, r4, #24
    1a96:	432c      	orrs	r4, r5
    1a98:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a9a:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a9c:	78d4      	ldrb	r4, [r2, #3]
    1a9e:	2c00      	cmp	r4, #0
    1aa0:	d10a      	bne.n	1ab8 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1aa2:	035b      	lsls	r3, r3, #13
    1aa4:	d503      	bpl.n	1aae <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1aa6:	7893      	ldrb	r3, [r2, #2]
    1aa8:	2b01      	cmp	r3, #1
    1aaa:	d10c      	bne.n	1ac6 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1aac:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1aae:	7853      	ldrb	r3, [r2, #1]
    1ab0:	3b01      	subs	r3, #1
    1ab2:	2b01      	cmp	r3, #1
    1ab4:	d800      	bhi.n	1ab8 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1ab6:	6081      	str	r1, [r0, #8]
		}
	}
}
    1ab8:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1aba:	24c0      	movs	r4, #192	; 0xc0
    1abc:	02e4      	lsls	r4, r4, #11
    1abe:	e7d9      	b.n	1a74 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1ac0:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1ac2:	2300      	movs	r3, #0
    1ac4:	e7de      	b.n	1a84 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    1ac6:	6141      	str	r1, [r0, #20]
    1ac8:	e7f1      	b.n	1aae <_system_pinmux_config+0x62>
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	fffbffff 	.word	0xfffbffff

00001ad0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ad0:	b510      	push	{r4, lr}
    1ad2:	0003      	movs	r3, r0
    1ad4:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    1ad6:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1ad8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1ada:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1adc:	4281      	cmp	r1, r0
    1ade:	d102      	bne.n	1ae6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1ae0:	4904      	ldr	r1, [pc, #16]	; (1af4 <system_pinmux_pin_set_config+0x24>)
    1ae2:	01e0      	lsls	r0, r4, #7
    1ae4:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1ae6:	211f      	movs	r1, #31
    1ae8:	400b      	ands	r3, r1
    1aea:	391e      	subs	r1, #30
    1aec:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1aee:	f7ff ffad 	bl	1a4c <_system_pinmux_config>
}
    1af2:	bd10      	pop	{r4, pc}
    1af4:	41004400 	.word	0x41004400

00001af8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1af8:	4770      	bx	lr

00001afa <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1afa:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1afc:	f7ff fdf2 	bl	16e4 <system_clock_init>
	//system_board_init();
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1b00:	f7ff fffa 	bl	1af8 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    1b04:	f7ff fff8 	bl	1af8 <_system_dummy_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b08:	f7ff fff6 	bl	1af8 <_system_dummy_init>
}
    1b0c:	bd10      	pop	{r4, pc}
	...

00001b10 <_tcc_set_compare_value.isra.5>:
 *
 * \retval  STATUS_OK               The compare value was updated successfully
 * \retval  STATUS_ERR_INVALID_ARG  An invalid channel index was supplied or
 *                                  compare value exceed resolution
 */
static enum status_code _tcc_set_compare_value(
    1b10:	b530      	push	{r4, r5, lr}
    1b12:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1b14:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1b16:	2903      	cmp	r1, #3
    1b18:	d813      	bhi.n	1b42 <_tcc_set_compare_value.isra.5+0x32>
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
    1b1a:	4d10      	ldr	r5, [pc, #64]	; (1b5c <_tcc_set_compare_value.isra.5+0x4c>)
    1b1c:	42aa      	cmp	r2, r5
    1b1e:	d810      	bhi.n	1b42 <_tcc_set_compare_value.isra.5+0x32>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
    1b20:	2b00      	cmp	r3, #0
    1b22:	d00f      	beq.n	1b44 <_tcc_set_compare_value.isra.5+0x34>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
				(TCC_STATUS_CCBV0 << channel_index)) {
    1b24:	2380      	movs	r3, #128	; 0x80
    1b26:	025b      	lsls	r3, r3, #9
    1b28:	408b      	lsls	r3, r1
		while(tcc_module->STATUS.reg  &
    1b2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1b2c:	4203      	tst	r3, r0
    1b2e:	d1fc      	bne.n	1b2a <_tcc_set_compare_value.isra.5+0x1a>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1b30:	2580      	movs	r5, #128	; 0x80
    1b32:	032d      	lsls	r5, r5, #12
    1b34:	408d      	lsls	r5, r1
		while(tcc_module->SYNCBUSY.reg  &
    1b36:	68a0      	ldr	r0, [r4, #8]
    1b38:	4028      	ands	r0, r5
    1b3a:	d1fc      	bne.n	1b36 <_tcc_set_compare_value.isra.5+0x26>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    1b3c:	311c      	adds	r1, #28
    1b3e:	0089      	lsls	r1, r1, #2
    1b40:	510a      	str	r2, [r1, r4]
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1b42:	bd30      	pop	{r4, r5, pc}
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1b44:	2080      	movs	r0, #128	; 0x80
    1b46:	0040      	lsls	r0, r0, #1
    1b48:	4088      	lsls	r0, r1
    1b4a:	68a3      	ldr	r3, [r4, #8]
    1b4c:	4003      	ands	r3, r0
    1b4e:	d1fc      	bne.n	1b4a <_tcc_set_compare_value.isra.5+0x3a>
		tcc_module->CC[channel_index].reg = compare;
    1b50:	3110      	adds	r1, #16
    1b52:	0089      	lsls	r1, r1, #2
    1b54:	1861      	adds	r1, r4, r1
    1b56:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    1b58:	0018      	movs	r0, r3
    1b5a:	e7f2      	b.n	1b42 <_tcc_set_compare_value.isra.5+0x32>
    1b5c:	00ffffff 	.word	0x00ffffff

00001b60 <tcc_set_compare_value>:
		const uint32_t compare)
{
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1b60:	0003      	movs	r3, r0
{
    1b62:	b510      	push	{r4, lr}
	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1b64:	333c      	adds	r3, #60	; 0x3c
    1b66:	781b      	ldrb	r3, [r3, #0]
    1b68:	6800      	ldr	r0, [r0, #0]
    1b6a:	f7ff ffd1 	bl	1b10 <_tcc_set_compare_value.isra.5>
			module_inst->double_buffering_enabled);
}
    1b6e:	bd10      	pop	{r4, pc}

00001b70 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1b72:	2500      	movs	r5, #0
	struct tcc_module *module =
    1b74:	4b0b      	ldr	r3, [pc, #44]	; (1ba4 <_tcc_interrupt_handler+0x34>)
    1b76:	0080      	lsls	r0, r0, #2
    1b78:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1b7a:	6823      	ldr	r3, [r4, #0]
    1b7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1b7e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1b82:	4013      	ands	r3, r2
    1b84:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1b86:	4b08      	ldr	r3, [pc, #32]	; (1ba8 <_tcc_interrupt_handler+0x38>)
    1b88:	58ef      	ldr	r7, [r5, r3]
    1b8a:	4237      	tst	r7, r6
    1b8c:	d005      	beq.n	1b9a <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1b8e:	1963      	adds	r3, r4, r5
    1b90:	685b      	ldr	r3, [r3, #4]
    1b92:	0020      	movs	r0, r4
    1b94:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1b96:	6823      	ldr	r3, [r4, #0]
    1b98:	62df      	str	r7, [r3, #44]	; 0x2c
    1b9a:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1b9c:	2d30      	cmp	r5, #48	; 0x30
    1b9e:	d1f2      	bne.n	1b86 <_tcc_interrupt_handler+0x16>
		}
	}
}
    1ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	200001d0 	.word	0x200001d0
    1ba8:	00003be0 	.word	0x00003be0

00001bac <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1bac:	b510      	push	{r4, lr}
    1bae:	2000      	movs	r0, #0
    1bb0:	f7ff ffde 	bl	1b70 <_tcc_interrupt_handler>
    1bb4:	bd10      	pop	{r4, pc}

00001bb6 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1bb6:	1c93      	adds	r3, r2, #2
    1bb8:	009b      	lsls	r3, r3, #2
    1bba:	5019      	str	r1, [r3, r0]
    1bbc:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1bbe:	2a02      	cmp	r2, #2
    1bc0:	d104      	bne.n	1bcc <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1bc2:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1bc4:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1bc6:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1bc8:	2000      	movs	r0, #0
    1bca:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1bcc:	2a03      	cmp	r2, #3
    1bce:	d101      	bne.n	1bd4 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1bd0:	321d      	adds	r2, #29
    1bd2:	e7f7      	b.n	1bc4 <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    1bd4:	2101      	movs	r1, #1
    1bd6:	4091      	lsls	r1, r2
    1bd8:	430b      	orrs	r3, r1
    1bda:	e7f4      	b.n	1bc6 <tc_register_callback+0x10>

00001bdc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1bdc:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1bde:	2601      	movs	r6, #1
	struct tc_module *module
    1be0:	4b14      	ldr	r3, [pc, #80]	; (1c34 <_tc_interrupt_handler+0x58>)
    1be2:	0080      	lsls	r0, r0, #2
    1be4:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1be6:	6823      	ldr	r3, [r4, #0]
    1be8:	7e22      	ldrb	r2, [r4, #24]
    1bea:	7e65      	ldrb	r5, [r4, #25]
    1bec:	7b9b      	ldrb	r3, [r3, #14]
    1bee:	4015      	ands	r5, r2
    1bf0:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1bf2:	4235      	tst	r5, r6
    1bf4:	d004      	beq.n	1c00 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1bf6:	68a3      	ldr	r3, [r4, #8]
    1bf8:	0020      	movs	r0, r4
    1bfa:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1bfc:	6823      	ldr	r3, [r4, #0]
    1bfe:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1c00:	2602      	movs	r6, #2
    1c02:	4235      	tst	r5, r6
    1c04:	d004      	beq.n	1c10 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c06:	68e3      	ldr	r3, [r4, #12]
    1c08:	0020      	movs	r0, r4
    1c0a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c0c:	6823      	ldr	r3, [r4, #0]
    1c0e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1c10:	2610      	movs	r6, #16
    1c12:	4235      	tst	r5, r6
    1c14:	d004      	beq.n	1c20 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1c16:	6923      	ldr	r3, [r4, #16]
    1c18:	0020      	movs	r0, r4
    1c1a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1c1c:	6823      	ldr	r3, [r4, #0]
    1c1e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1c20:	2620      	movs	r6, #32
    1c22:	4235      	tst	r5, r6
    1c24:	d004      	beq.n	1c30 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1c26:	6963      	ldr	r3, [r4, #20]
    1c28:	0020      	movs	r0, r4
    1c2a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1c2c:	6823      	ldr	r3, [r4, #0]
    1c2e:	739e      	strb	r6, [r3, #14]
	}
}
    1c30:	bd70      	pop	{r4, r5, r6, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	200001d4 	.word	0x200001d4

00001c38 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1c38:	b510      	push	{r4, lr}
    1c3a:	2000      	movs	r0, #0
    1c3c:	f7ff ffce 	bl	1bdc <_tc_interrupt_handler>
    1c40:	bd10      	pop	{r4, pc}

00001c42 <TC2_Handler>:
    1c42:	b510      	push	{r4, lr}
    1c44:	2001      	movs	r0, #1
    1c46:	f7ff ffc9 	bl	1bdc <_tc_interrupt_handler>
    1c4a:	bd10      	pop	{r4, pc}

00001c4c <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1c4c:	4b06      	ldr	r3, [pc, #24]	; (1c68 <_tc_get_inst_index+0x1c>)
    1c4e:	4298      	cmp	r0, r3
    1c50:	d007      	beq.n	1c62 <_tc_get_inst_index+0x16>
    1c52:	4a06      	ldr	r2, [pc, #24]	; (1c6c <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1c54:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1c56:	4290      	cmp	r0, r2
    1c58:	d101      	bne.n	1c5e <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c5a:	3301      	adds	r3, #1
			return i;
    1c5c:	b2db      	uxtb	r3, r3
}
    1c5e:	0018      	movs	r0, r3
    1c60:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c62:	2300      	movs	r3, #0
    1c64:	e7fa      	b.n	1c5c <_tc_get_inst_index+0x10>
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	42001800 	.word	0x42001800
    1c6c:	42001c00 	.word	0x42001c00

00001c70 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c72:	0005      	movs	r5, r0
    1c74:	b085      	sub	sp, #20
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1c76:	0008      	movs	r0, r1
{
    1c78:	0014      	movs	r4, r2
    1c7a:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    1c7c:	f7ff ffe6 	bl	1c4c <_tc_get_inst_index>

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1c80:	466a      	mov	r2, sp
    1c82:	2312      	movs	r3, #18
    1c84:	7113      	strb	r3, [r2, #4]
    1c86:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1c88:	332e      	adds	r3, #46	; 0x2e
    1c8a:	8113      	strh	r3, [r2, #8]
    1c8c:	3340      	adds	r3, #64	; 0x40
    1c8e:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1c90:	2300      	movs	r3, #0
    1c92:	60ab      	str	r3, [r5, #8]
    1c94:	60eb      	str	r3, [r5, #12]
    1c96:	612b      	str	r3, [r5, #16]
    1c98:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1c9a:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    1c9c:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1c9e:	4b7c      	ldr	r3, [pc, #496]	; (1e90 <tc_init+0x220>)
    1ca0:	0082      	lsls	r2, r0, #2
    1ca2:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1ca4:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1ca6:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    1ca8:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1caa:	2b08      	cmp	r3, #8
    1cac:	d103      	bne.n	1cb6 <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1cae:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1cb0:	07fa      	lsls	r2, r7, #31
    1cb2:	d500      	bpl.n	1cb6 <tc_init+0x46>
    1cb4:	e0d5      	b.n	1e62 <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1cb6:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    1cb8:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1cba:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1cbc:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1cbe:	4213      	tst	r3, r2
    1cc0:	d000      	beq.n	1cc4 <tc_init+0x54>
    1cc2:	e0ce      	b.n	1e62 <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1cc4:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1cc6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1cc8:	06db      	lsls	r3, r3, #27
    1cca:	d500      	bpl.n	1cce <tc_init+0x5e>
    1ccc:	e0c9      	b.n	1e62 <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1cce:	2102      	movs	r1, #2
    1cd0:	8833      	ldrh	r3, [r6, #0]
    1cd2:	400b      	ands	r3, r1
    1cd4:	d000      	beq.n	1cd8 <tc_init+0x68>
    1cd6:	e0c4      	b.n	1e62 <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1cd8:	7c21      	ldrb	r1, [r4, #16]
    1cda:	2900      	cmp	r1, #0
    1cdc:	d008      	beq.n	1cf0 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1cde:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1ce0:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1ce2:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1ce4:	7d20      	ldrb	r0, [r4, #20]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ce6:	708a      	strb	r2, [r1, #2]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1ce8:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1cea:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    1cec:	f7ff fef0 	bl	1ad0 <system_pinmux_pin_set_config>
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1cf0:	7f23      	ldrb	r3, [r4, #28]
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d00e      	beq.n	1d14 <tc_init+0xa4>
	config->powersave    = false;
    1cf6:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1cf8:	2301      	movs	r3, #1
    1cfa:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1cfc:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1cfe:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d00:	708b      	strb	r3, [r1, #2]
    1d02:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d04:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1d06:	331f      	adds	r3, #31
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d08:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    1d0a:	18e3      	adds	r3, r4, r3
    1d0c:	7818      	ldrb	r0, [r3, #0]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d0e:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    1d10:	f7ff fede 	bl	1ad0 <system_pinmux_pin_set_config>
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1d14:	007a      	lsls	r2, r7, #1
    1d16:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1d18:	4668      	mov	r0, sp
    1d1a:	2208      	movs	r2, #8
    1d1c:	1880      	adds	r0, r0, r2
    1d1e:	4662      	mov	r2, ip
			PM->APBCMASK.reg |= mask;
    1d20:	4b5c      	ldr	r3, [pc, #368]	; (1e94 <tc_init+0x224>)
    1d22:	5a82      	ldrh	r2, [r0, r2]
    1d24:	6a19      	ldr	r1, [r3, #32]
    1d26:	430a      	orrs	r2, r1
    1d28:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1d2a:	78a2      	ldrb	r2, [r4, #2]
    1d2c:	2a08      	cmp	r2, #8
    1d2e:	d10a      	bne.n	1d46 <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1d30:	1c79      	adds	r1, r7, #1
    1d32:	004a      	lsls	r2, r1, #1
    1d34:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1d36:	2108      	movs	r1, #8
    1d38:	466a      	mov	r2, sp
    1d3a:	1852      	adds	r2, r2, r1
    1d3c:	4661      	mov	r1, ip
    1d3e:	6a18      	ldr	r0, [r3, #32]
    1d40:	5a52      	ldrh	r2, [r2, r1]
    1d42:	4302      	orrs	r2, r0
    1d44:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1d46:	466a      	mov	r2, sp
    1d48:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1d4a:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    1d4c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1d4e:	466b      	mov	r3, sp
    1d50:	3304      	adds	r3, #4
    1d52:	5ddf      	ldrb	r7, [r3, r7]
    1d54:	0038      	movs	r0, r7
    1d56:	f7ff fe59 	bl	1a0c <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1d5a:	0038      	movs	r0, r7
    1d5c:	f7ff fe1a 	bl	1994 <system_gclk_chan_enable>

	/* Set ctrla register */
	ctrla_tmp =
    1d60:	8923      	ldrh	r3, [r4, #8]
    1d62:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    1d64:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    1d66:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    1d68:	78a3      	ldrb	r3, [r4, #2]
    1d6a:	430b      	orrs	r3, r1
	ctrla_tmp =
    1d6c:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1d6e:	7862      	ldrb	r2, [r4, #1]
    1d70:	2a00      	cmp	r2, #0
    1d72:	d002      	beq.n	1d7a <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1d74:	2280      	movs	r2, #128	; 0x80
    1d76:	0112      	lsls	r2, r2, #4
    1d78:	4313      	orrs	r3, r2
    1d7a:	6829      	ldr	r1, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d7c:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d7e:	b252      	sxtb	r2, r2
    1d80:	2a00      	cmp	r2, #0
    1d82:	dbfb      	blt.n	1d7c <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1d84:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1d86:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1d88:	1e5a      	subs	r2, r3, #1
    1d8a:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    1d8c:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1d8e:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    1d90:	2a00      	cmp	r2, #0
    1d92:	d001      	beq.n	1d98 <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1d94:	2201      	movs	r2, #1
    1d96:	4313      	orrs	r3, r2
    1d98:	6829      	ldr	r1, [r5, #0]
    1d9a:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1d9c:	b252      	sxtb	r2, r2
    1d9e:	2a00      	cmp	r2, #0
    1da0:	dbfb      	blt.n	1d9a <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1da2:	22ff      	movs	r2, #255	; 0xff
    1da4:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1da6:	2b00      	cmp	r3, #0
    1da8:	d005      	beq.n	1db6 <tc_init+0x146>
    1daa:	6829      	ldr	r1, [r5, #0]
    1dac:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1dae:	b252      	sxtb	r2, r2
    1db0:	2a00      	cmp	r2, #0
    1db2:	dbfb      	blt.n	1dac <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1db4:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1db6:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    1db8:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d001      	beq.n	1dc2 <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1dbe:	2310      	movs	r3, #16
    1dc0:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    1dc2:	7b23      	ldrb	r3, [r4, #12]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d001      	beq.n	1dcc <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1dc8:	2320      	movs	r3, #32
    1dca:	431a      	orrs	r2, r3
    1dcc:	6829      	ldr	r1, [r5, #0]
    1dce:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1dd0:	b25b      	sxtb	r3, r3
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	dbfb      	blt.n	1dce <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1dd6:	71b2      	strb	r2, [r6, #6]
    1dd8:	682b      	ldr	r3, [r5, #0]
    1dda:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1ddc:	b252      	sxtb	r2, r2
    1dde:	2a00      	cmp	r2, #0
    1de0:	dbfb      	blt.n	1dda <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1de2:	792a      	ldrb	r2, [r5, #4]
    1de4:	2a04      	cmp	r2, #4
    1de6:	d019      	beq.n	1e1c <tc_init+0x1ac>
    1de8:	2a08      	cmp	r2, #8
    1dea:	d03c      	beq.n	1e66 <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1dec:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1dee:	2a00      	cmp	r2, #0
    1df0:	d137      	bne.n	1e62 <tc_init+0x1f2>
    1df2:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1df4:	b252      	sxtb	r2, r2
    1df6:	2a00      	cmp	r2, #0
    1df8:	dbfb      	blt.n	1df2 <tc_init+0x182>
				= config->counter_16_bit.value;
    1dfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1dfc:	8233      	strh	r3, [r6, #16]
    1dfe:	682a      	ldr	r2, [r5, #0]
    1e00:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e02:	b25b      	sxtb	r3, r3
    1e04:	2b00      	cmp	r3, #0
    1e06:	dbfb      	blt.n	1e00 <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    1e08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1e0a:	8333      	strh	r3, [r6, #24]
    1e0c:	682a      	ldr	r2, [r5, #0]
    1e0e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e10:	b25b      	sxtb	r3, r3
    1e12:	2b00      	cmp	r3, #0
    1e14:	dbfb      	blt.n	1e0e <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    1e16:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1e18:	8373      	strh	r3, [r6, #26]
    1e1a:	e021      	b.n	1e60 <tc_init+0x1f0>
    1e1c:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1e1e:	b252      	sxtb	r2, r2
    1e20:	2a00      	cmp	r2, #0
    1e22:	dbfb      	blt.n	1e1c <tc_init+0x1ac>
					config->counter_8_bit.value;
    1e24:	0023      	movs	r3, r4
    1e26:	3328      	adds	r3, #40	; 0x28
    1e28:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    1e2a:	7433      	strb	r3, [r6, #16]
    1e2c:	682a      	ldr	r2, [r5, #0]
    1e2e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e30:	b25b      	sxtb	r3, r3
    1e32:	2b00      	cmp	r3, #0
    1e34:	dbfb      	blt.n	1e2e <tc_init+0x1be>
					config->counter_8_bit.period;
    1e36:	0023      	movs	r3, r4
    1e38:	3329      	adds	r3, #41	; 0x29
    1e3a:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    1e3c:	7533      	strb	r3, [r6, #20]
    1e3e:	682a      	ldr	r2, [r5, #0]
    1e40:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e42:	b25b      	sxtb	r3, r3
    1e44:	2b00      	cmp	r3, #0
    1e46:	dbfb      	blt.n	1e40 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    1e48:	0023      	movs	r3, r4
    1e4a:	332a      	adds	r3, #42	; 0x2a
    1e4c:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    1e4e:	7633      	strb	r3, [r6, #24]
    1e50:	682a      	ldr	r2, [r5, #0]
    1e52:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e54:	b25b      	sxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	dbfb      	blt.n	1e52 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    1e5a:	342b      	adds	r4, #43	; 0x2b
    1e5c:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    1e5e:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    1e60:	2000      	movs	r0, #0
}
    1e62:	b005      	add	sp, #20
    1e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e66:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1e68:	b252      	sxtb	r2, r2
    1e6a:	2a00      	cmp	r2, #0
    1e6c:	dbfb      	blt.n	1e66 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1e6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e70:	6133      	str	r3, [r6, #16]
    1e72:	682a      	ldr	r2, [r5, #0]
    1e74:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e76:	b25b      	sxtb	r3, r3
    1e78:	2b00      	cmp	r3, #0
    1e7a:	dbfb      	blt.n	1e74 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1e7e:	61b3      	str	r3, [r6, #24]
    1e80:	682a      	ldr	r2, [r5, #0]
    1e82:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e84:	b25b      	sxtb	r3, r3
    1e86:	2b00      	cmp	r3, #0
    1e88:	dbfb      	blt.n	1e82 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1e8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1e8c:	61f3      	str	r3, [r6, #28]
    1e8e:	e7e7      	b.n	1e60 <tc_init+0x1f0>
    1e90:	200001d4 	.word	0x200001d4
    1e94:	40000400 	.word	0x40000400

00001e98 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1e98:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1e9a:	6804      	ldr	r4, [r0, #0]
    1e9c:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1e9e:	b25b      	sxtb	r3, r3
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	dbfb      	blt.n	1e9c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1ea4:	7903      	ldrb	r3, [r0, #4]
    1ea6:	2b04      	cmp	r3, #4
    1ea8:	d00c      	beq.n	1ec4 <tc_set_compare_value+0x2c>
    1eaa:	2b08      	cmp	r3, #8
    1eac:	d012      	beq.n	1ed4 <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1eae:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d10e      	bne.n	1ed2 <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    1eb4:	2017      	movs	r0, #23
			if (channel_index <
    1eb6:	2901      	cmp	r1, #1
    1eb8:	d80b      	bhi.n	1ed2 <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    1eba:	310c      	adds	r1, #12
						(uint16_t)compare;
    1ebc:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1ebe:	0049      	lsls	r1, r1, #1
    1ec0:	530a      	strh	r2, [r1, r4]
    1ec2:	e005      	b.n	1ed0 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    1ec4:	2017      	movs	r0, #23
			if (channel_index <
    1ec6:	2901      	cmp	r1, #1
    1ec8:	d803      	bhi.n	1ed2 <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    1eca:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1ecc:	1861      	adds	r1, r4, r1
    1ece:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1ed0:	2000      	movs	r0, #0
}
    1ed2:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1ed4:	2017      	movs	r0, #23
			if (channel_index <
    1ed6:	2901      	cmp	r1, #1
    1ed8:	d8fb      	bhi.n	1ed2 <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    1eda:	3106      	adds	r1, #6
    1edc:	0089      	lsls	r1, r1, #2
    1ede:	510a      	str	r2, [r1, r4]
    1ee0:	e7f6      	b.n	1ed0 <tc_set_compare_value+0x38>

00001ee2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1ee2:	e7fe      	b.n	1ee2 <Dummy_Handler>

00001ee4 <Reset_Handler>:
        if (pSrc != pDest) {
    1ee4:	4821      	ldr	r0, [pc, #132]	; (1f6c <Reset_Handler+0x88>)
    1ee6:	4922      	ldr	r1, [pc, #136]	; (1f70 <Reset_Handler+0x8c>)
{
    1ee8:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1eea:	4288      	cmp	r0, r1
    1eec:	d004      	beq.n	1ef8 <Reset_Handler+0x14>
    1eee:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1ef0:	4c20      	ldr	r4, [pc, #128]	; (1f74 <Reset_Handler+0x90>)
    1ef2:	18ca      	adds	r2, r1, r3
    1ef4:	42a2      	cmp	r2, r4
    1ef6:	d332      	bcc.n	1f5e <Reset_Handler+0x7a>
                *pDest++ = 0;
    1ef8:	2100      	movs	r1, #0
    1efa:	4b1f      	ldr	r3, [pc, #124]	; (1f78 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1efc:	4a1f      	ldr	r2, [pc, #124]	; (1f7c <Reset_Handler+0x98>)
    1efe:	4293      	cmp	r3, r2
    1f00:	d331      	bcc.n	1f66 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f02:	21ff      	movs	r1, #255	; 0xff
    1f04:	4b1e      	ldr	r3, [pc, #120]	; (1f80 <Reset_Handler+0x9c>)
    1f06:	4a1f      	ldr	r2, [pc, #124]	; (1f84 <Reset_Handler+0xa0>)
    1f08:	438b      	bics	r3, r1
    1f0a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f0c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f0e:	250c      	movs	r5, #12
    1f10:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f12:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f14:	4b1c      	ldr	r3, [pc, #112]	; (1f88 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f16:	481d      	ldr	r0, [pc, #116]	; (1f8c <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f18:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f1a:	78c3      	ldrb	r3, [r0, #3]
    1f1c:	39fc      	subs	r1, #252	; 0xfc
    1f1e:	438b      	bics	r3, r1
    1f20:	4313      	orrs	r3, r2
    1f22:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f24:	78c3      	ldrb	r3, [r0, #3]
    1f26:	43ab      	bics	r3, r5
    1f28:	4323      	orrs	r3, r4
    1f2a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f2c:	4b18      	ldr	r3, [pc, #96]	; (1f90 <Reset_Handler+0xac>)
    1f2e:	7b98      	ldrb	r0, [r3, #14]
    1f30:	43b0      	bics	r0, r6
    1f32:	0006      	movs	r6, r0
    1f34:	2020      	movs	r0, #32
    1f36:	4330      	orrs	r0, r6
    1f38:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1f3a:	7b98      	ldrb	r0, [r3, #14]
    1f3c:	43a8      	bics	r0, r5
    1f3e:	4304      	orrs	r4, r0
    1f40:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1f42:	7b98      	ldrb	r0, [r3, #14]
    1f44:	4388      	bics	r0, r1
    1f46:	4302      	orrs	r2, r0
    1f48:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1f4a:	2380      	movs	r3, #128	; 0x80
    1f4c:	4a11      	ldr	r2, [pc, #68]	; (1f94 <Reset_Handler+0xb0>)
    1f4e:	6851      	ldr	r1, [r2, #4]
    1f50:	430b      	orrs	r3, r1
    1f52:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1f54:	f001 fde6 	bl	3b24 <__libc_init_array>
        main();
    1f58:	f000 f8e2 	bl	2120 <main>
    1f5c:	e7fe      	b.n	1f5c <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1f5e:	58c5      	ldr	r5, [r0, r3]
    1f60:	3304      	adds	r3, #4
    1f62:	6015      	str	r5, [r2, #0]
    1f64:	e7c5      	b.n	1ef2 <Reset_Handler+0xe>
                *pDest++ = 0;
    1f66:	c302      	stmia	r3!, {r1}
    1f68:	e7c9      	b.n	1efe <Reset_Handler+0x1a>
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	00003ccc 	.word	0x00003ccc
    1f70:	20000000 	.word	0x20000000
    1f74:	20000020 	.word	0x20000020
    1f78:	20000020 	.word	0x20000020
    1f7c:	20000204 	.word	0x20000204
    1f80:	00000000 	.word	0x00000000
    1f84:	e000ed00 	.word	0xe000ed00
    1f88:	410070fc 	.word	0x410070fc
    1f8c:	41005000 	.word	0x41005000
    1f90:	41004800 	.word	0x41004800
    1f94:	41004000 	.word	0x41004000

00001f98 <set_color_green>:
#define BUFFER_SET_LOW_ROUTINE_TRISE_TFALL				{0x02, 0x2D}




void set_color_green(void) {
    1f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t buffer_set_color_green[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN;
    1f9a:	2502      	movs	r5, #2
    1f9c:	ae01      	add	r6, sp, #4
    1f9e:	002a      	movs	r2, r5
    1fa0:	4907      	ldr	r1, [pc, #28]	; (1fc0 <set_color_green+0x28>)
    1fa2:	0030      	movs	r0, r6
    1fa4:	f001 fde2 	bl	3b6c <memcpy>
  packet.data = buffer_set_color_green;
  packet.address = KTD2026_DEVICE_ADDRESS;
    1fa8:	2331      	movs	r3, #49	; 0x31
  packet.data = buffer_set_color_green;
    1faa:	4c06      	ldr	r4, [pc, #24]	; (1fc4 <set_color_green+0x2c>)
    1fac:	6066      	str	r6, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    1fae:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    1fb0:	8065      	strh	r5, [r4, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    1fb2:	0021      	movs	r1, r4
    1fb4:	4804      	ldr	r0, [pc, #16]	; (1fc8 <set_color_green+0x30>)
    1fb6:	f7ff f86b 	bl	1090 <i2c_master_write_packet_wait>
    1fba:	2800      	cmp	r0, #0
    1fbc:	d1f9      	bne.n	1fb2 <set_color_green+0x1a>
         STATUS_OK) {
  }
}
    1fbe:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    1fc0:	00003c10 	.word	0x00003c10
    1fc4:	20000014 	.word	0x20000014
    1fc8:	200001dc 	.word	0x200001dc

00001fcc <set_color_red>:

void set_color_red(void) {
    1fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t buffer_set_color_red[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_RED;
    1fce:	2502      	movs	r5, #2
    1fd0:	4909      	ldr	r1, [pc, #36]	; (1ff8 <set_color_red+0x2c>)
    1fd2:	ae01      	add	r6, sp, #4
    1fd4:	002a      	movs	r2, r5
    1fd6:	1949      	adds	r1, r1, r5
    1fd8:	0030      	movs	r0, r6
    1fda:	f001 fdc7 	bl	3b6c <memcpy>
  packet.data = buffer_set_color_red;
  packet.address = KTD2026_DEVICE_ADDRESS;
    1fde:	2331      	movs	r3, #49	; 0x31
  packet.data = buffer_set_color_red;
    1fe0:	4c06      	ldr	r4, [pc, #24]	; (1ffc <set_color_red+0x30>)
    1fe2:	6066      	str	r6, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    1fe4:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    1fe6:	8065      	strh	r5, [r4, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    1fe8:	0021      	movs	r1, r4
    1fea:	4805      	ldr	r0, [pc, #20]	; (2000 <set_color_red+0x34>)
    1fec:	f7ff f850 	bl	1090 <i2c_master_write_packet_wait>
    1ff0:	2800      	cmp	r0, #0
    1ff2:	d1f9      	bne.n	1fe8 <set_color_red+0x1c>
         STATUS_OK) {
  }
}
    1ff4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	00003c10 	.word	0x00003c10
    1ffc:	20000014 	.word	0x20000014
    2000:	200001dc 	.word	0x200001dc

00002004 <set_color_blue>:

void set_color_blue(void) {
    2004:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t buffer_set_color_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE;
    2006:	2502      	movs	r5, #2
    2008:	4909      	ldr	r1, [pc, #36]	; (2030 <set_color_blue+0x2c>)
    200a:	ae01      	add	r6, sp, #4
    200c:	002a      	movs	r2, r5
    200e:	3104      	adds	r1, #4
    2010:	0030      	movs	r0, r6
    2012:	f001 fdab 	bl	3b6c <memcpy>
  packet.data = buffer_set_color_blue;
  packet.address = KTD2026_DEVICE_ADDRESS;
    2016:	2331      	movs	r3, #49	; 0x31
  packet.data = buffer_set_color_blue;
    2018:	4c06      	ldr	r4, [pc, #24]	; (2034 <set_color_blue+0x30>)
    201a:	6066      	str	r6, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    201c:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    201e:	8065      	strh	r5, [r4, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2020:	0021      	movs	r1, r4
    2022:	4805      	ldr	r0, [pc, #20]	; (2038 <set_color_blue+0x34>)
    2024:	f7ff f834 	bl	1090 <i2c_master_write_packet_wait>
    2028:	2800      	cmp	r0, #0
    202a:	d1f9      	bne.n	2020 <set_color_blue+0x1c>
         STATUS_OK) {
  }
}
    202c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00003c10 	.word	0x00003c10
    2034:	20000014 	.word	0x20000014
    2038:	200001dc 	.word	0x200001dc

0000203c <toggle_red_led>:
  }
}

void  toggle_red_led(void){
	static bool led_on = false;
	uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] = BUFFER_TURN_OFF_MAIN_DIGITAL;
    203c:	2204      	movs	r2, #4
void  toggle_red_led(void){
    203e:	b513      	push	{r0, r1, r4, lr}
	uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] = BUFFER_TURN_OFF_MAIN_DIGITAL;
    2040:	2100      	movs	r1, #0
    2042:	ab01      	add	r3, sp, #4
    2044:	701a      	strb	r2, [r3, #0]

	if(led_on)
    2046:	4a0b      	ldr	r2, [pc, #44]	; (2074 <toggle_red_led+0x38>)
	uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] = BUFFER_TURN_OFF_MAIN_DIGITAL;
    2048:	7059      	strb	r1, [r3, #1]
	if(led_on)
    204a:	7810      	ldrb	r0, [r2, #0]
    204c:	4288      	cmp	r0, r1
    204e:	d00d      	beq.n	206c <toggle_red_led+0x30>
	{
		led_on = false;
    2050:	7011      	strb	r1, [r2, #0]
	{
		led_on = true;
		buffer_reset_green_red_channel[1] = 0x01;
	}

	packet.data = buffer_reset_green_red_channel;
    2052:	4c09      	ldr	r4, [pc, #36]	; (2078 <toggle_red_led+0x3c>)
    2054:	6063      	str	r3, [r4, #4]
	packet.address = KTD2026_DEVICE_ADDRESS;
    2056:	2331      	movs	r3, #49	; 0x31
    2058:	8023      	strh	r3, [r4, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;
    205a:	3b2f      	subs	r3, #47	; 0x2f
    205c:	8063      	strh	r3, [r4, #2]

	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    205e:	0021      	movs	r1, r4
    2060:	4806      	ldr	r0, [pc, #24]	; (207c <toggle_red_led+0x40>)
    2062:	f7ff f815 	bl	1090 <i2c_master_write_packet_wait>
    2066:	2800      	cmp	r0, #0
    2068:	d1f9      	bne.n	205e <toggle_red_led+0x22>
	&packet)) != STATUS_OK) {
	}

}
    206a:	bd13      	pop	{r0, r1, r4, pc}
		led_on = true;
    206c:	2101      	movs	r1, #1
    206e:	7011      	strb	r1, [r2, #0]
		buffer_reset_green_red_channel[1] = 0x01;
    2070:	7059      	strb	r1, [r3, #1]
    2072:	e7ee      	b.n	2052 <toggle_red_led+0x16>
    2074:	20000094 	.word	0x20000094
    2078:	20000014 	.word	0x20000014
    207c:	200001dc 	.word	0x200001dc

00002080 <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2080:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2082:	2364      	movs	r3, #100	; 0x64





void i2c_master_setup(void) {
    2084:	b570      	push	{r4, r5, r6, lr}
    2086:	b08e      	sub	sp, #56	; 0x38
    2088:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    208a:	0389      	lsls	r1, r1, #14
    208c:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    208e:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2090:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2092:	4b1e      	ldr	r3, [pc, #120]	; (210c <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    2094:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2096:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2098:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    209a:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    209c:	310a      	adds	r1, #10
    209e:	4469      	add	r1, sp
    20a0:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    20a2:	a90c      	add	r1, sp, #48	; 0x30
    20a4:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    20a6:	2131      	movs	r1, #49	; 0x31
    20a8:	4469      	add	r1, sp
    20aa:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    20ac:	2132      	movs	r1, #50	; 0x32
    20ae:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    20b0:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    20b2:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    20b4:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    20b6:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    20b8:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    20ba:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    20bc:	700b      	strb	r3, [r1, #0]
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.buffer_timeout = 10000;
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    20be:	4e14      	ldr	r6, [pc, #80]	; (2110 <i2c_master_setup+0x90>)
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    20c0:	33d7      	adds	r3, #215	; 0xd7
    20c2:	8613      	strh	r3, [r2, #48]	; 0x30
  config_i2c_master.buffer_timeout = 10000;
    20c4:	4b13      	ldr	r3, [pc, #76]	; (2114 <i2c_master_setup+0x94>)
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    20c6:	4914      	ldr	r1, [pc, #80]	; (2118 <i2c_master_setup+0x98>)
    20c8:	0030      	movs	r0, r6
  config_i2c_master.buffer_timeout = 10000;
    20ca:	82d3      	strh	r3, [r2, #22]
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    20cc:	f7fe fdf8 	bl	cc0 <i2c_master_init>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    20d0:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    20d2:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    20d4:	69ec      	ldr	r4, [r5, #28]
    20d6:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    20d8:	d1fc      	bne.n	20d4 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    20da:	2302      	movs	r3, #2
    20dc:	682a      	ldr	r2, [r5, #0]
    20de:	4313      	orrs	r3, r2
    20e0:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    20e2:	6830      	ldr	r0, [r6, #0]
    20e4:	f7ff f9ac 	bl	1440 <_sercom_get_interrupt_vector>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    20e8:	231f      	movs	r3, #31
    20ea:	4018      	ands	r0, r3
    20ec:	3b1e      	subs	r3, #30
    20ee:	4083      	lsls	r3, r0
    20f0:	4a0a      	ldr	r2, [pc, #40]	; (211c <i2c_master_setup+0x9c>)
    20f2:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    20f4:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    20f6:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    20f8:	8b69      	ldrh	r1, [r5, #26]
    20fa:	4211      	tst	r1, r2
    20fc:	d103      	bne.n	2106 <i2c_master_setup+0x86>
		timeout_counter++;
    20fe:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2100:	4284      	cmp	r4, r0
    2102:	d3f9      	bcc.n	20f8 <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2104:	836a      	strh	r2, [r5, #26]
  i2c_master_enable(&i2c_master_instance);
}
    2106:	b00e      	add	sp, #56	; 0x38
    2108:	bd70      	pop	{r4, r5, r6, pc}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	00000d48 	.word	0x00000d48
    2110:	200001dc 	.word	0x200001dc
    2114:	00002710 	.word	0x00002710
    2118:	42001000 	.word	0x42001000
    211c:	e000e100 	.word	0xe000e100

00002120 <main>:
#include "system_logic.h"

#include "adc_sample.h"


int main(void) {
    2120:	b510      	push	{r4, lr}
  startup_sys_configs();
    2122:	f7fe fd35 	bl	b90 <startup_sys_configs>
  while (true) {
    system_state();						// Get latest system_state
    2126:	f7fe fd7f 	bl	c28 <system_state>
    system_logic();						// Invoke System Logic
    212a:	f7fe fc2b 	bl	984 <system_logic>
    212e:	e7fa      	b.n	2126 <main+0x6>

00002130 <__gnu_thumb1_case_uqi>:
    2130:	b402      	push	{r1}
    2132:	4671      	mov	r1, lr
    2134:	0849      	lsrs	r1, r1, #1
    2136:	0049      	lsls	r1, r1, #1
    2138:	5c09      	ldrb	r1, [r1, r0]
    213a:	0049      	lsls	r1, r1, #1
    213c:	448e      	add	lr, r1
    213e:	bc02      	pop	{r1}
    2140:	4770      	bx	lr
    2142:	46c0      	nop			; (mov r8, r8)

00002144 <__udivsi3>:
    2144:	2200      	movs	r2, #0
    2146:	0843      	lsrs	r3, r0, #1
    2148:	428b      	cmp	r3, r1
    214a:	d374      	bcc.n	2236 <__udivsi3+0xf2>
    214c:	0903      	lsrs	r3, r0, #4
    214e:	428b      	cmp	r3, r1
    2150:	d35f      	bcc.n	2212 <__udivsi3+0xce>
    2152:	0a03      	lsrs	r3, r0, #8
    2154:	428b      	cmp	r3, r1
    2156:	d344      	bcc.n	21e2 <__udivsi3+0x9e>
    2158:	0b03      	lsrs	r3, r0, #12
    215a:	428b      	cmp	r3, r1
    215c:	d328      	bcc.n	21b0 <__udivsi3+0x6c>
    215e:	0c03      	lsrs	r3, r0, #16
    2160:	428b      	cmp	r3, r1
    2162:	d30d      	bcc.n	2180 <__udivsi3+0x3c>
    2164:	22ff      	movs	r2, #255	; 0xff
    2166:	0209      	lsls	r1, r1, #8
    2168:	ba12      	rev	r2, r2
    216a:	0c03      	lsrs	r3, r0, #16
    216c:	428b      	cmp	r3, r1
    216e:	d302      	bcc.n	2176 <__udivsi3+0x32>
    2170:	1212      	asrs	r2, r2, #8
    2172:	0209      	lsls	r1, r1, #8
    2174:	d065      	beq.n	2242 <__udivsi3+0xfe>
    2176:	0b03      	lsrs	r3, r0, #12
    2178:	428b      	cmp	r3, r1
    217a:	d319      	bcc.n	21b0 <__udivsi3+0x6c>
    217c:	e000      	b.n	2180 <__udivsi3+0x3c>
    217e:	0a09      	lsrs	r1, r1, #8
    2180:	0bc3      	lsrs	r3, r0, #15
    2182:	428b      	cmp	r3, r1
    2184:	d301      	bcc.n	218a <__udivsi3+0x46>
    2186:	03cb      	lsls	r3, r1, #15
    2188:	1ac0      	subs	r0, r0, r3
    218a:	4152      	adcs	r2, r2
    218c:	0b83      	lsrs	r3, r0, #14
    218e:	428b      	cmp	r3, r1
    2190:	d301      	bcc.n	2196 <__udivsi3+0x52>
    2192:	038b      	lsls	r3, r1, #14
    2194:	1ac0      	subs	r0, r0, r3
    2196:	4152      	adcs	r2, r2
    2198:	0b43      	lsrs	r3, r0, #13
    219a:	428b      	cmp	r3, r1
    219c:	d301      	bcc.n	21a2 <__udivsi3+0x5e>
    219e:	034b      	lsls	r3, r1, #13
    21a0:	1ac0      	subs	r0, r0, r3
    21a2:	4152      	adcs	r2, r2
    21a4:	0b03      	lsrs	r3, r0, #12
    21a6:	428b      	cmp	r3, r1
    21a8:	d301      	bcc.n	21ae <__udivsi3+0x6a>
    21aa:	030b      	lsls	r3, r1, #12
    21ac:	1ac0      	subs	r0, r0, r3
    21ae:	4152      	adcs	r2, r2
    21b0:	0ac3      	lsrs	r3, r0, #11
    21b2:	428b      	cmp	r3, r1
    21b4:	d301      	bcc.n	21ba <__udivsi3+0x76>
    21b6:	02cb      	lsls	r3, r1, #11
    21b8:	1ac0      	subs	r0, r0, r3
    21ba:	4152      	adcs	r2, r2
    21bc:	0a83      	lsrs	r3, r0, #10
    21be:	428b      	cmp	r3, r1
    21c0:	d301      	bcc.n	21c6 <__udivsi3+0x82>
    21c2:	028b      	lsls	r3, r1, #10
    21c4:	1ac0      	subs	r0, r0, r3
    21c6:	4152      	adcs	r2, r2
    21c8:	0a43      	lsrs	r3, r0, #9
    21ca:	428b      	cmp	r3, r1
    21cc:	d301      	bcc.n	21d2 <__udivsi3+0x8e>
    21ce:	024b      	lsls	r3, r1, #9
    21d0:	1ac0      	subs	r0, r0, r3
    21d2:	4152      	adcs	r2, r2
    21d4:	0a03      	lsrs	r3, r0, #8
    21d6:	428b      	cmp	r3, r1
    21d8:	d301      	bcc.n	21de <__udivsi3+0x9a>
    21da:	020b      	lsls	r3, r1, #8
    21dc:	1ac0      	subs	r0, r0, r3
    21de:	4152      	adcs	r2, r2
    21e0:	d2cd      	bcs.n	217e <__udivsi3+0x3a>
    21e2:	09c3      	lsrs	r3, r0, #7
    21e4:	428b      	cmp	r3, r1
    21e6:	d301      	bcc.n	21ec <__udivsi3+0xa8>
    21e8:	01cb      	lsls	r3, r1, #7
    21ea:	1ac0      	subs	r0, r0, r3
    21ec:	4152      	adcs	r2, r2
    21ee:	0983      	lsrs	r3, r0, #6
    21f0:	428b      	cmp	r3, r1
    21f2:	d301      	bcc.n	21f8 <__udivsi3+0xb4>
    21f4:	018b      	lsls	r3, r1, #6
    21f6:	1ac0      	subs	r0, r0, r3
    21f8:	4152      	adcs	r2, r2
    21fa:	0943      	lsrs	r3, r0, #5
    21fc:	428b      	cmp	r3, r1
    21fe:	d301      	bcc.n	2204 <__udivsi3+0xc0>
    2200:	014b      	lsls	r3, r1, #5
    2202:	1ac0      	subs	r0, r0, r3
    2204:	4152      	adcs	r2, r2
    2206:	0903      	lsrs	r3, r0, #4
    2208:	428b      	cmp	r3, r1
    220a:	d301      	bcc.n	2210 <__udivsi3+0xcc>
    220c:	010b      	lsls	r3, r1, #4
    220e:	1ac0      	subs	r0, r0, r3
    2210:	4152      	adcs	r2, r2
    2212:	08c3      	lsrs	r3, r0, #3
    2214:	428b      	cmp	r3, r1
    2216:	d301      	bcc.n	221c <__udivsi3+0xd8>
    2218:	00cb      	lsls	r3, r1, #3
    221a:	1ac0      	subs	r0, r0, r3
    221c:	4152      	adcs	r2, r2
    221e:	0883      	lsrs	r3, r0, #2
    2220:	428b      	cmp	r3, r1
    2222:	d301      	bcc.n	2228 <__udivsi3+0xe4>
    2224:	008b      	lsls	r3, r1, #2
    2226:	1ac0      	subs	r0, r0, r3
    2228:	4152      	adcs	r2, r2
    222a:	0843      	lsrs	r3, r0, #1
    222c:	428b      	cmp	r3, r1
    222e:	d301      	bcc.n	2234 <__udivsi3+0xf0>
    2230:	004b      	lsls	r3, r1, #1
    2232:	1ac0      	subs	r0, r0, r3
    2234:	4152      	adcs	r2, r2
    2236:	1a41      	subs	r1, r0, r1
    2238:	d200      	bcs.n	223c <__udivsi3+0xf8>
    223a:	4601      	mov	r1, r0
    223c:	4152      	adcs	r2, r2
    223e:	4610      	mov	r0, r2
    2240:	4770      	bx	lr
    2242:	e7ff      	b.n	2244 <__udivsi3+0x100>
    2244:	b501      	push	{r0, lr}
    2246:	2000      	movs	r0, #0
    2248:	f000 f806 	bl	2258 <__aeabi_idiv0>
    224c:	bd02      	pop	{r1, pc}
    224e:	46c0      	nop			; (mov r8, r8)

00002250 <__aeabi_uidivmod>:
    2250:	2900      	cmp	r1, #0
    2252:	d0f7      	beq.n	2244 <__udivsi3+0x100>
    2254:	e776      	b.n	2144 <__udivsi3>
    2256:	4770      	bx	lr

00002258 <__aeabi_idiv0>:
    2258:	4770      	bx	lr
    225a:	46c0      	nop			; (mov r8, r8)

0000225c <__aeabi_dadd>:
    225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    225e:	4645      	mov	r5, r8
    2260:	46de      	mov	lr, fp
    2262:	4657      	mov	r7, sl
    2264:	464e      	mov	r6, r9
    2266:	030c      	lsls	r4, r1, #12
    2268:	b5e0      	push	{r5, r6, r7, lr}
    226a:	004e      	lsls	r6, r1, #1
    226c:	0fc9      	lsrs	r1, r1, #31
    226e:	4688      	mov	r8, r1
    2270:	000d      	movs	r5, r1
    2272:	0a61      	lsrs	r1, r4, #9
    2274:	0f44      	lsrs	r4, r0, #29
    2276:	430c      	orrs	r4, r1
    2278:	00c7      	lsls	r7, r0, #3
    227a:	0319      	lsls	r1, r3, #12
    227c:	0058      	lsls	r0, r3, #1
    227e:	0fdb      	lsrs	r3, r3, #31
    2280:	469b      	mov	fp, r3
    2282:	0a4b      	lsrs	r3, r1, #9
    2284:	0f51      	lsrs	r1, r2, #29
    2286:	430b      	orrs	r3, r1
    2288:	0d76      	lsrs	r6, r6, #21
    228a:	0d40      	lsrs	r0, r0, #21
    228c:	0019      	movs	r1, r3
    228e:	00d2      	lsls	r2, r2, #3
    2290:	45d8      	cmp	r8, fp
    2292:	d100      	bne.n	2296 <__aeabi_dadd+0x3a>
    2294:	e0ae      	b.n	23f4 <__aeabi_dadd+0x198>
    2296:	1a35      	subs	r5, r6, r0
    2298:	2d00      	cmp	r5, #0
    229a:	dc00      	bgt.n	229e <__aeabi_dadd+0x42>
    229c:	e0f6      	b.n	248c <__aeabi_dadd+0x230>
    229e:	2800      	cmp	r0, #0
    22a0:	d10f      	bne.n	22c2 <__aeabi_dadd+0x66>
    22a2:	4313      	orrs	r3, r2
    22a4:	d100      	bne.n	22a8 <__aeabi_dadd+0x4c>
    22a6:	e0db      	b.n	2460 <__aeabi_dadd+0x204>
    22a8:	1e6b      	subs	r3, r5, #1
    22aa:	2b00      	cmp	r3, #0
    22ac:	d000      	beq.n	22b0 <__aeabi_dadd+0x54>
    22ae:	e137      	b.n	2520 <__aeabi_dadd+0x2c4>
    22b0:	1aba      	subs	r2, r7, r2
    22b2:	4297      	cmp	r7, r2
    22b4:	41bf      	sbcs	r7, r7
    22b6:	1a64      	subs	r4, r4, r1
    22b8:	427f      	negs	r7, r7
    22ba:	1be4      	subs	r4, r4, r7
    22bc:	2601      	movs	r6, #1
    22be:	0017      	movs	r7, r2
    22c0:	e024      	b.n	230c <__aeabi_dadd+0xb0>
    22c2:	4bc6      	ldr	r3, [pc, #792]	; (25dc <__aeabi_dadd+0x380>)
    22c4:	429e      	cmp	r6, r3
    22c6:	d04d      	beq.n	2364 <__aeabi_dadd+0x108>
    22c8:	2380      	movs	r3, #128	; 0x80
    22ca:	041b      	lsls	r3, r3, #16
    22cc:	4319      	orrs	r1, r3
    22ce:	2d38      	cmp	r5, #56	; 0x38
    22d0:	dd00      	ble.n	22d4 <__aeabi_dadd+0x78>
    22d2:	e107      	b.n	24e4 <__aeabi_dadd+0x288>
    22d4:	2d1f      	cmp	r5, #31
    22d6:	dd00      	ble.n	22da <__aeabi_dadd+0x7e>
    22d8:	e138      	b.n	254c <__aeabi_dadd+0x2f0>
    22da:	2020      	movs	r0, #32
    22dc:	1b43      	subs	r3, r0, r5
    22de:	469a      	mov	sl, r3
    22e0:	000b      	movs	r3, r1
    22e2:	4650      	mov	r0, sl
    22e4:	4083      	lsls	r3, r0
    22e6:	4699      	mov	r9, r3
    22e8:	0013      	movs	r3, r2
    22ea:	4648      	mov	r0, r9
    22ec:	40eb      	lsrs	r3, r5
    22ee:	4318      	orrs	r0, r3
    22f0:	0003      	movs	r3, r0
    22f2:	4650      	mov	r0, sl
    22f4:	4082      	lsls	r2, r0
    22f6:	1e50      	subs	r0, r2, #1
    22f8:	4182      	sbcs	r2, r0
    22fa:	40e9      	lsrs	r1, r5
    22fc:	431a      	orrs	r2, r3
    22fe:	1aba      	subs	r2, r7, r2
    2300:	1a61      	subs	r1, r4, r1
    2302:	4297      	cmp	r7, r2
    2304:	41a4      	sbcs	r4, r4
    2306:	0017      	movs	r7, r2
    2308:	4264      	negs	r4, r4
    230a:	1b0c      	subs	r4, r1, r4
    230c:	0223      	lsls	r3, r4, #8
    230e:	d562      	bpl.n	23d6 <__aeabi_dadd+0x17a>
    2310:	0264      	lsls	r4, r4, #9
    2312:	0a65      	lsrs	r5, r4, #9
    2314:	2d00      	cmp	r5, #0
    2316:	d100      	bne.n	231a <__aeabi_dadd+0xbe>
    2318:	e0df      	b.n	24da <__aeabi_dadd+0x27e>
    231a:	0028      	movs	r0, r5
    231c:	f001 fbe4 	bl	3ae8 <__clzsi2>
    2320:	0003      	movs	r3, r0
    2322:	3b08      	subs	r3, #8
    2324:	2b1f      	cmp	r3, #31
    2326:	dd00      	ble.n	232a <__aeabi_dadd+0xce>
    2328:	e0d2      	b.n	24d0 <__aeabi_dadd+0x274>
    232a:	2220      	movs	r2, #32
    232c:	003c      	movs	r4, r7
    232e:	1ad2      	subs	r2, r2, r3
    2330:	409d      	lsls	r5, r3
    2332:	40d4      	lsrs	r4, r2
    2334:	409f      	lsls	r7, r3
    2336:	4325      	orrs	r5, r4
    2338:	429e      	cmp	r6, r3
    233a:	dd00      	ble.n	233e <__aeabi_dadd+0xe2>
    233c:	e0c4      	b.n	24c8 <__aeabi_dadd+0x26c>
    233e:	1b9e      	subs	r6, r3, r6
    2340:	1c73      	adds	r3, r6, #1
    2342:	2b1f      	cmp	r3, #31
    2344:	dd00      	ble.n	2348 <__aeabi_dadd+0xec>
    2346:	e0f1      	b.n	252c <__aeabi_dadd+0x2d0>
    2348:	2220      	movs	r2, #32
    234a:	0038      	movs	r0, r7
    234c:	0029      	movs	r1, r5
    234e:	1ad2      	subs	r2, r2, r3
    2350:	40d8      	lsrs	r0, r3
    2352:	4091      	lsls	r1, r2
    2354:	4097      	lsls	r7, r2
    2356:	002c      	movs	r4, r5
    2358:	4301      	orrs	r1, r0
    235a:	1e78      	subs	r0, r7, #1
    235c:	4187      	sbcs	r7, r0
    235e:	40dc      	lsrs	r4, r3
    2360:	2600      	movs	r6, #0
    2362:	430f      	orrs	r7, r1
    2364:	077b      	lsls	r3, r7, #29
    2366:	d009      	beq.n	237c <__aeabi_dadd+0x120>
    2368:	230f      	movs	r3, #15
    236a:	403b      	ands	r3, r7
    236c:	2b04      	cmp	r3, #4
    236e:	d005      	beq.n	237c <__aeabi_dadd+0x120>
    2370:	1d3b      	adds	r3, r7, #4
    2372:	42bb      	cmp	r3, r7
    2374:	41bf      	sbcs	r7, r7
    2376:	427f      	negs	r7, r7
    2378:	19e4      	adds	r4, r4, r7
    237a:	001f      	movs	r7, r3
    237c:	0223      	lsls	r3, r4, #8
    237e:	d52c      	bpl.n	23da <__aeabi_dadd+0x17e>
    2380:	4b96      	ldr	r3, [pc, #600]	; (25dc <__aeabi_dadd+0x380>)
    2382:	3601      	adds	r6, #1
    2384:	429e      	cmp	r6, r3
    2386:	d100      	bne.n	238a <__aeabi_dadd+0x12e>
    2388:	e09a      	b.n	24c0 <__aeabi_dadd+0x264>
    238a:	4645      	mov	r5, r8
    238c:	4b94      	ldr	r3, [pc, #592]	; (25e0 <__aeabi_dadd+0x384>)
    238e:	08ff      	lsrs	r7, r7, #3
    2390:	401c      	ands	r4, r3
    2392:	0760      	lsls	r0, r4, #29
    2394:	0576      	lsls	r6, r6, #21
    2396:	0264      	lsls	r4, r4, #9
    2398:	4307      	orrs	r7, r0
    239a:	0b24      	lsrs	r4, r4, #12
    239c:	0d76      	lsrs	r6, r6, #21
    239e:	2100      	movs	r1, #0
    23a0:	0324      	lsls	r4, r4, #12
    23a2:	0b23      	lsrs	r3, r4, #12
    23a4:	0d0c      	lsrs	r4, r1, #20
    23a6:	4a8f      	ldr	r2, [pc, #572]	; (25e4 <__aeabi_dadd+0x388>)
    23a8:	0524      	lsls	r4, r4, #20
    23aa:	431c      	orrs	r4, r3
    23ac:	4014      	ands	r4, r2
    23ae:	0533      	lsls	r3, r6, #20
    23b0:	4323      	orrs	r3, r4
    23b2:	005b      	lsls	r3, r3, #1
    23b4:	07ed      	lsls	r5, r5, #31
    23b6:	085b      	lsrs	r3, r3, #1
    23b8:	432b      	orrs	r3, r5
    23ba:	0038      	movs	r0, r7
    23bc:	0019      	movs	r1, r3
    23be:	bc3c      	pop	{r2, r3, r4, r5}
    23c0:	4690      	mov	r8, r2
    23c2:	4699      	mov	r9, r3
    23c4:	46a2      	mov	sl, r4
    23c6:	46ab      	mov	fp, r5
    23c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23ca:	4664      	mov	r4, ip
    23cc:	4304      	orrs	r4, r0
    23ce:	d100      	bne.n	23d2 <__aeabi_dadd+0x176>
    23d0:	e211      	b.n	27f6 <__aeabi_dadd+0x59a>
    23d2:	0004      	movs	r4, r0
    23d4:	4667      	mov	r7, ip
    23d6:	077b      	lsls	r3, r7, #29
    23d8:	d1c6      	bne.n	2368 <__aeabi_dadd+0x10c>
    23da:	4645      	mov	r5, r8
    23dc:	0760      	lsls	r0, r4, #29
    23de:	08ff      	lsrs	r7, r7, #3
    23e0:	4307      	orrs	r7, r0
    23e2:	08e4      	lsrs	r4, r4, #3
    23e4:	4b7d      	ldr	r3, [pc, #500]	; (25dc <__aeabi_dadd+0x380>)
    23e6:	429e      	cmp	r6, r3
    23e8:	d030      	beq.n	244c <__aeabi_dadd+0x1f0>
    23ea:	0324      	lsls	r4, r4, #12
    23ec:	0576      	lsls	r6, r6, #21
    23ee:	0b24      	lsrs	r4, r4, #12
    23f0:	0d76      	lsrs	r6, r6, #21
    23f2:	e7d4      	b.n	239e <__aeabi_dadd+0x142>
    23f4:	1a33      	subs	r3, r6, r0
    23f6:	469a      	mov	sl, r3
    23f8:	2b00      	cmp	r3, #0
    23fa:	dd78      	ble.n	24ee <__aeabi_dadd+0x292>
    23fc:	2800      	cmp	r0, #0
    23fe:	d031      	beq.n	2464 <__aeabi_dadd+0x208>
    2400:	4876      	ldr	r0, [pc, #472]	; (25dc <__aeabi_dadd+0x380>)
    2402:	4286      	cmp	r6, r0
    2404:	d0ae      	beq.n	2364 <__aeabi_dadd+0x108>
    2406:	2080      	movs	r0, #128	; 0x80
    2408:	0400      	lsls	r0, r0, #16
    240a:	4301      	orrs	r1, r0
    240c:	4653      	mov	r3, sl
    240e:	2b38      	cmp	r3, #56	; 0x38
    2410:	dc00      	bgt.n	2414 <__aeabi_dadd+0x1b8>
    2412:	e0e9      	b.n	25e8 <__aeabi_dadd+0x38c>
    2414:	430a      	orrs	r2, r1
    2416:	1e51      	subs	r1, r2, #1
    2418:	418a      	sbcs	r2, r1
    241a:	2100      	movs	r1, #0
    241c:	19d2      	adds	r2, r2, r7
    241e:	42ba      	cmp	r2, r7
    2420:	41bf      	sbcs	r7, r7
    2422:	1909      	adds	r1, r1, r4
    2424:	427c      	negs	r4, r7
    2426:	0017      	movs	r7, r2
    2428:	190c      	adds	r4, r1, r4
    242a:	0223      	lsls	r3, r4, #8
    242c:	d5d3      	bpl.n	23d6 <__aeabi_dadd+0x17a>
    242e:	4b6b      	ldr	r3, [pc, #428]	; (25dc <__aeabi_dadd+0x380>)
    2430:	3601      	adds	r6, #1
    2432:	429e      	cmp	r6, r3
    2434:	d100      	bne.n	2438 <__aeabi_dadd+0x1dc>
    2436:	e13a      	b.n	26ae <__aeabi_dadd+0x452>
    2438:	2001      	movs	r0, #1
    243a:	4b69      	ldr	r3, [pc, #420]	; (25e0 <__aeabi_dadd+0x384>)
    243c:	401c      	ands	r4, r3
    243e:	087b      	lsrs	r3, r7, #1
    2440:	4007      	ands	r7, r0
    2442:	431f      	orrs	r7, r3
    2444:	07e0      	lsls	r0, r4, #31
    2446:	4307      	orrs	r7, r0
    2448:	0864      	lsrs	r4, r4, #1
    244a:	e78b      	b.n	2364 <__aeabi_dadd+0x108>
    244c:	0023      	movs	r3, r4
    244e:	433b      	orrs	r3, r7
    2450:	d100      	bne.n	2454 <__aeabi_dadd+0x1f8>
    2452:	e1cb      	b.n	27ec <__aeabi_dadd+0x590>
    2454:	2280      	movs	r2, #128	; 0x80
    2456:	0312      	lsls	r2, r2, #12
    2458:	4314      	orrs	r4, r2
    245a:	0324      	lsls	r4, r4, #12
    245c:	0b24      	lsrs	r4, r4, #12
    245e:	e79e      	b.n	239e <__aeabi_dadd+0x142>
    2460:	002e      	movs	r6, r5
    2462:	e77f      	b.n	2364 <__aeabi_dadd+0x108>
    2464:	0008      	movs	r0, r1
    2466:	4310      	orrs	r0, r2
    2468:	d100      	bne.n	246c <__aeabi_dadd+0x210>
    246a:	e0b4      	b.n	25d6 <__aeabi_dadd+0x37a>
    246c:	1e58      	subs	r0, r3, #1
    246e:	2800      	cmp	r0, #0
    2470:	d000      	beq.n	2474 <__aeabi_dadd+0x218>
    2472:	e0de      	b.n	2632 <__aeabi_dadd+0x3d6>
    2474:	18ba      	adds	r2, r7, r2
    2476:	42ba      	cmp	r2, r7
    2478:	419b      	sbcs	r3, r3
    247a:	1864      	adds	r4, r4, r1
    247c:	425b      	negs	r3, r3
    247e:	18e4      	adds	r4, r4, r3
    2480:	0017      	movs	r7, r2
    2482:	2601      	movs	r6, #1
    2484:	0223      	lsls	r3, r4, #8
    2486:	d5a6      	bpl.n	23d6 <__aeabi_dadd+0x17a>
    2488:	2602      	movs	r6, #2
    248a:	e7d5      	b.n	2438 <__aeabi_dadd+0x1dc>
    248c:	2d00      	cmp	r5, #0
    248e:	d16e      	bne.n	256e <__aeabi_dadd+0x312>
    2490:	1c70      	adds	r0, r6, #1
    2492:	0540      	lsls	r0, r0, #21
    2494:	0d40      	lsrs	r0, r0, #21
    2496:	2801      	cmp	r0, #1
    2498:	dc00      	bgt.n	249c <__aeabi_dadd+0x240>
    249a:	e0f9      	b.n	2690 <__aeabi_dadd+0x434>
    249c:	1ab8      	subs	r0, r7, r2
    249e:	4684      	mov	ip, r0
    24a0:	4287      	cmp	r7, r0
    24a2:	4180      	sbcs	r0, r0
    24a4:	1ae5      	subs	r5, r4, r3
    24a6:	4240      	negs	r0, r0
    24a8:	1a2d      	subs	r5, r5, r0
    24aa:	0228      	lsls	r0, r5, #8
    24ac:	d400      	bmi.n	24b0 <__aeabi_dadd+0x254>
    24ae:	e089      	b.n	25c4 <__aeabi_dadd+0x368>
    24b0:	1bd7      	subs	r7, r2, r7
    24b2:	42ba      	cmp	r2, r7
    24b4:	4192      	sbcs	r2, r2
    24b6:	1b1c      	subs	r4, r3, r4
    24b8:	4252      	negs	r2, r2
    24ba:	1aa5      	subs	r5, r4, r2
    24bc:	46d8      	mov	r8, fp
    24be:	e729      	b.n	2314 <__aeabi_dadd+0xb8>
    24c0:	4645      	mov	r5, r8
    24c2:	2400      	movs	r4, #0
    24c4:	2700      	movs	r7, #0
    24c6:	e76a      	b.n	239e <__aeabi_dadd+0x142>
    24c8:	4c45      	ldr	r4, [pc, #276]	; (25e0 <__aeabi_dadd+0x384>)
    24ca:	1af6      	subs	r6, r6, r3
    24cc:	402c      	ands	r4, r5
    24ce:	e749      	b.n	2364 <__aeabi_dadd+0x108>
    24d0:	003d      	movs	r5, r7
    24d2:	3828      	subs	r0, #40	; 0x28
    24d4:	4085      	lsls	r5, r0
    24d6:	2700      	movs	r7, #0
    24d8:	e72e      	b.n	2338 <__aeabi_dadd+0xdc>
    24da:	0038      	movs	r0, r7
    24dc:	f001 fb04 	bl	3ae8 <__clzsi2>
    24e0:	3020      	adds	r0, #32
    24e2:	e71d      	b.n	2320 <__aeabi_dadd+0xc4>
    24e4:	430a      	orrs	r2, r1
    24e6:	1e51      	subs	r1, r2, #1
    24e8:	418a      	sbcs	r2, r1
    24ea:	2100      	movs	r1, #0
    24ec:	e707      	b.n	22fe <__aeabi_dadd+0xa2>
    24ee:	2b00      	cmp	r3, #0
    24f0:	d000      	beq.n	24f4 <__aeabi_dadd+0x298>
    24f2:	e0f3      	b.n	26dc <__aeabi_dadd+0x480>
    24f4:	1c70      	adds	r0, r6, #1
    24f6:	0543      	lsls	r3, r0, #21
    24f8:	0d5b      	lsrs	r3, r3, #21
    24fa:	2b01      	cmp	r3, #1
    24fc:	dc00      	bgt.n	2500 <__aeabi_dadd+0x2a4>
    24fe:	e0ad      	b.n	265c <__aeabi_dadd+0x400>
    2500:	4b36      	ldr	r3, [pc, #216]	; (25dc <__aeabi_dadd+0x380>)
    2502:	4298      	cmp	r0, r3
    2504:	d100      	bne.n	2508 <__aeabi_dadd+0x2ac>
    2506:	e0d1      	b.n	26ac <__aeabi_dadd+0x450>
    2508:	18ba      	adds	r2, r7, r2
    250a:	42ba      	cmp	r2, r7
    250c:	41bf      	sbcs	r7, r7
    250e:	1864      	adds	r4, r4, r1
    2510:	427f      	negs	r7, r7
    2512:	19e4      	adds	r4, r4, r7
    2514:	07e7      	lsls	r7, r4, #31
    2516:	0852      	lsrs	r2, r2, #1
    2518:	4317      	orrs	r7, r2
    251a:	0864      	lsrs	r4, r4, #1
    251c:	0006      	movs	r6, r0
    251e:	e721      	b.n	2364 <__aeabi_dadd+0x108>
    2520:	482e      	ldr	r0, [pc, #184]	; (25dc <__aeabi_dadd+0x380>)
    2522:	4285      	cmp	r5, r0
    2524:	d100      	bne.n	2528 <__aeabi_dadd+0x2cc>
    2526:	e093      	b.n	2650 <__aeabi_dadd+0x3f4>
    2528:	001d      	movs	r5, r3
    252a:	e6d0      	b.n	22ce <__aeabi_dadd+0x72>
    252c:	0029      	movs	r1, r5
    252e:	3e1f      	subs	r6, #31
    2530:	40f1      	lsrs	r1, r6
    2532:	2b20      	cmp	r3, #32
    2534:	d100      	bne.n	2538 <__aeabi_dadd+0x2dc>
    2536:	e08d      	b.n	2654 <__aeabi_dadd+0x3f8>
    2538:	2240      	movs	r2, #64	; 0x40
    253a:	1ad3      	subs	r3, r2, r3
    253c:	409d      	lsls	r5, r3
    253e:	432f      	orrs	r7, r5
    2540:	1e7d      	subs	r5, r7, #1
    2542:	41af      	sbcs	r7, r5
    2544:	2400      	movs	r4, #0
    2546:	430f      	orrs	r7, r1
    2548:	2600      	movs	r6, #0
    254a:	e744      	b.n	23d6 <__aeabi_dadd+0x17a>
    254c:	002b      	movs	r3, r5
    254e:	0008      	movs	r0, r1
    2550:	3b20      	subs	r3, #32
    2552:	40d8      	lsrs	r0, r3
    2554:	0003      	movs	r3, r0
    2556:	2d20      	cmp	r5, #32
    2558:	d100      	bne.n	255c <__aeabi_dadd+0x300>
    255a:	e07d      	b.n	2658 <__aeabi_dadd+0x3fc>
    255c:	2040      	movs	r0, #64	; 0x40
    255e:	1b45      	subs	r5, r0, r5
    2560:	40a9      	lsls	r1, r5
    2562:	430a      	orrs	r2, r1
    2564:	1e51      	subs	r1, r2, #1
    2566:	418a      	sbcs	r2, r1
    2568:	2100      	movs	r1, #0
    256a:	431a      	orrs	r2, r3
    256c:	e6c7      	b.n	22fe <__aeabi_dadd+0xa2>
    256e:	2e00      	cmp	r6, #0
    2570:	d050      	beq.n	2614 <__aeabi_dadd+0x3b8>
    2572:	4e1a      	ldr	r6, [pc, #104]	; (25dc <__aeabi_dadd+0x380>)
    2574:	42b0      	cmp	r0, r6
    2576:	d057      	beq.n	2628 <__aeabi_dadd+0x3cc>
    2578:	2680      	movs	r6, #128	; 0x80
    257a:	426b      	negs	r3, r5
    257c:	4699      	mov	r9, r3
    257e:	0436      	lsls	r6, r6, #16
    2580:	4334      	orrs	r4, r6
    2582:	464b      	mov	r3, r9
    2584:	2b38      	cmp	r3, #56	; 0x38
    2586:	dd00      	ble.n	258a <__aeabi_dadd+0x32e>
    2588:	e0d6      	b.n	2738 <__aeabi_dadd+0x4dc>
    258a:	2b1f      	cmp	r3, #31
    258c:	dd00      	ble.n	2590 <__aeabi_dadd+0x334>
    258e:	e135      	b.n	27fc <__aeabi_dadd+0x5a0>
    2590:	2620      	movs	r6, #32
    2592:	1af5      	subs	r5, r6, r3
    2594:	0026      	movs	r6, r4
    2596:	40ae      	lsls	r6, r5
    2598:	46b2      	mov	sl, r6
    259a:	003e      	movs	r6, r7
    259c:	40de      	lsrs	r6, r3
    259e:	46ac      	mov	ip, r5
    25a0:	0035      	movs	r5, r6
    25a2:	4656      	mov	r6, sl
    25a4:	432e      	orrs	r6, r5
    25a6:	4665      	mov	r5, ip
    25a8:	40af      	lsls	r7, r5
    25aa:	1e7d      	subs	r5, r7, #1
    25ac:	41af      	sbcs	r7, r5
    25ae:	40dc      	lsrs	r4, r3
    25b0:	4337      	orrs	r7, r6
    25b2:	1bd7      	subs	r7, r2, r7
    25b4:	42ba      	cmp	r2, r7
    25b6:	4192      	sbcs	r2, r2
    25b8:	1b0c      	subs	r4, r1, r4
    25ba:	4252      	negs	r2, r2
    25bc:	1aa4      	subs	r4, r4, r2
    25be:	0006      	movs	r6, r0
    25c0:	46d8      	mov	r8, fp
    25c2:	e6a3      	b.n	230c <__aeabi_dadd+0xb0>
    25c4:	4664      	mov	r4, ip
    25c6:	4667      	mov	r7, ip
    25c8:	432c      	orrs	r4, r5
    25ca:	d000      	beq.n	25ce <__aeabi_dadd+0x372>
    25cc:	e6a2      	b.n	2314 <__aeabi_dadd+0xb8>
    25ce:	2500      	movs	r5, #0
    25d0:	2600      	movs	r6, #0
    25d2:	2700      	movs	r7, #0
    25d4:	e706      	b.n	23e4 <__aeabi_dadd+0x188>
    25d6:	001e      	movs	r6, r3
    25d8:	e6c4      	b.n	2364 <__aeabi_dadd+0x108>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	000007ff 	.word	0x000007ff
    25e0:	ff7fffff 	.word	0xff7fffff
    25e4:	800fffff 	.word	0x800fffff
    25e8:	2b1f      	cmp	r3, #31
    25ea:	dc63      	bgt.n	26b4 <__aeabi_dadd+0x458>
    25ec:	2020      	movs	r0, #32
    25ee:	1ac3      	subs	r3, r0, r3
    25f0:	0008      	movs	r0, r1
    25f2:	4098      	lsls	r0, r3
    25f4:	469c      	mov	ip, r3
    25f6:	4683      	mov	fp, r0
    25f8:	4653      	mov	r3, sl
    25fa:	0010      	movs	r0, r2
    25fc:	40d8      	lsrs	r0, r3
    25fe:	0003      	movs	r3, r0
    2600:	4658      	mov	r0, fp
    2602:	4318      	orrs	r0, r3
    2604:	4663      	mov	r3, ip
    2606:	409a      	lsls	r2, r3
    2608:	1e53      	subs	r3, r2, #1
    260a:	419a      	sbcs	r2, r3
    260c:	4653      	mov	r3, sl
    260e:	4302      	orrs	r2, r0
    2610:	40d9      	lsrs	r1, r3
    2612:	e703      	b.n	241c <__aeabi_dadd+0x1c0>
    2614:	0026      	movs	r6, r4
    2616:	433e      	orrs	r6, r7
    2618:	d006      	beq.n	2628 <__aeabi_dadd+0x3cc>
    261a:	43eb      	mvns	r3, r5
    261c:	4699      	mov	r9, r3
    261e:	2b00      	cmp	r3, #0
    2620:	d0c7      	beq.n	25b2 <__aeabi_dadd+0x356>
    2622:	4e94      	ldr	r6, [pc, #592]	; (2874 <__aeabi_dadd+0x618>)
    2624:	42b0      	cmp	r0, r6
    2626:	d1ac      	bne.n	2582 <__aeabi_dadd+0x326>
    2628:	000c      	movs	r4, r1
    262a:	0017      	movs	r7, r2
    262c:	0006      	movs	r6, r0
    262e:	46d8      	mov	r8, fp
    2630:	e698      	b.n	2364 <__aeabi_dadd+0x108>
    2632:	4b90      	ldr	r3, [pc, #576]	; (2874 <__aeabi_dadd+0x618>)
    2634:	459a      	cmp	sl, r3
    2636:	d00b      	beq.n	2650 <__aeabi_dadd+0x3f4>
    2638:	4682      	mov	sl, r0
    263a:	e6e7      	b.n	240c <__aeabi_dadd+0x1b0>
    263c:	2800      	cmp	r0, #0
    263e:	d000      	beq.n	2642 <__aeabi_dadd+0x3e6>
    2640:	e09e      	b.n	2780 <__aeabi_dadd+0x524>
    2642:	0018      	movs	r0, r3
    2644:	4310      	orrs	r0, r2
    2646:	d100      	bne.n	264a <__aeabi_dadd+0x3ee>
    2648:	e0e9      	b.n	281e <__aeabi_dadd+0x5c2>
    264a:	001c      	movs	r4, r3
    264c:	0017      	movs	r7, r2
    264e:	46d8      	mov	r8, fp
    2650:	4e88      	ldr	r6, [pc, #544]	; (2874 <__aeabi_dadd+0x618>)
    2652:	e687      	b.n	2364 <__aeabi_dadd+0x108>
    2654:	2500      	movs	r5, #0
    2656:	e772      	b.n	253e <__aeabi_dadd+0x2e2>
    2658:	2100      	movs	r1, #0
    265a:	e782      	b.n	2562 <__aeabi_dadd+0x306>
    265c:	0023      	movs	r3, r4
    265e:	433b      	orrs	r3, r7
    2660:	2e00      	cmp	r6, #0
    2662:	d000      	beq.n	2666 <__aeabi_dadd+0x40a>
    2664:	e0ab      	b.n	27be <__aeabi_dadd+0x562>
    2666:	2b00      	cmp	r3, #0
    2668:	d100      	bne.n	266c <__aeabi_dadd+0x410>
    266a:	e0e7      	b.n	283c <__aeabi_dadd+0x5e0>
    266c:	000b      	movs	r3, r1
    266e:	4313      	orrs	r3, r2
    2670:	d100      	bne.n	2674 <__aeabi_dadd+0x418>
    2672:	e677      	b.n	2364 <__aeabi_dadd+0x108>
    2674:	18ba      	adds	r2, r7, r2
    2676:	42ba      	cmp	r2, r7
    2678:	41bf      	sbcs	r7, r7
    267a:	1864      	adds	r4, r4, r1
    267c:	427f      	negs	r7, r7
    267e:	19e4      	adds	r4, r4, r7
    2680:	0223      	lsls	r3, r4, #8
    2682:	d400      	bmi.n	2686 <__aeabi_dadd+0x42a>
    2684:	e0f2      	b.n	286c <__aeabi_dadd+0x610>
    2686:	4b7c      	ldr	r3, [pc, #496]	; (2878 <__aeabi_dadd+0x61c>)
    2688:	0017      	movs	r7, r2
    268a:	401c      	ands	r4, r3
    268c:	0006      	movs	r6, r0
    268e:	e669      	b.n	2364 <__aeabi_dadd+0x108>
    2690:	0020      	movs	r0, r4
    2692:	4338      	orrs	r0, r7
    2694:	2e00      	cmp	r6, #0
    2696:	d1d1      	bne.n	263c <__aeabi_dadd+0x3e0>
    2698:	2800      	cmp	r0, #0
    269a:	d15b      	bne.n	2754 <__aeabi_dadd+0x4f8>
    269c:	001c      	movs	r4, r3
    269e:	4314      	orrs	r4, r2
    26a0:	d100      	bne.n	26a4 <__aeabi_dadd+0x448>
    26a2:	e0a8      	b.n	27f6 <__aeabi_dadd+0x59a>
    26a4:	001c      	movs	r4, r3
    26a6:	0017      	movs	r7, r2
    26a8:	46d8      	mov	r8, fp
    26aa:	e65b      	b.n	2364 <__aeabi_dadd+0x108>
    26ac:	0006      	movs	r6, r0
    26ae:	2400      	movs	r4, #0
    26b0:	2700      	movs	r7, #0
    26b2:	e697      	b.n	23e4 <__aeabi_dadd+0x188>
    26b4:	4650      	mov	r0, sl
    26b6:	000b      	movs	r3, r1
    26b8:	3820      	subs	r0, #32
    26ba:	40c3      	lsrs	r3, r0
    26bc:	4699      	mov	r9, r3
    26be:	4653      	mov	r3, sl
    26c0:	2b20      	cmp	r3, #32
    26c2:	d100      	bne.n	26c6 <__aeabi_dadd+0x46a>
    26c4:	e095      	b.n	27f2 <__aeabi_dadd+0x596>
    26c6:	2340      	movs	r3, #64	; 0x40
    26c8:	4650      	mov	r0, sl
    26ca:	1a1b      	subs	r3, r3, r0
    26cc:	4099      	lsls	r1, r3
    26ce:	430a      	orrs	r2, r1
    26d0:	1e51      	subs	r1, r2, #1
    26d2:	418a      	sbcs	r2, r1
    26d4:	464b      	mov	r3, r9
    26d6:	2100      	movs	r1, #0
    26d8:	431a      	orrs	r2, r3
    26da:	e69f      	b.n	241c <__aeabi_dadd+0x1c0>
    26dc:	2e00      	cmp	r6, #0
    26de:	d130      	bne.n	2742 <__aeabi_dadd+0x4e6>
    26e0:	0026      	movs	r6, r4
    26e2:	433e      	orrs	r6, r7
    26e4:	d067      	beq.n	27b6 <__aeabi_dadd+0x55a>
    26e6:	43db      	mvns	r3, r3
    26e8:	469a      	mov	sl, r3
    26ea:	2b00      	cmp	r3, #0
    26ec:	d01c      	beq.n	2728 <__aeabi_dadd+0x4cc>
    26ee:	4e61      	ldr	r6, [pc, #388]	; (2874 <__aeabi_dadd+0x618>)
    26f0:	42b0      	cmp	r0, r6
    26f2:	d060      	beq.n	27b6 <__aeabi_dadd+0x55a>
    26f4:	4653      	mov	r3, sl
    26f6:	2b38      	cmp	r3, #56	; 0x38
    26f8:	dd00      	ble.n	26fc <__aeabi_dadd+0x4a0>
    26fa:	e096      	b.n	282a <__aeabi_dadd+0x5ce>
    26fc:	2b1f      	cmp	r3, #31
    26fe:	dd00      	ble.n	2702 <__aeabi_dadd+0x4a6>
    2700:	e09f      	b.n	2842 <__aeabi_dadd+0x5e6>
    2702:	2620      	movs	r6, #32
    2704:	1af3      	subs	r3, r6, r3
    2706:	0026      	movs	r6, r4
    2708:	409e      	lsls	r6, r3
    270a:	469c      	mov	ip, r3
    270c:	46b3      	mov	fp, r6
    270e:	4653      	mov	r3, sl
    2710:	003e      	movs	r6, r7
    2712:	40de      	lsrs	r6, r3
    2714:	0033      	movs	r3, r6
    2716:	465e      	mov	r6, fp
    2718:	431e      	orrs	r6, r3
    271a:	4663      	mov	r3, ip
    271c:	409f      	lsls	r7, r3
    271e:	1e7b      	subs	r3, r7, #1
    2720:	419f      	sbcs	r7, r3
    2722:	4653      	mov	r3, sl
    2724:	40dc      	lsrs	r4, r3
    2726:	4337      	orrs	r7, r6
    2728:	18bf      	adds	r7, r7, r2
    272a:	4297      	cmp	r7, r2
    272c:	4192      	sbcs	r2, r2
    272e:	1864      	adds	r4, r4, r1
    2730:	4252      	negs	r2, r2
    2732:	18a4      	adds	r4, r4, r2
    2734:	0006      	movs	r6, r0
    2736:	e678      	b.n	242a <__aeabi_dadd+0x1ce>
    2738:	4327      	orrs	r7, r4
    273a:	1e7c      	subs	r4, r7, #1
    273c:	41a7      	sbcs	r7, r4
    273e:	2400      	movs	r4, #0
    2740:	e737      	b.n	25b2 <__aeabi_dadd+0x356>
    2742:	4e4c      	ldr	r6, [pc, #304]	; (2874 <__aeabi_dadd+0x618>)
    2744:	42b0      	cmp	r0, r6
    2746:	d036      	beq.n	27b6 <__aeabi_dadd+0x55a>
    2748:	2680      	movs	r6, #128	; 0x80
    274a:	425b      	negs	r3, r3
    274c:	0436      	lsls	r6, r6, #16
    274e:	469a      	mov	sl, r3
    2750:	4334      	orrs	r4, r6
    2752:	e7cf      	b.n	26f4 <__aeabi_dadd+0x498>
    2754:	0018      	movs	r0, r3
    2756:	4310      	orrs	r0, r2
    2758:	d100      	bne.n	275c <__aeabi_dadd+0x500>
    275a:	e603      	b.n	2364 <__aeabi_dadd+0x108>
    275c:	1ab8      	subs	r0, r7, r2
    275e:	4684      	mov	ip, r0
    2760:	4567      	cmp	r7, ip
    2762:	41ad      	sbcs	r5, r5
    2764:	1ae0      	subs	r0, r4, r3
    2766:	426d      	negs	r5, r5
    2768:	1b40      	subs	r0, r0, r5
    276a:	0205      	lsls	r5, r0, #8
    276c:	d400      	bmi.n	2770 <__aeabi_dadd+0x514>
    276e:	e62c      	b.n	23ca <__aeabi_dadd+0x16e>
    2770:	1bd7      	subs	r7, r2, r7
    2772:	42ba      	cmp	r2, r7
    2774:	4192      	sbcs	r2, r2
    2776:	1b1c      	subs	r4, r3, r4
    2778:	4252      	negs	r2, r2
    277a:	1aa4      	subs	r4, r4, r2
    277c:	46d8      	mov	r8, fp
    277e:	e5f1      	b.n	2364 <__aeabi_dadd+0x108>
    2780:	0018      	movs	r0, r3
    2782:	4310      	orrs	r0, r2
    2784:	d100      	bne.n	2788 <__aeabi_dadd+0x52c>
    2786:	e763      	b.n	2650 <__aeabi_dadd+0x3f4>
    2788:	08f8      	lsrs	r0, r7, #3
    278a:	0767      	lsls	r7, r4, #29
    278c:	4307      	orrs	r7, r0
    278e:	2080      	movs	r0, #128	; 0x80
    2790:	08e4      	lsrs	r4, r4, #3
    2792:	0300      	lsls	r0, r0, #12
    2794:	4204      	tst	r4, r0
    2796:	d008      	beq.n	27aa <__aeabi_dadd+0x54e>
    2798:	08dd      	lsrs	r5, r3, #3
    279a:	4205      	tst	r5, r0
    279c:	d105      	bne.n	27aa <__aeabi_dadd+0x54e>
    279e:	08d2      	lsrs	r2, r2, #3
    27a0:	0759      	lsls	r1, r3, #29
    27a2:	4311      	orrs	r1, r2
    27a4:	000f      	movs	r7, r1
    27a6:	002c      	movs	r4, r5
    27a8:	46d8      	mov	r8, fp
    27aa:	0f7b      	lsrs	r3, r7, #29
    27ac:	00e4      	lsls	r4, r4, #3
    27ae:	431c      	orrs	r4, r3
    27b0:	00ff      	lsls	r7, r7, #3
    27b2:	4e30      	ldr	r6, [pc, #192]	; (2874 <__aeabi_dadd+0x618>)
    27b4:	e5d6      	b.n	2364 <__aeabi_dadd+0x108>
    27b6:	000c      	movs	r4, r1
    27b8:	0017      	movs	r7, r2
    27ba:	0006      	movs	r6, r0
    27bc:	e5d2      	b.n	2364 <__aeabi_dadd+0x108>
    27be:	2b00      	cmp	r3, #0
    27c0:	d038      	beq.n	2834 <__aeabi_dadd+0x5d8>
    27c2:	000b      	movs	r3, r1
    27c4:	4313      	orrs	r3, r2
    27c6:	d100      	bne.n	27ca <__aeabi_dadd+0x56e>
    27c8:	e742      	b.n	2650 <__aeabi_dadd+0x3f4>
    27ca:	08f8      	lsrs	r0, r7, #3
    27cc:	0767      	lsls	r7, r4, #29
    27ce:	4307      	orrs	r7, r0
    27d0:	2080      	movs	r0, #128	; 0x80
    27d2:	08e4      	lsrs	r4, r4, #3
    27d4:	0300      	lsls	r0, r0, #12
    27d6:	4204      	tst	r4, r0
    27d8:	d0e7      	beq.n	27aa <__aeabi_dadd+0x54e>
    27da:	08cb      	lsrs	r3, r1, #3
    27dc:	4203      	tst	r3, r0
    27de:	d1e4      	bne.n	27aa <__aeabi_dadd+0x54e>
    27e0:	08d2      	lsrs	r2, r2, #3
    27e2:	0749      	lsls	r1, r1, #29
    27e4:	4311      	orrs	r1, r2
    27e6:	000f      	movs	r7, r1
    27e8:	001c      	movs	r4, r3
    27ea:	e7de      	b.n	27aa <__aeabi_dadd+0x54e>
    27ec:	2700      	movs	r7, #0
    27ee:	2400      	movs	r4, #0
    27f0:	e5d5      	b.n	239e <__aeabi_dadd+0x142>
    27f2:	2100      	movs	r1, #0
    27f4:	e76b      	b.n	26ce <__aeabi_dadd+0x472>
    27f6:	2500      	movs	r5, #0
    27f8:	2700      	movs	r7, #0
    27fa:	e5f3      	b.n	23e4 <__aeabi_dadd+0x188>
    27fc:	464e      	mov	r6, r9
    27fe:	0025      	movs	r5, r4
    2800:	3e20      	subs	r6, #32
    2802:	40f5      	lsrs	r5, r6
    2804:	464b      	mov	r3, r9
    2806:	002e      	movs	r6, r5
    2808:	2b20      	cmp	r3, #32
    280a:	d02d      	beq.n	2868 <__aeabi_dadd+0x60c>
    280c:	2540      	movs	r5, #64	; 0x40
    280e:	1aed      	subs	r5, r5, r3
    2810:	40ac      	lsls	r4, r5
    2812:	4327      	orrs	r7, r4
    2814:	1e7c      	subs	r4, r7, #1
    2816:	41a7      	sbcs	r7, r4
    2818:	2400      	movs	r4, #0
    281a:	4337      	orrs	r7, r6
    281c:	e6c9      	b.n	25b2 <__aeabi_dadd+0x356>
    281e:	2480      	movs	r4, #128	; 0x80
    2820:	2500      	movs	r5, #0
    2822:	0324      	lsls	r4, r4, #12
    2824:	4e13      	ldr	r6, [pc, #76]	; (2874 <__aeabi_dadd+0x618>)
    2826:	2700      	movs	r7, #0
    2828:	e5dc      	b.n	23e4 <__aeabi_dadd+0x188>
    282a:	4327      	orrs	r7, r4
    282c:	1e7c      	subs	r4, r7, #1
    282e:	41a7      	sbcs	r7, r4
    2830:	2400      	movs	r4, #0
    2832:	e779      	b.n	2728 <__aeabi_dadd+0x4cc>
    2834:	000c      	movs	r4, r1
    2836:	0017      	movs	r7, r2
    2838:	4e0e      	ldr	r6, [pc, #56]	; (2874 <__aeabi_dadd+0x618>)
    283a:	e593      	b.n	2364 <__aeabi_dadd+0x108>
    283c:	000c      	movs	r4, r1
    283e:	0017      	movs	r7, r2
    2840:	e590      	b.n	2364 <__aeabi_dadd+0x108>
    2842:	4656      	mov	r6, sl
    2844:	0023      	movs	r3, r4
    2846:	3e20      	subs	r6, #32
    2848:	40f3      	lsrs	r3, r6
    284a:	4699      	mov	r9, r3
    284c:	4653      	mov	r3, sl
    284e:	2b20      	cmp	r3, #32
    2850:	d00e      	beq.n	2870 <__aeabi_dadd+0x614>
    2852:	2340      	movs	r3, #64	; 0x40
    2854:	4656      	mov	r6, sl
    2856:	1b9b      	subs	r3, r3, r6
    2858:	409c      	lsls	r4, r3
    285a:	4327      	orrs	r7, r4
    285c:	1e7c      	subs	r4, r7, #1
    285e:	41a7      	sbcs	r7, r4
    2860:	464b      	mov	r3, r9
    2862:	2400      	movs	r4, #0
    2864:	431f      	orrs	r7, r3
    2866:	e75f      	b.n	2728 <__aeabi_dadd+0x4cc>
    2868:	2400      	movs	r4, #0
    286a:	e7d2      	b.n	2812 <__aeabi_dadd+0x5b6>
    286c:	0017      	movs	r7, r2
    286e:	e5b2      	b.n	23d6 <__aeabi_dadd+0x17a>
    2870:	2400      	movs	r4, #0
    2872:	e7f2      	b.n	285a <__aeabi_dadd+0x5fe>
    2874:	000007ff 	.word	0x000007ff
    2878:	ff7fffff 	.word	0xff7fffff

0000287c <__aeabi_ddiv>:
    287c:	b5f0      	push	{r4, r5, r6, r7, lr}
    287e:	4657      	mov	r7, sl
    2880:	4645      	mov	r5, r8
    2882:	46de      	mov	lr, fp
    2884:	464e      	mov	r6, r9
    2886:	b5e0      	push	{r5, r6, r7, lr}
    2888:	004c      	lsls	r4, r1, #1
    288a:	030e      	lsls	r6, r1, #12
    288c:	b087      	sub	sp, #28
    288e:	4683      	mov	fp, r0
    2890:	4692      	mov	sl, r2
    2892:	001d      	movs	r5, r3
    2894:	4680      	mov	r8, r0
    2896:	0b36      	lsrs	r6, r6, #12
    2898:	0d64      	lsrs	r4, r4, #21
    289a:	0fcf      	lsrs	r7, r1, #31
    289c:	2c00      	cmp	r4, #0
    289e:	d04f      	beq.n	2940 <__aeabi_ddiv+0xc4>
    28a0:	4b6f      	ldr	r3, [pc, #444]	; (2a60 <__aeabi_ddiv+0x1e4>)
    28a2:	429c      	cmp	r4, r3
    28a4:	d035      	beq.n	2912 <__aeabi_ddiv+0x96>
    28a6:	2380      	movs	r3, #128	; 0x80
    28a8:	0f42      	lsrs	r2, r0, #29
    28aa:	041b      	lsls	r3, r3, #16
    28ac:	00f6      	lsls	r6, r6, #3
    28ae:	4313      	orrs	r3, r2
    28b0:	4333      	orrs	r3, r6
    28b2:	4699      	mov	r9, r3
    28b4:	00c3      	lsls	r3, r0, #3
    28b6:	4698      	mov	r8, r3
    28b8:	4b6a      	ldr	r3, [pc, #424]	; (2a64 <__aeabi_ddiv+0x1e8>)
    28ba:	2600      	movs	r6, #0
    28bc:	469c      	mov	ip, r3
    28be:	2300      	movs	r3, #0
    28c0:	4464      	add	r4, ip
    28c2:	9303      	str	r3, [sp, #12]
    28c4:	032b      	lsls	r3, r5, #12
    28c6:	0b1b      	lsrs	r3, r3, #12
    28c8:	469b      	mov	fp, r3
    28ca:	006b      	lsls	r3, r5, #1
    28cc:	0fed      	lsrs	r5, r5, #31
    28ce:	4650      	mov	r0, sl
    28d0:	0d5b      	lsrs	r3, r3, #21
    28d2:	9501      	str	r5, [sp, #4]
    28d4:	d05e      	beq.n	2994 <__aeabi_ddiv+0x118>
    28d6:	4a62      	ldr	r2, [pc, #392]	; (2a60 <__aeabi_ddiv+0x1e4>)
    28d8:	4293      	cmp	r3, r2
    28da:	d053      	beq.n	2984 <__aeabi_ddiv+0x108>
    28dc:	465a      	mov	r2, fp
    28de:	00d1      	lsls	r1, r2, #3
    28e0:	2280      	movs	r2, #128	; 0x80
    28e2:	0f40      	lsrs	r0, r0, #29
    28e4:	0412      	lsls	r2, r2, #16
    28e6:	4302      	orrs	r2, r0
    28e8:	430a      	orrs	r2, r1
    28ea:	4693      	mov	fp, r2
    28ec:	4652      	mov	r2, sl
    28ee:	00d1      	lsls	r1, r2, #3
    28f0:	4a5c      	ldr	r2, [pc, #368]	; (2a64 <__aeabi_ddiv+0x1e8>)
    28f2:	4694      	mov	ip, r2
    28f4:	2200      	movs	r2, #0
    28f6:	4463      	add	r3, ip
    28f8:	0038      	movs	r0, r7
    28fa:	4068      	eors	r0, r5
    28fc:	4684      	mov	ip, r0
    28fe:	9002      	str	r0, [sp, #8]
    2900:	1ae4      	subs	r4, r4, r3
    2902:	4316      	orrs	r6, r2
    2904:	2e0f      	cmp	r6, #15
    2906:	d900      	bls.n	290a <__aeabi_ddiv+0x8e>
    2908:	e0b4      	b.n	2a74 <__aeabi_ddiv+0x1f8>
    290a:	4b57      	ldr	r3, [pc, #348]	; (2a68 <__aeabi_ddiv+0x1ec>)
    290c:	00b6      	lsls	r6, r6, #2
    290e:	599b      	ldr	r3, [r3, r6]
    2910:	469f      	mov	pc, r3
    2912:	0003      	movs	r3, r0
    2914:	4333      	orrs	r3, r6
    2916:	4699      	mov	r9, r3
    2918:	d16c      	bne.n	29f4 <__aeabi_ddiv+0x178>
    291a:	2300      	movs	r3, #0
    291c:	4698      	mov	r8, r3
    291e:	3302      	adds	r3, #2
    2920:	2608      	movs	r6, #8
    2922:	9303      	str	r3, [sp, #12]
    2924:	e7ce      	b.n	28c4 <__aeabi_ddiv+0x48>
    2926:	46cb      	mov	fp, r9
    2928:	4641      	mov	r1, r8
    292a:	9a03      	ldr	r2, [sp, #12]
    292c:	9701      	str	r7, [sp, #4]
    292e:	2a02      	cmp	r2, #2
    2930:	d165      	bne.n	29fe <__aeabi_ddiv+0x182>
    2932:	9b01      	ldr	r3, [sp, #4]
    2934:	4c4a      	ldr	r4, [pc, #296]	; (2a60 <__aeabi_ddiv+0x1e4>)
    2936:	469c      	mov	ip, r3
    2938:	2300      	movs	r3, #0
    293a:	2200      	movs	r2, #0
    293c:	4698      	mov	r8, r3
    293e:	e06b      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2940:	0003      	movs	r3, r0
    2942:	4333      	orrs	r3, r6
    2944:	4699      	mov	r9, r3
    2946:	d04e      	beq.n	29e6 <__aeabi_ddiv+0x16a>
    2948:	2e00      	cmp	r6, #0
    294a:	d100      	bne.n	294e <__aeabi_ddiv+0xd2>
    294c:	e1bc      	b.n	2cc8 <__aeabi_ddiv+0x44c>
    294e:	0030      	movs	r0, r6
    2950:	f001 f8ca 	bl	3ae8 <__clzsi2>
    2954:	0003      	movs	r3, r0
    2956:	3b0b      	subs	r3, #11
    2958:	2b1c      	cmp	r3, #28
    295a:	dd00      	ble.n	295e <__aeabi_ddiv+0xe2>
    295c:	e1ac      	b.n	2cb8 <__aeabi_ddiv+0x43c>
    295e:	221d      	movs	r2, #29
    2960:	1ad3      	subs	r3, r2, r3
    2962:	465a      	mov	r2, fp
    2964:	0001      	movs	r1, r0
    2966:	40da      	lsrs	r2, r3
    2968:	3908      	subs	r1, #8
    296a:	408e      	lsls	r6, r1
    296c:	0013      	movs	r3, r2
    296e:	4333      	orrs	r3, r6
    2970:	4699      	mov	r9, r3
    2972:	465b      	mov	r3, fp
    2974:	408b      	lsls	r3, r1
    2976:	4698      	mov	r8, r3
    2978:	2300      	movs	r3, #0
    297a:	4c3c      	ldr	r4, [pc, #240]	; (2a6c <__aeabi_ddiv+0x1f0>)
    297c:	2600      	movs	r6, #0
    297e:	1a24      	subs	r4, r4, r0
    2980:	9303      	str	r3, [sp, #12]
    2982:	e79f      	b.n	28c4 <__aeabi_ddiv+0x48>
    2984:	4651      	mov	r1, sl
    2986:	465a      	mov	r2, fp
    2988:	4311      	orrs	r1, r2
    298a:	d129      	bne.n	29e0 <__aeabi_ddiv+0x164>
    298c:	2200      	movs	r2, #0
    298e:	4693      	mov	fp, r2
    2990:	3202      	adds	r2, #2
    2992:	e7b1      	b.n	28f8 <__aeabi_ddiv+0x7c>
    2994:	4659      	mov	r1, fp
    2996:	4301      	orrs	r1, r0
    2998:	d01e      	beq.n	29d8 <__aeabi_ddiv+0x15c>
    299a:	465b      	mov	r3, fp
    299c:	2b00      	cmp	r3, #0
    299e:	d100      	bne.n	29a2 <__aeabi_ddiv+0x126>
    29a0:	e19e      	b.n	2ce0 <__aeabi_ddiv+0x464>
    29a2:	4658      	mov	r0, fp
    29a4:	f001 f8a0 	bl	3ae8 <__clzsi2>
    29a8:	0003      	movs	r3, r0
    29aa:	3b0b      	subs	r3, #11
    29ac:	2b1c      	cmp	r3, #28
    29ae:	dd00      	ble.n	29b2 <__aeabi_ddiv+0x136>
    29b0:	e18f      	b.n	2cd2 <__aeabi_ddiv+0x456>
    29b2:	0002      	movs	r2, r0
    29b4:	4659      	mov	r1, fp
    29b6:	3a08      	subs	r2, #8
    29b8:	4091      	lsls	r1, r2
    29ba:	468b      	mov	fp, r1
    29bc:	211d      	movs	r1, #29
    29be:	1acb      	subs	r3, r1, r3
    29c0:	4651      	mov	r1, sl
    29c2:	40d9      	lsrs	r1, r3
    29c4:	000b      	movs	r3, r1
    29c6:	4659      	mov	r1, fp
    29c8:	430b      	orrs	r3, r1
    29ca:	4651      	mov	r1, sl
    29cc:	469b      	mov	fp, r3
    29ce:	4091      	lsls	r1, r2
    29d0:	4b26      	ldr	r3, [pc, #152]	; (2a6c <__aeabi_ddiv+0x1f0>)
    29d2:	2200      	movs	r2, #0
    29d4:	1a1b      	subs	r3, r3, r0
    29d6:	e78f      	b.n	28f8 <__aeabi_ddiv+0x7c>
    29d8:	2300      	movs	r3, #0
    29da:	2201      	movs	r2, #1
    29dc:	469b      	mov	fp, r3
    29de:	e78b      	b.n	28f8 <__aeabi_ddiv+0x7c>
    29e0:	4651      	mov	r1, sl
    29e2:	2203      	movs	r2, #3
    29e4:	e788      	b.n	28f8 <__aeabi_ddiv+0x7c>
    29e6:	2300      	movs	r3, #0
    29e8:	4698      	mov	r8, r3
    29ea:	3301      	adds	r3, #1
    29ec:	2604      	movs	r6, #4
    29ee:	2400      	movs	r4, #0
    29f0:	9303      	str	r3, [sp, #12]
    29f2:	e767      	b.n	28c4 <__aeabi_ddiv+0x48>
    29f4:	2303      	movs	r3, #3
    29f6:	46b1      	mov	r9, r6
    29f8:	9303      	str	r3, [sp, #12]
    29fa:	260c      	movs	r6, #12
    29fc:	e762      	b.n	28c4 <__aeabi_ddiv+0x48>
    29fe:	2a03      	cmp	r2, #3
    2a00:	d100      	bne.n	2a04 <__aeabi_ddiv+0x188>
    2a02:	e25c      	b.n	2ebe <__aeabi_ddiv+0x642>
    2a04:	9b01      	ldr	r3, [sp, #4]
    2a06:	2a01      	cmp	r2, #1
    2a08:	d000      	beq.n	2a0c <__aeabi_ddiv+0x190>
    2a0a:	e1e4      	b.n	2dd6 <__aeabi_ddiv+0x55a>
    2a0c:	4013      	ands	r3, r2
    2a0e:	469c      	mov	ip, r3
    2a10:	2300      	movs	r3, #0
    2a12:	2400      	movs	r4, #0
    2a14:	2200      	movs	r2, #0
    2a16:	4698      	mov	r8, r3
    2a18:	2100      	movs	r1, #0
    2a1a:	0312      	lsls	r2, r2, #12
    2a1c:	0b13      	lsrs	r3, r2, #12
    2a1e:	0d0a      	lsrs	r2, r1, #20
    2a20:	0512      	lsls	r2, r2, #20
    2a22:	431a      	orrs	r2, r3
    2a24:	0523      	lsls	r3, r4, #20
    2a26:	4c12      	ldr	r4, [pc, #72]	; (2a70 <__aeabi_ddiv+0x1f4>)
    2a28:	4640      	mov	r0, r8
    2a2a:	4022      	ands	r2, r4
    2a2c:	4313      	orrs	r3, r2
    2a2e:	4662      	mov	r2, ip
    2a30:	005b      	lsls	r3, r3, #1
    2a32:	07d2      	lsls	r2, r2, #31
    2a34:	085b      	lsrs	r3, r3, #1
    2a36:	4313      	orrs	r3, r2
    2a38:	0019      	movs	r1, r3
    2a3a:	b007      	add	sp, #28
    2a3c:	bc3c      	pop	{r2, r3, r4, r5}
    2a3e:	4690      	mov	r8, r2
    2a40:	4699      	mov	r9, r3
    2a42:	46a2      	mov	sl, r4
    2a44:	46ab      	mov	fp, r5
    2a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a48:	2300      	movs	r3, #0
    2a4a:	2280      	movs	r2, #128	; 0x80
    2a4c:	469c      	mov	ip, r3
    2a4e:	0312      	lsls	r2, r2, #12
    2a50:	4698      	mov	r8, r3
    2a52:	4c03      	ldr	r4, [pc, #12]	; (2a60 <__aeabi_ddiv+0x1e4>)
    2a54:	e7e0      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2a56:	2300      	movs	r3, #0
    2a58:	4c01      	ldr	r4, [pc, #4]	; (2a60 <__aeabi_ddiv+0x1e4>)
    2a5a:	2200      	movs	r2, #0
    2a5c:	4698      	mov	r8, r3
    2a5e:	e7db      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2a60:	000007ff 	.word	0x000007ff
    2a64:	fffffc01 	.word	0xfffffc01
    2a68:	00003c2c 	.word	0x00003c2c
    2a6c:	fffffc0d 	.word	0xfffffc0d
    2a70:	800fffff 	.word	0x800fffff
    2a74:	45d9      	cmp	r9, fp
    2a76:	d900      	bls.n	2a7a <__aeabi_ddiv+0x1fe>
    2a78:	e139      	b.n	2cee <__aeabi_ddiv+0x472>
    2a7a:	d100      	bne.n	2a7e <__aeabi_ddiv+0x202>
    2a7c:	e134      	b.n	2ce8 <__aeabi_ddiv+0x46c>
    2a7e:	2300      	movs	r3, #0
    2a80:	4646      	mov	r6, r8
    2a82:	464d      	mov	r5, r9
    2a84:	469a      	mov	sl, r3
    2a86:	3c01      	subs	r4, #1
    2a88:	465b      	mov	r3, fp
    2a8a:	0e0a      	lsrs	r2, r1, #24
    2a8c:	021b      	lsls	r3, r3, #8
    2a8e:	431a      	orrs	r2, r3
    2a90:	020b      	lsls	r3, r1, #8
    2a92:	0c17      	lsrs	r7, r2, #16
    2a94:	9303      	str	r3, [sp, #12]
    2a96:	0413      	lsls	r3, r2, #16
    2a98:	0c1b      	lsrs	r3, r3, #16
    2a9a:	0039      	movs	r1, r7
    2a9c:	0028      	movs	r0, r5
    2a9e:	4690      	mov	r8, r2
    2aa0:	9301      	str	r3, [sp, #4]
    2aa2:	f7ff fb4f 	bl	2144 <__udivsi3>
    2aa6:	0002      	movs	r2, r0
    2aa8:	9b01      	ldr	r3, [sp, #4]
    2aaa:	4683      	mov	fp, r0
    2aac:	435a      	muls	r2, r3
    2aae:	0028      	movs	r0, r5
    2ab0:	0039      	movs	r1, r7
    2ab2:	4691      	mov	r9, r2
    2ab4:	f7ff fbcc 	bl	2250 <__aeabi_uidivmod>
    2ab8:	0c35      	lsrs	r5, r6, #16
    2aba:	0409      	lsls	r1, r1, #16
    2abc:	430d      	orrs	r5, r1
    2abe:	45a9      	cmp	r9, r5
    2ac0:	d90d      	bls.n	2ade <__aeabi_ddiv+0x262>
    2ac2:	465b      	mov	r3, fp
    2ac4:	4445      	add	r5, r8
    2ac6:	3b01      	subs	r3, #1
    2ac8:	45a8      	cmp	r8, r5
    2aca:	d900      	bls.n	2ace <__aeabi_ddiv+0x252>
    2acc:	e13a      	b.n	2d44 <__aeabi_ddiv+0x4c8>
    2ace:	45a9      	cmp	r9, r5
    2ad0:	d800      	bhi.n	2ad4 <__aeabi_ddiv+0x258>
    2ad2:	e137      	b.n	2d44 <__aeabi_ddiv+0x4c8>
    2ad4:	2302      	movs	r3, #2
    2ad6:	425b      	negs	r3, r3
    2ad8:	469c      	mov	ip, r3
    2ada:	4445      	add	r5, r8
    2adc:	44e3      	add	fp, ip
    2ade:	464b      	mov	r3, r9
    2ae0:	1aeb      	subs	r3, r5, r3
    2ae2:	0039      	movs	r1, r7
    2ae4:	0018      	movs	r0, r3
    2ae6:	9304      	str	r3, [sp, #16]
    2ae8:	f7ff fb2c 	bl	2144 <__udivsi3>
    2aec:	9b01      	ldr	r3, [sp, #4]
    2aee:	0005      	movs	r5, r0
    2af0:	4343      	muls	r3, r0
    2af2:	0039      	movs	r1, r7
    2af4:	9804      	ldr	r0, [sp, #16]
    2af6:	4699      	mov	r9, r3
    2af8:	f7ff fbaa 	bl	2250 <__aeabi_uidivmod>
    2afc:	0433      	lsls	r3, r6, #16
    2afe:	0409      	lsls	r1, r1, #16
    2b00:	0c1b      	lsrs	r3, r3, #16
    2b02:	430b      	orrs	r3, r1
    2b04:	4599      	cmp	r9, r3
    2b06:	d909      	bls.n	2b1c <__aeabi_ddiv+0x2a0>
    2b08:	4443      	add	r3, r8
    2b0a:	1e6a      	subs	r2, r5, #1
    2b0c:	4598      	cmp	r8, r3
    2b0e:	d900      	bls.n	2b12 <__aeabi_ddiv+0x296>
    2b10:	e11a      	b.n	2d48 <__aeabi_ddiv+0x4cc>
    2b12:	4599      	cmp	r9, r3
    2b14:	d800      	bhi.n	2b18 <__aeabi_ddiv+0x29c>
    2b16:	e117      	b.n	2d48 <__aeabi_ddiv+0x4cc>
    2b18:	3d02      	subs	r5, #2
    2b1a:	4443      	add	r3, r8
    2b1c:	464a      	mov	r2, r9
    2b1e:	1a9b      	subs	r3, r3, r2
    2b20:	465a      	mov	r2, fp
    2b22:	0412      	lsls	r2, r2, #16
    2b24:	432a      	orrs	r2, r5
    2b26:	9903      	ldr	r1, [sp, #12]
    2b28:	4693      	mov	fp, r2
    2b2a:	0c10      	lsrs	r0, r2, #16
    2b2c:	0c0a      	lsrs	r2, r1, #16
    2b2e:	4691      	mov	r9, r2
    2b30:	0409      	lsls	r1, r1, #16
    2b32:	465a      	mov	r2, fp
    2b34:	0c09      	lsrs	r1, r1, #16
    2b36:	464e      	mov	r6, r9
    2b38:	000d      	movs	r5, r1
    2b3a:	0412      	lsls	r2, r2, #16
    2b3c:	0c12      	lsrs	r2, r2, #16
    2b3e:	4345      	muls	r5, r0
    2b40:	9105      	str	r1, [sp, #20]
    2b42:	4351      	muls	r1, r2
    2b44:	4372      	muls	r2, r6
    2b46:	4370      	muls	r0, r6
    2b48:	1952      	adds	r2, r2, r5
    2b4a:	0c0e      	lsrs	r6, r1, #16
    2b4c:	18b2      	adds	r2, r6, r2
    2b4e:	4295      	cmp	r5, r2
    2b50:	d903      	bls.n	2b5a <__aeabi_ddiv+0x2de>
    2b52:	2580      	movs	r5, #128	; 0x80
    2b54:	026d      	lsls	r5, r5, #9
    2b56:	46ac      	mov	ip, r5
    2b58:	4460      	add	r0, ip
    2b5a:	0c15      	lsrs	r5, r2, #16
    2b5c:	0409      	lsls	r1, r1, #16
    2b5e:	0412      	lsls	r2, r2, #16
    2b60:	0c09      	lsrs	r1, r1, #16
    2b62:	1828      	adds	r0, r5, r0
    2b64:	1852      	adds	r2, r2, r1
    2b66:	4283      	cmp	r3, r0
    2b68:	d200      	bcs.n	2b6c <__aeabi_ddiv+0x2f0>
    2b6a:	e0ce      	b.n	2d0a <__aeabi_ddiv+0x48e>
    2b6c:	d100      	bne.n	2b70 <__aeabi_ddiv+0x2f4>
    2b6e:	e0c8      	b.n	2d02 <__aeabi_ddiv+0x486>
    2b70:	1a1d      	subs	r5, r3, r0
    2b72:	4653      	mov	r3, sl
    2b74:	1a9e      	subs	r6, r3, r2
    2b76:	45b2      	cmp	sl, r6
    2b78:	4192      	sbcs	r2, r2
    2b7a:	4252      	negs	r2, r2
    2b7c:	1aab      	subs	r3, r5, r2
    2b7e:	469a      	mov	sl, r3
    2b80:	4598      	cmp	r8, r3
    2b82:	d100      	bne.n	2b86 <__aeabi_ddiv+0x30a>
    2b84:	e117      	b.n	2db6 <__aeabi_ddiv+0x53a>
    2b86:	0039      	movs	r1, r7
    2b88:	0018      	movs	r0, r3
    2b8a:	f7ff fadb 	bl	2144 <__udivsi3>
    2b8e:	9b01      	ldr	r3, [sp, #4]
    2b90:	0005      	movs	r5, r0
    2b92:	4343      	muls	r3, r0
    2b94:	0039      	movs	r1, r7
    2b96:	4650      	mov	r0, sl
    2b98:	9304      	str	r3, [sp, #16]
    2b9a:	f7ff fb59 	bl	2250 <__aeabi_uidivmod>
    2b9e:	9804      	ldr	r0, [sp, #16]
    2ba0:	040b      	lsls	r3, r1, #16
    2ba2:	0c31      	lsrs	r1, r6, #16
    2ba4:	4319      	orrs	r1, r3
    2ba6:	4288      	cmp	r0, r1
    2ba8:	d909      	bls.n	2bbe <__aeabi_ddiv+0x342>
    2baa:	4441      	add	r1, r8
    2bac:	1e6b      	subs	r3, r5, #1
    2bae:	4588      	cmp	r8, r1
    2bb0:	d900      	bls.n	2bb4 <__aeabi_ddiv+0x338>
    2bb2:	e107      	b.n	2dc4 <__aeabi_ddiv+0x548>
    2bb4:	4288      	cmp	r0, r1
    2bb6:	d800      	bhi.n	2bba <__aeabi_ddiv+0x33e>
    2bb8:	e104      	b.n	2dc4 <__aeabi_ddiv+0x548>
    2bba:	3d02      	subs	r5, #2
    2bbc:	4441      	add	r1, r8
    2bbe:	9b04      	ldr	r3, [sp, #16]
    2bc0:	1acb      	subs	r3, r1, r3
    2bc2:	0018      	movs	r0, r3
    2bc4:	0039      	movs	r1, r7
    2bc6:	9304      	str	r3, [sp, #16]
    2bc8:	f7ff fabc 	bl	2144 <__udivsi3>
    2bcc:	9b01      	ldr	r3, [sp, #4]
    2bce:	4682      	mov	sl, r0
    2bd0:	4343      	muls	r3, r0
    2bd2:	0039      	movs	r1, r7
    2bd4:	9804      	ldr	r0, [sp, #16]
    2bd6:	9301      	str	r3, [sp, #4]
    2bd8:	f7ff fb3a 	bl	2250 <__aeabi_uidivmod>
    2bdc:	9801      	ldr	r0, [sp, #4]
    2bde:	040b      	lsls	r3, r1, #16
    2be0:	0431      	lsls	r1, r6, #16
    2be2:	0c09      	lsrs	r1, r1, #16
    2be4:	4319      	orrs	r1, r3
    2be6:	4288      	cmp	r0, r1
    2be8:	d90d      	bls.n	2c06 <__aeabi_ddiv+0x38a>
    2bea:	4653      	mov	r3, sl
    2bec:	4441      	add	r1, r8
    2bee:	3b01      	subs	r3, #1
    2bf0:	4588      	cmp	r8, r1
    2bf2:	d900      	bls.n	2bf6 <__aeabi_ddiv+0x37a>
    2bf4:	e0e8      	b.n	2dc8 <__aeabi_ddiv+0x54c>
    2bf6:	4288      	cmp	r0, r1
    2bf8:	d800      	bhi.n	2bfc <__aeabi_ddiv+0x380>
    2bfa:	e0e5      	b.n	2dc8 <__aeabi_ddiv+0x54c>
    2bfc:	2302      	movs	r3, #2
    2bfe:	425b      	negs	r3, r3
    2c00:	469c      	mov	ip, r3
    2c02:	4441      	add	r1, r8
    2c04:	44e2      	add	sl, ip
    2c06:	9b01      	ldr	r3, [sp, #4]
    2c08:	042d      	lsls	r5, r5, #16
    2c0a:	1ace      	subs	r6, r1, r3
    2c0c:	4651      	mov	r1, sl
    2c0e:	4329      	orrs	r1, r5
    2c10:	9d05      	ldr	r5, [sp, #20]
    2c12:	464f      	mov	r7, r9
    2c14:	002a      	movs	r2, r5
    2c16:	040b      	lsls	r3, r1, #16
    2c18:	0c08      	lsrs	r0, r1, #16
    2c1a:	0c1b      	lsrs	r3, r3, #16
    2c1c:	435a      	muls	r2, r3
    2c1e:	4345      	muls	r5, r0
    2c20:	437b      	muls	r3, r7
    2c22:	4378      	muls	r0, r7
    2c24:	195b      	adds	r3, r3, r5
    2c26:	0c17      	lsrs	r7, r2, #16
    2c28:	18fb      	adds	r3, r7, r3
    2c2a:	429d      	cmp	r5, r3
    2c2c:	d903      	bls.n	2c36 <__aeabi_ddiv+0x3ba>
    2c2e:	2580      	movs	r5, #128	; 0x80
    2c30:	026d      	lsls	r5, r5, #9
    2c32:	46ac      	mov	ip, r5
    2c34:	4460      	add	r0, ip
    2c36:	0c1d      	lsrs	r5, r3, #16
    2c38:	0412      	lsls	r2, r2, #16
    2c3a:	041b      	lsls	r3, r3, #16
    2c3c:	0c12      	lsrs	r2, r2, #16
    2c3e:	1828      	adds	r0, r5, r0
    2c40:	189b      	adds	r3, r3, r2
    2c42:	4286      	cmp	r6, r0
    2c44:	d200      	bcs.n	2c48 <__aeabi_ddiv+0x3cc>
    2c46:	e093      	b.n	2d70 <__aeabi_ddiv+0x4f4>
    2c48:	d100      	bne.n	2c4c <__aeabi_ddiv+0x3d0>
    2c4a:	e08e      	b.n	2d6a <__aeabi_ddiv+0x4ee>
    2c4c:	2301      	movs	r3, #1
    2c4e:	4319      	orrs	r1, r3
    2c50:	4ba0      	ldr	r3, [pc, #640]	; (2ed4 <__aeabi_ddiv+0x658>)
    2c52:	18e3      	adds	r3, r4, r3
    2c54:	2b00      	cmp	r3, #0
    2c56:	dc00      	bgt.n	2c5a <__aeabi_ddiv+0x3de>
    2c58:	e099      	b.n	2d8e <__aeabi_ddiv+0x512>
    2c5a:	074a      	lsls	r2, r1, #29
    2c5c:	d000      	beq.n	2c60 <__aeabi_ddiv+0x3e4>
    2c5e:	e09e      	b.n	2d9e <__aeabi_ddiv+0x522>
    2c60:	465a      	mov	r2, fp
    2c62:	01d2      	lsls	r2, r2, #7
    2c64:	d506      	bpl.n	2c74 <__aeabi_ddiv+0x3f8>
    2c66:	465a      	mov	r2, fp
    2c68:	4b9b      	ldr	r3, [pc, #620]	; (2ed8 <__aeabi_ddiv+0x65c>)
    2c6a:	401a      	ands	r2, r3
    2c6c:	2380      	movs	r3, #128	; 0x80
    2c6e:	4693      	mov	fp, r2
    2c70:	00db      	lsls	r3, r3, #3
    2c72:	18e3      	adds	r3, r4, r3
    2c74:	4a99      	ldr	r2, [pc, #612]	; (2edc <__aeabi_ddiv+0x660>)
    2c76:	4293      	cmp	r3, r2
    2c78:	dd68      	ble.n	2d4c <__aeabi_ddiv+0x4d0>
    2c7a:	2301      	movs	r3, #1
    2c7c:	9a02      	ldr	r2, [sp, #8]
    2c7e:	4c98      	ldr	r4, [pc, #608]	; (2ee0 <__aeabi_ddiv+0x664>)
    2c80:	401a      	ands	r2, r3
    2c82:	2300      	movs	r3, #0
    2c84:	4694      	mov	ip, r2
    2c86:	4698      	mov	r8, r3
    2c88:	2200      	movs	r2, #0
    2c8a:	e6c5      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2c8c:	2280      	movs	r2, #128	; 0x80
    2c8e:	464b      	mov	r3, r9
    2c90:	0312      	lsls	r2, r2, #12
    2c92:	4213      	tst	r3, r2
    2c94:	d00a      	beq.n	2cac <__aeabi_ddiv+0x430>
    2c96:	465b      	mov	r3, fp
    2c98:	4213      	tst	r3, r2
    2c9a:	d106      	bne.n	2caa <__aeabi_ddiv+0x42e>
    2c9c:	431a      	orrs	r2, r3
    2c9e:	0312      	lsls	r2, r2, #12
    2ca0:	0b12      	lsrs	r2, r2, #12
    2ca2:	46ac      	mov	ip, r5
    2ca4:	4688      	mov	r8, r1
    2ca6:	4c8e      	ldr	r4, [pc, #568]	; (2ee0 <__aeabi_ddiv+0x664>)
    2ca8:	e6b6      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2caa:	464b      	mov	r3, r9
    2cac:	431a      	orrs	r2, r3
    2cae:	0312      	lsls	r2, r2, #12
    2cb0:	0b12      	lsrs	r2, r2, #12
    2cb2:	46bc      	mov	ip, r7
    2cb4:	4c8a      	ldr	r4, [pc, #552]	; (2ee0 <__aeabi_ddiv+0x664>)
    2cb6:	e6af      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2cb8:	0003      	movs	r3, r0
    2cba:	465a      	mov	r2, fp
    2cbc:	3b28      	subs	r3, #40	; 0x28
    2cbe:	409a      	lsls	r2, r3
    2cc0:	2300      	movs	r3, #0
    2cc2:	4691      	mov	r9, r2
    2cc4:	4698      	mov	r8, r3
    2cc6:	e657      	b.n	2978 <__aeabi_ddiv+0xfc>
    2cc8:	4658      	mov	r0, fp
    2cca:	f000 ff0d 	bl	3ae8 <__clzsi2>
    2cce:	3020      	adds	r0, #32
    2cd0:	e640      	b.n	2954 <__aeabi_ddiv+0xd8>
    2cd2:	0003      	movs	r3, r0
    2cd4:	4652      	mov	r2, sl
    2cd6:	3b28      	subs	r3, #40	; 0x28
    2cd8:	409a      	lsls	r2, r3
    2cda:	2100      	movs	r1, #0
    2cdc:	4693      	mov	fp, r2
    2cde:	e677      	b.n	29d0 <__aeabi_ddiv+0x154>
    2ce0:	f000 ff02 	bl	3ae8 <__clzsi2>
    2ce4:	3020      	adds	r0, #32
    2ce6:	e65f      	b.n	29a8 <__aeabi_ddiv+0x12c>
    2ce8:	4588      	cmp	r8, r1
    2cea:	d200      	bcs.n	2cee <__aeabi_ddiv+0x472>
    2cec:	e6c7      	b.n	2a7e <__aeabi_ddiv+0x202>
    2cee:	464b      	mov	r3, r9
    2cf0:	07de      	lsls	r6, r3, #31
    2cf2:	085d      	lsrs	r5, r3, #1
    2cf4:	4643      	mov	r3, r8
    2cf6:	085b      	lsrs	r3, r3, #1
    2cf8:	431e      	orrs	r6, r3
    2cfa:	4643      	mov	r3, r8
    2cfc:	07db      	lsls	r3, r3, #31
    2cfe:	469a      	mov	sl, r3
    2d00:	e6c2      	b.n	2a88 <__aeabi_ddiv+0x20c>
    2d02:	2500      	movs	r5, #0
    2d04:	4592      	cmp	sl, r2
    2d06:	d300      	bcc.n	2d0a <__aeabi_ddiv+0x48e>
    2d08:	e733      	b.n	2b72 <__aeabi_ddiv+0x2f6>
    2d0a:	9e03      	ldr	r6, [sp, #12]
    2d0c:	4659      	mov	r1, fp
    2d0e:	46b4      	mov	ip, r6
    2d10:	44e2      	add	sl, ip
    2d12:	45b2      	cmp	sl, r6
    2d14:	41ad      	sbcs	r5, r5
    2d16:	426d      	negs	r5, r5
    2d18:	4445      	add	r5, r8
    2d1a:	18eb      	adds	r3, r5, r3
    2d1c:	3901      	subs	r1, #1
    2d1e:	4598      	cmp	r8, r3
    2d20:	d207      	bcs.n	2d32 <__aeabi_ddiv+0x4b6>
    2d22:	4298      	cmp	r0, r3
    2d24:	d900      	bls.n	2d28 <__aeabi_ddiv+0x4ac>
    2d26:	e07f      	b.n	2e28 <__aeabi_ddiv+0x5ac>
    2d28:	d100      	bne.n	2d2c <__aeabi_ddiv+0x4b0>
    2d2a:	e0bc      	b.n	2ea6 <__aeabi_ddiv+0x62a>
    2d2c:	1a1d      	subs	r5, r3, r0
    2d2e:	468b      	mov	fp, r1
    2d30:	e71f      	b.n	2b72 <__aeabi_ddiv+0x2f6>
    2d32:	4598      	cmp	r8, r3
    2d34:	d1fa      	bne.n	2d2c <__aeabi_ddiv+0x4b0>
    2d36:	9d03      	ldr	r5, [sp, #12]
    2d38:	4555      	cmp	r5, sl
    2d3a:	d9f2      	bls.n	2d22 <__aeabi_ddiv+0x4a6>
    2d3c:	4643      	mov	r3, r8
    2d3e:	468b      	mov	fp, r1
    2d40:	1a1d      	subs	r5, r3, r0
    2d42:	e716      	b.n	2b72 <__aeabi_ddiv+0x2f6>
    2d44:	469b      	mov	fp, r3
    2d46:	e6ca      	b.n	2ade <__aeabi_ddiv+0x262>
    2d48:	0015      	movs	r5, r2
    2d4a:	e6e7      	b.n	2b1c <__aeabi_ddiv+0x2a0>
    2d4c:	465a      	mov	r2, fp
    2d4e:	08c9      	lsrs	r1, r1, #3
    2d50:	0752      	lsls	r2, r2, #29
    2d52:	430a      	orrs	r2, r1
    2d54:	055b      	lsls	r3, r3, #21
    2d56:	4690      	mov	r8, r2
    2d58:	0d5c      	lsrs	r4, r3, #21
    2d5a:	465a      	mov	r2, fp
    2d5c:	2301      	movs	r3, #1
    2d5e:	9902      	ldr	r1, [sp, #8]
    2d60:	0252      	lsls	r2, r2, #9
    2d62:	4019      	ands	r1, r3
    2d64:	0b12      	lsrs	r2, r2, #12
    2d66:	468c      	mov	ip, r1
    2d68:	e656      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d100      	bne.n	2d70 <__aeabi_ddiv+0x4f4>
    2d6e:	e76f      	b.n	2c50 <__aeabi_ddiv+0x3d4>
    2d70:	4446      	add	r6, r8
    2d72:	1e4a      	subs	r2, r1, #1
    2d74:	45b0      	cmp	r8, r6
    2d76:	d929      	bls.n	2dcc <__aeabi_ddiv+0x550>
    2d78:	0011      	movs	r1, r2
    2d7a:	4286      	cmp	r6, r0
    2d7c:	d000      	beq.n	2d80 <__aeabi_ddiv+0x504>
    2d7e:	e765      	b.n	2c4c <__aeabi_ddiv+0x3d0>
    2d80:	9a03      	ldr	r2, [sp, #12]
    2d82:	4293      	cmp	r3, r2
    2d84:	d000      	beq.n	2d88 <__aeabi_ddiv+0x50c>
    2d86:	e761      	b.n	2c4c <__aeabi_ddiv+0x3d0>
    2d88:	e762      	b.n	2c50 <__aeabi_ddiv+0x3d4>
    2d8a:	2101      	movs	r1, #1
    2d8c:	4249      	negs	r1, r1
    2d8e:	2001      	movs	r0, #1
    2d90:	1ac2      	subs	r2, r0, r3
    2d92:	2a38      	cmp	r2, #56	; 0x38
    2d94:	dd21      	ble.n	2dda <__aeabi_ddiv+0x55e>
    2d96:	9b02      	ldr	r3, [sp, #8]
    2d98:	4003      	ands	r3, r0
    2d9a:	469c      	mov	ip, r3
    2d9c:	e638      	b.n	2a10 <__aeabi_ddiv+0x194>
    2d9e:	220f      	movs	r2, #15
    2da0:	400a      	ands	r2, r1
    2da2:	2a04      	cmp	r2, #4
    2da4:	d100      	bne.n	2da8 <__aeabi_ddiv+0x52c>
    2da6:	e75b      	b.n	2c60 <__aeabi_ddiv+0x3e4>
    2da8:	000a      	movs	r2, r1
    2daa:	1d11      	adds	r1, r2, #4
    2dac:	4291      	cmp	r1, r2
    2dae:	4192      	sbcs	r2, r2
    2db0:	4252      	negs	r2, r2
    2db2:	4493      	add	fp, r2
    2db4:	e754      	b.n	2c60 <__aeabi_ddiv+0x3e4>
    2db6:	4b47      	ldr	r3, [pc, #284]	; (2ed4 <__aeabi_ddiv+0x658>)
    2db8:	18e3      	adds	r3, r4, r3
    2dba:	2b00      	cmp	r3, #0
    2dbc:	dde5      	ble.n	2d8a <__aeabi_ddiv+0x50e>
    2dbe:	2201      	movs	r2, #1
    2dc0:	4252      	negs	r2, r2
    2dc2:	e7f2      	b.n	2daa <__aeabi_ddiv+0x52e>
    2dc4:	001d      	movs	r5, r3
    2dc6:	e6fa      	b.n	2bbe <__aeabi_ddiv+0x342>
    2dc8:	469a      	mov	sl, r3
    2dca:	e71c      	b.n	2c06 <__aeabi_ddiv+0x38a>
    2dcc:	42b0      	cmp	r0, r6
    2dce:	d839      	bhi.n	2e44 <__aeabi_ddiv+0x5c8>
    2dd0:	d06e      	beq.n	2eb0 <__aeabi_ddiv+0x634>
    2dd2:	0011      	movs	r1, r2
    2dd4:	e73a      	b.n	2c4c <__aeabi_ddiv+0x3d0>
    2dd6:	9302      	str	r3, [sp, #8]
    2dd8:	e73a      	b.n	2c50 <__aeabi_ddiv+0x3d4>
    2dda:	2a1f      	cmp	r2, #31
    2ddc:	dc3c      	bgt.n	2e58 <__aeabi_ddiv+0x5dc>
    2dde:	2320      	movs	r3, #32
    2de0:	1a9b      	subs	r3, r3, r2
    2de2:	000c      	movs	r4, r1
    2de4:	4658      	mov	r0, fp
    2de6:	4099      	lsls	r1, r3
    2de8:	4098      	lsls	r0, r3
    2dea:	1e4b      	subs	r3, r1, #1
    2dec:	4199      	sbcs	r1, r3
    2dee:	465b      	mov	r3, fp
    2df0:	40d4      	lsrs	r4, r2
    2df2:	40d3      	lsrs	r3, r2
    2df4:	4320      	orrs	r0, r4
    2df6:	4308      	orrs	r0, r1
    2df8:	001a      	movs	r2, r3
    2dfa:	0743      	lsls	r3, r0, #29
    2dfc:	d009      	beq.n	2e12 <__aeabi_ddiv+0x596>
    2dfe:	230f      	movs	r3, #15
    2e00:	4003      	ands	r3, r0
    2e02:	2b04      	cmp	r3, #4
    2e04:	d005      	beq.n	2e12 <__aeabi_ddiv+0x596>
    2e06:	0001      	movs	r1, r0
    2e08:	1d08      	adds	r0, r1, #4
    2e0a:	4288      	cmp	r0, r1
    2e0c:	419b      	sbcs	r3, r3
    2e0e:	425b      	negs	r3, r3
    2e10:	18d2      	adds	r2, r2, r3
    2e12:	0213      	lsls	r3, r2, #8
    2e14:	d53a      	bpl.n	2e8c <__aeabi_ddiv+0x610>
    2e16:	2301      	movs	r3, #1
    2e18:	9a02      	ldr	r2, [sp, #8]
    2e1a:	2401      	movs	r4, #1
    2e1c:	401a      	ands	r2, r3
    2e1e:	2300      	movs	r3, #0
    2e20:	4694      	mov	ip, r2
    2e22:	4698      	mov	r8, r3
    2e24:	2200      	movs	r2, #0
    2e26:	e5f7      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2e28:	2102      	movs	r1, #2
    2e2a:	4249      	negs	r1, r1
    2e2c:	468c      	mov	ip, r1
    2e2e:	9d03      	ldr	r5, [sp, #12]
    2e30:	44e3      	add	fp, ip
    2e32:	46ac      	mov	ip, r5
    2e34:	44e2      	add	sl, ip
    2e36:	45aa      	cmp	sl, r5
    2e38:	41ad      	sbcs	r5, r5
    2e3a:	426d      	negs	r5, r5
    2e3c:	4445      	add	r5, r8
    2e3e:	18ed      	adds	r5, r5, r3
    2e40:	1a2d      	subs	r5, r5, r0
    2e42:	e696      	b.n	2b72 <__aeabi_ddiv+0x2f6>
    2e44:	1e8a      	subs	r2, r1, #2
    2e46:	9903      	ldr	r1, [sp, #12]
    2e48:	004d      	lsls	r5, r1, #1
    2e4a:	428d      	cmp	r5, r1
    2e4c:	4189      	sbcs	r1, r1
    2e4e:	4249      	negs	r1, r1
    2e50:	4441      	add	r1, r8
    2e52:	1876      	adds	r6, r6, r1
    2e54:	9503      	str	r5, [sp, #12]
    2e56:	e78f      	b.n	2d78 <__aeabi_ddiv+0x4fc>
    2e58:	201f      	movs	r0, #31
    2e5a:	4240      	negs	r0, r0
    2e5c:	1ac3      	subs	r3, r0, r3
    2e5e:	4658      	mov	r0, fp
    2e60:	40d8      	lsrs	r0, r3
    2e62:	0003      	movs	r3, r0
    2e64:	2a20      	cmp	r2, #32
    2e66:	d028      	beq.n	2eba <__aeabi_ddiv+0x63e>
    2e68:	2040      	movs	r0, #64	; 0x40
    2e6a:	465d      	mov	r5, fp
    2e6c:	1a82      	subs	r2, r0, r2
    2e6e:	4095      	lsls	r5, r2
    2e70:	4329      	orrs	r1, r5
    2e72:	1e4a      	subs	r2, r1, #1
    2e74:	4191      	sbcs	r1, r2
    2e76:	4319      	orrs	r1, r3
    2e78:	2307      	movs	r3, #7
    2e7a:	2200      	movs	r2, #0
    2e7c:	400b      	ands	r3, r1
    2e7e:	d009      	beq.n	2e94 <__aeabi_ddiv+0x618>
    2e80:	230f      	movs	r3, #15
    2e82:	2200      	movs	r2, #0
    2e84:	400b      	ands	r3, r1
    2e86:	0008      	movs	r0, r1
    2e88:	2b04      	cmp	r3, #4
    2e8a:	d1bd      	bne.n	2e08 <__aeabi_ddiv+0x58c>
    2e8c:	0001      	movs	r1, r0
    2e8e:	0753      	lsls	r3, r2, #29
    2e90:	0252      	lsls	r2, r2, #9
    2e92:	0b12      	lsrs	r2, r2, #12
    2e94:	08c9      	lsrs	r1, r1, #3
    2e96:	4319      	orrs	r1, r3
    2e98:	2301      	movs	r3, #1
    2e9a:	4688      	mov	r8, r1
    2e9c:	9902      	ldr	r1, [sp, #8]
    2e9e:	2400      	movs	r4, #0
    2ea0:	4019      	ands	r1, r3
    2ea2:	468c      	mov	ip, r1
    2ea4:	e5b8      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2ea6:	4552      	cmp	r2, sl
    2ea8:	d8be      	bhi.n	2e28 <__aeabi_ddiv+0x5ac>
    2eaa:	468b      	mov	fp, r1
    2eac:	2500      	movs	r5, #0
    2eae:	e660      	b.n	2b72 <__aeabi_ddiv+0x2f6>
    2eb0:	9d03      	ldr	r5, [sp, #12]
    2eb2:	429d      	cmp	r5, r3
    2eb4:	d3c6      	bcc.n	2e44 <__aeabi_ddiv+0x5c8>
    2eb6:	0011      	movs	r1, r2
    2eb8:	e762      	b.n	2d80 <__aeabi_ddiv+0x504>
    2eba:	2500      	movs	r5, #0
    2ebc:	e7d8      	b.n	2e70 <__aeabi_ddiv+0x5f4>
    2ebe:	2280      	movs	r2, #128	; 0x80
    2ec0:	465b      	mov	r3, fp
    2ec2:	0312      	lsls	r2, r2, #12
    2ec4:	431a      	orrs	r2, r3
    2ec6:	9b01      	ldr	r3, [sp, #4]
    2ec8:	0312      	lsls	r2, r2, #12
    2eca:	0b12      	lsrs	r2, r2, #12
    2ecc:	469c      	mov	ip, r3
    2ece:	4688      	mov	r8, r1
    2ed0:	4c03      	ldr	r4, [pc, #12]	; (2ee0 <__aeabi_ddiv+0x664>)
    2ed2:	e5a1      	b.n	2a18 <__aeabi_ddiv+0x19c>
    2ed4:	000003ff 	.word	0x000003ff
    2ed8:	feffffff 	.word	0xfeffffff
    2edc:	000007fe 	.word	0x000007fe
    2ee0:	000007ff 	.word	0x000007ff

00002ee4 <__aeabi_dmul>:
    2ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ee6:	4657      	mov	r7, sl
    2ee8:	4645      	mov	r5, r8
    2eea:	46de      	mov	lr, fp
    2eec:	464e      	mov	r6, r9
    2eee:	b5e0      	push	{r5, r6, r7, lr}
    2ef0:	030c      	lsls	r4, r1, #12
    2ef2:	4698      	mov	r8, r3
    2ef4:	004e      	lsls	r6, r1, #1
    2ef6:	0b23      	lsrs	r3, r4, #12
    2ef8:	b087      	sub	sp, #28
    2efa:	0007      	movs	r7, r0
    2efc:	4692      	mov	sl, r2
    2efe:	469b      	mov	fp, r3
    2f00:	0d76      	lsrs	r6, r6, #21
    2f02:	0fcd      	lsrs	r5, r1, #31
    2f04:	2e00      	cmp	r6, #0
    2f06:	d06b      	beq.n	2fe0 <__aeabi_dmul+0xfc>
    2f08:	4b6d      	ldr	r3, [pc, #436]	; (30c0 <__aeabi_dmul+0x1dc>)
    2f0a:	429e      	cmp	r6, r3
    2f0c:	d035      	beq.n	2f7a <__aeabi_dmul+0x96>
    2f0e:	2480      	movs	r4, #128	; 0x80
    2f10:	465b      	mov	r3, fp
    2f12:	0f42      	lsrs	r2, r0, #29
    2f14:	0424      	lsls	r4, r4, #16
    2f16:	00db      	lsls	r3, r3, #3
    2f18:	4314      	orrs	r4, r2
    2f1a:	431c      	orrs	r4, r3
    2f1c:	00c3      	lsls	r3, r0, #3
    2f1e:	4699      	mov	r9, r3
    2f20:	4b68      	ldr	r3, [pc, #416]	; (30c4 <__aeabi_dmul+0x1e0>)
    2f22:	46a3      	mov	fp, r4
    2f24:	469c      	mov	ip, r3
    2f26:	2300      	movs	r3, #0
    2f28:	2700      	movs	r7, #0
    2f2a:	4466      	add	r6, ip
    2f2c:	9302      	str	r3, [sp, #8]
    2f2e:	4643      	mov	r3, r8
    2f30:	031c      	lsls	r4, r3, #12
    2f32:	005a      	lsls	r2, r3, #1
    2f34:	0fdb      	lsrs	r3, r3, #31
    2f36:	4650      	mov	r0, sl
    2f38:	0b24      	lsrs	r4, r4, #12
    2f3a:	0d52      	lsrs	r2, r2, #21
    2f3c:	4698      	mov	r8, r3
    2f3e:	d100      	bne.n	2f42 <__aeabi_dmul+0x5e>
    2f40:	e076      	b.n	3030 <__aeabi_dmul+0x14c>
    2f42:	4b5f      	ldr	r3, [pc, #380]	; (30c0 <__aeabi_dmul+0x1dc>)
    2f44:	429a      	cmp	r2, r3
    2f46:	d06d      	beq.n	3024 <__aeabi_dmul+0x140>
    2f48:	2380      	movs	r3, #128	; 0x80
    2f4a:	0f41      	lsrs	r1, r0, #29
    2f4c:	041b      	lsls	r3, r3, #16
    2f4e:	430b      	orrs	r3, r1
    2f50:	495c      	ldr	r1, [pc, #368]	; (30c4 <__aeabi_dmul+0x1e0>)
    2f52:	00e4      	lsls	r4, r4, #3
    2f54:	468c      	mov	ip, r1
    2f56:	431c      	orrs	r4, r3
    2f58:	00c3      	lsls	r3, r0, #3
    2f5a:	2000      	movs	r0, #0
    2f5c:	4462      	add	r2, ip
    2f5e:	4641      	mov	r1, r8
    2f60:	18b6      	adds	r6, r6, r2
    2f62:	4069      	eors	r1, r5
    2f64:	1c72      	adds	r2, r6, #1
    2f66:	9101      	str	r1, [sp, #4]
    2f68:	4694      	mov	ip, r2
    2f6a:	4307      	orrs	r7, r0
    2f6c:	2f0f      	cmp	r7, #15
    2f6e:	d900      	bls.n	2f72 <__aeabi_dmul+0x8e>
    2f70:	e0b0      	b.n	30d4 <__aeabi_dmul+0x1f0>
    2f72:	4a55      	ldr	r2, [pc, #340]	; (30c8 <__aeabi_dmul+0x1e4>)
    2f74:	00bf      	lsls	r7, r7, #2
    2f76:	59d2      	ldr	r2, [r2, r7]
    2f78:	4697      	mov	pc, r2
    2f7a:	465b      	mov	r3, fp
    2f7c:	4303      	orrs	r3, r0
    2f7e:	4699      	mov	r9, r3
    2f80:	d000      	beq.n	2f84 <__aeabi_dmul+0xa0>
    2f82:	e087      	b.n	3094 <__aeabi_dmul+0x1b0>
    2f84:	2300      	movs	r3, #0
    2f86:	469b      	mov	fp, r3
    2f88:	3302      	adds	r3, #2
    2f8a:	2708      	movs	r7, #8
    2f8c:	9302      	str	r3, [sp, #8]
    2f8e:	e7ce      	b.n	2f2e <__aeabi_dmul+0x4a>
    2f90:	4642      	mov	r2, r8
    2f92:	9201      	str	r2, [sp, #4]
    2f94:	2802      	cmp	r0, #2
    2f96:	d067      	beq.n	3068 <__aeabi_dmul+0x184>
    2f98:	2803      	cmp	r0, #3
    2f9a:	d100      	bne.n	2f9e <__aeabi_dmul+0xba>
    2f9c:	e20e      	b.n	33bc <__aeabi_dmul+0x4d8>
    2f9e:	2801      	cmp	r0, #1
    2fa0:	d000      	beq.n	2fa4 <__aeabi_dmul+0xc0>
    2fa2:	e162      	b.n	326a <__aeabi_dmul+0x386>
    2fa4:	2300      	movs	r3, #0
    2fa6:	2400      	movs	r4, #0
    2fa8:	2200      	movs	r2, #0
    2faa:	4699      	mov	r9, r3
    2fac:	9901      	ldr	r1, [sp, #4]
    2fae:	4001      	ands	r1, r0
    2fb0:	b2cd      	uxtb	r5, r1
    2fb2:	2100      	movs	r1, #0
    2fb4:	0312      	lsls	r2, r2, #12
    2fb6:	0d0b      	lsrs	r3, r1, #20
    2fb8:	0b12      	lsrs	r2, r2, #12
    2fba:	051b      	lsls	r3, r3, #20
    2fbc:	4313      	orrs	r3, r2
    2fbe:	4a43      	ldr	r2, [pc, #268]	; (30cc <__aeabi_dmul+0x1e8>)
    2fc0:	0524      	lsls	r4, r4, #20
    2fc2:	4013      	ands	r3, r2
    2fc4:	431c      	orrs	r4, r3
    2fc6:	0064      	lsls	r4, r4, #1
    2fc8:	07ed      	lsls	r5, r5, #31
    2fca:	0864      	lsrs	r4, r4, #1
    2fcc:	432c      	orrs	r4, r5
    2fce:	4648      	mov	r0, r9
    2fd0:	0021      	movs	r1, r4
    2fd2:	b007      	add	sp, #28
    2fd4:	bc3c      	pop	{r2, r3, r4, r5}
    2fd6:	4690      	mov	r8, r2
    2fd8:	4699      	mov	r9, r3
    2fda:	46a2      	mov	sl, r4
    2fdc:	46ab      	mov	fp, r5
    2fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fe0:	4303      	orrs	r3, r0
    2fe2:	4699      	mov	r9, r3
    2fe4:	d04f      	beq.n	3086 <__aeabi_dmul+0x1a2>
    2fe6:	465b      	mov	r3, fp
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d100      	bne.n	2fee <__aeabi_dmul+0x10a>
    2fec:	e189      	b.n	3302 <__aeabi_dmul+0x41e>
    2fee:	4658      	mov	r0, fp
    2ff0:	f000 fd7a 	bl	3ae8 <__clzsi2>
    2ff4:	0003      	movs	r3, r0
    2ff6:	3b0b      	subs	r3, #11
    2ff8:	2b1c      	cmp	r3, #28
    2ffa:	dd00      	ble.n	2ffe <__aeabi_dmul+0x11a>
    2ffc:	e17a      	b.n	32f4 <__aeabi_dmul+0x410>
    2ffe:	221d      	movs	r2, #29
    3000:	1ad3      	subs	r3, r2, r3
    3002:	003a      	movs	r2, r7
    3004:	0001      	movs	r1, r0
    3006:	465c      	mov	r4, fp
    3008:	40da      	lsrs	r2, r3
    300a:	3908      	subs	r1, #8
    300c:	408c      	lsls	r4, r1
    300e:	0013      	movs	r3, r2
    3010:	408f      	lsls	r7, r1
    3012:	4323      	orrs	r3, r4
    3014:	469b      	mov	fp, r3
    3016:	46b9      	mov	r9, r7
    3018:	2300      	movs	r3, #0
    301a:	4e2d      	ldr	r6, [pc, #180]	; (30d0 <__aeabi_dmul+0x1ec>)
    301c:	2700      	movs	r7, #0
    301e:	1a36      	subs	r6, r6, r0
    3020:	9302      	str	r3, [sp, #8]
    3022:	e784      	b.n	2f2e <__aeabi_dmul+0x4a>
    3024:	4653      	mov	r3, sl
    3026:	4323      	orrs	r3, r4
    3028:	d12a      	bne.n	3080 <__aeabi_dmul+0x19c>
    302a:	2400      	movs	r4, #0
    302c:	2002      	movs	r0, #2
    302e:	e796      	b.n	2f5e <__aeabi_dmul+0x7a>
    3030:	4653      	mov	r3, sl
    3032:	4323      	orrs	r3, r4
    3034:	d020      	beq.n	3078 <__aeabi_dmul+0x194>
    3036:	2c00      	cmp	r4, #0
    3038:	d100      	bne.n	303c <__aeabi_dmul+0x158>
    303a:	e157      	b.n	32ec <__aeabi_dmul+0x408>
    303c:	0020      	movs	r0, r4
    303e:	f000 fd53 	bl	3ae8 <__clzsi2>
    3042:	0003      	movs	r3, r0
    3044:	3b0b      	subs	r3, #11
    3046:	2b1c      	cmp	r3, #28
    3048:	dd00      	ble.n	304c <__aeabi_dmul+0x168>
    304a:	e149      	b.n	32e0 <__aeabi_dmul+0x3fc>
    304c:	211d      	movs	r1, #29
    304e:	1acb      	subs	r3, r1, r3
    3050:	4651      	mov	r1, sl
    3052:	0002      	movs	r2, r0
    3054:	40d9      	lsrs	r1, r3
    3056:	4653      	mov	r3, sl
    3058:	3a08      	subs	r2, #8
    305a:	4094      	lsls	r4, r2
    305c:	4093      	lsls	r3, r2
    305e:	430c      	orrs	r4, r1
    3060:	4a1b      	ldr	r2, [pc, #108]	; (30d0 <__aeabi_dmul+0x1ec>)
    3062:	1a12      	subs	r2, r2, r0
    3064:	2000      	movs	r0, #0
    3066:	e77a      	b.n	2f5e <__aeabi_dmul+0x7a>
    3068:	2501      	movs	r5, #1
    306a:	9b01      	ldr	r3, [sp, #4]
    306c:	4c14      	ldr	r4, [pc, #80]	; (30c0 <__aeabi_dmul+0x1dc>)
    306e:	401d      	ands	r5, r3
    3070:	2300      	movs	r3, #0
    3072:	2200      	movs	r2, #0
    3074:	4699      	mov	r9, r3
    3076:	e79c      	b.n	2fb2 <__aeabi_dmul+0xce>
    3078:	2400      	movs	r4, #0
    307a:	2200      	movs	r2, #0
    307c:	2001      	movs	r0, #1
    307e:	e76e      	b.n	2f5e <__aeabi_dmul+0x7a>
    3080:	4653      	mov	r3, sl
    3082:	2003      	movs	r0, #3
    3084:	e76b      	b.n	2f5e <__aeabi_dmul+0x7a>
    3086:	2300      	movs	r3, #0
    3088:	469b      	mov	fp, r3
    308a:	3301      	adds	r3, #1
    308c:	2704      	movs	r7, #4
    308e:	2600      	movs	r6, #0
    3090:	9302      	str	r3, [sp, #8]
    3092:	e74c      	b.n	2f2e <__aeabi_dmul+0x4a>
    3094:	2303      	movs	r3, #3
    3096:	4681      	mov	r9, r0
    3098:	270c      	movs	r7, #12
    309a:	9302      	str	r3, [sp, #8]
    309c:	e747      	b.n	2f2e <__aeabi_dmul+0x4a>
    309e:	2280      	movs	r2, #128	; 0x80
    30a0:	2300      	movs	r3, #0
    30a2:	2500      	movs	r5, #0
    30a4:	0312      	lsls	r2, r2, #12
    30a6:	4699      	mov	r9, r3
    30a8:	4c05      	ldr	r4, [pc, #20]	; (30c0 <__aeabi_dmul+0x1dc>)
    30aa:	e782      	b.n	2fb2 <__aeabi_dmul+0xce>
    30ac:	465c      	mov	r4, fp
    30ae:	464b      	mov	r3, r9
    30b0:	9802      	ldr	r0, [sp, #8]
    30b2:	e76f      	b.n	2f94 <__aeabi_dmul+0xb0>
    30b4:	465c      	mov	r4, fp
    30b6:	464b      	mov	r3, r9
    30b8:	9501      	str	r5, [sp, #4]
    30ba:	9802      	ldr	r0, [sp, #8]
    30bc:	e76a      	b.n	2f94 <__aeabi_dmul+0xb0>
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	000007ff 	.word	0x000007ff
    30c4:	fffffc01 	.word	0xfffffc01
    30c8:	00003c6c 	.word	0x00003c6c
    30cc:	800fffff 	.word	0x800fffff
    30d0:	fffffc0d 	.word	0xfffffc0d
    30d4:	464a      	mov	r2, r9
    30d6:	4649      	mov	r1, r9
    30d8:	0c17      	lsrs	r7, r2, #16
    30da:	0c1a      	lsrs	r2, r3, #16
    30dc:	041b      	lsls	r3, r3, #16
    30de:	0c1b      	lsrs	r3, r3, #16
    30e0:	0408      	lsls	r0, r1, #16
    30e2:	0019      	movs	r1, r3
    30e4:	0c00      	lsrs	r0, r0, #16
    30e6:	4341      	muls	r1, r0
    30e8:	0015      	movs	r5, r2
    30ea:	4688      	mov	r8, r1
    30ec:	0019      	movs	r1, r3
    30ee:	437d      	muls	r5, r7
    30f0:	4379      	muls	r1, r7
    30f2:	9503      	str	r5, [sp, #12]
    30f4:	4689      	mov	r9, r1
    30f6:	0029      	movs	r1, r5
    30f8:	0015      	movs	r5, r2
    30fa:	4345      	muls	r5, r0
    30fc:	444d      	add	r5, r9
    30fe:	9502      	str	r5, [sp, #8]
    3100:	4645      	mov	r5, r8
    3102:	0c2d      	lsrs	r5, r5, #16
    3104:	46aa      	mov	sl, r5
    3106:	9d02      	ldr	r5, [sp, #8]
    3108:	4455      	add	r5, sl
    310a:	45a9      	cmp	r9, r5
    310c:	d906      	bls.n	311c <__aeabi_dmul+0x238>
    310e:	468a      	mov	sl, r1
    3110:	2180      	movs	r1, #128	; 0x80
    3112:	0249      	lsls	r1, r1, #9
    3114:	4689      	mov	r9, r1
    3116:	44ca      	add	sl, r9
    3118:	4651      	mov	r1, sl
    311a:	9103      	str	r1, [sp, #12]
    311c:	0c29      	lsrs	r1, r5, #16
    311e:	9104      	str	r1, [sp, #16]
    3120:	4641      	mov	r1, r8
    3122:	0409      	lsls	r1, r1, #16
    3124:	042d      	lsls	r5, r5, #16
    3126:	0c09      	lsrs	r1, r1, #16
    3128:	4688      	mov	r8, r1
    312a:	0029      	movs	r1, r5
    312c:	0c25      	lsrs	r5, r4, #16
    312e:	0424      	lsls	r4, r4, #16
    3130:	4441      	add	r1, r8
    3132:	0c24      	lsrs	r4, r4, #16
    3134:	9105      	str	r1, [sp, #20]
    3136:	0021      	movs	r1, r4
    3138:	4341      	muls	r1, r0
    313a:	4688      	mov	r8, r1
    313c:	0021      	movs	r1, r4
    313e:	4379      	muls	r1, r7
    3140:	468a      	mov	sl, r1
    3142:	4368      	muls	r0, r5
    3144:	4641      	mov	r1, r8
    3146:	4450      	add	r0, sl
    3148:	4681      	mov	r9, r0
    314a:	0c08      	lsrs	r0, r1, #16
    314c:	4448      	add	r0, r9
    314e:	436f      	muls	r7, r5
    3150:	4582      	cmp	sl, r0
    3152:	d903      	bls.n	315c <__aeabi_dmul+0x278>
    3154:	2180      	movs	r1, #128	; 0x80
    3156:	0249      	lsls	r1, r1, #9
    3158:	4689      	mov	r9, r1
    315a:	444f      	add	r7, r9
    315c:	0c01      	lsrs	r1, r0, #16
    315e:	4689      	mov	r9, r1
    3160:	0039      	movs	r1, r7
    3162:	4449      	add	r1, r9
    3164:	9102      	str	r1, [sp, #8]
    3166:	4641      	mov	r1, r8
    3168:	040f      	lsls	r7, r1, #16
    316a:	9904      	ldr	r1, [sp, #16]
    316c:	0c3f      	lsrs	r7, r7, #16
    316e:	4688      	mov	r8, r1
    3170:	0400      	lsls	r0, r0, #16
    3172:	19c0      	adds	r0, r0, r7
    3174:	4480      	add	r8, r0
    3176:	4641      	mov	r1, r8
    3178:	9104      	str	r1, [sp, #16]
    317a:	4659      	mov	r1, fp
    317c:	0c0f      	lsrs	r7, r1, #16
    317e:	0409      	lsls	r1, r1, #16
    3180:	0c09      	lsrs	r1, r1, #16
    3182:	4688      	mov	r8, r1
    3184:	4359      	muls	r1, r3
    3186:	468a      	mov	sl, r1
    3188:	0039      	movs	r1, r7
    318a:	4351      	muls	r1, r2
    318c:	4689      	mov	r9, r1
    318e:	4641      	mov	r1, r8
    3190:	434a      	muls	r2, r1
    3192:	4651      	mov	r1, sl
    3194:	0c09      	lsrs	r1, r1, #16
    3196:	468b      	mov	fp, r1
    3198:	437b      	muls	r3, r7
    319a:	18d2      	adds	r2, r2, r3
    319c:	445a      	add	r2, fp
    319e:	4293      	cmp	r3, r2
    31a0:	d903      	bls.n	31aa <__aeabi_dmul+0x2c6>
    31a2:	2380      	movs	r3, #128	; 0x80
    31a4:	025b      	lsls	r3, r3, #9
    31a6:	469b      	mov	fp, r3
    31a8:	44d9      	add	r9, fp
    31aa:	4651      	mov	r1, sl
    31ac:	0409      	lsls	r1, r1, #16
    31ae:	0c09      	lsrs	r1, r1, #16
    31b0:	468a      	mov	sl, r1
    31b2:	4641      	mov	r1, r8
    31b4:	4361      	muls	r1, r4
    31b6:	437c      	muls	r4, r7
    31b8:	0c13      	lsrs	r3, r2, #16
    31ba:	0412      	lsls	r2, r2, #16
    31bc:	444b      	add	r3, r9
    31be:	4452      	add	r2, sl
    31c0:	46a1      	mov	r9, r4
    31c2:	468a      	mov	sl, r1
    31c4:	003c      	movs	r4, r7
    31c6:	4641      	mov	r1, r8
    31c8:	436c      	muls	r4, r5
    31ca:	434d      	muls	r5, r1
    31cc:	4651      	mov	r1, sl
    31ce:	444d      	add	r5, r9
    31d0:	0c0f      	lsrs	r7, r1, #16
    31d2:	197d      	adds	r5, r7, r5
    31d4:	45a9      	cmp	r9, r5
    31d6:	d903      	bls.n	31e0 <__aeabi_dmul+0x2fc>
    31d8:	2180      	movs	r1, #128	; 0x80
    31da:	0249      	lsls	r1, r1, #9
    31dc:	4688      	mov	r8, r1
    31de:	4444      	add	r4, r8
    31e0:	9f04      	ldr	r7, [sp, #16]
    31e2:	9903      	ldr	r1, [sp, #12]
    31e4:	46b8      	mov	r8, r7
    31e6:	4441      	add	r1, r8
    31e8:	468b      	mov	fp, r1
    31ea:	4583      	cmp	fp, r0
    31ec:	4180      	sbcs	r0, r0
    31ee:	4241      	negs	r1, r0
    31f0:	4688      	mov	r8, r1
    31f2:	4651      	mov	r1, sl
    31f4:	0408      	lsls	r0, r1, #16
    31f6:	042f      	lsls	r7, r5, #16
    31f8:	0c00      	lsrs	r0, r0, #16
    31fa:	183f      	adds	r7, r7, r0
    31fc:	4658      	mov	r0, fp
    31fe:	9902      	ldr	r1, [sp, #8]
    3200:	1810      	adds	r0, r2, r0
    3202:	4689      	mov	r9, r1
    3204:	4290      	cmp	r0, r2
    3206:	4192      	sbcs	r2, r2
    3208:	444f      	add	r7, r9
    320a:	46ba      	mov	sl, r7
    320c:	4252      	negs	r2, r2
    320e:	4699      	mov	r9, r3
    3210:	4693      	mov	fp, r2
    3212:	44c2      	add	sl, r8
    3214:	44d1      	add	r9, sl
    3216:	44cb      	add	fp, r9
    3218:	428f      	cmp	r7, r1
    321a:	41bf      	sbcs	r7, r7
    321c:	45c2      	cmp	sl, r8
    321e:	4189      	sbcs	r1, r1
    3220:	4599      	cmp	r9, r3
    3222:	419b      	sbcs	r3, r3
    3224:	4593      	cmp	fp, r2
    3226:	4192      	sbcs	r2, r2
    3228:	427f      	negs	r7, r7
    322a:	4249      	negs	r1, r1
    322c:	0c2d      	lsrs	r5, r5, #16
    322e:	4252      	negs	r2, r2
    3230:	430f      	orrs	r7, r1
    3232:	425b      	negs	r3, r3
    3234:	4313      	orrs	r3, r2
    3236:	197f      	adds	r7, r7, r5
    3238:	18ff      	adds	r7, r7, r3
    323a:	465b      	mov	r3, fp
    323c:	193c      	adds	r4, r7, r4
    323e:	0ddb      	lsrs	r3, r3, #23
    3240:	9a05      	ldr	r2, [sp, #20]
    3242:	0264      	lsls	r4, r4, #9
    3244:	431c      	orrs	r4, r3
    3246:	0243      	lsls	r3, r0, #9
    3248:	4313      	orrs	r3, r2
    324a:	1e5d      	subs	r5, r3, #1
    324c:	41ab      	sbcs	r3, r5
    324e:	465a      	mov	r2, fp
    3250:	0dc0      	lsrs	r0, r0, #23
    3252:	4303      	orrs	r3, r0
    3254:	0252      	lsls	r2, r2, #9
    3256:	4313      	orrs	r3, r2
    3258:	01e2      	lsls	r2, r4, #7
    325a:	d556      	bpl.n	330a <__aeabi_dmul+0x426>
    325c:	2001      	movs	r0, #1
    325e:	085a      	lsrs	r2, r3, #1
    3260:	4003      	ands	r3, r0
    3262:	4313      	orrs	r3, r2
    3264:	07e2      	lsls	r2, r4, #31
    3266:	4313      	orrs	r3, r2
    3268:	0864      	lsrs	r4, r4, #1
    326a:	485a      	ldr	r0, [pc, #360]	; (33d4 <__aeabi_dmul+0x4f0>)
    326c:	4460      	add	r0, ip
    326e:	2800      	cmp	r0, #0
    3270:	dd4d      	ble.n	330e <__aeabi_dmul+0x42a>
    3272:	075a      	lsls	r2, r3, #29
    3274:	d009      	beq.n	328a <__aeabi_dmul+0x3a6>
    3276:	220f      	movs	r2, #15
    3278:	401a      	ands	r2, r3
    327a:	2a04      	cmp	r2, #4
    327c:	d005      	beq.n	328a <__aeabi_dmul+0x3a6>
    327e:	1d1a      	adds	r2, r3, #4
    3280:	429a      	cmp	r2, r3
    3282:	419b      	sbcs	r3, r3
    3284:	425b      	negs	r3, r3
    3286:	18e4      	adds	r4, r4, r3
    3288:	0013      	movs	r3, r2
    328a:	01e2      	lsls	r2, r4, #7
    328c:	d504      	bpl.n	3298 <__aeabi_dmul+0x3b4>
    328e:	2080      	movs	r0, #128	; 0x80
    3290:	4a51      	ldr	r2, [pc, #324]	; (33d8 <__aeabi_dmul+0x4f4>)
    3292:	00c0      	lsls	r0, r0, #3
    3294:	4014      	ands	r4, r2
    3296:	4460      	add	r0, ip
    3298:	4a50      	ldr	r2, [pc, #320]	; (33dc <__aeabi_dmul+0x4f8>)
    329a:	4290      	cmp	r0, r2
    329c:	dd00      	ble.n	32a0 <__aeabi_dmul+0x3bc>
    329e:	e6e3      	b.n	3068 <__aeabi_dmul+0x184>
    32a0:	2501      	movs	r5, #1
    32a2:	08db      	lsrs	r3, r3, #3
    32a4:	0762      	lsls	r2, r4, #29
    32a6:	431a      	orrs	r2, r3
    32a8:	0264      	lsls	r4, r4, #9
    32aa:	9b01      	ldr	r3, [sp, #4]
    32ac:	4691      	mov	r9, r2
    32ae:	0b22      	lsrs	r2, r4, #12
    32b0:	0544      	lsls	r4, r0, #21
    32b2:	0d64      	lsrs	r4, r4, #21
    32b4:	401d      	ands	r5, r3
    32b6:	e67c      	b.n	2fb2 <__aeabi_dmul+0xce>
    32b8:	2280      	movs	r2, #128	; 0x80
    32ba:	4659      	mov	r1, fp
    32bc:	0312      	lsls	r2, r2, #12
    32be:	4211      	tst	r1, r2
    32c0:	d008      	beq.n	32d4 <__aeabi_dmul+0x3f0>
    32c2:	4214      	tst	r4, r2
    32c4:	d106      	bne.n	32d4 <__aeabi_dmul+0x3f0>
    32c6:	4322      	orrs	r2, r4
    32c8:	0312      	lsls	r2, r2, #12
    32ca:	0b12      	lsrs	r2, r2, #12
    32cc:	4645      	mov	r5, r8
    32ce:	4699      	mov	r9, r3
    32d0:	4c43      	ldr	r4, [pc, #268]	; (33e0 <__aeabi_dmul+0x4fc>)
    32d2:	e66e      	b.n	2fb2 <__aeabi_dmul+0xce>
    32d4:	465b      	mov	r3, fp
    32d6:	431a      	orrs	r2, r3
    32d8:	0312      	lsls	r2, r2, #12
    32da:	0b12      	lsrs	r2, r2, #12
    32dc:	4c40      	ldr	r4, [pc, #256]	; (33e0 <__aeabi_dmul+0x4fc>)
    32de:	e668      	b.n	2fb2 <__aeabi_dmul+0xce>
    32e0:	0003      	movs	r3, r0
    32e2:	4654      	mov	r4, sl
    32e4:	3b28      	subs	r3, #40	; 0x28
    32e6:	409c      	lsls	r4, r3
    32e8:	2300      	movs	r3, #0
    32ea:	e6b9      	b.n	3060 <__aeabi_dmul+0x17c>
    32ec:	f000 fbfc 	bl	3ae8 <__clzsi2>
    32f0:	3020      	adds	r0, #32
    32f2:	e6a6      	b.n	3042 <__aeabi_dmul+0x15e>
    32f4:	0003      	movs	r3, r0
    32f6:	3b28      	subs	r3, #40	; 0x28
    32f8:	409f      	lsls	r7, r3
    32fa:	2300      	movs	r3, #0
    32fc:	46bb      	mov	fp, r7
    32fe:	4699      	mov	r9, r3
    3300:	e68a      	b.n	3018 <__aeabi_dmul+0x134>
    3302:	f000 fbf1 	bl	3ae8 <__clzsi2>
    3306:	3020      	adds	r0, #32
    3308:	e674      	b.n	2ff4 <__aeabi_dmul+0x110>
    330a:	46b4      	mov	ip, r6
    330c:	e7ad      	b.n	326a <__aeabi_dmul+0x386>
    330e:	2501      	movs	r5, #1
    3310:	1a2a      	subs	r2, r5, r0
    3312:	2a38      	cmp	r2, #56	; 0x38
    3314:	dd06      	ble.n	3324 <__aeabi_dmul+0x440>
    3316:	9b01      	ldr	r3, [sp, #4]
    3318:	2400      	movs	r4, #0
    331a:	401d      	ands	r5, r3
    331c:	2300      	movs	r3, #0
    331e:	2200      	movs	r2, #0
    3320:	4699      	mov	r9, r3
    3322:	e646      	b.n	2fb2 <__aeabi_dmul+0xce>
    3324:	2a1f      	cmp	r2, #31
    3326:	dc21      	bgt.n	336c <__aeabi_dmul+0x488>
    3328:	2520      	movs	r5, #32
    332a:	0020      	movs	r0, r4
    332c:	1aad      	subs	r5, r5, r2
    332e:	001e      	movs	r6, r3
    3330:	40ab      	lsls	r3, r5
    3332:	40a8      	lsls	r0, r5
    3334:	40d6      	lsrs	r6, r2
    3336:	1e5d      	subs	r5, r3, #1
    3338:	41ab      	sbcs	r3, r5
    333a:	4330      	orrs	r0, r6
    333c:	4318      	orrs	r0, r3
    333e:	40d4      	lsrs	r4, r2
    3340:	0743      	lsls	r3, r0, #29
    3342:	d009      	beq.n	3358 <__aeabi_dmul+0x474>
    3344:	230f      	movs	r3, #15
    3346:	4003      	ands	r3, r0
    3348:	2b04      	cmp	r3, #4
    334a:	d005      	beq.n	3358 <__aeabi_dmul+0x474>
    334c:	0003      	movs	r3, r0
    334e:	1d18      	adds	r0, r3, #4
    3350:	4298      	cmp	r0, r3
    3352:	419b      	sbcs	r3, r3
    3354:	425b      	negs	r3, r3
    3356:	18e4      	adds	r4, r4, r3
    3358:	0223      	lsls	r3, r4, #8
    335a:	d521      	bpl.n	33a0 <__aeabi_dmul+0x4bc>
    335c:	2501      	movs	r5, #1
    335e:	9b01      	ldr	r3, [sp, #4]
    3360:	2401      	movs	r4, #1
    3362:	401d      	ands	r5, r3
    3364:	2300      	movs	r3, #0
    3366:	2200      	movs	r2, #0
    3368:	4699      	mov	r9, r3
    336a:	e622      	b.n	2fb2 <__aeabi_dmul+0xce>
    336c:	251f      	movs	r5, #31
    336e:	0021      	movs	r1, r4
    3370:	426d      	negs	r5, r5
    3372:	1a28      	subs	r0, r5, r0
    3374:	40c1      	lsrs	r1, r0
    3376:	0008      	movs	r0, r1
    3378:	2a20      	cmp	r2, #32
    337a:	d01d      	beq.n	33b8 <__aeabi_dmul+0x4d4>
    337c:	355f      	adds	r5, #95	; 0x5f
    337e:	1aaa      	subs	r2, r5, r2
    3380:	4094      	lsls	r4, r2
    3382:	4323      	orrs	r3, r4
    3384:	1e5c      	subs	r4, r3, #1
    3386:	41a3      	sbcs	r3, r4
    3388:	2507      	movs	r5, #7
    338a:	4303      	orrs	r3, r0
    338c:	401d      	ands	r5, r3
    338e:	2200      	movs	r2, #0
    3390:	2d00      	cmp	r5, #0
    3392:	d009      	beq.n	33a8 <__aeabi_dmul+0x4c4>
    3394:	220f      	movs	r2, #15
    3396:	2400      	movs	r4, #0
    3398:	401a      	ands	r2, r3
    339a:	0018      	movs	r0, r3
    339c:	2a04      	cmp	r2, #4
    339e:	d1d6      	bne.n	334e <__aeabi_dmul+0x46a>
    33a0:	0003      	movs	r3, r0
    33a2:	0765      	lsls	r5, r4, #29
    33a4:	0264      	lsls	r4, r4, #9
    33a6:	0b22      	lsrs	r2, r4, #12
    33a8:	08db      	lsrs	r3, r3, #3
    33aa:	432b      	orrs	r3, r5
    33ac:	2501      	movs	r5, #1
    33ae:	4699      	mov	r9, r3
    33b0:	9b01      	ldr	r3, [sp, #4]
    33b2:	2400      	movs	r4, #0
    33b4:	401d      	ands	r5, r3
    33b6:	e5fc      	b.n	2fb2 <__aeabi_dmul+0xce>
    33b8:	2400      	movs	r4, #0
    33ba:	e7e2      	b.n	3382 <__aeabi_dmul+0x49e>
    33bc:	2280      	movs	r2, #128	; 0x80
    33be:	2501      	movs	r5, #1
    33c0:	0312      	lsls	r2, r2, #12
    33c2:	4322      	orrs	r2, r4
    33c4:	9901      	ldr	r1, [sp, #4]
    33c6:	0312      	lsls	r2, r2, #12
    33c8:	0b12      	lsrs	r2, r2, #12
    33ca:	400d      	ands	r5, r1
    33cc:	4699      	mov	r9, r3
    33ce:	4c04      	ldr	r4, [pc, #16]	; (33e0 <__aeabi_dmul+0x4fc>)
    33d0:	e5ef      	b.n	2fb2 <__aeabi_dmul+0xce>
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	000003ff 	.word	0x000003ff
    33d8:	feffffff 	.word	0xfeffffff
    33dc:	000007fe 	.word	0x000007fe
    33e0:	000007ff 	.word	0x000007ff

000033e4 <__aeabi_dsub>:
    33e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33e6:	4646      	mov	r6, r8
    33e8:	46d6      	mov	lr, sl
    33ea:	464f      	mov	r7, r9
    33ec:	030c      	lsls	r4, r1, #12
    33ee:	b5c0      	push	{r6, r7, lr}
    33f0:	0fcd      	lsrs	r5, r1, #31
    33f2:	004e      	lsls	r6, r1, #1
    33f4:	0a61      	lsrs	r1, r4, #9
    33f6:	0f44      	lsrs	r4, r0, #29
    33f8:	430c      	orrs	r4, r1
    33fa:	00c1      	lsls	r1, r0, #3
    33fc:	0058      	lsls	r0, r3, #1
    33fe:	0d40      	lsrs	r0, r0, #21
    3400:	4684      	mov	ip, r0
    3402:	468a      	mov	sl, r1
    3404:	000f      	movs	r7, r1
    3406:	0319      	lsls	r1, r3, #12
    3408:	0f50      	lsrs	r0, r2, #29
    340a:	0a49      	lsrs	r1, r1, #9
    340c:	4301      	orrs	r1, r0
    340e:	48c6      	ldr	r0, [pc, #792]	; (3728 <__aeabi_dsub+0x344>)
    3410:	0d76      	lsrs	r6, r6, #21
    3412:	46a8      	mov	r8, r5
    3414:	0fdb      	lsrs	r3, r3, #31
    3416:	00d2      	lsls	r2, r2, #3
    3418:	4584      	cmp	ip, r0
    341a:	d100      	bne.n	341e <__aeabi_dsub+0x3a>
    341c:	e0d8      	b.n	35d0 <__aeabi_dsub+0x1ec>
    341e:	2001      	movs	r0, #1
    3420:	4043      	eors	r3, r0
    3422:	42ab      	cmp	r3, r5
    3424:	d100      	bne.n	3428 <__aeabi_dsub+0x44>
    3426:	e0a6      	b.n	3576 <__aeabi_dsub+0x192>
    3428:	4660      	mov	r0, ip
    342a:	1a35      	subs	r5, r6, r0
    342c:	2d00      	cmp	r5, #0
    342e:	dc00      	bgt.n	3432 <__aeabi_dsub+0x4e>
    3430:	e105      	b.n	363e <__aeabi_dsub+0x25a>
    3432:	2800      	cmp	r0, #0
    3434:	d110      	bne.n	3458 <__aeabi_dsub+0x74>
    3436:	000b      	movs	r3, r1
    3438:	4313      	orrs	r3, r2
    343a:	d100      	bne.n	343e <__aeabi_dsub+0x5a>
    343c:	e0d7      	b.n	35ee <__aeabi_dsub+0x20a>
    343e:	1e6b      	subs	r3, r5, #1
    3440:	2b00      	cmp	r3, #0
    3442:	d000      	beq.n	3446 <__aeabi_dsub+0x62>
    3444:	e14b      	b.n	36de <__aeabi_dsub+0x2fa>
    3446:	4653      	mov	r3, sl
    3448:	1a9f      	subs	r7, r3, r2
    344a:	45ba      	cmp	sl, r7
    344c:	4180      	sbcs	r0, r0
    344e:	1a64      	subs	r4, r4, r1
    3450:	4240      	negs	r0, r0
    3452:	1a24      	subs	r4, r4, r0
    3454:	2601      	movs	r6, #1
    3456:	e01e      	b.n	3496 <__aeabi_dsub+0xb2>
    3458:	4bb3      	ldr	r3, [pc, #716]	; (3728 <__aeabi_dsub+0x344>)
    345a:	429e      	cmp	r6, r3
    345c:	d048      	beq.n	34f0 <__aeabi_dsub+0x10c>
    345e:	2380      	movs	r3, #128	; 0x80
    3460:	041b      	lsls	r3, r3, #16
    3462:	4319      	orrs	r1, r3
    3464:	2d38      	cmp	r5, #56	; 0x38
    3466:	dd00      	ble.n	346a <__aeabi_dsub+0x86>
    3468:	e119      	b.n	369e <__aeabi_dsub+0x2ba>
    346a:	2d1f      	cmp	r5, #31
    346c:	dd00      	ble.n	3470 <__aeabi_dsub+0x8c>
    346e:	e14c      	b.n	370a <__aeabi_dsub+0x326>
    3470:	2320      	movs	r3, #32
    3472:	000f      	movs	r7, r1
    3474:	1b5b      	subs	r3, r3, r5
    3476:	0010      	movs	r0, r2
    3478:	409a      	lsls	r2, r3
    347a:	409f      	lsls	r7, r3
    347c:	40e8      	lsrs	r0, r5
    347e:	1e53      	subs	r3, r2, #1
    3480:	419a      	sbcs	r2, r3
    3482:	40e9      	lsrs	r1, r5
    3484:	4307      	orrs	r7, r0
    3486:	4317      	orrs	r7, r2
    3488:	4653      	mov	r3, sl
    348a:	1bdf      	subs	r7, r3, r7
    348c:	1a61      	subs	r1, r4, r1
    348e:	45ba      	cmp	sl, r7
    3490:	41a4      	sbcs	r4, r4
    3492:	4264      	negs	r4, r4
    3494:	1b0c      	subs	r4, r1, r4
    3496:	0223      	lsls	r3, r4, #8
    3498:	d400      	bmi.n	349c <__aeabi_dsub+0xb8>
    349a:	e0c5      	b.n	3628 <__aeabi_dsub+0x244>
    349c:	0264      	lsls	r4, r4, #9
    349e:	0a65      	lsrs	r5, r4, #9
    34a0:	2d00      	cmp	r5, #0
    34a2:	d100      	bne.n	34a6 <__aeabi_dsub+0xc2>
    34a4:	e0f6      	b.n	3694 <__aeabi_dsub+0x2b0>
    34a6:	0028      	movs	r0, r5
    34a8:	f000 fb1e 	bl	3ae8 <__clzsi2>
    34ac:	0003      	movs	r3, r0
    34ae:	3b08      	subs	r3, #8
    34b0:	2b1f      	cmp	r3, #31
    34b2:	dd00      	ble.n	34b6 <__aeabi_dsub+0xd2>
    34b4:	e0e9      	b.n	368a <__aeabi_dsub+0x2a6>
    34b6:	2220      	movs	r2, #32
    34b8:	003c      	movs	r4, r7
    34ba:	1ad2      	subs	r2, r2, r3
    34bc:	409d      	lsls	r5, r3
    34be:	40d4      	lsrs	r4, r2
    34c0:	409f      	lsls	r7, r3
    34c2:	4325      	orrs	r5, r4
    34c4:	429e      	cmp	r6, r3
    34c6:	dd00      	ble.n	34ca <__aeabi_dsub+0xe6>
    34c8:	e0db      	b.n	3682 <__aeabi_dsub+0x29e>
    34ca:	1b9e      	subs	r6, r3, r6
    34cc:	1c73      	adds	r3, r6, #1
    34ce:	2b1f      	cmp	r3, #31
    34d0:	dd00      	ble.n	34d4 <__aeabi_dsub+0xf0>
    34d2:	e10a      	b.n	36ea <__aeabi_dsub+0x306>
    34d4:	2220      	movs	r2, #32
    34d6:	0038      	movs	r0, r7
    34d8:	1ad2      	subs	r2, r2, r3
    34da:	0029      	movs	r1, r5
    34dc:	4097      	lsls	r7, r2
    34de:	002c      	movs	r4, r5
    34e0:	4091      	lsls	r1, r2
    34e2:	40d8      	lsrs	r0, r3
    34e4:	1e7a      	subs	r2, r7, #1
    34e6:	4197      	sbcs	r7, r2
    34e8:	40dc      	lsrs	r4, r3
    34ea:	2600      	movs	r6, #0
    34ec:	4301      	orrs	r1, r0
    34ee:	430f      	orrs	r7, r1
    34f0:	077b      	lsls	r3, r7, #29
    34f2:	d009      	beq.n	3508 <__aeabi_dsub+0x124>
    34f4:	230f      	movs	r3, #15
    34f6:	403b      	ands	r3, r7
    34f8:	2b04      	cmp	r3, #4
    34fa:	d005      	beq.n	3508 <__aeabi_dsub+0x124>
    34fc:	1d3b      	adds	r3, r7, #4
    34fe:	42bb      	cmp	r3, r7
    3500:	41bf      	sbcs	r7, r7
    3502:	427f      	negs	r7, r7
    3504:	19e4      	adds	r4, r4, r7
    3506:	001f      	movs	r7, r3
    3508:	0223      	lsls	r3, r4, #8
    350a:	d525      	bpl.n	3558 <__aeabi_dsub+0x174>
    350c:	4b86      	ldr	r3, [pc, #536]	; (3728 <__aeabi_dsub+0x344>)
    350e:	3601      	adds	r6, #1
    3510:	429e      	cmp	r6, r3
    3512:	d100      	bne.n	3516 <__aeabi_dsub+0x132>
    3514:	e0af      	b.n	3676 <__aeabi_dsub+0x292>
    3516:	4b85      	ldr	r3, [pc, #532]	; (372c <__aeabi_dsub+0x348>)
    3518:	2501      	movs	r5, #1
    351a:	401c      	ands	r4, r3
    351c:	4643      	mov	r3, r8
    351e:	0762      	lsls	r2, r4, #29
    3520:	08ff      	lsrs	r7, r7, #3
    3522:	0264      	lsls	r4, r4, #9
    3524:	0576      	lsls	r6, r6, #21
    3526:	4317      	orrs	r7, r2
    3528:	0b24      	lsrs	r4, r4, #12
    352a:	0d76      	lsrs	r6, r6, #21
    352c:	401d      	ands	r5, r3
    352e:	2100      	movs	r1, #0
    3530:	0324      	lsls	r4, r4, #12
    3532:	0b23      	lsrs	r3, r4, #12
    3534:	0d0c      	lsrs	r4, r1, #20
    3536:	4a7e      	ldr	r2, [pc, #504]	; (3730 <__aeabi_dsub+0x34c>)
    3538:	0524      	lsls	r4, r4, #20
    353a:	431c      	orrs	r4, r3
    353c:	4014      	ands	r4, r2
    353e:	0533      	lsls	r3, r6, #20
    3540:	4323      	orrs	r3, r4
    3542:	005b      	lsls	r3, r3, #1
    3544:	07ed      	lsls	r5, r5, #31
    3546:	085b      	lsrs	r3, r3, #1
    3548:	432b      	orrs	r3, r5
    354a:	0038      	movs	r0, r7
    354c:	0019      	movs	r1, r3
    354e:	bc1c      	pop	{r2, r3, r4}
    3550:	4690      	mov	r8, r2
    3552:	4699      	mov	r9, r3
    3554:	46a2      	mov	sl, r4
    3556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3558:	2501      	movs	r5, #1
    355a:	4643      	mov	r3, r8
    355c:	0762      	lsls	r2, r4, #29
    355e:	08ff      	lsrs	r7, r7, #3
    3560:	4317      	orrs	r7, r2
    3562:	08e4      	lsrs	r4, r4, #3
    3564:	401d      	ands	r5, r3
    3566:	4b70      	ldr	r3, [pc, #448]	; (3728 <__aeabi_dsub+0x344>)
    3568:	429e      	cmp	r6, r3
    356a:	d036      	beq.n	35da <__aeabi_dsub+0x1f6>
    356c:	0324      	lsls	r4, r4, #12
    356e:	0576      	lsls	r6, r6, #21
    3570:	0b24      	lsrs	r4, r4, #12
    3572:	0d76      	lsrs	r6, r6, #21
    3574:	e7db      	b.n	352e <__aeabi_dsub+0x14a>
    3576:	4663      	mov	r3, ip
    3578:	1af3      	subs	r3, r6, r3
    357a:	2b00      	cmp	r3, #0
    357c:	dc00      	bgt.n	3580 <__aeabi_dsub+0x19c>
    357e:	e094      	b.n	36aa <__aeabi_dsub+0x2c6>
    3580:	4660      	mov	r0, ip
    3582:	2800      	cmp	r0, #0
    3584:	d035      	beq.n	35f2 <__aeabi_dsub+0x20e>
    3586:	4868      	ldr	r0, [pc, #416]	; (3728 <__aeabi_dsub+0x344>)
    3588:	4286      	cmp	r6, r0
    358a:	d0b1      	beq.n	34f0 <__aeabi_dsub+0x10c>
    358c:	2780      	movs	r7, #128	; 0x80
    358e:	043f      	lsls	r7, r7, #16
    3590:	4339      	orrs	r1, r7
    3592:	2b38      	cmp	r3, #56	; 0x38
    3594:	dc00      	bgt.n	3598 <__aeabi_dsub+0x1b4>
    3596:	e0fd      	b.n	3794 <__aeabi_dsub+0x3b0>
    3598:	430a      	orrs	r2, r1
    359a:	0017      	movs	r7, r2
    359c:	2100      	movs	r1, #0
    359e:	1e7a      	subs	r2, r7, #1
    35a0:	4197      	sbcs	r7, r2
    35a2:	4457      	add	r7, sl
    35a4:	4557      	cmp	r7, sl
    35a6:	4180      	sbcs	r0, r0
    35a8:	1909      	adds	r1, r1, r4
    35aa:	4244      	negs	r4, r0
    35ac:	190c      	adds	r4, r1, r4
    35ae:	0223      	lsls	r3, r4, #8
    35b0:	d53a      	bpl.n	3628 <__aeabi_dsub+0x244>
    35b2:	4b5d      	ldr	r3, [pc, #372]	; (3728 <__aeabi_dsub+0x344>)
    35b4:	3601      	adds	r6, #1
    35b6:	429e      	cmp	r6, r3
    35b8:	d100      	bne.n	35bc <__aeabi_dsub+0x1d8>
    35ba:	e14b      	b.n	3854 <__aeabi_dsub+0x470>
    35bc:	2201      	movs	r2, #1
    35be:	4b5b      	ldr	r3, [pc, #364]	; (372c <__aeabi_dsub+0x348>)
    35c0:	401c      	ands	r4, r3
    35c2:	087b      	lsrs	r3, r7, #1
    35c4:	4017      	ands	r7, r2
    35c6:	431f      	orrs	r7, r3
    35c8:	07e2      	lsls	r2, r4, #31
    35ca:	4317      	orrs	r7, r2
    35cc:	0864      	lsrs	r4, r4, #1
    35ce:	e78f      	b.n	34f0 <__aeabi_dsub+0x10c>
    35d0:	0008      	movs	r0, r1
    35d2:	4310      	orrs	r0, r2
    35d4:	d000      	beq.n	35d8 <__aeabi_dsub+0x1f4>
    35d6:	e724      	b.n	3422 <__aeabi_dsub+0x3e>
    35d8:	e721      	b.n	341e <__aeabi_dsub+0x3a>
    35da:	0023      	movs	r3, r4
    35dc:	433b      	orrs	r3, r7
    35de:	d100      	bne.n	35e2 <__aeabi_dsub+0x1fe>
    35e0:	e1b9      	b.n	3956 <__aeabi_dsub+0x572>
    35e2:	2280      	movs	r2, #128	; 0x80
    35e4:	0312      	lsls	r2, r2, #12
    35e6:	4314      	orrs	r4, r2
    35e8:	0324      	lsls	r4, r4, #12
    35ea:	0b24      	lsrs	r4, r4, #12
    35ec:	e79f      	b.n	352e <__aeabi_dsub+0x14a>
    35ee:	002e      	movs	r6, r5
    35f0:	e77e      	b.n	34f0 <__aeabi_dsub+0x10c>
    35f2:	0008      	movs	r0, r1
    35f4:	4310      	orrs	r0, r2
    35f6:	d100      	bne.n	35fa <__aeabi_dsub+0x216>
    35f8:	e0ca      	b.n	3790 <__aeabi_dsub+0x3ac>
    35fa:	1e58      	subs	r0, r3, #1
    35fc:	4684      	mov	ip, r0
    35fe:	2800      	cmp	r0, #0
    3600:	d000      	beq.n	3604 <__aeabi_dsub+0x220>
    3602:	e0e7      	b.n	37d4 <__aeabi_dsub+0x3f0>
    3604:	4452      	add	r2, sl
    3606:	4552      	cmp	r2, sl
    3608:	4180      	sbcs	r0, r0
    360a:	1864      	adds	r4, r4, r1
    360c:	4240      	negs	r0, r0
    360e:	1824      	adds	r4, r4, r0
    3610:	0017      	movs	r7, r2
    3612:	2601      	movs	r6, #1
    3614:	0223      	lsls	r3, r4, #8
    3616:	d507      	bpl.n	3628 <__aeabi_dsub+0x244>
    3618:	2602      	movs	r6, #2
    361a:	e7cf      	b.n	35bc <__aeabi_dsub+0x1d8>
    361c:	4664      	mov	r4, ip
    361e:	432c      	orrs	r4, r5
    3620:	d100      	bne.n	3624 <__aeabi_dsub+0x240>
    3622:	e1b3      	b.n	398c <__aeabi_dsub+0x5a8>
    3624:	002c      	movs	r4, r5
    3626:	4667      	mov	r7, ip
    3628:	077b      	lsls	r3, r7, #29
    362a:	d000      	beq.n	362e <__aeabi_dsub+0x24a>
    362c:	e762      	b.n	34f4 <__aeabi_dsub+0x110>
    362e:	0763      	lsls	r3, r4, #29
    3630:	08ff      	lsrs	r7, r7, #3
    3632:	431f      	orrs	r7, r3
    3634:	2501      	movs	r5, #1
    3636:	4643      	mov	r3, r8
    3638:	08e4      	lsrs	r4, r4, #3
    363a:	401d      	ands	r5, r3
    363c:	e793      	b.n	3566 <__aeabi_dsub+0x182>
    363e:	2d00      	cmp	r5, #0
    3640:	d178      	bne.n	3734 <__aeabi_dsub+0x350>
    3642:	1c75      	adds	r5, r6, #1
    3644:	056d      	lsls	r5, r5, #21
    3646:	0d6d      	lsrs	r5, r5, #21
    3648:	2d01      	cmp	r5, #1
    364a:	dc00      	bgt.n	364e <__aeabi_dsub+0x26a>
    364c:	e0f2      	b.n	3834 <__aeabi_dsub+0x450>
    364e:	4650      	mov	r0, sl
    3650:	1a80      	subs	r0, r0, r2
    3652:	4582      	cmp	sl, r0
    3654:	41bf      	sbcs	r7, r7
    3656:	1a65      	subs	r5, r4, r1
    3658:	427f      	negs	r7, r7
    365a:	1bed      	subs	r5, r5, r7
    365c:	4684      	mov	ip, r0
    365e:	0228      	lsls	r0, r5, #8
    3660:	d400      	bmi.n	3664 <__aeabi_dsub+0x280>
    3662:	e08c      	b.n	377e <__aeabi_dsub+0x39a>
    3664:	4650      	mov	r0, sl
    3666:	1a17      	subs	r7, r2, r0
    3668:	42ba      	cmp	r2, r7
    366a:	4192      	sbcs	r2, r2
    366c:	1b0c      	subs	r4, r1, r4
    366e:	4255      	negs	r5, r2
    3670:	1b65      	subs	r5, r4, r5
    3672:	4698      	mov	r8, r3
    3674:	e714      	b.n	34a0 <__aeabi_dsub+0xbc>
    3676:	2501      	movs	r5, #1
    3678:	4643      	mov	r3, r8
    367a:	2400      	movs	r4, #0
    367c:	401d      	ands	r5, r3
    367e:	2700      	movs	r7, #0
    3680:	e755      	b.n	352e <__aeabi_dsub+0x14a>
    3682:	4c2a      	ldr	r4, [pc, #168]	; (372c <__aeabi_dsub+0x348>)
    3684:	1af6      	subs	r6, r6, r3
    3686:	402c      	ands	r4, r5
    3688:	e732      	b.n	34f0 <__aeabi_dsub+0x10c>
    368a:	003d      	movs	r5, r7
    368c:	3828      	subs	r0, #40	; 0x28
    368e:	4085      	lsls	r5, r0
    3690:	2700      	movs	r7, #0
    3692:	e717      	b.n	34c4 <__aeabi_dsub+0xe0>
    3694:	0038      	movs	r0, r7
    3696:	f000 fa27 	bl	3ae8 <__clzsi2>
    369a:	3020      	adds	r0, #32
    369c:	e706      	b.n	34ac <__aeabi_dsub+0xc8>
    369e:	430a      	orrs	r2, r1
    36a0:	0017      	movs	r7, r2
    36a2:	2100      	movs	r1, #0
    36a4:	1e7a      	subs	r2, r7, #1
    36a6:	4197      	sbcs	r7, r2
    36a8:	e6ee      	b.n	3488 <__aeabi_dsub+0xa4>
    36aa:	2b00      	cmp	r3, #0
    36ac:	d000      	beq.n	36b0 <__aeabi_dsub+0x2cc>
    36ae:	e0e5      	b.n	387c <__aeabi_dsub+0x498>
    36b0:	1c73      	adds	r3, r6, #1
    36b2:	469c      	mov	ip, r3
    36b4:	055b      	lsls	r3, r3, #21
    36b6:	0d5b      	lsrs	r3, r3, #21
    36b8:	2b01      	cmp	r3, #1
    36ba:	dc00      	bgt.n	36be <__aeabi_dsub+0x2da>
    36bc:	e09f      	b.n	37fe <__aeabi_dsub+0x41a>
    36be:	4b1a      	ldr	r3, [pc, #104]	; (3728 <__aeabi_dsub+0x344>)
    36c0:	459c      	cmp	ip, r3
    36c2:	d100      	bne.n	36c6 <__aeabi_dsub+0x2e2>
    36c4:	e0c5      	b.n	3852 <__aeabi_dsub+0x46e>
    36c6:	4452      	add	r2, sl
    36c8:	4552      	cmp	r2, sl
    36ca:	4180      	sbcs	r0, r0
    36cc:	1864      	adds	r4, r4, r1
    36ce:	4240      	negs	r0, r0
    36d0:	1824      	adds	r4, r4, r0
    36d2:	07e7      	lsls	r7, r4, #31
    36d4:	0852      	lsrs	r2, r2, #1
    36d6:	4317      	orrs	r7, r2
    36d8:	0864      	lsrs	r4, r4, #1
    36da:	4666      	mov	r6, ip
    36dc:	e708      	b.n	34f0 <__aeabi_dsub+0x10c>
    36de:	4812      	ldr	r0, [pc, #72]	; (3728 <__aeabi_dsub+0x344>)
    36e0:	4285      	cmp	r5, r0
    36e2:	d100      	bne.n	36e6 <__aeabi_dsub+0x302>
    36e4:	e085      	b.n	37f2 <__aeabi_dsub+0x40e>
    36e6:	001d      	movs	r5, r3
    36e8:	e6bc      	b.n	3464 <__aeabi_dsub+0x80>
    36ea:	0029      	movs	r1, r5
    36ec:	3e1f      	subs	r6, #31
    36ee:	40f1      	lsrs	r1, r6
    36f0:	2b20      	cmp	r3, #32
    36f2:	d100      	bne.n	36f6 <__aeabi_dsub+0x312>
    36f4:	e07f      	b.n	37f6 <__aeabi_dsub+0x412>
    36f6:	2240      	movs	r2, #64	; 0x40
    36f8:	1ad3      	subs	r3, r2, r3
    36fa:	409d      	lsls	r5, r3
    36fc:	432f      	orrs	r7, r5
    36fe:	1e7d      	subs	r5, r7, #1
    3700:	41af      	sbcs	r7, r5
    3702:	2400      	movs	r4, #0
    3704:	430f      	orrs	r7, r1
    3706:	2600      	movs	r6, #0
    3708:	e78e      	b.n	3628 <__aeabi_dsub+0x244>
    370a:	002b      	movs	r3, r5
    370c:	000f      	movs	r7, r1
    370e:	3b20      	subs	r3, #32
    3710:	40df      	lsrs	r7, r3
    3712:	2d20      	cmp	r5, #32
    3714:	d071      	beq.n	37fa <__aeabi_dsub+0x416>
    3716:	2340      	movs	r3, #64	; 0x40
    3718:	1b5d      	subs	r5, r3, r5
    371a:	40a9      	lsls	r1, r5
    371c:	430a      	orrs	r2, r1
    371e:	1e51      	subs	r1, r2, #1
    3720:	418a      	sbcs	r2, r1
    3722:	2100      	movs	r1, #0
    3724:	4317      	orrs	r7, r2
    3726:	e6af      	b.n	3488 <__aeabi_dsub+0xa4>
    3728:	000007ff 	.word	0x000007ff
    372c:	ff7fffff 	.word	0xff7fffff
    3730:	800fffff 	.word	0x800fffff
    3734:	2e00      	cmp	r6, #0
    3736:	d03e      	beq.n	37b6 <__aeabi_dsub+0x3d2>
    3738:	4eb3      	ldr	r6, [pc, #716]	; (3a08 <__aeabi_dsub+0x624>)
    373a:	45b4      	cmp	ip, r6
    373c:	d045      	beq.n	37ca <__aeabi_dsub+0x3e6>
    373e:	2680      	movs	r6, #128	; 0x80
    3740:	0436      	lsls	r6, r6, #16
    3742:	426d      	negs	r5, r5
    3744:	4334      	orrs	r4, r6
    3746:	2d38      	cmp	r5, #56	; 0x38
    3748:	dd00      	ble.n	374c <__aeabi_dsub+0x368>
    374a:	e0a8      	b.n	389e <__aeabi_dsub+0x4ba>
    374c:	2d1f      	cmp	r5, #31
    374e:	dd00      	ble.n	3752 <__aeabi_dsub+0x36e>
    3750:	e11f      	b.n	3992 <__aeabi_dsub+0x5ae>
    3752:	2620      	movs	r6, #32
    3754:	0027      	movs	r7, r4
    3756:	4650      	mov	r0, sl
    3758:	1b76      	subs	r6, r6, r5
    375a:	40b7      	lsls	r7, r6
    375c:	40e8      	lsrs	r0, r5
    375e:	4307      	orrs	r7, r0
    3760:	4650      	mov	r0, sl
    3762:	40b0      	lsls	r0, r6
    3764:	1e46      	subs	r6, r0, #1
    3766:	41b0      	sbcs	r0, r6
    3768:	40ec      	lsrs	r4, r5
    376a:	4338      	orrs	r0, r7
    376c:	1a17      	subs	r7, r2, r0
    376e:	42ba      	cmp	r2, r7
    3770:	4192      	sbcs	r2, r2
    3772:	1b0c      	subs	r4, r1, r4
    3774:	4252      	negs	r2, r2
    3776:	1aa4      	subs	r4, r4, r2
    3778:	4666      	mov	r6, ip
    377a:	4698      	mov	r8, r3
    377c:	e68b      	b.n	3496 <__aeabi_dsub+0xb2>
    377e:	4664      	mov	r4, ip
    3780:	4667      	mov	r7, ip
    3782:	432c      	orrs	r4, r5
    3784:	d000      	beq.n	3788 <__aeabi_dsub+0x3a4>
    3786:	e68b      	b.n	34a0 <__aeabi_dsub+0xbc>
    3788:	2500      	movs	r5, #0
    378a:	2600      	movs	r6, #0
    378c:	2700      	movs	r7, #0
    378e:	e6ea      	b.n	3566 <__aeabi_dsub+0x182>
    3790:	001e      	movs	r6, r3
    3792:	e6ad      	b.n	34f0 <__aeabi_dsub+0x10c>
    3794:	2b1f      	cmp	r3, #31
    3796:	dc60      	bgt.n	385a <__aeabi_dsub+0x476>
    3798:	2720      	movs	r7, #32
    379a:	1af8      	subs	r0, r7, r3
    379c:	000f      	movs	r7, r1
    379e:	4684      	mov	ip, r0
    37a0:	4087      	lsls	r7, r0
    37a2:	0010      	movs	r0, r2
    37a4:	40d8      	lsrs	r0, r3
    37a6:	4307      	orrs	r7, r0
    37a8:	4660      	mov	r0, ip
    37aa:	4082      	lsls	r2, r0
    37ac:	1e50      	subs	r0, r2, #1
    37ae:	4182      	sbcs	r2, r0
    37b0:	40d9      	lsrs	r1, r3
    37b2:	4317      	orrs	r7, r2
    37b4:	e6f5      	b.n	35a2 <__aeabi_dsub+0x1be>
    37b6:	0026      	movs	r6, r4
    37b8:	4650      	mov	r0, sl
    37ba:	4306      	orrs	r6, r0
    37bc:	d005      	beq.n	37ca <__aeabi_dsub+0x3e6>
    37be:	43ed      	mvns	r5, r5
    37c0:	2d00      	cmp	r5, #0
    37c2:	d0d3      	beq.n	376c <__aeabi_dsub+0x388>
    37c4:	4e90      	ldr	r6, [pc, #576]	; (3a08 <__aeabi_dsub+0x624>)
    37c6:	45b4      	cmp	ip, r6
    37c8:	d1bd      	bne.n	3746 <__aeabi_dsub+0x362>
    37ca:	000c      	movs	r4, r1
    37cc:	0017      	movs	r7, r2
    37ce:	4666      	mov	r6, ip
    37d0:	4698      	mov	r8, r3
    37d2:	e68d      	b.n	34f0 <__aeabi_dsub+0x10c>
    37d4:	488c      	ldr	r0, [pc, #560]	; (3a08 <__aeabi_dsub+0x624>)
    37d6:	4283      	cmp	r3, r0
    37d8:	d00b      	beq.n	37f2 <__aeabi_dsub+0x40e>
    37da:	4663      	mov	r3, ip
    37dc:	e6d9      	b.n	3592 <__aeabi_dsub+0x1ae>
    37de:	2d00      	cmp	r5, #0
    37e0:	d000      	beq.n	37e4 <__aeabi_dsub+0x400>
    37e2:	e096      	b.n	3912 <__aeabi_dsub+0x52e>
    37e4:	0008      	movs	r0, r1
    37e6:	4310      	orrs	r0, r2
    37e8:	d100      	bne.n	37ec <__aeabi_dsub+0x408>
    37ea:	e0e2      	b.n	39b2 <__aeabi_dsub+0x5ce>
    37ec:	000c      	movs	r4, r1
    37ee:	0017      	movs	r7, r2
    37f0:	4698      	mov	r8, r3
    37f2:	4e85      	ldr	r6, [pc, #532]	; (3a08 <__aeabi_dsub+0x624>)
    37f4:	e67c      	b.n	34f0 <__aeabi_dsub+0x10c>
    37f6:	2500      	movs	r5, #0
    37f8:	e780      	b.n	36fc <__aeabi_dsub+0x318>
    37fa:	2100      	movs	r1, #0
    37fc:	e78e      	b.n	371c <__aeabi_dsub+0x338>
    37fe:	0023      	movs	r3, r4
    3800:	4650      	mov	r0, sl
    3802:	4303      	orrs	r3, r0
    3804:	2e00      	cmp	r6, #0
    3806:	d000      	beq.n	380a <__aeabi_dsub+0x426>
    3808:	e0a8      	b.n	395c <__aeabi_dsub+0x578>
    380a:	2b00      	cmp	r3, #0
    380c:	d100      	bne.n	3810 <__aeabi_dsub+0x42c>
    380e:	e0de      	b.n	39ce <__aeabi_dsub+0x5ea>
    3810:	000b      	movs	r3, r1
    3812:	4313      	orrs	r3, r2
    3814:	d100      	bne.n	3818 <__aeabi_dsub+0x434>
    3816:	e66b      	b.n	34f0 <__aeabi_dsub+0x10c>
    3818:	4452      	add	r2, sl
    381a:	4552      	cmp	r2, sl
    381c:	4180      	sbcs	r0, r0
    381e:	1864      	adds	r4, r4, r1
    3820:	4240      	negs	r0, r0
    3822:	1824      	adds	r4, r4, r0
    3824:	0017      	movs	r7, r2
    3826:	0223      	lsls	r3, r4, #8
    3828:	d400      	bmi.n	382c <__aeabi_dsub+0x448>
    382a:	e6fd      	b.n	3628 <__aeabi_dsub+0x244>
    382c:	4b77      	ldr	r3, [pc, #476]	; (3a0c <__aeabi_dsub+0x628>)
    382e:	4666      	mov	r6, ip
    3830:	401c      	ands	r4, r3
    3832:	e65d      	b.n	34f0 <__aeabi_dsub+0x10c>
    3834:	0025      	movs	r5, r4
    3836:	4650      	mov	r0, sl
    3838:	4305      	orrs	r5, r0
    383a:	2e00      	cmp	r6, #0
    383c:	d1cf      	bne.n	37de <__aeabi_dsub+0x3fa>
    383e:	2d00      	cmp	r5, #0
    3840:	d14f      	bne.n	38e2 <__aeabi_dsub+0x4fe>
    3842:	000c      	movs	r4, r1
    3844:	4314      	orrs	r4, r2
    3846:	d100      	bne.n	384a <__aeabi_dsub+0x466>
    3848:	e0a0      	b.n	398c <__aeabi_dsub+0x5a8>
    384a:	000c      	movs	r4, r1
    384c:	0017      	movs	r7, r2
    384e:	4698      	mov	r8, r3
    3850:	e64e      	b.n	34f0 <__aeabi_dsub+0x10c>
    3852:	4666      	mov	r6, ip
    3854:	2400      	movs	r4, #0
    3856:	2700      	movs	r7, #0
    3858:	e685      	b.n	3566 <__aeabi_dsub+0x182>
    385a:	001f      	movs	r7, r3
    385c:	0008      	movs	r0, r1
    385e:	3f20      	subs	r7, #32
    3860:	40f8      	lsrs	r0, r7
    3862:	0007      	movs	r7, r0
    3864:	2b20      	cmp	r3, #32
    3866:	d100      	bne.n	386a <__aeabi_dsub+0x486>
    3868:	e08e      	b.n	3988 <__aeabi_dsub+0x5a4>
    386a:	2040      	movs	r0, #64	; 0x40
    386c:	1ac3      	subs	r3, r0, r3
    386e:	4099      	lsls	r1, r3
    3870:	430a      	orrs	r2, r1
    3872:	1e51      	subs	r1, r2, #1
    3874:	418a      	sbcs	r2, r1
    3876:	2100      	movs	r1, #0
    3878:	4317      	orrs	r7, r2
    387a:	e692      	b.n	35a2 <__aeabi_dsub+0x1be>
    387c:	2e00      	cmp	r6, #0
    387e:	d114      	bne.n	38aa <__aeabi_dsub+0x4c6>
    3880:	0026      	movs	r6, r4
    3882:	4650      	mov	r0, sl
    3884:	4306      	orrs	r6, r0
    3886:	d062      	beq.n	394e <__aeabi_dsub+0x56a>
    3888:	43db      	mvns	r3, r3
    388a:	2b00      	cmp	r3, #0
    388c:	d15c      	bne.n	3948 <__aeabi_dsub+0x564>
    388e:	1887      	adds	r7, r0, r2
    3890:	4297      	cmp	r7, r2
    3892:	4192      	sbcs	r2, r2
    3894:	1864      	adds	r4, r4, r1
    3896:	4252      	negs	r2, r2
    3898:	18a4      	adds	r4, r4, r2
    389a:	4666      	mov	r6, ip
    389c:	e687      	b.n	35ae <__aeabi_dsub+0x1ca>
    389e:	4650      	mov	r0, sl
    38a0:	4320      	orrs	r0, r4
    38a2:	1e44      	subs	r4, r0, #1
    38a4:	41a0      	sbcs	r0, r4
    38a6:	2400      	movs	r4, #0
    38a8:	e760      	b.n	376c <__aeabi_dsub+0x388>
    38aa:	4e57      	ldr	r6, [pc, #348]	; (3a08 <__aeabi_dsub+0x624>)
    38ac:	45b4      	cmp	ip, r6
    38ae:	d04e      	beq.n	394e <__aeabi_dsub+0x56a>
    38b0:	2680      	movs	r6, #128	; 0x80
    38b2:	0436      	lsls	r6, r6, #16
    38b4:	425b      	negs	r3, r3
    38b6:	4334      	orrs	r4, r6
    38b8:	2b38      	cmp	r3, #56	; 0x38
    38ba:	dd00      	ble.n	38be <__aeabi_dsub+0x4da>
    38bc:	e07f      	b.n	39be <__aeabi_dsub+0x5da>
    38be:	2b1f      	cmp	r3, #31
    38c0:	dd00      	ble.n	38c4 <__aeabi_dsub+0x4e0>
    38c2:	e08b      	b.n	39dc <__aeabi_dsub+0x5f8>
    38c4:	2620      	movs	r6, #32
    38c6:	0027      	movs	r7, r4
    38c8:	4650      	mov	r0, sl
    38ca:	1af6      	subs	r6, r6, r3
    38cc:	40b7      	lsls	r7, r6
    38ce:	40d8      	lsrs	r0, r3
    38d0:	4307      	orrs	r7, r0
    38d2:	4650      	mov	r0, sl
    38d4:	40b0      	lsls	r0, r6
    38d6:	1e46      	subs	r6, r0, #1
    38d8:	41b0      	sbcs	r0, r6
    38da:	4307      	orrs	r7, r0
    38dc:	40dc      	lsrs	r4, r3
    38de:	18bf      	adds	r7, r7, r2
    38e0:	e7d6      	b.n	3890 <__aeabi_dsub+0x4ac>
    38e2:	000d      	movs	r5, r1
    38e4:	4315      	orrs	r5, r2
    38e6:	d100      	bne.n	38ea <__aeabi_dsub+0x506>
    38e8:	e602      	b.n	34f0 <__aeabi_dsub+0x10c>
    38ea:	4650      	mov	r0, sl
    38ec:	1a80      	subs	r0, r0, r2
    38ee:	4582      	cmp	sl, r0
    38f0:	41bf      	sbcs	r7, r7
    38f2:	1a65      	subs	r5, r4, r1
    38f4:	427f      	negs	r7, r7
    38f6:	1bed      	subs	r5, r5, r7
    38f8:	4684      	mov	ip, r0
    38fa:	0228      	lsls	r0, r5, #8
    38fc:	d400      	bmi.n	3900 <__aeabi_dsub+0x51c>
    38fe:	e68d      	b.n	361c <__aeabi_dsub+0x238>
    3900:	4650      	mov	r0, sl
    3902:	1a17      	subs	r7, r2, r0
    3904:	42ba      	cmp	r2, r7
    3906:	4192      	sbcs	r2, r2
    3908:	1b0c      	subs	r4, r1, r4
    390a:	4252      	negs	r2, r2
    390c:	1aa4      	subs	r4, r4, r2
    390e:	4698      	mov	r8, r3
    3910:	e5ee      	b.n	34f0 <__aeabi_dsub+0x10c>
    3912:	000d      	movs	r5, r1
    3914:	4315      	orrs	r5, r2
    3916:	d100      	bne.n	391a <__aeabi_dsub+0x536>
    3918:	e76b      	b.n	37f2 <__aeabi_dsub+0x40e>
    391a:	4650      	mov	r0, sl
    391c:	0767      	lsls	r7, r4, #29
    391e:	08c0      	lsrs	r0, r0, #3
    3920:	4307      	orrs	r7, r0
    3922:	2080      	movs	r0, #128	; 0x80
    3924:	08e4      	lsrs	r4, r4, #3
    3926:	0300      	lsls	r0, r0, #12
    3928:	4204      	tst	r4, r0
    392a:	d007      	beq.n	393c <__aeabi_dsub+0x558>
    392c:	08cd      	lsrs	r5, r1, #3
    392e:	4205      	tst	r5, r0
    3930:	d104      	bne.n	393c <__aeabi_dsub+0x558>
    3932:	002c      	movs	r4, r5
    3934:	4698      	mov	r8, r3
    3936:	08d7      	lsrs	r7, r2, #3
    3938:	0749      	lsls	r1, r1, #29
    393a:	430f      	orrs	r7, r1
    393c:	0f7b      	lsrs	r3, r7, #29
    393e:	00e4      	lsls	r4, r4, #3
    3940:	431c      	orrs	r4, r3
    3942:	00ff      	lsls	r7, r7, #3
    3944:	4e30      	ldr	r6, [pc, #192]	; (3a08 <__aeabi_dsub+0x624>)
    3946:	e5d3      	b.n	34f0 <__aeabi_dsub+0x10c>
    3948:	4e2f      	ldr	r6, [pc, #188]	; (3a08 <__aeabi_dsub+0x624>)
    394a:	45b4      	cmp	ip, r6
    394c:	d1b4      	bne.n	38b8 <__aeabi_dsub+0x4d4>
    394e:	000c      	movs	r4, r1
    3950:	0017      	movs	r7, r2
    3952:	4666      	mov	r6, ip
    3954:	e5cc      	b.n	34f0 <__aeabi_dsub+0x10c>
    3956:	2700      	movs	r7, #0
    3958:	2400      	movs	r4, #0
    395a:	e5e8      	b.n	352e <__aeabi_dsub+0x14a>
    395c:	2b00      	cmp	r3, #0
    395e:	d039      	beq.n	39d4 <__aeabi_dsub+0x5f0>
    3960:	000b      	movs	r3, r1
    3962:	4313      	orrs	r3, r2
    3964:	d100      	bne.n	3968 <__aeabi_dsub+0x584>
    3966:	e744      	b.n	37f2 <__aeabi_dsub+0x40e>
    3968:	08c0      	lsrs	r0, r0, #3
    396a:	0767      	lsls	r7, r4, #29
    396c:	4307      	orrs	r7, r0
    396e:	2080      	movs	r0, #128	; 0x80
    3970:	08e4      	lsrs	r4, r4, #3
    3972:	0300      	lsls	r0, r0, #12
    3974:	4204      	tst	r4, r0
    3976:	d0e1      	beq.n	393c <__aeabi_dsub+0x558>
    3978:	08cb      	lsrs	r3, r1, #3
    397a:	4203      	tst	r3, r0
    397c:	d1de      	bne.n	393c <__aeabi_dsub+0x558>
    397e:	08d7      	lsrs	r7, r2, #3
    3980:	0749      	lsls	r1, r1, #29
    3982:	430f      	orrs	r7, r1
    3984:	001c      	movs	r4, r3
    3986:	e7d9      	b.n	393c <__aeabi_dsub+0x558>
    3988:	2100      	movs	r1, #0
    398a:	e771      	b.n	3870 <__aeabi_dsub+0x48c>
    398c:	2500      	movs	r5, #0
    398e:	2700      	movs	r7, #0
    3990:	e5e9      	b.n	3566 <__aeabi_dsub+0x182>
    3992:	002e      	movs	r6, r5
    3994:	0027      	movs	r7, r4
    3996:	3e20      	subs	r6, #32
    3998:	40f7      	lsrs	r7, r6
    399a:	2d20      	cmp	r5, #32
    399c:	d02f      	beq.n	39fe <__aeabi_dsub+0x61a>
    399e:	2640      	movs	r6, #64	; 0x40
    39a0:	1b75      	subs	r5, r6, r5
    39a2:	40ac      	lsls	r4, r5
    39a4:	4650      	mov	r0, sl
    39a6:	4320      	orrs	r0, r4
    39a8:	1e44      	subs	r4, r0, #1
    39aa:	41a0      	sbcs	r0, r4
    39ac:	2400      	movs	r4, #0
    39ae:	4338      	orrs	r0, r7
    39b0:	e6dc      	b.n	376c <__aeabi_dsub+0x388>
    39b2:	2480      	movs	r4, #128	; 0x80
    39b4:	2500      	movs	r5, #0
    39b6:	0324      	lsls	r4, r4, #12
    39b8:	4e13      	ldr	r6, [pc, #76]	; (3a08 <__aeabi_dsub+0x624>)
    39ba:	2700      	movs	r7, #0
    39bc:	e5d3      	b.n	3566 <__aeabi_dsub+0x182>
    39be:	4650      	mov	r0, sl
    39c0:	4320      	orrs	r0, r4
    39c2:	0007      	movs	r7, r0
    39c4:	1e78      	subs	r0, r7, #1
    39c6:	4187      	sbcs	r7, r0
    39c8:	2400      	movs	r4, #0
    39ca:	18bf      	adds	r7, r7, r2
    39cc:	e760      	b.n	3890 <__aeabi_dsub+0x4ac>
    39ce:	000c      	movs	r4, r1
    39d0:	0017      	movs	r7, r2
    39d2:	e58d      	b.n	34f0 <__aeabi_dsub+0x10c>
    39d4:	000c      	movs	r4, r1
    39d6:	0017      	movs	r7, r2
    39d8:	4e0b      	ldr	r6, [pc, #44]	; (3a08 <__aeabi_dsub+0x624>)
    39da:	e589      	b.n	34f0 <__aeabi_dsub+0x10c>
    39dc:	001e      	movs	r6, r3
    39de:	0027      	movs	r7, r4
    39e0:	3e20      	subs	r6, #32
    39e2:	40f7      	lsrs	r7, r6
    39e4:	2b20      	cmp	r3, #32
    39e6:	d00c      	beq.n	3a02 <__aeabi_dsub+0x61e>
    39e8:	2640      	movs	r6, #64	; 0x40
    39ea:	1af3      	subs	r3, r6, r3
    39ec:	409c      	lsls	r4, r3
    39ee:	4650      	mov	r0, sl
    39f0:	4320      	orrs	r0, r4
    39f2:	1e44      	subs	r4, r0, #1
    39f4:	41a0      	sbcs	r0, r4
    39f6:	4307      	orrs	r7, r0
    39f8:	2400      	movs	r4, #0
    39fa:	18bf      	adds	r7, r7, r2
    39fc:	e748      	b.n	3890 <__aeabi_dsub+0x4ac>
    39fe:	2400      	movs	r4, #0
    3a00:	e7d0      	b.n	39a4 <__aeabi_dsub+0x5c0>
    3a02:	2400      	movs	r4, #0
    3a04:	e7f3      	b.n	39ee <__aeabi_dsub+0x60a>
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	000007ff 	.word	0x000007ff
    3a0c:	ff7fffff 	.word	0xff7fffff

00003a10 <__aeabi_d2iz>:
    3a10:	b530      	push	{r4, r5, lr}
    3a12:	4d13      	ldr	r5, [pc, #76]	; (3a60 <__aeabi_d2iz+0x50>)
    3a14:	030a      	lsls	r2, r1, #12
    3a16:	004b      	lsls	r3, r1, #1
    3a18:	0b12      	lsrs	r2, r2, #12
    3a1a:	0d5b      	lsrs	r3, r3, #21
    3a1c:	0fc9      	lsrs	r1, r1, #31
    3a1e:	2400      	movs	r4, #0
    3a20:	42ab      	cmp	r3, r5
    3a22:	dd10      	ble.n	3a46 <__aeabi_d2iz+0x36>
    3a24:	4c0f      	ldr	r4, [pc, #60]	; (3a64 <__aeabi_d2iz+0x54>)
    3a26:	42a3      	cmp	r3, r4
    3a28:	dc0f      	bgt.n	3a4a <__aeabi_d2iz+0x3a>
    3a2a:	2480      	movs	r4, #128	; 0x80
    3a2c:	4d0e      	ldr	r5, [pc, #56]	; (3a68 <__aeabi_d2iz+0x58>)
    3a2e:	0364      	lsls	r4, r4, #13
    3a30:	4322      	orrs	r2, r4
    3a32:	1aed      	subs	r5, r5, r3
    3a34:	2d1f      	cmp	r5, #31
    3a36:	dd0b      	ble.n	3a50 <__aeabi_d2iz+0x40>
    3a38:	480c      	ldr	r0, [pc, #48]	; (3a6c <__aeabi_d2iz+0x5c>)
    3a3a:	1ac3      	subs	r3, r0, r3
    3a3c:	40da      	lsrs	r2, r3
    3a3e:	4254      	negs	r4, r2
    3a40:	2900      	cmp	r1, #0
    3a42:	d100      	bne.n	3a46 <__aeabi_d2iz+0x36>
    3a44:	0014      	movs	r4, r2
    3a46:	0020      	movs	r0, r4
    3a48:	bd30      	pop	{r4, r5, pc}
    3a4a:	4b09      	ldr	r3, [pc, #36]	; (3a70 <__aeabi_d2iz+0x60>)
    3a4c:	18cc      	adds	r4, r1, r3
    3a4e:	e7fa      	b.n	3a46 <__aeabi_d2iz+0x36>
    3a50:	4c08      	ldr	r4, [pc, #32]	; (3a74 <__aeabi_d2iz+0x64>)
    3a52:	40e8      	lsrs	r0, r5
    3a54:	46a4      	mov	ip, r4
    3a56:	4463      	add	r3, ip
    3a58:	409a      	lsls	r2, r3
    3a5a:	4302      	orrs	r2, r0
    3a5c:	e7ef      	b.n	3a3e <__aeabi_d2iz+0x2e>
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	000003fe 	.word	0x000003fe
    3a64:	0000041d 	.word	0x0000041d
    3a68:	00000433 	.word	0x00000433
    3a6c:	00000413 	.word	0x00000413
    3a70:	7fffffff 	.word	0x7fffffff
    3a74:	fffffbed 	.word	0xfffffbed

00003a78 <__aeabi_ui2d>:
    3a78:	b510      	push	{r4, lr}
    3a7a:	1e04      	subs	r4, r0, #0
    3a7c:	d028      	beq.n	3ad0 <__aeabi_ui2d+0x58>
    3a7e:	f000 f833 	bl	3ae8 <__clzsi2>
    3a82:	4b15      	ldr	r3, [pc, #84]	; (3ad8 <__aeabi_ui2d+0x60>)
    3a84:	4a15      	ldr	r2, [pc, #84]	; (3adc <__aeabi_ui2d+0x64>)
    3a86:	1a1b      	subs	r3, r3, r0
    3a88:	1ad2      	subs	r2, r2, r3
    3a8a:	2a1f      	cmp	r2, #31
    3a8c:	dd15      	ble.n	3aba <__aeabi_ui2d+0x42>
    3a8e:	4a14      	ldr	r2, [pc, #80]	; (3ae0 <__aeabi_ui2d+0x68>)
    3a90:	1ad2      	subs	r2, r2, r3
    3a92:	4094      	lsls	r4, r2
    3a94:	2200      	movs	r2, #0
    3a96:	0324      	lsls	r4, r4, #12
    3a98:	055b      	lsls	r3, r3, #21
    3a9a:	0b24      	lsrs	r4, r4, #12
    3a9c:	0d5b      	lsrs	r3, r3, #21
    3a9e:	2100      	movs	r1, #0
    3aa0:	0010      	movs	r0, r2
    3aa2:	0324      	lsls	r4, r4, #12
    3aa4:	0d0a      	lsrs	r2, r1, #20
    3aa6:	0b24      	lsrs	r4, r4, #12
    3aa8:	0512      	lsls	r2, r2, #20
    3aaa:	4322      	orrs	r2, r4
    3aac:	4c0d      	ldr	r4, [pc, #52]	; (3ae4 <__aeabi_ui2d+0x6c>)
    3aae:	051b      	lsls	r3, r3, #20
    3ab0:	4022      	ands	r2, r4
    3ab2:	4313      	orrs	r3, r2
    3ab4:	005b      	lsls	r3, r3, #1
    3ab6:	0859      	lsrs	r1, r3, #1
    3ab8:	bd10      	pop	{r4, pc}
    3aba:	0021      	movs	r1, r4
    3abc:	4091      	lsls	r1, r2
    3abe:	000a      	movs	r2, r1
    3ac0:	210b      	movs	r1, #11
    3ac2:	1a08      	subs	r0, r1, r0
    3ac4:	40c4      	lsrs	r4, r0
    3ac6:	055b      	lsls	r3, r3, #21
    3ac8:	0324      	lsls	r4, r4, #12
    3aca:	0b24      	lsrs	r4, r4, #12
    3acc:	0d5b      	lsrs	r3, r3, #21
    3ace:	e7e6      	b.n	3a9e <__aeabi_ui2d+0x26>
    3ad0:	2300      	movs	r3, #0
    3ad2:	2400      	movs	r4, #0
    3ad4:	2200      	movs	r2, #0
    3ad6:	e7e2      	b.n	3a9e <__aeabi_ui2d+0x26>
    3ad8:	0000041e 	.word	0x0000041e
    3adc:	00000433 	.word	0x00000433
    3ae0:	00000413 	.word	0x00000413
    3ae4:	800fffff 	.word	0x800fffff

00003ae8 <__clzsi2>:
    3ae8:	211c      	movs	r1, #28
    3aea:	2301      	movs	r3, #1
    3aec:	041b      	lsls	r3, r3, #16
    3aee:	4298      	cmp	r0, r3
    3af0:	d301      	bcc.n	3af6 <__clzsi2+0xe>
    3af2:	0c00      	lsrs	r0, r0, #16
    3af4:	3910      	subs	r1, #16
    3af6:	0a1b      	lsrs	r3, r3, #8
    3af8:	4298      	cmp	r0, r3
    3afa:	d301      	bcc.n	3b00 <__clzsi2+0x18>
    3afc:	0a00      	lsrs	r0, r0, #8
    3afe:	3908      	subs	r1, #8
    3b00:	091b      	lsrs	r3, r3, #4
    3b02:	4298      	cmp	r0, r3
    3b04:	d301      	bcc.n	3b0a <__clzsi2+0x22>
    3b06:	0900      	lsrs	r0, r0, #4
    3b08:	3904      	subs	r1, #4
    3b0a:	a202      	add	r2, pc, #8	; (adr r2, 3b14 <__clzsi2+0x2c>)
    3b0c:	5c10      	ldrb	r0, [r2, r0]
    3b0e:	1840      	adds	r0, r0, r1
    3b10:	4770      	bx	lr
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	02020304 	.word	0x02020304
    3b18:	01010101 	.word	0x01010101
	...

00003b24 <__libc_init_array>:
    3b24:	b570      	push	{r4, r5, r6, lr}
    3b26:	2600      	movs	r6, #0
    3b28:	4d0c      	ldr	r5, [pc, #48]	; (3b5c <__libc_init_array+0x38>)
    3b2a:	4c0d      	ldr	r4, [pc, #52]	; (3b60 <__libc_init_array+0x3c>)
    3b2c:	1b64      	subs	r4, r4, r5
    3b2e:	10a4      	asrs	r4, r4, #2
    3b30:	42a6      	cmp	r6, r4
    3b32:	d109      	bne.n	3b48 <__libc_init_array+0x24>
    3b34:	2600      	movs	r6, #0
    3b36:	f000 f8b9 	bl	3cac <_init>
    3b3a:	4d0a      	ldr	r5, [pc, #40]	; (3b64 <__libc_init_array+0x40>)
    3b3c:	4c0a      	ldr	r4, [pc, #40]	; (3b68 <__libc_init_array+0x44>)
    3b3e:	1b64      	subs	r4, r4, r5
    3b40:	10a4      	asrs	r4, r4, #2
    3b42:	42a6      	cmp	r6, r4
    3b44:	d105      	bne.n	3b52 <__libc_init_array+0x2e>
    3b46:	bd70      	pop	{r4, r5, r6, pc}
    3b48:	00b3      	lsls	r3, r6, #2
    3b4a:	58eb      	ldr	r3, [r5, r3]
    3b4c:	4798      	blx	r3
    3b4e:	3601      	adds	r6, #1
    3b50:	e7ee      	b.n	3b30 <__libc_init_array+0xc>
    3b52:	00b3      	lsls	r3, r6, #2
    3b54:	58eb      	ldr	r3, [r5, r3]
    3b56:	4798      	blx	r3
    3b58:	3601      	adds	r6, #1
    3b5a:	e7f2      	b.n	3b42 <__libc_init_array+0x1e>
    3b5c:	00003cb8 	.word	0x00003cb8
    3b60:	00003cb8 	.word	0x00003cb8
    3b64:	00003cb8 	.word	0x00003cb8
    3b68:	00003cbc 	.word	0x00003cbc

00003b6c <memcpy>:
    3b6c:	2300      	movs	r3, #0
    3b6e:	b510      	push	{r4, lr}
    3b70:	429a      	cmp	r2, r3
    3b72:	d100      	bne.n	3b76 <memcpy+0xa>
    3b74:	bd10      	pop	{r4, pc}
    3b76:	5ccc      	ldrb	r4, [r1, r3]
    3b78:	54c4      	strb	r4, [r0, r3]
    3b7a:	3301      	adds	r3, #1
    3b7c:	e7f8      	b.n	3b70 <memcpy+0x4>
    3b7e:	0000      	movs	r0, r0
    3b80:	00000002 	.word	0x00000002
    3b84:	00000003 	.word	0x00000003
    3b88:	00000004 	.word	0x00000004
    3b8c:	00000005 	.word	0x00000005
    3b90:	00000006 	.word	0x00000006
    3b94:	00000007 	.word	0x00000007
    3b98:	0000000e 	.word	0x0000000e
    3b9c:	0000000f 	.word	0x0000000f
    3ba0:	0000000a 	.word	0x0000000a
    3ba4:	0000000b 	.word	0x0000000b
    3ba8:	0000ffff 	.word	0x0000ffff
    3bac:	0000ffff 	.word	0x0000ffff
    3bb0:	0000ffff 	.word	0x0000ffff
    3bb4:	0000ffff 	.word	0x0000ffff
    3bb8:	0000ffff 	.word	0x0000ffff
    3bbc:	0000ffff 	.word	0x0000ffff
    3bc0:	0000ffff 	.word	0x0000ffff
    3bc4:	0000ffff 	.word	0x0000ffff
    3bc8:	0000ffff 	.word	0x0000ffff
    3bcc:	0000ffff 	.word	0x0000ffff

00003bd0 <tc_interrupt_vectors.12490>:
    3bd0:	00000e0d 42000800 42000c00 42001000     .......B...B...B

00003be0 <_tcc_intflag>:
    3be0:	00000001 00000002 00000004 00000008     ................
    3bf0:	00001000 00002000 00004000 00008000     ..... ...@......
    3c00:	00010000 00020000 00040000 00080000     ................
    3c10:	01040404 05041004 15041404 25010804     ...............%
    3c20:	1c02ef05 21050204 00002d02 00002a74     .......!.-..t*..
    3c30:	00002a56 00002a10 0000292e 00002a10     V*...*...)...*..
    3c40:	00002a48 00002a10 0000292e 00002a56     H*...*...)..V*..
    3c50:	00002a56 00002a48 0000292e 00002926     V*..H*...)..&)..
    3c60:	00002926 00002926 00002c8c 000030d4     &)..&)...,...0..
    3c70:	00002f94 00002f94 00002f90 000030ac     ./.../.../...0..
    3c80:	000030ac 0000309e 00002f90 000030ac     .0...0.../...0..
    3c90:	0000309e 000030ac 00002f90 000030b4     .0...0.../...0..
    3ca0:	000030b4 000030b4 000032b8              .0...0...2..

00003cac <_init>:
    3cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3cb2:	bc08      	pop	{r3}
    3cb4:	469e      	mov	lr, r3
    3cb6:	4770      	bx	lr

00003cb8 <__init_array_start>:
    3cb8:	000000b5 	.word	0x000000b5

00003cbc <_fini>:
    3cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cbe:	46c0      	nop			; (mov r8, r8)
    3cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3cc2:	bc08      	pop	{r3}
    3cc4:	469e      	mov	lr, r3
    3cc6:	4770      	bx	lr

00003cc8 <__fini_array_start>:
    3cc8:	0000008d 	.word	0x0000008d
