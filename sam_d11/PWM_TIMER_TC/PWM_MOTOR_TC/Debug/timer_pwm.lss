
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000375c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  0000375c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  2000001c  00003778  0002001c  2**2
                  ALLOC
  3 .stack        00000400  20000100  0000385c  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029369  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003be7  00000000  00000000  00049408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000005c0  00000000  00000000  0004cfef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000958  00000000  00000000  0004d5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000066d0  00000000  00000000  0004df07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c3c9  00000000  00000000  000545d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000796b5  00000000  00000000  000609a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ff8  00000000  00000000  000da058  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004c4d  00000000  00000000  000db050  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 05 00 20 99 14 00 00 97 14 00 00 97 14 00 00     ... ............
	...
      2c:	97 14 00 00 00 00 00 00 00 00 00 00 97 14 00 00     ................
      3c:	97 14 00 00 97 14 00 00 97 14 00 00 97 14 00 00     ................
      4c:	97 14 00 00 97 14 00 00 97 14 00 00 97 14 00 00     ................
      5c:	97 14 00 00 97 14 00 00 b1 09 00 00 c1 09 00 00     ................
      6c:	d1 09 00 00 3d 11 00 00 d1 11 00 00 e1 11 00 00     ....=...........
      7c:	97 14 00 00 97 14 00 00 97 14 00 00 97 14 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000001c 	.word	0x2000001c
      ac:	00000000 	.word	0x00000000
      b0:	0000375c 	.word	0x0000375c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000020 	.word	0x20000020
      e0:	0000375c 	.word	0x0000375c
      e4:	0000375c 	.word	0x0000375c
      e8:	00000000 	.word	0x00000000

000000ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
      ec:	4b09      	ldr	r3, [pc, #36]	; (114 <cpu_irq_enter_critical+0x28>)
      ee:	6819      	ldr	r1, [r3, #0]
      f0:	2900      	cmp	r1, #0
      f2:	d10b      	bne.n	10c <cpu_irq_enter_critical+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      f4:	f3ef 8010 	mrs	r0, PRIMASK
      f8:	4a07      	ldr	r2, [pc, #28]	; (118 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
      fa:	2800      	cmp	r0, #0
      fc:	d105      	bne.n	10a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
      fe:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     100:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     104:	4905      	ldr	r1, [pc, #20]	; (11c <cpu_irq_enter_critical+0x30>)
     106:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     108:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     10a:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     10c:	681a      	ldr	r2, [r3, #0]
     10e:	3201      	adds	r2, #1
     110:	601a      	str	r2, [r3, #0]
}
     112:	4770      	bx	lr
     114:	20000038 	.word	0x20000038
     118:	2000003c 	.word	0x2000003c
     11c:	20000000 	.word	0x20000000

00000120 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     120:	4b08      	ldr	r3, [pc, #32]	; (144 <cpu_irq_leave_critical+0x24>)
     122:	681a      	ldr	r2, [r3, #0]
     124:	3a01      	subs	r2, #1
     126:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     128:	681b      	ldr	r3, [r3, #0]
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_leave_critical+0x22>
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <cpu_irq_leave_critical+0x28>)
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d005      	beq.n	142 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     136:	2201      	movs	r2, #1
     138:	4b04      	ldr	r3, [pc, #16]	; (14c <cpu_irq_leave_critical+0x2c>)
     13a:	701a      	strb	r2, [r3, #0]
     13c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     140:	b662      	cpsie	i
	}
}
     142:	4770      	bx	lr
     144:	20000038 	.word	0x20000038
     148:	2000003c 	.word	0x2000003c
     14c:	20000000 	.word	0x20000000

00000150 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     152:	2501      	movs	r5, #1
	config->powersave  = false;
     154:	2700      	movs	r7, #0
	config->input_pull = PORT_PIN_PULL_UP;
     156:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
     158:	4e08      	ldr	r6, [pc, #32]	; (17c <system_board_init+0x2c>)
     15a:	0021      	movs	r1, r4
     15c:	2010      	movs	r0, #16
     15e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     160:	70a7      	strb	r7, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     162:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     164:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     166:	2280      	movs	r2, #128	; 0x80
     168:	4b05      	ldr	r3, [pc, #20]	; (180 <system_board_init+0x30>)
     16a:	0252      	lsls	r2, r2, #9
     16c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     16e:	0021      	movs	r1, r4
     170:	200e      	movs	r0, #14
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     172:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     174:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     176:	47b0      	blx	r6
}
     178:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	00000185 	.word	0x00000185
     180:	41004400 	.word	0x41004400

00000184 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     184:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     186:	2280      	movs	r2, #128	; 0x80
     188:	ab01      	add	r3, sp, #4
     18a:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     18c:	780a      	ldrb	r2, [r1, #0]
     18e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     190:	784a      	ldrb	r2, [r1, #1]
     192:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     194:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     196:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     198:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     19a:	4b01      	ldr	r3, [pc, #4]	; (1a0 <port_pin_set_config+0x1c>)
     19c:	4798      	blx	r3
}
     19e:	bd07      	pop	{r0, r1, r2, pc}
     1a0:	000010a5 	.word	0x000010a5

000001a4 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1a4:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     1a6:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1a8:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     1aa:	421a      	tst	r2, r3
     1ac:	d1fc      	bne.n	1a8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     1ae:	4770      	bx	lr

000001b0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1b2:	0007      	movs	r7, r0
     1b4:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     1b6:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1b8:	0008      	movs	r0, r1
     1ba:	4b9b      	ldr	r3, [pc, #620]	; (428 <STACK_SIZE+0x28>)
{
     1bc:	0014      	movs	r4, r2
     1be:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1c0:	4798      	blx	r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1c2:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1c4:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1c6:	409d      	lsls	r5, r3
     1c8:	002b      	movs	r3, r5
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1ca:	4a98      	ldr	r2, [pc, #608]	; (42c <STACK_SIZE+0x2c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     1cc:	300e      	adds	r0, #14
     1ce:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1d0:	b2c5      	uxtb	r5, r0
     1d2:	430b      	orrs	r3, r1
     1d4:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     1d6:	7b23      	ldrb	r3, [r4, #12]
     1d8:	aa08      	add	r2, sp, #32
     1da:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1dc:	0011      	movs	r1, r2
     1de:	0028      	movs	r0, r5
     1e0:	4b93      	ldr	r3, [pc, #588]	; (430 <STACK_SIZE+0x30>)
     1e2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1e4:	0028      	movs	r0, r5
     1e6:	4b93      	ldr	r3, [pc, #588]	; (434 <STACK_SIZE+0x34>)
     1e8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1ea:	4b93      	ldr	r3, [pc, #588]	; (438 <STACK_SIZE+0x38>)
     1ec:	7b20      	ldrb	r0, [r4, #12]
     1ee:	2100      	movs	r1, #0
     1f0:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1f2:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     1f4:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1f6:	079b      	lsls	r3, r3, #30
     1f8:	d500      	bpl.n	1fc <i2c_master_init+0x4c>
     1fa:	e109      	b.n	410 <STACK_SIZE+0x10>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1fc:	2301      	movs	r3, #1
     1fe:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     200:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     202:	401d      	ands	r5, r3
     204:	d000      	beq.n	208 <i2c_master_init+0x58>
     206:	e103      	b.n	410 <STACK_SIZE+0x10>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     208:	4b87      	ldr	r3, [pc, #540]	; (428 <STACK_SIZE+0x28>)
     20a:	6838      	ldr	r0, [r7, #0]
     20c:	4798      	blx	r3
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     20e:	498b      	ldr	r1, [pc, #556]	; (43c <STACK_SIZE+0x3c>)
     210:	4b8b      	ldr	r3, [pc, #556]	; (440 <STACK_SIZE+0x40>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     212:	9004      	str	r0, [sp, #16]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     214:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     216:	9b04      	ldr	r3, [sp, #16]

	/* Initialize values in module. */
	module->registered_callback = 0;
     218:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     21a:	009a      	lsls	r2, r3, #2
     21c:	4b89      	ldr	r3, [pc, #548]	; (444 <STACK_SIZE+0x44>)
	module->enabled_callback = 0;
     21e:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     220:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     222:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     224:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     226:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     228:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     22a:	2314      	movs	r3, #20
	module->buffer = NULL;
     22c:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     22e:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     230:	683b      	ldr	r3, [r7, #0]
     232:	ae09      	add	r6, sp, #36	; 0x24
     234:	9304      	str	r3, [sp, #16]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     236:	0018      	movs	r0, r3
     238:	4b7b      	ldr	r3, [pc, #492]	; (428 <STACK_SIZE+0x28>)
     23a:	4798      	blx	r3
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
     240:	69e0      	ldr	r0, [r4, #28]
     242:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     244:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     246:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     248:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     24a:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     24c:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     24e:	2800      	cmp	r0, #0
     250:	d103      	bne.n	25a <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     252:	0001      	movs	r1, r0
     254:	4b7c      	ldr	r3, [pc, #496]	; (448 <STACK_SIZE+0x48>)
     256:	9804      	ldr	r0, [sp, #16]
     258:	4798      	blx	r3
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     25a:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     25c:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     25e:	0c00      	lsrs	r0, r0, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     260:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     262:	b2c0      	uxtb	r0, r0
     264:	0031      	movs	r1, r6
     266:	4b79      	ldr	r3, [pc, #484]	; (44c <STACK_SIZE+0x4c>)
     268:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     26a:	2d00      	cmp	r5, #0
     26c:	d104      	bne.n	278 <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     26e:	2101      	movs	r1, #1
     270:	9804      	ldr	r0, [sp, #16]
     272:	4b75      	ldr	r3, [pc, #468]	; (448 <STACK_SIZE+0x48>)
     274:	4798      	blx	r3
     276:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     278:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     27a:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     27c:	0c2d      	lsrs	r5, r5, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     27e:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     280:	b2e8      	uxtb	r0, r5
     282:	4b72      	ldr	r3, [pc, #456]	; (44c <STACK_SIZE+0x4c>)
     284:	0031      	movs	r1, r6
     286:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     288:	8aa3      	ldrh	r3, [r4, #20]
     28a:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     28c:	8ae3      	ldrh	r3, [r4, #22]
     28e:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     290:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     292:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     294:	2a00      	cmp	r2, #0
     296:	d106      	bne.n	2a6 <i2c_master_init+0xf6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     298:	4b6d      	ldr	r3, [pc, #436]	; (450 <STACK_SIZE+0x50>)
     29a:	3202      	adds	r2, #2
     29c:	789b      	ldrb	r3, [r3, #2]
     29e:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     2a0:	1e5f      	subs	r7, r3, #1
     2a2:	41bb      	sbcs	r3, r7
     2a4:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     2a6:	68a2      	ldr	r2, [r4, #8]
     2a8:	6927      	ldr	r7, [r4, #16]
     2aa:	4317      	orrs	r7, r2
     2ac:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     2ae:	1d63      	adds	r3, r4, #5
     2b0:	7fdb      	ldrb	r3, [r3, #31]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d002      	beq.n	2bc <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	05db      	lsls	r3, r3, #23
     2ba:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     2bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     2be:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     2c0:	0023      	movs	r3, r4
     2c2:	332c      	adds	r3, #44	; 0x2c
     2c4:	781b      	ldrb	r3, [r3, #0]
     2c6:	2b00      	cmp	r3, #0
     2c8:	d103      	bne.n	2d2 <i2c_master_init+0x122>
     2ca:	2380      	movs	r3, #128	; 0x80
     2cc:	049b      	lsls	r3, r3, #18
     2ce:	429a      	cmp	r2, r3
     2d0:	d102      	bne.n	2d8 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2d2:	2380      	movs	r3, #128	; 0x80
     2d4:	051b      	lsls	r3, r3, #20
     2d6:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     2d8:	0023      	movs	r3, r4
     2da:	332d      	adds	r3, #45	; 0x2d
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	2b00      	cmp	r3, #0
     2e0:	d002      	beq.n	2e8 <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	041b      	lsls	r3, r3, #16
     2e6:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     2e8:	0023      	movs	r3, r4
     2ea:	332e      	adds	r3, #46	; 0x2e
     2ec:	781b      	ldrb	r3, [r3, #0]
     2ee:	2b00      	cmp	r3, #0
     2f0:	d002      	beq.n	2f8 <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     2f2:	2380      	movs	r3, #128	; 0x80
     2f4:	03db      	lsls	r3, r3, #15
     2f6:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2f8:	9b04      	ldr	r3, [sp, #16]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     2fa:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2fc:	681b      	ldr	r3, [r3, #0]
	uint32_t fscl        = 1000 * config->baud_rate;
     2fe:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     300:	431f      	orrs	r7, r3
     302:	9b04      	ldr	r3, [sp, #16]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     304:	9a04      	ldr	r2, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     306:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     308:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     30a:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     30c:	005b      	lsls	r3, r3, #1
     30e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     310:	b2c0      	uxtb	r0, r0
     312:	4b50      	ldr	r3, [pc, #320]	; (454 <STACK_SIZE+0x54>)
     314:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
     316:	6823      	ldr	r3, [r4, #0]
     318:	00ad      	lsls	r5, r5, #2
     31a:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     31c:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     31e:	0007      	movs	r7, r0
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     320:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     322:	4b4d      	ldr	r3, [pc, #308]	; (458 <STACK_SIZE+0x58>)
     324:	4798      	blx	r3
     326:	4b4c      	ldr	r3, [pc, #304]	; (458 <STACK_SIZE+0x58>)
     328:	9000      	str	r0, [sp, #0]
     32a:	9101      	str	r1, [sp, #4]
     32c:	0068      	lsls	r0, r5, #1
     32e:	4798      	blx	r3
     330:	9002      	str	r0, [sp, #8]
     332:	9103      	str	r1, [sp, #12]
     334:	4b48      	ldr	r3, [pc, #288]	; (458 <STACK_SIZE+0x58>)
     336:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     338:	4798      	blx	r3
     33a:	4e48      	ldr	r6, [pc, #288]	; (45c <STACK_SIZE+0x5c>)
     33c:	9006      	str	r0, [sp, #24]
     33e:	9107      	str	r1, [sp, #28]
     340:	9800      	ldr	r0, [sp, #0]
     342:	9901      	ldr	r1, [sp, #4]
     344:	4a46      	ldr	r2, [pc, #280]	; (460 <STACK_SIZE+0x60>)
     346:	4b47      	ldr	r3, [pc, #284]	; (464 <STACK_SIZE+0x64>)
     348:	47b0      	blx	r6
     34a:	0002      	movs	r2, r0
     34c:	000b      	movs	r3, r1
     34e:	9806      	ldr	r0, [sp, #24]
     350:	9907      	ldr	r1, [sp, #28]
     352:	47b0      	blx	r6
     354:	4e44      	ldr	r6, [pc, #272]	; (468 <STACK_SIZE+0x68>)
     356:	2200      	movs	r2, #0
     358:	4b44      	ldr	r3, [pc, #272]	; (46c <STACK_SIZE+0x6c>)
     35a:	47b0      	blx	r6
     35c:	4b3e      	ldr	r3, [pc, #248]	; (458 <STACK_SIZE+0x58>)
     35e:	9006      	str	r0, [sp, #24]
     360:	9107      	str	r1, [sp, #28]
     362:	0028      	movs	r0, r5
     364:	4798      	blx	r3
     366:	4d3d      	ldr	r5, [pc, #244]	; (45c <STACK_SIZE+0x5c>)
     368:	0002      	movs	r2, r0
     36a:	000b      	movs	r3, r1
     36c:	9806      	ldr	r0, [sp, #24]
     36e:	9907      	ldr	r1, [sp, #28]
     370:	47a8      	blx	r5
     372:	4d3f      	ldr	r5, [pc, #252]	; (470 <STACK_SIZE+0x70>)
     374:	0002      	movs	r2, r0
     376:	000b      	movs	r3, r1
     378:	9800      	ldr	r0, [sp, #0]
     37a:	9901      	ldr	r1, [sp, #4]
     37c:	47a8      	blx	r5
     37e:	9a02      	ldr	r2, [sp, #8]
     380:	9b03      	ldr	r3, [sp, #12]
     382:	47b0      	blx	r6
     384:	2200      	movs	r2, #0
     386:	4b3b      	ldr	r3, [pc, #236]	; (474 <STACK_SIZE+0x74>)
     388:	47a8      	blx	r5
     38a:	9a02      	ldr	r2, [sp, #8]
     38c:	9b03      	ldr	r3, [sp, #12]
     38e:	4e3a      	ldr	r6, [pc, #232]	; (478 <STACK_SIZE+0x78>)
     390:	47b0      	blx	r6
     392:	4b3a      	ldr	r3, [pc, #232]	; (47c <STACK_SIZE+0x7c>)
     394:	4798      	blx	r3
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     396:	2380      	movs	r3, #128	; 0x80
	tmp_baud = (int32_t)(div_ceil(
     398:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     39a:	68a2      	ldr	r2, [r4, #8]
     39c:	049b      	lsls	r3, r3, #18
     39e:	429a      	cmp	r2, r3
     3a0:	d13e      	bne.n	420 <STACK_SIZE+0x20>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3a2:	23fa      	movs	r3, #250	; 0xfa
     3a4:	9c05      	ldr	r4, [sp, #20]
     3a6:	009b      	lsls	r3, r3, #2
     3a8:	435c      	muls	r4, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     3aa:	9a00      	ldr	r2, [sp, #0]
     3ac:	9b01      	ldr	r3, [sp, #4]
     3ae:	4e2e      	ldr	r6, [pc, #184]	; (468 <STACK_SIZE+0x68>)
     3b0:	0010      	movs	r0, r2
     3b2:	0019      	movs	r1, r3
     3b4:	47b0      	blx	r6
     3b6:	4b28      	ldr	r3, [pc, #160]	; (458 <STACK_SIZE+0x58>)
     3b8:	9000      	str	r0, [sp, #0]
     3ba:	9101      	str	r1, [sp, #4]
     3bc:	0020      	movs	r0, r4
     3be:	4798      	blx	r3
     3c0:	2200      	movs	r2, #0
     3c2:	4b2f      	ldr	r3, [pc, #188]	; (480 <STACK_SIZE+0x80>)
     3c4:	4e25      	ldr	r6, [pc, #148]	; (45c <STACK_SIZE+0x5c>)
     3c6:	47b0      	blx	r6
     3c8:	4e2b      	ldr	r6, [pc, #172]	; (478 <STACK_SIZE+0x78>)
     3ca:	0002      	movs	r2, r0
     3cc:	000b      	movs	r3, r1
     3ce:	9800      	ldr	r0, [sp, #0]
     3d0:	9901      	ldr	r1, [sp, #4]
     3d2:	47b0      	blx	r6
     3d4:	2200      	movs	r2, #0
     3d6:	4b27      	ldr	r3, [pc, #156]	; (474 <STACK_SIZE+0x74>)
     3d8:	47a8      	blx	r5
     3da:	4b28      	ldr	r3, [pc, #160]	; (47c <STACK_SIZE+0x7c>)
     3dc:	4798      	blx	r3
     3de:	4b29      	ldr	r3, [pc, #164]	; (484 <STACK_SIZE+0x84>)
     3e0:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     3e2:	d017      	beq.n	414 <STACK_SIZE+0x14>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     3e4:	0021      	movs	r1, r4
     3e6:	0038      	movs	r0, r7
     3e8:	4798      	blx	r3
     3ea:	3802      	subs	r0, #2
     3ec:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3ee:	9a02      	ldr	r2, [sp, #8]
     3f0:	2040      	movs	r0, #64	; 0x40
     3f2:	2aff      	cmp	r2, #255	; 0xff
     3f4:	d80c      	bhi.n	410 <STACK_SIZE+0x10>
     3f6:	2bff      	cmp	r3, #255	; 0xff
     3f8:	d80a      	bhi.n	410 <STACK_SIZE+0x10>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3fa:	20ff      	movs	r0, #255	; 0xff
     3fc:	0015      	movs	r5, r2
     3fe:	0400      	lsls	r0, r0, #16
     400:	041b      	lsls	r3, r3, #16
     402:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     404:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     406:	0636      	lsls	r6, r6, #24
     408:	4335      	orrs	r5, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     40a:	9a04      	ldr	r2, [sp, #16]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     40c:	432b      	orrs	r3, r5
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     40e:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     410:	b00b      	add	sp, #44	; 0x2c
     412:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     414:	0061      	lsls	r1, r4, #1
     416:	1e48      	subs	r0, r1, #1
     418:	19c0      	adds	r0, r0, r7
     41a:	4798      	blx	r3
     41c:	1e43      	subs	r3, r0, #1
     41e:	e7e6      	b.n	3ee <i2c_master_init+0x23e>
	int32_t tmp_baudlow_hs = 0;
     420:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     422:	0033      	movs	r3, r6
     424:	e7e3      	b.n	3ee <i2c_master_init+0x23e>
     426:	46c0      	nop			; (mov r8, r8)
     428:	00000921 	.word	0x00000921
     42c:	40000400 	.word	0x40000400
     430:	00000fd1 	.word	0x00000fd1
     434:	00000f49 	.word	0x00000f49
     438:	00000829 	.word	0x00000829
     43c:	0000069d 	.word	0x0000069d
     440:	0000095d 	.word	0x0000095d
     444:	20000088 	.word	0x20000088
     448:	0000086d 	.word	0x0000086d
     44c:	000010a5 	.word	0x000010a5
     450:	41002000 	.word	0x41002000
     454:	00000fed 	.word	0x00000fed
     458:	00003579 	.word	0x00003579
     45c:	000029e5 	.word	0x000029e5
     460:	e826d695 	.word	0xe826d695
     464:	3e112e0b 	.word	0x3e112e0b
     468:	00001d5d 	.word	0x00001d5d
     46c:	40240000 	.word	0x40240000
     470:	00002ee5 	.word	0x00002ee5
     474:	3ff00000 	.word	0x3ff00000
     478:	0000237d 	.word	0x0000237d
     47c:	00003511 	.word	0x00003511
     480:	40080000 	.word	0x40080000
     484:	00001c45 	.word	0x00001c45

00000488 <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     488:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     48a:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     48c:	7e19      	ldrb	r1, [r3, #24]
     48e:	4211      	tst	r1, r2
     490:	d006      	beq.n	4a0 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     492:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     494:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     496:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     498:	4213      	tst	r3, r2
     49a:	d10a      	bne.n	4b2 <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     49c:	2000      	movs	r0, #0
     49e:	e008      	b.n	4b2 <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     4a0:	8b5a      	ldrh	r2, [r3, #26]
     4a2:	0752      	lsls	r2, r2, #29
     4a4:	d5fa      	bpl.n	49c <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4a6:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
     4a8:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4aa:	6859      	ldr	r1, [r3, #4]
     4ac:	0292      	lsls	r2, r2, #10
     4ae:	430a      	orrs	r2, r1
     4b0:	605a      	str	r2, [r3, #4]
}
     4b2:	4770      	bx	lr

000004b4 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     4b4:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     4b6:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4b8:	2601      	movs	r6, #1
     4ba:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4bc:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4be:	7e0b      	ldrb	r3, [r1, #24]
     4c0:	4033      	ands	r3, r6
     4c2:	d102      	bne.n	4ca <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4c4:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4c6:	4225      	tst	r5, r4
     4c8:	d001      	beq.n	4ce <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     4ca:	2000      	movs	r0, #0
     4cc:	e005      	b.n	4da <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
     4ce:	3201      	adds	r2, #1
     4d0:	8903      	ldrh	r3, [r0, #8]
     4d2:	b292      	uxth	r2, r2
     4d4:	4293      	cmp	r3, r2
     4d6:	d8f2      	bhi.n	4be <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     4d8:	2012      	movs	r0, #18
}
     4da:	bd70      	pop	{r4, r5, r6, pc}

000004dc <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4dc:	2380      	movs	r3, #128	; 0x80
{
     4de:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4e0:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4e2:	02db      	lsls	r3, r3, #11
     4e4:	6862      	ldr	r2, [r4, #4]
     4e6:	4313      	orrs	r3, r2
     4e8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     4ea:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4ec:	4b02      	ldr	r3, [pc, #8]	; (4f8 <_i2c_master_send_hs_master_code+0x1c>)
     4ee:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4f0:	2301      	movs	r3, #1
     4f2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     4f4:	bd10      	pop	{r4, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	000004b5 	.word	0x000004b5

000004fc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fe:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     500:	884b      	ldrh	r3, [r1, #2]
{
     502:	0005      	movs	r5, r0
	uint16_t tmp_data_length = packet->data_length;
     504:	9301      	str	r3, [sp, #4]

	_i2c_master_wait_for_sync(module);
     506:	4b2a      	ldr	r3, [pc, #168]	; (5b0 <_i2c_master_write_packet+0xb4>)
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     508:	6804      	ldr	r4, [r0, #0]
	_i2c_master_wait_for_sync(module);
     50a:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     50c:	7a7b      	ldrb	r3, [r7, #9]
     50e:	2b00      	cmp	r3, #0
     510:	d003      	beq.n	51a <_i2c_master_write_packet+0x1e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     512:	7ab9      	ldrb	r1, [r7, #10]
     514:	0028      	movs	r0, r5
     516:	4b27      	ldr	r3, [pc, #156]	; (5b4 <_i2c_master_write_packet+0xb8>)
     518:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     51a:	6863      	ldr	r3, [r4, #4]
     51c:	4a26      	ldr	r2, [pc, #152]	; (5b8 <_i2c_master_write_packet+0xbc>)
     51e:	4013      	ands	r3, r2
     520:	6063      	str	r3, [r4, #4]
     522:	7a7a      	ldrb	r2, [r7, #9]
     524:	883b      	ldrh	r3, [r7, #0]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     526:	7a39      	ldrb	r1, [r7, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     528:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     52a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     52c:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
     52e:	2900      	cmp	r1, #0
     530:	d002      	beq.n	538 <_i2c_master_write_packet+0x3c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     532:	2280      	movs	r2, #128	; 0x80
     534:	0212      	lsls	r2, r2, #8
     536:	4313      	orrs	r3, r2
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     538:	6263      	str	r3, [r4, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     53a:	0028      	movs	r0, r5
     53c:	4b1f      	ldr	r3, [pc, #124]	; (5bc <_i2c_master_write_packet+0xc0>)
     53e:	4798      	blx	r3
     540:	1e06      	subs	r6, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     542:	d115      	bne.n	570 <_i2c_master_write_packet+0x74>
		tmp_status = _i2c_master_address_response(module);
     544:	0028      	movs	r0, r5
     546:	4b1e      	ldr	r3, [pc, #120]	; (5c0 <_i2c_master_write_packet+0xc4>)
     548:	4798      	blx	r3
     54a:	1e06      	subs	r6, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     54c:	d110      	bne.n	570 <_i2c_master_write_packet+0x74>
     54e:	9000      	str	r0, [sp, #0]
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     550:	9b00      	ldr	r3, [sp, #0]
     552:	9a01      	ldr	r2, [sp, #4]
     554:	4293      	cmp	r3, r2
     556:	d10d      	bne.n	574 <_i2c_master_write_packet+0x78>
     558:	2600      	movs	r6, #0
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     55a:	7aab      	ldrb	r3, [r5, #10]
     55c:	2b00      	cmp	r3, #0
     55e:	d007      	beq.n	570 <_i2c_master_write_packet+0x74>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     560:	4b13      	ldr	r3, [pc, #76]	; (5b0 <_i2c_master_write_packet+0xb4>)
     562:	0028      	movs	r0, r5
     564:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     566:	23c0      	movs	r3, #192	; 0xc0
     568:	6862      	ldr	r2, [r4, #4]
     56a:	029b      	lsls	r3, r3, #10
     56c:	4313      	orrs	r3, r2
     56e:	6063      	str	r3, [r4, #4]
		}
	}

	return tmp_status;
}
     570:	0030      	movs	r0, r6
     572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     574:	2220      	movs	r2, #32
     576:	8b63      	ldrh	r3, [r4, #26]
     578:	4213      	tst	r3, r2
     57a:	d016      	beq.n	5aa <_i2c_master_write_packet+0xae>
			_i2c_master_wait_for_sync(module);
     57c:	0028      	movs	r0, r5
     57e:	4b0c      	ldr	r3, [pc, #48]	; (5b0 <_i2c_master_write_packet+0xb4>)
     580:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     582:	687b      	ldr	r3, [r7, #4]
     584:	9a00      	ldr	r2, [sp, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     586:	0028      	movs	r0, r5
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     588:	5c9a      	ldrb	r2, [r3, r2]
     58a:	0023      	movs	r3, r4
     58c:	3328      	adds	r3, #40	; 0x28
     58e:	701a      	strb	r2, [r3, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     590:	4b0a      	ldr	r3, [pc, #40]	; (5bc <_i2c_master_write_packet+0xc0>)
     592:	4798      	blx	r3
     594:	1e06      	subs	r6, r0, #0
			if (tmp_status != STATUS_OK) {
     596:	d1e0      	bne.n	55a <_i2c_master_write_packet+0x5e>
     598:	9a00      	ldr	r2, [sp, #0]
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     59a:	8b63      	ldrh	r3, [r4, #26]
     59c:	3201      	adds	r2, #1
     59e:	9200      	str	r2, [sp, #0]
     5a0:	2204      	movs	r2, #4
     5a2:	4213      	tst	r3, r2
     5a4:	d0d4      	beq.n	550 <_i2c_master_write_packet+0x54>
				tmp_status = STATUS_ERR_OVERFLOW;
     5a6:	261e      	movs	r6, #30
     5a8:	e7d7      	b.n	55a <_i2c_master_write_packet+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
     5aa:	2641      	movs	r6, #65	; 0x41
     5ac:	e7e0      	b.n	570 <_i2c_master_write_packet+0x74>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	000001a5 	.word	0x000001a5
     5b4:	000004dd 	.word	0x000004dd
     5b8:	fffbffff 	.word	0xfffbffff
     5bc:	000004b5 	.word	0x000004b5
     5c0:	00000489 	.word	0x00000489

000005c4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     5c4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     5c6:	8b82      	ldrh	r2, [r0, #28]
{
     5c8:	0003      	movs	r3, r0
		return STATUS_BUSY;
     5ca:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
     5cc:	2a00      	cmp	r2, #0
     5ce:	d105      	bne.n	5dc <i2c_master_write_packet_wait+0x18>
	}
#endif

	module->send_stop = true;
     5d0:	3201      	adds	r2, #1
     5d2:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     5d4:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     5d6:	0018      	movs	r0, r3
     5d8:	4b01      	ldr	r3, [pc, #4]	; (5e0 <i2c_master_write_packet_wait+0x1c>)
     5da:	4798      	blx	r3
}
     5dc:	bd10      	pop	{r4, pc}
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	000004fd 	.word	0x000004fd

000005e4 <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5e4:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     5e6:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5e8:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     5ea:	421a      	tst	r2, r3
     5ec:	d1fc      	bne.n	5e8 <_i2c_master_wait_for_sync+0x4>
}
     5ee:	4770      	bx	lr

000005f0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5f2:	6805      	ldr	r5, [r0, #0]
{
     5f4:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5f6:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     5f8:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     5fa:	8b83      	ldrh	r3, [r0, #28]
     5fc:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
     5fe:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     600:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     602:	3b01      	subs	r3, #1
     604:	b29b      	uxth	r3, r3
     606:	8383      	strh	r3, [r0, #28]
     608:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
     60a:	0112      	lsls	r2, r2, #4
     60c:	d50a      	bpl.n	624 <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
     60e:	2b00      	cmp	r3, #0
     610:	d00d      	beq.n	62e <_i2c_master_read+0x3e>
     612:	8b83      	ldrh	r3, [r0, #28]
     614:	2b01      	cmp	r3, #1
     616:	d10a      	bne.n	62e <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     618:	2380      	movs	r3, #128	; 0x80
     61a:	686a      	ldr	r2, [r5, #4]
     61c:	02db      	lsls	r3, r3, #11
     61e:	4313      	orrs	r3, r2
     620:	606b      	str	r3, [r5, #4]
     622:	e004      	b.n	62e <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
     624:	2b00      	cmp	r3, #0
     626:	d002      	beq.n	62e <_i2c_master_read+0x3e>
     628:	8b83      	ldrh	r3, [r0, #28]
     62a:	2b00      	cmp	r3, #0
     62c:	d0f4      	beq.n	618 <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
     62e:	8ba3      	ldrh	r3, [r4, #28]
     630:	4f0a      	ldr	r7, [pc, #40]	; (65c <_i2c_master_read+0x6c>)
     632:	2b00      	cmp	r3, #0
     634:	d109      	bne.n	64a <_i2c_master_read+0x5a>
		if (module->send_stop) {
     636:	7aa3      	ldrb	r3, [r4, #10]
     638:	2b00      	cmp	r3, #0
     63a:	d006      	beq.n	64a <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     63c:	0020      	movs	r0, r4
     63e:	47b8      	blx	r7
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     640:	23c0      	movs	r3, #192	; 0xc0
     642:	686a      	ldr	r2, [r5, #4]
     644:	029b      	lsls	r3, r3, #10
     646:	4313      	orrs	r3, r2
     648:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     64a:	0020      	movs	r0, r4
     64c:	47b8      	blx	r7
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     64e:	6a23      	ldr	r3, [r4, #32]
     650:	3528      	adds	r5, #40	; 0x28
     652:	199e      	adds	r6, r3, r6
     654:	782b      	ldrb	r3, [r5, #0]
     656:	b2db      	uxtb	r3, r3
     658:	7033      	strb	r3, [r6, #0]
}
     65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     65c:	000005e5 	.word	0x000005e5

00000660 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     660:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     662:	6806      	ldr	r6, [r0, #0]
{
     664:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     666:	8b73      	ldrh	r3, [r6, #26]
     668:	075b      	lsls	r3, r3, #29
     66a:	d503      	bpl.n	674 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     66c:	231e      	movs	r3, #30
     66e:	3406      	adds	r4, #6
     670:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     672:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     674:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     676:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
     678:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
     67a:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
     67c:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     67e:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
     680:	3b01      	subs	r3, #1
     682:	b29b      	uxth	r3, r3
     684:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     686:	4b04      	ldr	r3, [pc, #16]	; (698 <_i2c_master_write+0x38>)
     688:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     68a:	6a23      	ldr	r3, [r4, #32]
     68c:	195d      	adds	r5, r3, r5
     68e:	782b      	ldrb	r3, [r5, #0]
     690:	b2db      	uxtb	r3, r3
     692:	7033      	strb	r3, [r6, #0]
     694:	e7ed      	b.n	672 <_i2c_master_write+0x12>
     696:	46c0      	nop			; (mov r8, r8)
     698:	000005e5 	.word	0x000005e5

0000069c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     69e:	4b5e      	ldr	r3, [pc, #376]	; (818 <_i2c_master_interrupt_handler+0x17c>)
     6a0:	0080      	lsls	r0, r0, #2
     6a2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6a4:	6825      	ldr	r5, [r4, #0]
     6a6:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6a8:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     6aa:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
     6ac:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6ae:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
     6b0:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     6b2:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6b4:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     6b6:	2a00      	cmp	r2, #0
     6b8:	d12e      	bne.n	718 <_i2c_master_interrupt_handler+0x7c>
     6ba:	8ba2      	ldrh	r2, [r4, #28]
     6bc:	2a00      	cmp	r2, #0
     6be:	d02b      	beq.n	718 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     6c0:	2301      	movs	r3, #1
     6c2:	7e2a      	ldrb	r2, [r5, #24]
     6c4:	421a      	tst	r2, r3
     6c6:	d006      	beq.n	6d6 <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     6c8:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6ca:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     6cc:	8b6b      	ldrh	r3, [r5, #26]
     6ce:	4013      	ands	r3, r2
     6d0:	d010      	beq.n	6f4 <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
     6d2:	2341      	movs	r3, #65	; 0x41
     6d4:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
     6d6:	8ba3      	ldrh	r3, [r4, #28]
     6d8:	b29b      	uxth	r3, r3
     6da:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     6dc:	7ff3      	ldrb	r3, [r6, #31]
     6de:	2b05      	cmp	r3, #5
     6e0:	d13c      	bne.n	75c <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     6e2:	1d63      	adds	r3, r4, #5
     6e4:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
     6e6:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     6e8:	2b00      	cmp	r3, #0
     6ea:	d000      	beq.n	6ee <_i2c_master_interrupt_handler+0x52>
     6ec:	e08a      	b.n	804 <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
     6ee:	4b4b      	ldr	r3, [pc, #300]	; (81c <_i2c_master_interrupt_handler+0x180>)
		} else {
			_i2c_master_read(module);
     6f0:	4798      	blx	r3
     6f2:	e033      	b.n	75c <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6f4:	8b6a      	ldrh	r2, [r5, #26]
     6f6:	0752      	lsls	r2, r2, #29
     6f8:	d5ed      	bpl.n	6d6 <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     6fa:	2218      	movs	r2, #24
     6fc:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
     6fe:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     700:	7aa3      	ldrb	r3, [r4, #10]
     702:	2b00      	cmp	r3, #0
     704:	d0e7      	beq.n	6d6 <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
     706:	4b46      	ldr	r3, [pc, #280]	; (820 <_i2c_master_interrupt_handler+0x184>)
     708:	0020      	movs	r0, r4
     70a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     70c:	23c0      	movs	r3, #192	; 0xc0
     70e:	686a      	ldr	r2, [r5, #4]
     710:	029b      	lsls	r3, r3, #10
     712:	4313      	orrs	r3, r2
     714:	606b      	str	r3, [r5, #4]
     716:	e7de      	b.n	6d6 <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     718:	8b62      	ldrh	r2, [r4, #26]
     71a:	2a00      	cmp	r2, #0
     71c:	d05f      	beq.n	7de <_i2c_master_interrupt_handler+0x142>
     71e:	8ba2      	ldrh	r2, [r4, #28]
     720:	2a00      	cmp	r2, #0
     722:	d15c      	bne.n	7de <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
     724:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     726:	2a05      	cmp	r2, #5
     728:	d159      	bne.n	7de <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     72a:	1d62      	adds	r2, r4, #5
     72c:	7fd2      	ldrb	r2, [r2, #31]
     72e:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
     730:	2a00      	cmp	r2, #0
     732:	d154      	bne.n	7de <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
     734:	2303      	movs	r3, #3
     736:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     738:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     73a:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
     73c:	7aa3      	ldrb	r3, [r4, #10]
     73e:	2b00      	cmp	r3, #0
     740:	d04a      	beq.n	7d8 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
     742:	4b37      	ldr	r3, [pc, #220]	; (820 <_i2c_master_interrupt_handler+0x184>)
     744:	0020      	movs	r0, r4
     746:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     748:	23c0      	movs	r3, #192	; 0xc0
     74a:	686a      	ldr	r2, [r5, #4]
     74c:	029b      	lsls	r3, r3, #10
     74e:	4313      	orrs	r3, r2
     750:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     752:	07fb      	lsls	r3, r7, #31
     754:	d502      	bpl.n	75c <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     756:	68e3      	ldr	r3, [r4, #12]
     758:	0020      	movs	r0, r4
     75a:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     75c:	8b63      	ldrh	r3, [r4, #26]
     75e:	2b00      	cmp	r3, #0
     760:	d01b      	beq.n	79a <_i2c_master_interrupt_handler+0xfe>
     762:	8ba3      	ldrh	r3, [r4, #28]
     764:	2b00      	cmp	r3, #0
     766:	d118      	bne.n	79a <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
     768:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     76a:	2b05      	cmp	r3, #5
     76c:	d115      	bne.n	79a <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     76e:	1d63      	adds	r3, r4, #5
     770:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
     772:	2a01      	cmp	r2, #1
     774:	d111      	bne.n	79a <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     776:	7e29      	ldrb	r1, [r5, #24]
     778:	3201      	adds	r2, #1
     77a:	4211      	tst	r1, r2
     77c:	d000      	beq.n	780 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     77e:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     780:	2203      	movs	r2, #3
     782:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     784:	2200      	movs	r2, #0
     786:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     788:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     78a:	07ba      	lsls	r2, r7, #30
     78c:	d53c      	bpl.n	808 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     78e:	7fda      	ldrb	r2, [r3, #31]
     790:	2a01      	cmp	r2, #1
     792:	d139      	bne.n	808 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     794:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     796:	0020      	movs	r0, r4
     798:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     79a:	7ff3      	ldrb	r3, [r6, #31]
     79c:	2b05      	cmp	r3, #5
     79e:	d01a      	beq.n	7d6 <_i2c_master_interrupt_handler+0x13a>
     7a0:	7ff3      	ldrb	r3, [r6, #31]
     7a2:	2b00      	cmp	r3, #0
     7a4:	d017      	beq.n	7d6 <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     7a6:	2303      	movs	r3, #3
     7a8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     7aa:	2300      	movs	r3, #0
     7ac:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     7ae:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     7b0:	7ff3      	ldrb	r3, [r6, #31]
     7b2:	2b41      	cmp	r3, #65	; 0x41
     7b4:	d00a      	beq.n	7cc <_i2c_master_interrupt_handler+0x130>
     7b6:	7aa3      	ldrb	r3, [r4, #10]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d007      	beq.n	7cc <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     7bc:	4b18      	ldr	r3, [pc, #96]	; (820 <_i2c_master_interrupt_handler+0x184>)
     7be:	0020      	movs	r0, r4
     7c0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     7c2:	23e0      	movs	r3, #224	; 0xe0
     7c4:	686a      	ldr	r2, [r5, #4]
     7c6:	02db      	lsls	r3, r3, #11
     7c8:	4313      	orrs	r3, r2
     7ca:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     7cc:	077b      	lsls	r3, r7, #29
     7ce:	d502      	bpl.n	7d6 <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     7d0:	6963      	ldr	r3, [r4, #20]
     7d2:	0020      	movs	r0, r4
     7d4:	4798      	blx	r3
		}
	}
}
     7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     7d8:	2301      	movs	r3, #1
     7da:	762b      	strb	r3, [r5, #24]
     7dc:	e7b9      	b.n	752 <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     7de:	8b62      	ldrh	r2, [r4, #26]
     7e0:	2a00      	cmp	r2, #0
     7e2:	d0bb      	beq.n	75c <_i2c_master_interrupt_handler+0xc0>
     7e4:	8ba2      	ldrh	r2, [r4, #28]
     7e6:	2a00      	cmp	r2, #0
     7e8:	d0b8      	beq.n	75c <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     7ea:	8b6a      	ldrh	r2, [r5, #26]
     7ec:	0692      	lsls	r2, r2, #26
     7ee:	d500      	bpl.n	7f2 <_i2c_master_interrupt_handler+0x156>
     7f0:	e777      	b.n	6e2 <_i2c_master_interrupt_handler+0x46>
     7f2:	2b00      	cmp	r3, #0
     7f4:	d003      	beq.n	7fe <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     7f6:	8ba3      	ldrh	r3, [r4, #28]
     7f8:	2b01      	cmp	r3, #1
     7fa:	d100      	bne.n	7fe <_i2c_master_interrupt_handler+0x162>
     7fc:	e771      	b.n	6e2 <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
     7fe:	2341      	movs	r3, #65	; 0x41
     800:	77f3      	strb	r3, [r6, #31]
     802:	e7ab      	b.n	75c <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
     804:	4b07      	ldr	r3, [pc, #28]	; (824 <_i2c_master_interrupt_handler+0x188>)
     806:	e773      	b.n	6f0 <_i2c_master_interrupt_handler+0x54>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     808:	07fa      	lsls	r2, r7, #31
     80a:	d5c6      	bpl.n	79a <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     80c:	7fdb      	ldrb	r3, [r3, #31]
     80e:	2b00      	cmp	r3, #0
     810:	d1c3      	bne.n	79a <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     812:	68e3      	ldr	r3, [r4, #12]
     814:	e7bf      	b.n	796 <_i2c_master_interrupt_handler+0xfa>
     816:	46c0      	nop			; (mov r8, r8)
     818:	20000088 	.word	0x20000088
     81c:	00000661 	.word	0x00000661
     820:	000005e5 	.word	0x000005e5
     824:	000005f1 	.word	0x000005f1

00000828 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     828:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     82a:	4c0d      	ldr	r4, [pc, #52]	; (860 <sercom_set_gclk_generator+0x38>)
{
     82c:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     82e:	7823      	ldrb	r3, [r4, #0]
     830:	2b00      	cmp	r3, #0
     832:	d001      	beq.n	838 <sercom_set_gclk_generator+0x10>
     834:	2900      	cmp	r1, #0
     836:	d00c      	beq.n	852 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     838:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     83a:	200d      	movs	r0, #13
     83c:	4b09      	ldr	r3, [pc, #36]	; (864 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     83e:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     840:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     842:	200d      	movs	r0, #13
     844:	4b08      	ldr	r3, [pc, #32]	; (868 <sercom_set_gclk_generator+0x40>)
     846:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     848:	2301      	movs	r3, #1

		return STATUS_OK;
     84a:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     84c:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     84e:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     850:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     852:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     854:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     856:	42ab      	cmp	r3, r5
     858:	d0fa      	beq.n	850 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     85a:	201d      	movs	r0, #29
     85c:	e7f8      	b.n	850 <sercom_set_gclk_generator+0x28>
     85e:	46c0      	nop			; (mov r8, r8)
     860:	2000003d 	.word	0x2000003d
     864:	00000fd1 	.word	0x00000fd1
     868:	00000f49 	.word	0x00000f49

0000086c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     86c:	4a1d      	ldr	r2, [pc, #116]	; (8e4 <_sercom_get_default_pad+0x78>)
{
     86e:	0003      	movs	r3, r0
     870:	b500      	push	{lr}
     872:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     874:	4293      	cmp	r3, r2
     876:	d013      	beq.n	8a0 <_sercom_get_default_pad+0x34>
     878:	4a1b      	ldr	r2, [pc, #108]	; (8e8 <_sercom_get_default_pad+0x7c>)
     87a:	4293      	cmp	r3, r2
     87c:	d01d      	beq.n	8ba <_sercom_get_default_pad+0x4e>
     87e:	4a1b      	ldr	r2, [pc, #108]	; (8ec <_sercom_get_default_pad+0x80>)
     880:	4293      	cmp	r3, r2
     882:	d127      	bne.n	8d4 <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     884:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     886:	2903      	cmp	r1, #3
     888:	d804      	bhi.n	894 <_sercom_get_default_pad+0x28>
     88a:	f001 f9d1 	bl	1c30 <__gnu_thumb1_case_uqi>
     88e:	0225      	.short	0x0225
     890:	0705      	.short	0x0705
     892:	4b17      	ldr	r3, [pc, #92]	; (8f0 <_sercom_get_default_pad+0x84>)
}
     894:	0018      	movs	r0, r3
     896:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     898:	4b16      	ldr	r3, [pc, #88]	; (8f4 <_sercom_get_default_pad+0x88>)
     89a:	e7fb      	b.n	894 <_sercom_get_default_pad+0x28>
     89c:	4b16      	ldr	r3, [pc, #88]	; (8f8 <_sercom_get_default_pad+0x8c>)
     89e:	e7f9      	b.n	894 <_sercom_get_default_pad+0x28>
	return 0;
     8a0:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8a2:	2903      	cmp	r1, #3
     8a4:	d8f6      	bhi.n	894 <_sercom_get_default_pad+0x28>
     8a6:	f001 f9c3 	bl	1c30 <__gnu_thumb1_case_uqi>
     8aa:	0219      	.short	0x0219
     8ac:	0604      	.short	0x0604
     8ae:	4b13      	ldr	r3, [pc, #76]	; (8fc <_sercom_get_default_pad+0x90>)
     8b0:	e7f0      	b.n	894 <_sercom_get_default_pad+0x28>
     8b2:	4b13      	ldr	r3, [pc, #76]	; (900 <_sercom_get_default_pad+0x94>)
     8b4:	e7ee      	b.n	894 <_sercom_get_default_pad+0x28>
     8b6:	4b13      	ldr	r3, [pc, #76]	; (904 <_sercom_get_default_pad+0x98>)
     8b8:	e7ec      	b.n	894 <_sercom_get_default_pad+0x28>
	return 0;
     8ba:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8bc:	2903      	cmp	r1, #3
     8be:	d8e9      	bhi.n	894 <_sercom_get_default_pad+0x28>
     8c0:	f001 f9b6 	bl	1c30 <__gnu_thumb1_case_uqi>
     8c4:	0604020e 	.word	0x0604020e
     8c8:	4b0f      	ldr	r3, [pc, #60]	; (908 <_sercom_get_default_pad+0x9c>)
     8ca:	e7e3      	b.n	894 <_sercom_get_default_pad+0x28>
     8cc:	4b0f      	ldr	r3, [pc, #60]	; (90c <_sercom_get_default_pad+0xa0>)
     8ce:	e7e1      	b.n	894 <_sercom_get_default_pad+0x28>
     8d0:	4b0f      	ldr	r3, [pc, #60]	; (910 <_sercom_get_default_pad+0xa4>)
     8d2:	e7df      	b.n	894 <_sercom_get_default_pad+0x28>
	return 0;
     8d4:	2300      	movs	r3, #0
     8d6:	e7dd      	b.n	894 <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d8:	4b0e      	ldr	r3, [pc, #56]	; (914 <_sercom_get_default_pad+0xa8>)
     8da:	e7db      	b.n	894 <_sercom_get_default_pad+0x28>
     8dc:	4b0e      	ldr	r3, [pc, #56]	; (918 <_sercom_get_default_pad+0xac>)
     8de:	e7d9      	b.n	894 <_sercom_get_default_pad+0x28>
     8e0:	4b0e      	ldr	r3, [pc, #56]	; (91c <_sercom_get_default_pad+0xb0>)
     8e2:	e7d7      	b.n	894 <_sercom_get_default_pad+0x28>
     8e4:	42000c00 	.word	0x42000c00
     8e8:	42001000 	.word	0x42001000
     8ec:	42000800 	.word	0x42000800
     8f0:	00050003 	.word	0x00050003
     8f4:	00060003 	.word	0x00060003
     8f8:	00070003 	.word	0x00070003
     8fc:	00170002 	.word	0x00170002
     900:	001e0003 	.word	0x001e0003
     904:	001f0003 	.word	0x001f0003
     908:	00170003 	.word	0x00170003
     90c:	00100003 	.word	0x00100003
     910:	00190003 	.word	0x00190003
     914:	00040003 	.word	0x00040003
     918:	00160002 	.word	0x00160002
     91c:	00160003 	.word	0x00160003

00000920 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     922:	4b0c      	ldr	r3, [pc, #48]	; (954 <_sercom_get_sercom_inst_index+0x34>)
{
     924:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     926:	0018      	movs	r0, r3
     928:	aa01      	add	r2, sp, #4
     92a:	c870      	ldmia	r0!, {r4, r5, r6}
     92c:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     92e:	9a01      	ldr	r2, [sp, #4]
     930:	428a      	cmp	r2, r1
     932:	d00a      	beq.n	94a <_sercom_get_sercom_inst_index+0x2a>
     934:	685a      	ldr	r2, [r3, #4]
     936:	428a      	cmp	r2, r1
     938:	d009      	beq.n	94e <_sercom_get_sercom_inst_index+0x2e>
     93a:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     93c:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     93e:	428b      	cmp	r3, r1
     940:	d101      	bne.n	946 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     942:	3002      	adds	r0, #2
			return i;
     944:	b2c0      	uxtb	r0, r0
}
     946:	b004      	add	sp, #16
     948:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     94a:	2000      	movs	r0, #0
     94c:	e7fa      	b.n	944 <_sercom_get_sercom_inst_index+0x24>
     94e:	2001      	movs	r0, #1
     950:	e7f8      	b.n	944 <_sercom_get_sercom_inst_index+0x24>
     952:	46c0      	nop			; (mov r8, r8)
     954:	0000367c 	.word	0x0000367c

00000958 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     958:	4770      	bx	lr
	...

0000095c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     95c:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     95e:	4e09      	ldr	r6, [pc, #36]	; (984 <_sercom_set_handler+0x28>)
     960:	4b09      	ldr	r3, [pc, #36]	; (988 <_sercom_set_handler+0x2c>)
     962:	7832      	ldrb	r2, [r6, #0]
     964:	2a00      	cmp	r2, #0
     966:	d109      	bne.n	97c <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     968:	4c08      	ldr	r4, [pc, #32]	; (98c <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     96a:	4d09      	ldr	r5, [pc, #36]	; (990 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     96c:	6022      	str	r2, [r4, #0]
     96e:	6062      	str	r2, [r4, #4]
     970:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
     972:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     974:	601d      	str	r5, [r3, #0]
     976:	605d      	str	r5, [r3, #4]
     978:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
     97a:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     97c:	0080      	lsls	r0, r0, #2
     97e:	5019      	str	r1, [r3, r0]
}
     980:	bd70      	pop	{r4, r5, r6, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	2000003f 	.word	0x2000003f
     988:	20000040 	.word	0x20000040
     98c:	20000088 	.word	0x20000088
     990:	00000959 	.word	0x00000959

00000994 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     994:	2309      	movs	r3, #9
{
     996:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     998:	ac01      	add	r4, sp, #4
     99a:	7023      	strb	r3, [r4, #0]
     99c:	3301      	adds	r3, #1
     99e:	7063      	strb	r3, [r4, #1]
     9a0:	3301      	adds	r3, #1
     9a2:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     9a4:	4b01      	ldr	r3, [pc, #4]	; (9ac <_sercom_get_interrupt_vector+0x18>)
     9a6:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     9a8:	5620      	ldrsb	r0, [r4, r0]
}
     9aa:	bd16      	pop	{r1, r2, r4, pc}
     9ac:	00000921 	.word	0x00000921

000009b0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     9b0:	b510      	push	{r4, lr}
     9b2:	4b02      	ldr	r3, [pc, #8]	; (9bc <SERCOM0_Handler+0xc>)
     9b4:	2000      	movs	r0, #0
     9b6:	681b      	ldr	r3, [r3, #0]
     9b8:	4798      	blx	r3
     9ba:	bd10      	pop	{r4, pc}
     9bc:	20000040 	.word	0x20000040

000009c0 <SERCOM1_Handler>:
     9c0:	b510      	push	{r4, lr}
     9c2:	4b02      	ldr	r3, [pc, #8]	; (9cc <SERCOM1_Handler+0xc>)
     9c4:	2001      	movs	r0, #1
     9c6:	685b      	ldr	r3, [r3, #4]
     9c8:	4798      	blx	r3
     9ca:	bd10      	pop	{r4, pc}
     9cc:	20000040 	.word	0x20000040

000009d0 <SERCOM2_Handler>:
     9d0:	b510      	push	{r4, lr}
     9d2:	4b02      	ldr	r3, [pc, #8]	; (9dc <SERCOM2_Handler+0xc>)
     9d4:	2002      	movs	r0, #2
     9d6:	689b      	ldr	r3, [r3, #8]
     9d8:	4798      	blx	r3
     9da:	bd10      	pop	{r4, pc}
     9dc:	20000040 	.word	0x20000040

000009e0 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     9e0:	2310      	movs	r3, #16
     9e2:	4902      	ldr	r1, [pc, #8]	; (9ec <_system_dfll_wait_for_sync+0xc>)
     9e4:	68ca      	ldr	r2, [r1, #12]
     9e6:	421a      	tst	r2, r3
     9e8:	d0fc      	beq.n	9e4 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     9ea:	4770      	bx	lr
     9ec:	40000800 	.word	0x40000800

000009f0 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     9f0:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
     9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
     9f4:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     9f6:	4d09      	ldr	r5, [pc, #36]	; (a1c <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     9f8:	4c09      	ldr	r4, [pc, #36]	; (a20 <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     9fa:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
     9fc:	4f09      	ldr	r7, [pc, #36]	; (a24 <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     9fe:	4313      	orrs	r3, r2
     a00:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     a02:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     a04:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     a06:	68ab      	ldr	r3, [r5, #8]
     a08:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     a0a:	686b      	ldr	r3, [r5, #4]
     a0c:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     a0e:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     a10:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     a12:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     a14:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     a16:	b29b      	uxth	r3, r3
     a18:	84a3      	strh	r3, [r4, #36]	; 0x24
}
     a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a1c:	2000004c 	.word	0x2000004c
     a20:	40000800 	.word	0x40000800
     a24:	000009e1 	.word	0x000009e1

00000a28 <system_clock_source_get_hz>:
{
     a28:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     a2a:	2808      	cmp	r0, #8
     a2c:	d806      	bhi.n	a3c <system_clock_source_get_hz+0x14>
     a2e:	f001 f8ff 	bl	1c30 <__gnu_thumb1_case_uqi>
     a32:	0508      	.short	0x0508
     a34:	12303005 	.word	0x12303005
     a38:	150b      	.short	0x150b
     a3a:	28          	.byte	0x28
     a3b:	00          	.byte	0x00
		return 0;
     a3c:	2400      	movs	r4, #0
}
     a3e:	0020      	movs	r0, r4
     a40:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     a42:	4b16      	ldr	r3, [pc, #88]	; (a9c <system_clock_source_get_hz+0x74>)
     a44:	691c      	ldr	r4, [r3, #16]
     a46:	e7fa      	b.n	a3e <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     a48:	4b15      	ldr	r3, [pc, #84]	; (aa0 <system_clock_source_get_hz+0x78>)
     a4a:	4c16      	ldr	r4, [pc, #88]	; (aa4 <system_clock_source_get_hz+0x7c>)
     a4c:	6a1b      	ldr	r3, [r3, #32]
     a4e:	059b      	lsls	r3, r3, #22
     a50:	0f9b      	lsrs	r3, r3, #30
     a52:	40dc      	lsrs	r4, r3
     a54:	e7f3      	b.n	a3e <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     a56:	4b11      	ldr	r3, [pc, #68]	; (a9c <system_clock_source_get_hz+0x74>)
     a58:	695c      	ldr	r4, [r3, #20]
     a5a:	e7f0      	b.n	a3e <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     a5c:	4d0f      	ldr	r5, [pc, #60]	; (a9c <system_clock_source_get_hz+0x74>)
			return 0;
     a5e:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     a60:	682b      	ldr	r3, [r5, #0]
     a62:	079b      	lsls	r3, r3, #30
     a64:	d5eb      	bpl.n	a3e <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     a66:	4b10      	ldr	r3, [pc, #64]	; (aa8 <system_clock_source_get_hz+0x80>)
     a68:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
     a6a:	2224      	movs	r2, #36	; 0x24
     a6c:	682b      	ldr	r3, [r5, #0]
     a6e:	4013      	ands	r3, r2
     a70:	2b04      	cmp	r3, #4
     a72:	d111      	bne.n	a98 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     a74:	0020      	movs	r0, r4
     a76:	4b0d      	ldr	r3, [pc, #52]	; (aac <system_clock_source_get_hz+0x84>)
     a78:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     a7a:	68ac      	ldr	r4, [r5, #8]
     a7c:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     a7e:	4344      	muls	r4, r0
     a80:	e7dd      	b.n	a3e <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     a82:	4b0b      	ldr	r3, [pc, #44]	; (ab0 <system_clock_source_get_hz+0x88>)
			return 0;
     a84:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     a86:	781b      	ldrb	r3, [r3, #0]
     a88:	075b      	lsls	r3, r3, #29
     a8a:	d5d8      	bpl.n	a3e <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     a8c:	4b03      	ldr	r3, [pc, #12]	; (a9c <system_clock_source_get_hz+0x74>)
     a8e:	68dc      	ldr	r4, [r3, #12]
     a90:	e7d5      	b.n	a3e <system_clock_source_get_hz+0x16>
		return 32768UL;
     a92:	2480      	movs	r4, #128	; 0x80
     a94:	0224      	lsls	r4, r4, #8
     a96:	e7d2      	b.n	a3e <system_clock_source_get_hz+0x16>
			return 48000000UL;
     a98:	4c06      	ldr	r4, [pc, #24]	; (ab4 <system_clock_source_get_hz+0x8c>)
     a9a:	e7d0      	b.n	a3e <system_clock_source_get_hz+0x16>
     a9c:	2000004c 	.word	0x2000004c
     aa0:	40000800 	.word	0x40000800
     aa4:	007a1200 	.word	0x007a1200
     aa8:	000009e1 	.word	0x000009e1
     aac:	00000fed 	.word	0x00000fed
     ab0:	40000850 	.word	0x40000850
     ab4:	02dc6c00 	.word	0x02dc6c00

00000ab8 <system_clock_source_osc8m_set_config>:
{
     ab8:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
     aba:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
     abc:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
     abe:	7845      	ldrb	r5, [r0, #1]
     ac0:	2001      	movs	r0, #1
     ac2:	2640      	movs	r6, #64	; 0x40
     ac4:	4005      	ands	r5, r0
     ac6:	4020      	ands	r0, r4
     ac8:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     aca:	4908      	ldr	r1, [pc, #32]	; (aec <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     acc:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ace:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     ad0:	01c0      	lsls	r0, r0, #7
     ad2:	43b3      	bics	r3, r6
     ad4:	432b      	orrs	r3, r5
     ad6:	43a3      	bics	r3, r4
     ad8:	4303      	orrs	r3, r0
     ada:	2003      	movs	r0, #3
     adc:	4002      	ands	r2, r0
     ade:	4804      	ldr	r0, [pc, #16]	; (af0 <system_clock_source_osc8m_set_config+0x38>)
     ae0:	0212      	lsls	r2, r2, #8
     ae2:	4003      	ands	r3, r0
     ae4:	4313      	orrs	r3, r2
     ae6:	620b      	str	r3, [r1, #32]
}
     ae8:	bd70      	pop	{r4, r5, r6, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	40000800 	.word	0x40000800
     af0:	fffffcff 	.word	0xfffffcff

00000af4 <system_clock_source_osc32k_set_config>:
{
     af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     af6:	4f18      	ldr	r7, [pc, #96]	; (b58 <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
     af8:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     afa:	69bb      	ldr	r3, [r7, #24]
     afc:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
     afe:	7803      	ldrb	r3, [r0, #0]
     b00:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
     b02:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
     b04:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
     b06:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     b08:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     b0a:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
     b0c:	2201      	movs	r2, #1
     b0e:	4399      	bics	r1, r3
     b10:	2308      	movs	r3, #8
     b12:	7880      	ldrb	r0, [r0, #2]
     b14:	4016      	ands	r6, r2
     b16:	4010      	ands	r0, r2
     b18:	0080      	lsls	r0, r0, #2
     b1a:	4308      	orrs	r0, r1
     b1c:	4398      	bics	r0, r3
     b1e:	00f6      	lsls	r6, r6, #3
     b20:	4306      	orrs	r6, r0
     b22:	4015      	ands	r5, r2
     b24:	01a8      	lsls	r0, r5, #6
     b26:	0035      	movs	r5, r6
     b28:	3338      	adds	r3, #56	; 0x38
     b2a:	439d      	bics	r5, r3
     b2c:	4305      	orrs	r5, r0
     b2e:	4014      	ands	r4, r2
     b30:	01e3      	lsls	r3, r4, #7
     b32:	2080      	movs	r0, #128	; 0x80
     b34:	002c      	movs	r4, r5
     b36:	4384      	bics	r4, r0
     b38:	431c      	orrs	r4, r3
     b3a:	2307      	movs	r3, #7
     b3c:	9901      	ldr	r1, [sp, #4]
     b3e:	400b      	ands	r3, r1
     b40:	4906      	ldr	r1, [pc, #24]	; (b5c <system_clock_source_osc32k_set_config+0x68>)
     b42:	021b      	lsls	r3, r3, #8
     b44:	4021      	ands	r1, r4
     b46:	4319      	orrs	r1, r3
     b48:	9b00      	ldr	r3, [sp, #0]
     b4a:	401a      	ands	r2, r3
     b4c:	0313      	lsls	r3, r2, #12
     b4e:	4a04      	ldr	r2, [pc, #16]	; (b60 <system_clock_source_osc32k_set_config+0x6c>)
     b50:	400a      	ands	r2, r1
     b52:	431a      	orrs	r2, r3
     b54:	61ba      	str	r2, [r7, #24]
}
     b56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     b58:	40000800 	.word	0x40000800
     b5c:	fffff8ff 	.word	0xfffff8ff
     b60:	ffffefff 	.word	0xffffefff

00000b64 <system_clock_source_dfll_set_config>:
{
     b64:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     b66:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     b68:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     b6a:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     b6c:	059b      	lsls	r3, r3, #22
     b6e:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     b70:	0c12      	lsrs	r2, r2, #16
     b72:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
     b74:	4b17      	ldr	r3, [pc, #92]	; (bd4 <system_clock_source_dfll_set_config+0x70>)
     b76:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
     b78:	79c1      	ldrb	r1, [r0, #7]
     b7a:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
     b7c:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
     b7e:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
     b80:	8841      	ldrh	r1, [r0, #2]
     b82:	4321      	orrs	r1, r4
     b84:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     b86:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     b88:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     b8a:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
     b8c:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
     b8e:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     b90:	2c04      	cmp	r4, #4
     b92:	d10d      	bne.n	bb0 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     b94:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     b96:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     b98:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     b9a:	430a      	orrs	r2, r1
     b9c:	89c1      	ldrh	r1, [r0, #14]
     b9e:	480e      	ldr	r0, [pc, #56]	; (bd8 <system_clock_source_dfll_set_config+0x74>)
     ba0:	0409      	lsls	r1, r1, #16
     ba2:	4001      	ands	r1, r0
     ba4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     ba6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     ba8:	681a      	ldr	r2, [r3, #0]
     baa:	4314      	orrs	r4, r2
     bac:	601c      	str	r4, [r3, #0]
}
     bae:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     bb0:	2c20      	cmp	r4, #32
     bb2:	d1fc      	bne.n	bae <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     bb4:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     bb6:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     bb8:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     bba:	430a      	orrs	r2, r1
     bbc:	89c1      	ldrh	r1, [r0, #14]
     bbe:	4806      	ldr	r0, [pc, #24]	; (bd8 <system_clock_source_dfll_set_config+0x74>)
     bc0:	0409      	lsls	r1, r1, #16
     bc2:	4001      	ands	r1, r0
     bc4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     bc6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
     bc8:	6819      	ldr	r1, [r3, #0]
     bca:	4a04      	ldr	r2, [pc, #16]	; (bdc <system_clock_source_dfll_set_config+0x78>)
     bcc:	430a      	orrs	r2, r1
     bce:	601a      	str	r2, [r3, #0]
}
     bd0:	e7ed      	b.n	bae <system_clock_source_dfll_set_config+0x4a>
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	2000004c 	.word	0x2000004c
     bd8:	03ff0000 	.word	0x03ff0000
     bdc:	00000424 	.word	0x00000424

00000be0 <system_clock_source_enable>:
{
     be0:	b510      	push	{r4, lr}
	switch (clock_source) {
     be2:	2808      	cmp	r0, #8
     be4:	d806      	bhi.n	bf4 <system_clock_source_enable+0x14>
     be6:	f001 f823 	bl	1c30 <__gnu_thumb1_case_uqi>
     bea:	0514      	.short	0x0514
     bec:	1a0e0c05 	.word	0x1a0e0c05
     bf0:	2007      	.short	0x2007
     bf2:	23          	.byte	0x23
     bf3:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
     bf4:	2017      	movs	r0, #23
}
     bf6:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     bf8:	2302      	movs	r3, #2
     bfa:	4a10      	ldr	r2, [pc, #64]	; (c3c <system_clock_source_enable+0x5c>)
     bfc:	6a11      	ldr	r1, [r2, #32]
     bfe:	430b      	orrs	r3, r1
     c00:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c02:	2000      	movs	r0, #0
     c04:	e7f7      	b.n	bf6 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c06:	2302      	movs	r3, #2
     c08:	4a0c      	ldr	r2, [pc, #48]	; (c3c <system_clock_source_enable+0x5c>)
     c0a:	6991      	ldr	r1, [r2, #24]
     c0c:	430b      	orrs	r3, r1
     c0e:	6193      	str	r3, [r2, #24]
     c10:	e7f7      	b.n	c02 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c12:	2302      	movs	r3, #2
     c14:	4a09      	ldr	r2, [pc, #36]	; (c3c <system_clock_source_enable+0x5c>)
     c16:	8a11      	ldrh	r1, [r2, #16]
     c18:	430b      	orrs	r3, r1
     c1a:	8213      	strh	r3, [r2, #16]
     c1c:	e7f1      	b.n	c02 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c1e:	2302      	movs	r3, #2
     c20:	4a06      	ldr	r2, [pc, #24]	; (c3c <system_clock_source_enable+0x5c>)
     c22:	8a91      	ldrh	r1, [r2, #20]
     c24:	430b      	orrs	r3, r1
     c26:	8293      	strh	r3, [r2, #20]
     c28:	e7eb      	b.n	c02 <system_clock_source_enable+0x22>
     c2a:	4b05      	ldr	r3, [pc, #20]	; (c40 <system_clock_source_enable+0x60>)
     c2c:	4798      	blx	r3
     c2e:	e7e2      	b.n	bf6 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     c30:	2302      	movs	r3, #2
     c32:	4a04      	ldr	r2, [pc, #16]	; (c44 <system_clock_source_enable+0x64>)
     c34:	7811      	ldrb	r1, [r2, #0]
     c36:	430b      	orrs	r3, r1
     c38:	7013      	strb	r3, [r2, #0]
     c3a:	e7e2      	b.n	c02 <system_clock_source_enable+0x22>
     c3c:	40000800 	.word	0x40000800
     c40:	000009f1 	.word	0x000009f1
     c44:	40000844 	.word	0x40000844

00000c48 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c48:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     c4a:	221e      	movs	r2, #30
{
     c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     c4e:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c50:	4e48      	ldr	r6, [pc, #288]	; (d74 <system_clock_init+0x12c>)
     c52:	00db      	lsls	r3, r3, #3
     c54:	4948      	ldr	r1, [pc, #288]	; (d78 <system_clock_init+0x130>)
     c56:	60b3      	str	r3, [r6, #8]
     c58:	684b      	ldr	r3, [r1, #4]
{
     c5a:	b08d      	sub	sp, #52	; 0x34
     c5c:	4393      	bics	r3, r2
     c5e:	3a1c      	subs	r2, #28
     c60:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     c62:	ac07      	add	r4, sp, #28
     c64:	604b      	str	r3, [r1, #4]
     c66:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     c68:	b2e8      	uxtb	r0, r5
     c6a:	0021      	movs	r1, r4
     c6c:	4b43      	ldr	r3, [pc, #268]	; (d7c <system_clock_init+0x134>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     c6e:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     c70:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     c72:	2d18      	cmp	r5, #24
     c74:	d1f8      	bne.n	c68 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     c76:	4f42      	ldr	r7, [pc, #264]	; (d80 <system_clock_init+0x138>)
	SYSCTRL->OSC32K.bit.CALIB =
     c78:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     c7a:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
     c7c:	4941      	ldr	r1, [pc, #260]	; (d84 <system_clock_init+0x13c>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     c7e:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     c80:	0e5b      	lsrs	r3, r3, #25
     c82:	400a      	ands	r2, r1
     c84:	041b      	lsls	r3, r3, #16
     c86:	4313      	orrs	r3, r2
     c88:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
     c8a:	2301      	movs	r3, #1
	config->run_in_standby      = false;
     c8c:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
     c8e:	a802      	add	r0, sp, #8
     c90:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     c92:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
     c94:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     c96:	3306      	adds	r3, #6
     c98:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     c9a:	4b3b      	ldr	r3, [pc, #236]	; (d88 <system_clock_init+0x140>)
	config->run_in_standby      = false;
     c9c:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
     c9e:	7145      	strb	r5, [r0, #5]
     ca0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     ca2:	4b3a      	ldr	r3, [pc, #232]	; (d8c <system_clock_init+0x144>)
     ca4:	2004      	movs	r0, #4
     ca6:	4798      	blx	r3
	config->fine_value      = 0xff / 4; /* Midpoint */
     ca8:	233f      	movs	r3, #63	; 0x3f
     caa:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     cac:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     cae:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     cb0:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     cb2:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     cb4:	71e5      	strb	r5, [r4, #7]
     cb6:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
     cb8:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     cba:	683b      	ldr	r3, [r7, #0]
     cbc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     cbe:	2b3f      	cmp	r3, #63	; 0x3f
     cc0:	d100      	bne.n	cc4 <system_clock_init+0x7c>
		coarse = 0x1f;
     cc2:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
     cc4:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     cc6:	23b7      	movs	r3, #183	; 0xb7
     cc8:	00db      	lsls	r3, r3, #3
     cca:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     ccc:	2307      	movs	r3, #7
     cce:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     cd0:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
     cd2:	2500      	movs	r5, #0
	config->on_demand       = true;
     cd4:	2701      	movs	r7, #1
     cd6:	81e3      	strh	r3, [r4, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     cd8:	0020      	movs	r0, r4
     cda:	4b2d      	ldr	r3, [pc, #180]	; (d90 <system_clock_init+0x148>)
     cdc:	4798      	blx	r3
	config->run_in_standby  = false;
     cde:	a801      	add	r0, sp, #4

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ce0:	4b2c      	ldr	r3, [pc, #176]	; (d94 <system_clock_init+0x14c>)
     ce2:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     ce4:	7087      	strb	r7, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ce6:	7005      	strb	r5, [r0, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
     ce8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     cea:	4b28      	ldr	r3, [pc, #160]	; (d8c <system_clock_init+0x144>)
     cec:	2006      	movs	r0, #6
     cee:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     cf0:	4b29      	ldr	r3, [pc, #164]	; (d98 <system_clock_init+0x150>)
     cf2:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     cf4:	2304      	movs	r3, #4
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     cf6:	ac04      	add	r4, sp, #16
     cf8:	0021      	movs	r1, r4
     cfa:	7023      	strb	r3, [r4, #0]
     cfc:	0038      	movs	r0, r7
     cfe:	4b27      	ldr	r3, [pc, #156]	; (d9c <system_clock_init+0x154>)
     d00:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     d02:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     d04:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     d06:	7265      	strb	r5, [r4, #9]
     d08:	4798      	blx	r3
     d0a:	0038      	movs	r0, r7
     d0c:	4b24      	ldr	r3, [pc, #144]	; (da0 <system_clock_init+0x158>)
     d0e:	4798      	blx	r3
     d10:	2307      	movs	r3, #7
     d12:	0021      	movs	r1, r4
     d14:	7023      	strb	r3, [r4, #0]
     d16:	2003      	movs	r0, #3
     d18:	4b20      	ldr	r3, [pc, #128]	; (d9c <system_clock_init+0x154>)
	config->division_factor    = 1;
     d1a:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     d1c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     d1e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     d20:	7265      	strb	r5, [r4, #9]
     d22:	4798      	blx	r3
     d24:	2003      	movs	r0, #3
     d26:	4b1e      	ldr	r3, [pc, #120]	; (da0 <system_clock_init+0x158>)
     d28:	4798      	blx	r3
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     d2a:	0021      	movs	r1, r4
     d2c:	0028      	movs	r0, r5
     d2e:	4b13      	ldr	r3, [pc, #76]	; (d7c <system_clock_init+0x134>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     d30:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     d32:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     d34:	0028      	movs	r0, r5
     d36:	4b1b      	ldr	r3, [pc, #108]	; (da4 <system_clock_init+0x15c>)
     d38:	4798      	blx	r3
     d3a:	4b1b      	ldr	r3, [pc, #108]	; (da8 <system_clock_init+0x160>)
     d3c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     d3e:	22d0      	movs	r2, #208	; 0xd0
     d40:	68f3      	ldr	r3, [r6, #12]
     d42:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     d44:	2bd0      	cmp	r3, #208	; 0xd0
     d46:	d1fb      	bne.n	d40 <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
     d48:	2500      	movs	r5, #0
     d4a:	4b18      	ldr	r3, [pc, #96]	; (dac <system_clock_init+0x164>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d4c:	0021      	movs	r1, r4
     d4e:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     d50:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     d52:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     d54:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
     d56:	2301      	movs	r3, #1
     d58:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d5a:	3305      	adds	r3, #5
     d5c:	7023      	strb	r3, [r4, #0]
     d5e:	0028      	movs	r0, r5
     d60:	4b0e      	ldr	r3, [pc, #56]	; (d9c <system_clock_init+0x154>)
	config->high_when_disabled = false;
     d62:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     d64:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     d66:	7265      	strb	r5, [r4, #9]
     d68:	4798      	blx	r3
     d6a:	0028      	movs	r0, r5
     d6c:	4b0c      	ldr	r3, [pc, #48]	; (da0 <system_clock_init+0x158>)
     d6e:	4798      	blx	r3
#endif
}
     d70:	b00d      	add	sp, #52	; 0x34
     d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d74:	40000800 	.word	0x40000800
     d78:	41004000 	.word	0x41004000
     d7c:	00000fd1 	.word	0x00000fd1
     d80:	00806024 	.word	0x00806024
     d84:	ff80ffff 	.word	0xff80ffff
     d88:	00000af5 	.word	0x00000af5
     d8c:	00000be1 	.word	0x00000be1
     d90:	00000b65 	.word	0x00000b65
     d94:	00000ab9 	.word	0x00000ab9
     d98:	00000dbd 	.word	0x00000dbd
     d9c:	00000ddd 	.word	0x00000ddd
     da0:	00000e81 	.word	0x00000e81
     da4:	00000f49 	.word	0x00000f49
     da8:	000009f1 	.word	0x000009f1
     dac:	40000400 	.word	0x40000400

00000db0 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     db0:	4b01      	ldr	r3, [pc, #4]	; (db8 <system_gclk_is_syncing+0x8>)
     db2:	7858      	ldrb	r0, [r3, #1]
     db4:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
     db6:	4770      	bx	lr
     db8:	40000c00 	.word	0x40000c00

00000dbc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     dbc:	2308      	movs	r3, #8
     dbe:	4a05      	ldr	r2, [pc, #20]	; (dd4 <system_gclk_init+0x18>)
     dc0:	6991      	ldr	r1, [r2, #24]
     dc2:	430b      	orrs	r3, r1
     dc4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     dc6:	2301      	movs	r3, #1
     dc8:	4a03      	ldr	r2, [pc, #12]	; (dd8 <system_gclk_init+0x1c>)
     dca:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     dcc:	7811      	ldrb	r1, [r2, #0]
     dce:	4219      	tst	r1, r3
     dd0:	d1fc      	bne.n	dcc <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     dd2:	4770      	bx	lr
     dd4:	40000400 	.word	0x40000400
     dd8:	40000c00 	.word	0x40000c00

00000ddc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     dde:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     de0:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     de2:	0224      	lsls	r4, r4, #8
{
     de4:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     de6:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     de8:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
     dea:	2b00      	cmp	r3, #0
     dec:	d002      	beq.n	df4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	02db      	lsls	r3, r3, #11
     df2:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     df4:	7a4b      	ldrb	r3, [r1, #9]
     df6:	2b00      	cmp	r3, #0
     df8:	d002      	beq.n	e00 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     dfa:	2380      	movs	r3, #128	; 0x80
     dfc:	031b      	lsls	r3, r3, #12
     dfe:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     e00:	684b      	ldr	r3, [r1, #4]
     e02:	2b01      	cmp	r3, #1
     e04:	d912      	bls.n	e2c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     e06:	1e5d      	subs	r5, r3, #1
     e08:	401d      	ands	r5, r3
     e0a:	2202      	movs	r2, #2
     e0c:	2d00      	cmp	r5, #0
     e0e:	d006      	beq.n	e1e <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e10:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e12:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
     e14:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e16:	029b      	lsls	r3, r3, #10
     e18:	e007      	b.n	e2a <system_gclk_gen_set_config+0x4e>
				div2_count++;
     e1a:	3501      	adds	r5, #1
						mask <<= 1) {
     e1c:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     e1e:	429a      	cmp	r2, r3
     e20:	d3fb      	bcc.n	e1a <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e22:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     e24:	022d      	lsls	r5, r5, #8
     e26:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e28:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e2a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     e2c:	7a0b      	ldrb	r3, [r1, #8]
     e2e:	2b00      	cmp	r3, #0
     e30:	d002      	beq.n	e38 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     e32:	2380      	movs	r3, #128	; 0x80
     e34:	039b      	lsls	r3, r3, #14
     e36:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
     e38:	4f0c      	ldr	r7, [pc, #48]	; (e6c <system_gclk_gen_set_config+0x90>)
     e3a:	47b8      	blx	r7
     e3c:	2800      	cmp	r0, #0
     e3e:	d1fb      	bne.n	e38 <system_gclk_gen_set_config+0x5c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e40:	4b0b      	ldr	r3, [pc, #44]	; (e70 <system_gclk_gen_set_config+0x94>)
     e42:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e44:	4b0b      	ldr	r3, [pc, #44]	; (e74 <system_gclk_gen_set_config+0x98>)
     e46:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e48:	47b8      	blx	r7
     e4a:	2800      	cmp	r0, #0
     e4c:	d1fc      	bne.n	e48 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e4e:	4b0a      	ldr	r3, [pc, #40]	; (e78 <system_gclk_gen_set_config+0x9c>)
     e50:	609d      	str	r5, [r3, #8]
     e52:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
     e54:	47b8      	blx	r7
     e56:	2800      	cmp	r0, #0
     e58:	d1fc      	bne.n	e54 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e5a:	2280      	movs	r2, #128	; 0x80
     e5c:	686b      	ldr	r3, [r5, #4]
     e5e:	0252      	lsls	r2, r2, #9
     e60:	4013      	ands	r3, r2
     e62:	431c      	orrs	r4, r3
     e64:	606c      	str	r4, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e66:	4b05      	ldr	r3, [pc, #20]	; (e7c <system_gclk_gen_set_config+0xa0>)
     e68:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e6c:	00000db1 	.word	0x00000db1
     e70:	000000ed 	.word	0x000000ed
     e74:	40000c08 	.word	0x40000c08
     e78:	40000c00 	.word	0x40000c00
     e7c:	00000121 	.word	0x00000121

00000e80 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e80:	b570      	push	{r4, r5, r6, lr}
     e82:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
     e84:	4c09      	ldr	r4, [pc, #36]	; (eac <system_gclk_gen_enable+0x2c>)
     e86:	47a0      	blx	r4
     e88:	2800      	cmp	r0, #0
     e8a:	d1fb      	bne.n	e84 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
     e8c:	4b08      	ldr	r3, [pc, #32]	; (eb0 <system_gclk_gen_enable+0x30>)
     e8e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e90:	4b08      	ldr	r3, [pc, #32]	; (eb4 <system_gclk_gen_enable+0x34>)
     e92:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
     e94:	47a0      	blx	r4
     e96:	2800      	cmp	r0, #0
     e98:	d1fc      	bne.n	e94 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e9a:	2380      	movs	r3, #128	; 0x80
     e9c:	4a06      	ldr	r2, [pc, #24]	; (eb8 <system_gclk_gen_enable+0x38>)
     e9e:	025b      	lsls	r3, r3, #9
     ea0:	6851      	ldr	r1, [r2, #4]
     ea2:	430b      	orrs	r3, r1
     ea4:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     ea6:	4b05      	ldr	r3, [pc, #20]	; (ebc <system_gclk_gen_enable+0x3c>)
     ea8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     eaa:	bd70      	pop	{r4, r5, r6, pc}
     eac:	00000db1 	.word	0x00000db1
     eb0:	000000ed 	.word	0x000000ed
     eb4:	40000c04 	.word	0x40000c04
     eb8:	40000c00 	.word	0x40000c00
     ebc:	00000121 	.word	0x00000121

00000ec0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     ec2:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
     ec4:	4e18      	ldr	r6, [pc, #96]	; (f28 <system_gclk_gen_get_hz+0x68>)
     ec6:	47b0      	blx	r6
     ec8:	2800      	cmp	r0, #0
     eca:	d1fb      	bne.n	ec4 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
     ecc:	4b17      	ldr	r3, [pc, #92]	; (f2c <system_gclk_gen_get_hz+0x6c>)
     ece:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ed0:	4b17      	ldr	r3, [pc, #92]	; (f30 <system_gclk_gen_get_hz+0x70>)
     ed2:	701f      	strb	r7, [r3, #0]
     ed4:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
     ed6:	47b0      	blx	r6
     ed8:	2800      	cmp	r0, #0
     eda:	d1fc      	bne.n	ed6 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     edc:	4d15      	ldr	r5, [pc, #84]	; (f34 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ede:	4b16      	ldr	r3, [pc, #88]	; (f38 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     ee0:	6868      	ldr	r0, [r5, #4]
     ee2:	04c0      	lsls	r0, r0, #19
     ee4:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ee6:	4798      	blx	r3
     ee8:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     eea:	9b01      	ldr	r3, [sp, #4]
     eec:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     eee:	686b      	ldr	r3, [r5, #4]
     ef0:	02db      	lsls	r3, r3, #11
     ef2:	0fdb      	lsrs	r3, r3, #31
     ef4:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ef6:	4b11      	ldr	r3, [pc, #68]	; (f3c <system_gclk_gen_get_hz+0x7c>)
     ef8:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
     efa:	47b0      	blx	r6
     efc:	2800      	cmp	r0, #0
     efe:	d1fc      	bne.n	efa <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f00:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
     f02:	4b0f      	ldr	r3, [pc, #60]	; (f40 <system_gclk_gen_get_hz+0x80>)
     f04:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     f06:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f08:	022d      	lsls	r5, r5, #8
     f0a:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
     f0c:	2b00      	cmp	r3, #0
     f0e:	d108      	bne.n	f22 <system_gclk_gen_get_hz+0x62>
     f10:	2d01      	cmp	r5, #1
     f12:	d904      	bls.n	f1e <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
     f14:	0020      	movs	r0, r4
     f16:	0029      	movs	r1, r5
     f18:	4b0a      	ldr	r3, [pc, #40]	; (f44 <system_gclk_gen_get_hz+0x84>)
     f1a:	4798      	blx	r3
     f1c:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
     f1e:	0020      	movs	r0, r4
     f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
     f22:	3501      	adds	r5, #1
     f24:	40ec      	lsrs	r4, r5
	return gen_input_hz;
     f26:	e7fa      	b.n	f1e <system_gclk_gen_get_hz+0x5e>
     f28:	00000db1 	.word	0x00000db1
     f2c:	000000ed 	.word	0x000000ed
     f30:	40000c04 	.word	0x40000c04
     f34:	40000c00 	.word	0x40000c00
     f38:	00000a29 	.word	0x00000a29
     f3c:	40000c08 	.word	0x40000c08
     f40:	00000121 	.word	0x00000121
     f44:	00001c45 	.word	0x00001c45

00000f48 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f48:	b510      	push	{r4, lr}
     f4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <system_gclk_chan_enable+0x20>)
     f4e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f50:	4b06      	ldr	r3, [pc, #24]	; (f6c <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f52:	4a07      	ldr	r2, [pc, #28]	; (f70 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f54:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f56:	2380      	movs	r3, #128	; 0x80
     f58:	8851      	ldrh	r1, [r2, #2]
     f5a:	01db      	lsls	r3, r3, #7
     f5c:	430b      	orrs	r3, r1
     f5e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     f60:	4b04      	ldr	r3, [pc, #16]	; (f74 <system_gclk_chan_enable+0x2c>)
     f62:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f64:	bd10      	pop	{r4, pc}
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	000000ed 	.word	0x000000ed
     f6c:	40000c02 	.word	0x40000c02
     f70:	40000c00 	.word	0x40000c00
     f74:	00000121 	.word	0x00000121

00000f78 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f78:	b510      	push	{r4, lr}
     f7a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f7c:	4b0e      	ldr	r3, [pc, #56]	; (fb8 <system_gclk_chan_disable+0x40>)
     f7e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f80:	4b0e      	ldr	r3, [pc, #56]	; (fbc <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
     f82:	4a0f      	ldr	r2, [pc, #60]	; (fc0 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f84:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f86:	4b0f      	ldr	r3, [pc, #60]	; (fc4 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f88:	4c0f      	ldr	r4, [pc, #60]	; (fc8 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f8a:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
     f8c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f8e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
     f90:	4011      	ands	r1, r2
     f92:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f94:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f96:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f98:	4021      	ands	r1, r4
     f9a:	8059      	strh	r1, [r3, #2]
     f9c:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f9e:	2280      	movs	r2, #128	; 0x80
     fa0:	01d2      	lsls	r2, r2, #7
     fa2:	885c      	ldrh	r4, [r3, #2]
     fa4:	4214      	tst	r4, r2
     fa6:	d1fc      	bne.n	fa2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     fa8:	885a      	ldrh	r2, [r3, #2]
     faa:	0200      	lsls	r0, r0, #8
     fac:	400a      	ands	r2, r1
     fae:	4302      	orrs	r2, r0
     fb0:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
     fb2:	4b06      	ldr	r3, [pc, #24]	; (fcc <system_gclk_chan_disable+0x54>)
     fb4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fb6:	bd10      	pop	{r4, pc}
     fb8:	000000ed 	.word	0x000000ed
     fbc:	40000c02 	.word	0x40000c02
     fc0:	fffff0ff 	.word	0xfffff0ff
     fc4:	40000c00 	.word	0x40000c00
     fc8:	ffffbfff 	.word	0xffffbfff
     fcc:	00000121 	.word	0x00000121

00000fd0 <system_gclk_chan_set_config>:
{
     fd0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     fd2:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
     fd4:	4b03      	ldr	r3, [pc, #12]	; (fe4 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     fd6:	0224      	lsls	r4, r4, #8
     fd8:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     fda:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     fdc:	4b02      	ldr	r3, [pc, #8]	; (fe8 <system_gclk_chan_set_config+0x18>)
     fde:	b2a4      	uxth	r4, r4
     fe0:	805c      	strh	r4, [r3, #2]
}
     fe2:	bd10      	pop	{r4, pc}
     fe4:	00000f79 	.word	0x00000f79
     fe8:	40000c00 	.word	0x40000c00

00000fec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     fec:	b510      	push	{r4, lr}
     fee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ff0:	4b06      	ldr	r3, [pc, #24]	; (100c <system_gclk_chan_get_hz+0x20>)
     ff2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     ff4:	4b06      	ldr	r3, [pc, #24]	; (1010 <system_gclk_chan_get_hz+0x24>)
     ff6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     ff8:	4b06      	ldr	r3, [pc, #24]	; (1014 <system_gclk_chan_get_hz+0x28>)
     ffa:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
     ffc:	4b06      	ldr	r3, [pc, #24]	; (1018 <system_gclk_chan_get_hz+0x2c>)
     ffe:	0524      	lsls	r4, r4, #20
    1000:	0f24      	lsrs	r4, r4, #28
    1002:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1004:	0020      	movs	r0, r4
    1006:	4b05      	ldr	r3, [pc, #20]	; (101c <system_gclk_chan_get_hz+0x30>)
    1008:	4798      	blx	r3
}
    100a:	bd10      	pop	{r4, pc}
    100c:	000000ed 	.word	0x000000ed
    1010:	40000c02 	.word	0x40000c02
    1014:	40000c00 	.word	0x40000c00
    1018:	00000121 	.word	0x00000121
    101c:	00000ec1 	.word	0x00000ec1

00001020 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1020:	78d3      	ldrb	r3, [r2, #3]
{
    1022:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1024:	2b00      	cmp	r3, #0
    1026:	d135      	bne.n	1094 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1028:	7814      	ldrb	r4, [r2, #0]
    102a:	2c80      	cmp	r4, #128	; 0x80
    102c:	d003      	beq.n	1036 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    102e:	2380      	movs	r3, #128	; 0x80
    1030:	0624      	lsls	r4, r4, #24
    1032:	025b      	lsls	r3, r3, #9
    1034:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1036:	2502      	movs	r5, #2
    1038:	7854      	ldrb	r4, [r2, #1]
    103a:	43ac      	bics	r4, r5
    103c:	d106      	bne.n	104c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    103e:	7894      	ldrb	r4, [r2, #2]
    1040:	2c00      	cmp	r4, #0
    1042:	d124      	bne.n	108e <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1044:	2480      	movs	r4, #128	; 0x80
    1046:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1048:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    104a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    104c:	7854      	ldrb	r4, [r2, #1]
    104e:	3c01      	subs	r4, #1
    1050:	2c01      	cmp	r4, #1
    1052:	d801      	bhi.n	1058 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1054:	4c12      	ldr	r4, [pc, #72]	; (10a0 <_system_pinmux_config+0x80>)
    1056:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1058:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    105a:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    105c:	05e4      	lsls	r4, r4, #23
    105e:	432c      	orrs	r4, r5
    1060:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1062:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1064:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1066:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1068:	0624      	lsls	r4, r4, #24
    106a:	432c      	orrs	r4, r5
    106c:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    106e:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1070:	78d4      	ldrb	r4, [r2, #3]
    1072:	2c00      	cmp	r4, #0
    1074:	d10a      	bne.n	108c <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1076:	035b      	lsls	r3, r3, #13
    1078:	d503      	bpl.n	1082 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    107a:	7893      	ldrb	r3, [r2, #2]
    107c:	2b01      	cmp	r3, #1
    107e:	d10c      	bne.n	109a <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1080:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1082:	7853      	ldrb	r3, [r2, #1]
    1084:	3b01      	subs	r3, #1
    1086:	2b01      	cmp	r3, #1
    1088:	d800      	bhi.n	108c <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    108a:	6081      	str	r1, [r0, #8]
		}
	}
}
    108c:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    108e:	24c0      	movs	r4, #192	; 0xc0
    1090:	02e4      	lsls	r4, r4, #11
    1092:	e7d9      	b.n	1048 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1094:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1096:	2300      	movs	r3, #0
    1098:	e7de      	b.n	1058 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    109a:	6141      	str	r1, [r0, #20]
    109c:	e7f1      	b.n	1082 <_system_pinmux_config+0x62>
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	fffbffff 	.word	0xfffbffff

000010a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    10a4:	b510      	push	{r4, lr}
    10a6:	0003      	movs	r3, r0
    10a8:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    10aa:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10ac:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10ae:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    10b0:	4281      	cmp	r1, r0
    10b2:	d102      	bne.n	10ba <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    10b4:	4904      	ldr	r1, [pc, #16]	; (10c8 <system_pinmux_pin_set_config+0x24>)
    10b6:	01e0      	lsls	r0, r4, #7
    10b8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    10ba:	211f      	movs	r1, #31
    10bc:	400b      	ands	r3, r1
    10be:	391e      	subs	r1, #30
    10c0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    10c2:	4b02      	ldr	r3, [pc, #8]	; (10cc <system_pinmux_pin_set_config+0x28>)
    10c4:	4798      	blx	r3
}
    10c6:	bd10      	pop	{r4, pc}
    10c8:	41004400 	.word	0x41004400
    10cc:	00001021 	.word	0x00001021

000010d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10d0:	4770      	bx	lr
	...

000010d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10d4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10d6:	4b05      	ldr	r3, [pc, #20]	; (10ec <system_init+0x18>)
    10d8:	4798      	blx	r3
	/* Initialize board hardware */
	system_board_init();
    10da:	4b05      	ldr	r3, [pc, #20]	; (10f0 <system_init+0x1c>)
    10dc:	4798      	blx	r3
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <system_init+0x20>)
    10e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10e2:	4b05      	ldr	r3, [pc, #20]	; (10f8 <system_init+0x24>)
    10e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <system_init+0x28>)
    10e8:	4798      	blx	r3
}
    10ea:	bd10      	pop	{r4, pc}
    10ec:	00000c49 	.word	0x00000c49
    10f0:	00000151 	.word	0x00000151
    10f4:	000010d1 	.word	0x000010d1
    10f8:	000010d1 	.word	0x000010d1
    10fc:	000010d1 	.word	0x000010d1

00001100 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1102:	2500      	movs	r5, #0
	struct tcc_module *module =
    1104:	4b0b      	ldr	r3, [pc, #44]	; (1134 <_tcc_interrupt_handler+0x34>)
    1106:	0080      	lsls	r0, r0, #2
    1108:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    110a:	6823      	ldr	r3, [r4, #0]
    110c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    110e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1110:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1112:	4013      	ands	r3, r2
    1114:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1116:	4b08      	ldr	r3, [pc, #32]	; (1138 <_tcc_interrupt_handler+0x38>)
    1118:	58ef      	ldr	r7, [r5, r3]
    111a:	4237      	tst	r7, r6
    111c:	d005      	beq.n	112a <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    111e:	1963      	adds	r3, r4, r5
    1120:	685b      	ldr	r3, [r3, #4]
    1122:	0020      	movs	r0, r4
    1124:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1126:	6823      	ldr	r3, [r4, #0]
    1128:	62df      	str	r7, [r3, #44]	; 0x2c
    112a:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    112c:	2d30      	cmp	r5, #48	; 0x30
    112e:	d1f2      	bne.n	1116 <_tcc_interrupt_handler+0x16>
		}
	}
}
    1130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20000094 	.word	0x20000094
    1138:	00003688 	.word	0x00003688

0000113c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    113c:	b510      	push	{r4, lr}
    113e:	2000      	movs	r0, #0
    1140:	4b01      	ldr	r3, [pc, #4]	; (1148 <TCC0_Handler+0xc>)
    1142:	4798      	blx	r3
    1144:	bd10      	pop	{r4, pc}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	00001101 	.word	0x00001101

0000114c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    114c:	1c93      	adds	r3, r2, #2
    114e:	009b      	lsls	r3, r3, #2
    1150:	5019      	str	r1, [r3, r0]
    1152:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1154:	2a02      	cmp	r2, #2
    1156:	d104      	bne.n	1162 <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1158:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    115a:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    115c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    115e:	2000      	movs	r0, #0
    1160:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1162:	2a03      	cmp	r2, #3
    1164:	d101      	bne.n	116a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1166:	321d      	adds	r2, #29
    1168:	e7f7      	b.n	115a <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    116a:	2101      	movs	r1, #1
    116c:	4091      	lsls	r1, r2
    116e:	430b      	orrs	r3, r1
    1170:	e7f4      	b.n	115c <tc_register_callback+0x10>
	...

00001174 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1174:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1176:	2601      	movs	r6, #1
	struct tc_module *module
    1178:	4b14      	ldr	r3, [pc, #80]	; (11cc <_tc_interrupt_handler+0x58>)
    117a:	0080      	lsls	r0, r0, #2
    117c:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    117e:	6823      	ldr	r3, [r4, #0]
    1180:	7e22      	ldrb	r2, [r4, #24]
    1182:	7e65      	ldrb	r5, [r4, #25]
    1184:	7b9b      	ldrb	r3, [r3, #14]
    1186:	4015      	ands	r5, r2
    1188:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    118a:	4235      	tst	r5, r6
    118c:	d004      	beq.n	1198 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    118e:	68a3      	ldr	r3, [r4, #8]
    1190:	0020      	movs	r0, r4
    1192:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1194:	6823      	ldr	r3, [r4, #0]
    1196:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1198:	2602      	movs	r6, #2
    119a:	4235      	tst	r5, r6
    119c:	d004      	beq.n	11a8 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    119e:	68e3      	ldr	r3, [r4, #12]
    11a0:	0020      	movs	r0, r4
    11a2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    11a4:	6823      	ldr	r3, [r4, #0]
    11a6:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    11a8:	2610      	movs	r6, #16
    11aa:	4235      	tst	r5, r6
    11ac:	d004      	beq.n	11b8 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    11ae:	6923      	ldr	r3, [r4, #16]
    11b0:	0020      	movs	r0, r4
    11b2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    11b4:	6823      	ldr	r3, [r4, #0]
    11b6:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    11b8:	2620      	movs	r6, #32
    11ba:	4235      	tst	r5, r6
    11bc:	d004      	beq.n	11c8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    11be:	6963      	ldr	r3, [r4, #20]
    11c0:	0020      	movs	r0, r4
    11c2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    11c4:	6823      	ldr	r3, [r4, #0]
    11c6:	739e      	strb	r6, [r3, #14]
	}
}
    11c8:	bd70      	pop	{r4, r5, r6, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	20000098 	.word	0x20000098

000011d0 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    11d0:	b510      	push	{r4, lr}
    11d2:	2000      	movs	r0, #0
    11d4:	4b01      	ldr	r3, [pc, #4]	; (11dc <TC1_Handler+0xc>)
    11d6:	4798      	blx	r3
    11d8:	bd10      	pop	{r4, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00001175 	.word	0x00001175

000011e0 <TC2_Handler>:
    11e0:	b510      	push	{r4, lr}
    11e2:	2001      	movs	r0, #1
    11e4:	4b01      	ldr	r3, [pc, #4]	; (11ec <TC2_Handler+0xc>)
    11e6:	4798      	blx	r3
    11e8:	bd10      	pop	{r4, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	00001175 	.word	0x00001175

000011f0 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    11f0:	4b06      	ldr	r3, [pc, #24]	; (120c <_tc_get_inst_index+0x1c>)
    11f2:	4298      	cmp	r0, r3
    11f4:	d007      	beq.n	1206 <_tc_get_inst_index+0x16>
    11f6:	4a06      	ldr	r2, [pc, #24]	; (1210 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    11f8:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    11fa:	4290      	cmp	r0, r2
    11fc:	d101      	bne.n	1202 <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    11fe:	3301      	adds	r3, #1
			return i;
    1200:	b2db      	uxtb	r3, r3
}
    1202:	0018      	movs	r0, r3
    1204:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1206:	2300      	movs	r3, #0
    1208:	e7fa      	b.n	1200 <_tc_get_inst_index+0x10>
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	42001800 	.word	0x42001800
    1210:	42001c00 	.word	0x42001c00

00001214 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1214:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1216:	4b87      	ldr	r3, [pc, #540]	; (1434 <tc_init+0x220>)
{
    1218:	0005      	movs	r5, r0
    121a:	b085      	sub	sp, #20
	uint8_t instance = _tc_get_inst_index(hw);
    121c:	0008      	movs	r0, r1
{
    121e:	0014      	movs	r4, r2
    1220:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    1222:	4798      	blx	r3

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1224:	466a      	mov	r2, sp
    1226:	2312      	movs	r3, #18
    1228:	7113      	strb	r3, [r2, #4]
    122a:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    122c:	332e      	adds	r3, #46	; 0x2e
    122e:	8113      	strh	r3, [r2, #8]
    1230:	3340      	adds	r3, #64	; 0x40
    1232:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1234:	2300      	movs	r3, #0
    1236:	60ab      	str	r3, [r5, #8]
    1238:	60eb      	str	r3, [r5, #12]
    123a:	612b      	str	r3, [r5, #16]
    123c:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    123e:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    1240:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1242:	4b7d      	ldr	r3, [pc, #500]	; (1438 <tc_init+0x224>)
    1244:	0082      	lsls	r2, r0, #2
    1246:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1248:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    124a:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    124c:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    124e:	2b08      	cmp	r3, #8
    1250:	d103      	bne.n	125a <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1252:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1254:	07fa      	lsls	r2, r7, #31
    1256:	d500      	bpl.n	125a <tc_init+0x46>
    1258:	e0d5      	b.n	1406 <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    125a:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    125c:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    125e:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1260:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1262:	4213      	tst	r3, r2
    1264:	d000      	beq.n	1268 <tc_init+0x54>
    1266:	e0ce      	b.n	1406 <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1268:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    126a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    126c:	06db      	lsls	r3, r3, #27
    126e:	d500      	bpl.n	1272 <tc_init+0x5e>
    1270:	e0c9      	b.n	1406 <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1272:	2102      	movs	r1, #2
    1274:	8833      	ldrh	r3, [r6, #0]
    1276:	400b      	ands	r3, r1
    1278:	d000      	beq.n	127c <tc_init+0x68>
    127a:	e0c4      	b.n	1406 <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    127c:	7c21      	ldrb	r1, [r4, #16]
    127e:	2900      	cmp	r1, #0
    1280:	d008      	beq.n	1294 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1282:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1284:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1286:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1288:	7d20      	ldrb	r0, [r4, #20]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    128a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(
    128c:	4b6b      	ldr	r3, [pc, #428]	; (143c <tc_init+0x228>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    128e:	708a      	strb	r2, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1290:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    1292:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1294:	7f23      	ldrb	r3, [r4, #28]
    1296:	2b00      	cmp	r3, #0
    1298:	d00e      	beq.n	12b8 <tc_init+0xa4>
	config->powersave    = false;
    129a:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    129c:	2301      	movs	r3, #1
    129e:	a903      	add	r1, sp, #12
	config->powersave    = false;
    12a0:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    12a2:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12a4:	708b      	strb	r3, [r1, #2]
    12a6:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    12a8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    12aa:	331f      	adds	r3, #31
    12ac:	18e3      	adds	r3, r4, r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    12ae:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    12b0:	7818      	ldrb	r0, [r3, #0]
    12b2:	4b62      	ldr	r3, [pc, #392]	; (143c <tc_init+0x228>)
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    12b4:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    12b6:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    12b8:	007a      	lsls	r2, r7, #1
    12ba:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    12bc:	4668      	mov	r0, sp
    12be:	2208      	movs	r2, #8
    12c0:	1880      	adds	r0, r0, r2
    12c2:	4662      	mov	r2, ip
			PM->APBCMASK.reg |= mask;
    12c4:	4b5e      	ldr	r3, [pc, #376]	; (1440 <tc_init+0x22c>)
    12c6:	5a82      	ldrh	r2, [r0, r2]
    12c8:	6a19      	ldr	r1, [r3, #32]
    12ca:	430a      	orrs	r2, r1
    12cc:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    12ce:	78a2      	ldrb	r2, [r4, #2]
    12d0:	2a08      	cmp	r2, #8
    12d2:	d10a      	bne.n	12ea <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    12d4:	1c79      	adds	r1, r7, #1
    12d6:	004a      	lsls	r2, r1, #1
    12d8:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    12da:	2108      	movs	r1, #8
    12dc:	466a      	mov	r2, sp
    12de:	1852      	adds	r2, r2, r1
    12e0:	4661      	mov	r1, ip
    12e2:	6a18      	ldr	r0, [r3, #32]
    12e4:	5a52      	ldrh	r2, [r2, r1]
    12e6:	4302      	orrs	r2, r0
    12e8:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    12ea:	466a      	mov	r2, sp
    12ec:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    12ee:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    12f0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    12f2:	466b      	mov	r3, sp
    12f4:	3304      	adds	r3, #4
    12f6:	5ddf      	ldrb	r7, [r3, r7]
    12f8:	4b52      	ldr	r3, [pc, #328]	; (1444 <tc_init+0x230>)
    12fa:	0038      	movs	r0, r7
    12fc:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    12fe:	4b52      	ldr	r3, [pc, #328]	; (1448 <tc_init+0x234>)
    1300:	0038      	movs	r0, r7
    1302:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1304:	8923      	ldrh	r3, [r4, #8]
    1306:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    1308:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    130a:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    130c:	78a3      	ldrb	r3, [r4, #2]
    130e:	430b      	orrs	r3, r1
	ctrla_tmp =
    1310:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1312:	7862      	ldrb	r2, [r4, #1]
    1314:	2a00      	cmp	r2, #0
    1316:	d002      	beq.n	131e <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1318:	2280      	movs	r2, #128	; 0x80
    131a:	0112      	lsls	r2, r2, #4
    131c:	4313      	orrs	r3, r2
    131e:	6829      	ldr	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1320:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1322:	b252      	sxtb	r2, r2
    1324:	2a00      	cmp	r2, #0
    1326:	dbfb      	blt.n	1320 <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1328:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    132a:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    132c:	1e5a      	subs	r2, r3, #1
    132e:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    1330:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1332:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    1334:	2a00      	cmp	r2, #0
    1336:	d001      	beq.n	133c <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1338:	2201      	movs	r2, #1
    133a:	4313      	orrs	r3, r2
    133c:	6829      	ldr	r1, [r5, #0]
    133e:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1340:	b252      	sxtb	r2, r2
    1342:	2a00      	cmp	r2, #0
    1344:	dbfb      	blt.n	133e <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1346:	22ff      	movs	r2, #255	; 0xff
    1348:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    134a:	2b00      	cmp	r3, #0
    134c:	d005      	beq.n	135a <tc_init+0x146>
    134e:	6829      	ldr	r1, [r5, #0]
    1350:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1352:	b252      	sxtb	r2, r2
    1354:	2a00      	cmp	r2, #0
    1356:	dbfb      	blt.n	1350 <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1358:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    135a:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    135c:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    135e:	2b00      	cmp	r3, #0
    1360:	d001      	beq.n	1366 <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1362:	2310      	movs	r3, #16
    1364:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    1366:	7b23      	ldrb	r3, [r4, #12]
    1368:	2b00      	cmp	r3, #0
    136a:	d001      	beq.n	1370 <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    136c:	2320      	movs	r3, #32
    136e:	431a      	orrs	r2, r3
    1370:	6829      	ldr	r1, [r5, #0]
    1372:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1374:	b25b      	sxtb	r3, r3
    1376:	2b00      	cmp	r3, #0
    1378:	dbfb      	blt.n	1372 <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    137a:	71b2      	strb	r2, [r6, #6]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1380:	b252      	sxtb	r2, r2
    1382:	2a00      	cmp	r2, #0
    1384:	dbfb      	blt.n	137e <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1386:	792a      	ldrb	r2, [r5, #4]
    1388:	2a04      	cmp	r2, #4
    138a:	d019      	beq.n	13c0 <tc_init+0x1ac>
    138c:	2a08      	cmp	r2, #8
    138e:	d03c      	beq.n	140a <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1390:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1392:	2a00      	cmp	r2, #0
    1394:	d137      	bne.n	1406 <tc_init+0x1f2>
    1396:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1398:	b252      	sxtb	r2, r2
    139a:	2a00      	cmp	r2, #0
    139c:	dbfb      	blt.n	1396 <tc_init+0x182>
				= config->counter_16_bit.value;
    139e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    13a0:	8233      	strh	r3, [r6, #16]
    13a2:	682a      	ldr	r2, [r5, #0]
    13a4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    13a6:	b25b      	sxtb	r3, r3
    13a8:	2b00      	cmp	r3, #0
    13aa:	dbfb      	blt.n	13a4 <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    13ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    13ae:	8333      	strh	r3, [r6, #24]
    13b0:	682a      	ldr	r2, [r5, #0]
    13b2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    13b4:	b25b      	sxtb	r3, r3
    13b6:	2b00      	cmp	r3, #0
    13b8:	dbfb      	blt.n	13b2 <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    13ba:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    13bc:	8373      	strh	r3, [r6, #26]
    13be:	e021      	b.n	1404 <tc_init+0x1f0>
    13c0:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    13c2:	b252      	sxtb	r2, r2
    13c4:	2a00      	cmp	r2, #0
    13c6:	dbfb      	blt.n	13c0 <tc_init+0x1ac>
					config->counter_8_bit.value;
    13c8:	0023      	movs	r3, r4
    13ca:	3328      	adds	r3, #40	; 0x28
    13cc:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    13ce:	7433      	strb	r3, [r6, #16]
    13d0:	682a      	ldr	r2, [r5, #0]
    13d2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    13d4:	b25b      	sxtb	r3, r3
    13d6:	2b00      	cmp	r3, #0
    13d8:	dbfb      	blt.n	13d2 <tc_init+0x1be>
					config->counter_8_bit.period;
    13da:	0023      	movs	r3, r4
    13dc:	3329      	adds	r3, #41	; 0x29
    13de:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    13e0:	7533      	strb	r3, [r6, #20]
    13e2:	682a      	ldr	r2, [r5, #0]
    13e4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    13e6:	b25b      	sxtb	r3, r3
    13e8:	2b00      	cmp	r3, #0
    13ea:	dbfb      	blt.n	13e4 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    13ec:	0023      	movs	r3, r4
    13ee:	332a      	adds	r3, #42	; 0x2a
    13f0:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    13f2:	7633      	strb	r3, [r6, #24]
    13f4:	682a      	ldr	r2, [r5, #0]
    13f6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    13f8:	b25b      	sxtb	r3, r3
    13fa:	2b00      	cmp	r3, #0
    13fc:	dbfb      	blt.n	13f6 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    13fe:	342b      	adds	r4, #43	; 0x2b
    1400:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    1402:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    1404:	2000      	movs	r0, #0
}
    1406:	b005      	add	sp, #20
    1408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    140a:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    140c:	b252      	sxtb	r2, r2
    140e:	2a00      	cmp	r2, #0
    1410:	dbfb      	blt.n	140a <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1414:	6133      	str	r3, [r6, #16]
    1416:	682a      	ldr	r2, [r5, #0]
    1418:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    141a:	b25b      	sxtb	r3, r3
    141c:	2b00      	cmp	r3, #0
    141e:	dbfb      	blt.n	1418 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1420:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1422:	61b3      	str	r3, [r6, #24]
    1424:	682a      	ldr	r2, [r5, #0]
    1426:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1428:	b25b      	sxtb	r3, r3
    142a:	2b00      	cmp	r3, #0
    142c:	dbfb      	blt.n	1426 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    142e:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1430:	61f3      	str	r3, [r6, #28]
    1432:	e7e7      	b.n	1404 <tc_init+0x1f0>
    1434:	000011f1 	.word	0x000011f1
    1438:	20000098 	.word	0x20000098
    143c:	000010a5 	.word	0x000010a5
    1440:	40000400 	.word	0x40000400
    1444:	00000fd1 	.word	0x00000fd1
    1448:	00000f49 	.word	0x00000f49

0000144c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    144c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    144e:	6804      	ldr	r4, [r0, #0]
    1450:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1452:	b25b      	sxtb	r3, r3
    1454:	2b00      	cmp	r3, #0
    1456:	dbfb      	blt.n	1450 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1458:	7903      	ldrb	r3, [r0, #4]
    145a:	2b04      	cmp	r3, #4
    145c:	d00c      	beq.n	1478 <tc_set_compare_value+0x2c>
    145e:	2b08      	cmp	r3, #8
    1460:	d012      	beq.n	1488 <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1462:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1464:	2b00      	cmp	r3, #0
    1466:	d10e      	bne.n	1486 <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    1468:	2017      	movs	r0, #23
			if (channel_index <
    146a:	2901      	cmp	r1, #1
    146c:	d80b      	bhi.n	1486 <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    146e:	310c      	adds	r1, #12
						(uint16_t)compare;
    1470:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1472:	0049      	lsls	r1, r1, #1
    1474:	530a      	strh	r2, [r1, r4]
    1476:	e005      	b.n	1484 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    1478:	2017      	movs	r0, #23
			if (channel_index <
    147a:	2901      	cmp	r1, #1
    147c:	d803      	bhi.n	1486 <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    147e:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1480:	1861      	adds	r1, r4, r1
    1482:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1484:	2000      	movs	r0, #0
}
    1486:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1488:	2017      	movs	r0, #23
			if (channel_index <
    148a:	2901      	cmp	r1, #1
    148c:	d8fb      	bhi.n	1486 <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    148e:	3106      	adds	r1, #6
    1490:	0089      	lsls	r1, r1, #2
    1492:	510a      	str	r2, [r1, r4]
    1494:	e7f6      	b.n	1484 <tc_set_compare_value+0x38>

00001496 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1496:	e7fe      	b.n	1496 <Dummy_Handler>

00001498 <Reset_Handler>:
        if (pSrc != pDest) {
    1498:	4821      	ldr	r0, [pc, #132]	; (1520 <Reset_Handler+0x88>)
    149a:	4922      	ldr	r1, [pc, #136]	; (1524 <Reset_Handler+0x8c>)
{
    149c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    149e:	4288      	cmp	r0, r1
    14a0:	d004      	beq.n	14ac <Reset_Handler+0x14>
    14a2:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    14a4:	4c20      	ldr	r4, [pc, #128]	; (1528 <Reset_Handler+0x90>)
    14a6:	18ca      	adds	r2, r1, r3
    14a8:	42a2      	cmp	r2, r4
    14aa:	d332      	bcc.n	1512 <Reset_Handler+0x7a>
                *pDest++ = 0;
    14ac:	2100      	movs	r1, #0
    14ae:	4b1f      	ldr	r3, [pc, #124]	; (152c <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    14b0:	4a1f      	ldr	r2, [pc, #124]	; (1530 <Reset_Handler+0x98>)
    14b2:	4293      	cmp	r3, r2
    14b4:	d331      	bcc.n	151a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    14b6:	21ff      	movs	r1, #255	; 0xff
    14b8:	4b1e      	ldr	r3, [pc, #120]	; (1534 <Reset_Handler+0x9c>)
    14ba:	4a1f      	ldr	r2, [pc, #124]	; (1538 <Reset_Handler+0xa0>)
    14bc:	438b      	bics	r3, r1
    14be:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14c0:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14c2:	250c      	movs	r5, #12
    14c4:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    14c6:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14c8:	4b1c      	ldr	r3, [pc, #112]	; (153c <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14ca:	481d      	ldr	r0, [pc, #116]	; (1540 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14cc:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14ce:	78c3      	ldrb	r3, [r0, #3]
    14d0:	39fc      	subs	r1, #252	; 0xfc
    14d2:	438b      	bics	r3, r1
    14d4:	4313      	orrs	r3, r2
    14d6:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14d8:	78c3      	ldrb	r3, [r0, #3]
    14da:	43ab      	bics	r3, r5
    14dc:	4323      	orrs	r3, r4
    14de:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    14e0:	4b18      	ldr	r3, [pc, #96]	; (1544 <Reset_Handler+0xac>)
    14e2:	7b98      	ldrb	r0, [r3, #14]
    14e4:	43b0      	bics	r0, r6
    14e6:	0006      	movs	r6, r0
    14e8:	2020      	movs	r0, #32
    14ea:	4330      	orrs	r0, r6
    14ec:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    14ee:	7b98      	ldrb	r0, [r3, #14]
    14f0:	43a8      	bics	r0, r5
    14f2:	4304      	orrs	r4, r0
    14f4:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    14f6:	7b98      	ldrb	r0, [r3, #14]
    14f8:	4388      	bics	r0, r1
    14fa:	4302      	orrs	r2, r0
    14fc:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    14fe:	2380      	movs	r3, #128	; 0x80
    1500:	4a11      	ldr	r2, [pc, #68]	; (1548 <Reset_Handler+0xb0>)
    1502:	6851      	ldr	r1, [r2, #4]
    1504:	430b      	orrs	r3, r1
    1506:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1508:	4b10      	ldr	r3, [pc, #64]	; (154c <Reset_Handler+0xb4>)
    150a:	4798      	blx	r3
        main();
    150c:	4b10      	ldr	r3, [pc, #64]	; (1550 <Reset_Handler+0xb8>)
    150e:	4798      	blx	r3
    1510:	e7fe      	b.n	1510 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1512:	58c5      	ldr	r5, [r0, r3]
    1514:	3304      	adds	r3, #4
    1516:	6015      	str	r5, [r2, #0]
    1518:	e7c5      	b.n	14a6 <Reset_Handler+0xe>
                *pDest++ = 0;
    151a:	c302      	stmia	r3!, {r1}
    151c:	e7c9      	b.n	14b2 <Reset_Handler+0x1a>
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	0000375c 	.word	0x0000375c
    1524:	20000000 	.word	0x20000000
    1528:	2000001c 	.word	0x2000001c
    152c:	2000001c 	.word	0x2000001c
    1530:	20000100 	.word	0x20000100
    1534:	00000000 	.word	0x00000000
    1538:	e000ed00 	.word	0xe000ed00
    153c:	410070fc 	.word	0x410070fc
    1540:	41005000 	.word	0x41005000
    1544:	41004800 	.word	0x41004800
    1548:	41004000 	.word	0x41004000
    154c:	00003625 	.word	0x00003625
    1550:	00001c15 	.word	0x00001c15

00001554 <set_color_green>:
static uint8_t buffer_set_charge_routine_trise_tfall[DATA_LENGTH_PRIMARY]	=	{0x05,0xF0};
static uint8_t buffer_set_low_routine_flash_period[DATA_LENGTH_PRIMARY]		=	{0x05,0x21};
static uint8_t buffer_set_low_routine_trise_tfall[DATA_LENGTH_PRIMARY]		=	{0x02,0x2D};


void set_color_green(void){
    1554:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1556:	ac01      	add	r4, sp, #4
    1558:	4b08      	ldr	r3, [pc, #32]	; (157c <set_color_green+0x28>)
    155a:	220c      	movs	r2, #12
    155c:	2100      	movs	r1, #0
    155e:	0020      	movs	r0, r4
    1560:	4798      	blx	r3
    1562:	2330      	movs	r3, #48	; 0x30
    1564:	8023      	strh	r3, [r4, #0]
    1566:	3b2e      	subs	r3, #46	; 0x2e
    1568:	8063      	strh	r3, [r4, #2]
    156a:	4b05      	ldr	r3, [pc, #20]	; (1580 <set_color_green+0x2c>)
    156c:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_green,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    156e:	0021      	movs	r1, r4
    1570:	4804      	ldr	r0, [pc, #16]	; (1584 <set_color_green+0x30>)
    1572:	4b05      	ldr	r3, [pc, #20]	; (1588 <set_color_green+0x34>)
    1574:	4798      	blx	r3
    1576:	2800      	cmp	r0, #0
    1578:	d1f9      	bne.n	156e <set_color_green+0x1a>
	{
	}
	
}
    157a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    157c:	0000366d 	.word	0x0000366d
    1580:	20000007 	.word	0x20000007
    1584:	200000a0 	.word	0x200000a0
    1588:	000005c5 	.word	0x000005c5

0000158c <set_color_red>:

void set_color_red(void){
    158c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_master_packet packet = {
    158e:	ac01      	add	r4, sp, #4
    1590:	4b08      	ldr	r3, [pc, #32]	; (15b4 <set_color_red+0x28>)
    1592:	220c      	movs	r2, #12
    1594:	2100      	movs	r1, #0
    1596:	0020      	movs	r0, r4
    1598:	4798      	blx	r3
    159a:	2330      	movs	r3, #48	; 0x30
    159c:	8023      	strh	r3, [r4, #0]
    159e:	3b2e      	subs	r3, #46	; 0x2e
    15a0:	8063      	strh	r3, [r4, #2]
    15a2:	4b05      	ldr	r3, [pc, #20]	; (15b8 <set_color_red+0x2c>)
    15a4:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_red,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    15a6:	0021      	movs	r1, r4
    15a8:	4804      	ldr	r0, [pc, #16]	; (15bc <set_color_red+0x30>)
    15aa:	4b05      	ldr	r3, [pc, #20]	; (15c0 <set_color_red+0x34>)
    15ac:	4798      	blx	r3
    15ae:	2800      	cmp	r0, #0
    15b0:	d1f9      	bne.n	15a6 <set_color_red+0x1a>
	{
	}
}
    15b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    15b4:	0000366d 	.word	0x0000366d
    15b8:	2000000b 	.word	0x2000000b
    15bc:	200000a0 	.word	0x200000a0
    15c0:	000005c5 	.word	0x000005c5

000015c4 <set_color_blue>:

void set_color_blue(void){
    15c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_master_packet packet = {
    15c6:	ac01      	add	r4, sp, #4
    15c8:	4b08      	ldr	r3, [pc, #32]	; (15ec <set_color_blue+0x28>)
    15ca:	220c      	movs	r2, #12
    15cc:	2100      	movs	r1, #0
    15ce:	0020      	movs	r0, r4
    15d0:	4798      	blx	r3
    15d2:	2330      	movs	r3, #48	; 0x30
    15d4:	8023      	strh	r3, [r4, #0]
    15d6:	3b2e      	subs	r3, #46	; 0x2e
    15d8:	8063      	strh	r3, [r4, #2]
    15da:	4b05      	ldr	r3, [pc, #20]	; (15f0 <set_color_blue+0x2c>)
    15dc:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_blue,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    15de:	0021      	movs	r1, r4
    15e0:	4804      	ldr	r0, [pc, #16]	; (15f4 <set_color_blue+0x30>)
    15e2:	4b05      	ldr	r3, [pc, #20]	; (15f8 <set_color_blue+0x34>)
    15e4:	4798      	blx	r3
    15e6:	2800      	cmp	r0, #0
    15e8:	d1f9      	bne.n	15de <set_color_blue+0x1a>
	{
	}
}
    15ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    15ec:	0000366d 	.word	0x0000366d
    15f0:	20000005 	.word	0x20000005
    15f4:	200000a0 	.word	0x200000a0
    15f8:	000005c5 	.word	0x000005c5

000015fc <set_battery_charge_routine>:
	{
	}
}


void set_battery_charge_routine(void){
    15fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fe:	b08b      	sub	sp, #44	; 0x2c
	// Enable PWM GREEN
	struct i2c_master_packet packet = {
    1600:	ad01      	add	r5, sp, #4
    1602:	4e19      	ldr	r6, [pc, #100]	; (1668 <set_battery_charge_routine+0x6c>)
    1604:	220c      	movs	r2, #12
    1606:	2100      	movs	r1, #0
    1608:	0028      	movs	r0, r5
    160a:	47b0      	blx	r6
    160c:	2302      	movs	r3, #2
    160e:	2730      	movs	r7, #48	; 0x30
    1610:	806b      	strh	r3, [r5, #2]
    1612:	4b16      	ldr	r3, [pc, #88]	; (166c <set_battery_charge_routine+0x70>)
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_green_PWM,
	};
	
	// Enable Ramp (flash)
	struct i2c_master_packet set_ramp = {
    1614:	220c      	movs	r2, #12
    1616:	2100      	movs	r1, #0
    1618:	a804      	add	r0, sp, #16
	struct i2c_master_packet packet = {
    161a:	606b      	str	r3, [r5, #4]
    161c:	802f      	strh	r7, [r5, #0]
	struct i2c_master_packet set_ramp = {
    161e:	47b0      	blx	r6
    1620:	466b      	mov	r3, sp
    1622:	2202      	movs	r2, #2
		.data = buffer_set_charge_routine_flash_period,
	};
	

	// Enable Pulse
	struct i2c_master_packet set_trise_tfall = {
    1624:	ac07      	add	r4, sp, #28
	struct i2c_master_packet set_ramp = {
    1626:	825a      	strh	r2, [r3, #18]
    1628:	821f      	strh	r7, [r3, #16]
    162a:	4b11      	ldr	r3, [pc, #68]	; (1670 <set_battery_charge_routine+0x74>)
	struct i2c_master_packet set_trise_tfall = {
    162c:	220c      	movs	r2, #12
    162e:	2100      	movs	r1, #0
    1630:	0020      	movs	r0, r4
	struct i2c_master_packet set_ramp = {
    1632:	9305      	str	r3, [sp, #20]
	struct i2c_master_packet set_trise_tfall = {
    1634:	47b0      	blx	r6
    1636:	2302      	movs	r3, #2
    1638:	8063      	strh	r3, [r4, #2]
    163a:	4b0e      	ldr	r3, [pc, #56]	; (1674 <set_battery_charge_routine+0x78>)
    163c:	8027      	strh	r7, [r4, #0]
    163e:	6063      	str	r3, [r4, #4]
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_charge_routine_trise_tfall,
	};


	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1640:	4f0d      	ldr	r7, [pc, #52]	; (1678 <set_battery_charge_routine+0x7c>)
    1642:	0029      	movs	r1, r5
    1644:	0038      	movs	r0, r7
    1646:	4e0d      	ldr	r6, [pc, #52]	; (167c <set_battery_charge_routine+0x80>)
    1648:	47b0      	blx	r6
    164a:	2800      	cmp	r0, #0
    164c:	d1f8      	bne.n	1640 <set_battery_charge_routine+0x44>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_ramp)) != STATUS_OK)
    164e:	a904      	add	r1, sp, #16
    1650:	0038      	movs	r0, r7
    1652:	47b0      	blx	r6
    1654:	2800      	cmp	r0, #0
    1656:	d1fa      	bne.n	164e <set_battery_charge_routine+0x52>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_trise_tfall)) != STATUS_OK)
    1658:	0021      	movs	r1, r4
    165a:	0038      	movs	r0, r7
    165c:	47b0      	blx	r6
    165e:	2800      	cmp	r0, #0
    1660:	d1fa      	bne.n	1658 <set_battery_charge_routine+0x5c>
	{
	}
	
}
    1662:	b00b      	add	sp, #44	; 0x2c
    1664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	0000366d 	.word	0x0000366d
    166c:	20000009 	.word	0x20000009
    1670:	20000001 	.word	0x20000001
    1674:	20000003 	.word	0x20000003
    1678:	200000a0 	.word	0x200000a0
    167c:	000005c5 	.word	0x000005c5

00001680 <set_battery_low_routine>:


void set_battery_low_routine(void){
    1680:	b5f0      	push	{r4, r5, r6, r7, lr}
    1682:	b08b      	sub	sp, #44	; 0x2c
	
	// Enable PWM RED
	
	struct i2c_master_packet packet = {
    1684:	ad01      	add	r5, sp, #4
    1686:	4e19      	ldr	r6, [pc, #100]	; (16ec <set_battery_low_routine+0x6c>)
    1688:	220c      	movs	r2, #12
    168a:	2100      	movs	r1, #0
    168c:	0028      	movs	r0, r5
    168e:	47b0      	blx	r6
    1690:	2302      	movs	r3, #2
    1692:	2730      	movs	r7, #48	; 0x30
    1694:	806b      	strh	r3, [r5, #2]
    1696:	4b16      	ldr	r3, [pc, #88]	; (16f0 <set_battery_low_routine+0x70>)
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_red_PWM,
	};
	
	// Enable Ramp (flash)
	struct i2c_master_packet set_ramp = {
    1698:	220c      	movs	r2, #12
    169a:	2100      	movs	r1, #0
    169c:	a804      	add	r0, sp, #16
	struct i2c_master_packet packet = {
    169e:	606b      	str	r3, [r5, #4]
    16a0:	802f      	strh	r7, [r5, #0]
	struct i2c_master_packet set_ramp = {
    16a2:	47b0      	blx	r6
    16a4:	466b      	mov	r3, sp
    16a6:	2202      	movs	r2, #2
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_low_routine_flash_period,
	};
	
	// Enable Pulse
	struct i2c_master_packet set_trise_tfall = {
    16a8:	ac07      	add	r4, sp, #28
	struct i2c_master_packet set_ramp = {
    16aa:	825a      	strh	r2, [r3, #18]
    16ac:	821f      	strh	r7, [r3, #16]
    16ae:	4b11      	ldr	r3, [pc, #68]	; (16f4 <set_battery_low_routine+0x74>)
	struct i2c_master_packet set_trise_tfall = {
    16b0:	220c      	movs	r2, #12
    16b2:	2100      	movs	r1, #0
    16b4:	0020      	movs	r0, r4
	struct i2c_master_packet set_ramp = {
    16b6:	9305      	str	r3, [sp, #20]
	struct i2c_master_packet set_trise_tfall = {
    16b8:	47b0      	blx	r6
    16ba:	2302      	movs	r3, #2
    16bc:	8063      	strh	r3, [r4, #2]
    16be:	4b0e      	ldr	r3, [pc, #56]	; (16f8 <set_battery_low_routine+0x78>)
    16c0:	8027      	strh	r7, [r4, #0]
    16c2:	6063      	str	r3, [r4, #4]
		.data = buffer_set_low_routine_trise_tfall,
	};



	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    16c4:	4f0d      	ldr	r7, [pc, #52]	; (16fc <set_battery_low_routine+0x7c>)
    16c6:	0029      	movs	r1, r5
    16c8:	0038      	movs	r0, r7
    16ca:	4e0d      	ldr	r6, [pc, #52]	; (1700 <set_battery_low_routine+0x80>)
    16cc:	47b0      	blx	r6
    16ce:	2800      	cmp	r0, #0
    16d0:	d1f8      	bne.n	16c4 <set_battery_low_routine+0x44>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_ramp)) != STATUS_OK)
    16d2:	a904      	add	r1, sp, #16
    16d4:	0038      	movs	r0, r7
    16d6:	47b0      	blx	r6
    16d8:	2800      	cmp	r0, #0
    16da:	d1fa      	bne.n	16d2 <set_battery_low_routine+0x52>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_trise_tfall)) != STATUS_OK)
    16dc:	0021      	movs	r1, r4
    16de:	0038      	movs	r0, r7
    16e0:	47b0      	blx	r6
    16e2:	2800      	cmp	r0, #0
    16e4:	d1fa      	bne.n	16dc <set_battery_low_routine+0x5c>
	{
	}
	
}
    16e6:	b00b      	add	sp, #44	; 0x2c
    16e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	0000366d 	.word	0x0000366d
    16f0:	2000000d 	.word	0x2000000d
    16f4:	2000000f 	.word	0x2000000f
    16f8:	20000011 	.word	0x20000011
    16fc:	200000a0 	.word	0x200000a0
    1700:	000005c5 	.word	0x000005c5

00001704 <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1704:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1706:	2364      	movs	r3, #100	; 0x64



void i2c_master_setup(void){
    1708:	b570      	push	{r4, r5, r6, lr}
    170a:	b08e      	sub	sp, #56	; 0x38
    170c:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    170e:	0389      	lsls	r1, r1, #14
    1710:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1712:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1714:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1716:	4b1e      	ldr	r3, [pc, #120]	; (1790 <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    1718:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    171a:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    171c:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    171e:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1720:	310a      	adds	r1, #10
    1722:	4469      	add	r1, sp
    1724:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1726:	a90c      	add	r1, sp, #48	; 0x30
    1728:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    172a:	2131      	movs	r1, #49	; 0x31
    172c:	4469      	add	r1, sp
    172e:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    1730:	2132      	movs	r1, #50	; 0x32
    1732:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1734:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    1736:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1738:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    173a:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    173c:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    173e:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    1740:	700b      	strb	r3, [r1, #0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1742:	33d7      	adds	r3, #215	; 0xd7
    1744:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1746:	4e13      	ldr	r6, [pc, #76]	; (1794 <i2c_master_setup+0x90>)
	config_i2c_master.buffer_timeout = 10000;
    1748:	4b13      	ldr	r3, [pc, #76]	; (1798 <i2c_master_setup+0x94>)
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    174a:	4914      	ldr	r1, [pc, #80]	; (179c <i2c_master_setup+0x98>)
	config_i2c_master.buffer_timeout = 10000;
    174c:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    174e:	0030      	movs	r0, r6
    1750:	4b13      	ldr	r3, [pc, #76]	; (17a0 <i2c_master_setup+0x9c>)
    1752:	4798      	blx	r3
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1754:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1756:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1758:	69ec      	ldr	r4, [r5, #28]
    175a:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    175c:	d1fc      	bne.n	1758 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    175e:	2302      	movs	r3, #2
    1760:	682a      	ldr	r2, [r5, #0]
    1762:	4313      	orrs	r3, r2
    1764:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1766:	6830      	ldr	r0, [r6, #0]
    1768:	4b0e      	ldr	r3, [pc, #56]	; (17a4 <i2c_master_setup+0xa0>)
    176a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    176c:	231f      	movs	r3, #31
    176e:	4018      	ands	r0, r3
    1770:	3b1e      	subs	r3, #30
    1772:	4083      	lsls	r3, r0
    1774:	4a0c      	ldr	r2, [pc, #48]	; (17a8 <i2c_master_setup+0xa4>)
    1776:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1778:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    177a:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    177c:	8b69      	ldrh	r1, [r5, #26]
    177e:	4211      	tst	r1, r2
    1780:	d103      	bne.n	178a <i2c_master_setup+0x86>
		timeout_counter++;
    1782:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1784:	4284      	cmp	r4, r0
    1786:	d3f9      	bcc.n	177c <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1788:	836a      	strh	r2, [r5, #26]
	i2c_master_enable(&i2c_master_instance);
	
}
    178a:	b00e      	add	sp, #56	; 0x38
    178c:	bd70      	pop	{r4, r5, r6, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	00000d48 	.word	0x00000d48
    1794:	200000a0 	.word	0x200000a0
    1798:	00002710 	.word	0x00002710
    179c:	42001000 	.word	0x42001000
    17a0:	000001b1 	.word	0x000001b1
    17a4:	00000995 	.word	0x00000995
    17a8:	e000e100 	.word	0xe000e100

000017ac <sys_tc_callback>:
	static int tick_count_50ms;
	static int tick_count_100ms;
	static int tick_count_200ms;
	
	
	tick_count_1ms++;
    17ac:	4916      	ldr	r1, [pc, #88]	; (1808 <sys_tc_callback+0x5c>)
    17ae:	680b      	ldr	r3, [r1, #0]
    17b0:	1c5a      	adds	r2, r3, #1
    17b2:	600a      	str	r2, [r1, #0]
    17b4:	4b15      	ldr	r3, [pc, #84]	; (180c <sys_tc_callback+0x60>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
    17b6:	2a09      	cmp	r2, #9
    17b8:	dd07      	ble.n	17ca <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
    17ba:	681a      	ldr	r2, [r3, #0]
    17bc:	3201      	adds	r2, #1
    17be:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
    17c0:	2200      	movs	r2, #0
    17c2:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
    17c4:	2101      	movs	r1, #1
    17c6:	4a12      	ldr	r2, [pc, #72]	; (1810 <sys_tc_callback+0x64>)
    17c8:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
    17ca:	6819      	ldr	r1, [r3, #0]
    17cc:	4a11      	ldr	r2, [pc, #68]	; (1814 <sys_tc_callback+0x68>)
    17ce:	2904      	cmp	r1, #4
    17d0:	dd04      	ble.n	17dc <sys_tc_callback+0x30>
	{
		tick_count_50ms++;
    17d2:	6811      	ldr	r1, [r2, #0]
    17d4:	3101      	adds	r1, #1
    17d6:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
    17d8:	2100      	movs	r1, #0
    17da:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
    17dc:	6811      	ldr	r1, [r2, #0]
    17de:	4b0e      	ldr	r3, [pc, #56]	; (1818 <sys_tc_callback+0x6c>)
    17e0:	2901      	cmp	r1, #1
    17e2:	dd04      	ble.n	17ee <sys_tc_callback+0x42>
	{
		tick_count_100ms++;
    17e4:	6819      	ldr	r1, [r3, #0]
    17e6:	3101      	adds	r1, #1
    17e8:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
    17ea:	2100      	movs	r1, #0
    17ec:	6011      	str	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
    17ee:	681a      	ldr	r2, [r3, #0]
    17f0:	2a01      	cmp	r2, #1
    17f2:	dd08      	ble.n	1806 <sys_tc_callback+0x5a>
	{
		tick_count_200ms++;
    17f4:	4909      	ldr	r1, [pc, #36]	; (181c <sys_tc_callback+0x70>)
    17f6:	680a      	ldr	r2, [r1, #0]
    17f8:	3201      	adds	r2, #1
    17fa:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
    17fc:	2200      	movs	r2, #0
    17fe:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
    1800:	4b07      	ldr	r3, [pc, #28]	; (1820 <sys_tc_callback+0x74>)
    1802:	3201      	adds	r2, #1
    1804:	701a      	strb	r2, [r3, #0]
	}
	
	
	
	
}
    1806:	4770      	bx	lr
    1808:	20000078 	.word	0x20000078
    180c:	20000074 	.word	0x20000074
    1810:	20000069 	.word	0x20000069
    1814:	20000080 	.word	0x20000080
    1818:	20000070 	.word	0x20000070
    181c:	2000007c 	.word	0x2000007c
    1820:	2000006a 	.word	0x2000006a

00001824 <configure_port_pins>:
{
    1824:	b573      	push	{r0, r1, r4, r5, r6, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
    1826:	2300      	movs	r3, #0
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1828:	2602      	movs	r6, #2
    182a:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    182c:	4d06      	ldr	r5, [pc, #24]	; (1848 <configure_port_pins+0x24>)
    182e:	0021      	movs	r1, r4
    1830:	201b      	movs	r0, #27
    1832:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    1834:	70a3      	strb	r3, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1836:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1838:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    183a:	2301      	movs	r3, #1
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    183c:	0021      	movs	r1, r4
    183e:	2006      	movs	r0, #6
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;						// START AT PULL DOWN.
    1840:	7066      	strb	r6, [r4, #1]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1842:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1844:	47a8      	blx	r5
}
    1846:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    1848:	00000185 	.word	0x00000185

0000184c <configure_system_tc>:
{
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);
	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    184c:	21a0      	movs	r1, #160	; 0xa0
{
    184e:	b510      	push	{r4, lr}
    1850:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1852:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1854:	00c9      	lsls	r1, r1, #3
    1856:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
    1858:	212d      	movs	r1, #45	; 0x2d
    185a:	2300      	movs	r3, #0
    185c:	206f      	movs	r0, #111	; 0x6f
    185e:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    1860:	8513      	strh	r3, [r2, #40]	; 0x28
    1862:	7008      	strb	r0, [r1, #0]
	
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1864:	2101      	movs	r1, #1
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA15E_TC1_WO1; // PA15 FOR TESTING
	
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1866:	4c12      	ldr	r4, [pc, #72]	; (18b0 <configure_system_tc+0x64>)
	config->clock_source               = GCLK_GENERATOR_0;
    1868:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    186a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    186c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    186e:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1870:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1872:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1874:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1876:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1878:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    187a:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    187c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    187e:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1880:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1882:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1884:	7411      	strb	r1, [r2, #16]
	config_tc.counter_size = TC_COUNTER_SIZE;
    1886:	3304      	adds	r3, #4
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING
    1888:	310e      	adds	r1, #14
	config_tc.counter_size = TC_COUNTER_SIZE;
    188a:	7093      	strb	r3, [r2, #2]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING
    188c:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA15E_TC1_WO1; // PA15 FOR TESTING
    188e:	6193      	str	r3, [r2, #24]
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1890:	4908      	ldr	r1, [pc, #32]	; (18b4 <configure_system_tc+0x68>)
    1892:	4b09      	ldr	r3, [pc, #36]	; (18b8 <configure_system_tc+0x6c>)
    1894:	0020      	movs	r0, r4
    1896:	4798      	blx	r3
    1898:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    189a:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    189c:	b252      	sxtb	r2, r2
    189e:	2a00      	cmp	r2, #0
    18a0:	dbfb      	blt.n	189a <configure_system_tc+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    18a2:	2202      	movs	r2, #2
    18a4:	8819      	ldrh	r1, [r3, #0]
    18a6:	430a      	orrs	r2, r1
    18a8:	801a      	strh	r2, [r3, #0]
	tc_enable (&system_timer_instance);
}
    18aa:	b00e      	add	sp, #56	; 0x38
    18ac:	bd10      	pop	{r4, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	200000c8 	.word	0x200000c8
    18b4:	42001800 	.word	0x42001800
    18b8:	00001215 	.word	0x00001215

000018bc <system_tc_callbacks>:

void system_tc_callbacks (void)
{
    18bc:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
    18be:	4c0c      	ldr	r4, [pc, #48]	; (18f0 <system_tc_callbacks+0x34>)
    18c0:	2200      	movs	r2, #0
    18c2:	490c      	ldr	r1, [pc, #48]	; (18f4 <system_tc_callbacks+0x38>)
    18c4:	0020      	movs	r0, r4
    18c6:	4b0c      	ldr	r3, [pc, #48]	; (18f8 <system_tc_callbacks+0x3c>)
    18c8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    18ca:	6820      	ldr	r0, [r4, #0]
    18cc:	4b0b      	ldr	r3, [pc, #44]	; (18fc <system_tc_callbacks+0x40>)
    18ce:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    18d0:	4b0b      	ldr	r3, [pc, #44]	; (1900 <system_tc_callbacks+0x44>)
    18d2:	5c1a      	ldrb	r2, [r3, r0]
    18d4:	231f      	movs	r3, #31
    18d6:	401a      	ands	r2, r3
    18d8:	3b1e      	subs	r3, #30
    18da:	0019      	movs	r1, r3
    18dc:	4091      	lsls	r1, r2
    18de:	4a09      	ldr	r2, [pc, #36]	; (1904 <system_tc_callbacks+0x48>)
    18e0:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    18e2:	7e62      	ldrb	r2, [r4, #25]
    18e4:	431a      	orrs	r2, r3
    18e6:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    18e8:	6822      	ldr	r2, [r4, #0]
    18ea:	7353      	strb	r3, [r2, #13]
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback (&system_timer_instance, TC_CALLBACK_OVERFLOW);
}
    18ec:	bd10      	pop	{r4, pc}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	200000c8 	.word	0x200000c8
    18f4:	000017ad 	.word	0x000017ad
    18f8:	0000114d 	.word	0x0000114d
    18fc:	000011f1 	.word	0x000011f1
    1900:	000036b8 	.word	0x000036b8
    1904:	e000e100 	.word	0xe000e100

00001908 <is_button_pressed>:
	return (port_base->IN.reg & pin_mask);
    1908:	4b12      	ldr	r3, [pc, #72]	; (1954 <is_button_pressed+0x4c>)
    190a:	4a13      	ldr	r2, [pc, #76]	; (1958 <is_button_pressed+0x50>)
    190c:	6a19      	ldr	r1, [r3, #32]
    190e:	4b13      	ldr	r3, [pc, #76]	; (195c <is_button_pressed+0x54>)


bool is_button_pressed (void)
{

	if (!port_pin_get_input_level (SW0_PIN))
    1910:	0449      	lsls	r1, r1, #17
    1912:	d416      	bmi.n	1942 <is_button_pressed+0x3a>
	{
		BUTTON_PRESS_STATUS = true;
		press_delay_count--;
    1914:	6819      	ldr	r1, [r3, #0]
    1916:	3901      	subs	r1, #1
    1918:	6019      	str	r1, [r3, #0]
		long_press_delay_count--;
    191a:	6811      	ldr	r1, [r2, #0]
    191c:	3901      	subs	r1, #1
		
	}else
	{
		BUTTON_PRESS_STATUS = false;
		press_delay_count = DELAY_DEBOUNCE_CN;
		long_press_delay_count = DELAY_PRESS_CN;
    191e:	6011      	str	r1, [r2, #0]
		
	}
	
	// long press delay logic
	if (long_press_delay_count <= 0){
    1920:	6811      	ldr	r1, [r2, #0]
    1922:	2900      	cmp	r1, #0
    1924:	dc04      	bgt.n	1930 <is_button_pressed+0x28>
		LongPressFlag = true;
    1926:	2001      	movs	r0, #1
    1928:	490d      	ldr	r1, [pc, #52]	; (1960 <is_button_pressed+0x58>)
    192a:	7008      	strb	r0, [r1, #0]
		long_press_delay_count = 0 ;
    192c:	2100      	movs	r1, #0
    192e:	6011      	str	r1, [r2, #0]
    1930:	2000      	movs	r0, #0
	}
	
	// debounce logic
	if (press_delay_count <= 0)
    1932:	6819      	ldr	r1, [r3, #0]
    1934:	4a0b      	ldr	r2, [pc, #44]	; (1964 <is_button_pressed+0x5c>)
    1936:	4281      	cmp	r1, r0
    1938:	dc08      	bgt.n	194c <is_button_pressed+0x44>
	{
		BUTTON_RELEASE_STATUS = false;
    193a:	7010      	strb	r0, [r2, #0]
		press_delay_count = 0;
    193c:	6018      	str	r0, [r3, #0]
		return true;
    193e:	3001      	adds	r0, #1
		return false;
	}
	

	
}
    1940:	4770      	bx	lr
		press_delay_count = DELAY_DEBOUNCE_CN;
    1942:	2102      	movs	r1, #2
    1944:	6019      	str	r1, [r3, #0]
		long_press_delay_count = DELAY_PRESS_CN;
    1946:	318f      	adds	r1, #143	; 0x8f
    1948:	31ff      	adds	r1, #255	; 0xff
    194a:	e7e8      	b.n	191e <is_button_pressed+0x16>
		BUTTON_RELEASE_STATUS = true;
    194c:	2301      	movs	r3, #1
    194e:	7013      	strb	r3, [r2, #0]
		return false;
    1950:	e7f6      	b.n	1940 <is_button_pressed+0x38>
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	41004400 	.word	0x41004400
    1958:	20000014 	.word	0x20000014
    195c:	20000018 	.word	0x20000018
    1960:	20000065 	.word	0x20000065
    1964:	20000064 	.word	0x20000064

00001968 <pwm_motor_cleanup>:


void pwm_motor_cleanup(void);

void pwm_motor_cleanup(void){
    1968:	b570      	push	{r4, r5, r6, lr}
	PULSATING_MOTOR_ROUTINE = false;
    196a:	2400      	movs	r4, #0
    196c:	4b0d      	ldr	r3, [pc, #52]	; (19a4 <pwm_motor_cleanup+0x3c>)
	toggle_count = 0;
	tc_set_compare_value (&pwm_generator_instance,
    196e:	4d0e      	ldr	r5, [pc, #56]	; (19a8 <pwm_motor_cleanup+0x40>)
	PULSATING_MOTOR_ROUTINE = false;
    1970:	701c      	strb	r4, [r3, #0]
	toggle_count = 0;
    1972:	4b0e      	ldr	r3, [pc, #56]	; (19ac <pwm_motor_cleanup+0x44>)
	tc_set_compare_value (&pwm_generator_instance,
    1974:	2215      	movs	r2, #21
	toggle_count = 0;
    1976:	701c      	strb	r4, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,
    1978:	0021      	movs	r1, r4
    197a:	4b0d      	ldr	r3, [pc, #52]	; (19b0 <pwm_motor_cleanup+0x48>)
    197c:	0028      	movs	r0, r5
    197e:	4798      	blx	r3
	TC_COMPARE_CAPTURE_CHANNEL_0,
	INITIAL_DUTY_CYCLE);
	PWM_RUNNING = false;
    1980:	4b0c      	ldr	r3, [pc, #48]	; (19b4 <pwm_motor_cleanup+0x4c>)
    1982:	701c      	strb	r4, [r3, #0]
    1984:	682b      	ldr	r3, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1986:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1988:	b252      	sxtb	r2, r2
    198a:	2a00      	cmp	r2, #0
    198c:	dbfb      	blt.n	1986 <pwm_motor_cleanup+0x1e>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    198e:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1990:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1992:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    1994:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1996:	881a      	ldrh	r2, [r3, #0]
    1998:	438a      	bics	r2, r1
    199a:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    199c:	2240      	movs	r2, #64	; 0x40
    199e:	4b06      	ldr	r3, [pc, #24]	; (19b8 <pwm_motor_cleanup+0x50>)
    19a0:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
    19a2:	bd70      	pop	{r4, r5, r6, pc}
    19a4:	20000067 	.word	0x20000067
    19a8:	200000e4 	.word	0x200000e4
    19ac:	20000084 	.word	0x20000084
    19b0:	0000144d 	.word	0x0000144d
    19b4:	20000068 	.word	0x20000068
    19b8:	41004400 	.word	0x41004400

000019bc <cycle_pwm_duty>:




void cycle_pwm_duty (void)
{
    19bc:	b510      	push	{r4, lr}
	if (PWM_RUNNING)
    19be:	4b15      	ldr	r3, [pc, #84]	; (1a14 <cycle_pwm_duty+0x58>)
    19c0:	781b      	ldrb	r3, [r3, #0]
    19c2:	2b00      	cmp	r3, #0
    19c4:	d00a      	beq.n	19dc <cycle_pwm_duty+0x20>
	{
		
		if (toggle_count == 2)
    19c6:	4b14      	ldr	r3, [pc, #80]	; (1a18 <cycle_pwm_duty+0x5c>)
    19c8:	781b      	ldrb	r3, [r3, #0]
    19ca:	2b02      	cmp	r3, #2
    19cc:	d107      	bne.n	19de <cycle_pwm_duty+0x22>
		{
			tc_set_compare_value (&pwm_generator_instance,
    19ce:	4b13      	ldr	r3, [pc, #76]	; (1a1c <cycle_pwm_duty+0x60>)
    19d0:	2222      	movs	r2, #34	; 0x22
    19d2:	2100      	movs	r1, #0
    19d4:	4812      	ldr	r0, [pc, #72]	; (1a20 <cycle_pwm_duty+0x64>)
    19d6:	4798      	blx	r3
			TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
			set_color_green();
    19d8:	4b12      	ldr	r3, [pc, #72]	; (1a24 <cycle_pwm_duty+0x68>)
		}
		
		else if (toggle_count > 4)
		{
			pwm_motor_cleanup();
			set_battery_low_routine();
    19da:	4798      	blx	r3
		}
	}
}
    19dc:	bd10      	pop	{r4, pc}
		else if (toggle_count == 3)
    19de:	2b03      	cmp	r3, #3
    19e0:	d106      	bne.n	19f0 <cycle_pwm_duty+0x34>
			tc_set_compare_value (&pwm_generator_instance,
    19e2:	4b0e      	ldr	r3, [pc, #56]	; (1a1c <cycle_pwm_duty+0x60>)
    19e4:	224d      	movs	r2, #77	; 0x4d
    19e6:	2100      	movs	r1, #0
    19e8:	480d      	ldr	r0, [pc, #52]	; (1a20 <cycle_pwm_duty+0x64>)
    19ea:	4798      	blx	r3
			set_color_blue();
    19ec:	4b0e      	ldr	r3, [pc, #56]	; (1a28 <cycle_pwm_duty+0x6c>)
    19ee:	e7f4      	b.n	19da <cycle_pwm_duty+0x1e>
		else if (toggle_count == 4)
    19f0:	2b04      	cmp	r3, #4
    19f2:	d109      	bne.n	1a08 <cycle_pwm_duty+0x4c>
			PULSATING_MOTOR_ROUTINE = true;
    19f4:	2201      	movs	r2, #1
    19f6:	4b0d      	ldr	r3, [pc, #52]	; (1a2c <cycle_pwm_duty+0x70>)
			tc_set_compare_value (&pwm_generator_instance,
    19f8:	2100      	movs	r1, #0
			PULSATING_MOTOR_ROUTINE = true;
    19fa:	701a      	strb	r2, [r3, #0]
			tc_set_compare_value (&pwm_generator_instance,
    19fc:	4808      	ldr	r0, [pc, #32]	; (1a20 <cycle_pwm_duty+0x64>)
    19fe:	4b07      	ldr	r3, [pc, #28]	; (1a1c <cycle_pwm_duty+0x60>)
    1a00:	324c      	adds	r2, #76	; 0x4c
    1a02:	4798      	blx	r3
			set_battery_charge_routine();
    1a04:	4b0a      	ldr	r3, [pc, #40]	; (1a30 <cycle_pwm_duty+0x74>)
    1a06:	e7e8      	b.n	19da <cycle_pwm_duty+0x1e>
		else if (toggle_count > 4)
    1a08:	2b04      	cmp	r3, #4
    1a0a:	d9e7      	bls.n	19dc <cycle_pwm_duty+0x20>
			pwm_motor_cleanup();
    1a0c:	4b09      	ldr	r3, [pc, #36]	; (1a34 <cycle_pwm_duty+0x78>)
    1a0e:	4798      	blx	r3
			set_battery_low_routine();
    1a10:	4b09      	ldr	r3, [pc, #36]	; (1a38 <cycle_pwm_duty+0x7c>)
    1a12:	e7e2      	b.n	19da <cycle_pwm_duty+0x1e>
    1a14:	20000068 	.word	0x20000068
    1a18:	20000084 	.word	0x20000084
    1a1c:	0000144d 	.word	0x0000144d
    1a20:	200000e4 	.word	0x200000e4
    1a24:	00001555 	.word	0x00001555
    1a28:	000015c5 	.word	0x000015c5
    1a2c:	20000067 	.word	0x20000067
    1a30:	000015fd 	.word	0x000015fd
    1a34:	00001969 	.word	0x00001969
    1a38:	00001681 	.word	0x00001681

00001a3c <regular_routine>:
{
    1a3c:	b510      	push	{r4, lr}
	if (is_button_pressed()){
    1a3e:	4b1b      	ldr	r3, [pc, #108]	; (1aac <regular_routine+0x70>)
    1a40:	4798      	blx	r3
    1a42:	2800      	cmp	r0, #0
    1a44:	d028      	beq.n	1a98 <regular_routine+0x5c>
		if (LongPressFlag){
    1a46:	4b1a      	ldr	r3, [pc, #104]	; (1ab0 <regular_routine+0x74>)
    1a48:	781b      	ldrb	r3, [r3, #0]
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d006      	beq.n	1a5c <regular_routine+0x20>
    1a4e:	2280      	movs	r2, #128	; 0x80
    1a50:	4b18      	ldr	r3, [pc, #96]	; (1ab4 <regular_routine+0x78>)
    1a52:	0252      	lsls	r2, r2, #9
    1a54:	615a      	str	r2, [r3, #20]
			pwm_motor_cleanup();
    1a56:	4b18      	ldr	r3, [pc, #96]	; (1ab8 <regular_routine+0x7c>)
					cycle_pwm_duty ();
    1a58:	4798      	blx	r3
    1a5a:	e01d      	b.n	1a98 <regular_routine+0x5c>
			if (!motor_status_changed)
    1a5c:	4917      	ldr	r1, [pc, #92]	; (1abc <regular_routine+0x80>)
    1a5e:	780b      	ldrb	r3, [r1, #0]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d119      	bne.n	1a98 <regular_routine+0x5c>
				toggle_count++;
    1a64:	4a16      	ldr	r2, [pc, #88]	; (1ac0 <regular_routine+0x84>)
    1a66:	7813      	ldrb	r3, [r2, #0]
    1a68:	3301      	adds	r3, #1
    1a6a:	7013      	strb	r3, [r2, #0]
				motor_status_changed = true;
    1a6c:	2201      	movs	r2, #1
				if (!PWM_RUNNING)
    1a6e:	4b15      	ldr	r3, [pc, #84]	; (1ac4 <regular_routine+0x88>)
				motor_status_changed = true;
    1a70:	700a      	strb	r2, [r1, #0]
				if (!PWM_RUNNING)
    1a72:	7819      	ldrb	r1, [r3, #0]
    1a74:	2900      	cmp	r1, #0
    1a76:	d117      	bne.n	1aa8 <regular_routine+0x6c>
					PWM_RUNNING = true;
    1a78:	701a      	strb	r2, [r3, #0]
    1a7a:	4b13      	ldr	r3, [pc, #76]	; (1ac8 <regular_routine+0x8c>)
    1a7c:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a7e:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    1a80:	b252      	sxtb	r2, r2
    1a82:	2a00      	cmp	r2, #0
    1a84:	dbfb      	blt.n	1a7e <regular_routine+0x42>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1a86:	2202      	movs	r2, #2
    1a88:	8819      	ldrh	r1, [r3, #0]
    1a8a:	430a      	orrs	r2, r1
    1a8c:	801a      	strh	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    1a8e:	2240      	movs	r2, #64	; 0x40
    1a90:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <regular_routine+0x78>)
    1a92:	619a      	str	r2, [r3, #24]
					set_color_red();
    1a94:	4b0d      	ldr	r3, [pc, #52]	; (1acc <regular_routine+0x90>)
    1a96:	4798      	blx	r3
	if (BUTTON_RELEASE_STATUS)
    1a98:	4b0d      	ldr	r3, [pc, #52]	; (1ad0 <regular_routine+0x94>)
    1a9a:	781b      	ldrb	r3, [r3, #0]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d002      	beq.n	1aa6 <regular_routine+0x6a>
		motor_status_changed = false;
    1aa0:	2200      	movs	r2, #0
    1aa2:	4b06      	ldr	r3, [pc, #24]	; (1abc <regular_routine+0x80>)
    1aa4:	701a      	strb	r2, [r3, #0]
}
    1aa6:	bd10      	pop	{r4, pc}
					cycle_pwm_duty ();
    1aa8:	4b0a      	ldr	r3, [pc, #40]	; (1ad4 <regular_routine+0x98>)
    1aaa:	e7d5      	b.n	1a58 <regular_routine+0x1c>
    1aac:	00001909 	.word	0x00001909
    1ab0:	20000065 	.word	0x20000065
    1ab4:	41004400 	.word	0x41004400
    1ab8:	00001969 	.word	0x00001969
    1abc:	2000006c 	.word	0x2000006c
    1ac0:	20000084 	.word	0x20000084
    1ac4:	20000068 	.word	0x20000068
    1ac8:	200000e4 	.word	0x200000e4
    1acc:	0000158d 	.word	0x0000158d
    1ad0:	20000064 	.word	0x20000064
    1ad4:	000019bd 	.word	0x000019bd

00001ad8 <get_vbus_state>:
	return (port_base->IN.reg & pin_mask);
    1ad8:	4b03      	ldr	r3, [pc, #12]	; (1ae8 <get_vbus_state+0x10>)


void get_vbus_state(void);

void get_vbus_state(void){
	VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
    1ada:	4a04      	ldr	r2, [pc, #16]	; (1aec <get_vbus_state+0x14>)
    1adc:	6a1b      	ldr	r3, [r3, #32]
    1ade:	011b      	lsls	r3, r3, #4
    1ae0:	0fdb      	lsrs	r3, r3, #31
    1ae2:	7013      	strb	r3, [r2, #0]
}
    1ae4:	4770      	bx	lr
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	41004400 	.word	0x41004400
    1aec:	2000006b 	.word	0x2000006b

00001af0 <toggle_nsleep>:
}


void toggle_nsleep(void);

void toggle_nsleep(void){
    1af0:	b510      	push	{r4, lr}
	static bool PULSATING_MOTOR = false;
	if (PULSATING_MOTOR_ROUTINE){
    1af2:	4b0b      	ldr	r3, [pc, #44]	; (1b20 <toggle_nsleep+0x30>)
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d00b      	beq.n	1b12 <toggle_nsleep+0x22>
    1afa:	2180      	movs	r1, #128	; 0x80
		if (PULSATING_MOTOR){
    1afc:	4a09      	ldr	r2, [pc, #36]	; (1b24 <toggle_nsleep+0x34>)
    1afe:	4b0a      	ldr	r3, [pc, #40]	; (1b28 <toggle_nsleep+0x38>)
    1b00:	7814      	ldrb	r4, [r2, #0]
    1b02:	2040      	movs	r0, #64	; 0x40
    1b04:	0249      	lsls	r1, r1, #9
    1b06:	2c00      	cmp	r4, #0
    1b08:	d004      	beq.n	1b14 <toggle_nsleep+0x24>
		port_base->OUTCLR.reg = pin_mask;
    1b0a:	6158      	str	r0, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1b0c:	6199      	str	r1, [r3, #24]
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			LED_Off(LED0_PIN);
			PULSATING_MOTOR = false;
    1b0e:	2300      	movs	r3, #0
    1b10:	7013      	strb	r3, [r2, #0]
			PULSATING_MOTOR = true;
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
			LED_On(LED0_PIN);
		}
	}
}
    1b12:	bd10      	pop	{r4, pc}
			PULSATING_MOTOR = true;
    1b14:	2401      	movs	r4, #1
    1b16:	7014      	strb	r4, [r2, #0]
    1b18:	6198      	str	r0, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    1b1a:	6159      	str	r1, [r3, #20]
}
    1b1c:	e7f9      	b.n	1b12 <toggle_nsleep+0x22>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	20000067 	.word	0x20000067
    1b24:	20000066 	.word	0x20000066
    1b28:	41004400 	.word	0x41004400

00001b2c <system_logic>:
/* LOGIC MACHINE		                                                */
/************************************************************************/

void system_logic(void);

void system_logic(void){
    1b2c:	b500      	push	{lr}
	if (!VBUS_STATE){
    1b2e:	4b1f      	ldr	r3, [pc, #124]	; (1bac <system_logic+0x80>)
void system_logic(void){
    1b30:	b08f      	sub	sp, #60	; 0x3c
	if (!VBUS_STATE){
    1b32:	781b      	ldrb	r3, [r3, #0]
    1b34:	2b00      	cmp	r3, #0
    1b36:	d126      	bne.n	1b86 <system_logic+0x5a>
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1b38:	21a0      	movs	r1, #160	; 0xa0
	config->clock_source               = GCLK_GENERATOR_0;
    1b3a:	aa01      	add	r2, sp, #4
    1b3c:	00c9      	lsls	r1, r1, #3
    1b3e:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
    1b40:	212d      	movs	r1, #45	; 0x2d
    1b42:	2055      	movs	r0, #85	; 0x55
    1b44:	4469      	add	r1, sp
	config->counter_16_bit.value                   = 0x0000;
    1b46:	8513      	strh	r3, [r2, #40]	; 0x28
    1b48:	7008      	strb	r0, [r1, #0]
	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
    1b4a:	212e      	movs	r1, #46	; 0x2e
    1b4c:	3840      	subs	r0, #64	; 0x40
    1b4e:	4469      	add	r1, sp
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1b50:	8553      	strh	r3, [r2, #42]	; 0x2a
    1b52:	7008      	strb	r0, [r1, #0]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    1b54:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
    1b56:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1b58:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1b5a:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1b5c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1b5e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1b60:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1b62:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1b64:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1b66:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1b68:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1b6a:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1b6c:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
    1b6e:	3304      	adds	r3, #4
    1b70:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    1b72:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_mux = MUX_PA10E_TC2_WO0;
    1b74:	6193      	str	r3, [r2, #24]
	config_tc.pwm_channel[0].pin_out = PIN_PA10E_TC2_WO0;
    1b76:	3936      	subs	r1, #54	; 0x36
	config_tc.pwm_channel[0].enabled = true;
    1b78:	3b03      	subs	r3, #3
	config_tc.pwm_channel[0].pin_out = PIN_PA10E_TC2_WO0;
    1b7a:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].enabled = true;
    1b7c:	7413      	strb	r3, [r2, #16]
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
    1b7e:	490c      	ldr	r1, [pc, #48]	; (1bb0 <system_logic+0x84>)
    1b80:	480c      	ldr	r0, [pc, #48]	; (1bb4 <system_logic+0x88>)
    1b82:	4b0d      	ldr	r3, [pc, #52]	; (1bb8 <system_logic+0x8c>)
    1b84:	4798      	blx	r3
	
	if (BATTERY_LOWEST){
		display_battery_state();					// Blink Red
	}
	
	if (SYS_TICK_10MS){
    1b86:	4b0d      	ldr	r3, [pc, #52]	; (1bbc <system_logic+0x90>)
    1b88:	781a      	ldrb	r2, [r3, #0]
    1b8a:	2a00      	cmp	r2, #0
    1b8c:	d003      	beq.n	1b96 <system_logic+0x6a>
		SYS_TICK_10MS = false;
    1b8e:	2200      	movs	r2, #0
    1b90:	701a      	strb	r2, [r3, #0]
		regular_routine();
    1b92:	4b0b      	ldr	r3, [pc, #44]	; (1bc0 <system_logic+0x94>)
    1b94:	4798      	blx	r3
	}
	
	if (SYS_TICK_200MS){
    1b96:	4b0b      	ldr	r3, [pc, #44]	; (1bc4 <system_logic+0x98>)
    1b98:	781a      	ldrb	r2, [r3, #0]
    1b9a:	2a00      	cmp	r2, #0
    1b9c:	d003      	beq.n	1ba6 <system_logic+0x7a>
		SYS_TICK_200MS = false;
    1b9e:	2200      	movs	r2, #0
    1ba0:	701a      	strb	r2, [r3, #0]
		toggle_nsleep();
    1ba2:	4b09      	ldr	r3, [pc, #36]	; (1bc8 <system_logic+0x9c>)
    1ba4:	4798      	blx	r3
	}


}
    1ba6:	b00f      	add	sp, #60	; 0x3c
    1ba8:	bd00      	pop	{pc}
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	2000006b 	.word	0x2000006b
    1bb0:	42001c00 	.word	0x42001c00
    1bb4:	200000e4 	.word	0x200000e4
    1bb8:	00001215 	.word	0x00001215
    1bbc:	20000069 	.word	0x20000069
    1bc0:	00001a3d 	.word	0x00001a3d
    1bc4:	2000006a 	.word	0x2000006a
    1bc8:	00001af1 	.word	0x00001af1

00001bcc <startup_sys_configs>:


void startup_sys_configs(void);


void startup_sys_configs(void){
    1bcc:	b510      	push	{r4, lr}
	system_init ();									// System Initialize
    1bce:	4b0a      	ldr	r3, [pc, #40]	; (1bf8 <startup_sys_configs+0x2c>)
    1bd0:	4798      	blx	r3
	cpu_irq_enable();
    1bd2:	2201      	movs	r2, #1
    1bd4:	4b09      	ldr	r3, [pc, #36]	; (1bfc <startup_sys_configs+0x30>)
    1bd6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1bd8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1bdc:	b662      	cpsie	i
	system_interrupt_enable_global ();				// System Interrupts
	configure_port_pins ();							// System PORTs
    1bde:	4b08      	ldr	r3, [pc, #32]	; (1c00 <startup_sys_configs+0x34>)
    1be0:	4798      	blx	r3
    1be2:	2240      	movs	r2, #64	; 0x40
    1be4:	4b07      	ldr	r3, [pc, #28]	; (1c04 <startup_sys_configs+0x38>)
    1be6:	615a      	str	r2, [r3, #20]
	startup_default_pin_state();
	configure_system_tc ();							// System Clock
    1be8:	4b07      	ldr	r3, [pc, #28]	; (1c08 <startup_sys_configs+0x3c>)
    1bea:	4798      	blx	r3
	system_tc_callbacks ();							// System Clock Callback
    1bec:	4b07      	ldr	r3, [pc, #28]	; (1c0c <startup_sys_configs+0x40>)
    1bee:	4798      	blx	r3
	i2c_master_setup();
    1bf0:	4b07      	ldr	r3, [pc, #28]	; (1c10 <startup_sys_configs+0x44>)
    1bf2:	4798      	blx	r3
	//reset_chip();
}
    1bf4:	bd10      	pop	{r4, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	000010d5 	.word	0x000010d5
    1bfc:	20000000 	.word	0x20000000
    1c00:	00001825 	.word	0x00001825
    1c04:	41004400 	.word	0x41004400
    1c08:	0000184d 	.word	0x0000184d
    1c0c:	000018bd 	.word	0x000018bd
    1c10:	00001705 	.word	0x00001705

00001c14 <main>:



int main (void)
{
    1c14:	b510      	push	{r4, lr}
	startup_sys_configs ();
    1c16:	4b03      	ldr	r3, [pc, #12]	; (1c24 <main+0x10>)
    1c18:	4798      	blx	r3
	get_vbus_state();
    1c1a:	4b03      	ldr	r3, [pc, #12]	; (1c28 <main+0x14>)
    1c1c:	4798      	blx	r3
	
	while (true)
	{
		system_state();								// Get latest system_state
		system_logic();								// Invoke System Logic
    1c1e:	4b03      	ldr	r3, [pc, #12]	; (1c2c <main+0x18>)
    1c20:	e7fa      	b.n	1c18 <main+0x4>
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	00001bcd 	.word	0x00001bcd
    1c28:	00001ad9 	.word	0x00001ad9
    1c2c:	00001b2d 	.word	0x00001b2d

00001c30 <__gnu_thumb1_case_uqi>:
    1c30:	b402      	push	{r1}
    1c32:	4671      	mov	r1, lr
    1c34:	0849      	lsrs	r1, r1, #1
    1c36:	0049      	lsls	r1, r1, #1
    1c38:	5c09      	ldrb	r1, [r1, r0]
    1c3a:	0049      	lsls	r1, r1, #1
    1c3c:	448e      	add	lr, r1
    1c3e:	bc02      	pop	{r1}
    1c40:	4770      	bx	lr
    1c42:	46c0      	nop			; (mov r8, r8)

00001c44 <__udivsi3>:
    1c44:	2200      	movs	r2, #0
    1c46:	0843      	lsrs	r3, r0, #1
    1c48:	428b      	cmp	r3, r1
    1c4a:	d374      	bcc.n	1d36 <__udivsi3+0xf2>
    1c4c:	0903      	lsrs	r3, r0, #4
    1c4e:	428b      	cmp	r3, r1
    1c50:	d35f      	bcc.n	1d12 <__udivsi3+0xce>
    1c52:	0a03      	lsrs	r3, r0, #8
    1c54:	428b      	cmp	r3, r1
    1c56:	d344      	bcc.n	1ce2 <__udivsi3+0x9e>
    1c58:	0b03      	lsrs	r3, r0, #12
    1c5a:	428b      	cmp	r3, r1
    1c5c:	d328      	bcc.n	1cb0 <__udivsi3+0x6c>
    1c5e:	0c03      	lsrs	r3, r0, #16
    1c60:	428b      	cmp	r3, r1
    1c62:	d30d      	bcc.n	1c80 <__udivsi3+0x3c>
    1c64:	22ff      	movs	r2, #255	; 0xff
    1c66:	0209      	lsls	r1, r1, #8
    1c68:	ba12      	rev	r2, r2
    1c6a:	0c03      	lsrs	r3, r0, #16
    1c6c:	428b      	cmp	r3, r1
    1c6e:	d302      	bcc.n	1c76 <__udivsi3+0x32>
    1c70:	1212      	asrs	r2, r2, #8
    1c72:	0209      	lsls	r1, r1, #8
    1c74:	d065      	beq.n	1d42 <__udivsi3+0xfe>
    1c76:	0b03      	lsrs	r3, r0, #12
    1c78:	428b      	cmp	r3, r1
    1c7a:	d319      	bcc.n	1cb0 <__udivsi3+0x6c>
    1c7c:	e000      	b.n	1c80 <__udivsi3+0x3c>
    1c7e:	0a09      	lsrs	r1, r1, #8
    1c80:	0bc3      	lsrs	r3, r0, #15
    1c82:	428b      	cmp	r3, r1
    1c84:	d301      	bcc.n	1c8a <__udivsi3+0x46>
    1c86:	03cb      	lsls	r3, r1, #15
    1c88:	1ac0      	subs	r0, r0, r3
    1c8a:	4152      	adcs	r2, r2
    1c8c:	0b83      	lsrs	r3, r0, #14
    1c8e:	428b      	cmp	r3, r1
    1c90:	d301      	bcc.n	1c96 <__udivsi3+0x52>
    1c92:	038b      	lsls	r3, r1, #14
    1c94:	1ac0      	subs	r0, r0, r3
    1c96:	4152      	adcs	r2, r2
    1c98:	0b43      	lsrs	r3, r0, #13
    1c9a:	428b      	cmp	r3, r1
    1c9c:	d301      	bcc.n	1ca2 <__udivsi3+0x5e>
    1c9e:	034b      	lsls	r3, r1, #13
    1ca0:	1ac0      	subs	r0, r0, r3
    1ca2:	4152      	adcs	r2, r2
    1ca4:	0b03      	lsrs	r3, r0, #12
    1ca6:	428b      	cmp	r3, r1
    1ca8:	d301      	bcc.n	1cae <__udivsi3+0x6a>
    1caa:	030b      	lsls	r3, r1, #12
    1cac:	1ac0      	subs	r0, r0, r3
    1cae:	4152      	adcs	r2, r2
    1cb0:	0ac3      	lsrs	r3, r0, #11
    1cb2:	428b      	cmp	r3, r1
    1cb4:	d301      	bcc.n	1cba <__udivsi3+0x76>
    1cb6:	02cb      	lsls	r3, r1, #11
    1cb8:	1ac0      	subs	r0, r0, r3
    1cba:	4152      	adcs	r2, r2
    1cbc:	0a83      	lsrs	r3, r0, #10
    1cbe:	428b      	cmp	r3, r1
    1cc0:	d301      	bcc.n	1cc6 <__udivsi3+0x82>
    1cc2:	028b      	lsls	r3, r1, #10
    1cc4:	1ac0      	subs	r0, r0, r3
    1cc6:	4152      	adcs	r2, r2
    1cc8:	0a43      	lsrs	r3, r0, #9
    1cca:	428b      	cmp	r3, r1
    1ccc:	d301      	bcc.n	1cd2 <__udivsi3+0x8e>
    1cce:	024b      	lsls	r3, r1, #9
    1cd0:	1ac0      	subs	r0, r0, r3
    1cd2:	4152      	adcs	r2, r2
    1cd4:	0a03      	lsrs	r3, r0, #8
    1cd6:	428b      	cmp	r3, r1
    1cd8:	d301      	bcc.n	1cde <__udivsi3+0x9a>
    1cda:	020b      	lsls	r3, r1, #8
    1cdc:	1ac0      	subs	r0, r0, r3
    1cde:	4152      	adcs	r2, r2
    1ce0:	d2cd      	bcs.n	1c7e <__udivsi3+0x3a>
    1ce2:	09c3      	lsrs	r3, r0, #7
    1ce4:	428b      	cmp	r3, r1
    1ce6:	d301      	bcc.n	1cec <__udivsi3+0xa8>
    1ce8:	01cb      	lsls	r3, r1, #7
    1cea:	1ac0      	subs	r0, r0, r3
    1cec:	4152      	adcs	r2, r2
    1cee:	0983      	lsrs	r3, r0, #6
    1cf0:	428b      	cmp	r3, r1
    1cf2:	d301      	bcc.n	1cf8 <__udivsi3+0xb4>
    1cf4:	018b      	lsls	r3, r1, #6
    1cf6:	1ac0      	subs	r0, r0, r3
    1cf8:	4152      	adcs	r2, r2
    1cfa:	0943      	lsrs	r3, r0, #5
    1cfc:	428b      	cmp	r3, r1
    1cfe:	d301      	bcc.n	1d04 <__udivsi3+0xc0>
    1d00:	014b      	lsls	r3, r1, #5
    1d02:	1ac0      	subs	r0, r0, r3
    1d04:	4152      	adcs	r2, r2
    1d06:	0903      	lsrs	r3, r0, #4
    1d08:	428b      	cmp	r3, r1
    1d0a:	d301      	bcc.n	1d10 <__udivsi3+0xcc>
    1d0c:	010b      	lsls	r3, r1, #4
    1d0e:	1ac0      	subs	r0, r0, r3
    1d10:	4152      	adcs	r2, r2
    1d12:	08c3      	lsrs	r3, r0, #3
    1d14:	428b      	cmp	r3, r1
    1d16:	d301      	bcc.n	1d1c <__udivsi3+0xd8>
    1d18:	00cb      	lsls	r3, r1, #3
    1d1a:	1ac0      	subs	r0, r0, r3
    1d1c:	4152      	adcs	r2, r2
    1d1e:	0883      	lsrs	r3, r0, #2
    1d20:	428b      	cmp	r3, r1
    1d22:	d301      	bcc.n	1d28 <__udivsi3+0xe4>
    1d24:	008b      	lsls	r3, r1, #2
    1d26:	1ac0      	subs	r0, r0, r3
    1d28:	4152      	adcs	r2, r2
    1d2a:	0843      	lsrs	r3, r0, #1
    1d2c:	428b      	cmp	r3, r1
    1d2e:	d301      	bcc.n	1d34 <__udivsi3+0xf0>
    1d30:	004b      	lsls	r3, r1, #1
    1d32:	1ac0      	subs	r0, r0, r3
    1d34:	4152      	adcs	r2, r2
    1d36:	1a41      	subs	r1, r0, r1
    1d38:	d200      	bcs.n	1d3c <__udivsi3+0xf8>
    1d3a:	4601      	mov	r1, r0
    1d3c:	4152      	adcs	r2, r2
    1d3e:	4610      	mov	r0, r2
    1d40:	4770      	bx	lr
    1d42:	e7ff      	b.n	1d44 <__udivsi3+0x100>
    1d44:	b501      	push	{r0, lr}
    1d46:	2000      	movs	r0, #0
    1d48:	f000 f806 	bl	1d58 <__aeabi_idiv0>
    1d4c:	bd02      	pop	{r1, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)

00001d50 <__aeabi_uidivmod>:
    1d50:	2900      	cmp	r1, #0
    1d52:	d0f7      	beq.n	1d44 <__udivsi3+0x100>
    1d54:	e776      	b.n	1c44 <__udivsi3>
    1d56:	4770      	bx	lr

00001d58 <__aeabi_idiv0>:
    1d58:	4770      	bx	lr
    1d5a:	46c0      	nop			; (mov r8, r8)

00001d5c <__aeabi_dadd>:
    1d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d5e:	4645      	mov	r5, r8
    1d60:	46de      	mov	lr, fp
    1d62:	4657      	mov	r7, sl
    1d64:	464e      	mov	r6, r9
    1d66:	030c      	lsls	r4, r1, #12
    1d68:	b5e0      	push	{r5, r6, r7, lr}
    1d6a:	004e      	lsls	r6, r1, #1
    1d6c:	0fc9      	lsrs	r1, r1, #31
    1d6e:	4688      	mov	r8, r1
    1d70:	000d      	movs	r5, r1
    1d72:	0a61      	lsrs	r1, r4, #9
    1d74:	0f44      	lsrs	r4, r0, #29
    1d76:	430c      	orrs	r4, r1
    1d78:	00c7      	lsls	r7, r0, #3
    1d7a:	0319      	lsls	r1, r3, #12
    1d7c:	0058      	lsls	r0, r3, #1
    1d7e:	0fdb      	lsrs	r3, r3, #31
    1d80:	469b      	mov	fp, r3
    1d82:	0a4b      	lsrs	r3, r1, #9
    1d84:	0f51      	lsrs	r1, r2, #29
    1d86:	430b      	orrs	r3, r1
    1d88:	0d76      	lsrs	r6, r6, #21
    1d8a:	0d40      	lsrs	r0, r0, #21
    1d8c:	0019      	movs	r1, r3
    1d8e:	00d2      	lsls	r2, r2, #3
    1d90:	45d8      	cmp	r8, fp
    1d92:	d100      	bne.n	1d96 <__aeabi_dadd+0x3a>
    1d94:	e0ae      	b.n	1ef4 <__aeabi_dadd+0x198>
    1d96:	1a35      	subs	r5, r6, r0
    1d98:	2d00      	cmp	r5, #0
    1d9a:	dc00      	bgt.n	1d9e <__aeabi_dadd+0x42>
    1d9c:	e0f6      	b.n	1f8c <__aeabi_dadd+0x230>
    1d9e:	2800      	cmp	r0, #0
    1da0:	d10f      	bne.n	1dc2 <__aeabi_dadd+0x66>
    1da2:	4313      	orrs	r3, r2
    1da4:	d100      	bne.n	1da8 <__aeabi_dadd+0x4c>
    1da6:	e0db      	b.n	1f60 <__aeabi_dadd+0x204>
    1da8:	1e6b      	subs	r3, r5, #1
    1daa:	2b00      	cmp	r3, #0
    1dac:	d000      	beq.n	1db0 <__aeabi_dadd+0x54>
    1dae:	e137      	b.n	2020 <__aeabi_dadd+0x2c4>
    1db0:	1aba      	subs	r2, r7, r2
    1db2:	4297      	cmp	r7, r2
    1db4:	41bf      	sbcs	r7, r7
    1db6:	1a64      	subs	r4, r4, r1
    1db8:	427f      	negs	r7, r7
    1dba:	1be4      	subs	r4, r4, r7
    1dbc:	2601      	movs	r6, #1
    1dbe:	0017      	movs	r7, r2
    1dc0:	e024      	b.n	1e0c <__aeabi_dadd+0xb0>
    1dc2:	4bc6      	ldr	r3, [pc, #792]	; (20dc <__aeabi_dadd+0x380>)
    1dc4:	429e      	cmp	r6, r3
    1dc6:	d04d      	beq.n	1e64 <__aeabi_dadd+0x108>
    1dc8:	2380      	movs	r3, #128	; 0x80
    1dca:	041b      	lsls	r3, r3, #16
    1dcc:	4319      	orrs	r1, r3
    1dce:	2d38      	cmp	r5, #56	; 0x38
    1dd0:	dd00      	ble.n	1dd4 <__aeabi_dadd+0x78>
    1dd2:	e107      	b.n	1fe4 <__aeabi_dadd+0x288>
    1dd4:	2d1f      	cmp	r5, #31
    1dd6:	dd00      	ble.n	1dda <__aeabi_dadd+0x7e>
    1dd8:	e138      	b.n	204c <__aeabi_dadd+0x2f0>
    1dda:	2020      	movs	r0, #32
    1ddc:	1b43      	subs	r3, r0, r5
    1dde:	469a      	mov	sl, r3
    1de0:	000b      	movs	r3, r1
    1de2:	4650      	mov	r0, sl
    1de4:	4083      	lsls	r3, r0
    1de6:	4699      	mov	r9, r3
    1de8:	0013      	movs	r3, r2
    1dea:	4648      	mov	r0, r9
    1dec:	40eb      	lsrs	r3, r5
    1dee:	4318      	orrs	r0, r3
    1df0:	0003      	movs	r3, r0
    1df2:	4650      	mov	r0, sl
    1df4:	4082      	lsls	r2, r0
    1df6:	1e50      	subs	r0, r2, #1
    1df8:	4182      	sbcs	r2, r0
    1dfa:	40e9      	lsrs	r1, r5
    1dfc:	431a      	orrs	r2, r3
    1dfe:	1aba      	subs	r2, r7, r2
    1e00:	1a61      	subs	r1, r4, r1
    1e02:	4297      	cmp	r7, r2
    1e04:	41a4      	sbcs	r4, r4
    1e06:	0017      	movs	r7, r2
    1e08:	4264      	negs	r4, r4
    1e0a:	1b0c      	subs	r4, r1, r4
    1e0c:	0223      	lsls	r3, r4, #8
    1e0e:	d562      	bpl.n	1ed6 <__aeabi_dadd+0x17a>
    1e10:	0264      	lsls	r4, r4, #9
    1e12:	0a65      	lsrs	r5, r4, #9
    1e14:	2d00      	cmp	r5, #0
    1e16:	d100      	bne.n	1e1a <__aeabi_dadd+0xbe>
    1e18:	e0df      	b.n	1fda <__aeabi_dadd+0x27e>
    1e1a:	0028      	movs	r0, r5
    1e1c:	f001 fbe4 	bl	35e8 <__clzsi2>
    1e20:	0003      	movs	r3, r0
    1e22:	3b08      	subs	r3, #8
    1e24:	2b1f      	cmp	r3, #31
    1e26:	dd00      	ble.n	1e2a <__aeabi_dadd+0xce>
    1e28:	e0d2      	b.n	1fd0 <__aeabi_dadd+0x274>
    1e2a:	2220      	movs	r2, #32
    1e2c:	003c      	movs	r4, r7
    1e2e:	1ad2      	subs	r2, r2, r3
    1e30:	409d      	lsls	r5, r3
    1e32:	40d4      	lsrs	r4, r2
    1e34:	409f      	lsls	r7, r3
    1e36:	4325      	orrs	r5, r4
    1e38:	429e      	cmp	r6, r3
    1e3a:	dd00      	ble.n	1e3e <__aeabi_dadd+0xe2>
    1e3c:	e0c4      	b.n	1fc8 <__aeabi_dadd+0x26c>
    1e3e:	1b9e      	subs	r6, r3, r6
    1e40:	1c73      	adds	r3, r6, #1
    1e42:	2b1f      	cmp	r3, #31
    1e44:	dd00      	ble.n	1e48 <__aeabi_dadd+0xec>
    1e46:	e0f1      	b.n	202c <__aeabi_dadd+0x2d0>
    1e48:	2220      	movs	r2, #32
    1e4a:	0038      	movs	r0, r7
    1e4c:	0029      	movs	r1, r5
    1e4e:	1ad2      	subs	r2, r2, r3
    1e50:	40d8      	lsrs	r0, r3
    1e52:	4091      	lsls	r1, r2
    1e54:	4097      	lsls	r7, r2
    1e56:	002c      	movs	r4, r5
    1e58:	4301      	orrs	r1, r0
    1e5a:	1e78      	subs	r0, r7, #1
    1e5c:	4187      	sbcs	r7, r0
    1e5e:	40dc      	lsrs	r4, r3
    1e60:	2600      	movs	r6, #0
    1e62:	430f      	orrs	r7, r1
    1e64:	077b      	lsls	r3, r7, #29
    1e66:	d009      	beq.n	1e7c <__aeabi_dadd+0x120>
    1e68:	230f      	movs	r3, #15
    1e6a:	403b      	ands	r3, r7
    1e6c:	2b04      	cmp	r3, #4
    1e6e:	d005      	beq.n	1e7c <__aeabi_dadd+0x120>
    1e70:	1d3b      	adds	r3, r7, #4
    1e72:	42bb      	cmp	r3, r7
    1e74:	41bf      	sbcs	r7, r7
    1e76:	427f      	negs	r7, r7
    1e78:	19e4      	adds	r4, r4, r7
    1e7a:	001f      	movs	r7, r3
    1e7c:	0223      	lsls	r3, r4, #8
    1e7e:	d52c      	bpl.n	1eda <__aeabi_dadd+0x17e>
    1e80:	4b96      	ldr	r3, [pc, #600]	; (20dc <__aeabi_dadd+0x380>)
    1e82:	3601      	adds	r6, #1
    1e84:	429e      	cmp	r6, r3
    1e86:	d100      	bne.n	1e8a <__aeabi_dadd+0x12e>
    1e88:	e09a      	b.n	1fc0 <__aeabi_dadd+0x264>
    1e8a:	4645      	mov	r5, r8
    1e8c:	4b94      	ldr	r3, [pc, #592]	; (20e0 <__aeabi_dadd+0x384>)
    1e8e:	08ff      	lsrs	r7, r7, #3
    1e90:	401c      	ands	r4, r3
    1e92:	0760      	lsls	r0, r4, #29
    1e94:	0576      	lsls	r6, r6, #21
    1e96:	0264      	lsls	r4, r4, #9
    1e98:	4307      	orrs	r7, r0
    1e9a:	0b24      	lsrs	r4, r4, #12
    1e9c:	0d76      	lsrs	r6, r6, #21
    1e9e:	2100      	movs	r1, #0
    1ea0:	0324      	lsls	r4, r4, #12
    1ea2:	0b23      	lsrs	r3, r4, #12
    1ea4:	0d0c      	lsrs	r4, r1, #20
    1ea6:	4a8f      	ldr	r2, [pc, #572]	; (20e4 <__aeabi_dadd+0x388>)
    1ea8:	0524      	lsls	r4, r4, #20
    1eaa:	431c      	orrs	r4, r3
    1eac:	4014      	ands	r4, r2
    1eae:	0533      	lsls	r3, r6, #20
    1eb0:	4323      	orrs	r3, r4
    1eb2:	005b      	lsls	r3, r3, #1
    1eb4:	07ed      	lsls	r5, r5, #31
    1eb6:	085b      	lsrs	r3, r3, #1
    1eb8:	432b      	orrs	r3, r5
    1eba:	0038      	movs	r0, r7
    1ebc:	0019      	movs	r1, r3
    1ebe:	bc3c      	pop	{r2, r3, r4, r5}
    1ec0:	4690      	mov	r8, r2
    1ec2:	4699      	mov	r9, r3
    1ec4:	46a2      	mov	sl, r4
    1ec6:	46ab      	mov	fp, r5
    1ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1eca:	4664      	mov	r4, ip
    1ecc:	4304      	orrs	r4, r0
    1ece:	d100      	bne.n	1ed2 <__aeabi_dadd+0x176>
    1ed0:	e211      	b.n	22f6 <__aeabi_dadd+0x59a>
    1ed2:	0004      	movs	r4, r0
    1ed4:	4667      	mov	r7, ip
    1ed6:	077b      	lsls	r3, r7, #29
    1ed8:	d1c6      	bne.n	1e68 <__aeabi_dadd+0x10c>
    1eda:	4645      	mov	r5, r8
    1edc:	0760      	lsls	r0, r4, #29
    1ede:	08ff      	lsrs	r7, r7, #3
    1ee0:	4307      	orrs	r7, r0
    1ee2:	08e4      	lsrs	r4, r4, #3
    1ee4:	4b7d      	ldr	r3, [pc, #500]	; (20dc <__aeabi_dadd+0x380>)
    1ee6:	429e      	cmp	r6, r3
    1ee8:	d030      	beq.n	1f4c <__aeabi_dadd+0x1f0>
    1eea:	0324      	lsls	r4, r4, #12
    1eec:	0576      	lsls	r6, r6, #21
    1eee:	0b24      	lsrs	r4, r4, #12
    1ef0:	0d76      	lsrs	r6, r6, #21
    1ef2:	e7d4      	b.n	1e9e <__aeabi_dadd+0x142>
    1ef4:	1a33      	subs	r3, r6, r0
    1ef6:	469a      	mov	sl, r3
    1ef8:	2b00      	cmp	r3, #0
    1efa:	dd78      	ble.n	1fee <__aeabi_dadd+0x292>
    1efc:	2800      	cmp	r0, #0
    1efe:	d031      	beq.n	1f64 <__aeabi_dadd+0x208>
    1f00:	4876      	ldr	r0, [pc, #472]	; (20dc <__aeabi_dadd+0x380>)
    1f02:	4286      	cmp	r6, r0
    1f04:	d0ae      	beq.n	1e64 <__aeabi_dadd+0x108>
    1f06:	2080      	movs	r0, #128	; 0x80
    1f08:	0400      	lsls	r0, r0, #16
    1f0a:	4301      	orrs	r1, r0
    1f0c:	4653      	mov	r3, sl
    1f0e:	2b38      	cmp	r3, #56	; 0x38
    1f10:	dc00      	bgt.n	1f14 <__aeabi_dadd+0x1b8>
    1f12:	e0e9      	b.n	20e8 <__aeabi_dadd+0x38c>
    1f14:	430a      	orrs	r2, r1
    1f16:	1e51      	subs	r1, r2, #1
    1f18:	418a      	sbcs	r2, r1
    1f1a:	2100      	movs	r1, #0
    1f1c:	19d2      	adds	r2, r2, r7
    1f1e:	42ba      	cmp	r2, r7
    1f20:	41bf      	sbcs	r7, r7
    1f22:	1909      	adds	r1, r1, r4
    1f24:	427c      	negs	r4, r7
    1f26:	0017      	movs	r7, r2
    1f28:	190c      	adds	r4, r1, r4
    1f2a:	0223      	lsls	r3, r4, #8
    1f2c:	d5d3      	bpl.n	1ed6 <__aeabi_dadd+0x17a>
    1f2e:	4b6b      	ldr	r3, [pc, #428]	; (20dc <__aeabi_dadd+0x380>)
    1f30:	3601      	adds	r6, #1
    1f32:	429e      	cmp	r6, r3
    1f34:	d100      	bne.n	1f38 <__aeabi_dadd+0x1dc>
    1f36:	e13a      	b.n	21ae <__aeabi_dadd+0x452>
    1f38:	2001      	movs	r0, #1
    1f3a:	4b69      	ldr	r3, [pc, #420]	; (20e0 <__aeabi_dadd+0x384>)
    1f3c:	401c      	ands	r4, r3
    1f3e:	087b      	lsrs	r3, r7, #1
    1f40:	4007      	ands	r7, r0
    1f42:	431f      	orrs	r7, r3
    1f44:	07e0      	lsls	r0, r4, #31
    1f46:	4307      	orrs	r7, r0
    1f48:	0864      	lsrs	r4, r4, #1
    1f4a:	e78b      	b.n	1e64 <__aeabi_dadd+0x108>
    1f4c:	0023      	movs	r3, r4
    1f4e:	433b      	orrs	r3, r7
    1f50:	d100      	bne.n	1f54 <__aeabi_dadd+0x1f8>
    1f52:	e1cb      	b.n	22ec <__aeabi_dadd+0x590>
    1f54:	2280      	movs	r2, #128	; 0x80
    1f56:	0312      	lsls	r2, r2, #12
    1f58:	4314      	orrs	r4, r2
    1f5a:	0324      	lsls	r4, r4, #12
    1f5c:	0b24      	lsrs	r4, r4, #12
    1f5e:	e79e      	b.n	1e9e <__aeabi_dadd+0x142>
    1f60:	002e      	movs	r6, r5
    1f62:	e77f      	b.n	1e64 <__aeabi_dadd+0x108>
    1f64:	0008      	movs	r0, r1
    1f66:	4310      	orrs	r0, r2
    1f68:	d100      	bne.n	1f6c <__aeabi_dadd+0x210>
    1f6a:	e0b4      	b.n	20d6 <__aeabi_dadd+0x37a>
    1f6c:	1e58      	subs	r0, r3, #1
    1f6e:	2800      	cmp	r0, #0
    1f70:	d000      	beq.n	1f74 <__aeabi_dadd+0x218>
    1f72:	e0de      	b.n	2132 <__aeabi_dadd+0x3d6>
    1f74:	18ba      	adds	r2, r7, r2
    1f76:	42ba      	cmp	r2, r7
    1f78:	419b      	sbcs	r3, r3
    1f7a:	1864      	adds	r4, r4, r1
    1f7c:	425b      	negs	r3, r3
    1f7e:	18e4      	adds	r4, r4, r3
    1f80:	0017      	movs	r7, r2
    1f82:	2601      	movs	r6, #1
    1f84:	0223      	lsls	r3, r4, #8
    1f86:	d5a6      	bpl.n	1ed6 <__aeabi_dadd+0x17a>
    1f88:	2602      	movs	r6, #2
    1f8a:	e7d5      	b.n	1f38 <__aeabi_dadd+0x1dc>
    1f8c:	2d00      	cmp	r5, #0
    1f8e:	d16e      	bne.n	206e <__aeabi_dadd+0x312>
    1f90:	1c70      	adds	r0, r6, #1
    1f92:	0540      	lsls	r0, r0, #21
    1f94:	0d40      	lsrs	r0, r0, #21
    1f96:	2801      	cmp	r0, #1
    1f98:	dc00      	bgt.n	1f9c <__aeabi_dadd+0x240>
    1f9a:	e0f9      	b.n	2190 <__aeabi_dadd+0x434>
    1f9c:	1ab8      	subs	r0, r7, r2
    1f9e:	4684      	mov	ip, r0
    1fa0:	4287      	cmp	r7, r0
    1fa2:	4180      	sbcs	r0, r0
    1fa4:	1ae5      	subs	r5, r4, r3
    1fa6:	4240      	negs	r0, r0
    1fa8:	1a2d      	subs	r5, r5, r0
    1faa:	0228      	lsls	r0, r5, #8
    1fac:	d400      	bmi.n	1fb0 <__aeabi_dadd+0x254>
    1fae:	e089      	b.n	20c4 <__aeabi_dadd+0x368>
    1fb0:	1bd7      	subs	r7, r2, r7
    1fb2:	42ba      	cmp	r2, r7
    1fb4:	4192      	sbcs	r2, r2
    1fb6:	1b1c      	subs	r4, r3, r4
    1fb8:	4252      	negs	r2, r2
    1fba:	1aa5      	subs	r5, r4, r2
    1fbc:	46d8      	mov	r8, fp
    1fbe:	e729      	b.n	1e14 <__aeabi_dadd+0xb8>
    1fc0:	4645      	mov	r5, r8
    1fc2:	2400      	movs	r4, #0
    1fc4:	2700      	movs	r7, #0
    1fc6:	e76a      	b.n	1e9e <__aeabi_dadd+0x142>
    1fc8:	4c45      	ldr	r4, [pc, #276]	; (20e0 <__aeabi_dadd+0x384>)
    1fca:	1af6      	subs	r6, r6, r3
    1fcc:	402c      	ands	r4, r5
    1fce:	e749      	b.n	1e64 <__aeabi_dadd+0x108>
    1fd0:	003d      	movs	r5, r7
    1fd2:	3828      	subs	r0, #40	; 0x28
    1fd4:	4085      	lsls	r5, r0
    1fd6:	2700      	movs	r7, #0
    1fd8:	e72e      	b.n	1e38 <__aeabi_dadd+0xdc>
    1fda:	0038      	movs	r0, r7
    1fdc:	f001 fb04 	bl	35e8 <__clzsi2>
    1fe0:	3020      	adds	r0, #32
    1fe2:	e71d      	b.n	1e20 <__aeabi_dadd+0xc4>
    1fe4:	430a      	orrs	r2, r1
    1fe6:	1e51      	subs	r1, r2, #1
    1fe8:	418a      	sbcs	r2, r1
    1fea:	2100      	movs	r1, #0
    1fec:	e707      	b.n	1dfe <__aeabi_dadd+0xa2>
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d000      	beq.n	1ff4 <__aeabi_dadd+0x298>
    1ff2:	e0f3      	b.n	21dc <__aeabi_dadd+0x480>
    1ff4:	1c70      	adds	r0, r6, #1
    1ff6:	0543      	lsls	r3, r0, #21
    1ff8:	0d5b      	lsrs	r3, r3, #21
    1ffa:	2b01      	cmp	r3, #1
    1ffc:	dc00      	bgt.n	2000 <__aeabi_dadd+0x2a4>
    1ffe:	e0ad      	b.n	215c <__aeabi_dadd+0x400>
    2000:	4b36      	ldr	r3, [pc, #216]	; (20dc <__aeabi_dadd+0x380>)
    2002:	4298      	cmp	r0, r3
    2004:	d100      	bne.n	2008 <__aeabi_dadd+0x2ac>
    2006:	e0d1      	b.n	21ac <__aeabi_dadd+0x450>
    2008:	18ba      	adds	r2, r7, r2
    200a:	42ba      	cmp	r2, r7
    200c:	41bf      	sbcs	r7, r7
    200e:	1864      	adds	r4, r4, r1
    2010:	427f      	negs	r7, r7
    2012:	19e4      	adds	r4, r4, r7
    2014:	07e7      	lsls	r7, r4, #31
    2016:	0852      	lsrs	r2, r2, #1
    2018:	4317      	orrs	r7, r2
    201a:	0864      	lsrs	r4, r4, #1
    201c:	0006      	movs	r6, r0
    201e:	e721      	b.n	1e64 <__aeabi_dadd+0x108>
    2020:	482e      	ldr	r0, [pc, #184]	; (20dc <__aeabi_dadd+0x380>)
    2022:	4285      	cmp	r5, r0
    2024:	d100      	bne.n	2028 <__aeabi_dadd+0x2cc>
    2026:	e093      	b.n	2150 <__aeabi_dadd+0x3f4>
    2028:	001d      	movs	r5, r3
    202a:	e6d0      	b.n	1dce <__aeabi_dadd+0x72>
    202c:	0029      	movs	r1, r5
    202e:	3e1f      	subs	r6, #31
    2030:	40f1      	lsrs	r1, r6
    2032:	2b20      	cmp	r3, #32
    2034:	d100      	bne.n	2038 <__aeabi_dadd+0x2dc>
    2036:	e08d      	b.n	2154 <__aeabi_dadd+0x3f8>
    2038:	2240      	movs	r2, #64	; 0x40
    203a:	1ad3      	subs	r3, r2, r3
    203c:	409d      	lsls	r5, r3
    203e:	432f      	orrs	r7, r5
    2040:	1e7d      	subs	r5, r7, #1
    2042:	41af      	sbcs	r7, r5
    2044:	2400      	movs	r4, #0
    2046:	430f      	orrs	r7, r1
    2048:	2600      	movs	r6, #0
    204a:	e744      	b.n	1ed6 <__aeabi_dadd+0x17a>
    204c:	002b      	movs	r3, r5
    204e:	0008      	movs	r0, r1
    2050:	3b20      	subs	r3, #32
    2052:	40d8      	lsrs	r0, r3
    2054:	0003      	movs	r3, r0
    2056:	2d20      	cmp	r5, #32
    2058:	d100      	bne.n	205c <__aeabi_dadd+0x300>
    205a:	e07d      	b.n	2158 <__aeabi_dadd+0x3fc>
    205c:	2040      	movs	r0, #64	; 0x40
    205e:	1b45      	subs	r5, r0, r5
    2060:	40a9      	lsls	r1, r5
    2062:	430a      	orrs	r2, r1
    2064:	1e51      	subs	r1, r2, #1
    2066:	418a      	sbcs	r2, r1
    2068:	2100      	movs	r1, #0
    206a:	431a      	orrs	r2, r3
    206c:	e6c7      	b.n	1dfe <__aeabi_dadd+0xa2>
    206e:	2e00      	cmp	r6, #0
    2070:	d050      	beq.n	2114 <__aeabi_dadd+0x3b8>
    2072:	4e1a      	ldr	r6, [pc, #104]	; (20dc <__aeabi_dadd+0x380>)
    2074:	42b0      	cmp	r0, r6
    2076:	d057      	beq.n	2128 <__aeabi_dadd+0x3cc>
    2078:	2680      	movs	r6, #128	; 0x80
    207a:	426b      	negs	r3, r5
    207c:	4699      	mov	r9, r3
    207e:	0436      	lsls	r6, r6, #16
    2080:	4334      	orrs	r4, r6
    2082:	464b      	mov	r3, r9
    2084:	2b38      	cmp	r3, #56	; 0x38
    2086:	dd00      	ble.n	208a <__aeabi_dadd+0x32e>
    2088:	e0d6      	b.n	2238 <__aeabi_dadd+0x4dc>
    208a:	2b1f      	cmp	r3, #31
    208c:	dd00      	ble.n	2090 <__aeabi_dadd+0x334>
    208e:	e135      	b.n	22fc <__aeabi_dadd+0x5a0>
    2090:	2620      	movs	r6, #32
    2092:	1af5      	subs	r5, r6, r3
    2094:	0026      	movs	r6, r4
    2096:	40ae      	lsls	r6, r5
    2098:	46b2      	mov	sl, r6
    209a:	003e      	movs	r6, r7
    209c:	40de      	lsrs	r6, r3
    209e:	46ac      	mov	ip, r5
    20a0:	0035      	movs	r5, r6
    20a2:	4656      	mov	r6, sl
    20a4:	432e      	orrs	r6, r5
    20a6:	4665      	mov	r5, ip
    20a8:	40af      	lsls	r7, r5
    20aa:	1e7d      	subs	r5, r7, #1
    20ac:	41af      	sbcs	r7, r5
    20ae:	40dc      	lsrs	r4, r3
    20b0:	4337      	orrs	r7, r6
    20b2:	1bd7      	subs	r7, r2, r7
    20b4:	42ba      	cmp	r2, r7
    20b6:	4192      	sbcs	r2, r2
    20b8:	1b0c      	subs	r4, r1, r4
    20ba:	4252      	negs	r2, r2
    20bc:	1aa4      	subs	r4, r4, r2
    20be:	0006      	movs	r6, r0
    20c0:	46d8      	mov	r8, fp
    20c2:	e6a3      	b.n	1e0c <__aeabi_dadd+0xb0>
    20c4:	4664      	mov	r4, ip
    20c6:	4667      	mov	r7, ip
    20c8:	432c      	orrs	r4, r5
    20ca:	d000      	beq.n	20ce <__aeabi_dadd+0x372>
    20cc:	e6a2      	b.n	1e14 <__aeabi_dadd+0xb8>
    20ce:	2500      	movs	r5, #0
    20d0:	2600      	movs	r6, #0
    20d2:	2700      	movs	r7, #0
    20d4:	e706      	b.n	1ee4 <__aeabi_dadd+0x188>
    20d6:	001e      	movs	r6, r3
    20d8:	e6c4      	b.n	1e64 <__aeabi_dadd+0x108>
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	000007ff 	.word	0x000007ff
    20e0:	ff7fffff 	.word	0xff7fffff
    20e4:	800fffff 	.word	0x800fffff
    20e8:	2b1f      	cmp	r3, #31
    20ea:	dc63      	bgt.n	21b4 <__aeabi_dadd+0x458>
    20ec:	2020      	movs	r0, #32
    20ee:	1ac3      	subs	r3, r0, r3
    20f0:	0008      	movs	r0, r1
    20f2:	4098      	lsls	r0, r3
    20f4:	469c      	mov	ip, r3
    20f6:	4683      	mov	fp, r0
    20f8:	4653      	mov	r3, sl
    20fa:	0010      	movs	r0, r2
    20fc:	40d8      	lsrs	r0, r3
    20fe:	0003      	movs	r3, r0
    2100:	4658      	mov	r0, fp
    2102:	4318      	orrs	r0, r3
    2104:	4663      	mov	r3, ip
    2106:	409a      	lsls	r2, r3
    2108:	1e53      	subs	r3, r2, #1
    210a:	419a      	sbcs	r2, r3
    210c:	4653      	mov	r3, sl
    210e:	4302      	orrs	r2, r0
    2110:	40d9      	lsrs	r1, r3
    2112:	e703      	b.n	1f1c <__aeabi_dadd+0x1c0>
    2114:	0026      	movs	r6, r4
    2116:	433e      	orrs	r6, r7
    2118:	d006      	beq.n	2128 <__aeabi_dadd+0x3cc>
    211a:	43eb      	mvns	r3, r5
    211c:	4699      	mov	r9, r3
    211e:	2b00      	cmp	r3, #0
    2120:	d0c7      	beq.n	20b2 <__aeabi_dadd+0x356>
    2122:	4e94      	ldr	r6, [pc, #592]	; (2374 <__aeabi_dadd+0x618>)
    2124:	42b0      	cmp	r0, r6
    2126:	d1ac      	bne.n	2082 <__aeabi_dadd+0x326>
    2128:	000c      	movs	r4, r1
    212a:	0017      	movs	r7, r2
    212c:	0006      	movs	r6, r0
    212e:	46d8      	mov	r8, fp
    2130:	e698      	b.n	1e64 <__aeabi_dadd+0x108>
    2132:	4b90      	ldr	r3, [pc, #576]	; (2374 <__aeabi_dadd+0x618>)
    2134:	459a      	cmp	sl, r3
    2136:	d00b      	beq.n	2150 <__aeabi_dadd+0x3f4>
    2138:	4682      	mov	sl, r0
    213a:	e6e7      	b.n	1f0c <__aeabi_dadd+0x1b0>
    213c:	2800      	cmp	r0, #0
    213e:	d000      	beq.n	2142 <__aeabi_dadd+0x3e6>
    2140:	e09e      	b.n	2280 <__aeabi_dadd+0x524>
    2142:	0018      	movs	r0, r3
    2144:	4310      	orrs	r0, r2
    2146:	d100      	bne.n	214a <__aeabi_dadd+0x3ee>
    2148:	e0e9      	b.n	231e <__aeabi_dadd+0x5c2>
    214a:	001c      	movs	r4, r3
    214c:	0017      	movs	r7, r2
    214e:	46d8      	mov	r8, fp
    2150:	4e88      	ldr	r6, [pc, #544]	; (2374 <__aeabi_dadd+0x618>)
    2152:	e687      	b.n	1e64 <__aeabi_dadd+0x108>
    2154:	2500      	movs	r5, #0
    2156:	e772      	b.n	203e <__aeabi_dadd+0x2e2>
    2158:	2100      	movs	r1, #0
    215a:	e782      	b.n	2062 <__aeabi_dadd+0x306>
    215c:	0023      	movs	r3, r4
    215e:	433b      	orrs	r3, r7
    2160:	2e00      	cmp	r6, #0
    2162:	d000      	beq.n	2166 <__aeabi_dadd+0x40a>
    2164:	e0ab      	b.n	22be <__aeabi_dadd+0x562>
    2166:	2b00      	cmp	r3, #0
    2168:	d100      	bne.n	216c <__aeabi_dadd+0x410>
    216a:	e0e7      	b.n	233c <__aeabi_dadd+0x5e0>
    216c:	000b      	movs	r3, r1
    216e:	4313      	orrs	r3, r2
    2170:	d100      	bne.n	2174 <__aeabi_dadd+0x418>
    2172:	e677      	b.n	1e64 <__aeabi_dadd+0x108>
    2174:	18ba      	adds	r2, r7, r2
    2176:	42ba      	cmp	r2, r7
    2178:	41bf      	sbcs	r7, r7
    217a:	1864      	adds	r4, r4, r1
    217c:	427f      	negs	r7, r7
    217e:	19e4      	adds	r4, r4, r7
    2180:	0223      	lsls	r3, r4, #8
    2182:	d400      	bmi.n	2186 <__aeabi_dadd+0x42a>
    2184:	e0f2      	b.n	236c <__aeabi_dadd+0x610>
    2186:	4b7c      	ldr	r3, [pc, #496]	; (2378 <__aeabi_dadd+0x61c>)
    2188:	0017      	movs	r7, r2
    218a:	401c      	ands	r4, r3
    218c:	0006      	movs	r6, r0
    218e:	e669      	b.n	1e64 <__aeabi_dadd+0x108>
    2190:	0020      	movs	r0, r4
    2192:	4338      	orrs	r0, r7
    2194:	2e00      	cmp	r6, #0
    2196:	d1d1      	bne.n	213c <__aeabi_dadd+0x3e0>
    2198:	2800      	cmp	r0, #0
    219a:	d15b      	bne.n	2254 <__aeabi_dadd+0x4f8>
    219c:	001c      	movs	r4, r3
    219e:	4314      	orrs	r4, r2
    21a0:	d100      	bne.n	21a4 <__aeabi_dadd+0x448>
    21a2:	e0a8      	b.n	22f6 <__aeabi_dadd+0x59a>
    21a4:	001c      	movs	r4, r3
    21a6:	0017      	movs	r7, r2
    21a8:	46d8      	mov	r8, fp
    21aa:	e65b      	b.n	1e64 <__aeabi_dadd+0x108>
    21ac:	0006      	movs	r6, r0
    21ae:	2400      	movs	r4, #0
    21b0:	2700      	movs	r7, #0
    21b2:	e697      	b.n	1ee4 <__aeabi_dadd+0x188>
    21b4:	4650      	mov	r0, sl
    21b6:	000b      	movs	r3, r1
    21b8:	3820      	subs	r0, #32
    21ba:	40c3      	lsrs	r3, r0
    21bc:	4699      	mov	r9, r3
    21be:	4653      	mov	r3, sl
    21c0:	2b20      	cmp	r3, #32
    21c2:	d100      	bne.n	21c6 <__aeabi_dadd+0x46a>
    21c4:	e095      	b.n	22f2 <__aeabi_dadd+0x596>
    21c6:	2340      	movs	r3, #64	; 0x40
    21c8:	4650      	mov	r0, sl
    21ca:	1a1b      	subs	r3, r3, r0
    21cc:	4099      	lsls	r1, r3
    21ce:	430a      	orrs	r2, r1
    21d0:	1e51      	subs	r1, r2, #1
    21d2:	418a      	sbcs	r2, r1
    21d4:	464b      	mov	r3, r9
    21d6:	2100      	movs	r1, #0
    21d8:	431a      	orrs	r2, r3
    21da:	e69f      	b.n	1f1c <__aeabi_dadd+0x1c0>
    21dc:	2e00      	cmp	r6, #0
    21de:	d130      	bne.n	2242 <__aeabi_dadd+0x4e6>
    21e0:	0026      	movs	r6, r4
    21e2:	433e      	orrs	r6, r7
    21e4:	d067      	beq.n	22b6 <__aeabi_dadd+0x55a>
    21e6:	43db      	mvns	r3, r3
    21e8:	469a      	mov	sl, r3
    21ea:	2b00      	cmp	r3, #0
    21ec:	d01c      	beq.n	2228 <__aeabi_dadd+0x4cc>
    21ee:	4e61      	ldr	r6, [pc, #388]	; (2374 <__aeabi_dadd+0x618>)
    21f0:	42b0      	cmp	r0, r6
    21f2:	d060      	beq.n	22b6 <__aeabi_dadd+0x55a>
    21f4:	4653      	mov	r3, sl
    21f6:	2b38      	cmp	r3, #56	; 0x38
    21f8:	dd00      	ble.n	21fc <__aeabi_dadd+0x4a0>
    21fa:	e096      	b.n	232a <__aeabi_dadd+0x5ce>
    21fc:	2b1f      	cmp	r3, #31
    21fe:	dd00      	ble.n	2202 <__aeabi_dadd+0x4a6>
    2200:	e09f      	b.n	2342 <__aeabi_dadd+0x5e6>
    2202:	2620      	movs	r6, #32
    2204:	1af3      	subs	r3, r6, r3
    2206:	0026      	movs	r6, r4
    2208:	409e      	lsls	r6, r3
    220a:	469c      	mov	ip, r3
    220c:	46b3      	mov	fp, r6
    220e:	4653      	mov	r3, sl
    2210:	003e      	movs	r6, r7
    2212:	40de      	lsrs	r6, r3
    2214:	0033      	movs	r3, r6
    2216:	465e      	mov	r6, fp
    2218:	431e      	orrs	r6, r3
    221a:	4663      	mov	r3, ip
    221c:	409f      	lsls	r7, r3
    221e:	1e7b      	subs	r3, r7, #1
    2220:	419f      	sbcs	r7, r3
    2222:	4653      	mov	r3, sl
    2224:	40dc      	lsrs	r4, r3
    2226:	4337      	orrs	r7, r6
    2228:	18bf      	adds	r7, r7, r2
    222a:	4297      	cmp	r7, r2
    222c:	4192      	sbcs	r2, r2
    222e:	1864      	adds	r4, r4, r1
    2230:	4252      	negs	r2, r2
    2232:	18a4      	adds	r4, r4, r2
    2234:	0006      	movs	r6, r0
    2236:	e678      	b.n	1f2a <__aeabi_dadd+0x1ce>
    2238:	4327      	orrs	r7, r4
    223a:	1e7c      	subs	r4, r7, #1
    223c:	41a7      	sbcs	r7, r4
    223e:	2400      	movs	r4, #0
    2240:	e737      	b.n	20b2 <__aeabi_dadd+0x356>
    2242:	4e4c      	ldr	r6, [pc, #304]	; (2374 <__aeabi_dadd+0x618>)
    2244:	42b0      	cmp	r0, r6
    2246:	d036      	beq.n	22b6 <__aeabi_dadd+0x55a>
    2248:	2680      	movs	r6, #128	; 0x80
    224a:	425b      	negs	r3, r3
    224c:	0436      	lsls	r6, r6, #16
    224e:	469a      	mov	sl, r3
    2250:	4334      	orrs	r4, r6
    2252:	e7cf      	b.n	21f4 <__aeabi_dadd+0x498>
    2254:	0018      	movs	r0, r3
    2256:	4310      	orrs	r0, r2
    2258:	d100      	bne.n	225c <__aeabi_dadd+0x500>
    225a:	e603      	b.n	1e64 <__aeabi_dadd+0x108>
    225c:	1ab8      	subs	r0, r7, r2
    225e:	4684      	mov	ip, r0
    2260:	4567      	cmp	r7, ip
    2262:	41ad      	sbcs	r5, r5
    2264:	1ae0      	subs	r0, r4, r3
    2266:	426d      	negs	r5, r5
    2268:	1b40      	subs	r0, r0, r5
    226a:	0205      	lsls	r5, r0, #8
    226c:	d400      	bmi.n	2270 <__aeabi_dadd+0x514>
    226e:	e62c      	b.n	1eca <__aeabi_dadd+0x16e>
    2270:	1bd7      	subs	r7, r2, r7
    2272:	42ba      	cmp	r2, r7
    2274:	4192      	sbcs	r2, r2
    2276:	1b1c      	subs	r4, r3, r4
    2278:	4252      	negs	r2, r2
    227a:	1aa4      	subs	r4, r4, r2
    227c:	46d8      	mov	r8, fp
    227e:	e5f1      	b.n	1e64 <__aeabi_dadd+0x108>
    2280:	0018      	movs	r0, r3
    2282:	4310      	orrs	r0, r2
    2284:	d100      	bne.n	2288 <__aeabi_dadd+0x52c>
    2286:	e763      	b.n	2150 <__aeabi_dadd+0x3f4>
    2288:	08f8      	lsrs	r0, r7, #3
    228a:	0767      	lsls	r7, r4, #29
    228c:	4307      	orrs	r7, r0
    228e:	2080      	movs	r0, #128	; 0x80
    2290:	08e4      	lsrs	r4, r4, #3
    2292:	0300      	lsls	r0, r0, #12
    2294:	4204      	tst	r4, r0
    2296:	d008      	beq.n	22aa <__aeabi_dadd+0x54e>
    2298:	08dd      	lsrs	r5, r3, #3
    229a:	4205      	tst	r5, r0
    229c:	d105      	bne.n	22aa <__aeabi_dadd+0x54e>
    229e:	08d2      	lsrs	r2, r2, #3
    22a0:	0759      	lsls	r1, r3, #29
    22a2:	4311      	orrs	r1, r2
    22a4:	000f      	movs	r7, r1
    22a6:	002c      	movs	r4, r5
    22a8:	46d8      	mov	r8, fp
    22aa:	0f7b      	lsrs	r3, r7, #29
    22ac:	00e4      	lsls	r4, r4, #3
    22ae:	431c      	orrs	r4, r3
    22b0:	00ff      	lsls	r7, r7, #3
    22b2:	4e30      	ldr	r6, [pc, #192]	; (2374 <__aeabi_dadd+0x618>)
    22b4:	e5d6      	b.n	1e64 <__aeabi_dadd+0x108>
    22b6:	000c      	movs	r4, r1
    22b8:	0017      	movs	r7, r2
    22ba:	0006      	movs	r6, r0
    22bc:	e5d2      	b.n	1e64 <__aeabi_dadd+0x108>
    22be:	2b00      	cmp	r3, #0
    22c0:	d038      	beq.n	2334 <__aeabi_dadd+0x5d8>
    22c2:	000b      	movs	r3, r1
    22c4:	4313      	orrs	r3, r2
    22c6:	d100      	bne.n	22ca <__aeabi_dadd+0x56e>
    22c8:	e742      	b.n	2150 <__aeabi_dadd+0x3f4>
    22ca:	08f8      	lsrs	r0, r7, #3
    22cc:	0767      	lsls	r7, r4, #29
    22ce:	4307      	orrs	r7, r0
    22d0:	2080      	movs	r0, #128	; 0x80
    22d2:	08e4      	lsrs	r4, r4, #3
    22d4:	0300      	lsls	r0, r0, #12
    22d6:	4204      	tst	r4, r0
    22d8:	d0e7      	beq.n	22aa <__aeabi_dadd+0x54e>
    22da:	08cb      	lsrs	r3, r1, #3
    22dc:	4203      	tst	r3, r0
    22de:	d1e4      	bne.n	22aa <__aeabi_dadd+0x54e>
    22e0:	08d2      	lsrs	r2, r2, #3
    22e2:	0749      	lsls	r1, r1, #29
    22e4:	4311      	orrs	r1, r2
    22e6:	000f      	movs	r7, r1
    22e8:	001c      	movs	r4, r3
    22ea:	e7de      	b.n	22aa <__aeabi_dadd+0x54e>
    22ec:	2700      	movs	r7, #0
    22ee:	2400      	movs	r4, #0
    22f0:	e5d5      	b.n	1e9e <__aeabi_dadd+0x142>
    22f2:	2100      	movs	r1, #0
    22f4:	e76b      	b.n	21ce <__aeabi_dadd+0x472>
    22f6:	2500      	movs	r5, #0
    22f8:	2700      	movs	r7, #0
    22fa:	e5f3      	b.n	1ee4 <__aeabi_dadd+0x188>
    22fc:	464e      	mov	r6, r9
    22fe:	0025      	movs	r5, r4
    2300:	3e20      	subs	r6, #32
    2302:	40f5      	lsrs	r5, r6
    2304:	464b      	mov	r3, r9
    2306:	002e      	movs	r6, r5
    2308:	2b20      	cmp	r3, #32
    230a:	d02d      	beq.n	2368 <__aeabi_dadd+0x60c>
    230c:	2540      	movs	r5, #64	; 0x40
    230e:	1aed      	subs	r5, r5, r3
    2310:	40ac      	lsls	r4, r5
    2312:	4327      	orrs	r7, r4
    2314:	1e7c      	subs	r4, r7, #1
    2316:	41a7      	sbcs	r7, r4
    2318:	2400      	movs	r4, #0
    231a:	4337      	orrs	r7, r6
    231c:	e6c9      	b.n	20b2 <__aeabi_dadd+0x356>
    231e:	2480      	movs	r4, #128	; 0x80
    2320:	2500      	movs	r5, #0
    2322:	0324      	lsls	r4, r4, #12
    2324:	4e13      	ldr	r6, [pc, #76]	; (2374 <__aeabi_dadd+0x618>)
    2326:	2700      	movs	r7, #0
    2328:	e5dc      	b.n	1ee4 <__aeabi_dadd+0x188>
    232a:	4327      	orrs	r7, r4
    232c:	1e7c      	subs	r4, r7, #1
    232e:	41a7      	sbcs	r7, r4
    2330:	2400      	movs	r4, #0
    2332:	e779      	b.n	2228 <__aeabi_dadd+0x4cc>
    2334:	000c      	movs	r4, r1
    2336:	0017      	movs	r7, r2
    2338:	4e0e      	ldr	r6, [pc, #56]	; (2374 <__aeabi_dadd+0x618>)
    233a:	e593      	b.n	1e64 <__aeabi_dadd+0x108>
    233c:	000c      	movs	r4, r1
    233e:	0017      	movs	r7, r2
    2340:	e590      	b.n	1e64 <__aeabi_dadd+0x108>
    2342:	4656      	mov	r6, sl
    2344:	0023      	movs	r3, r4
    2346:	3e20      	subs	r6, #32
    2348:	40f3      	lsrs	r3, r6
    234a:	4699      	mov	r9, r3
    234c:	4653      	mov	r3, sl
    234e:	2b20      	cmp	r3, #32
    2350:	d00e      	beq.n	2370 <__aeabi_dadd+0x614>
    2352:	2340      	movs	r3, #64	; 0x40
    2354:	4656      	mov	r6, sl
    2356:	1b9b      	subs	r3, r3, r6
    2358:	409c      	lsls	r4, r3
    235a:	4327      	orrs	r7, r4
    235c:	1e7c      	subs	r4, r7, #1
    235e:	41a7      	sbcs	r7, r4
    2360:	464b      	mov	r3, r9
    2362:	2400      	movs	r4, #0
    2364:	431f      	orrs	r7, r3
    2366:	e75f      	b.n	2228 <__aeabi_dadd+0x4cc>
    2368:	2400      	movs	r4, #0
    236a:	e7d2      	b.n	2312 <__aeabi_dadd+0x5b6>
    236c:	0017      	movs	r7, r2
    236e:	e5b2      	b.n	1ed6 <__aeabi_dadd+0x17a>
    2370:	2400      	movs	r4, #0
    2372:	e7f2      	b.n	235a <__aeabi_dadd+0x5fe>
    2374:	000007ff 	.word	0x000007ff
    2378:	ff7fffff 	.word	0xff7fffff

0000237c <__aeabi_ddiv>:
    237c:	b5f0      	push	{r4, r5, r6, r7, lr}
    237e:	4657      	mov	r7, sl
    2380:	4645      	mov	r5, r8
    2382:	46de      	mov	lr, fp
    2384:	464e      	mov	r6, r9
    2386:	b5e0      	push	{r5, r6, r7, lr}
    2388:	004c      	lsls	r4, r1, #1
    238a:	030e      	lsls	r6, r1, #12
    238c:	b087      	sub	sp, #28
    238e:	4683      	mov	fp, r0
    2390:	4692      	mov	sl, r2
    2392:	001d      	movs	r5, r3
    2394:	4680      	mov	r8, r0
    2396:	0b36      	lsrs	r6, r6, #12
    2398:	0d64      	lsrs	r4, r4, #21
    239a:	0fcf      	lsrs	r7, r1, #31
    239c:	2c00      	cmp	r4, #0
    239e:	d04f      	beq.n	2440 <__aeabi_ddiv+0xc4>
    23a0:	4b6f      	ldr	r3, [pc, #444]	; (2560 <__aeabi_ddiv+0x1e4>)
    23a2:	429c      	cmp	r4, r3
    23a4:	d035      	beq.n	2412 <__aeabi_ddiv+0x96>
    23a6:	2380      	movs	r3, #128	; 0x80
    23a8:	0f42      	lsrs	r2, r0, #29
    23aa:	041b      	lsls	r3, r3, #16
    23ac:	00f6      	lsls	r6, r6, #3
    23ae:	4313      	orrs	r3, r2
    23b0:	4333      	orrs	r3, r6
    23b2:	4699      	mov	r9, r3
    23b4:	00c3      	lsls	r3, r0, #3
    23b6:	4698      	mov	r8, r3
    23b8:	4b6a      	ldr	r3, [pc, #424]	; (2564 <__aeabi_ddiv+0x1e8>)
    23ba:	2600      	movs	r6, #0
    23bc:	469c      	mov	ip, r3
    23be:	2300      	movs	r3, #0
    23c0:	4464      	add	r4, ip
    23c2:	9303      	str	r3, [sp, #12]
    23c4:	032b      	lsls	r3, r5, #12
    23c6:	0b1b      	lsrs	r3, r3, #12
    23c8:	469b      	mov	fp, r3
    23ca:	006b      	lsls	r3, r5, #1
    23cc:	0fed      	lsrs	r5, r5, #31
    23ce:	4650      	mov	r0, sl
    23d0:	0d5b      	lsrs	r3, r3, #21
    23d2:	9501      	str	r5, [sp, #4]
    23d4:	d05e      	beq.n	2494 <__aeabi_ddiv+0x118>
    23d6:	4a62      	ldr	r2, [pc, #392]	; (2560 <__aeabi_ddiv+0x1e4>)
    23d8:	4293      	cmp	r3, r2
    23da:	d053      	beq.n	2484 <__aeabi_ddiv+0x108>
    23dc:	465a      	mov	r2, fp
    23de:	00d1      	lsls	r1, r2, #3
    23e0:	2280      	movs	r2, #128	; 0x80
    23e2:	0f40      	lsrs	r0, r0, #29
    23e4:	0412      	lsls	r2, r2, #16
    23e6:	4302      	orrs	r2, r0
    23e8:	430a      	orrs	r2, r1
    23ea:	4693      	mov	fp, r2
    23ec:	4652      	mov	r2, sl
    23ee:	00d1      	lsls	r1, r2, #3
    23f0:	4a5c      	ldr	r2, [pc, #368]	; (2564 <__aeabi_ddiv+0x1e8>)
    23f2:	4694      	mov	ip, r2
    23f4:	2200      	movs	r2, #0
    23f6:	4463      	add	r3, ip
    23f8:	0038      	movs	r0, r7
    23fa:	4068      	eors	r0, r5
    23fc:	4684      	mov	ip, r0
    23fe:	9002      	str	r0, [sp, #8]
    2400:	1ae4      	subs	r4, r4, r3
    2402:	4316      	orrs	r6, r2
    2404:	2e0f      	cmp	r6, #15
    2406:	d900      	bls.n	240a <__aeabi_ddiv+0x8e>
    2408:	e0b4      	b.n	2574 <__aeabi_ddiv+0x1f8>
    240a:	4b57      	ldr	r3, [pc, #348]	; (2568 <__aeabi_ddiv+0x1ec>)
    240c:	00b6      	lsls	r6, r6, #2
    240e:	599b      	ldr	r3, [r3, r6]
    2410:	469f      	mov	pc, r3
    2412:	0003      	movs	r3, r0
    2414:	4333      	orrs	r3, r6
    2416:	4699      	mov	r9, r3
    2418:	d16c      	bne.n	24f4 <__aeabi_ddiv+0x178>
    241a:	2300      	movs	r3, #0
    241c:	4698      	mov	r8, r3
    241e:	3302      	adds	r3, #2
    2420:	2608      	movs	r6, #8
    2422:	9303      	str	r3, [sp, #12]
    2424:	e7ce      	b.n	23c4 <__aeabi_ddiv+0x48>
    2426:	46cb      	mov	fp, r9
    2428:	4641      	mov	r1, r8
    242a:	9a03      	ldr	r2, [sp, #12]
    242c:	9701      	str	r7, [sp, #4]
    242e:	2a02      	cmp	r2, #2
    2430:	d165      	bne.n	24fe <__aeabi_ddiv+0x182>
    2432:	9b01      	ldr	r3, [sp, #4]
    2434:	4c4a      	ldr	r4, [pc, #296]	; (2560 <__aeabi_ddiv+0x1e4>)
    2436:	469c      	mov	ip, r3
    2438:	2300      	movs	r3, #0
    243a:	2200      	movs	r2, #0
    243c:	4698      	mov	r8, r3
    243e:	e06b      	b.n	2518 <__aeabi_ddiv+0x19c>
    2440:	0003      	movs	r3, r0
    2442:	4333      	orrs	r3, r6
    2444:	4699      	mov	r9, r3
    2446:	d04e      	beq.n	24e6 <__aeabi_ddiv+0x16a>
    2448:	2e00      	cmp	r6, #0
    244a:	d100      	bne.n	244e <__aeabi_ddiv+0xd2>
    244c:	e1bc      	b.n	27c8 <__aeabi_ddiv+0x44c>
    244e:	0030      	movs	r0, r6
    2450:	f001 f8ca 	bl	35e8 <__clzsi2>
    2454:	0003      	movs	r3, r0
    2456:	3b0b      	subs	r3, #11
    2458:	2b1c      	cmp	r3, #28
    245a:	dd00      	ble.n	245e <__aeabi_ddiv+0xe2>
    245c:	e1ac      	b.n	27b8 <__aeabi_ddiv+0x43c>
    245e:	221d      	movs	r2, #29
    2460:	1ad3      	subs	r3, r2, r3
    2462:	465a      	mov	r2, fp
    2464:	0001      	movs	r1, r0
    2466:	40da      	lsrs	r2, r3
    2468:	3908      	subs	r1, #8
    246a:	408e      	lsls	r6, r1
    246c:	0013      	movs	r3, r2
    246e:	4333      	orrs	r3, r6
    2470:	4699      	mov	r9, r3
    2472:	465b      	mov	r3, fp
    2474:	408b      	lsls	r3, r1
    2476:	4698      	mov	r8, r3
    2478:	2300      	movs	r3, #0
    247a:	4c3c      	ldr	r4, [pc, #240]	; (256c <__aeabi_ddiv+0x1f0>)
    247c:	2600      	movs	r6, #0
    247e:	1a24      	subs	r4, r4, r0
    2480:	9303      	str	r3, [sp, #12]
    2482:	e79f      	b.n	23c4 <__aeabi_ddiv+0x48>
    2484:	4651      	mov	r1, sl
    2486:	465a      	mov	r2, fp
    2488:	4311      	orrs	r1, r2
    248a:	d129      	bne.n	24e0 <__aeabi_ddiv+0x164>
    248c:	2200      	movs	r2, #0
    248e:	4693      	mov	fp, r2
    2490:	3202      	adds	r2, #2
    2492:	e7b1      	b.n	23f8 <__aeabi_ddiv+0x7c>
    2494:	4659      	mov	r1, fp
    2496:	4301      	orrs	r1, r0
    2498:	d01e      	beq.n	24d8 <__aeabi_ddiv+0x15c>
    249a:	465b      	mov	r3, fp
    249c:	2b00      	cmp	r3, #0
    249e:	d100      	bne.n	24a2 <__aeabi_ddiv+0x126>
    24a0:	e19e      	b.n	27e0 <__aeabi_ddiv+0x464>
    24a2:	4658      	mov	r0, fp
    24a4:	f001 f8a0 	bl	35e8 <__clzsi2>
    24a8:	0003      	movs	r3, r0
    24aa:	3b0b      	subs	r3, #11
    24ac:	2b1c      	cmp	r3, #28
    24ae:	dd00      	ble.n	24b2 <__aeabi_ddiv+0x136>
    24b0:	e18f      	b.n	27d2 <__aeabi_ddiv+0x456>
    24b2:	0002      	movs	r2, r0
    24b4:	4659      	mov	r1, fp
    24b6:	3a08      	subs	r2, #8
    24b8:	4091      	lsls	r1, r2
    24ba:	468b      	mov	fp, r1
    24bc:	211d      	movs	r1, #29
    24be:	1acb      	subs	r3, r1, r3
    24c0:	4651      	mov	r1, sl
    24c2:	40d9      	lsrs	r1, r3
    24c4:	000b      	movs	r3, r1
    24c6:	4659      	mov	r1, fp
    24c8:	430b      	orrs	r3, r1
    24ca:	4651      	mov	r1, sl
    24cc:	469b      	mov	fp, r3
    24ce:	4091      	lsls	r1, r2
    24d0:	4b26      	ldr	r3, [pc, #152]	; (256c <__aeabi_ddiv+0x1f0>)
    24d2:	2200      	movs	r2, #0
    24d4:	1a1b      	subs	r3, r3, r0
    24d6:	e78f      	b.n	23f8 <__aeabi_ddiv+0x7c>
    24d8:	2300      	movs	r3, #0
    24da:	2201      	movs	r2, #1
    24dc:	469b      	mov	fp, r3
    24de:	e78b      	b.n	23f8 <__aeabi_ddiv+0x7c>
    24e0:	4651      	mov	r1, sl
    24e2:	2203      	movs	r2, #3
    24e4:	e788      	b.n	23f8 <__aeabi_ddiv+0x7c>
    24e6:	2300      	movs	r3, #0
    24e8:	4698      	mov	r8, r3
    24ea:	3301      	adds	r3, #1
    24ec:	2604      	movs	r6, #4
    24ee:	2400      	movs	r4, #0
    24f0:	9303      	str	r3, [sp, #12]
    24f2:	e767      	b.n	23c4 <__aeabi_ddiv+0x48>
    24f4:	2303      	movs	r3, #3
    24f6:	46b1      	mov	r9, r6
    24f8:	9303      	str	r3, [sp, #12]
    24fa:	260c      	movs	r6, #12
    24fc:	e762      	b.n	23c4 <__aeabi_ddiv+0x48>
    24fe:	2a03      	cmp	r2, #3
    2500:	d100      	bne.n	2504 <__aeabi_ddiv+0x188>
    2502:	e25c      	b.n	29be <__aeabi_ddiv+0x642>
    2504:	9b01      	ldr	r3, [sp, #4]
    2506:	2a01      	cmp	r2, #1
    2508:	d000      	beq.n	250c <__aeabi_ddiv+0x190>
    250a:	e1e4      	b.n	28d6 <__aeabi_ddiv+0x55a>
    250c:	4013      	ands	r3, r2
    250e:	469c      	mov	ip, r3
    2510:	2300      	movs	r3, #0
    2512:	2400      	movs	r4, #0
    2514:	2200      	movs	r2, #0
    2516:	4698      	mov	r8, r3
    2518:	2100      	movs	r1, #0
    251a:	0312      	lsls	r2, r2, #12
    251c:	0b13      	lsrs	r3, r2, #12
    251e:	0d0a      	lsrs	r2, r1, #20
    2520:	0512      	lsls	r2, r2, #20
    2522:	431a      	orrs	r2, r3
    2524:	0523      	lsls	r3, r4, #20
    2526:	4c12      	ldr	r4, [pc, #72]	; (2570 <__aeabi_ddiv+0x1f4>)
    2528:	4640      	mov	r0, r8
    252a:	4022      	ands	r2, r4
    252c:	4313      	orrs	r3, r2
    252e:	4662      	mov	r2, ip
    2530:	005b      	lsls	r3, r3, #1
    2532:	07d2      	lsls	r2, r2, #31
    2534:	085b      	lsrs	r3, r3, #1
    2536:	4313      	orrs	r3, r2
    2538:	0019      	movs	r1, r3
    253a:	b007      	add	sp, #28
    253c:	bc3c      	pop	{r2, r3, r4, r5}
    253e:	4690      	mov	r8, r2
    2540:	4699      	mov	r9, r3
    2542:	46a2      	mov	sl, r4
    2544:	46ab      	mov	fp, r5
    2546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2548:	2300      	movs	r3, #0
    254a:	2280      	movs	r2, #128	; 0x80
    254c:	469c      	mov	ip, r3
    254e:	0312      	lsls	r2, r2, #12
    2550:	4698      	mov	r8, r3
    2552:	4c03      	ldr	r4, [pc, #12]	; (2560 <__aeabi_ddiv+0x1e4>)
    2554:	e7e0      	b.n	2518 <__aeabi_ddiv+0x19c>
    2556:	2300      	movs	r3, #0
    2558:	4c01      	ldr	r4, [pc, #4]	; (2560 <__aeabi_ddiv+0x1e4>)
    255a:	2200      	movs	r2, #0
    255c:	4698      	mov	r8, r3
    255e:	e7db      	b.n	2518 <__aeabi_ddiv+0x19c>
    2560:	000007ff 	.word	0x000007ff
    2564:	fffffc01 	.word	0xfffffc01
    2568:	000036bc 	.word	0x000036bc
    256c:	fffffc0d 	.word	0xfffffc0d
    2570:	800fffff 	.word	0x800fffff
    2574:	45d9      	cmp	r9, fp
    2576:	d900      	bls.n	257a <__aeabi_ddiv+0x1fe>
    2578:	e139      	b.n	27ee <__aeabi_ddiv+0x472>
    257a:	d100      	bne.n	257e <__aeabi_ddiv+0x202>
    257c:	e134      	b.n	27e8 <__aeabi_ddiv+0x46c>
    257e:	2300      	movs	r3, #0
    2580:	4646      	mov	r6, r8
    2582:	464d      	mov	r5, r9
    2584:	469a      	mov	sl, r3
    2586:	3c01      	subs	r4, #1
    2588:	465b      	mov	r3, fp
    258a:	0e0a      	lsrs	r2, r1, #24
    258c:	021b      	lsls	r3, r3, #8
    258e:	431a      	orrs	r2, r3
    2590:	020b      	lsls	r3, r1, #8
    2592:	0c17      	lsrs	r7, r2, #16
    2594:	9303      	str	r3, [sp, #12]
    2596:	0413      	lsls	r3, r2, #16
    2598:	0c1b      	lsrs	r3, r3, #16
    259a:	0039      	movs	r1, r7
    259c:	0028      	movs	r0, r5
    259e:	4690      	mov	r8, r2
    25a0:	9301      	str	r3, [sp, #4]
    25a2:	f7ff fb4f 	bl	1c44 <__udivsi3>
    25a6:	0002      	movs	r2, r0
    25a8:	9b01      	ldr	r3, [sp, #4]
    25aa:	4683      	mov	fp, r0
    25ac:	435a      	muls	r2, r3
    25ae:	0028      	movs	r0, r5
    25b0:	0039      	movs	r1, r7
    25b2:	4691      	mov	r9, r2
    25b4:	f7ff fbcc 	bl	1d50 <__aeabi_uidivmod>
    25b8:	0c35      	lsrs	r5, r6, #16
    25ba:	0409      	lsls	r1, r1, #16
    25bc:	430d      	orrs	r5, r1
    25be:	45a9      	cmp	r9, r5
    25c0:	d90d      	bls.n	25de <__aeabi_ddiv+0x262>
    25c2:	465b      	mov	r3, fp
    25c4:	4445      	add	r5, r8
    25c6:	3b01      	subs	r3, #1
    25c8:	45a8      	cmp	r8, r5
    25ca:	d900      	bls.n	25ce <__aeabi_ddiv+0x252>
    25cc:	e13a      	b.n	2844 <__aeabi_ddiv+0x4c8>
    25ce:	45a9      	cmp	r9, r5
    25d0:	d800      	bhi.n	25d4 <__aeabi_ddiv+0x258>
    25d2:	e137      	b.n	2844 <__aeabi_ddiv+0x4c8>
    25d4:	2302      	movs	r3, #2
    25d6:	425b      	negs	r3, r3
    25d8:	469c      	mov	ip, r3
    25da:	4445      	add	r5, r8
    25dc:	44e3      	add	fp, ip
    25de:	464b      	mov	r3, r9
    25e0:	1aeb      	subs	r3, r5, r3
    25e2:	0039      	movs	r1, r7
    25e4:	0018      	movs	r0, r3
    25e6:	9304      	str	r3, [sp, #16]
    25e8:	f7ff fb2c 	bl	1c44 <__udivsi3>
    25ec:	9b01      	ldr	r3, [sp, #4]
    25ee:	0005      	movs	r5, r0
    25f0:	4343      	muls	r3, r0
    25f2:	0039      	movs	r1, r7
    25f4:	9804      	ldr	r0, [sp, #16]
    25f6:	4699      	mov	r9, r3
    25f8:	f7ff fbaa 	bl	1d50 <__aeabi_uidivmod>
    25fc:	0433      	lsls	r3, r6, #16
    25fe:	0409      	lsls	r1, r1, #16
    2600:	0c1b      	lsrs	r3, r3, #16
    2602:	430b      	orrs	r3, r1
    2604:	4599      	cmp	r9, r3
    2606:	d909      	bls.n	261c <__aeabi_ddiv+0x2a0>
    2608:	4443      	add	r3, r8
    260a:	1e6a      	subs	r2, r5, #1
    260c:	4598      	cmp	r8, r3
    260e:	d900      	bls.n	2612 <__aeabi_ddiv+0x296>
    2610:	e11a      	b.n	2848 <__aeabi_ddiv+0x4cc>
    2612:	4599      	cmp	r9, r3
    2614:	d800      	bhi.n	2618 <__aeabi_ddiv+0x29c>
    2616:	e117      	b.n	2848 <__aeabi_ddiv+0x4cc>
    2618:	3d02      	subs	r5, #2
    261a:	4443      	add	r3, r8
    261c:	464a      	mov	r2, r9
    261e:	1a9b      	subs	r3, r3, r2
    2620:	465a      	mov	r2, fp
    2622:	0412      	lsls	r2, r2, #16
    2624:	432a      	orrs	r2, r5
    2626:	9903      	ldr	r1, [sp, #12]
    2628:	4693      	mov	fp, r2
    262a:	0c10      	lsrs	r0, r2, #16
    262c:	0c0a      	lsrs	r2, r1, #16
    262e:	4691      	mov	r9, r2
    2630:	0409      	lsls	r1, r1, #16
    2632:	465a      	mov	r2, fp
    2634:	0c09      	lsrs	r1, r1, #16
    2636:	464e      	mov	r6, r9
    2638:	000d      	movs	r5, r1
    263a:	0412      	lsls	r2, r2, #16
    263c:	0c12      	lsrs	r2, r2, #16
    263e:	4345      	muls	r5, r0
    2640:	9105      	str	r1, [sp, #20]
    2642:	4351      	muls	r1, r2
    2644:	4372      	muls	r2, r6
    2646:	4370      	muls	r0, r6
    2648:	1952      	adds	r2, r2, r5
    264a:	0c0e      	lsrs	r6, r1, #16
    264c:	18b2      	adds	r2, r6, r2
    264e:	4295      	cmp	r5, r2
    2650:	d903      	bls.n	265a <__aeabi_ddiv+0x2de>
    2652:	2580      	movs	r5, #128	; 0x80
    2654:	026d      	lsls	r5, r5, #9
    2656:	46ac      	mov	ip, r5
    2658:	4460      	add	r0, ip
    265a:	0c15      	lsrs	r5, r2, #16
    265c:	0409      	lsls	r1, r1, #16
    265e:	0412      	lsls	r2, r2, #16
    2660:	0c09      	lsrs	r1, r1, #16
    2662:	1828      	adds	r0, r5, r0
    2664:	1852      	adds	r2, r2, r1
    2666:	4283      	cmp	r3, r0
    2668:	d200      	bcs.n	266c <__aeabi_ddiv+0x2f0>
    266a:	e0ce      	b.n	280a <__aeabi_ddiv+0x48e>
    266c:	d100      	bne.n	2670 <__aeabi_ddiv+0x2f4>
    266e:	e0c8      	b.n	2802 <__aeabi_ddiv+0x486>
    2670:	1a1d      	subs	r5, r3, r0
    2672:	4653      	mov	r3, sl
    2674:	1a9e      	subs	r6, r3, r2
    2676:	45b2      	cmp	sl, r6
    2678:	4192      	sbcs	r2, r2
    267a:	4252      	negs	r2, r2
    267c:	1aab      	subs	r3, r5, r2
    267e:	469a      	mov	sl, r3
    2680:	4598      	cmp	r8, r3
    2682:	d100      	bne.n	2686 <__aeabi_ddiv+0x30a>
    2684:	e117      	b.n	28b6 <__aeabi_ddiv+0x53a>
    2686:	0039      	movs	r1, r7
    2688:	0018      	movs	r0, r3
    268a:	f7ff fadb 	bl	1c44 <__udivsi3>
    268e:	9b01      	ldr	r3, [sp, #4]
    2690:	0005      	movs	r5, r0
    2692:	4343      	muls	r3, r0
    2694:	0039      	movs	r1, r7
    2696:	4650      	mov	r0, sl
    2698:	9304      	str	r3, [sp, #16]
    269a:	f7ff fb59 	bl	1d50 <__aeabi_uidivmod>
    269e:	9804      	ldr	r0, [sp, #16]
    26a0:	040b      	lsls	r3, r1, #16
    26a2:	0c31      	lsrs	r1, r6, #16
    26a4:	4319      	orrs	r1, r3
    26a6:	4288      	cmp	r0, r1
    26a8:	d909      	bls.n	26be <__aeabi_ddiv+0x342>
    26aa:	4441      	add	r1, r8
    26ac:	1e6b      	subs	r3, r5, #1
    26ae:	4588      	cmp	r8, r1
    26b0:	d900      	bls.n	26b4 <__aeabi_ddiv+0x338>
    26b2:	e107      	b.n	28c4 <__aeabi_ddiv+0x548>
    26b4:	4288      	cmp	r0, r1
    26b6:	d800      	bhi.n	26ba <__aeabi_ddiv+0x33e>
    26b8:	e104      	b.n	28c4 <__aeabi_ddiv+0x548>
    26ba:	3d02      	subs	r5, #2
    26bc:	4441      	add	r1, r8
    26be:	9b04      	ldr	r3, [sp, #16]
    26c0:	1acb      	subs	r3, r1, r3
    26c2:	0018      	movs	r0, r3
    26c4:	0039      	movs	r1, r7
    26c6:	9304      	str	r3, [sp, #16]
    26c8:	f7ff fabc 	bl	1c44 <__udivsi3>
    26cc:	9b01      	ldr	r3, [sp, #4]
    26ce:	4682      	mov	sl, r0
    26d0:	4343      	muls	r3, r0
    26d2:	0039      	movs	r1, r7
    26d4:	9804      	ldr	r0, [sp, #16]
    26d6:	9301      	str	r3, [sp, #4]
    26d8:	f7ff fb3a 	bl	1d50 <__aeabi_uidivmod>
    26dc:	9801      	ldr	r0, [sp, #4]
    26de:	040b      	lsls	r3, r1, #16
    26e0:	0431      	lsls	r1, r6, #16
    26e2:	0c09      	lsrs	r1, r1, #16
    26e4:	4319      	orrs	r1, r3
    26e6:	4288      	cmp	r0, r1
    26e8:	d90d      	bls.n	2706 <__aeabi_ddiv+0x38a>
    26ea:	4653      	mov	r3, sl
    26ec:	4441      	add	r1, r8
    26ee:	3b01      	subs	r3, #1
    26f0:	4588      	cmp	r8, r1
    26f2:	d900      	bls.n	26f6 <__aeabi_ddiv+0x37a>
    26f4:	e0e8      	b.n	28c8 <__aeabi_ddiv+0x54c>
    26f6:	4288      	cmp	r0, r1
    26f8:	d800      	bhi.n	26fc <__aeabi_ddiv+0x380>
    26fa:	e0e5      	b.n	28c8 <__aeabi_ddiv+0x54c>
    26fc:	2302      	movs	r3, #2
    26fe:	425b      	negs	r3, r3
    2700:	469c      	mov	ip, r3
    2702:	4441      	add	r1, r8
    2704:	44e2      	add	sl, ip
    2706:	9b01      	ldr	r3, [sp, #4]
    2708:	042d      	lsls	r5, r5, #16
    270a:	1ace      	subs	r6, r1, r3
    270c:	4651      	mov	r1, sl
    270e:	4329      	orrs	r1, r5
    2710:	9d05      	ldr	r5, [sp, #20]
    2712:	464f      	mov	r7, r9
    2714:	002a      	movs	r2, r5
    2716:	040b      	lsls	r3, r1, #16
    2718:	0c08      	lsrs	r0, r1, #16
    271a:	0c1b      	lsrs	r3, r3, #16
    271c:	435a      	muls	r2, r3
    271e:	4345      	muls	r5, r0
    2720:	437b      	muls	r3, r7
    2722:	4378      	muls	r0, r7
    2724:	195b      	adds	r3, r3, r5
    2726:	0c17      	lsrs	r7, r2, #16
    2728:	18fb      	adds	r3, r7, r3
    272a:	429d      	cmp	r5, r3
    272c:	d903      	bls.n	2736 <__aeabi_ddiv+0x3ba>
    272e:	2580      	movs	r5, #128	; 0x80
    2730:	026d      	lsls	r5, r5, #9
    2732:	46ac      	mov	ip, r5
    2734:	4460      	add	r0, ip
    2736:	0c1d      	lsrs	r5, r3, #16
    2738:	0412      	lsls	r2, r2, #16
    273a:	041b      	lsls	r3, r3, #16
    273c:	0c12      	lsrs	r2, r2, #16
    273e:	1828      	adds	r0, r5, r0
    2740:	189b      	adds	r3, r3, r2
    2742:	4286      	cmp	r6, r0
    2744:	d200      	bcs.n	2748 <__aeabi_ddiv+0x3cc>
    2746:	e093      	b.n	2870 <__aeabi_ddiv+0x4f4>
    2748:	d100      	bne.n	274c <__aeabi_ddiv+0x3d0>
    274a:	e08e      	b.n	286a <__aeabi_ddiv+0x4ee>
    274c:	2301      	movs	r3, #1
    274e:	4319      	orrs	r1, r3
    2750:	4ba0      	ldr	r3, [pc, #640]	; (29d4 <__aeabi_ddiv+0x658>)
    2752:	18e3      	adds	r3, r4, r3
    2754:	2b00      	cmp	r3, #0
    2756:	dc00      	bgt.n	275a <__aeabi_ddiv+0x3de>
    2758:	e099      	b.n	288e <__aeabi_ddiv+0x512>
    275a:	074a      	lsls	r2, r1, #29
    275c:	d000      	beq.n	2760 <__aeabi_ddiv+0x3e4>
    275e:	e09e      	b.n	289e <__aeabi_ddiv+0x522>
    2760:	465a      	mov	r2, fp
    2762:	01d2      	lsls	r2, r2, #7
    2764:	d506      	bpl.n	2774 <__aeabi_ddiv+0x3f8>
    2766:	465a      	mov	r2, fp
    2768:	4b9b      	ldr	r3, [pc, #620]	; (29d8 <__aeabi_ddiv+0x65c>)
    276a:	401a      	ands	r2, r3
    276c:	2380      	movs	r3, #128	; 0x80
    276e:	4693      	mov	fp, r2
    2770:	00db      	lsls	r3, r3, #3
    2772:	18e3      	adds	r3, r4, r3
    2774:	4a99      	ldr	r2, [pc, #612]	; (29dc <__aeabi_ddiv+0x660>)
    2776:	4293      	cmp	r3, r2
    2778:	dd68      	ble.n	284c <__aeabi_ddiv+0x4d0>
    277a:	2301      	movs	r3, #1
    277c:	9a02      	ldr	r2, [sp, #8]
    277e:	4c98      	ldr	r4, [pc, #608]	; (29e0 <__aeabi_ddiv+0x664>)
    2780:	401a      	ands	r2, r3
    2782:	2300      	movs	r3, #0
    2784:	4694      	mov	ip, r2
    2786:	4698      	mov	r8, r3
    2788:	2200      	movs	r2, #0
    278a:	e6c5      	b.n	2518 <__aeabi_ddiv+0x19c>
    278c:	2280      	movs	r2, #128	; 0x80
    278e:	464b      	mov	r3, r9
    2790:	0312      	lsls	r2, r2, #12
    2792:	4213      	tst	r3, r2
    2794:	d00a      	beq.n	27ac <__aeabi_ddiv+0x430>
    2796:	465b      	mov	r3, fp
    2798:	4213      	tst	r3, r2
    279a:	d106      	bne.n	27aa <__aeabi_ddiv+0x42e>
    279c:	431a      	orrs	r2, r3
    279e:	0312      	lsls	r2, r2, #12
    27a0:	0b12      	lsrs	r2, r2, #12
    27a2:	46ac      	mov	ip, r5
    27a4:	4688      	mov	r8, r1
    27a6:	4c8e      	ldr	r4, [pc, #568]	; (29e0 <__aeabi_ddiv+0x664>)
    27a8:	e6b6      	b.n	2518 <__aeabi_ddiv+0x19c>
    27aa:	464b      	mov	r3, r9
    27ac:	431a      	orrs	r2, r3
    27ae:	0312      	lsls	r2, r2, #12
    27b0:	0b12      	lsrs	r2, r2, #12
    27b2:	46bc      	mov	ip, r7
    27b4:	4c8a      	ldr	r4, [pc, #552]	; (29e0 <__aeabi_ddiv+0x664>)
    27b6:	e6af      	b.n	2518 <__aeabi_ddiv+0x19c>
    27b8:	0003      	movs	r3, r0
    27ba:	465a      	mov	r2, fp
    27bc:	3b28      	subs	r3, #40	; 0x28
    27be:	409a      	lsls	r2, r3
    27c0:	2300      	movs	r3, #0
    27c2:	4691      	mov	r9, r2
    27c4:	4698      	mov	r8, r3
    27c6:	e657      	b.n	2478 <__aeabi_ddiv+0xfc>
    27c8:	4658      	mov	r0, fp
    27ca:	f000 ff0d 	bl	35e8 <__clzsi2>
    27ce:	3020      	adds	r0, #32
    27d0:	e640      	b.n	2454 <__aeabi_ddiv+0xd8>
    27d2:	0003      	movs	r3, r0
    27d4:	4652      	mov	r2, sl
    27d6:	3b28      	subs	r3, #40	; 0x28
    27d8:	409a      	lsls	r2, r3
    27da:	2100      	movs	r1, #0
    27dc:	4693      	mov	fp, r2
    27de:	e677      	b.n	24d0 <__aeabi_ddiv+0x154>
    27e0:	f000 ff02 	bl	35e8 <__clzsi2>
    27e4:	3020      	adds	r0, #32
    27e6:	e65f      	b.n	24a8 <__aeabi_ddiv+0x12c>
    27e8:	4588      	cmp	r8, r1
    27ea:	d200      	bcs.n	27ee <__aeabi_ddiv+0x472>
    27ec:	e6c7      	b.n	257e <__aeabi_ddiv+0x202>
    27ee:	464b      	mov	r3, r9
    27f0:	07de      	lsls	r6, r3, #31
    27f2:	085d      	lsrs	r5, r3, #1
    27f4:	4643      	mov	r3, r8
    27f6:	085b      	lsrs	r3, r3, #1
    27f8:	431e      	orrs	r6, r3
    27fa:	4643      	mov	r3, r8
    27fc:	07db      	lsls	r3, r3, #31
    27fe:	469a      	mov	sl, r3
    2800:	e6c2      	b.n	2588 <__aeabi_ddiv+0x20c>
    2802:	2500      	movs	r5, #0
    2804:	4592      	cmp	sl, r2
    2806:	d300      	bcc.n	280a <__aeabi_ddiv+0x48e>
    2808:	e733      	b.n	2672 <__aeabi_ddiv+0x2f6>
    280a:	9e03      	ldr	r6, [sp, #12]
    280c:	4659      	mov	r1, fp
    280e:	46b4      	mov	ip, r6
    2810:	44e2      	add	sl, ip
    2812:	45b2      	cmp	sl, r6
    2814:	41ad      	sbcs	r5, r5
    2816:	426d      	negs	r5, r5
    2818:	4445      	add	r5, r8
    281a:	18eb      	adds	r3, r5, r3
    281c:	3901      	subs	r1, #1
    281e:	4598      	cmp	r8, r3
    2820:	d207      	bcs.n	2832 <__aeabi_ddiv+0x4b6>
    2822:	4298      	cmp	r0, r3
    2824:	d900      	bls.n	2828 <__aeabi_ddiv+0x4ac>
    2826:	e07f      	b.n	2928 <__aeabi_ddiv+0x5ac>
    2828:	d100      	bne.n	282c <__aeabi_ddiv+0x4b0>
    282a:	e0bc      	b.n	29a6 <__aeabi_ddiv+0x62a>
    282c:	1a1d      	subs	r5, r3, r0
    282e:	468b      	mov	fp, r1
    2830:	e71f      	b.n	2672 <__aeabi_ddiv+0x2f6>
    2832:	4598      	cmp	r8, r3
    2834:	d1fa      	bne.n	282c <__aeabi_ddiv+0x4b0>
    2836:	9d03      	ldr	r5, [sp, #12]
    2838:	4555      	cmp	r5, sl
    283a:	d9f2      	bls.n	2822 <__aeabi_ddiv+0x4a6>
    283c:	4643      	mov	r3, r8
    283e:	468b      	mov	fp, r1
    2840:	1a1d      	subs	r5, r3, r0
    2842:	e716      	b.n	2672 <__aeabi_ddiv+0x2f6>
    2844:	469b      	mov	fp, r3
    2846:	e6ca      	b.n	25de <__aeabi_ddiv+0x262>
    2848:	0015      	movs	r5, r2
    284a:	e6e7      	b.n	261c <__aeabi_ddiv+0x2a0>
    284c:	465a      	mov	r2, fp
    284e:	08c9      	lsrs	r1, r1, #3
    2850:	0752      	lsls	r2, r2, #29
    2852:	430a      	orrs	r2, r1
    2854:	055b      	lsls	r3, r3, #21
    2856:	4690      	mov	r8, r2
    2858:	0d5c      	lsrs	r4, r3, #21
    285a:	465a      	mov	r2, fp
    285c:	2301      	movs	r3, #1
    285e:	9902      	ldr	r1, [sp, #8]
    2860:	0252      	lsls	r2, r2, #9
    2862:	4019      	ands	r1, r3
    2864:	0b12      	lsrs	r2, r2, #12
    2866:	468c      	mov	ip, r1
    2868:	e656      	b.n	2518 <__aeabi_ddiv+0x19c>
    286a:	2b00      	cmp	r3, #0
    286c:	d100      	bne.n	2870 <__aeabi_ddiv+0x4f4>
    286e:	e76f      	b.n	2750 <__aeabi_ddiv+0x3d4>
    2870:	4446      	add	r6, r8
    2872:	1e4a      	subs	r2, r1, #1
    2874:	45b0      	cmp	r8, r6
    2876:	d929      	bls.n	28cc <__aeabi_ddiv+0x550>
    2878:	0011      	movs	r1, r2
    287a:	4286      	cmp	r6, r0
    287c:	d000      	beq.n	2880 <__aeabi_ddiv+0x504>
    287e:	e765      	b.n	274c <__aeabi_ddiv+0x3d0>
    2880:	9a03      	ldr	r2, [sp, #12]
    2882:	4293      	cmp	r3, r2
    2884:	d000      	beq.n	2888 <__aeabi_ddiv+0x50c>
    2886:	e761      	b.n	274c <__aeabi_ddiv+0x3d0>
    2888:	e762      	b.n	2750 <__aeabi_ddiv+0x3d4>
    288a:	2101      	movs	r1, #1
    288c:	4249      	negs	r1, r1
    288e:	2001      	movs	r0, #1
    2890:	1ac2      	subs	r2, r0, r3
    2892:	2a38      	cmp	r2, #56	; 0x38
    2894:	dd21      	ble.n	28da <__aeabi_ddiv+0x55e>
    2896:	9b02      	ldr	r3, [sp, #8]
    2898:	4003      	ands	r3, r0
    289a:	469c      	mov	ip, r3
    289c:	e638      	b.n	2510 <__aeabi_ddiv+0x194>
    289e:	220f      	movs	r2, #15
    28a0:	400a      	ands	r2, r1
    28a2:	2a04      	cmp	r2, #4
    28a4:	d100      	bne.n	28a8 <__aeabi_ddiv+0x52c>
    28a6:	e75b      	b.n	2760 <__aeabi_ddiv+0x3e4>
    28a8:	000a      	movs	r2, r1
    28aa:	1d11      	adds	r1, r2, #4
    28ac:	4291      	cmp	r1, r2
    28ae:	4192      	sbcs	r2, r2
    28b0:	4252      	negs	r2, r2
    28b2:	4493      	add	fp, r2
    28b4:	e754      	b.n	2760 <__aeabi_ddiv+0x3e4>
    28b6:	4b47      	ldr	r3, [pc, #284]	; (29d4 <__aeabi_ddiv+0x658>)
    28b8:	18e3      	adds	r3, r4, r3
    28ba:	2b00      	cmp	r3, #0
    28bc:	dde5      	ble.n	288a <__aeabi_ddiv+0x50e>
    28be:	2201      	movs	r2, #1
    28c0:	4252      	negs	r2, r2
    28c2:	e7f2      	b.n	28aa <__aeabi_ddiv+0x52e>
    28c4:	001d      	movs	r5, r3
    28c6:	e6fa      	b.n	26be <__aeabi_ddiv+0x342>
    28c8:	469a      	mov	sl, r3
    28ca:	e71c      	b.n	2706 <__aeabi_ddiv+0x38a>
    28cc:	42b0      	cmp	r0, r6
    28ce:	d839      	bhi.n	2944 <__aeabi_ddiv+0x5c8>
    28d0:	d06e      	beq.n	29b0 <__aeabi_ddiv+0x634>
    28d2:	0011      	movs	r1, r2
    28d4:	e73a      	b.n	274c <__aeabi_ddiv+0x3d0>
    28d6:	9302      	str	r3, [sp, #8]
    28d8:	e73a      	b.n	2750 <__aeabi_ddiv+0x3d4>
    28da:	2a1f      	cmp	r2, #31
    28dc:	dc3c      	bgt.n	2958 <__aeabi_ddiv+0x5dc>
    28de:	2320      	movs	r3, #32
    28e0:	1a9b      	subs	r3, r3, r2
    28e2:	000c      	movs	r4, r1
    28e4:	4658      	mov	r0, fp
    28e6:	4099      	lsls	r1, r3
    28e8:	4098      	lsls	r0, r3
    28ea:	1e4b      	subs	r3, r1, #1
    28ec:	4199      	sbcs	r1, r3
    28ee:	465b      	mov	r3, fp
    28f0:	40d4      	lsrs	r4, r2
    28f2:	40d3      	lsrs	r3, r2
    28f4:	4320      	orrs	r0, r4
    28f6:	4308      	orrs	r0, r1
    28f8:	001a      	movs	r2, r3
    28fa:	0743      	lsls	r3, r0, #29
    28fc:	d009      	beq.n	2912 <__aeabi_ddiv+0x596>
    28fe:	230f      	movs	r3, #15
    2900:	4003      	ands	r3, r0
    2902:	2b04      	cmp	r3, #4
    2904:	d005      	beq.n	2912 <__aeabi_ddiv+0x596>
    2906:	0001      	movs	r1, r0
    2908:	1d08      	adds	r0, r1, #4
    290a:	4288      	cmp	r0, r1
    290c:	419b      	sbcs	r3, r3
    290e:	425b      	negs	r3, r3
    2910:	18d2      	adds	r2, r2, r3
    2912:	0213      	lsls	r3, r2, #8
    2914:	d53a      	bpl.n	298c <__aeabi_ddiv+0x610>
    2916:	2301      	movs	r3, #1
    2918:	9a02      	ldr	r2, [sp, #8]
    291a:	2401      	movs	r4, #1
    291c:	401a      	ands	r2, r3
    291e:	2300      	movs	r3, #0
    2920:	4694      	mov	ip, r2
    2922:	4698      	mov	r8, r3
    2924:	2200      	movs	r2, #0
    2926:	e5f7      	b.n	2518 <__aeabi_ddiv+0x19c>
    2928:	2102      	movs	r1, #2
    292a:	4249      	negs	r1, r1
    292c:	468c      	mov	ip, r1
    292e:	9d03      	ldr	r5, [sp, #12]
    2930:	44e3      	add	fp, ip
    2932:	46ac      	mov	ip, r5
    2934:	44e2      	add	sl, ip
    2936:	45aa      	cmp	sl, r5
    2938:	41ad      	sbcs	r5, r5
    293a:	426d      	negs	r5, r5
    293c:	4445      	add	r5, r8
    293e:	18ed      	adds	r5, r5, r3
    2940:	1a2d      	subs	r5, r5, r0
    2942:	e696      	b.n	2672 <__aeabi_ddiv+0x2f6>
    2944:	1e8a      	subs	r2, r1, #2
    2946:	9903      	ldr	r1, [sp, #12]
    2948:	004d      	lsls	r5, r1, #1
    294a:	428d      	cmp	r5, r1
    294c:	4189      	sbcs	r1, r1
    294e:	4249      	negs	r1, r1
    2950:	4441      	add	r1, r8
    2952:	1876      	adds	r6, r6, r1
    2954:	9503      	str	r5, [sp, #12]
    2956:	e78f      	b.n	2878 <__aeabi_ddiv+0x4fc>
    2958:	201f      	movs	r0, #31
    295a:	4240      	negs	r0, r0
    295c:	1ac3      	subs	r3, r0, r3
    295e:	4658      	mov	r0, fp
    2960:	40d8      	lsrs	r0, r3
    2962:	0003      	movs	r3, r0
    2964:	2a20      	cmp	r2, #32
    2966:	d028      	beq.n	29ba <__aeabi_ddiv+0x63e>
    2968:	2040      	movs	r0, #64	; 0x40
    296a:	465d      	mov	r5, fp
    296c:	1a82      	subs	r2, r0, r2
    296e:	4095      	lsls	r5, r2
    2970:	4329      	orrs	r1, r5
    2972:	1e4a      	subs	r2, r1, #1
    2974:	4191      	sbcs	r1, r2
    2976:	4319      	orrs	r1, r3
    2978:	2307      	movs	r3, #7
    297a:	2200      	movs	r2, #0
    297c:	400b      	ands	r3, r1
    297e:	d009      	beq.n	2994 <__aeabi_ddiv+0x618>
    2980:	230f      	movs	r3, #15
    2982:	2200      	movs	r2, #0
    2984:	400b      	ands	r3, r1
    2986:	0008      	movs	r0, r1
    2988:	2b04      	cmp	r3, #4
    298a:	d1bd      	bne.n	2908 <__aeabi_ddiv+0x58c>
    298c:	0001      	movs	r1, r0
    298e:	0753      	lsls	r3, r2, #29
    2990:	0252      	lsls	r2, r2, #9
    2992:	0b12      	lsrs	r2, r2, #12
    2994:	08c9      	lsrs	r1, r1, #3
    2996:	4319      	orrs	r1, r3
    2998:	2301      	movs	r3, #1
    299a:	4688      	mov	r8, r1
    299c:	9902      	ldr	r1, [sp, #8]
    299e:	2400      	movs	r4, #0
    29a0:	4019      	ands	r1, r3
    29a2:	468c      	mov	ip, r1
    29a4:	e5b8      	b.n	2518 <__aeabi_ddiv+0x19c>
    29a6:	4552      	cmp	r2, sl
    29a8:	d8be      	bhi.n	2928 <__aeabi_ddiv+0x5ac>
    29aa:	468b      	mov	fp, r1
    29ac:	2500      	movs	r5, #0
    29ae:	e660      	b.n	2672 <__aeabi_ddiv+0x2f6>
    29b0:	9d03      	ldr	r5, [sp, #12]
    29b2:	429d      	cmp	r5, r3
    29b4:	d3c6      	bcc.n	2944 <__aeabi_ddiv+0x5c8>
    29b6:	0011      	movs	r1, r2
    29b8:	e762      	b.n	2880 <__aeabi_ddiv+0x504>
    29ba:	2500      	movs	r5, #0
    29bc:	e7d8      	b.n	2970 <__aeabi_ddiv+0x5f4>
    29be:	2280      	movs	r2, #128	; 0x80
    29c0:	465b      	mov	r3, fp
    29c2:	0312      	lsls	r2, r2, #12
    29c4:	431a      	orrs	r2, r3
    29c6:	9b01      	ldr	r3, [sp, #4]
    29c8:	0312      	lsls	r2, r2, #12
    29ca:	0b12      	lsrs	r2, r2, #12
    29cc:	469c      	mov	ip, r3
    29ce:	4688      	mov	r8, r1
    29d0:	4c03      	ldr	r4, [pc, #12]	; (29e0 <__aeabi_ddiv+0x664>)
    29d2:	e5a1      	b.n	2518 <__aeabi_ddiv+0x19c>
    29d4:	000003ff 	.word	0x000003ff
    29d8:	feffffff 	.word	0xfeffffff
    29dc:	000007fe 	.word	0x000007fe
    29e0:	000007ff 	.word	0x000007ff

000029e4 <__aeabi_dmul>:
    29e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29e6:	4657      	mov	r7, sl
    29e8:	4645      	mov	r5, r8
    29ea:	46de      	mov	lr, fp
    29ec:	464e      	mov	r6, r9
    29ee:	b5e0      	push	{r5, r6, r7, lr}
    29f0:	030c      	lsls	r4, r1, #12
    29f2:	4698      	mov	r8, r3
    29f4:	004e      	lsls	r6, r1, #1
    29f6:	0b23      	lsrs	r3, r4, #12
    29f8:	b087      	sub	sp, #28
    29fa:	0007      	movs	r7, r0
    29fc:	4692      	mov	sl, r2
    29fe:	469b      	mov	fp, r3
    2a00:	0d76      	lsrs	r6, r6, #21
    2a02:	0fcd      	lsrs	r5, r1, #31
    2a04:	2e00      	cmp	r6, #0
    2a06:	d06b      	beq.n	2ae0 <__aeabi_dmul+0xfc>
    2a08:	4b6d      	ldr	r3, [pc, #436]	; (2bc0 <__aeabi_dmul+0x1dc>)
    2a0a:	429e      	cmp	r6, r3
    2a0c:	d035      	beq.n	2a7a <__aeabi_dmul+0x96>
    2a0e:	2480      	movs	r4, #128	; 0x80
    2a10:	465b      	mov	r3, fp
    2a12:	0f42      	lsrs	r2, r0, #29
    2a14:	0424      	lsls	r4, r4, #16
    2a16:	00db      	lsls	r3, r3, #3
    2a18:	4314      	orrs	r4, r2
    2a1a:	431c      	orrs	r4, r3
    2a1c:	00c3      	lsls	r3, r0, #3
    2a1e:	4699      	mov	r9, r3
    2a20:	4b68      	ldr	r3, [pc, #416]	; (2bc4 <__aeabi_dmul+0x1e0>)
    2a22:	46a3      	mov	fp, r4
    2a24:	469c      	mov	ip, r3
    2a26:	2300      	movs	r3, #0
    2a28:	2700      	movs	r7, #0
    2a2a:	4466      	add	r6, ip
    2a2c:	9302      	str	r3, [sp, #8]
    2a2e:	4643      	mov	r3, r8
    2a30:	031c      	lsls	r4, r3, #12
    2a32:	005a      	lsls	r2, r3, #1
    2a34:	0fdb      	lsrs	r3, r3, #31
    2a36:	4650      	mov	r0, sl
    2a38:	0b24      	lsrs	r4, r4, #12
    2a3a:	0d52      	lsrs	r2, r2, #21
    2a3c:	4698      	mov	r8, r3
    2a3e:	d100      	bne.n	2a42 <__aeabi_dmul+0x5e>
    2a40:	e076      	b.n	2b30 <__aeabi_dmul+0x14c>
    2a42:	4b5f      	ldr	r3, [pc, #380]	; (2bc0 <__aeabi_dmul+0x1dc>)
    2a44:	429a      	cmp	r2, r3
    2a46:	d06d      	beq.n	2b24 <__aeabi_dmul+0x140>
    2a48:	2380      	movs	r3, #128	; 0x80
    2a4a:	0f41      	lsrs	r1, r0, #29
    2a4c:	041b      	lsls	r3, r3, #16
    2a4e:	430b      	orrs	r3, r1
    2a50:	495c      	ldr	r1, [pc, #368]	; (2bc4 <__aeabi_dmul+0x1e0>)
    2a52:	00e4      	lsls	r4, r4, #3
    2a54:	468c      	mov	ip, r1
    2a56:	431c      	orrs	r4, r3
    2a58:	00c3      	lsls	r3, r0, #3
    2a5a:	2000      	movs	r0, #0
    2a5c:	4462      	add	r2, ip
    2a5e:	4641      	mov	r1, r8
    2a60:	18b6      	adds	r6, r6, r2
    2a62:	4069      	eors	r1, r5
    2a64:	1c72      	adds	r2, r6, #1
    2a66:	9101      	str	r1, [sp, #4]
    2a68:	4694      	mov	ip, r2
    2a6a:	4307      	orrs	r7, r0
    2a6c:	2f0f      	cmp	r7, #15
    2a6e:	d900      	bls.n	2a72 <__aeabi_dmul+0x8e>
    2a70:	e0b0      	b.n	2bd4 <__aeabi_dmul+0x1f0>
    2a72:	4a55      	ldr	r2, [pc, #340]	; (2bc8 <__aeabi_dmul+0x1e4>)
    2a74:	00bf      	lsls	r7, r7, #2
    2a76:	59d2      	ldr	r2, [r2, r7]
    2a78:	4697      	mov	pc, r2
    2a7a:	465b      	mov	r3, fp
    2a7c:	4303      	orrs	r3, r0
    2a7e:	4699      	mov	r9, r3
    2a80:	d000      	beq.n	2a84 <__aeabi_dmul+0xa0>
    2a82:	e087      	b.n	2b94 <__aeabi_dmul+0x1b0>
    2a84:	2300      	movs	r3, #0
    2a86:	469b      	mov	fp, r3
    2a88:	3302      	adds	r3, #2
    2a8a:	2708      	movs	r7, #8
    2a8c:	9302      	str	r3, [sp, #8]
    2a8e:	e7ce      	b.n	2a2e <__aeabi_dmul+0x4a>
    2a90:	4642      	mov	r2, r8
    2a92:	9201      	str	r2, [sp, #4]
    2a94:	2802      	cmp	r0, #2
    2a96:	d067      	beq.n	2b68 <__aeabi_dmul+0x184>
    2a98:	2803      	cmp	r0, #3
    2a9a:	d100      	bne.n	2a9e <__aeabi_dmul+0xba>
    2a9c:	e20e      	b.n	2ebc <__aeabi_dmul+0x4d8>
    2a9e:	2801      	cmp	r0, #1
    2aa0:	d000      	beq.n	2aa4 <__aeabi_dmul+0xc0>
    2aa2:	e162      	b.n	2d6a <__aeabi_dmul+0x386>
    2aa4:	2300      	movs	r3, #0
    2aa6:	2400      	movs	r4, #0
    2aa8:	2200      	movs	r2, #0
    2aaa:	4699      	mov	r9, r3
    2aac:	9901      	ldr	r1, [sp, #4]
    2aae:	4001      	ands	r1, r0
    2ab0:	b2cd      	uxtb	r5, r1
    2ab2:	2100      	movs	r1, #0
    2ab4:	0312      	lsls	r2, r2, #12
    2ab6:	0d0b      	lsrs	r3, r1, #20
    2ab8:	0b12      	lsrs	r2, r2, #12
    2aba:	051b      	lsls	r3, r3, #20
    2abc:	4313      	orrs	r3, r2
    2abe:	4a43      	ldr	r2, [pc, #268]	; (2bcc <__aeabi_dmul+0x1e8>)
    2ac0:	0524      	lsls	r4, r4, #20
    2ac2:	4013      	ands	r3, r2
    2ac4:	431c      	orrs	r4, r3
    2ac6:	0064      	lsls	r4, r4, #1
    2ac8:	07ed      	lsls	r5, r5, #31
    2aca:	0864      	lsrs	r4, r4, #1
    2acc:	432c      	orrs	r4, r5
    2ace:	4648      	mov	r0, r9
    2ad0:	0021      	movs	r1, r4
    2ad2:	b007      	add	sp, #28
    2ad4:	bc3c      	pop	{r2, r3, r4, r5}
    2ad6:	4690      	mov	r8, r2
    2ad8:	4699      	mov	r9, r3
    2ada:	46a2      	mov	sl, r4
    2adc:	46ab      	mov	fp, r5
    2ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae0:	4303      	orrs	r3, r0
    2ae2:	4699      	mov	r9, r3
    2ae4:	d04f      	beq.n	2b86 <__aeabi_dmul+0x1a2>
    2ae6:	465b      	mov	r3, fp
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d100      	bne.n	2aee <__aeabi_dmul+0x10a>
    2aec:	e189      	b.n	2e02 <__aeabi_dmul+0x41e>
    2aee:	4658      	mov	r0, fp
    2af0:	f000 fd7a 	bl	35e8 <__clzsi2>
    2af4:	0003      	movs	r3, r0
    2af6:	3b0b      	subs	r3, #11
    2af8:	2b1c      	cmp	r3, #28
    2afa:	dd00      	ble.n	2afe <__aeabi_dmul+0x11a>
    2afc:	e17a      	b.n	2df4 <__aeabi_dmul+0x410>
    2afe:	221d      	movs	r2, #29
    2b00:	1ad3      	subs	r3, r2, r3
    2b02:	003a      	movs	r2, r7
    2b04:	0001      	movs	r1, r0
    2b06:	465c      	mov	r4, fp
    2b08:	40da      	lsrs	r2, r3
    2b0a:	3908      	subs	r1, #8
    2b0c:	408c      	lsls	r4, r1
    2b0e:	0013      	movs	r3, r2
    2b10:	408f      	lsls	r7, r1
    2b12:	4323      	orrs	r3, r4
    2b14:	469b      	mov	fp, r3
    2b16:	46b9      	mov	r9, r7
    2b18:	2300      	movs	r3, #0
    2b1a:	4e2d      	ldr	r6, [pc, #180]	; (2bd0 <__aeabi_dmul+0x1ec>)
    2b1c:	2700      	movs	r7, #0
    2b1e:	1a36      	subs	r6, r6, r0
    2b20:	9302      	str	r3, [sp, #8]
    2b22:	e784      	b.n	2a2e <__aeabi_dmul+0x4a>
    2b24:	4653      	mov	r3, sl
    2b26:	4323      	orrs	r3, r4
    2b28:	d12a      	bne.n	2b80 <__aeabi_dmul+0x19c>
    2b2a:	2400      	movs	r4, #0
    2b2c:	2002      	movs	r0, #2
    2b2e:	e796      	b.n	2a5e <__aeabi_dmul+0x7a>
    2b30:	4653      	mov	r3, sl
    2b32:	4323      	orrs	r3, r4
    2b34:	d020      	beq.n	2b78 <__aeabi_dmul+0x194>
    2b36:	2c00      	cmp	r4, #0
    2b38:	d100      	bne.n	2b3c <__aeabi_dmul+0x158>
    2b3a:	e157      	b.n	2dec <__aeabi_dmul+0x408>
    2b3c:	0020      	movs	r0, r4
    2b3e:	f000 fd53 	bl	35e8 <__clzsi2>
    2b42:	0003      	movs	r3, r0
    2b44:	3b0b      	subs	r3, #11
    2b46:	2b1c      	cmp	r3, #28
    2b48:	dd00      	ble.n	2b4c <__aeabi_dmul+0x168>
    2b4a:	e149      	b.n	2de0 <__aeabi_dmul+0x3fc>
    2b4c:	211d      	movs	r1, #29
    2b4e:	1acb      	subs	r3, r1, r3
    2b50:	4651      	mov	r1, sl
    2b52:	0002      	movs	r2, r0
    2b54:	40d9      	lsrs	r1, r3
    2b56:	4653      	mov	r3, sl
    2b58:	3a08      	subs	r2, #8
    2b5a:	4094      	lsls	r4, r2
    2b5c:	4093      	lsls	r3, r2
    2b5e:	430c      	orrs	r4, r1
    2b60:	4a1b      	ldr	r2, [pc, #108]	; (2bd0 <__aeabi_dmul+0x1ec>)
    2b62:	1a12      	subs	r2, r2, r0
    2b64:	2000      	movs	r0, #0
    2b66:	e77a      	b.n	2a5e <__aeabi_dmul+0x7a>
    2b68:	2501      	movs	r5, #1
    2b6a:	9b01      	ldr	r3, [sp, #4]
    2b6c:	4c14      	ldr	r4, [pc, #80]	; (2bc0 <__aeabi_dmul+0x1dc>)
    2b6e:	401d      	ands	r5, r3
    2b70:	2300      	movs	r3, #0
    2b72:	2200      	movs	r2, #0
    2b74:	4699      	mov	r9, r3
    2b76:	e79c      	b.n	2ab2 <__aeabi_dmul+0xce>
    2b78:	2400      	movs	r4, #0
    2b7a:	2200      	movs	r2, #0
    2b7c:	2001      	movs	r0, #1
    2b7e:	e76e      	b.n	2a5e <__aeabi_dmul+0x7a>
    2b80:	4653      	mov	r3, sl
    2b82:	2003      	movs	r0, #3
    2b84:	e76b      	b.n	2a5e <__aeabi_dmul+0x7a>
    2b86:	2300      	movs	r3, #0
    2b88:	469b      	mov	fp, r3
    2b8a:	3301      	adds	r3, #1
    2b8c:	2704      	movs	r7, #4
    2b8e:	2600      	movs	r6, #0
    2b90:	9302      	str	r3, [sp, #8]
    2b92:	e74c      	b.n	2a2e <__aeabi_dmul+0x4a>
    2b94:	2303      	movs	r3, #3
    2b96:	4681      	mov	r9, r0
    2b98:	270c      	movs	r7, #12
    2b9a:	9302      	str	r3, [sp, #8]
    2b9c:	e747      	b.n	2a2e <__aeabi_dmul+0x4a>
    2b9e:	2280      	movs	r2, #128	; 0x80
    2ba0:	2300      	movs	r3, #0
    2ba2:	2500      	movs	r5, #0
    2ba4:	0312      	lsls	r2, r2, #12
    2ba6:	4699      	mov	r9, r3
    2ba8:	4c05      	ldr	r4, [pc, #20]	; (2bc0 <__aeabi_dmul+0x1dc>)
    2baa:	e782      	b.n	2ab2 <__aeabi_dmul+0xce>
    2bac:	465c      	mov	r4, fp
    2bae:	464b      	mov	r3, r9
    2bb0:	9802      	ldr	r0, [sp, #8]
    2bb2:	e76f      	b.n	2a94 <__aeabi_dmul+0xb0>
    2bb4:	465c      	mov	r4, fp
    2bb6:	464b      	mov	r3, r9
    2bb8:	9501      	str	r5, [sp, #4]
    2bba:	9802      	ldr	r0, [sp, #8]
    2bbc:	e76a      	b.n	2a94 <__aeabi_dmul+0xb0>
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	000007ff 	.word	0x000007ff
    2bc4:	fffffc01 	.word	0xfffffc01
    2bc8:	000036fc 	.word	0x000036fc
    2bcc:	800fffff 	.word	0x800fffff
    2bd0:	fffffc0d 	.word	0xfffffc0d
    2bd4:	464a      	mov	r2, r9
    2bd6:	4649      	mov	r1, r9
    2bd8:	0c17      	lsrs	r7, r2, #16
    2bda:	0c1a      	lsrs	r2, r3, #16
    2bdc:	041b      	lsls	r3, r3, #16
    2bde:	0c1b      	lsrs	r3, r3, #16
    2be0:	0408      	lsls	r0, r1, #16
    2be2:	0019      	movs	r1, r3
    2be4:	0c00      	lsrs	r0, r0, #16
    2be6:	4341      	muls	r1, r0
    2be8:	0015      	movs	r5, r2
    2bea:	4688      	mov	r8, r1
    2bec:	0019      	movs	r1, r3
    2bee:	437d      	muls	r5, r7
    2bf0:	4379      	muls	r1, r7
    2bf2:	9503      	str	r5, [sp, #12]
    2bf4:	4689      	mov	r9, r1
    2bf6:	0029      	movs	r1, r5
    2bf8:	0015      	movs	r5, r2
    2bfa:	4345      	muls	r5, r0
    2bfc:	444d      	add	r5, r9
    2bfe:	9502      	str	r5, [sp, #8]
    2c00:	4645      	mov	r5, r8
    2c02:	0c2d      	lsrs	r5, r5, #16
    2c04:	46aa      	mov	sl, r5
    2c06:	9d02      	ldr	r5, [sp, #8]
    2c08:	4455      	add	r5, sl
    2c0a:	45a9      	cmp	r9, r5
    2c0c:	d906      	bls.n	2c1c <__aeabi_dmul+0x238>
    2c0e:	468a      	mov	sl, r1
    2c10:	2180      	movs	r1, #128	; 0x80
    2c12:	0249      	lsls	r1, r1, #9
    2c14:	4689      	mov	r9, r1
    2c16:	44ca      	add	sl, r9
    2c18:	4651      	mov	r1, sl
    2c1a:	9103      	str	r1, [sp, #12]
    2c1c:	0c29      	lsrs	r1, r5, #16
    2c1e:	9104      	str	r1, [sp, #16]
    2c20:	4641      	mov	r1, r8
    2c22:	0409      	lsls	r1, r1, #16
    2c24:	042d      	lsls	r5, r5, #16
    2c26:	0c09      	lsrs	r1, r1, #16
    2c28:	4688      	mov	r8, r1
    2c2a:	0029      	movs	r1, r5
    2c2c:	0c25      	lsrs	r5, r4, #16
    2c2e:	0424      	lsls	r4, r4, #16
    2c30:	4441      	add	r1, r8
    2c32:	0c24      	lsrs	r4, r4, #16
    2c34:	9105      	str	r1, [sp, #20]
    2c36:	0021      	movs	r1, r4
    2c38:	4341      	muls	r1, r0
    2c3a:	4688      	mov	r8, r1
    2c3c:	0021      	movs	r1, r4
    2c3e:	4379      	muls	r1, r7
    2c40:	468a      	mov	sl, r1
    2c42:	4368      	muls	r0, r5
    2c44:	4641      	mov	r1, r8
    2c46:	4450      	add	r0, sl
    2c48:	4681      	mov	r9, r0
    2c4a:	0c08      	lsrs	r0, r1, #16
    2c4c:	4448      	add	r0, r9
    2c4e:	436f      	muls	r7, r5
    2c50:	4582      	cmp	sl, r0
    2c52:	d903      	bls.n	2c5c <__aeabi_dmul+0x278>
    2c54:	2180      	movs	r1, #128	; 0x80
    2c56:	0249      	lsls	r1, r1, #9
    2c58:	4689      	mov	r9, r1
    2c5a:	444f      	add	r7, r9
    2c5c:	0c01      	lsrs	r1, r0, #16
    2c5e:	4689      	mov	r9, r1
    2c60:	0039      	movs	r1, r7
    2c62:	4449      	add	r1, r9
    2c64:	9102      	str	r1, [sp, #8]
    2c66:	4641      	mov	r1, r8
    2c68:	040f      	lsls	r7, r1, #16
    2c6a:	9904      	ldr	r1, [sp, #16]
    2c6c:	0c3f      	lsrs	r7, r7, #16
    2c6e:	4688      	mov	r8, r1
    2c70:	0400      	lsls	r0, r0, #16
    2c72:	19c0      	adds	r0, r0, r7
    2c74:	4480      	add	r8, r0
    2c76:	4641      	mov	r1, r8
    2c78:	9104      	str	r1, [sp, #16]
    2c7a:	4659      	mov	r1, fp
    2c7c:	0c0f      	lsrs	r7, r1, #16
    2c7e:	0409      	lsls	r1, r1, #16
    2c80:	0c09      	lsrs	r1, r1, #16
    2c82:	4688      	mov	r8, r1
    2c84:	4359      	muls	r1, r3
    2c86:	468a      	mov	sl, r1
    2c88:	0039      	movs	r1, r7
    2c8a:	4351      	muls	r1, r2
    2c8c:	4689      	mov	r9, r1
    2c8e:	4641      	mov	r1, r8
    2c90:	434a      	muls	r2, r1
    2c92:	4651      	mov	r1, sl
    2c94:	0c09      	lsrs	r1, r1, #16
    2c96:	468b      	mov	fp, r1
    2c98:	437b      	muls	r3, r7
    2c9a:	18d2      	adds	r2, r2, r3
    2c9c:	445a      	add	r2, fp
    2c9e:	4293      	cmp	r3, r2
    2ca0:	d903      	bls.n	2caa <__aeabi_dmul+0x2c6>
    2ca2:	2380      	movs	r3, #128	; 0x80
    2ca4:	025b      	lsls	r3, r3, #9
    2ca6:	469b      	mov	fp, r3
    2ca8:	44d9      	add	r9, fp
    2caa:	4651      	mov	r1, sl
    2cac:	0409      	lsls	r1, r1, #16
    2cae:	0c09      	lsrs	r1, r1, #16
    2cb0:	468a      	mov	sl, r1
    2cb2:	4641      	mov	r1, r8
    2cb4:	4361      	muls	r1, r4
    2cb6:	437c      	muls	r4, r7
    2cb8:	0c13      	lsrs	r3, r2, #16
    2cba:	0412      	lsls	r2, r2, #16
    2cbc:	444b      	add	r3, r9
    2cbe:	4452      	add	r2, sl
    2cc0:	46a1      	mov	r9, r4
    2cc2:	468a      	mov	sl, r1
    2cc4:	003c      	movs	r4, r7
    2cc6:	4641      	mov	r1, r8
    2cc8:	436c      	muls	r4, r5
    2cca:	434d      	muls	r5, r1
    2ccc:	4651      	mov	r1, sl
    2cce:	444d      	add	r5, r9
    2cd0:	0c0f      	lsrs	r7, r1, #16
    2cd2:	197d      	adds	r5, r7, r5
    2cd4:	45a9      	cmp	r9, r5
    2cd6:	d903      	bls.n	2ce0 <__aeabi_dmul+0x2fc>
    2cd8:	2180      	movs	r1, #128	; 0x80
    2cda:	0249      	lsls	r1, r1, #9
    2cdc:	4688      	mov	r8, r1
    2cde:	4444      	add	r4, r8
    2ce0:	9f04      	ldr	r7, [sp, #16]
    2ce2:	9903      	ldr	r1, [sp, #12]
    2ce4:	46b8      	mov	r8, r7
    2ce6:	4441      	add	r1, r8
    2ce8:	468b      	mov	fp, r1
    2cea:	4583      	cmp	fp, r0
    2cec:	4180      	sbcs	r0, r0
    2cee:	4241      	negs	r1, r0
    2cf0:	4688      	mov	r8, r1
    2cf2:	4651      	mov	r1, sl
    2cf4:	0408      	lsls	r0, r1, #16
    2cf6:	042f      	lsls	r7, r5, #16
    2cf8:	0c00      	lsrs	r0, r0, #16
    2cfa:	183f      	adds	r7, r7, r0
    2cfc:	4658      	mov	r0, fp
    2cfe:	9902      	ldr	r1, [sp, #8]
    2d00:	1810      	adds	r0, r2, r0
    2d02:	4689      	mov	r9, r1
    2d04:	4290      	cmp	r0, r2
    2d06:	4192      	sbcs	r2, r2
    2d08:	444f      	add	r7, r9
    2d0a:	46ba      	mov	sl, r7
    2d0c:	4252      	negs	r2, r2
    2d0e:	4699      	mov	r9, r3
    2d10:	4693      	mov	fp, r2
    2d12:	44c2      	add	sl, r8
    2d14:	44d1      	add	r9, sl
    2d16:	44cb      	add	fp, r9
    2d18:	428f      	cmp	r7, r1
    2d1a:	41bf      	sbcs	r7, r7
    2d1c:	45c2      	cmp	sl, r8
    2d1e:	4189      	sbcs	r1, r1
    2d20:	4599      	cmp	r9, r3
    2d22:	419b      	sbcs	r3, r3
    2d24:	4593      	cmp	fp, r2
    2d26:	4192      	sbcs	r2, r2
    2d28:	427f      	negs	r7, r7
    2d2a:	4249      	negs	r1, r1
    2d2c:	0c2d      	lsrs	r5, r5, #16
    2d2e:	4252      	negs	r2, r2
    2d30:	430f      	orrs	r7, r1
    2d32:	425b      	negs	r3, r3
    2d34:	4313      	orrs	r3, r2
    2d36:	197f      	adds	r7, r7, r5
    2d38:	18ff      	adds	r7, r7, r3
    2d3a:	465b      	mov	r3, fp
    2d3c:	193c      	adds	r4, r7, r4
    2d3e:	0ddb      	lsrs	r3, r3, #23
    2d40:	9a05      	ldr	r2, [sp, #20]
    2d42:	0264      	lsls	r4, r4, #9
    2d44:	431c      	orrs	r4, r3
    2d46:	0243      	lsls	r3, r0, #9
    2d48:	4313      	orrs	r3, r2
    2d4a:	1e5d      	subs	r5, r3, #1
    2d4c:	41ab      	sbcs	r3, r5
    2d4e:	465a      	mov	r2, fp
    2d50:	0dc0      	lsrs	r0, r0, #23
    2d52:	4303      	orrs	r3, r0
    2d54:	0252      	lsls	r2, r2, #9
    2d56:	4313      	orrs	r3, r2
    2d58:	01e2      	lsls	r2, r4, #7
    2d5a:	d556      	bpl.n	2e0a <__aeabi_dmul+0x426>
    2d5c:	2001      	movs	r0, #1
    2d5e:	085a      	lsrs	r2, r3, #1
    2d60:	4003      	ands	r3, r0
    2d62:	4313      	orrs	r3, r2
    2d64:	07e2      	lsls	r2, r4, #31
    2d66:	4313      	orrs	r3, r2
    2d68:	0864      	lsrs	r4, r4, #1
    2d6a:	485a      	ldr	r0, [pc, #360]	; (2ed4 <__aeabi_dmul+0x4f0>)
    2d6c:	4460      	add	r0, ip
    2d6e:	2800      	cmp	r0, #0
    2d70:	dd4d      	ble.n	2e0e <__aeabi_dmul+0x42a>
    2d72:	075a      	lsls	r2, r3, #29
    2d74:	d009      	beq.n	2d8a <__aeabi_dmul+0x3a6>
    2d76:	220f      	movs	r2, #15
    2d78:	401a      	ands	r2, r3
    2d7a:	2a04      	cmp	r2, #4
    2d7c:	d005      	beq.n	2d8a <__aeabi_dmul+0x3a6>
    2d7e:	1d1a      	adds	r2, r3, #4
    2d80:	429a      	cmp	r2, r3
    2d82:	419b      	sbcs	r3, r3
    2d84:	425b      	negs	r3, r3
    2d86:	18e4      	adds	r4, r4, r3
    2d88:	0013      	movs	r3, r2
    2d8a:	01e2      	lsls	r2, r4, #7
    2d8c:	d504      	bpl.n	2d98 <__aeabi_dmul+0x3b4>
    2d8e:	2080      	movs	r0, #128	; 0x80
    2d90:	4a51      	ldr	r2, [pc, #324]	; (2ed8 <__aeabi_dmul+0x4f4>)
    2d92:	00c0      	lsls	r0, r0, #3
    2d94:	4014      	ands	r4, r2
    2d96:	4460      	add	r0, ip
    2d98:	4a50      	ldr	r2, [pc, #320]	; (2edc <__aeabi_dmul+0x4f8>)
    2d9a:	4290      	cmp	r0, r2
    2d9c:	dd00      	ble.n	2da0 <__aeabi_dmul+0x3bc>
    2d9e:	e6e3      	b.n	2b68 <__aeabi_dmul+0x184>
    2da0:	2501      	movs	r5, #1
    2da2:	08db      	lsrs	r3, r3, #3
    2da4:	0762      	lsls	r2, r4, #29
    2da6:	431a      	orrs	r2, r3
    2da8:	0264      	lsls	r4, r4, #9
    2daa:	9b01      	ldr	r3, [sp, #4]
    2dac:	4691      	mov	r9, r2
    2dae:	0b22      	lsrs	r2, r4, #12
    2db0:	0544      	lsls	r4, r0, #21
    2db2:	0d64      	lsrs	r4, r4, #21
    2db4:	401d      	ands	r5, r3
    2db6:	e67c      	b.n	2ab2 <__aeabi_dmul+0xce>
    2db8:	2280      	movs	r2, #128	; 0x80
    2dba:	4659      	mov	r1, fp
    2dbc:	0312      	lsls	r2, r2, #12
    2dbe:	4211      	tst	r1, r2
    2dc0:	d008      	beq.n	2dd4 <__aeabi_dmul+0x3f0>
    2dc2:	4214      	tst	r4, r2
    2dc4:	d106      	bne.n	2dd4 <__aeabi_dmul+0x3f0>
    2dc6:	4322      	orrs	r2, r4
    2dc8:	0312      	lsls	r2, r2, #12
    2dca:	0b12      	lsrs	r2, r2, #12
    2dcc:	4645      	mov	r5, r8
    2dce:	4699      	mov	r9, r3
    2dd0:	4c43      	ldr	r4, [pc, #268]	; (2ee0 <__aeabi_dmul+0x4fc>)
    2dd2:	e66e      	b.n	2ab2 <__aeabi_dmul+0xce>
    2dd4:	465b      	mov	r3, fp
    2dd6:	431a      	orrs	r2, r3
    2dd8:	0312      	lsls	r2, r2, #12
    2dda:	0b12      	lsrs	r2, r2, #12
    2ddc:	4c40      	ldr	r4, [pc, #256]	; (2ee0 <__aeabi_dmul+0x4fc>)
    2dde:	e668      	b.n	2ab2 <__aeabi_dmul+0xce>
    2de0:	0003      	movs	r3, r0
    2de2:	4654      	mov	r4, sl
    2de4:	3b28      	subs	r3, #40	; 0x28
    2de6:	409c      	lsls	r4, r3
    2de8:	2300      	movs	r3, #0
    2dea:	e6b9      	b.n	2b60 <__aeabi_dmul+0x17c>
    2dec:	f000 fbfc 	bl	35e8 <__clzsi2>
    2df0:	3020      	adds	r0, #32
    2df2:	e6a6      	b.n	2b42 <__aeabi_dmul+0x15e>
    2df4:	0003      	movs	r3, r0
    2df6:	3b28      	subs	r3, #40	; 0x28
    2df8:	409f      	lsls	r7, r3
    2dfa:	2300      	movs	r3, #0
    2dfc:	46bb      	mov	fp, r7
    2dfe:	4699      	mov	r9, r3
    2e00:	e68a      	b.n	2b18 <__aeabi_dmul+0x134>
    2e02:	f000 fbf1 	bl	35e8 <__clzsi2>
    2e06:	3020      	adds	r0, #32
    2e08:	e674      	b.n	2af4 <__aeabi_dmul+0x110>
    2e0a:	46b4      	mov	ip, r6
    2e0c:	e7ad      	b.n	2d6a <__aeabi_dmul+0x386>
    2e0e:	2501      	movs	r5, #1
    2e10:	1a2a      	subs	r2, r5, r0
    2e12:	2a38      	cmp	r2, #56	; 0x38
    2e14:	dd06      	ble.n	2e24 <__aeabi_dmul+0x440>
    2e16:	9b01      	ldr	r3, [sp, #4]
    2e18:	2400      	movs	r4, #0
    2e1a:	401d      	ands	r5, r3
    2e1c:	2300      	movs	r3, #0
    2e1e:	2200      	movs	r2, #0
    2e20:	4699      	mov	r9, r3
    2e22:	e646      	b.n	2ab2 <__aeabi_dmul+0xce>
    2e24:	2a1f      	cmp	r2, #31
    2e26:	dc21      	bgt.n	2e6c <__aeabi_dmul+0x488>
    2e28:	2520      	movs	r5, #32
    2e2a:	0020      	movs	r0, r4
    2e2c:	1aad      	subs	r5, r5, r2
    2e2e:	001e      	movs	r6, r3
    2e30:	40ab      	lsls	r3, r5
    2e32:	40a8      	lsls	r0, r5
    2e34:	40d6      	lsrs	r6, r2
    2e36:	1e5d      	subs	r5, r3, #1
    2e38:	41ab      	sbcs	r3, r5
    2e3a:	4330      	orrs	r0, r6
    2e3c:	4318      	orrs	r0, r3
    2e3e:	40d4      	lsrs	r4, r2
    2e40:	0743      	lsls	r3, r0, #29
    2e42:	d009      	beq.n	2e58 <__aeabi_dmul+0x474>
    2e44:	230f      	movs	r3, #15
    2e46:	4003      	ands	r3, r0
    2e48:	2b04      	cmp	r3, #4
    2e4a:	d005      	beq.n	2e58 <__aeabi_dmul+0x474>
    2e4c:	0003      	movs	r3, r0
    2e4e:	1d18      	adds	r0, r3, #4
    2e50:	4298      	cmp	r0, r3
    2e52:	419b      	sbcs	r3, r3
    2e54:	425b      	negs	r3, r3
    2e56:	18e4      	adds	r4, r4, r3
    2e58:	0223      	lsls	r3, r4, #8
    2e5a:	d521      	bpl.n	2ea0 <__aeabi_dmul+0x4bc>
    2e5c:	2501      	movs	r5, #1
    2e5e:	9b01      	ldr	r3, [sp, #4]
    2e60:	2401      	movs	r4, #1
    2e62:	401d      	ands	r5, r3
    2e64:	2300      	movs	r3, #0
    2e66:	2200      	movs	r2, #0
    2e68:	4699      	mov	r9, r3
    2e6a:	e622      	b.n	2ab2 <__aeabi_dmul+0xce>
    2e6c:	251f      	movs	r5, #31
    2e6e:	0021      	movs	r1, r4
    2e70:	426d      	negs	r5, r5
    2e72:	1a28      	subs	r0, r5, r0
    2e74:	40c1      	lsrs	r1, r0
    2e76:	0008      	movs	r0, r1
    2e78:	2a20      	cmp	r2, #32
    2e7a:	d01d      	beq.n	2eb8 <__aeabi_dmul+0x4d4>
    2e7c:	355f      	adds	r5, #95	; 0x5f
    2e7e:	1aaa      	subs	r2, r5, r2
    2e80:	4094      	lsls	r4, r2
    2e82:	4323      	orrs	r3, r4
    2e84:	1e5c      	subs	r4, r3, #1
    2e86:	41a3      	sbcs	r3, r4
    2e88:	2507      	movs	r5, #7
    2e8a:	4303      	orrs	r3, r0
    2e8c:	401d      	ands	r5, r3
    2e8e:	2200      	movs	r2, #0
    2e90:	2d00      	cmp	r5, #0
    2e92:	d009      	beq.n	2ea8 <__aeabi_dmul+0x4c4>
    2e94:	220f      	movs	r2, #15
    2e96:	2400      	movs	r4, #0
    2e98:	401a      	ands	r2, r3
    2e9a:	0018      	movs	r0, r3
    2e9c:	2a04      	cmp	r2, #4
    2e9e:	d1d6      	bne.n	2e4e <__aeabi_dmul+0x46a>
    2ea0:	0003      	movs	r3, r0
    2ea2:	0765      	lsls	r5, r4, #29
    2ea4:	0264      	lsls	r4, r4, #9
    2ea6:	0b22      	lsrs	r2, r4, #12
    2ea8:	08db      	lsrs	r3, r3, #3
    2eaa:	432b      	orrs	r3, r5
    2eac:	2501      	movs	r5, #1
    2eae:	4699      	mov	r9, r3
    2eb0:	9b01      	ldr	r3, [sp, #4]
    2eb2:	2400      	movs	r4, #0
    2eb4:	401d      	ands	r5, r3
    2eb6:	e5fc      	b.n	2ab2 <__aeabi_dmul+0xce>
    2eb8:	2400      	movs	r4, #0
    2eba:	e7e2      	b.n	2e82 <__aeabi_dmul+0x49e>
    2ebc:	2280      	movs	r2, #128	; 0x80
    2ebe:	2501      	movs	r5, #1
    2ec0:	0312      	lsls	r2, r2, #12
    2ec2:	4322      	orrs	r2, r4
    2ec4:	9901      	ldr	r1, [sp, #4]
    2ec6:	0312      	lsls	r2, r2, #12
    2ec8:	0b12      	lsrs	r2, r2, #12
    2eca:	400d      	ands	r5, r1
    2ecc:	4699      	mov	r9, r3
    2ece:	4c04      	ldr	r4, [pc, #16]	; (2ee0 <__aeabi_dmul+0x4fc>)
    2ed0:	e5ef      	b.n	2ab2 <__aeabi_dmul+0xce>
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	000003ff 	.word	0x000003ff
    2ed8:	feffffff 	.word	0xfeffffff
    2edc:	000007fe 	.word	0x000007fe
    2ee0:	000007ff 	.word	0x000007ff

00002ee4 <__aeabi_dsub>:
    2ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ee6:	4646      	mov	r6, r8
    2ee8:	46d6      	mov	lr, sl
    2eea:	464f      	mov	r7, r9
    2eec:	030c      	lsls	r4, r1, #12
    2eee:	b5c0      	push	{r6, r7, lr}
    2ef0:	0fcd      	lsrs	r5, r1, #31
    2ef2:	004e      	lsls	r6, r1, #1
    2ef4:	0a61      	lsrs	r1, r4, #9
    2ef6:	0f44      	lsrs	r4, r0, #29
    2ef8:	430c      	orrs	r4, r1
    2efa:	00c1      	lsls	r1, r0, #3
    2efc:	0058      	lsls	r0, r3, #1
    2efe:	0d40      	lsrs	r0, r0, #21
    2f00:	4684      	mov	ip, r0
    2f02:	468a      	mov	sl, r1
    2f04:	000f      	movs	r7, r1
    2f06:	0319      	lsls	r1, r3, #12
    2f08:	0f50      	lsrs	r0, r2, #29
    2f0a:	0a49      	lsrs	r1, r1, #9
    2f0c:	4301      	orrs	r1, r0
    2f0e:	48c6      	ldr	r0, [pc, #792]	; (3228 <__aeabi_dsub+0x344>)
    2f10:	0d76      	lsrs	r6, r6, #21
    2f12:	46a8      	mov	r8, r5
    2f14:	0fdb      	lsrs	r3, r3, #31
    2f16:	00d2      	lsls	r2, r2, #3
    2f18:	4584      	cmp	ip, r0
    2f1a:	d100      	bne.n	2f1e <__aeabi_dsub+0x3a>
    2f1c:	e0d8      	b.n	30d0 <__aeabi_dsub+0x1ec>
    2f1e:	2001      	movs	r0, #1
    2f20:	4043      	eors	r3, r0
    2f22:	42ab      	cmp	r3, r5
    2f24:	d100      	bne.n	2f28 <__aeabi_dsub+0x44>
    2f26:	e0a6      	b.n	3076 <__aeabi_dsub+0x192>
    2f28:	4660      	mov	r0, ip
    2f2a:	1a35      	subs	r5, r6, r0
    2f2c:	2d00      	cmp	r5, #0
    2f2e:	dc00      	bgt.n	2f32 <__aeabi_dsub+0x4e>
    2f30:	e105      	b.n	313e <__aeabi_dsub+0x25a>
    2f32:	2800      	cmp	r0, #0
    2f34:	d110      	bne.n	2f58 <__aeabi_dsub+0x74>
    2f36:	000b      	movs	r3, r1
    2f38:	4313      	orrs	r3, r2
    2f3a:	d100      	bne.n	2f3e <__aeabi_dsub+0x5a>
    2f3c:	e0d7      	b.n	30ee <__aeabi_dsub+0x20a>
    2f3e:	1e6b      	subs	r3, r5, #1
    2f40:	2b00      	cmp	r3, #0
    2f42:	d000      	beq.n	2f46 <__aeabi_dsub+0x62>
    2f44:	e14b      	b.n	31de <__aeabi_dsub+0x2fa>
    2f46:	4653      	mov	r3, sl
    2f48:	1a9f      	subs	r7, r3, r2
    2f4a:	45ba      	cmp	sl, r7
    2f4c:	4180      	sbcs	r0, r0
    2f4e:	1a64      	subs	r4, r4, r1
    2f50:	4240      	negs	r0, r0
    2f52:	1a24      	subs	r4, r4, r0
    2f54:	2601      	movs	r6, #1
    2f56:	e01e      	b.n	2f96 <__aeabi_dsub+0xb2>
    2f58:	4bb3      	ldr	r3, [pc, #716]	; (3228 <__aeabi_dsub+0x344>)
    2f5a:	429e      	cmp	r6, r3
    2f5c:	d048      	beq.n	2ff0 <__aeabi_dsub+0x10c>
    2f5e:	2380      	movs	r3, #128	; 0x80
    2f60:	041b      	lsls	r3, r3, #16
    2f62:	4319      	orrs	r1, r3
    2f64:	2d38      	cmp	r5, #56	; 0x38
    2f66:	dd00      	ble.n	2f6a <__aeabi_dsub+0x86>
    2f68:	e119      	b.n	319e <__aeabi_dsub+0x2ba>
    2f6a:	2d1f      	cmp	r5, #31
    2f6c:	dd00      	ble.n	2f70 <__aeabi_dsub+0x8c>
    2f6e:	e14c      	b.n	320a <__aeabi_dsub+0x326>
    2f70:	2320      	movs	r3, #32
    2f72:	000f      	movs	r7, r1
    2f74:	1b5b      	subs	r3, r3, r5
    2f76:	0010      	movs	r0, r2
    2f78:	409a      	lsls	r2, r3
    2f7a:	409f      	lsls	r7, r3
    2f7c:	40e8      	lsrs	r0, r5
    2f7e:	1e53      	subs	r3, r2, #1
    2f80:	419a      	sbcs	r2, r3
    2f82:	40e9      	lsrs	r1, r5
    2f84:	4307      	orrs	r7, r0
    2f86:	4317      	orrs	r7, r2
    2f88:	4653      	mov	r3, sl
    2f8a:	1bdf      	subs	r7, r3, r7
    2f8c:	1a61      	subs	r1, r4, r1
    2f8e:	45ba      	cmp	sl, r7
    2f90:	41a4      	sbcs	r4, r4
    2f92:	4264      	negs	r4, r4
    2f94:	1b0c      	subs	r4, r1, r4
    2f96:	0223      	lsls	r3, r4, #8
    2f98:	d400      	bmi.n	2f9c <__aeabi_dsub+0xb8>
    2f9a:	e0c5      	b.n	3128 <__aeabi_dsub+0x244>
    2f9c:	0264      	lsls	r4, r4, #9
    2f9e:	0a65      	lsrs	r5, r4, #9
    2fa0:	2d00      	cmp	r5, #0
    2fa2:	d100      	bne.n	2fa6 <__aeabi_dsub+0xc2>
    2fa4:	e0f6      	b.n	3194 <__aeabi_dsub+0x2b0>
    2fa6:	0028      	movs	r0, r5
    2fa8:	f000 fb1e 	bl	35e8 <__clzsi2>
    2fac:	0003      	movs	r3, r0
    2fae:	3b08      	subs	r3, #8
    2fb0:	2b1f      	cmp	r3, #31
    2fb2:	dd00      	ble.n	2fb6 <__aeabi_dsub+0xd2>
    2fb4:	e0e9      	b.n	318a <__aeabi_dsub+0x2a6>
    2fb6:	2220      	movs	r2, #32
    2fb8:	003c      	movs	r4, r7
    2fba:	1ad2      	subs	r2, r2, r3
    2fbc:	409d      	lsls	r5, r3
    2fbe:	40d4      	lsrs	r4, r2
    2fc0:	409f      	lsls	r7, r3
    2fc2:	4325      	orrs	r5, r4
    2fc4:	429e      	cmp	r6, r3
    2fc6:	dd00      	ble.n	2fca <__aeabi_dsub+0xe6>
    2fc8:	e0db      	b.n	3182 <__aeabi_dsub+0x29e>
    2fca:	1b9e      	subs	r6, r3, r6
    2fcc:	1c73      	adds	r3, r6, #1
    2fce:	2b1f      	cmp	r3, #31
    2fd0:	dd00      	ble.n	2fd4 <__aeabi_dsub+0xf0>
    2fd2:	e10a      	b.n	31ea <__aeabi_dsub+0x306>
    2fd4:	2220      	movs	r2, #32
    2fd6:	0038      	movs	r0, r7
    2fd8:	1ad2      	subs	r2, r2, r3
    2fda:	0029      	movs	r1, r5
    2fdc:	4097      	lsls	r7, r2
    2fde:	002c      	movs	r4, r5
    2fe0:	4091      	lsls	r1, r2
    2fe2:	40d8      	lsrs	r0, r3
    2fe4:	1e7a      	subs	r2, r7, #1
    2fe6:	4197      	sbcs	r7, r2
    2fe8:	40dc      	lsrs	r4, r3
    2fea:	2600      	movs	r6, #0
    2fec:	4301      	orrs	r1, r0
    2fee:	430f      	orrs	r7, r1
    2ff0:	077b      	lsls	r3, r7, #29
    2ff2:	d009      	beq.n	3008 <__aeabi_dsub+0x124>
    2ff4:	230f      	movs	r3, #15
    2ff6:	403b      	ands	r3, r7
    2ff8:	2b04      	cmp	r3, #4
    2ffa:	d005      	beq.n	3008 <__aeabi_dsub+0x124>
    2ffc:	1d3b      	adds	r3, r7, #4
    2ffe:	42bb      	cmp	r3, r7
    3000:	41bf      	sbcs	r7, r7
    3002:	427f      	negs	r7, r7
    3004:	19e4      	adds	r4, r4, r7
    3006:	001f      	movs	r7, r3
    3008:	0223      	lsls	r3, r4, #8
    300a:	d525      	bpl.n	3058 <__aeabi_dsub+0x174>
    300c:	4b86      	ldr	r3, [pc, #536]	; (3228 <__aeabi_dsub+0x344>)
    300e:	3601      	adds	r6, #1
    3010:	429e      	cmp	r6, r3
    3012:	d100      	bne.n	3016 <__aeabi_dsub+0x132>
    3014:	e0af      	b.n	3176 <__aeabi_dsub+0x292>
    3016:	4b85      	ldr	r3, [pc, #532]	; (322c <__aeabi_dsub+0x348>)
    3018:	2501      	movs	r5, #1
    301a:	401c      	ands	r4, r3
    301c:	4643      	mov	r3, r8
    301e:	0762      	lsls	r2, r4, #29
    3020:	08ff      	lsrs	r7, r7, #3
    3022:	0264      	lsls	r4, r4, #9
    3024:	0576      	lsls	r6, r6, #21
    3026:	4317      	orrs	r7, r2
    3028:	0b24      	lsrs	r4, r4, #12
    302a:	0d76      	lsrs	r6, r6, #21
    302c:	401d      	ands	r5, r3
    302e:	2100      	movs	r1, #0
    3030:	0324      	lsls	r4, r4, #12
    3032:	0b23      	lsrs	r3, r4, #12
    3034:	0d0c      	lsrs	r4, r1, #20
    3036:	4a7e      	ldr	r2, [pc, #504]	; (3230 <__aeabi_dsub+0x34c>)
    3038:	0524      	lsls	r4, r4, #20
    303a:	431c      	orrs	r4, r3
    303c:	4014      	ands	r4, r2
    303e:	0533      	lsls	r3, r6, #20
    3040:	4323      	orrs	r3, r4
    3042:	005b      	lsls	r3, r3, #1
    3044:	07ed      	lsls	r5, r5, #31
    3046:	085b      	lsrs	r3, r3, #1
    3048:	432b      	orrs	r3, r5
    304a:	0038      	movs	r0, r7
    304c:	0019      	movs	r1, r3
    304e:	bc1c      	pop	{r2, r3, r4}
    3050:	4690      	mov	r8, r2
    3052:	4699      	mov	r9, r3
    3054:	46a2      	mov	sl, r4
    3056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3058:	2501      	movs	r5, #1
    305a:	4643      	mov	r3, r8
    305c:	0762      	lsls	r2, r4, #29
    305e:	08ff      	lsrs	r7, r7, #3
    3060:	4317      	orrs	r7, r2
    3062:	08e4      	lsrs	r4, r4, #3
    3064:	401d      	ands	r5, r3
    3066:	4b70      	ldr	r3, [pc, #448]	; (3228 <__aeabi_dsub+0x344>)
    3068:	429e      	cmp	r6, r3
    306a:	d036      	beq.n	30da <__aeabi_dsub+0x1f6>
    306c:	0324      	lsls	r4, r4, #12
    306e:	0576      	lsls	r6, r6, #21
    3070:	0b24      	lsrs	r4, r4, #12
    3072:	0d76      	lsrs	r6, r6, #21
    3074:	e7db      	b.n	302e <__aeabi_dsub+0x14a>
    3076:	4663      	mov	r3, ip
    3078:	1af3      	subs	r3, r6, r3
    307a:	2b00      	cmp	r3, #0
    307c:	dc00      	bgt.n	3080 <__aeabi_dsub+0x19c>
    307e:	e094      	b.n	31aa <__aeabi_dsub+0x2c6>
    3080:	4660      	mov	r0, ip
    3082:	2800      	cmp	r0, #0
    3084:	d035      	beq.n	30f2 <__aeabi_dsub+0x20e>
    3086:	4868      	ldr	r0, [pc, #416]	; (3228 <__aeabi_dsub+0x344>)
    3088:	4286      	cmp	r6, r0
    308a:	d0b1      	beq.n	2ff0 <__aeabi_dsub+0x10c>
    308c:	2780      	movs	r7, #128	; 0x80
    308e:	043f      	lsls	r7, r7, #16
    3090:	4339      	orrs	r1, r7
    3092:	2b38      	cmp	r3, #56	; 0x38
    3094:	dc00      	bgt.n	3098 <__aeabi_dsub+0x1b4>
    3096:	e0fd      	b.n	3294 <__aeabi_dsub+0x3b0>
    3098:	430a      	orrs	r2, r1
    309a:	0017      	movs	r7, r2
    309c:	2100      	movs	r1, #0
    309e:	1e7a      	subs	r2, r7, #1
    30a0:	4197      	sbcs	r7, r2
    30a2:	4457      	add	r7, sl
    30a4:	4557      	cmp	r7, sl
    30a6:	4180      	sbcs	r0, r0
    30a8:	1909      	adds	r1, r1, r4
    30aa:	4244      	negs	r4, r0
    30ac:	190c      	adds	r4, r1, r4
    30ae:	0223      	lsls	r3, r4, #8
    30b0:	d53a      	bpl.n	3128 <__aeabi_dsub+0x244>
    30b2:	4b5d      	ldr	r3, [pc, #372]	; (3228 <__aeabi_dsub+0x344>)
    30b4:	3601      	adds	r6, #1
    30b6:	429e      	cmp	r6, r3
    30b8:	d100      	bne.n	30bc <__aeabi_dsub+0x1d8>
    30ba:	e14b      	b.n	3354 <__aeabi_dsub+0x470>
    30bc:	2201      	movs	r2, #1
    30be:	4b5b      	ldr	r3, [pc, #364]	; (322c <__aeabi_dsub+0x348>)
    30c0:	401c      	ands	r4, r3
    30c2:	087b      	lsrs	r3, r7, #1
    30c4:	4017      	ands	r7, r2
    30c6:	431f      	orrs	r7, r3
    30c8:	07e2      	lsls	r2, r4, #31
    30ca:	4317      	orrs	r7, r2
    30cc:	0864      	lsrs	r4, r4, #1
    30ce:	e78f      	b.n	2ff0 <__aeabi_dsub+0x10c>
    30d0:	0008      	movs	r0, r1
    30d2:	4310      	orrs	r0, r2
    30d4:	d000      	beq.n	30d8 <__aeabi_dsub+0x1f4>
    30d6:	e724      	b.n	2f22 <__aeabi_dsub+0x3e>
    30d8:	e721      	b.n	2f1e <__aeabi_dsub+0x3a>
    30da:	0023      	movs	r3, r4
    30dc:	433b      	orrs	r3, r7
    30de:	d100      	bne.n	30e2 <__aeabi_dsub+0x1fe>
    30e0:	e1b9      	b.n	3456 <__aeabi_dsub+0x572>
    30e2:	2280      	movs	r2, #128	; 0x80
    30e4:	0312      	lsls	r2, r2, #12
    30e6:	4314      	orrs	r4, r2
    30e8:	0324      	lsls	r4, r4, #12
    30ea:	0b24      	lsrs	r4, r4, #12
    30ec:	e79f      	b.n	302e <__aeabi_dsub+0x14a>
    30ee:	002e      	movs	r6, r5
    30f0:	e77e      	b.n	2ff0 <__aeabi_dsub+0x10c>
    30f2:	0008      	movs	r0, r1
    30f4:	4310      	orrs	r0, r2
    30f6:	d100      	bne.n	30fa <__aeabi_dsub+0x216>
    30f8:	e0ca      	b.n	3290 <__aeabi_dsub+0x3ac>
    30fa:	1e58      	subs	r0, r3, #1
    30fc:	4684      	mov	ip, r0
    30fe:	2800      	cmp	r0, #0
    3100:	d000      	beq.n	3104 <__aeabi_dsub+0x220>
    3102:	e0e7      	b.n	32d4 <__aeabi_dsub+0x3f0>
    3104:	4452      	add	r2, sl
    3106:	4552      	cmp	r2, sl
    3108:	4180      	sbcs	r0, r0
    310a:	1864      	adds	r4, r4, r1
    310c:	4240      	negs	r0, r0
    310e:	1824      	adds	r4, r4, r0
    3110:	0017      	movs	r7, r2
    3112:	2601      	movs	r6, #1
    3114:	0223      	lsls	r3, r4, #8
    3116:	d507      	bpl.n	3128 <__aeabi_dsub+0x244>
    3118:	2602      	movs	r6, #2
    311a:	e7cf      	b.n	30bc <__aeabi_dsub+0x1d8>
    311c:	4664      	mov	r4, ip
    311e:	432c      	orrs	r4, r5
    3120:	d100      	bne.n	3124 <__aeabi_dsub+0x240>
    3122:	e1b3      	b.n	348c <__aeabi_dsub+0x5a8>
    3124:	002c      	movs	r4, r5
    3126:	4667      	mov	r7, ip
    3128:	077b      	lsls	r3, r7, #29
    312a:	d000      	beq.n	312e <__aeabi_dsub+0x24a>
    312c:	e762      	b.n	2ff4 <__aeabi_dsub+0x110>
    312e:	0763      	lsls	r3, r4, #29
    3130:	08ff      	lsrs	r7, r7, #3
    3132:	431f      	orrs	r7, r3
    3134:	2501      	movs	r5, #1
    3136:	4643      	mov	r3, r8
    3138:	08e4      	lsrs	r4, r4, #3
    313a:	401d      	ands	r5, r3
    313c:	e793      	b.n	3066 <__aeabi_dsub+0x182>
    313e:	2d00      	cmp	r5, #0
    3140:	d178      	bne.n	3234 <__aeabi_dsub+0x350>
    3142:	1c75      	adds	r5, r6, #1
    3144:	056d      	lsls	r5, r5, #21
    3146:	0d6d      	lsrs	r5, r5, #21
    3148:	2d01      	cmp	r5, #1
    314a:	dc00      	bgt.n	314e <__aeabi_dsub+0x26a>
    314c:	e0f2      	b.n	3334 <__aeabi_dsub+0x450>
    314e:	4650      	mov	r0, sl
    3150:	1a80      	subs	r0, r0, r2
    3152:	4582      	cmp	sl, r0
    3154:	41bf      	sbcs	r7, r7
    3156:	1a65      	subs	r5, r4, r1
    3158:	427f      	negs	r7, r7
    315a:	1bed      	subs	r5, r5, r7
    315c:	4684      	mov	ip, r0
    315e:	0228      	lsls	r0, r5, #8
    3160:	d400      	bmi.n	3164 <__aeabi_dsub+0x280>
    3162:	e08c      	b.n	327e <__aeabi_dsub+0x39a>
    3164:	4650      	mov	r0, sl
    3166:	1a17      	subs	r7, r2, r0
    3168:	42ba      	cmp	r2, r7
    316a:	4192      	sbcs	r2, r2
    316c:	1b0c      	subs	r4, r1, r4
    316e:	4255      	negs	r5, r2
    3170:	1b65      	subs	r5, r4, r5
    3172:	4698      	mov	r8, r3
    3174:	e714      	b.n	2fa0 <__aeabi_dsub+0xbc>
    3176:	2501      	movs	r5, #1
    3178:	4643      	mov	r3, r8
    317a:	2400      	movs	r4, #0
    317c:	401d      	ands	r5, r3
    317e:	2700      	movs	r7, #0
    3180:	e755      	b.n	302e <__aeabi_dsub+0x14a>
    3182:	4c2a      	ldr	r4, [pc, #168]	; (322c <__aeabi_dsub+0x348>)
    3184:	1af6      	subs	r6, r6, r3
    3186:	402c      	ands	r4, r5
    3188:	e732      	b.n	2ff0 <__aeabi_dsub+0x10c>
    318a:	003d      	movs	r5, r7
    318c:	3828      	subs	r0, #40	; 0x28
    318e:	4085      	lsls	r5, r0
    3190:	2700      	movs	r7, #0
    3192:	e717      	b.n	2fc4 <__aeabi_dsub+0xe0>
    3194:	0038      	movs	r0, r7
    3196:	f000 fa27 	bl	35e8 <__clzsi2>
    319a:	3020      	adds	r0, #32
    319c:	e706      	b.n	2fac <__aeabi_dsub+0xc8>
    319e:	430a      	orrs	r2, r1
    31a0:	0017      	movs	r7, r2
    31a2:	2100      	movs	r1, #0
    31a4:	1e7a      	subs	r2, r7, #1
    31a6:	4197      	sbcs	r7, r2
    31a8:	e6ee      	b.n	2f88 <__aeabi_dsub+0xa4>
    31aa:	2b00      	cmp	r3, #0
    31ac:	d000      	beq.n	31b0 <__aeabi_dsub+0x2cc>
    31ae:	e0e5      	b.n	337c <__aeabi_dsub+0x498>
    31b0:	1c73      	adds	r3, r6, #1
    31b2:	469c      	mov	ip, r3
    31b4:	055b      	lsls	r3, r3, #21
    31b6:	0d5b      	lsrs	r3, r3, #21
    31b8:	2b01      	cmp	r3, #1
    31ba:	dc00      	bgt.n	31be <__aeabi_dsub+0x2da>
    31bc:	e09f      	b.n	32fe <__aeabi_dsub+0x41a>
    31be:	4b1a      	ldr	r3, [pc, #104]	; (3228 <__aeabi_dsub+0x344>)
    31c0:	459c      	cmp	ip, r3
    31c2:	d100      	bne.n	31c6 <__aeabi_dsub+0x2e2>
    31c4:	e0c5      	b.n	3352 <__aeabi_dsub+0x46e>
    31c6:	4452      	add	r2, sl
    31c8:	4552      	cmp	r2, sl
    31ca:	4180      	sbcs	r0, r0
    31cc:	1864      	adds	r4, r4, r1
    31ce:	4240      	negs	r0, r0
    31d0:	1824      	adds	r4, r4, r0
    31d2:	07e7      	lsls	r7, r4, #31
    31d4:	0852      	lsrs	r2, r2, #1
    31d6:	4317      	orrs	r7, r2
    31d8:	0864      	lsrs	r4, r4, #1
    31da:	4666      	mov	r6, ip
    31dc:	e708      	b.n	2ff0 <__aeabi_dsub+0x10c>
    31de:	4812      	ldr	r0, [pc, #72]	; (3228 <__aeabi_dsub+0x344>)
    31e0:	4285      	cmp	r5, r0
    31e2:	d100      	bne.n	31e6 <__aeabi_dsub+0x302>
    31e4:	e085      	b.n	32f2 <__aeabi_dsub+0x40e>
    31e6:	001d      	movs	r5, r3
    31e8:	e6bc      	b.n	2f64 <__aeabi_dsub+0x80>
    31ea:	0029      	movs	r1, r5
    31ec:	3e1f      	subs	r6, #31
    31ee:	40f1      	lsrs	r1, r6
    31f0:	2b20      	cmp	r3, #32
    31f2:	d100      	bne.n	31f6 <__aeabi_dsub+0x312>
    31f4:	e07f      	b.n	32f6 <__aeabi_dsub+0x412>
    31f6:	2240      	movs	r2, #64	; 0x40
    31f8:	1ad3      	subs	r3, r2, r3
    31fa:	409d      	lsls	r5, r3
    31fc:	432f      	orrs	r7, r5
    31fe:	1e7d      	subs	r5, r7, #1
    3200:	41af      	sbcs	r7, r5
    3202:	2400      	movs	r4, #0
    3204:	430f      	orrs	r7, r1
    3206:	2600      	movs	r6, #0
    3208:	e78e      	b.n	3128 <__aeabi_dsub+0x244>
    320a:	002b      	movs	r3, r5
    320c:	000f      	movs	r7, r1
    320e:	3b20      	subs	r3, #32
    3210:	40df      	lsrs	r7, r3
    3212:	2d20      	cmp	r5, #32
    3214:	d071      	beq.n	32fa <__aeabi_dsub+0x416>
    3216:	2340      	movs	r3, #64	; 0x40
    3218:	1b5d      	subs	r5, r3, r5
    321a:	40a9      	lsls	r1, r5
    321c:	430a      	orrs	r2, r1
    321e:	1e51      	subs	r1, r2, #1
    3220:	418a      	sbcs	r2, r1
    3222:	2100      	movs	r1, #0
    3224:	4317      	orrs	r7, r2
    3226:	e6af      	b.n	2f88 <__aeabi_dsub+0xa4>
    3228:	000007ff 	.word	0x000007ff
    322c:	ff7fffff 	.word	0xff7fffff
    3230:	800fffff 	.word	0x800fffff
    3234:	2e00      	cmp	r6, #0
    3236:	d03e      	beq.n	32b6 <__aeabi_dsub+0x3d2>
    3238:	4eb3      	ldr	r6, [pc, #716]	; (3508 <__aeabi_dsub+0x624>)
    323a:	45b4      	cmp	ip, r6
    323c:	d045      	beq.n	32ca <__aeabi_dsub+0x3e6>
    323e:	2680      	movs	r6, #128	; 0x80
    3240:	0436      	lsls	r6, r6, #16
    3242:	426d      	negs	r5, r5
    3244:	4334      	orrs	r4, r6
    3246:	2d38      	cmp	r5, #56	; 0x38
    3248:	dd00      	ble.n	324c <__aeabi_dsub+0x368>
    324a:	e0a8      	b.n	339e <__aeabi_dsub+0x4ba>
    324c:	2d1f      	cmp	r5, #31
    324e:	dd00      	ble.n	3252 <__aeabi_dsub+0x36e>
    3250:	e11f      	b.n	3492 <__aeabi_dsub+0x5ae>
    3252:	2620      	movs	r6, #32
    3254:	0027      	movs	r7, r4
    3256:	4650      	mov	r0, sl
    3258:	1b76      	subs	r6, r6, r5
    325a:	40b7      	lsls	r7, r6
    325c:	40e8      	lsrs	r0, r5
    325e:	4307      	orrs	r7, r0
    3260:	4650      	mov	r0, sl
    3262:	40b0      	lsls	r0, r6
    3264:	1e46      	subs	r6, r0, #1
    3266:	41b0      	sbcs	r0, r6
    3268:	40ec      	lsrs	r4, r5
    326a:	4338      	orrs	r0, r7
    326c:	1a17      	subs	r7, r2, r0
    326e:	42ba      	cmp	r2, r7
    3270:	4192      	sbcs	r2, r2
    3272:	1b0c      	subs	r4, r1, r4
    3274:	4252      	negs	r2, r2
    3276:	1aa4      	subs	r4, r4, r2
    3278:	4666      	mov	r6, ip
    327a:	4698      	mov	r8, r3
    327c:	e68b      	b.n	2f96 <__aeabi_dsub+0xb2>
    327e:	4664      	mov	r4, ip
    3280:	4667      	mov	r7, ip
    3282:	432c      	orrs	r4, r5
    3284:	d000      	beq.n	3288 <__aeabi_dsub+0x3a4>
    3286:	e68b      	b.n	2fa0 <__aeabi_dsub+0xbc>
    3288:	2500      	movs	r5, #0
    328a:	2600      	movs	r6, #0
    328c:	2700      	movs	r7, #0
    328e:	e6ea      	b.n	3066 <__aeabi_dsub+0x182>
    3290:	001e      	movs	r6, r3
    3292:	e6ad      	b.n	2ff0 <__aeabi_dsub+0x10c>
    3294:	2b1f      	cmp	r3, #31
    3296:	dc60      	bgt.n	335a <__aeabi_dsub+0x476>
    3298:	2720      	movs	r7, #32
    329a:	1af8      	subs	r0, r7, r3
    329c:	000f      	movs	r7, r1
    329e:	4684      	mov	ip, r0
    32a0:	4087      	lsls	r7, r0
    32a2:	0010      	movs	r0, r2
    32a4:	40d8      	lsrs	r0, r3
    32a6:	4307      	orrs	r7, r0
    32a8:	4660      	mov	r0, ip
    32aa:	4082      	lsls	r2, r0
    32ac:	1e50      	subs	r0, r2, #1
    32ae:	4182      	sbcs	r2, r0
    32b0:	40d9      	lsrs	r1, r3
    32b2:	4317      	orrs	r7, r2
    32b4:	e6f5      	b.n	30a2 <__aeabi_dsub+0x1be>
    32b6:	0026      	movs	r6, r4
    32b8:	4650      	mov	r0, sl
    32ba:	4306      	orrs	r6, r0
    32bc:	d005      	beq.n	32ca <__aeabi_dsub+0x3e6>
    32be:	43ed      	mvns	r5, r5
    32c0:	2d00      	cmp	r5, #0
    32c2:	d0d3      	beq.n	326c <__aeabi_dsub+0x388>
    32c4:	4e90      	ldr	r6, [pc, #576]	; (3508 <__aeabi_dsub+0x624>)
    32c6:	45b4      	cmp	ip, r6
    32c8:	d1bd      	bne.n	3246 <__aeabi_dsub+0x362>
    32ca:	000c      	movs	r4, r1
    32cc:	0017      	movs	r7, r2
    32ce:	4666      	mov	r6, ip
    32d0:	4698      	mov	r8, r3
    32d2:	e68d      	b.n	2ff0 <__aeabi_dsub+0x10c>
    32d4:	488c      	ldr	r0, [pc, #560]	; (3508 <__aeabi_dsub+0x624>)
    32d6:	4283      	cmp	r3, r0
    32d8:	d00b      	beq.n	32f2 <__aeabi_dsub+0x40e>
    32da:	4663      	mov	r3, ip
    32dc:	e6d9      	b.n	3092 <__aeabi_dsub+0x1ae>
    32de:	2d00      	cmp	r5, #0
    32e0:	d000      	beq.n	32e4 <__aeabi_dsub+0x400>
    32e2:	e096      	b.n	3412 <__aeabi_dsub+0x52e>
    32e4:	0008      	movs	r0, r1
    32e6:	4310      	orrs	r0, r2
    32e8:	d100      	bne.n	32ec <__aeabi_dsub+0x408>
    32ea:	e0e2      	b.n	34b2 <__aeabi_dsub+0x5ce>
    32ec:	000c      	movs	r4, r1
    32ee:	0017      	movs	r7, r2
    32f0:	4698      	mov	r8, r3
    32f2:	4e85      	ldr	r6, [pc, #532]	; (3508 <__aeabi_dsub+0x624>)
    32f4:	e67c      	b.n	2ff0 <__aeabi_dsub+0x10c>
    32f6:	2500      	movs	r5, #0
    32f8:	e780      	b.n	31fc <__aeabi_dsub+0x318>
    32fa:	2100      	movs	r1, #0
    32fc:	e78e      	b.n	321c <__aeabi_dsub+0x338>
    32fe:	0023      	movs	r3, r4
    3300:	4650      	mov	r0, sl
    3302:	4303      	orrs	r3, r0
    3304:	2e00      	cmp	r6, #0
    3306:	d000      	beq.n	330a <__aeabi_dsub+0x426>
    3308:	e0a8      	b.n	345c <__aeabi_dsub+0x578>
    330a:	2b00      	cmp	r3, #0
    330c:	d100      	bne.n	3310 <__aeabi_dsub+0x42c>
    330e:	e0de      	b.n	34ce <__aeabi_dsub+0x5ea>
    3310:	000b      	movs	r3, r1
    3312:	4313      	orrs	r3, r2
    3314:	d100      	bne.n	3318 <__aeabi_dsub+0x434>
    3316:	e66b      	b.n	2ff0 <__aeabi_dsub+0x10c>
    3318:	4452      	add	r2, sl
    331a:	4552      	cmp	r2, sl
    331c:	4180      	sbcs	r0, r0
    331e:	1864      	adds	r4, r4, r1
    3320:	4240      	negs	r0, r0
    3322:	1824      	adds	r4, r4, r0
    3324:	0017      	movs	r7, r2
    3326:	0223      	lsls	r3, r4, #8
    3328:	d400      	bmi.n	332c <__aeabi_dsub+0x448>
    332a:	e6fd      	b.n	3128 <__aeabi_dsub+0x244>
    332c:	4b77      	ldr	r3, [pc, #476]	; (350c <__aeabi_dsub+0x628>)
    332e:	4666      	mov	r6, ip
    3330:	401c      	ands	r4, r3
    3332:	e65d      	b.n	2ff0 <__aeabi_dsub+0x10c>
    3334:	0025      	movs	r5, r4
    3336:	4650      	mov	r0, sl
    3338:	4305      	orrs	r5, r0
    333a:	2e00      	cmp	r6, #0
    333c:	d1cf      	bne.n	32de <__aeabi_dsub+0x3fa>
    333e:	2d00      	cmp	r5, #0
    3340:	d14f      	bne.n	33e2 <__aeabi_dsub+0x4fe>
    3342:	000c      	movs	r4, r1
    3344:	4314      	orrs	r4, r2
    3346:	d100      	bne.n	334a <__aeabi_dsub+0x466>
    3348:	e0a0      	b.n	348c <__aeabi_dsub+0x5a8>
    334a:	000c      	movs	r4, r1
    334c:	0017      	movs	r7, r2
    334e:	4698      	mov	r8, r3
    3350:	e64e      	b.n	2ff0 <__aeabi_dsub+0x10c>
    3352:	4666      	mov	r6, ip
    3354:	2400      	movs	r4, #0
    3356:	2700      	movs	r7, #0
    3358:	e685      	b.n	3066 <__aeabi_dsub+0x182>
    335a:	001f      	movs	r7, r3
    335c:	0008      	movs	r0, r1
    335e:	3f20      	subs	r7, #32
    3360:	40f8      	lsrs	r0, r7
    3362:	0007      	movs	r7, r0
    3364:	2b20      	cmp	r3, #32
    3366:	d100      	bne.n	336a <__aeabi_dsub+0x486>
    3368:	e08e      	b.n	3488 <__aeabi_dsub+0x5a4>
    336a:	2040      	movs	r0, #64	; 0x40
    336c:	1ac3      	subs	r3, r0, r3
    336e:	4099      	lsls	r1, r3
    3370:	430a      	orrs	r2, r1
    3372:	1e51      	subs	r1, r2, #1
    3374:	418a      	sbcs	r2, r1
    3376:	2100      	movs	r1, #0
    3378:	4317      	orrs	r7, r2
    337a:	e692      	b.n	30a2 <__aeabi_dsub+0x1be>
    337c:	2e00      	cmp	r6, #0
    337e:	d114      	bne.n	33aa <__aeabi_dsub+0x4c6>
    3380:	0026      	movs	r6, r4
    3382:	4650      	mov	r0, sl
    3384:	4306      	orrs	r6, r0
    3386:	d062      	beq.n	344e <__aeabi_dsub+0x56a>
    3388:	43db      	mvns	r3, r3
    338a:	2b00      	cmp	r3, #0
    338c:	d15c      	bne.n	3448 <__aeabi_dsub+0x564>
    338e:	1887      	adds	r7, r0, r2
    3390:	4297      	cmp	r7, r2
    3392:	4192      	sbcs	r2, r2
    3394:	1864      	adds	r4, r4, r1
    3396:	4252      	negs	r2, r2
    3398:	18a4      	adds	r4, r4, r2
    339a:	4666      	mov	r6, ip
    339c:	e687      	b.n	30ae <__aeabi_dsub+0x1ca>
    339e:	4650      	mov	r0, sl
    33a0:	4320      	orrs	r0, r4
    33a2:	1e44      	subs	r4, r0, #1
    33a4:	41a0      	sbcs	r0, r4
    33a6:	2400      	movs	r4, #0
    33a8:	e760      	b.n	326c <__aeabi_dsub+0x388>
    33aa:	4e57      	ldr	r6, [pc, #348]	; (3508 <__aeabi_dsub+0x624>)
    33ac:	45b4      	cmp	ip, r6
    33ae:	d04e      	beq.n	344e <__aeabi_dsub+0x56a>
    33b0:	2680      	movs	r6, #128	; 0x80
    33b2:	0436      	lsls	r6, r6, #16
    33b4:	425b      	negs	r3, r3
    33b6:	4334      	orrs	r4, r6
    33b8:	2b38      	cmp	r3, #56	; 0x38
    33ba:	dd00      	ble.n	33be <__aeabi_dsub+0x4da>
    33bc:	e07f      	b.n	34be <__aeabi_dsub+0x5da>
    33be:	2b1f      	cmp	r3, #31
    33c0:	dd00      	ble.n	33c4 <__aeabi_dsub+0x4e0>
    33c2:	e08b      	b.n	34dc <__aeabi_dsub+0x5f8>
    33c4:	2620      	movs	r6, #32
    33c6:	0027      	movs	r7, r4
    33c8:	4650      	mov	r0, sl
    33ca:	1af6      	subs	r6, r6, r3
    33cc:	40b7      	lsls	r7, r6
    33ce:	40d8      	lsrs	r0, r3
    33d0:	4307      	orrs	r7, r0
    33d2:	4650      	mov	r0, sl
    33d4:	40b0      	lsls	r0, r6
    33d6:	1e46      	subs	r6, r0, #1
    33d8:	41b0      	sbcs	r0, r6
    33da:	4307      	orrs	r7, r0
    33dc:	40dc      	lsrs	r4, r3
    33de:	18bf      	adds	r7, r7, r2
    33e0:	e7d6      	b.n	3390 <__aeabi_dsub+0x4ac>
    33e2:	000d      	movs	r5, r1
    33e4:	4315      	orrs	r5, r2
    33e6:	d100      	bne.n	33ea <__aeabi_dsub+0x506>
    33e8:	e602      	b.n	2ff0 <__aeabi_dsub+0x10c>
    33ea:	4650      	mov	r0, sl
    33ec:	1a80      	subs	r0, r0, r2
    33ee:	4582      	cmp	sl, r0
    33f0:	41bf      	sbcs	r7, r7
    33f2:	1a65      	subs	r5, r4, r1
    33f4:	427f      	negs	r7, r7
    33f6:	1bed      	subs	r5, r5, r7
    33f8:	4684      	mov	ip, r0
    33fa:	0228      	lsls	r0, r5, #8
    33fc:	d400      	bmi.n	3400 <__aeabi_dsub+0x51c>
    33fe:	e68d      	b.n	311c <__aeabi_dsub+0x238>
    3400:	4650      	mov	r0, sl
    3402:	1a17      	subs	r7, r2, r0
    3404:	42ba      	cmp	r2, r7
    3406:	4192      	sbcs	r2, r2
    3408:	1b0c      	subs	r4, r1, r4
    340a:	4252      	negs	r2, r2
    340c:	1aa4      	subs	r4, r4, r2
    340e:	4698      	mov	r8, r3
    3410:	e5ee      	b.n	2ff0 <__aeabi_dsub+0x10c>
    3412:	000d      	movs	r5, r1
    3414:	4315      	orrs	r5, r2
    3416:	d100      	bne.n	341a <__aeabi_dsub+0x536>
    3418:	e76b      	b.n	32f2 <__aeabi_dsub+0x40e>
    341a:	4650      	mov	r0, sl
    341c:	0767      	lsls	r7, r4, #29
    341e:	08c0      	lsrs	r0, r0, #3
    3420:	4307      	orrs	r7, r0
    3422:	2080      	movs	r0, #128	; 0x80
    3424:	08e4      	lsrs	r4, r4, #3
    3426:	0300      	lsls	r0, r0, #12
    3428:	4204      	tst	r4, r0
    342a:	d007      	beq.n	343c <__aeabi_dsub+0x558>
    342c:	08cd      	lsrs	r5, r1, #3
    342e:	4205      	tst	r5, r0
    3430:	d104      	bne.n	343c <__aeabi_dsub+0x558>
    3432:	002c      	movs	r4, r5
    3434:	4698      	mov	r8, r3
    3436:	08d7      	lsrs	r7, r2, #3
    3438:	0749      	lsls	r1, r1, #29
    343a:	430f      	orrs	r7, r1
    343c:	0f7b      	lsrs	r3, r7, #29
    343e:	00e4      	lsls	r4, r4, #3
    3440:	431c      	orrs	r4, r3
    3442:	00ff      	lsls	r7, r7, #3
    3444:	4e30      	ldr	r6, [pc, #192]	; (3508 <__aeabi_dsub+0x624>)
    3446:	e5d3      	b.n	2ff0 <__aeabi_dsub+0x10c>
    3448:	4e2f      	ldr	r6, [pc, #188]	; (3508 <__aeabi_dsub+0x624>)
    344a:	45b4      	cmp	ip, r6
    344c:	d1b4      	bne.n	33b8 <__aeabi_dsub+0x4d4>
    344e:	000c      	movs	r4, r1
    3450:	0017      	movs	r7, r2
    3452:	4666      	mov	r6, ip
    3454:	e5cc      	b.n	2ff0 <__aeabi_dsub+0x10c>
    3456:	2700      	movs	r7, #0
    3458:	2400      	movs	r4, #0
    345a:	e5e8      	b.n	302e <__aeabi_dsub+0x14a>
    345c:	2b00      	cmp	r3, #0
    345e:	d039      	beq.n	34d4 <__aeabi_dsub+0x5f0>
    3460:	000b      	movs	r3, r1
    3462:	4313      	orrs	r3, r2
    3464:	d100      	bne.n	3468 <__aeabi_dsub+0x584>
    3466:	e744      	b.n	32f2 <__aeabi_dsub+0x40e>
    3468:	08c0      	lsrs	r0, r0, #3
    346a:	0767      	lsls	r7, r4, #29
    346c:	4307      	orrs	r7, r0
    346e:	2080      	movs	r0, #128	; 0x80
    3470:	08e4      	lsrs	r4, r4, #3
    3472:	0300      	lsls	r0, r0, #12
    3474:	4204      	tst	r4, r0
    3476:	d0e1      	beq.n	343c <__aeabi_dsub+0x558>
    3478:	08cb      	lsrs	r3, r1, #3
    347a:	4203      	tst	r3, r0
    347c:	d1de      	bne.n	343c <__aeabi_dsub+0x558>
    347e:	08d7      	lsrs	r7, r2, #3
    3480:	0749      	lsls	r1, r1, #29
    3482:	430f      	orrs	r7, r1
    3484:	001c      	movs	r4, r3
    3486:	e7d9      	b.n	343c <__aeabi_dsub+0x558>
    3488:	2100      	movs	r1, #0
    348a:	e771      	b.n	3370 <__aeabi_dsub+0x48c>
    348c:	2500      	movs	r5, #0
    348e:	2700      	movs	r7, #0
    3490:	e5e9      	b.n	3066 <__aeabi_dsub+0x182>
    3492:	002e      	movs	r6, r5
    3494:	0027      	movs	r7, r4
    3496:	3e20      	subs	r6, #32
    3498:	40f7      	lsrs	r7, r6
    349a:	2d20      	cmp	r5, #32
    349c:	d02f      	beq.n	34fe <__aeabi_dsub+0x61a>
    349e:	2640      	movs	r6, #64	; 0x40
    34a0:	1b75      	subs	r5, r6, r5
    34a2:	40ac      	lsls	r4, r5
    34a4:	4650      	mov	r0, sl
    34a6:	4320      	orrs	r0, r4
    34a8:	1e44      	subs	r4, r0, #1
    34aa:	41a0      	sbcs	r0, r4
    34ac:	2400      	movs	r4, #0
    34ae:	4338      	orrs	r0, r7
    34b0:	e6dc      	b.n	326c <__aeabi_dsub+0x388>
    34b2:	2480      	movs	r4, #128	; 0x80
    34b4:	2500      	movs	r5, #0
    34b6:	0324      	lsls	r4, r4, #12
    34b8:	4e13      	ldr	r6, [pc, #76]	; (3508 <__aeabi_dsub+0x624>)
    34ba:	2700      	movs	r7, #0
    34bc:	e5d3      	b.n	3066 <__aeabi_dsub+0x182>
    34be:	4650      	mov	r0, sl
    34c0:	4320      	orrs	r0, r4
    34c2:	0007      	movs	r7, r0
    34c4:	1e78      	subs	r0, r7, #1
    34c6:	4187      	sbcs	r7, r0
    34c8:	2400      	movs	r4, #0
    34ca:	18bf      	adds	r7, r7, r2
    34cc:	e760      	b.n	3390 <__aeabi_dsub+0x4ac>
    34ce:	000c      	movs	r4, r1
    34d0:	0017      	movs	r7, r2
    34d2:	e58d      	b.n	2ff0 <__aeabi_dsub+0x10c>
    34d4:	000c      	movs	r4, r1
    34d6:	0017      	movs	r7, r2
    34d8:	4e0b      	ldr	r6, [pc, #44]	; (3508 <__aeabi_dsub+0x624>)
    34da:	e589      	b.n	2ff0 <__aeabi_dsub+0x10c>
    34dc:	001e      	movs	r6, r3
    34de:	0027      	movs	r7, r4
    34e0:	3e20      	subs	r6, #32
    34e2:	40f7      	lsrs	r7, r6
    34e4:	2b20      	cmp	r3, #32
    34e6:	d00c      	beq.n	3502 <__aeabi_dsub+0x61e>
    34e8:	2640      	movs	r6, #64	; 0x40
    34ea:	1af3      	subs	r3, r6, r3
    34ec:	409c      	lsls	r4, r3
    34ee:	4650      	mov	r0, sl
    34f0:	4320      	orrs	r0, r4
    34f2:	1e44      	subs	r4, r0, #1
    34f4:	41a0      	sbcs	r0, r4
    34f6:	4307      	orrs	r7, r0
    34f8:	2400      	movs	r4, #0
    34fa:	18bf      	adds	r7, r7, r2
    34fc:	e748      	b.n	3390 <__aeabi_dsub+0x4ac>
    34fe:	2400      	movs	r4, #0
    3500:	e7d0      	b.n	34a4 <__aeabi_dsub+0x5c0>
    3502:	2400      	movs	r4, #0
    3504:	e7f3      	b.n	34ee <__aeabi_dsub+0x60a>
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	000007ff 	.word	0x000007ff
    350c:	ff7fffff 	.word	0xff7fffff

00003510 <__aeabi_d2iz>:
    3510:	b530      	push	{r4, r5, lr}
    3512:	4d13      	ldr	r5, [pc, #76]	; (3560 <__aeabi_d2iz+0x50>)
    3514:	030a      	lsls	r2, r1, #12
    3516:	004b      	lsls	r3, r1, #1
    3518:	0b12      	lsrs	r2, r2, #12
    351a:	0d5b      	lsrs	r3, r3, #21
    351c:	0fc9      	lsrs	r1, r1, #31
    351e:	2400      	movs	r4, #0
    3520:	42ab      	cmp	r3, r5
    3522:	dd10      	ble.n	3546 <__aeabi_d2iz+0x36>
    3524:	4c0f      	ldr	r4, [pc, #60]	; (3564 <__aeabi_d2iz+0x54>)
    3526:	42a3      	cmp	r3, r4
    3528:	dc0f      	bgt.n	354a <__aeabi_d2iz+0x3a>
    352a:	2480      	movs	r4, #128	; 0x80
    352c:	4d0e      	ldr	r5, [pc, #56]	; (3568 <__aeabi_d2iz+0x58>)
    352e:	0364      	lsls	r4, r4, #13
    3530:	4322      	orrs	r2, r4
    3532:	1aed      	subs	r5, r5, r3
    3534:	2d1f      	cmp	r5, #31
    3536:	dd0b      	ble.n	3550 <__aeabi_d2iz+0x40>
    3538:	480c      	ldr	r0, [pc, #48]	; (356c <__aeabi_d2iz+0x5c>)
    353a:	1ac3      	subs	r3, r0, r3
    353c:	40da      	lsrs	r2, r3
    353e:	4254      	negs	r4, r2
    3540:	2900      	cmp	r1, #0
    3542:	d100      	bne.n	3546 <__aeabi_d2iz+0x36>
    3544:	0014      	movs	r4, r2
    3546:	0020      	movs	r0, r4
    3548:	bd30      	pop	{r4, r5, pc}
    354a:	4b09      	ldr	r3, [pc, #36]	; (3570 <__aeabi_d2iz+0x60>)
    354c:	18cc      	adds	r4, r1, r3
    354e:	e7fa      	b.n	3546 <__aeabi_d2iz+0x36>
    3550:	4c08      	ldr	r4, [pc, #32]	; (3574 <__aeabi_d2iz+0x64>)
    3552:	40e8      	lsrs	r0, r5
    3554:	46a4      	mov	ip, r4
    3556:	4463      	add	r3, ip
    3558:	409a      	lsls	r2, r3
    355a:	4302      	orrs	r2, r0
    355c:	e7ef      	b.n	353e <__aeabi_d2iz+0x2e>
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	000003fe 	.word	0x000003fe
    3564:	0000041d 	.word	0x0000041d
    3568:	00000433 	.word	0x00000433
    356c:	00000413 	.word	0x00000413
    3570:	7fffffff 	.word	0x7fffffff
    3574:	fffffbed 	.word	0xfffffbed

00003578 <__aeabi_ui2d>:
    3578:	b510      	push	{r4, lr}
    357a:	1e04      	subs	r4, r0, #0
    357c:	d028      	beq.n	35d0 <__aeabi_ui2d+0x58>
    357e:	f000 f833 	bl	35e8 <__clzsi2>
    3582:	4b15      	ldr	r3, [pc, #84]	; (35d8 <__aeabi_ui2d+0x60>)
    3584:	4a15      	ldr	r2, [pc, #84]	; (35dc <__aeabi_ui2d+0x64>)
    3586:	1a1b      	subs	r3, r3, r0
    3588:	1ad2      	subs	r2, r2, r3
    358a:	2a1f      	cmp	r2, #31
    358c:	dd15      	ble.n	35ba <__aeabi_ui2d+0x42>
    358e:	4a14      	ldr	r2, [pc, #80]	; (35e0 <__aeabi_ui2d+0x68>)
    3590:	1ad2      	subs	r2, r2, r3
    3592:	4094      	lsls	r4, r2
    3594:	2200      	movs	r2, #0
    3596:	0324      	lsls	r4, r4, #12
    3598:	055b      	lsls	r3, r3, #21
    359a:	0b24      	lsrs	r4, r4, #12
    359c:	0d5b      	lsrs	r3, r3, #21
    359e:	2100      	movs	r1, #0
    35a0:	0010      	movs	r0, r2
    35a2:	0324      	lsls	r4, r4, #12
    35a4:	0d0a      	lsrs	r2, r1, #20
    35a6:	0b24      	lsrs	r4, r4, #12
    35a8:	0512      	lsls	r2, r2, #20
    35aa:	4322      	orrs	r2, r4
    35ac:	4c0d      	ldr	r4, [pc, #52]	; (35e4 <__aeabi_ui2d+0x6c>)
    35ae:	051b      	lsls	r3, r3, #20
    35b0:	4022      	ands	r2, r4
    35b2:	4313      	orrs	r3, r2
    35b4:	005b      	lsls	r3, r3, #1
    35b6:	0859      	lsrs	r1, r3, #1
    35b8:	bd10      	pop	{r4, pc}
    35ba:	0021      	movs	r1, r4
    35bc:	4091      	lsls	r1, r2
    35be:	000a      	movs	r2, r1
    35c0:	210b      	movs	r1, #11
    35c2:	1a08      	subs	r0, r1, r0
    35c4:	40c4      	lsrs	r4, r0
    35c6:	055b      	lsls	r3, r3, #21
    35c8:	0324      	lsls	r4, r4, #12
    35ca:	0b24      	lsrs	r4, r4, #12
    35cc:	0d5b      	lsrs	r3, r3, #21
    35ce:	e7e6      	b.n	359e <__aeabi_ui2d+0x26>
    35d0:	2300      	movs	r3, #0
    35d2:	2400      	movs	r4, #0
    35d4:	2200      	movs	r2, #0
    35d6:	e7e2      	b.n	359e <__aeabi_ui2d+0x26>
    35d8:	0000041e 	.word	0x0000041e
    35dc:	00000433 	.word	0x00000433
    35e0:	00000413 	.word	0x00000413
    35e4:	800fffff 	.word	0x800fffff

000035e8 <__clzsi2>:
    35e8:	211c      	movs	r1, #28
    35ea:	2301      	movs	r3, #1
    35ec:	041b      	lsls	r3, r3, #16
    35ee:	4298      	cmp	r0, r3
    35f0:	d301      	bcc.n	35f6 <__clzsi2+0xe>
    35f2:	0c00      	lsrs	r0, r0, #16
    35f4:	3910      	subs	r1, #16
    35f6:	0a1b      	lsrs	r3, r3, #8
    35f8:	4298      	cmp	r0, r3
    35fa:	d301      	bcc.n	3600 <__clzsi2+0x18>
    35fc:	0a00      	lsrs	r0, r0, #8
    35fe:	3908      	subs	r1, #8
    3600:	091b      	lsrs	r3, r3, #4
    3602:	4298      	cmp	r0, r3
    3604:	d301      	bcc.n	360a <__clzsi2+0x22>
    3606:	0900      	lsrs	r0, r0, #4
    3608:	3904      	subs	r1, #4
    360a:	a202      	add	r2, pc, #8	; (adr r2, 3614 <__clzsi2+0x2c>)
    360c:	5c10      	ldrb	r0, [r2, r0]
    360e:	1840      	adds	r0, r0, r1
    3610:	4770      	bx	lr
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	02020304 	.word	0x02020304
    3618:	01010101 	.word	0x01010101
	...

00003624 <__libc_init_array>:
    3624:	b570      	push	{r4, r5, r6, lr}
    3626:	2600      	movs	r6, #0
    3628:	4d0c      	ldr	r5, [pc, #48]	; (365c <__libc_init_array+0x38>)
    362a:	4c0d      	ldr	r4, [pc, #52]	; (3660 <__libc_init_array+0x3c>)
    362c:	1b64      	subs	r4, r4, r5
    362e:	10a4      	asrs	r4, r4, #2
    3630:	42a6      	cmp	r6, r4
    3632:	d109      	bne.n	3648 <__libc_init_array+0x24>
    3634:	2600      	movs	r6, #0
    3636:	f000 f881 	bl	373c <_init>
    363a:	4d0a      	ldr	r5, [pc, #40]	; (3664 <__libc_init_array+0x40>)
    363c:	4c0a      	ldr	r4, [pc, #40]	; (3668 <__libc_init_array+0x44>)
    363e:	1b64      	subs	r4, r4, r5
    3640:	10a4      	asrs	r4, r4, #2
    3642:	42a6      	cmp	r6, r4
    3644:	d105      	bne.n	3652 <__libc_init_array+0x2e>
    3646:	bd70      	pop	{r4, r5, r6, pc}
    3648:	00b3      	lsls	r3, r6, #2
    364a:	58eb      	ldr	r3, [r5, r3]
    364c:	4798      	blx	r3
    364e:	3601      	adds	r6, #1
    3650:	e7ee      	b.n	3630 <__libc_init_array+0xc>
    3652:	00b3      	lsls	r3, r6, #2
    3654:	58eb      	ldr	r3, [r5, r3]
    3656:	4798      	blx	r3
    3658:	3601      	adds	r6, #1
    365a:	e7f2      	b.n	3642 <__libc_init_array+0x1e>
    365c:	00003748 	.word	0x00003748
    3660:	00003748 	.word	0x00003748
    3664:	00003748 	.word	0x00003748
    3668:	0000374c 	.word	0x0000374c

0000366c <memset>:
    366c:	0003      	movs	r3, r0
    366e:	1882      	adds	r2, r0, r2
    3670:	4293      	cmp	r3, r2
    3672:	d100      	bne.n	3676 <memset+0xa>
    3674:	4770      	bx	lr
    3676:	7019      	strb	r1, [r3, #0]
    3678:	3301      	adds	r3, #1
    367a:	e7f9      	b.n	3670 <memset+0x4>
    367c:	42000800 	.word	0x42000800
    3680:	42000c00 	.word	0x42000c00
    3684:	42001000 	.word	0x42001000

00003688 <_tcc_intflag>:
    3688:	00000001 00000002 00000004 00000008     ................
    3698:	00001000 00002000 00004000 00008000     ..... ...@......
    36a8:	00010000 00020000 00040000 00080000     ................

000036b8 <tc_interrupt_vectors.12207>:
    36b8:	00000e0d 00002574 00002556 00002510     ....t%..V%...%..
    36c8:	0000242e 00002510 00002548 00002510     .$...%..H%...%..
    36d8:	0000242e 00002556 00002556 00002548     .$..V%..V%..H%..
    36e8:	0000242e 00002426 00002426 00002426     .$..&$..&$..&$..
    36f8:	0000278c 00002bd4 00002a94 00002a94     .'...+...*...*..
    3708:	00002a90 00002bac 00002bac 00002b9e     .*...+...+...+..
    3718:	00002a90 00002bac 00002b9e 00002bac     .*...+...+...+..
    3728:	00002a90 00002bb4 00002bb4 00002bb4     .*...+...+...+..
    3738:	00002db8                                .-..

0000373c <_init>:
    373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    373e:	46c0      	nop			; (mov r8, r8)
    3740:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3742:	bc08      	pop	{r3}
    3744:	469e      	mov	lr, r3
    3746:	4770      	bx	lr

00003748 <__init_array_start>:
    3748:	000000b5 	.word	0x000000b5

0000374c <_fini>:
    374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    374e:	46c0      	nop			; (mov r8, r8)
    3750:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3752:	bc08      	pop	{r3}
    3754:	469e      	mov	lr, r3
    3756:	4770      	bx	lr

00003758 <__fini_array_start>:
    3758:	0000008d 	.word	0x0000008d
