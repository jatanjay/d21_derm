
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00003cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001c8  2000001c  00003cc8  0002001c  2**2
                  ALLOC
  3 .stack        00000404  200001e4  00003e90  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
  6 .debug_info   00033e00  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004432  00000000  00000000  00053e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006076  00000000  00000000  000582d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f8  00000000  00000000  0005e347  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bb8  00000000  00000000  0005ea3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017ea0  00000000  00000000  0005f5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e198  00000000  00000000  00077497  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007b3d6  00000000  00000000  0008562f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001304  00000000  00000000  00100a08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 05 00 20 e5 18 00 00 e3 18 00 00 e3 18 00 00     ... ............
	...
      2c:	e3 18 00 00 00 00 00 00 00 00 00 00 e3 18 00 00     ................
      3c:	e3 18 00 00 e3 18 00 00 e3 18 00 00 e3 18 00 00     ................
      4c:	e3 18 00 00 e3 18 00 00 e3 18 00 00 e3 18 00 00     ................
      5c:	e3 18 00 00 e3 18 00 00 4d 0a 00 00 5d 0a 00 00     ........M...]...
      6c:	6d 0a 00 00 89 15 00 00 1d 16 00 00 2d 16 00 00     m...........-...
      7c:	e3 18 00 00 e3 18 00 00 e3 18 00 00 e3 18 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000001c 	.word	0x2000001c
      ac:	00000000 	.word	0x00000000
      b0:	00003cac 	.word	0x00003cac

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000020 	.word	0x20000020
      e0:	00003cac 	.word	0x00003cac
      e4:	00003cac 	.word	0x00003cac
      e8:	00000000 	.word	0x00000000

000000ec <configure_pwm_tcc>:
		break;
	}
}

void configure_pwm_tcc(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
      ee:	4c1f      	ldr	r4, [pc, #124]	; (16c <configure_pwm_tcc+0x80>)
      f0:	491f      	ldr	r1, [pc, #124]	; (170 <configure_pwm_tcc+0x84>)
      f2:	0020      	movs	r0, r4
      f4:	4b1f      	ldr	r3, [pc, #124]	; (174 <configure_pwm_tcc+0x88>)
      f6:	4798      	blx	r3

	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
	
	
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
      f8:	2205      	movs	r2, #5
	config_tcc.compare.match[WHITE_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
      fa:	2300      	movs	r3, #0
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
      fc:	67a2      	str	r2, [r4, #120]	; 0x78
	config_tcc.compare.match[WHITE_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
      fe:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.compare.match[RED_CHANNEL]											= 0x2FF;

	config_tcc.pins.wave_out_pin[GREEN_CHANNEL]							= PIN_PA05F_TCC0_WO1;		// GREEN
     100:	65e2      	str	r2, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     102:	3304      	adds	r3, #4
	config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL]						= MUX_PA05F_TCC0_WO1;
     104:	67e2      	str	r2, [r4, #124]	; 0x7c
	config_tcc.compare.match[GREEN_CHANNEL]											= 0XFFF;

	config_tcc.pins.wave_out_pin[BLUE_CHANNEL]							= PIN_PA08E_TCC0_WO2;		// BLUE
     106:	3203      	adds	r2, #3
     108:	6622      	str	r2, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL]						= MUX_PA08E_TCC0_WO2;
     10a:	18e2      	adds	r2, r4, r3
     10c:	67d3      	str	r3, [r2, #124]	; 0x7c
	config_tcc.compare.match[BLUE_CHANNEL]											= 0x2FF;

	config_tcc.pins.wave_out_pin[WHITE_CHANNEL]							= PIN_PA09E_TCC0_WO3;		// WHITE
     10e:	2209      	movs	r2, #9
     110:	6662      	str	r2, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]						= MUX_PA09E_TCC0_WO3;
     112:	0022      	movs	r2, r4
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     114:	2502      	movs	r5, #2
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     116:	4818      	ldr	r0, [pc, #96]	; (178 <configure_pwm_tcc+0x8c>)
	config_tcc.compare.match[RED_CHANNEL]											= 0x2FF;
     118:	4918      	ldr	r1, [pc, #96]	; (17c <configure_pwm_tcc+0x90>)
	//config_tcc.compare.match[WHITE_CHANNEL]											= 0xFFF;
	
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     11a:	4e19      	ldr	r6, [pc, #100]	; (180 <configure_pwm_tcc+0x94>)
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]						= MUX_PA09E_TCC0_WO3;
     11c:	3208      	adds	r2, #8
     11e:	67d3      	str	r3, [r2, #124]	; 0x7c
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     120:	6060      	str	r0, [r4, #4]
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     122:	65a3      	str	r3, [r4, #88]	; 0x58
	config_tcc.compare.match[RED_CHANNEL]											= 0x2FF;
     124:	61e1      	str	r1, [r4, #28]
	config_tcc.compare.match[GREEN_CHANNEL]											= 0XFFF;
     126:	6220      	str	r0, [r4, #32]
	config_tcc.compare.match[BLUE_CHANNEL]											= 0x2FF;
     128:	6261      	str	r1, [r4, #36]	; 0x24
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     12a:	4b16      	ldr	r3, [pc, #88]	; (184 <configure_pwm_tcc+0x98>)
     12c:	0022      	movs	r2, r4
     12e:	4910      	ldr	r1, [pc, #64]	; (170 <configure_pwm_tcc+0x84>)
     130:	0030      	movs	r0, r6
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     132:	7625      	strb	r5, [r4, #24]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     134:	4798      	blx	r3
     136:	6833      	ldr	r3, [r6, #0]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     138:	689a      	ldr	r2, [r3, #8]
     13a:	422a      	tst	r2, r5
     13c:	d1fc      	bne.n	138 <configure_pwm_tcc+0x4c>
	Tcc *const tcc_module = module_inst->hw;
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     13e:	2004      	movs	r0, #4
     140:	241f      	movs	r4, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Cancel STOP command and issue RETRIGGER */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     142:	21e0      	movs	r1, #224	; 0xe0
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     144:	681a      	ldr	r2, [r3, #0]
     146:	4315      	orrs	r5, r2
     148:	601d      	str	r5, [r3, #0]
     14a:	6832      	ldr	r2, [r6, #0]
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     14c:	6893      	ldr	r3, [r2, #8]
     14e:	4203      	tst	r3, r0
     150:	d1fc      	bne.n	14c <configure_pwm_tcc+0x60>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     152:	7953      	ldrb	r3, [r2, #5]
     154:	43a3      	bics	r3, r4
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     156:	d005      	beq.n	164 <configure_pwm_tcc+0x78>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
     158:	2b20      	cmp	r3, #32
     15a:	d005      	beq.n	168 <configure_pwm_tcc+0x7c>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
     15c:	2b40      	cmp	r3, #64	; 0x40
     15e:	d1f5      	bne.n	14c <configure_pwm_tcc+0x60>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     160:	7111      	strb	r1, [r2, #4]
     162:	e7f3      	b.n	14c <configure_pwm_tcc+0x60>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_RETRIGGER;
     164:	2320      	movs	r3, #32
     166:	7153      	strb	r3, [r2, #5]
	tcc_enable(&tcc_instance);
	tcc_restart_counter(&tcc_instance);
	
}
     168:	bd70      	pop	{r4, r5, r6, pc}
     16a:	46c0      	nop			; (mov r8, r8)
     16c:	200000c8 	.word	0x200000c8
     170:	42001400 	.word	0x42001400
     174:	000011a1 	.word	0x000011a1
     178:	00000fff 	.word	0x00000fff
     17c:	000002ff 	.word	0x000002ff
     180:	20000088 	.word	0x20000088
     184:	00001285 	.word	0x00001285

00000188 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     188:	4b09      	ldr	r3, [pc, #36]	; (1b0 <cpu_irq_enter_critical+0x28>)
     18a:	6819      	ldr	r1, [r3, #0]
     18c:	2900      	cmp	r1, #0
     18e:	d10b      	bne.n	1a8 <cpu_irq_enter_critical+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     190:	f3ef 8010 	mrs	r0, PRIMASK
     194:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     196:	2800      	cmp	r0, #0
     198:	d105      	bne.n	1a6 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     19a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     19c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a0:	4905      	ldr	r1, [pc, #20]	; (1b8 <cpu_irq_enter_critical+0x30>)
     1a2:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     1a4:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1a6:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1a8:	681a      	ldr	r2, [r3, #0]
     1aa:	3201      	adds	r2, #1
     1ac:	601a      	str	r2, [r3, #0]
}
     1ae:	4770      	bx	lr
     1b0:	20000038 	.word	0x20000038
     1b4:	2000003c 	.word	0x2000003c
     1b8:	20000000 	.word	0x20000000

000001bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1bc:	4b08      	ldr	r3, [pc, #32]	; (1e0 <cpu_irq_leave_critical+0x24>)
     1be:	681a      	ldr	r2, [r3, #0]
     1c0:	3a01      	subs	r2, #1
     1c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d109      	bne.n	1de <cpu_irq_leave_critical+0x22>
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <cpu_irq_leave_critical+0x28>)
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	2b00      	cmp	r3, #0
     1d0:	d005      	beq.n	1de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d2:	2201      	movs	r2, #1
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_leave_critical+0x2c>)
     1d6:	701a      	strb	r2, [r3, #0]
     1d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1dc:	b662      	cpsie	i
	}
}
     1de:	4770      	bx	lr
     1e0:	20000038 	.word	0x20000038
     1e4:	2000003c 	.word	0x2000003c
     1e8:	20000000 	.word	0x20000000

000001ec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1ee:	2501      	movs	r5, #1
	config->powersave  = false;
     1f0:	2700      	movs	r7, #0
	config->input_pull = PORT_PIN_PULL_UP;
     1f2:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1f4:	4e08      	ldr	r6, [pc, #32]	; (218 <system_board_init+0x2c>)
     1f6:	0021      	movs	r1, r4
     1f8:	2010      	movs	r0, #16
     1fa:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fc:	70a7      	strb	r7, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     202:	2280      	movs	r2, #128	; 0x80
     204:	4b05      	ldr	r3, [pc, #20]	; (21c <system_board_init+0x30>)
     206:	0252      	lsls	r2, r2, #9
     208:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     20a:	0021      	movs	r1, r4
     20c:	200e      	movs	r0, #14
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     20e:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     210:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     212:	47b0      	blx	r6
}
     214:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     216:	46c0      	nop			; (mov r8, r8)
     218:	00000221 	.word	0x00000221
     21c:	41004400 	.word	0x41004400

00000220 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     220:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     222:	2280      	movs	r2, #128	; 0x80
     224:	ab01      	add	r3, sp, #4
     226:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     228:	780a      	ldrb	r2, [r1, #0]
     22a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     22c:	784a      	ldrb	r2, [r1, #1]
     22e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     230:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     232:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     234:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     236:	4b01      	ldr	r3, [pc, #4]	; (23c <port_pin_set_config+0x1c>)
     238:	4798      	blx	r3
}
     23a:	bd07      	pop	{r0, r1, r2, pc}
     23c:	00001141 	.word	0x00001141

00000240 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     240:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     242:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     244:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     246:	421a      	tst	r2, r3
     248:	d1fc      	bne.n	244 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     24a:	4770      	bx	lr

0000024c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     24c:	b5f0      	push	{r4, r5, r6, r7, lr}
     24e:	0007      	movs	r7, r0
     250:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     252:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     254:	0008      	movs	r0, r1
     256:	4b9b      	ldr	r3, [pc, #620]	; (4c4 <STACK_SIZE+0xc4>)
{
     258:	0014      	movs	r4, r2
     25a:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     25c:	4798      	blx	r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     25e:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     260:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     262:	409d      	lsls	r5, r3
     264:	002b      	movs	r3, r5
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     266:	4a98      	ldr	r2, [pc, #608]	; (4c8 <STACK_SIZE+0xc8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     268:	300e      	adds	r0, #14
     26a:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     26c:	b2c5      	uxtb	r5, r0
     26e:	430b      	orrs	r3, r1
     270:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     272:	7b23      	ldrb	r3, [r4, #12]
     274:	aa08      	add	r2, sp, #32
     276:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     278:	0011      	movs	r1, r2
     27a:	0028      	movs	r0, r5
     27c:	4b93      	ldr	r3, [pc, #588]	; (4cc <STACK_SIZE+0xcc>)
     27e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     280:	0028      	movs	r0, r5
     282:	4b93      	ldr	r3, [pc, #588]	; (4d0 <STACK_SIZE+0xd0>)
     284:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     286:	4b93      	ldr	r3, [pc, #588]	; (4d4 <STACK_SIZE+0xd4>)
     288:	7b20      	ldrb	r0, [r4, #12]
     28a:	2100      	movs	r1, #0
     28c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     28e:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     290:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     292:	079b      	lsls	r3, r3, #30
     294:	d500      	bpl.n	298 <i2c_master_init+0x4c>
     296:	e109      	b.n	4ac <STACK_SIZE+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     298:	2301      	movs	r3, #1
     29a:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     29c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     29e:	401d      	ands	r5, r3
     2a0:	d000      	beq.n	2a4 <i2c_master_init+0x58>
     2a2:	e103      	b.n	4ac <STACK_SIZE+0xac>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     2a4:	4b87      	ldr	r3, [pc, #540]	; (4c4 <STACK_SIZE+0xc4>)
     2a6:	6838      	ldr	r0, [r7, #0]
     2a8:	4798      	blx	r3
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     2aa:	498b      	ldr	r1, [pc, #556]	; (4d8 <STACK_SIZE+0xd8>)
     2ac:	4b8b      	ldr	r3, [pc, #556]	; (4dc <STACK_SIZE+0xdc>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     2ae:	9004      	str	r0, [sp, #16]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     2b0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     2b2:	9b04      	ldr	r3, [sp, #16]

	/* Initialize values in module. */
	module->registered_callback = 0;
     2b4:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     2b6:	009a      	lsls	r2, r3, #2
     2b8:	4b89      	ldr	r3, [pc, #548]	; (4e0 <STACK_SIZE+0xe0>)
	module->enabled_callback = 0;
     2ba:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     2bc:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     2be:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     2c0:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     2c2:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     2c4:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     2c6:	2314      	movs	r3, #20
	module->buffer = NULL;
     2c8:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     2ca:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2cc:	683b      	ldr	r3, [r7, #0]
     2ce:	ae09      	add	r6, sp, #36	; 0x24
     2d0:	9304      	str	r3, [sp, #16]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2d2:	0018      	movs	r0, r3
     2d4:	4b7b      	ldr	r3, [pc, #492]	; (4c4 <STACK_SIZE+0xc4>)
     2d6:	4798      	blx	r3
     2d8:	2380      	movs	r3, #128	; 0x80
     2da:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
     2dc:	69e0      	ldr	r0, [r4, #28]
     2de:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2e0:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e2:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     2e4:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2e6:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     2e8:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     2ea:	2800      	cmp	r0, #0
     2ec:	d103      	bne.n	2f6 <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     2ee:	0001      	movs	r1, r0
     2f0:	4b7c      	ldr	r3, [pc, #496]	; (4e4 <STACK_SIZE+0xe4>)
     2f2:	9804      	ldr	r0, [sp, #16]
     2f4:	4798      	blx	r3
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2f6:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     2f8:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2fa:	0c00      	lsrs	r0, r0, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2fc:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2fe:	b2c0      	uxtb	r0, r0
     300:	0031      	movs	r1, r6
     302:	4b79      	ldr	r3, [pc, #484]	; (4e8 <STACK_SIZE+0xe8>)
     304:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     306:	2d00      	cmp	r5, #0
     308:	d104      	bne.n	314 <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     30a:	2101      	movs	r1, #1
     30c:	9804      	ldr	r0, [sp, #16]
     30e:	4b75      	ldr	r3, [pc, #468]	; (4e4 <STACK_SIZE+0xe4>)
     310:	4798      	blx	r3
     312:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     314:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     316:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     318:	0c2d      	lsrs	r5, r5, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     31a:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     31c:	b2e8      	uxtb	r0, r5
     31e:	4b72      	ldr	r3, [pc, #456]	; (4e8 <STACK_SIZE+0xe8>)
     320:	0031      	movs	r1, r6
     322:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     324:	8aa3      	ldrh	r3, [r4, #20]
     326:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     328:	8ae3      	ldrh	r3, [r4, #22]
     32a:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     32c:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     32e:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     330:	2a00      	cmp	r2, #0
     332:	d106      	bne.n	342 <i2c_master_init+0xf6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     334:	4b6d      	ldr	r3, [pc, #436]	; (4ec <STACK_SIZE+0xec>)
     336:	3202      	adds	r2, #2
     338:	789b      	ldrb	r3, [r3, #2]
     33a:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     33c:	1e5f      	subs	r7, r3, #1
     33e:	41bb      	sbcs	r3, r7
     340:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     342:	68a2      	ldr	r2, [r4, #8]
     344:	6927      	ldr	r7, [r4, #16]
     346:	4317      	orrs	r7, r2
     348:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     34a:	1d63      	adds	r3, r4, #5
     34c:	7fdb      	ldrb	r3, [r3, #31]
     34e:	2b00      	cmp	r3, #0
     350:	d002      	beq.n	358 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     352:	2380      	movs	r3, #128	; 0x80
     354:	05db      	lsls	r3, r3, #23
     356:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     35a:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     35c:	0023      	movs	r3, r4
     35e:	332c      	adds	r3, #44	; 0x2c
     360:	781b      	ldrb	r3, [r3, #0]
     362:	2b00      	cmp	r3, #0
     364:	d103      	bne.n	36e <i2c_master_init+0x122>
     366:	2380      	movs	r3, #128	; 0x80
     368:	049b      	lsls	r3, r3, #18
     36a:	429a      	cmp	r2, r3
     36c:	d102      	bne.n	374 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     36e:	2380      	movs	r3, #128	; 0x80
     370:	051b      	lsls	r3, r3, #20
     372:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     374:	0023      	movs	r3, r4
     376:	332d      	adds	r3, #45	; 0x2d
     378:	781b      	ldrb	r3, [r3, #0]
     37a:	2b00      	cmp	r3, #0
     37c:	d002      	beq.n	384 <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     37e:	2380      	movs	r3, #128	; 0x80
     380:	041b      	lsls	r3, r3, #16
     382:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     384:	0023      	movs	r3, r4
     386:	332e      	adds	r3, #46	; 0x2e
     388:	781b      	ldrb	r3, [r3, #0]
     38a:	2b00      	cmp	r3, #0
     38c:	d002      	beq.n	394 <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     38e:	2380      	movs	r3, #128	; 0x80
     390:	03db      	lsls	r3, r3, #15
     392:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     394:	9b04      	ldr	r3, [sp, #16]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     396:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     398:	681b      	ldr	r3, [r3, #0]
	uint32_t fscl        = 1000 * config->baud_rate;
     39a:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     39c:	431f      	orrs	r7, r3
     39e:	9b04      	ldr	r3, [sp, #16]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     3a0:	9a04      	ldr	r2, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     3a2:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     3a4:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     3a6:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     3a8:	005b      	lsls	r3, r3, #1
     3aa:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     3ac:	b2c0      	uxtb	r0, r0
     3ae:	4b50      	ldr	r3, [pc, #320]	; (4f0 <STACK_SIZE+0xf0>)
     3b0:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
     3b2:	6823      	ldr	r3, [r4, #0]
     3b4:	00ad      	lsls	r5, r5, #2
     3b6:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3b8:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     3ba:	0007      	movs	r7, r0
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3bc:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     3be:	4b4d      	ldr	r3, [pc, #308]	; (4f4 <STACK_SIZE+0xf4>)
     3c0:	4798      	blx	r3
     3c2:	4b4c      	ldr	r3, [pc, #304]	; (4f4 <STACK_SIZE+0xf4>)
     3c4:	9000      	str	r0, [sp, #0]
     3c6:	9101      	str	r1, [sp, #4]
     3c8:	0068      	lsls	r0, r5, #1
     3ca:	4798      	blx	r3
     3cc:	9002      	str	r0, [sp, #8]
     3ce:	9103      	str	r1, [sp, #12]
     3d0:	4b48      	ldr	r3, [pc, #288]	; (4f4 <STACK_SIZE+0xf4>)
     3d2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     3d4:	4798      	blx	r3
     3d6:	4e48      	ldr	r6, [pc, #288]	; (4f8 <STACK_SIZE+0xf8>)
     3d8:	9006      	str	r0, [sp, #24]
     3da:	9107      	str	r1, [sp, #28]
     3dc:	9800      	ldr	r0, [sp, #0]
     3de:	9901      	ldr	r1, [sp, #4]
     3e0:	4a46      	ldr	r2, [pc, #280]	; (4fc <STACK_SIZE+0xfc>)
     3e2:	4b47      	ldr	r3, [pc, #284]	; (500 <STACK_SIZE+0x100>)
     3e4:	47b0      	blx	r6
     3e6:	0002      	movs	r2, r0
     3e8:	000b      	movs	r3, r1
     3ea:	9806      	ldr	r0, [sp, #24]
     3ec:	9907      	ldr	r1, [sp, #28]
     3ee:	47b0      	blx	r6
     3f0:	4e44      	ldr	r6, [pc, #272]	; (504 <STACK_SIZE+0x104>)
     3f2:	2200      	movs	r2, #0
     3f4:	4b44      	ldr	r3, [pc, #272]	; (508 <STACK_SIZE+0x108>)
     3f6:	47b0      	blx	r6
     3f8:	4b3e      	ldr	r3, [pc, #248]	; (4f4 <STACK_SIZE+0xf4>)
     3fa:	9006      	str	r0, [sp, #24]
     3fc:	9107      	str	r1, [sp, #28]
     3fe:	0028      	movs	r0, r5
     400:	4798      	blx	r3
     402:	4d3d      	ldr	r5, [pc, #244]	; (4f8 <STACK_SIZE+0xf8>)
     404:	0002      	movs	r2, r0
     406:	000b      	movs	r3, r1
     408:	9806      	ldr	r0, [sp, #24]
     40a:	9907      	ldr	r1, [sp, #28]
     40c:	47a8      	blx	r5
     40e:	4d3f      	ldr	r5, [pc, #252]	; (50c <STACK_SIZE+0x10c>)
     410:	0002      	movs	r2, r0
     412:	000b      	movs	r3, r1
     414:	9800      	ldr	r0, [sp, #0]
     416:	9901      	ldr	r1, [sp, #4]
     418:	47a8      	blx	r5
     41a:	9a02      	ldr	r2, [sp, #8]
     41c:	9b03      	ldr	r3, [sp, #12]
     41e:	47b0      	blx	r6
     420:	2200      	movs	r2, #0
     422:	4b3b      	ldr	r3, [pc, #236]	; (510 <STACK_SIZE+0x110>)
     424:	47a8      	blx	r5
     426:	9a02      	ldr	r2, [sp, #8]
     428:	9b03      	ldr	r3, [sp, #12]
     42a:	4e3a      	ldr	r6, [pc, #232]	; (514 <STACK_SIZE+0x114>)
     42c:	47b0      	blx	r6
     42e:	4b3a      	ldr	r3, [pc, #232]	; (518 <STACK_SIZE+0x118>)
     430:	4798      	blx	r3
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     432:	2380      	movs	r3, #128	; 0x80
	tmp_baud = (int32_t)(div_ceil(
     434:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     436:	68a2      	ldr	r2, [r4, #8]
     438:	049b      	lsls	r3, r3, #18
     43a:	429a      	cmp	r2, r3
     43c:	d13e      	bne.n	4bc <STACK_SIZE+0xbc>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     43e:	23fa      	movs	r3, #250	; 0xfa
     440:	9c05      	ldr	r4, [sp, #20]
     442:	009b      	lsls	r3, r3, #2
     444:	435c      	muls	r4, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     446:	9a00      	ldr	r2, [sp, #0]
     448:	9b01      	ldr	r3, [sp, #4]
     44a:	4e2e      	ldr	r6, [pc, #184]	; (504 <STACK_SIZE+0x104>)
     44c:	0010      	movs	r0, r2
     44e:	0019      	movs	r1, r3
     450:	47b0      	blx	r6
     452:	4b28      	ldr	r3, [pc, #160]	; (4f4 <STACK_SIZE+0xf4>)
     454:	9000      	str	r0, [sp, #0]
     456:	9101      	str	r1, [sp, #4]
     458:	0020      	movs	r0, r4
     45a:	4798      	blx	r3
     45c:	2200      	movs	r2, #0
     45e:	4b2f      	ldr	r3, [pc, #188]	; (51c <STACK_SIZE+0x11c>)
     460:	4e25      	ldr	r6, [pc, #148]	; (4f8 <STACK_SIZE+0xf8>)
     462:	47b0      	blx	r6
     464:	4e2b      	ldr	r6, [pc, #172]	; (514 <STACK_SIZE+0x114>)
     466:	0002      	movs	r2, r0
     468:	000b      	movs	r3, r1
     46a:	9800      	ldr	r0, [sp, #0]
     46c:	9901      	ldr	r1, [sp, #4]
     46e:	47b0      	blx	r6
     470:	2200      	movs	r2, #0
     472:	4b27      	ldr	r3, [pc, #156]	; (510 <STACK_SIZE+0x110>)
     474:	47a8      	blx	r5
     476:	4b28      	ldr	r3, [pc, #160]	; (518 <STACK_SIZE+0x118>)
     478:	4798      	blx	r3
     47a:	4b29      	ldr	r3, [pc, #164]	; (520 <STACK_SIZE+0x120>)
     47c:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     47e:	d017      	beq.n	4b0 <STACK_SIZE+0xb0>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     480:	0021      	movs	r1, r4
     482:	0038      	movs	r0, r7
     484:	4798      	blx	r3
     486:	3802      	subs	r0, #2
     488:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     48a:	9a02      	ldr	r2, [sp, #8]
     48c:	2040      	movs	r0, #64	; 0x40
     48e:	2aff      	cmp	r2, #255	; 0xff
     490:	d80c      	bhi.n	4ac <STACK_SIZE+0xac>
     492:	2bff      	cmp	r3, #255	; 0xff
     494:	d80a      	bhi.n	4ac <STACK_SIZE+0xac>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     496:	20ff      	movs	r0, #255	; 0xff
     498:	0015      	movs	r5, r2
     49a:	0400      	lsls	r0, r0, #16
     49c:	041b      	lsls	r3, r3, #16
     49e:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     4a0:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     4a2:	0636      	lsls	r6, r6, #24
     4a4:	4335      	orrs	r5, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4a6:	9a04      	ldr	r2, [sp, #16]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     4a8:	432b      	orrs	r3, r5
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4aa:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     4ac:	b00b      	add	sp, #44	; 0x2c
     4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     4b0:	0061      	lsls	r1, r4, #1
     4b2:	1e48      	subs	r0, r1, #1
     4b4:	19c0      	adds	r0, r0, r7
     4b6:	4798      	blx	r3
     4b8:	1e43      	subs	r3, r0, #1
     4ba:	e7e6      	b.n	48a <STACK_SIZE+0x8a>
	int32_t tmp_baudlow_hs = 0;
     4bc:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     4be:	0033      	movs	r3, r6
     4c0:	e7e3      	b.n	48a <STACK_SIZE+0x8a>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	000009bd 	.word	0x000009bd
     4c8:	40000400 	.word	0x40000400
     4cc:	0000106d 	.word	0x0000106d
     4d0:	00000fe5 	.word	0x00000fe5
     4d4:	000008c5 	.word	0x000008c5
     4d8:	00000739 	.word	0x00000739
     4dc:	000009f9 	.word	0x000009f9
     4e0:	2000016c 	.word	0x2000016c
     4e4:	00000909 	.word	0x00000909
     4e8:	00001141 	.word	0x00001141
     4ec:	41002000 	.word	0x41002000
     4f0:	00001089 	.word	0x00001089
     4f4:	00003ac9 	.word	0x00003ac9
     4f8:	00002f35 	.word	0x00002f35
     4fc:	e826d695 	.word	0xe826d695
     500:	3e112e0b 	.word	0x3e112e0b
     504:	000022ad 	.word	0x000022ad
     508:	40240000 	.word	0x40240000
     50c:	00003435 	.word	0x00003435
     510:	3ff00000 	.word	0x3ff00000
     514:	000028cd 	.word	0x000028cd
     518:	00003a61 	.word	0x00003a61
     51c:	40080000 	.word	0x40080000
     520:	00002195 	.word	0x00002195

00000524 <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     524:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     526:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     528:	7e19      	ldrb	r1, [r3, #24]
     52a:	4211      	tst	r1, r2
     52c:	d006      	beq.n	53c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     52e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     530:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     532:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     534:	4213      	tst	r3, r2
     536:	d10a      	bne.n	54e <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     538:	2000      	movs	r0, #0
     53a:	e008      	b.n	54e <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     53c:	8b5a      	ldrh	r2, [r3, #26]
     53e:	0752      	lsls	r2, r2, #29
     540:	d5fa      	bpl.n	538 <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     542:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
     544:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     546:	6859      	ldr	r1, [r3, #4]
     548:	0292      	lsls	r2, r2, #10
     54a:	430a      	orrs	r2, r1
     54c:	605a      	str	r2, [r3, #4]
}
     54e:	4770      	bx	lr

00000550 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     550:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     552:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     554:	2601      	movs	r6, #1
     556:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     558:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     55a:	7e0b      	ldrb	r3, [r1, #24]
     55c:	4033      	ands	r3, r6
     55e:	d102      	bne.n	566 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     560:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     562:	4225      	tst	r5, r4
     564:	d001      	beq.n	56a <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     566:	2000      	movs	r0, #0
     568:	e005      	b.n	576 <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
     56a:	3201      	adds	r2, #1
     56c:	8903      	ldrh	r3, [r0, #8]
     56e:	b292      	uxth	r2, r2
     570:	4293      	cmp	r3, r2
     572:	d8f2      	bhi.n	55a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     574:	2012      	movs	r0, #18
}
     576:	bd70      	pop	{r4, r5, r6, pc}

00000578 <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     578:	2380      	movs	r3, #128	; 0x80
{
     57a:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     57c:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     57e:	02db      	lsls	r3, r3, #11
     580:	6862      	ldr	r2, [r4, #4]
     582:	4313      	orrs	r3, r2
     584:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     586:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     588:	4b02      	ldr	r3, [pc, #8]	; (594 <_i2c_master_send_hs_master_code+0x1c>)
     58a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     58c:	2301      	movs	r3, #1
     58e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     590:	bd10      	pop	{r4, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	00000551 	.word	0x00000551

00000598 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     59a:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     59c:	884b      	ldrh	r3, [r1, #2]
{
     59e:	0005      	movs	r5, r0
	uint16_t tmp_data_length = packet->data_length;
     5a0:	9301      	str	r3, [sp, #4]

	_i2c_master_wait_for_sync(module);
     5a2:	4b2a      	ldr	r3, [pc, #168]	; (64c <_i2c_master_write_packet+0xb4>)
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5a4:	6804      	ldr	r4, [r0, #0]
	_i2c_master_wait_for_sync(module);
     5a6:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     5a8:	7a7b      	ldrb	r3, [r7, #9]
     5aa:	2b00      	cmp	r3, #0
     5ac:	d003      	beq.n	5b6 <_i2c_master_write_packet+0x1e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     5ae:	7ab9      	ldrb	r1, [r7, #10]
     5b0:	0028      	movs	r0, r5
     5b2:	4b27      	ldr	r3, [pc, #156]	; (650 <_i2c_master_write_packet+0xb8>)
     5b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5b6:	6863      	ldr	r3, [r4, #4]
     5b8:	4a26      	ldr	r2, [pc, #152]	; (654 <_i2c_master_write_packet+0xbc>)
     5ba:	4013      	ands	r3, r2
     5bc:	6063      	str	r3, [r4, #4]
     5be:	7a7a      	ldrb	r2, [r7, #9]
     5c0:	883b      	ldrh	r3, [r7, #0]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     5c2:	7a39      	ldrb	r1, [r7, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5c4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5c6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5c8:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
     5ca:	2900      	cmp	r1, #0
     5cc:	d002      	beq.n	5d4 <_i2c_master_write_packet+0x3c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5ce:	2280      	movs	r2, #128	; 0x80
     5d0:	0212      	lsls	r2, r2, #8
     5d2:	4313      	orrs	r3, r2
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5d4:	6263      	str	r3, [r4, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     5d6:	0028      	movs	r0, r5
     5d8:	4b1f      	ldr	r3, [pc, #124]	; (658 <_i2c_master_write_packet+0xc0>)
     5da:	4798      	blx	r3
     5dc:	1e06      	subs	r6, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     5de:	d115      	bne.n	60c <_i2c_master_write_packet+0x74>
		tmp_status = _i2c_master_address_response(module);
     5e0:	0028      	movs	r0, r5
     5e2:	4b1e      	ldr	r3, [pc, #120]	; (65c <_i2c_master_write_packet+0xc4>)
     5e4:	4798      	blx	r3
     5e6:	1e06      	subs	r6, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     5e8:	d110      	bne.n	60c <_i2c_master_write_packet+0x74>
     5ea:	9000      	str	r0, [sp, #0]
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     5ec:	9b00      	ldr	r3, [sp, #0]
     5ee:	9a01      	ldr	r2, [sp, #4]
     5f0:	4293      	cmp	r3, r2
     5f2:	d10d      	bne.n	610 <_i2c_master_write_packet+0x78>
     5f4:	2600      	movs	r6, #0
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     5f6:	7aab      	ldrb	r3, [r5, #10]
     5f8:	2b00      	cmp	r3, #0
     5fa:	d007      	beq.n	60c <_i2c_master_write_packet+0x74>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     5fc:	4b13      	ldr	r3, [pc, #76]	; (64c <_i2c_master_write_packet+0xb4>)
     5fe:	0028      	movs	r0, r5
     600:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     602:	23c0      	movs	r3, #192	; 0xc0
     604:	6862      	ldr	r2, [r4, #4]
     606:	029b      	lsls	r3, r3, #10
     608:	4313      	orrs	r3, r2
     60a:	6063      	str	r3, [r4, #4]
		}
	}

	return tmp_status;
}
     60c:	0030      	movs	r0, r6
     60e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     610:	2220      	movs	r2, #32
     612:	8b63      	ldrh	r3, [r4, #26]
     614:	4213      	tst	r3, r2
     616:	d016      	beq.n	646 <_i2c_master_write_packet+0xae>
			_i2c_master_wait_for_sync(module);
     618:	0028      	movs	r0, r5
     61a:	4b0c      	ldr	r3, [pc, #48]	; (64c <_i2c_master_write_packet+0xb4>)
     61c:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     61e:	687b      	ldr	r3, [r7, #4]
     620:	9a00      	ldr	r2, [sp, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     622:	0028      	movs	r0, r5
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     624:	5c9a      	ldrb	r2, [r3, r2]
     626:	0023      	movs	r3, r4
     628:	3328      	adds	r3, #40	; 0x28
     62a:	701a      	strb	r2, [r3, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     62c:	4b0a      	ldr	r3, [pc, #40]	; (658 <_i2c_master_write_packet+0xc0>)
     62e:	4798      	blx	r3
     630:	1e06      	subs	r6, r0, #0
			if (tmp_status != STATUS_OK) {
     632:	d1e0      	bne.n	5f6 <_i2c_master_write_packet+0x5e>
     634:	9a00      	ldr	r2, [sp, #0]
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     636:	8b63      	ldrh	r3, [r4, #26]
     638:	3201      	adds	r2, #1
     63a:	9200      	str	r2, [sp, #0]
     63c:	2204      	movs	r2, #4
     63e:	4213      	tst	r3, r2
     640:	d0d4      	beq.n	5ec <_i2c_master_write_packet+0x54>
				tmp_status = STATUS_ERR_OVERFLOW;
     642:	261e      	movs	r6, #30
     644:	e7d7      	b.n	5f6 <_i2c_master_write_packet+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
     646:	2641      	movs	r6, #65	; 0x41
     648:	e7e0      	b.n	60c <_i2c_master_write_packet+0x74>
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	00000241 	.word	0x00000241
     650:	00000579 	.word	0x00000579
     654:	fffbffff 	.word	0xfffbffff
     658:	00000551 	.word	0x00000551
     65c:	00000525 	.word	0x00000525

00000660 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     660:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     662:	8b82      	ldrh	r2, [r0, #28]
{
     664:	0003      	movs	r3, r0
		return STATUS_BUSY;
     666:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
     668:	2a00      	cmp	r2, #0
     66a:	d105      	bne.n	678 <i2c_master_write_packet_wait+0x18>
	}
#endif

	module->send_stop = true;
     66c:	3201      	adds	r2, #1
     66e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     670:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     672:	0018      	movs	r0, r3
     674:	4b01      	ldr	r3, [pc, #4]	; (67c <i2c_master_write_packet_wait+0x1c>)
     676:	4798      	blx	r3
}
     678:	bd10      	pop	{r4, pc}
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	00000599 	.word	0x00000599

00000680 <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     680:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     682:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     684:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     686:	421a      	tst	r2, r3
     688:	d1fc      	bne.n	684 <_i2c_master_wait_for_sync+0x4>
}
     68a:	4770      	bx	lr

0000068c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     68e:	6805      	ldr	r5, [r0, #0]
{
     690:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     692:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     694:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     696:	8b83      	ldrh	r3, [r0, #28]
     698:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
     69a:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     69c:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     69e:	3b01      	subs	r3, #1
     6a0:	b29b      	uxth	r3, r3
     6a2:	8383      	strh	r3, [r0, #28]
     6a4:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
     6a6:	0112      	lsls	r2, r2, #4
     6a8:	d50a      	bpl.n	6c0 <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
     6aa:	2b00      	cmp	r3, #0
     6ac:	d00d      	beq.n	6ca <_i2c_master_read+0x3e>
     6ae:	8b83      	ldrh	r3, [r0, #28]
     6b0:	2b01      	cmp	r3, #1
     6b2:	d10a      	bne.n	6ca <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6b4:	2380      	movs	r3, #128	; 0x80
     6b6:	686a      	ldr	r2, [r5, #4]
     6b8:	02db      	lsls	r3, r3, #11
     6ba:	4313      	orrs	r3, r2
     6bc:	606b      	str	r3, [r5, #4]
     6be:	e004      	b.n	6ca <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
     6c0:	2b00      	cmp	r3, #0
     6c2:	d002      	beq.n	6ca <_i2c_master_read+0x3e>
     6c4:	8b83      	ldrh	r3, [r0, #28]
     6c6:	2b00      	cmp	r3, #0
     6c8:	d0f4      	beq.n	6b4 <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
     6ca:	8ba3      	ldrh	r3, [r4, #28]
     6cc:	4f0a      	ldr	r7, [pc, #40]	; (6f8 <_i2c_master_read+0x6c>)
     6ce:	2b00      	cmp	r3, #0
     6d0:	d109      	bne.n	6e6 <_i2c_master_read+0x5a>
		if (module->send_stop) {
     6d2:	7aa3      	ldrb	r3, [r4, #10]
     6d4:	2b00      	cmp	r3, #0
     6d6:	d006      	beq.n	6e6 <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     6d8:	0020      	movs	r0, r4
     6da:	47b8      	blx	r7
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6dc:	23c0      	movs	r3, #192	; 0xc0
     6de:	686a      	ldr	r2, [r5, #4]
     6e0:	029b      	lsls	r3, r3, #10
     6e2:	4313      	orrs	r3, r2
     6e4:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     6e6:	0020      	movs	r0, r4
     6e8:	47b8      	blx	r7
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     6ea:	6a23      	ldr	r3, [r4, #32]
     6ec:	3528      	adds	r5, #40	; 0x28
     6ee:	199e      	adds	r6, r3, r6
     6f0:	782b      	ldrb	r3, [r5, #0]
     6f2:	b2db      	uxtb	r3, r3
     6f4:	7033      	strb	r3, [r6, #0]
}
     6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6f8:	00000681 	.word	0x00000681

000006fc <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     6fc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6fe:	6806      	ldr	r6, [r0, #0]
{
     700:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     702:	8b73      	ldrh	r3, [r6, #26]
     704:	075b      	lsls	r3, r3, #29
     706:	d503      	bpl.n	710 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     708:	231e      	movs	r3, #30
     70a:	3406      	adds	r4, #6
     70c:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     70e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     710:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     712:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
     714:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
     716:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
     718:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     71a:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
     71c:	3b01      	subs	r3, #1
     71e:	b29b      	uxth	r3, r3
     720:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     722:	4b04      	ldr	r3, [pc, #16]	; (734 <_i2c_master_write+0x38>)
     724:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     726:	6a23      	ldr	r3, [r4, #32]
     728:	195d      	adds	r5, r3, r5
     72a:	782b      	ldrb	r3, [r5, #0]
     72c:	b2db      	uxtb	r3, r3
     72e:	7033      	strb	r3, [r6, #0]
     730:	e7ed      	b.n	70e <_i2c_master_write+0x12>
     732:	46c0      	nop			; (mov r8, r8)
     734:	00000681 	.word	0x00000681

00000738 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     73a:	4b5e      	ldr	r3, [pc, #376]	; (8b4 <_i2c_master_interrupt_handler+0x17c>)
     73c:	0080      	lsls	r0, r0, #2
     73e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     740:	6825      	ldr	r5, [r4, #0]
     742:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     744:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     746:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
     748:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     74a:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
     74c:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     74e:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     750:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     752:	2a00      	cmp	r2, #0
     754:	d12e      	bne.n	7b4 <_i2c_master_interrupt_handler+0x7c>
     756:	8ba2      	ldrh	r2, [r4, #28]
     758:	2a00      	cmp	r2, #0
     75a:	d02b      	beq.n	7b4 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     75c:	2301      	movs	r3, #1
     75e:	7e2a      	ldrb	r2, [r5, #24]
     760:	421a      	tst	r2, r3
     762:	d006      	beq.n	772 <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     764:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     766:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     768:	8b6b      	ldrh	r3, [r5, #26]
     76a:	4013      	ands	r3, r2
     76c:	d010      	beq.n	790 <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
     76e:	2341      	movs	r3, #65	; 0x41
     770:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
     772:	8ba3      	ldrh	r3, [r4, #28]
     774:	b29b      	uxth	r3, r3
     776:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     778:	7ff3      	ldrb	r3, [r6, #31]
     77a:	2b05      	cmp	r3, #5
     77c:	d13c      	bne.n	7f8 <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     77e:	1d63      	adds	r3, r4, #5
     780:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
     782:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     784:	2b00      	cmp	r3, #0
     786:	d000      	beq.n	78a <_i2c_master_interrupt_handler+0x52>
     788:	e08a      	b.n	8a0 <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
     78a:	4b4b      	ldr	r3, [pc, #300]	; (8b8 <_i2c_master_interrupt_handler+0x180>)
		} else {
			_i2c_master_read(module);
     78c:	4798      	blx	r3
     78e:	e033      	b.n	7f8 <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     790:	8b6a      	ldrh	r2, [r5, #26]
     792:	0752      	lsls	r2, r2, #29
     794:	d5ed      	bpl.n	772 <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     796:	2218      	movs	r2, #24
     798:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
     79a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     79c:	7aa3      	ldrb	r3, [r4, #10]
     79e:	2b00      	cmp	r3, #0
     7a0:	d0e7      	beq.n	772 <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
     7a2:	4b46      	ldr	r3, [pc, #280]	; (8bc <_i2c_master_interrupt_handler+0x184>)
     7a4:	0020      	movs	r0, r4
     7a6:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7a8:	23c0      	movs	r3, #192	; 0xc0
     7aa:	686a      	ldr	r2, [r5, #4]
     7ac:	029b      	lsls	r3, r3, #10
     7ae:	4313      	orrs	r3, r2
     7b0:	606b      	str	r3, [r5, #4]
     7b2:	e7de      	b.n	772 <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7b4:	8b62      	ldrh	r2, [r4, #26]
     7b6:	2a00      	cmp	r2, #0
     7b8:	d05f      	beq.n	87a <_i2c_master_interrupt_handler+0x142>
     7ba:	8ba2      	ldrh	r2, [r4, #28]
     7bc:	2a00      	cmp	r2, #0
     7be:	d15c      	bne.n	87a <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
     7c0:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7c2:	2a05      	cmp	r2, #5
     7c4:	d159      	bne.n	87a <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     7c6:	1d62      	adds	r2, r4, #5
     7c8:	7fd2      	ldrb	r2, [r2, #31]
     7ca:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
     7cc:	2a00      	cmp	r2, #0
     7ce:	d154      	bne.n	87a <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
     7d0:	2303      	movs	r3, #3
     7d2:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     7d4:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     7d6:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
     7d8:	7aa3      	ldrb	r3, [r4, #10]
     7da:	2b00      	cmp	r3, #0
     7dc:	d04a      	beq.n	874 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
     7de:	4b37      	ldr	r3, [pc, #220]	; (8bc <_i2c_master_interrupt_handler+0x184>)
     7e0:	0020      	movs	r0, r4
     7e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7e4:	23c0      	movs	r3, #192	; 0xc0
     7e6:	686a      	ldr	r2, [r5, #4]
     7e8:	029b      	lsls	r3, r3, #10
     7ea:	4313      	orrs	r3, r2
     7ec:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     7ee:	07fb      	lsls	r3, r7, #31
     7f0:	d502      	bpl.n	7f8 <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     7f2:	68e3      	ldr	r3, [r4, #12]
     7f4:	0020      	movs	r0, r4
     7f6:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7f8:	8b63      	ldrh	r3, [r4, #26]
     7fa:	2b00      	cmp	r3, #0
     7fc:	d01b      	beq.n	836 <_i2c_master_interrupt_handler+0xfe>
     7fe:	8ba3      	ldrh	r3, [r4, #28]
     800:	2b00      	cmp	r3, #0
     802:	d118      	bne.n	836 <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
     804:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     806:	2b05      	cmp	r3, #5
     808:	d115      	bne.n	836 <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     80a:	1d63      	adds	r3, r4, #5
     80c:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
     80e:	2a01      	cmp	r2, #1
     810:	d111      	bne.n	836 <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     812:	7e29      	ldrb	r1, [r5, #24]
     814:	3201      	adds	r2, #1
     816:	4211      	tst	r1, r2
     818:	d000      	beq.n	81c <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     81a:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     81c:	2203      	movs	r2, #3
     81e:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     820:	2200      	movs	r2, #0
     822:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     824:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     826:	07ba      	lsls	r2, r7, #30
     828:	d53c      	bpl.n	8a4 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     82a:	7fda      	ldrb	r2, [r3, #31]
     82c:	2a01      	cmp	r2, #1
     82e:	d139      	bne.n	8a4 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     830:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     832:	0020      	movs	r0, r4
     834:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     836:	7ff3      	ldrb	r3, [r6, #31]
     838:	2b05      	cmp	r3, #5
     83a:	d01a      	beq.n	872 <_i2c_master_interrupt_handler+0x13a>
     83c:	7ff3      	ldrb	r3, [r6, #31]
     83e:	2b00      	cmp	r3, #0
     840:	d017      	beq.n	872 <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     842:	2303      	movs	r3, #3
     844:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     846:	2300      	movs	r3, #0
     848:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     84a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     84c:	7ff3      	ldrb	r3, [r6, #31]
     84e:	2b41      	cmp	r3, #65	; 0x41
     850:	d00a      	beq.n	868 <_i2c_master_interrupt_handler+0x130>
     852:	7aa3      	ldrb	r3, [r4, #10]
     854:	2b00      	cmp	r3, #0
     856:	d007      	beq.n	868 <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     858:	4b18      	ldr	r3, [pc, #96]	; (8bc <_i2c_master_interrupt_handler+0x184>)
     85a:	0020      	movs	r0, r4
     85c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     85e:	23e0      	movs	r3, #224	; 0xe0
     860:	686a      	ldr	r2, [r5, #4]
     862:	02db      	lsls	r3, r3, #11
     864:	4313      	orrs	r3, r2
     866:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     868:	077b      	lsls	r3, r7, #29
     86a:	d502      	bpl.n	872 <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     86c:	6963      	ldr	r3, [r4, #20]
     86e:	0020      	movs	r0, r4
     870:	4798      	blx	r3
		}
	}
}
     872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     874:	2301      	movs	r3, #1
     876:	762b      	strb	r3, [r5, #24]
     878:	e7b9      	b.n	7ee <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     87a:	8b62      	ldrh	r2, [r4, #26]
     87c:	2a00      	cmp	r2, #0
     87e:	d0bb      	beq.n	7f8 <_i2c_master_interrupt_handler+0xc0>
     880:	8ba2      	ldrh	r2, [r4, #28]
     882:	2a00      	cmp	r2, #0
     884:	d0b8      	beq.n	7f8 <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     886:	8b6a      	ldrh	r2, [r5, #26]
     888:	0692      	lsls	r2, r2, #26
     88a:	d500      	bpl.n	88e <_i2c_master_interrupt_handler+0x156>
     88c:	e777      	b.n	77e <_i2c_master_interrupt_handler+0x46>
     88e:	2b00      	cmp	r3, #0
     890:	d003      	beq.n	89a <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     892:	8ba3      	ldrh	r3, [r4, #28]
     894:	2b01      	cmp	r3, #1
     896:	d100      	bne.n	89a <_i2c_master_interrupt_handler+0x162>
     898:	e771      	b.n	77e <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
     89a:	2341      	movs	r3, #65	; 0x41
     89c:	77f3      	strb	r3, [r6, #31]
     89e:	e7ab      	b.n	7f8 <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
     8a0:	4b07      	ldr	r3, [pc, #28]	; (8c0 <_i2c_master_interrupt_handler+0x188>)
     8a2:	e773      	b.n	78c <_i2c_master_interrupt_handler+0x54>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     8a4:	07fa      	lsls	r2, r7, #31
     8a6:	d5c6      	bpl.n	836 <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8a8:	7fdb      	ldrb	r3, [r3, #31]
     8aa:	2b00      	cmp	r3, #0
     8ac:	d1c3      	bne.n	836 <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     8ae:	68e3      	ldr	r3, [r4, #12]
     8b0:	e7bf      	b.n	832 <_i2c_master_interrupt_handler+0xfa>
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	2000016c 	.word	0x2000016c
     8b8:	000006fd 	.word	0x000006fd
     8bc:	00000681 	.word	0x00000681
     8c0:	0000068d 	.word	0x0000068d

000008c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     8c6:	4c0d      	ldr	r4, [pc, #52]	; (8fc <sercom_set_gclk_generator+0x38>)
{
     8c8:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     8ca:	7823      	ldrb	r3, [r4, #0]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d001      	beq.n	8d4 <sercom_set_gclk_generator+0x10>
     8d0:	2900      	cmp	r1, #0
     8d2:	d00c      	beq.n	8ee <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     8d4:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8d6:	200d      	movs	r0, #13
     8d8:	4b09      	ldr	r3, [pc, #36]	; (900 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     8da:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8dc:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     8de:	200d      	movs	r0, #13
     8e0:	4b08      	ldr	r3, [pc, #32]	; (904 <sercom_set_gclk_generator+0x40>)
     8e2:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     8e4:	2301      	movs	r3, #1

		return STATUS_OK;
     8e6:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     8e8:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     8ea:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     8ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     8ee:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     8f0:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     8f2:	42ab      	cmp	r3, r5
     8f4:	d0fa      	beq.n	8ec <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     8f6:	201d      	movs	r0, #29
     8f8:	e7f8      	b.n	8ec <sercom_set_gclk_generator+0x28>
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	2000003d 	.word	0x2000003d
     900:	0000106d 	.word	0x0000106d
     904:	00000fe5 	.word	0x00000fe5

00000908 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     908:	4a1d      	ldr	r2, [pc, #116]	; (980 <_sercom_get_default_pad+0x78>)
{
     90a:	0003      	movs	r3, r0
     90c:	b500      	push	{lr}
     90e:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     910:	4293      	cmp	r3, r2
     912:	d013      	beq.n	93c <_sercom_get_default_pad+0x34>
     914:	4a1b      	ldr	r2, [pc, #108]	; (984 <_sercom_get_default_pad+0x7c>)
     916:	4293      	cmp	r3, r2
     918:	d01d      	beq.n	956 <_sercom_get_default_pad+0x4e>
     91a:	4a1b      	ldr	r2, [pc, #108]	; (988 <_sercom_get_default_pad+0x80>)
     91c:	4293      	cmp	r3, r2
     91e:	d127      	bne.n	970 <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     920:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     922:	2903      	cmp	r1, #3
     924:	d804      	bhi.n	930 <_sercom_get_default_pad+0x28>
     926:	f001 fc2b 	bl	2180 <__gnu_thumb1_case_uqi>
     92a:	0225      	.short	0x0225
     92c:	0705      	.short	0x0705
     92e:	4b17      	ldr	r3, [pc, #92]	; (98c <_sercom_get_default_pad+0x84>)
}
     930:	0018      	movs	r0, r3
     932:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     934:	4b16      	ldr	r3, [pc, #88]	; (990 <_sercom_get_default_pad+0x88>)
     936:	e7fb      	b.n	930 <_sercom_get_default_pad+0x28>
     938:	4b16      	ldr	r3, [pc, #88]	; (994 <_sercom_get_default_pad+0x8c>)
     93a:	e7f9      	b.n	930 <_sercom_get_default_pad+0x28>
	return 0;
     93c:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     93e:	2903      	cmp	r1, #3
     940:	d8f6      	bhi.n	930 <_sercom_get_default_pad+0x28>
     942:	f001 fc1d 	bl	2180 <__gnu_thumb1_case_uqi>
     946:	0219      	.short	0x0219
     948:	0604      	.short	0x0604
     94a:	4b13      	ldr	r3, [pc, #76]	; (998 <_sercom_get_default_pad+0x90>)
     94c:	e7f0      	b.n	930 <_sercom_get_default_pad+0x28>
     94e:	4b13      	ldr	r3, [pc, #76]	; (99c <_sercom_get_default_pad+0x94>)
     950:	e7ee      	b.n	930 <_sercom_get_default_pad+0x28>
     952:	4b13      	ldr	r3, [pc, #76]	; (9a0 <_sercom_get_default_pad+0x98>)
     954:	e7ec      	b.n	930 <_sercom_get_default_pad+0x28>
	return 0;
     956:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     958:	2903      	cmp	r1, #3
     95a:	d8e9      	bhi.n	930 <_sercom_get_default_pad+0x28>
     95c:	f001 fc10 	bl	2180 <__gnu_thumb1_case_uqi>
     960:	0604020e 	.word	0x0604020e
     964:	4b0f      	ldr	r3, [pc, #60]	; (9a4 <_sercom_get_default_pad+0x9c>)
     966:	e7e3      	b.n	930 <_sercom_get_default_pad+0x28>
     968:	4b0f      	ldr	r3, [pc, #60]	; (9a8 <_sercom_get_default_pad+0xa0>)
     96a:	e7e1      	b.n	930 <_sercom_get_default_pad+0x28>
     96c:	4b0f      	ldr	r3, [pc, #60]	; (9ac <_sercom_get_default_pad+0xa4>)
     96e:	e7df      	b.n	930 <_sercom_get_default_pad+0x28>
	return 0;
     970:	2300      	movs	r3, #0
     972:	e7dd      	b.n	930 <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     974:	4b0e      	ldr	r3, [pc, #56]	; (9b0 <_sercom_get_default_pad+0xa8>)
     976:	e7db      	b.n	930 <_sercom_get_default_pad+0x28>
     978:	4b0e      	ldr	r3, [pc, #56]	; (9b4 <_sercom_get_default_pad+0xac>)
     97a:	e7d9      	b.n	930 <_sercom_get_default_pad+0x28>
     97c:	4b0e      	ldr	r3, [pc, #56]	; (9b8 <_sercom_get_default_pad+0xb0>)
     97e:	e7d7      	b.n	930 <_sercom_get_default_pad+0x28>
     980:	42000c00 	.word	0x42000c00
     984:	42001000 	.word	0x42001000
     988:	42000800 	.word	0x42000800
     98c:	00050003 	.word	0x00050003
     990:	00060003 	.word	0x00060003
     994:	00070003 	.word	0x00070003
     998:	00170002 	.word	0x00170002
     99c:	001e0003 	.word	0x001e0003
     9a0:	001f0003 	.word	0x001f0003
     9a4:	00170003 	.word	0x00170003
     9a8:	00100003 	.word	0x00100003
     9ac:	00190003 	.word	0x00190003
     9b0:	00040003 	.word	0x00040003
     9b4:	00160002 	.word	0x00160002
     9b8:	00160003 	.word	0x00160003

000009bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9be:	4b0c      	ldr	r3, [pc, #48]	; (9f0 <_sercom_get_sercom_inst_index+0x34>)
{
     9c0:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9c2:	0018      	movs	r0, r3
     9c4:	aa01      	add	r2, sp, #4
     9c6:	c870      	ldmia	r0!, {r4, r5, r6}
     9c8:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9ca:	9a01      	ldr	r2, [sp, #4]
     9cc:	428a      	cmp	r2, r1
     9ce:	d00a      	beq.n	9e6 <_sercom_get_sercom_inst_index+0x2a>
     9d0:	685a      	ldr	r2, [r3, #4]
     9d2:	428a      	cmp	r2, r1
     9d4:	d009      	beq.n	9ea <_sercom_get_sercom_inst_index+0x2e>
     9d6:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     9d8:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9da:	428b      	cmp	r3, r1
     9dc:	d101      	bne.n	9e2 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9de:	3002      	adds	r0, #2
			return i;
     9e0:	b2c0      	uxtb	r0, r0
}
     9e2:	b004      	add	sp, #16
     9e4:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9e6:	2000      	movs	r0, #0
     9e8:	e7fa      	b.n	9e0 <_sercom_get_sercom_inst_index+0x24>
     9ea:	2001      	movs	r0, #1
     9ec:	e7f8      	b.n	9e0 <_sercom_get_sercom_inst_index+0x24>
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	00003bcc 	.word	0x00003bcc

000009f4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     9f4:	4770      	bx	lr
	...

000009f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     9f8:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     9fa:	4e09      	ldr	r6, [pc, #36]	; (a20 <_sercom_set_handler+0x28>)
     9fc:	4b09      	ldr	r3, [pc, #36]	; (a24 <_sercom_set_handler+0x2c>)
     9fe:	7832      	ldrb	r2, [r6, #0]
     a00:	2a00      	cmp	r2, #0
     a02:	d109      	bne.n	a18 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     a04:	4c08      	ldr	r4, [pc, #32]	; (a28 <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a06:	4d09      	ldr	r5, [pc, #36]	; (a2c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a08:	6022      	str	r2, [r4, #0]
     a0a:	6062      	str	r2, [r4, #4]
     a0c:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
     a0e:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a10:	601d      	str	r5, [r3, #0]
     a12:	605d      	str	r5, [r3, #4]
     a14:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
     a16:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a18:	0080      	lsls	r0, r0, #2
     a1a:	5019      	str	r1, [r3, r0]
}
     a1c:	bd70      	pop	{r4, r5, r6, pc}
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	2000003f 	.word	0x2000003f
     a24:	20000040 	.word	0x20000040
     a28:	2000016c 	.word	0x2000016c
     a2c:	000009f5 	.word	0x000009f5

00000a30 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a30:	2309      	movs	r3, #9
{
     a32:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a34:	ac01      	add	r4, sp, #4
     a36:	7023      	strb	r3, [r4, #0]
     a38:	3301      	adds	r3, #1
     a3a:	7063      	strb	r3, [r4, #1]
     a3c:	3301      	adds	r3, #1
     a3e:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     a40:	4b01      	ldr	r3, [pc, #4]	; (a48 <_sercom_get_interrupt_vector+0x18>)
     a42:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     a44:	5620      	ldrsb	r0, [r4, r0]
}
     a46:	bd16      	pop	{r1, r2, r4, pc}
     a48:	000009bd 	.word	0x000009bd

00000a4c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a4c:	b510      	push	{r4, lr}
     a4e:	4b02      	ldr	r3, [pc, #8]	; (a58 <SERCOM0_Handler+0xc>)
     a50:	2000      	movs	r0, #0
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	4798      	blx	r3
     a56:	bd10      	pop	{r4, pc}
     a58:	20000040 	.word	0x20000040

00000a5c <SERCOM1_Handler>:
     a5c:	b510      	push	{r4, lr}
     a5e:	4b02      	ldr	r3, [pc, #8]	; (a68 <SERCOM1_Handler+0xc>)
     a60:	2001      	movs	r0, #1
     a62:	685b      	ldr	r3, [r3, #4]
     a64:	4798      	blx	r3
     a66:	bd10      	pop	{r4, pc}
     a68:	20000040 	.word	0x20000040

00000a6c <SERCOM2_Handler>:
     a6c:	b510      	push	{r4, lr}
     a6e:	4b02      	ldr	r3, [pc, #8]	; (a78 <SERCOM2_Handler+0xc>)
     a70:	2002      	movs	r0, #2
     a72:	689b      	ldr	r3, [r3, #8]
     a74:	4798      	blx	r3
     a76:	bd10      	pop	{r4, pc}
     a78:	20000040 	.word	0x20000040

00000a7c <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     a7c:	2310      	movs	r3, #16
     a7e:	4902      	ldr	r1, [pc, #8]	; (a88 <_system_dfll_wait_for_sync+0xc>)
     a80:	68ca      	ldr	r2, [r1, #12]
     a82:	421a      	tst	r2, r3
     a84:	d0fc      	beq.n	a80 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     a86:	4770      	bx	lr
     a88:	40000800 	.word	0x40000800

00000a8c <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a8c:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
     a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
     a90:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a92:	4d09      	ldr	r5, [pc, #36]	; (ab8 <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     a94:	4c09      	ldr	r4, [pc, #36]	; (abc <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a96:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
     a98:	4f09      	ldr	r7, [pc, #36]	; (ac0 <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a9a:	4313      	orrs	r3, r2
     a9c:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     a9e:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     aa0:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     aa2:	68ab      	ldr	r3, [r5, #8]
     aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     aa6:	686b      	ldr	r3, [r5, #4]
     aa8:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     aaa:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     aac:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     aae:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     ab0:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     ab2:	b29b      	uxth	r3, r3
     ab4:	84a3      	strh	r3, [r4, #36]	; 0x24
}
     ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ab8:	2000004c 	.word	0x2000004c
     abc:	40000800 	.word	0x40000800
     ac0:	00000a7d 	.word	0x00000a7d

00000ac4 <system_clock_source_get_hz>:
{
     ac4:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     ac6:	2808      	cmp	r0, #8
     ac8:	d806      	bhi.n	ad8 <system_clock_source_get_hz+0x14>
     aca:	f001 fb59 	bl	2180 <__gnu_thumb1_case_uqi>
     ace:	0508      	.short	0x0508
     ad0:	12303005 	.word	0x12303005
     ad4:	150b      	.short	0x150b
     ad6:	28          	.byte	0x28
     ad7:	00          	.byte	0x00
		return 0;
     ad8:	2400      	movs	r4, #0
}
     ada:	0020      	movs	r0, r4
     adc:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     ade:	4b16      	ldr	r3, [pc, #88]	; (b38 <system_clock_source_get_hz+0x74>)
     ae0:	691c      	ldr	r4, [r3, #16]
     ae2:	e7fa      	b.n	ada <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     ae4:	4b15      	ldr	r3, [pc, #84]	; (b3c <system_clock_source_get_hz+0x78>)
     ae6:	4c16      	ldr	r4, [pc, #88]	; (b40 <system_clock_source_get_hz+0x7c>)
     ae8:	6a1b      	ldr	r3, [r3, #32]
     aea:	059b      	lsls	r3, r3, #22
     aec:	0f9b      	lsrs	r3, r3, #30
     aee:	40dc      	lsrs	r4, r3
     af0:	e7f3      	b.n	ada <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     af2:	4b11      	ldr	r3, [pc, #68]	; (b38 <system_clock_source_get_hz+0x74>)
     af4:	695c      	ldr	r4, [r3, #20]
     af6:	e7f0      	b.n	ada <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     af8:	4d0f      	ldr	r5, [pc, #60]	; (b38 <system_clock_source_get_hz+0x74>)
			return 0;
     afa:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     afc:	682b      	ldr	r3, [r5, #0]
     afe:	079b      	lsls	r3, r3, #30
     b00:	d5eb      	bpl.n	ada <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     b02:	4b10      	ldr	r3, [pc, #64]	; (b44 <system_clock_source_get_hz+0x80>)
     b04:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
     b06:	2224      	movs	r2, #36	; 0x24
     b08:	682b      	ldr	r3, [r5, #0]
     b0a:	4013      	ands	r3, r2
     b0c:	2b04      	cmp	r3, #4
     b0e:	d111      	bne.n	b34 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b10:	0020      	movs	r0, r4
     b12:	4b0d      	ldr	r3, [pc, #52]	; (b48 <system_clock_source_get_hz+0x84>)
     b14:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     b16:	68ac      	ldr	r4, [r5, #8]
     b18:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b1a:	4344      	muls	r4, r0
     b1c:	e7dd      	b.n	ada <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b1e:	4b0b      	ldr	r3, [pc, #44]	; (b4c <system_clock_source_get_hz+0x88>)
			return 0;
     b20:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	075b      	lsls	r3, r3, #29
     b26:	d5d8      	bpl.n	ada <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     b28:	4b03      	ldr	r3, [pc, #12]	; (b38 <system_clock_source_get_hz+0x74>)
     b2a:	68dc      	ldr	r4, [r3, #12]
     b2c:	e7d5      	b.n	ada <system_clock_source_get_hz+0x16>
		return 32768UL;
     b2e:	2480      	movs	r4, #128	; 0x80
     b30:	0224      	lsls	r4, r4, #8
     b32:	e7d2      	b.n	ada <system_clock_source_get_hz+0x16>
			return 48000000UL;
     b34:	4c06      	ldr	r4, [pc, #24]	; (b50 <system_clock_source_get_hz+0x8c>)
     b36:	e7d0      	b.n	ada <system_clock_source_get_hz+0x16>
     b38:	2000004c 	.word	0x2000004c
     b3c:	40000800 	.word	0x40000800
     b40:	007a1200 	.word	0x007a1200
     b44:	00000a7d 	.word	0x00000a7d
     b48:	00001089 	.word	0x00001089
     b4c:	40000850 	.word	0x40000850
     b50:	02dc6c00 	.word	0x02dc6c00

00000b54 <system_clock_source_osc8m_set_config>:
{
     b54:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
     b56:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
     b58:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
     b5a:	7845      	ldrb	r5, [r0, #1]
     b5c:	2001      	movs	r0, #1
     b5e:	2640      	movs	r6, #64	; 0x40
     b60:	4005      	ands	r5, r0
     b62:	4020      	ands	r0, r4
     b64:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     b66:	4908      	ldr	r1, [pc, #32]	; (b88 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     b68:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     b6a:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     b6c:	01c0      	lsls	r0, r0, #7
     b6e:	43b3      	bics	r3, r6
     b70:	432b      	orrs	r3, r5
     b72:	43a3      	bics	r3, r4
     b74:	4303      	orrs	r3, r0
     b76:	2003      	movs	r0, #3
     b78:	4002      	ands	r2, r0
     b7a:	4804      	ldr	r0, [pc, #16]	; (b8c <system_clock_source_osc8m_set_config+0x38>)
     b7c:	0212      	lsls	r2, r2, #8
     b7e:	4003      	ands	r3, r0
     b80:	4313      	orrs	r3, r2
     b82:	620b      	str	r3, [r1, #32]
}
     b84:	bd70      	pop	{r4, r5, r6, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	40000800 	.word	0x40000800
     b8c:	fffffcff 	.word	0xfffffcff

00000b90 <system_clock_source_osc32k_set_config>:
{
     b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     b92:	4f18      	ldr	r7, [pc, #96]	; (bf4 <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
     b94:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     b96:	69bb      	ldr	r3, [r7, #24]
     b98:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
     b9a:	7803      	ldrb	r3, [r0, #0]
     b9c:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
     b9e:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
     ba0:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
     ba2:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     ba4:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     ba6:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
     ba8:	2201      	movs	r2, #1
     baa:	4399      	bics	r1, r3
     bac:	2308      	movs	r3, #8
     bae:	7880      	ldrb	r0, [r0, #2]
     bb0:	4016      	ands	r6, r2
     bb2:	4010      	ands	r0, r2
     bb4:	0080      	lsls	r0, r0, #2
     bb6:	4308      	orrs	r0, r1
     bb8:	4398      	bics	r0, r3
     bba:	00f6      	lsls	r6, r6, #3
     bbc:	4306      	orrs	r6, r0
     bbe:	4015      	ands	r5, r2
     bc0:	01a8      	lsls	r0, r5, #6
     bc2:	0035      	movs	r5, r6
     bc4:	3338      	adds	r3, #56	; 0x38
     bc6:	439d      	bics	r5, r3
     bc8:	4305      	orrs	r5, r0
     bca:	4014      	ands	r4, r2
     bcc:	01e3      	lsls	r3, r4, #7
     bce:	2080      	movs	r0, #128	; 0x80
     bd0:	002c      	movs	r4, r5
     bd2:	4384      	bics	r4, r0
     bd4:	431c      	orrs	r4, r3
     bd6:	2307      	movs	r3, #7
     bd8:	9901      	ldr	r1, [sp, #4]
     bda:	400b      	ands	r3, r1
     bdc:	4906      	ldr	r1, [pc, #24]	; (bf8 <system_clock_source_osc32k_set_config+0x68>)
     bde:	021b      	lsls	r3, r3, #8
     be0:	4021      	ands	r1, r4
     be2:	4319      	orrs	r1, r3
     be4:	9b00      	ldr	r3, [sp, #0]
     be6:	401a      	ands	r2, r3
     be8:	0313      	lsls	r3, r2, #12
     bea:	4a04      	ldr	r2, [pc, #16]	; (bfc <system_clock_source_osc32k_set_config+0x6c>)
     bec:	400a      	ands	r2, r1
     bee:	431a      	orrs	r2, r3
     bf0:	61ba      	str	r2, [r7, #24]
}
     bf2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     bf4:	40000800 	.word	0x40000800
     bf8:	fffff8ff 	.word	0xfffff8ff
     bfc:	ffffefff 	.word	0xffffefff

00000c00 <system_clock_source_dfll_set_config>:
{
     c00:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     c02:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     c04:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     c06:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     c08:	059b      	lsls	r3, r3, #22
     c0a:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     c0c:	0c12      	lsrs	r2, r2, #16
     c0e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
     c10:	4b17      	ldr	r3, [pc, #92]	; (c70 <system_clock_source_dfll_set_config+0x70>)
     c12:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
     c14:	79c1      	ldrb	r1, [r0, #7]
     c16:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
     c18:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
     c1a:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
     c1c:	8841      	ldrh	r1, [r0, #2]
     c1e:	4321      	orrs	r1, r4
     c20:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     c22:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     c24:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     c26:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
     c28:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
     c2a:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     c2c:	2c04      	cmp	r4, #4
     c2e:	d10d      	bne.n	c4c <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     c30:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     c32:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     c34:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     c36:	430a      	orrs	r2, r1
     c38:	89c1      	ldrh	r1, [r0, #14]
     c3a:	480e      	ldr	r0, [pc, #56]	; (c74 <system_clock_source_dfll_set_config+0x74>)
     c3c:	0409      	lsls	r1, r1, #16
     c3e:	4001      	ands	r1, r0
     c40:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     c42:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     c44:	681a      	ldr	r2, [r3, #0]
     c46:	4314      	orrs	r4, r2
     c48:	601c      	str	r4, [r3, #0]
}
     c4a:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     c4c:	2c20      	cmp	r4, #32
     c4e:	d1fc      	bne.n	c4a <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     c50:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     c52:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     c54:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     c56:	430a      	orrs	r2, r1
     c58:	89c1      	ldrh	r1, [r0, #14]
     c5a:	4806      	ldr	r0, [pc, #24]	; (c74 <system_clock_source_dfll_set_config+0x74>)
     c5c:	0409      	lsls	r1, r1, #16
     c5e:	4001      	ands	r1, r0
     c60:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     c62:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
     c64:	6819      	ldr	r1, [r3, #0]
     c66:	4a04      	ldr	r2, [pc, #16]	; (c78 <system_clock_source_dfll_set_config+0x78>)
     c68:	430a      	orrs	r2, r1
     c6a:	601a      	str	r2, [r3, #0]
}
     c6c:	e7ed      	b.n	c4a <system_clock_source_dfll_set_config+0x4a>
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	2000004c 	.word	0x2000004c
     c74:	03ff0000 	.word	0x03ff0000
     c78:	00000424 	.word	0x00000424

00000c7c <system_clock_source_enable>:
{
     c7c:	b510      	push	{r4, lr}
	switch (clock_source) {
     c7e:	2808      	cmp	r0, #8
     c80:	d806      	bhi.n	c90 <system_clock_source_enable+0x14>
     c82:	f001 fa7d 	bl	2180 <__gnu_thumb1_case_uqi>
     c86:	0514      	.short	0x0514
     c88:	1a0e0c05 	.word	0x1a0e0c05
     c8c:	2007      	.short	0x2007
     c8e:	23          	.byte	0x23
     c8f:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
     c90:	2017      	movs	r0, #23
}
     c92:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c94:	2302      	movs	r3, #2
     c96:	4a10      	ldr	r2, [pc, #64]	; (cd8 <system_clock_source_enable+0x5c>)
     c98:	6a11      	ldr	r1, [r2, #32]
     c9a:	430b      	orrs	r3, r1
     c9c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c9e:	2000      	movs	r0, #0
     ca0:	e7f7      	b.n	c92 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     ca2:	2302      	movs	r3, #2
     ca4:	4a0c      	ldr	r2, [pc, #48]	; (cd8 <system_clock_source_enable+0x5c>)
     ca6:	6991      	ldr	r1, [r2, #24]
     ca8:	430b      	orrs	r3, r1
     caa:	6193      	str	r3, [r2, #24]
     cac:	e7f7      	b.n	c9e <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     cae:	2302      	movs	r3, #2
     cb0:	4a09      	ldr	r2, [pc, #36]	; (cd8 <system_clock_source_enable+0x5c>)
     cb2:	8a11      	ldrh	r1, [r2, #16]
     cb4:	430b      	orrs	r3, r1
     cb6:	8213      	strh	r3, [r2, #16]
     cb8:	e7f1      	b.n	c9e <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     cba:	2302      	movs	r3, #2
     cbc:	4a06      	ldr	r2, [pc, #24]	; (cd8 <system_clock_source_enable+0x5c>)
     cbe:	8a91      	ldrh	r1, [r2, #20]
     cc0:	430b      	orrs	r3, r1
     cc2:	8293      	strh	r3, [r2, #20]
     cc4:	e7eb      	b.n	c9e <system_clock_source_enable+0x22>
     cc6:	4b05      	ldr	r3, [pc, #20]	; (cdc <system_clock_source_enable+0x60>)
     cc8:	4798      	blx	r3
     cca:	e7e2      	b.n	c92 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     ccc:	2302      	movs	r3, #2
     cce:	4a04      	ldr	r2, [pc, #16]	; (ce0 <system_clock_source_enable+0x64>)
     cd0:	7811      	ldrb	r1, [r2, #0]
     cd2:	430b      	orrs	r3, r1
     cd4:	7013      	strb	r3, [r2, #0]
     cd6:	e7e2      	b.n	c9e <system_clock_source_enable+0x22>
     cd8:	40000800 	.word	0x40000800
     cdc:	00000a8d 	.word	0x00000a8d
     ce0:	40000844 	.word	0x40000844

00000ce4 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ce4:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ce6:	221e      	movs	r2, #30
{
     ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cea:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cec:	4e48      	ldr	r6, [pc, #288]	; (e10 <system_clock_init+0x12c>)
     cee:	00db      	lsls	r3, r3, #3
     cf0:	4948      	ldr	r1, [pc, #288]	; (e14 <system_clock_init+0x130>)
     cf2:	60b3      	str	r3, [r6, #8]
     cf4:	684b      	ldr	r3, [r1, #4]
{
     cf6:	b08d      	sub	sp, #52	; 0x34
     cf8:	4393      	bics	r3, r2
     cfa:	3a1c      	subs	r2, #28
     cfc:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     cfe:	ac07      	add	r4, sp, #28
     d00:	604b      	str	r3, [r1, #4]
     d02:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     d04:	b2e8      	uxtb	r0, r5
     d06:	0021      	movs	r1, r4
     d08:	4b43      	ldr	r3, [pc, #268]	; (e18 <system_clock_init+0x134>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d0a:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     d0c:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d0e:	2d18      	cmp	r5, #24
     d10:	d1f8      	bne.n	d04 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     d12:	4f42      	ldr	r7, [pc, #264]	; (e1c <system_clock_init+0x138>)
	SYSCTRL->OSC32K.bit.CALIB =
     d14:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     d16:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
     d18:	4941      	ldr	r1, [pc, #260]	; (e20 <system_clock_init+0x13c>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     d1a:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     d1c:	0e5b      	lsrs	r3, r3, #25
     d1e:	400a      	ands	r2, r1
     d20:	041b      	lsls	r3, r3, #16
     d22:	4313      	orrs	r3, r2
     d24:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
     d26:	2301      	movs	r3, #1
	config->run_in_standby      = false;
     d28:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
     d2a:	a802      	add	r0, sp, #8
     d2c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     d2e:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
     d30:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     d32:	3306      	adds	r3, #6
     d34:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     d36:	4b3b      	ldr	r3, [pc, #236]	; (e24 <system_clock_init+0x140>)
	config->run_in_standby      = false;
     d38:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
     d3a:	7145      	strb	r5, [r0, #5]
     d3c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     d3e:	4b3a      	ldr	r3, [pc, #232]	; (e28 <system_clock_init+0x144>)
     d40:	2004      	movs	r0, #4
     d42:	4798      	blx	r3
	config->fine_value      = 0xff / 4; /* Midpoint */
     d44:	233f      	movs	r3, #63	; 0x3f
     d46:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     d48:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     d4a:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     d4c:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     d4e:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     d50:	71e5      	strb	r5, [r4, #7]
     d52:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
     d54:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d56:	683b      	ldr	r3, [r7, #0]
     d58:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     d5a:	2b3f      	cmp	r3, #63	; 0x3f
     d5c:	d100      	bne.n	d60 <system_clock_init+0x7c>
		coarse = 0x1f;
     d5e:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
     d60:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     d62:	23b7      	movs	r3, #183	; 0xb7
     d64:	00db      	lsls	r3, r3, #3
     d66:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     d68:	2307      	movs	r3, #7
     d6a:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     d6c:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
     d6e:	2500      	movs	r5, #0
	config->on_demand       = true;
     d70:	2701      	movs	r7, #1
     d72:	81e3      	strh	r3, [r4, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     d74:	0020      	movs	r0, r4
     d76:	4b2d      	ldr	r3, [pc, #180]	; (e2c <system_clock_init+0x148>)
     d78:	4798      	blx	r3
	config->run_in_standby  = false;
     d7a:	a801      	add	r0, sp, #4

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d7c:	4b2c      	ldr	r3, [pc, #176]	; (e30 <system_clock_init+0x14c>)
     d7e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     d80:	7087      	strb	r7, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     d82:	7005      	strb	r5, [r0, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
     d84:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d86:	4b28      	ldr	r3, [pc, #160]	; (e28 <system_clock_init+0x144>)
     d88:	2006      	movs	r0, #6
     d8a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d8c:	4b29      	ldr	r3, [pc, #164]	; (e34 <system_clock_init+0x150>)
     d8e:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     d90:	2304      	movs	r3, #4
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d92:	ac04      	add	r4, sp, #16
     d94:	0021      	movs	r1, r4
     d96:	7023      	strb	r3, [r4, #0]
     d98:	0038      	movs	r0, r7
     d9a:	4b27      	ldr	r3, [pc, #156]	; (e38 <system_clock_init+0x154>)
     d9c:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     d9e:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     da0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     da2:	7265      	strb	r5, [r4, #9]
     da4:	4798      	blx	r3
     da6:	0038      	movs	r0, r7
     da8:	4b24      	ldr	r3, [pc, #144]	; (e3c <system_clock_init+0x158>)
     daa:	4798      	blx	r3
     dac:	2307      	movs	r3, #7
     dae:	0021      	movs	r1, r4
     db0:	7023      	strb	r3, [r4, #0]
     db2:	2003      	movs	r0, #3
     db4:	4b20      	ldr	r3, [pc, #128]	; (e38 <system_clock_init+0x154>)
	config->division_factor    = 1;
     db6:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     db8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     dba:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     dbc:	7265      	strb	r5, [r4, #9]
     dbe:	4798      	blx	r3
     dc0:	2003      	movs	r0, #3
     dc2:	4b1e      	ldr	r3, [pc, #120]	; (e3c <system_clock_init+0x158>)
     dc4:	4798      	blx	r3
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     dc6:	0021      	movs	r1, r4
     dc8:	0028      	movs	r0, r5
     dca:	4b13      	ldr	r3, [pc, #76]	; (e18 <system_clock_init+0x134>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     dcc:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     dce:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     dd0:	0028      	movs	r0, r5
     dd2:	4b1b      	ldr	r3, [pc, #108]	; (e40 <system_clock_init+0x15c>)
     dd4:	4798      	blx	r3
     dd6:	4b1b      	ldr	r3, [pc, #108]	; (e44 <system_clock_init+0x160>)
     dd8:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     dda:	22d0      	movs	r2, #208	; 0xd0
     ddc:	68f3      	ldr	r3, [r6, #12]
     dde:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     de0:	2bd0      	cmp	r3, #208	; 0xd0
     de2:	d1fb      	bne.n	ddc <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
     de4:	2500      	movs	r5, #0
     de6:	4b18      	ldr	r3, [pc, #96]	; (e48 <system_clock_init+0x164>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     de8:	0021      	movs	r1, r4
     dea:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     dec:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     dee:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     df0:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
     df2:	2301      	movs	r3, #1
     df4:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     df6:	3305      	adds	r3, #5
     df8:	7023      	strb	r3, [r4, #0]
     dfa:	0028      	movs	r0, r5
     dfc:	4b0e      	ldr	r3, [pc, #56]	; (e38 <system_clock_init+0x154>)
	config->high_when_disabled = false;
     dfe:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     e00:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     e02:	7265      	strb	r5, [r4, #9]
     e04:	4798      	blx	r3
     e06:	0028      	movs	r0, r5
     e08:	4b0c      	ldr	r3, [pc, #48]	; (e3c <system_clock_init+0x158>)
     e0a:	4798      	blx	r3
#endif
}
     e0c:	b00d      	add	sp, #52	; 0x34
     e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e10:	40000800 	.word	0x40000800
     e14:	41004000 	.word	0x41004000
     e18:	0000106d 	.word	0x0000106d
     e1c:	00806024 	.word	0x00806024
     e20:	ff80ffff 	.word	0xff80ffff
     e24:	00000b91 	.word	0x00000b91
     e28:	00000c7d 	.word	0x00000c7d
     e2c:	00000c01 	.word	0x00000c01
     e30:	00000b55 	.word	0x00000b55
     e34:	00000e59 	.word	0x00000e59
     e38:	00000e79 	.word	0x00000e79
     e3c:	00000f1d 	.word	0x00000f1d
     e40:	00000fe5 	.word	0x00000fe5
     e44:	00000a8d 	.word	0x00000a8d
     e48:	40000400 	.word	0x40000400

00000e4c <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e4c:	4b01      	ldr	r3, [pc, #4]	; (e54 <system_gclk_is_syncing+0x8>)
     e4e:	7858      	ldrb	r0, [r3, #1]
     e50:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
     e52:	4770      	bx	lr
     e54:	40000c00 	.word	0x40000c00

00000e58 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     e58:	2308      	movs	r3, #8
     e5a:	4a05      	ldr	r2, [pc, #20]	; (e70 <system_gclk_init+0x18>)
     e5c:	6991      	ldr	r1, [r2, #24]
     e5e:	430b      	orrs	r3, r1
     e60:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     e62:	2301      	movs	r3, #1
     e64:	4a03      	ldr	r2, [pc, #12]	; (e74 <system_gclk_init+0x1c>)
     e66:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     e68:	7811      	ldrb	r1, [r2, #0]
     e6a:	4219      	tst	r1, r3
     e6c:	d1fc      	bne.n	e68 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     e6e:	4770      	bx	lr
     e70:	40000400 	.word	0x40000400
     e74:	40000c00 	.word	0x40000c00

00000e78 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e7a:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     e7c:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e7e:	0224      	lsls	r4, r4, #8
{
     e80:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     e82:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e84:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
     e86:	2b00      	cmp	r3, #0
     e88:	d002      	beq.n	e90 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     e8a:	2380      	movs	r3, #128	; 0x80
     e8c:	02db      	lsls	r3, r3, #11
     e8e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     e90:	7a4b      	ldrb	r3, [r1, #9]
     e92:	2b00      	cmp	r3, #0
     e94:	d002      	beq.n	e9c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     e96:	2380      	movs	r3, #128	; 0x80
     e98:	031b      	lsls	r3, r3, #12
     e9a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     e9c:	684b      	ldr	r3, [r1, #4]
     e9e:	2b01      	cmp	r3, #1
     ea0:	d912      	bls.n	ec8 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     ea2:	1e5d      	subs	r5, r3, #1
     ea4:	401d      	ands	r5, r3
     ea6:	2202      	movs	r2, #2
     ea8:	2d00      	cmp	r5, #0
     eaa:	d006      	beq.n	eba <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     eac:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     eae:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
     eb0:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     eb2:	029b      	lsls	r3, r3, #10
     eb4:	e007      	b.n	ec6 <system_gclk_gen_set_config+0x4e>
				div2_count++;
     eb6:	3501      	adds	r5, #1
						mask <<= 1) {
     eb8:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     eba:	429a      	cmp	r2, r3
     ebc:	d3fb      	bcc.n	eb6 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     ebe:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     ec0:	022d      	lsls	r5, r5, #8
     ec2:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     ec4:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     ec6:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     ec8:	7a0b      	ldrb	r3, [r1, #8]
     eca:	2b00      	cmp	r3, #0
     ecc:	d002      	beq.n	ed4 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     ece:	2380      	movs	r3, #128	; 0x80
     ed0:	039b      	lsls	r3, r3, #14
     ed2:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
     ed4:	4f0c      	ldr	r7, [pc, #48]	; (f08 <system_gclk_gen_set_config+0x90>)
     ed6:	47b8      	blx	r7
     ed8:	2800      	cmp	r0, #0
     eda:	d1fb      	bne.n	ed4 <system_gclk_gen_set_config+0x5c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     edc:	4b0b      	ldr	r3, [pc, #44]	; (f0c <system_gclk_gen_set_config+0x94>)
     ede:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ee0:	4b0b      	ldr	r3, [pc, #44]	; (f10 <system_gclk_gen_set_config+0x98>)
     ee2:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     ee4:	47b8      	blx	r7
     ee6:	2800      	cmp	r0, #0
     ee8:	d1fc      	bne.n	ee4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     eea:	4b0a      	ldr	r3, [pc, #40]	; (f14 <system_gclk_gen_set_config+0x9c>)
     eec:	609d      	str	r5, [r3, #8]
     eee:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
     ef0:	47b8      	blx	r7
     ef2:	2800      	cmp	r0, #0
     ef4:	d1fc      	bne.n	ef0 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     ef6:	2280      	movs	r2, #128	; 0x80
     ef8:	686b      	ldr	r3, [r5, #4]
     efa:	0252      	lsls	r2, r2, #9
     efc:	4013      	ands	r3, r2
     efe:	431c      	orrs	r4, r3
     f00:	606c      	str	r4, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f02:	4b05      	ldr	r3, [pc, #20]	; (f18 <system_gclk_gen_set_config+0xa0>)
     f04:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f08:	00000e4d 	.word	0x00000e4d
     f0c:	00000189 	.word	0x00000189
     f10:	40000c08 	.word	0x40000c08
     f14:	40000c00 	.word	0x40000c00
     f18:	000001bd 	.word	0x000001bd

00000f1c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f1c:	b570      	push	{r4, r5, r6, lr}
     f1e:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
     f20:	4c09      	ldr	r4, [pc, #36]	; (f48 <system_gclk_gen_enable+0x2c>)
     f22:	47a0      	blx	r4
     f24:	2800      	cmp	r0, #0
     f26:	d1fb      	bne.n	f20 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
     f28:	4b08      	ldr	r3, [pc, #32]	; (f4c <system_gclk_gen_enable+0x30>)
     f2a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f2c:	4b08      	ldr	r3, [pc, #32]	; (f50 <system_gclk_gen_enable+0x34>)
     f2e:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
     f30:	47a0      	blx	r4
     f32:	2800      	cmp	r0, #0
     f34:	d1fc      	bne.n	f30 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     f36:	2380      	movs	r3, #128	; 0x80
     f38:	4a06      	ldr	r2, [pc, #24]	; (f54 <system_gclk_gen_enable+0x38>)
     f3a:	025b      	lsls	r3, r3, #9
     f3c:	6851      	ldr	r1, [r2, #4]
     f3e:	430b      	orrs	r3, r1
     f40:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     f42:	4b05      	ldr	r3, [pc, #20]	; (f58 <system_gclk_gen_enable+0x3c>)
     f44:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f46:	bd70      	pop	{r4, r5, r6, pc}
     f48:	00000e4d 	.word	0x00000e4d
     f4c:	00000189 	.word	0x00000189
     f50:	40000c04 	.word	0x40000c04
     f54:	40000c00 	.word	0x40000c00
     f58:	000001bd 	.word	0x000001bd

00000f5c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     f5e:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
     f60:	4e18      	ldr	r6, [pc, #96]	; (fc4 <system_gclk_gen_get_hz+0x68>)
     f62:	47b0      	blx	r6
     f64:	2800      	cmp	r0, #0
     f66:	d1fb      	bne.n	f60 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
     f68:	4b17      	ldr	r3, [pc, #92]	; (fc8 <system_gclk_gen_get_hz+0x6c>)
     f6a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f6c:	4b17      	ldr	r3, [pc, #92]	; (fcc <system_gclk_gen_get_hz+0x70>)
     f6e:	701f      	strb	r7, [r3, #0]
     f70:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
     f72:	47b0      	blx	r6
     f74:	2800      	cmp	r0, #0
     f76:	d1fc      	bne.n	f72 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     f78:	4d15      	ldr	r5, [pc, #84]	; (fd0 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
     f7a:	4b16      	ldr	r3, [pc, #88]	; (fd4 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     f7c:	6868      	ldr	r0, [r5, #4]
     f7e:	04c0      	lsls	r0, r0, #19
     f80:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     f82:	4798      	blx	r3
     f84:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f86:	9b01      	ldr	r3, [sp, #4]
     f88:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     f8a:	686b      	ldr	r3, [r5, #4]
     f8c:	02db      	lsls	r3, r3, #11
     f8e:	0fdb      	lsrs	r3, r3, #31
     f90:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f92:	4b11      	ldr	r3, [pc, #68]	; (fd8 <system_gclk_gen_get_hz+0x7c>)
     f94:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
     f96:	47b0      	blx	r6
     f98:	2800      	cmp	r0, #0
     f9a:	d1fc      	bne.n	f96 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f9c:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
     f9e:	4b0f      	ldr	r3, [pc, #60]	; (fdc <system_gclk_gen_get_hz+0x80>)
     fa0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     fa2:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
     fa4:	022d      	lsls	r5, r5, #8
     fa6:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
     fa8:	2b00      	cmp	r3, #0
     faa:	d108      	bne.n	fbe <system_gclk_gen_get_hz+0x62>
     fac:	2d01      	cmp	r5, #1
     fae:	d904      	bls.n	fba <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
     fb0:	0020      	movs	r0, r4
     fb2:	0029      	movs	r1, r5
     fb4:	4b0a      	ldr	r3, [pc, #40]	; (fe0 <system_gclk_gen_get_hz+0x84>)
     fb6:	4798      	blx	r3
     fb8:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
     fba:	0020      	movs	r0, r4
     fbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
     fbe:	3501      	adds	r5, #1
     fc0:	40ec      	lsrs	r4, r5
	return gen_input_hz;
     fc2:	e7fa      	b.n	fba <system_gclk_gen_get_hz+0x5e>
     fc4:	00000e4d 	.word	0x00000e4d
     fc8:	00000189 	.word	0x00000189
     fcc:	40000c04 	.word	0x40000c04
     fd0:	40000c00 	.word	0x40000c00
     fd4:	00000ac5 	.word	0x00000ac5
     fd8:	40000c08 	.word	0x40000c08
     fdc:	000001bd 	.word	0x000001bd
     fe0:	00002195 	.word	0x00002195

00000fe4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     fe4:	b510      	push	{r4, lr}
     fe6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     fe8:	4b06      	ldr	r3, [pc, #24]	; (1004 <system_gclk_chan_enable+0x20>)
     fea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fec:	4b06      	ldr	r3, [pc, #24]	; (1008 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     fee:	4a07      	ldr	r2, [pc, #28]	; (100c <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     ff0:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     ff2:	2380      	movs	r3, #128	; 0x80
     ff4:	8851      	ldrh	r1, [r2, #2]
     ff6:	01db      	lsls	r3, r3, #7
     ff8:	430b      	orrs	r3, r1
     ffa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     ffc:	4b04      	ldr	r3, [pc, #16]	; (1010 <system_gclk_chan_enable+0x2c>)
     ffe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1000:	bd10      	pop	{r4, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	00000189 	.word	0x00000189
    1008:	40000c02 	.word	0x40000c02
    100c:	40000c00 	.word	0x40000c00
    1010:	000001bd 	.word	0x000001bd

00001014 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1014:	b510      	push	{r4, lr}
    1016:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1018:	4b0e      	ldr	r3, [pc, #56]	; (1054 <system_gclk_chan_disable+0x40>)
    101a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    101c:	4b0e      	ldr	r3, [pc, #56]	; (1058 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    101e:	4a0f      	ldr	r2, [pc, #60]	; (105c <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1020:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1022:	4b0f      	ldr	r3, [pc, #60]	; (1060 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1024:	4c0f      	ldr	r4, [pc, #60]	; (1064 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1026:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1028:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    102a:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    102c:	4011      	ands	r1, r2
    102e:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1030:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1032:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1034:	4021      	ands	r1, r4
    1036:	8059      	strh	r1, [r3, #2]
    1038:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    103a:	2280      	movs	r2, #128	; 0x80
    103c:	01d2      	lsls	r2, r2, #7
    103e:	885c      	ldrh	r4, [r3, #2]
    1040:	4214      	tst	r4, r2
    1042:	d1fc      	bne.n	103e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1044:	885a      	ldrh	r2, [r3, #2]
    1046:	0200      	lsls	r0, r0, #8
    1048:	400a      	ands	r2, r1
    104a:	4302      	orrs	r2, r0
    104c:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    104e:	4b06      	ldr	r3, [pc, #24]	; (1068 <system_gclk_chan_disable+0x54>)
    1050:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1052:	bd10      	pop	{r4, pc}
    1054:	00000189 	.word	0x00000189
    1058:	40000c02 	.word	0x40000c02
    105c:	fffff0ff 	.word	0xfffff0ff
    1060:	40000c00 	.word	0x40000c00
    1064:	ffffbfff 	.word	0xffffbfff
    1068:	000001bd 	.word	0x000001bd

0000106c <system_gclk_chan_set_config>:
{
    106c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    106e:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1072:	0224      	lsls	r4, r4, #8
    1074:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1076:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1078:	4b02      	ldr	r3, [pc, #8]	; (1084 <system_gclk_chan_set_config+0x18>)
    107a:	b2a4      	uxth	r4, r4
    107c:	805c      	strh	r4, [r3, #2]
}
    107e:	bd10      	pop	{r4, pc}
    1080:	00001015 	.word	0x00001015
    1084:	40000c00 	.word	0x40000c00

00001088 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1088:	b510      	push	{r4, lr}
    108a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    108c:	4b06      	ldr	r3, [pc, #24]	; (10a8 <system_gclk_chan_get_hz+0x20>)
    108e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1090:	4b06      	ldr	r3, [pc, #24]	; (10ac <system_gclk_chan_get_hz+0x24>)
    1092:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1094:	4b06      	ldr	r3, [pc, #24]	; (10b0 <system_gclk_chan_get_hz+0x28>)
    1096:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1098:	4b06      	ldr	r3, [pc, #24]	; (10b4 <system_gclk_chan_get_hz+0x2c>)
    109a:	0524      	lsls	r4, r4, #20
    109c:	0f24      	lsrs	r4, r4, #28
    109e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    10a0:	0020      	movs	r0, r4
    10a2:	4b05      	ldr	r3, [pc, #20]	; (10b8 <system_gclk_chan_get_hz+0x30>)
    10a4:	4798      	blx	r3
}
    10a6:	bd10      	pop	{r4, pc}
    10a8:	00000189 	.word	0x00000189
    10ac:	40000c02 	.word	0x40000c02
    10b0:	40000c00 	.word	0x40000c00
    10b4:	000001bd 	.word	0x000001bd
    10b8:	00000f5d 	.word	0x00000f5d

000010bc <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    10bc:	78d3      	ldrb	r3, [r2, #3]
{
    10be:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    10c0:	2b00      	cmp	r3, #0
    10c2:	d135      	bne.n	1130 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    10c4:	7814      	ldrb	r4, [r2, #0]
    10c6:	2c80      	cmp	r4, #128	; 0x80
    10c8:	d003      	beq.n	10d2 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    10ca:	2380      	movs	r3, #128	; 0x80
    10cc:	0624      	lsls	r4, r4, #24
    10ce:	025b      	lsls	r3, r3, #9
    10d0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    10d2:	2502      	movs	r5, #2
    10d4:	7854      	ldrb	r4, [r2, #1]
    10d6:	43ac      	bics	r4, r5
    10d8:	d106      	bne.n	10e8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    10da:	7894      	ldrb	r4, [r2, #2]
    10dc:	2c00      	cmp	r4, #0
    10de:	d124      	bne.n	112a <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    10e0:	2480      	movs	r4, #128	; 0x80
    10e2:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    10e4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    10e6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10e8:	7854      	ldrb	r4, [r2, #1]
    10ea:	3c01      	subs	r4, #1
    10ec:	2c01      	cmp	r4, #1
    10ee:	d801      	bhi.n	10f4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    10f0:	4c12      	ldr	r4, [pc, #72]	; (113c <_system_pinmux_config+0x80>)
    10f2:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10f4:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    10f6:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10f8:	05e4      	lsls	r4, r4, #23
    10fa:	432c      	orrs	r4, r5
    10fc:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10fe:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1100:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1102:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1104:	0624      	lsls	r4, r4, #24
    1106:	432c      	orrs	r4, r5
    1108:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    110a:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    110c:	78d4      	ldrb	r4, [r2, #3]
    110e:	2c00      	cmp	r4, #0
    1110:	d10a      	bne.n	1128 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1112:	035b      	lsls	r3, r3, #13
    1114:	d503      	bpl.n	111e <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1116:	7893      	ldrb	r3, [r2, #2]
    1118:	2b01      	cmp	r3, #1
    111a:	d10c      	bne.n	1136 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    111c:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    111e:	7853      	ldrb	r3, [r2, #1]
    1120:	3b01      	subs	r3, #1
    1122:	2b01      	cmp	r3, #1
    1124:	d800      	bhi.n	1128 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1126:	6081      	str	r1, [r0, #8]
		}
	}
}
    1128:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    112a:	24c0      	movs	r4, #192	; 0xc0
    112c:	02e4      	lsls	r4, r4, #11
    112e:	e7d9      	b.n	10e4 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1130:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1132:	2300      	movs	r3, #0
    1134:	e7de      	b.n	10f4 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    1136:	6141      	str	r1, [r0, #20]
    1138:	e7f1      	b.n	111e <_system_pinmux_config+0x62>
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	fffbffff 	.word	0xfffbffff

00001140 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1140:	b510      	push	{r4, lr}
    1142:	0003      	movs	r3, r0
    1144:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    1146:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1148:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    114a:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    114c:	4281      	cmp	r1, r0
    114e:	d102      	bne.n	1156 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1150:	4904      	ldr	r1, [pc, #16]	; (1164 <system_pinmux_pin_set_config+0x24>)
    1152:	01e0      	lsls	r0, r4, #7
    1154:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1156:	211f      	movs	r1, #31
    1158:	400b      	ands	r3, r1
    115a:	391e      	subs	r1, #30
    115c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    115e:	4b02      	ldr	r3, [pc, #8]	; (1168 <system_pinmux_pin_set_config+0x28>)
    1160:	4798      	blx	r3
}
    1162:	bd10      	pop	{r4, pc}
    1164:	41004400 	.word	0x41004400
    1168:	000010bd 	.word	0x000010bd

0000116c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    116c:	4770      	bx	lr
	...

00001170 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1170:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1172:	4b05      	ldr	r3, [pc, #20]	; (1188 <system_init+0x18>)
    1174:	4798      	blx	r3
	/* Initialize board hardware */
	system_board_init();
    1176:	4b05      	ldr	r3, [pc, #20]	; (118c <system_init+0x1c>)
    1178:	4798      	blx	r3
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    117a:	4b05      	ldr	r3, [pc, #20]	; (1190 <system_init+0x20>)
    117c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    117e:	4b05      	ldr	r3, [pc, #20]	; (1194 <system_init+0x24>)
    1180:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1182:	4b05      	ldr	r3, [pc, #20]	; (1198 <system_init+0x28>)
    1184:	4798      	blx	r3
}
    1186:	bd10      	pop	{r4, pc}
    1188:	00000ce5 	.word	0x00000ce5
    118c:	000001ed 	.word	0x000001ed
    1190:	0000116d 	.word	0x0000116d
    1194:	0000116d 	.word	0x0000116d
    1198:	0000116d 	.word	0x0000116d

0000119c <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    119c:	2000      	movs	r0, #0
    119e:	4770      	bx	lr

000011a0 <tcc_get_config_defaults>:
	uint8_t module_index = _tcc_get_inst_index(hw);

	/* Base counter defaults */
	config->counter.count                  = 0;

	config->counter.period                 = _tcc_maxs[module_index];
    11a0:	4a37      	ldr	r2, [pc, #220]	; (1280 <tcc_get_config_defaults+0xe0>)
{
    11a2:	b510      	push	{r4, lr}
	config->counter.period                 = _tcc_maxs[module_index];
    11a4:	6042      	str	r2, [r0, #4]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    11a6:	0002      	movs	r2, r0
	config->counter.count                  = 0;
    11a8:	2300      	movs	r3, #0

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    11aa:	0004      	movs	r4, r0
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    11ac:	322c      	adds	r2, #44	; 0x2c
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    11ae:	3448      	adds	r4, #72	; 0x48
	config->counter.count                  = 0;
    11b0:	6003      	str	r3, [r0, #0]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    11b2:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    11b4:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    11b6:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    11b8:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    11ba:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    11bc:	61c3      	str	r3, [r0, #28]
    11be:	6203      	str	r3, [r0, #32]
    11c0:	6243      	str	r3, [r0, #36]	; 0x24
    11c2:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    11c4:	7503      	strb	r3, [r0, #20]
    11c6:	7543      	strb	r3, [r0, #21]
    11c8:	7583      	strb	r3, [r0, #22]
    11ca:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    11cc:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    11ce:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    11d0:	7403      	strb	r3, [r0, #16]
    11d2:	7443      	strb	r3, [r0, #17]
    11d4:	7483      	strb	r3, [r0, #18]
    11d6:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    11d8:	7013      	strb	r3, [r2, #0]
    11da:	7053      	strb	r3, [r2, #1]
    11dc:	7093      	strb	r3, [r2, #2]
    11de:	70d3      	strb	r3, [r2, #3]
    11e0:	7113      	strb	r3, [r2, #4]
    11e2:	7153      	strb	r3, [r2, #5]
    11e4:	7193      	strb	r3, [r2, #6]
    11e6:	71d3      	strb	r3, [r2, #7]
    11e8:	7213      	strb	r3, [r2, #8]
    11ea:	7253      	strb	r3, [r2, #9]
    11ec:	7293      	strb	r3, [r2, #10]
    11ee:	72d3      	strb	r3, [r2, #11]
    11f0:	320c      	adds	r2, #12
    11f2:	7013      	strb	r3, [r2, #0]
    11f4:	7053      	strb	r3, [r2, #1]
    11f6:	7093      	strb	r3, [r2, #2]
    11f8:	70d3      	strb	r3, [r2, #3]
    11fa:	7113      	strb	r3, [r2, #4]
    11fc:	7153      	strb	r3, [r2, #5]
    11fe:	7193      	strb	r3, [r2, #6]
    1200:	71d3      	strb	r3, [r2, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1202:	7213      	strb	r3, [r2, #8]
    1204:	7253      	strb	r3, [r2, #9]
    1206:	7293      	strb	r3, [r2, #10]
    1208:	72d3      	strb	r3, [r2, #11]
    120a:	7313      	strb	r3, [r2, #12]
    120c:	7353      	strb	r3, [r2, #13]
    120e:	7393      	strb	r3, [r2, #14]
    1210:	73d3      	strb	r3, [r2, #15]
    1212:	1d01      	adds	r1, r0, #4
    1214:	7023      	strb	r3, [r4, #0]
    1216:	7063      	strb	r3, [r4, #1]
    1218:	70a3      	strb	r3, [r4, #2]
    121a:	70e3      	strb	r3, [r4, #3]
    121c:	7123      	strb	r3, [r4, #4]
    121e:	7163      	strb	r3, [r4, #5]
    1220:	71a3      	strb	r3, [r4, #6]
    1222:	71e3      	strb	r3, [r4, #7]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1224:	7223      	strb	r3, [r4, #8]
    1226:	7263      	strb	r3, [r4, #9]
    1228:	72a3      	strb	r3, [r4, #10]
    122a:	72e3      	strb	r3, [r4, #11]
    122c:	7323      	strb	r3, [r4, #12]
    122e:	7363      	strb	r3, [r4, #13]
    1230:	73a3      	strb	r3, [r4, #14]
    1232:	73e3      	strb	r3, [r4, #15]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1234:	3450      	adds	r4, #80	; 0x50
    1236:	7023      	strb	r3, [r4, #0]
    1238:	6583      	str	r3, [r0, #88]	; 0x58
    123a:	6783      	str	r3, [r0, #120]	; 0x78
    123c:	7063      	strb	r3, [r4, #1]
    123e:	65c3      	str	r3, [r0, #92]	; 0x5c
    1240:	67c3      	str	r3, [r0, #124]	; 0x7c
    1242:	70a3      	strb	r3, [r4, #2]
    1244:	6603      	str	r3, [r0, #96]	; 0x60
    1246:	67cb      	str	r3, [r1, #124]	; 0x7c
    1248:	3197      	adds	r1, #151	; 0x97
    124a:	700b      	strb	r3, [r1, #0]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    124c:	2101      	movs	r1, #1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    124e:	3a30      	subs	r2, #48	; 0x30
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1250:	6643      	str	r3, [r0, #100]	; 0x64
    1252:	67d3      	str	r3, [r2, #124]	; 0x7c
    1254:	3294      	adds	r2, #148	; 0x94
    1256:	7013      	strb	r3, [r2, #0]
    1258:	3a14      	subs	r2, #20
    125a:	6683      	str	r3, [r0, #104]	; 0x68
    125c:	6013      	str	r3, [r2, #0]
    125e:	7553      	strb	r3, [r2, #21]
    1260:	3204      	adds	r2, #4
    1262:	66c3      	str	r3, [r0, #108]	; 0x6c
    1264:	6013      	str	r3, [r2, #0]
    1266:	7493      	strb	r3, [r2, #18]
    1268:	3204      	adds	r2, #4
    126a:	6703      	str	r3, [r0, #112]	; 0x70
    126c:	6013      	str	r3, [r2, #0]
    126e:	73d3      	strb	r3, [r2, #15]
    1270:	6743      	str	r3, [r0, #116]	; 0x74
    1272:	3204      	adds	r2, #4
	config->run_in_standby            = false;
    1274:	30a1      	adds	r0, #161	; 0xa1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1276:	6013      	str	r3, [r2, #0]
	config->double_buffering_enabled  = true;
    1278:	7311      	strb	r1, [r2, #12]
	config->run_in_standby            = false;
    127a:	7003      	strb	r3, [r0, #0]
}
    127c:	bd10      	pop	{r4, pc}
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	00ffffff 	.word	0x00ffffff

00001284 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    1284:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    1286:	4ba7      	ldr	r3, [pc, #668]	; (1524 <tcc_init+0x2a0>)
{
    1288:	b08f      	sub	sp, #60	; 0x3c
    128a:	0006      	movs	r6, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    128c:	0008      	movs	r0, r1
{
    128e:	000d      	movs	r5, r1
    1290:	0014      	movs	r4, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    1292:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    1294:	2320      	movs	r3, #32
    1296:	4aa4      	ldr	r2, [pc, #656]	; (1528 <tcc_init+0x2a4>)
    1298:	9009      	str	r0, [sp, #36]	; 0x24
    129a:	6a11      	ldr	r1, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
    129c:	201c      	movs	r0, #28
    129e:	430b      	orrs	r3, r1
    12a0:	6213      	str	r3, [r2, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    12a2:	682b      	ldr	r3, [r5, #0]
    12a4:	079b      	lsls	r3, r3, #30
    12a6:	d407      	bmi.n	12b8 <tcc_init+0x34>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    12a8:	682b      	ldr	r3, [r5, #0]
    12aa:	07db      	lsls	r3, r3, #31
    12ac:	d404      	bmi.n	12b8 <tcc_init+0x34>
    12ae:	4a9f      	ldr	r2, [pc, #636]	; (152c <tcc_init+0x2a8>)

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
    12b0:	6823      	ldr	r3, [r4, #0]
    12b2:	4293      	cmp	r3, r2
    12b4:	d902      	bls.n	12bc <tcc_init+0x38>
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
    12b6:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    12b8:	b00f      	add	sp, #60	; 0x3c
    12ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		|| (config->counter.period > count_max)
    12bc:	6863      	ldr	r3, [r4, #4]
    12be:	4293      	cmp	r3, r2
    12c0:	d8f9      	bhi.n	12b6 <tcc_init+0x32>
    12c2:	0023      	movs	r3, r4
    12c4:	0021      	movs	r1, r4
    12c6:	331c      	adds	r3, #28
    12c8:	312c      	adds	r1, #44	; 0x2c
		if ((config->compare.match[i] > count_max)
    12ca:	6818      	ldr	r0, [r3, #0]
    12cc:	4290      	cmp	r0, r2
    12ce:	d8f2      	bhi.n	12b6 <tcc_init+0x32>
    12d0:	3304      	adds	r3, #4
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    12d2:	428b      	cmp	r3, r1
    12d4:	d1f9      	bne.n	12ca <tcc_init+0x46>
    12d6:	2200      	movs	r2, #0
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    12d8:	2180      	movs	r1, #128	; 0x80
    12da:	9202      	str	r2, [sp, #8]
    12dc:	0449      	lsls	r1, r1, #17
		if (config->capture.channel_function[i] ==
    12de:	18a0      	adds	r0, r4, r2
    12e0:	7c00      	ldrb	r0, [r0, #16]
    12e2:	2801      	cmp	r0, #1
    12e4:	d104      	bne.n	12f0 <tcc_init+0x6c>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    12e6:	0008      	movs	r0, r1
    12e8:	4090      	lsls	r0, r2
    12ea:	9f02      	ldr	r7, [sp, #8]
    12ec:	4307      	orrs	r7, r0
    12ee:	9702      	str	r7, [sp, #8]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    12f0:	3201      	adds	r2, #1
    12f2:	2a04      	cmp	r2, #4
    12f4:	d1f3      	bne.n	12de <tcc_init+0x5a>
	if (config->run_in_standby) {
    12f6:	0022      	movs	r2, r4
    12f8:	32a1      	adds	r2, #161	; 0xa1
    12fa:	7812      	ldrb	r2, [r2, #0]
    12fc:	2a00      	cmp	r2, #0
    12fe:	d004      	beq.n	130a <tcc_init+0x86>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    1300:	2280      	movs	r2, #128	; 0x80
    1302:	9902      	ldr	r1, [sp, #8]
    1304:	0112      	lsls	r2, r2, #4
    1306:	4311      	orrs	r1, r2
    1308:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    130a:	7a22      	ldrb	r2, [r4, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    130c:	1e51      	subs	r1, r2, #1
    130e:	418a      	sbcs	r2, r1
    1310:	0092      	lsls	r2, r2, #2
    1312:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    1314:	7a62      	ldrb	r2, [r4, #9]
    1316:	2a01      	cmp	r2, #1
    1318:	d102      	bne.n	1320 <tcc_init+0x9c>
		ctrlb |= TCC_CTRLBSET_DIR;
    131a:	9903      	ldr	r1, [sp, #12]
    131c:	4311      	orrs	r1, r2
    131e:	9103      	str	r1, [sp, #12]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1320:	7b22      	ldrb	r2, [r4, #12]
    1322:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1324:	7ae2      	ldrb	r2, [r4, #11]
    1326:	9207      	str	r2, [sp, #28]
    1328:	2200      	movs	r2, #0
    132a:	4694      	mov	ip, r2
		if (cfg->capture_channel >= cc_num) {
    132c:	7a5f      	ldrb	r7, [r3, #9]
    132e:	2f03      	cmp	r7, #3
    1330:	d8c1      	bhi.n	12b6 <tcc_init+0x32>
		if (cfg->filter_value > 0xF) {
    1332:	7819      	ldrb	r1, [r3, #0]
    1334:	290f      	cmp	r1, #15
    1336:	d8be      	bhi.n	12b6 <tcc_init+0x32>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1338:	20f0      	movs	r0, #240	; 0xf0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    133a:	785a      	ldrb	r2, [r3, #1]
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    133c:	0500      	lsls	r0, r0, #20
    133e:	0609      	lsls	r1, r1, #24
    1340:	4001      	ands	r1, r0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1342:	0412      	lsls	r2, r2, #16
    1344:	430a      	orrs	r2, r1
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1346:	7899      	ldrb	r1, [r3, #2]
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1348:	9201      	str	r2, [sp, #4]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    134a:	1e48      	subs	r0, r1, #1
    134c:	4181      	sbcs	r1, r0
    134e:	01c9      	lsls	r1, r1, #7
    1350:	9104      	str	r1, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1352:	78d9      	ldrb	r1, [r3, #3]
				| TCC_FCTRLA_SRC(cfg->source)
    1354:	2203      	movs	r2, #3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1356:	1e48      	subs	r0, r1, #1
    1358:	4181      	sbcs	r1, r0
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    135a:	7918      	ldrb	r0, [r3, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    135c:	00c9      	lsls	r1, r1, #3
    135e:	9105      	str	r1, [sp, #20]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1360:	1e41      	subs	r1, r0, #1
    1362:	4188      	sbcs	r0, r1
    1364:	0101      	lsls	r1, r0, #4
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1366:	2060      	movs	r0, #96	; 0x60
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1368:	9108      	str	r1, [sp, #32]
				| TCC_FCTRLA_BLANK(cfg->blanking)
    136a:	7999      	ldrb	r1, [r3, #6]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    136c:	02bf      	lsls	r7, r7, #10
				| TCC_FCTRLA_BLANK(cfg->blanking)
    136e:	0149      	lsls	r1, r1, #5
    1370:	4001      	ands	r1, r0
				| TCC_FCTRLA_SRC(cfg->source)
    1372:	7958      	ldrb	r0, [r3, #5]
    1374:	4010      	ands	r0, r2
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1376:	9a01      	ldr	r2, [sp, #4]
    1378:	4302      	orrs	r2, r0
    137a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_HALT(cfg->halt_action)
    137c:	21c0      	movs	r1, #192	; 0xc0
    137e:	79d8      	ldrb	r0, [r3, #7]
    1380:	0089      	lsls	r1, r1, #2
    1382:	0200      	lsls	r0, r0, #8
    1384:	4001      	ands	r1, r0
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1386:	20e0      	movs	r0, #224	; 0xe0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1388:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    138a:	7a1a      	ldrb	r2, [r3, #8]
    138c:	01c0      	lsls	r0, r0, #7
    138e:	0312      	lsls	r2, r2, #12
    1390:	4002      	ands	r2, r0
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1392:	20c0      	movs	r0, #192	; 0xc0
    1394:	0100      	lsls	r0, r0, #4
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1396:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1398:	4007      	ands	r7, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    139a:	430f      	orrs	r7, r1
		value_buffer[i] = fault;
    139c:	4661      	mov	r1, ip
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    139e:	9a04      	ldr	r2, [sp, #16]
    13a0:	330a      	adds	r3, #10
    13a2:	4317      	orrs	r7, r2
    13a4:	9a05      	ldr	r2, [sp, #20]
    13a6:	4317      	orrs	r7, r2
    13a8:	9a08      	ldr	r2, [sp, #32]
    13aa:	4317      	orrs	r7, r2
		value_buffer[i] = fault;
    13ac:	aa0c      	add	r2, sp, #48	; 0x30
    13ae:	508f      	str	r7, [r1, r2]
    13b0:	2204      	movs	r2, #4
    13b2:	4494      	add	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    13b4:	4662      	mov	r2, ip
    13b6:	2a08      	cmp	r2, #8
    13b8:	d1b8      	bne.n	132c <tcc_init+0xa8>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13ba:	2280      	movs	r2, #128	; 0x80
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    13bc:	2300      	movs	r3, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13be:	0252      	lsls	r2, r2, #9
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    13c0:	2002      	movs	r0, #2
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13c2:	4694      	mov	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    13c4:	9301      	str	r3, [sp, #4]
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    13c6:	30ff      	adds	r0, #255	; 0xff
    13c8:	18e2      	adds	r2, r4, r3
		if (config->wave_ext.invert[i]) {
    13ca:	0017      	movs	r7, r2
    13cc:	3750      	adds	r7, #80	; 0x50
    13ce:	783f      	ldrb	r7, [r7, #0]
    13d0:	2f00      	cmp	r7, #0
    13d2:	d004      	beq.n	13de <tcc_init+0x15a>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13d4:	4667      	mov	r7, ip
    13d6:	409f      	lsls	r7, r3
    13d8:	9901      	ldr	r1, [sp, #4]
    13da:	4339      	orrs	r1, r7
    13dc:	9101      	str	r1, [sp, #4]
		if (config->wave_ext.non_recoverable_fault[i].output !=
    13de:	001f      	movs	r7, r3
    13e0:	3741      	adds	r7, #65	; 0x41
    13e2:	5dd2      	ldrb	r2, [r2, r7]
    13e4:	2a00      	cmp	r2, #0
    13e6:	d007      	beq.n	13f8 <tcc_init+0x174>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    13e8:	2a02      	cmp	r2, #2
    13ea:	d000      	beq.n	13ee <tcc_init+0x16a>
    13ec:	e098      	b.n	1520 <tcc_init+0x29c>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    13ee:	0002      	movs	r2, r0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    13f0:	409a      	lsls	r2, r3
    13f2:	9901      	ldr	r1, [sp, #4]
    13f4:	4311      	orrs	r1, r2
    13f6:	9101      	str	r1, [sp, #4]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    13f8:	3301      	adds	r3, #1
    13fa:	2b08      	cmp	r3, #8
    13fc:	d1e4      	bne.n	13c8 <tcc_init+0x144>
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    13fe:	2230      	movs	r2, #48	; 0x30
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1400:	2107      	movs	r1, #7
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1402:	7e63      	ldrb	r3, [r4, #25]
    1404:	011b      	lsls	r3, r3, #4
    1406:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1408:	7e22      	ldrb	r2, [r4, #24]
    140a:	400a      	ands	r2, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    140c:	4313      	orrs	r3, r2
			wave |= (TCC_WAVE_POL0 << n);
    140e:	2280      	movs	r2, #128	; 0x80
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1410:	9304      	str	r3, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1412:	2300      	movs	r3, #0
			wave |= (TCC_WAVE_POL0 << n);
    1414:	0252      	lsls	r2, r2, #9
		if (wav_cfg->wave_polarity[n]) {
    1416:	18e1      	adds	r1, r4, r3
    1418:	7d09      	ldrb	r1, [r1, #20]
    141a:	2900      	cmp	r1, #0
    141c:	d004      	beq.n	1428 <tcc_init+0x1a4>
			wave |= (TCC_WAVE_POL0 << n);
    141e:	0011      	movs	r1, r2
    1420:	4099      	lsls	r1, r3
    1422:	9804      	ldr	r0, [sp, #16]
    1424:	4308      	orrs	r0, r1
    1426:	9004      	str	r0, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1428:	3301      	adds	r3, #1
    142a:	2b04      	cmp	r3, #4
    142c:	d1f3      	bne.n	1416 <tcc_init+0x192>
    142e:	0031      	movs	r1, r6
		module_inst->callback[i] = NULL;
    1430:	2300      	movs	r3, #0
    1432:	1d32      	adds	r2, r6, #4
    1434:	3134      	adds	r1, #52	; 0x34
    1436:	c208      	stmia	r2!, {r3}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1438:	428a      	cmp	r2, r1
    143a:	d1fc      	bne.n	1436 <tcc_init+0x1b2>
	module_inst->register_callback_mask = 0;
    143c:	6373      	str	r3, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    143e:	63b3      	str	r3, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1440:	9b09      	ldr	r3, [sp, #36]	; 0x24
	gclk_chan_config.source_generator = config->counter.clock_source;
    1442:	aa0a      	add	r2, sp, #40	; 0x28
	_tcc_instances[module_index] = module_inst;
    1444:	0098      	lsls	r0, r3, #2
    1446:	4b3a      	ldr	r3, [pc, #232]	; (1530 <tcc_init+0x2ac>)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1448:	0011      	movs	r1, r2
	_tcc_instances[module_index] = module_inst;
    144a:	50c6      	str	r6, [r0, r3]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    144c:	0023      	movs	r3, r4
	module_inst->hw = hw;
    144e:	6035      	str	r5, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1450:	33a0      	adds	r3, #160	; 0xa0
    1452:	781b      	ldrb	r3, [r3, #0]
    1454:	363c      	adds	r6, #60	; 0x3c
    1456:	7033      	strb	r3, [r6, #0]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1458:	7aa3      	ldrb	r3, [r4, #10]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    145a:	2011      	movs	r0, #17
	gclk_chan_config.source_generator = config->counter.clock_source;
    145c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    145e:	4b35      	ldr	r3, [pc, #212]	; (1534 <tcc_init+0x2b0>)
    1460:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1462:	4b35      	ldr	r3, [pc, #212]	; (1538 <tcc_init+0x2b4>)
    1464:	2011      	movs	r0, #17
    1466:	4798      	blx	r3
    1468:	0023      	movs	r3, r4
    146a:	0027      	movs	r7, r4
    146c:	0026      	movs	r6, r4
    146e:	3378      	adds	r3, #120	; 0x78
    1470:	3798      	adds	r7, #152	; 0x98
    1472:	3658      	adds	r6, #88	; 0x58
    1474:	9305      	str	r3, [sp, #20]
		if (!config->pins.enable_wave_out_pin[i]) {
    1476:	783b      	ldrb	r3, [r7, #0]
    1478:	2b00      	cmp	r3, #0
    147a:	d00d      	beq.n	1498 <tcc_init+0x214>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    147c:	2301      	movs	r3, #1
    147e:	a90b      	add	r1, sp, #44	; 0x2c
    1480:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1482:	2300      	movs	r3, #0
    1484:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1486:	3320      	adds	r3, #32
    1488:	18f3      	adds	r3, r6, r3
    148a:	781b      	ldrb	r3, [r3, #0]
		system_pinmux_pin_set_config(
    148c:	7830      	ldrb	r0, [r6, #0]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    148e:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1490:	2301      	movs	r3, #1
    1492:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1494:	4b29      	ldr	r3, [pc, #164]	; (153c <tcc_init+0x2b8>)
    1496:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1498:	9b05      	ldr	r3, [sp, #20]
    149a:	3604      	adds	r6, #4
    149c:	3701      	adds	r7, #1
    149e:	42b3      	cmp	r3, r6
    14a0:	d1e9      	bne.n	1476 <tcc_init+0x1f2>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    14a2:	9b06      	ldr	r3, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    14a4:	9a07      	ldr	r2, [sp, #28]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    14a6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    14a8:	0212      	lsls	r2, r2, #8
    14aa:	4313      	orrs	r3, r2
    14ac:	9a02      	ldr	r2, [sp, #8]
    14ae:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    14b0:	602b      	str	r3, [r5, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    14b2:	2304      	movs	r3, #4
    14b4:	68aa      	ldr	r2, [r5, #8]
    14b6:	421a      	tst	r2, r3
    14b8:	d1fc      	bne.n	14b4 <tcc_init+0x230>
	hw->CTRLBCLR.reg = 0xFF;
    14ba:	23ff      	movs	r3, #255	; 0xff
    14bc:	712b      	strb	r3, [r5, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    14be:	3bfb      	subs	r3, #251	; 0xfb
    14c0:	68aa      	ldr	r2, [r5, #8]
    14c2:	421a      	tst	r2, r3
    14c4:	d1fc      	bne.n	14c0 <tcc_init+0x23c>
	hw->CTRLBSET.reg = ctrlb;
    14c6:	466b      	mov	r3, sp
    14c8:	7b1b      	ldrb	r3, [r3, #12]
    14ca:	716b      	strb	r3, [r5, #5]
	hw->FCTRLA.reg = faults[0];
    14cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    14ce:	60eb      	str	r3, [r5, #12]
	hw->FCTRLB.reg = faults[1];
    14d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    14d2:	612b      	str	r3, [r5, #16]
	hw->DRVCTRL.reg = drvctrl;
    14d4:	9b01      	ldr	r3, [sp, #4]
    14d6:	61ab      	str	r3, [r5, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    14d8:	4b19      	ldr	r3, [pc, #100]	; (1540 <tcc_init+0x2bc>)
    14da:	68aa      	ldr	r2, [r5, #8]
    14dc:	421a      	tst	r2, r3
    14de:	d1fc      	bne.n	14da <tcc_init+0x256>
	hw->WAVE.reg = waves[0];
    14e0:	9b04      	ldr	r3, [sp, #16]
    14e2:	63eb      	str	r3, [r5, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    14e4:	2310      	movs	r3, #16
    14e6:	68aa      	ldr	r2, [r5, #8]
    14e8:	421a      	tst	r2, r3
    14ea:	d1fc      	bne.n	14e6 <tcc_init+0x262>
	hw->COUNT.reg = config->counter.count;
    14ec:	6823      	ldr	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    14ee:	4a15      	ldr	r2, [pc, #84]	; (1544 <tcc_init+0x2c0>)
	hw->COUNT.reg = config->counter.count;
    14f0:	636b      	str	r3, [r5, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    14f2:	68ab      	ldr	r3, [r5, #8]
    14f4:	4013      	ands	r3, r2
    14f6:	d1fc      	bne.n	14f2 <tcc_init+0x26e>
	hw->PER.reg = (config->counter.period);
    14f8:	6862      	ldr	r2, [r4, #4]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    14fa:	4913      	ldr	r1, [pc, #76]	; (1548 <tcc_init+0x2c4>)
	hw->PER.reg = (config->counter.period);
    14fc:	642a      	str	r2, [r5, #64]	; 0x40
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    14fe:	000a      	movs	r2, r1
    1500:	409a      	lsls	r2, r3
		while (hw->SYNCBUSY.reg & (
    1502:	68a8      	ldr	r0, [r5, #8]
    1504:	4010      	ands	r0, r2
    1506:	d1fc      	bne.n	1502 <tcc_init+0x27e>
		hw->CC[i].reg = (config->compare.match[i]);
    1508:	009a      	lsls	r2, r3, #2
    150a:	18a2      	adds	r2, r4, r2
    150c:	69d6      	ldr	r6, [r2, #28]
    150e:	001a      	movs	r2, r3
    1510:	3210      	adds	r2, #16
    1512:	0092      	lsls	r2, r2, #2
    1514:	18aa      	adds	r2, r5, r2
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1516:	3301      	adds	r3, #1
		hw->CC[i].reg = (config->compare.match[i]);
    1518:	6056      	str	r6, [r2, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    151a:	2b04      	cmp	r3, #4
    151c:	d1ef      	bne.n	14fe <tcc_init+0x27a>
    151e:	e6cb      	b.n	12b8 <tcc_init+0x34>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1520:	2201      	movs	r2, #1
    1522:	e765      	b.n	13f0 <tcc_init+0x16c>
    1524:	0000119d 	.word	0x0000119d
    1528:	40000400 	.word	0x40000400
    152c:	00ffffff 	.word	0x00ffffff
    1530:	20000178 	.word	0x20000178
    1534:	0000106d 	.word	0x0000106d
    1538:	00000fe5 	.word	0x00000fe5
    153c:	00001141 	.word	0x00001141
    1540:	00020040 	.word	0x00020040
    1544:	00040080 	.word	0x00040080
    1548:	00080100 	.word	0x00080100

0000154c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    154e:	2500      	movs	r5, #0
	struct tcc_module *module =
    1550:	4b0b      	ldr	r3, [pc, #44]	; (1580 <_tcc_interrupt_handler+0x34>)
    1552:	0080      	lsls	r0, r0, #2
    1554:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1556:	6823      	ldr	r3, [r4, #0]
    1558:	6b62      	ldr	r2, [r4, #52]	; 0x34
    155a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    155c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    155e:	4013      	ands	r3, r2
    1560:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1562:	4b08      	ldr	r3, [pc, #32]	; (1584 <_tcc_interrupt_handler+0x38>)
    1564:	58ef      	ldr	r7, [r5, r3]
    1566:	4237      	tst	r7, r6
    1568:	d005      	beq.n	1576 <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    156a:	1963      	adds	r3, r4, r5
    156c:	685b      	ldr	r3, [r3, #4]
    156e:	0020      	movs	r0, r4
    1570:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1572:	6823      	ldr	r3, [r4, #0]
    1574:	62df      	str	r7, [r3, #44]	; 0x2c
    1576:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1578:	2d30      	cmp	r5, #48	; 0x30
    157a:	d1f2      	bne.n	1562 <_tcc_interrupt_handler+0x16>
		}
	}
}
    157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	20000178 	.word	0x20000178
    1584:	00003bd8 	.word	0x00003bd8

00001588 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1588:	b510      	push	{r4, lr}
    158a:	2000      	movs	r0, #0
    158c:	4b01      	ldr	r3, [pc, #4]	; (1594 <TCC0_Handler+0xc>)
    158e:	4798      	blx	r3
    1590:	bd10      	pop	{r4, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	0000154d 	.word	0x0000154d

00001598 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1598:	1c93      	adds	r3, r2, #2
    159a:	009b      	lsls	r3, r3, #2
    159c:	5019      	str	r1, [r3, r0]
    159e:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    15a0:	2a02      	cmp	r2, #2
    15a2:	d104      	bne.n	15ae <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    15a4:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    15a6:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    15a8:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    15aa:	2000      	movs	r0, #0
    15ac:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    15ae:	2a03      	cmp	r2, #3
    15b0:	d101      	bne.n	15b6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    15b2:	321d      	adds	r2, #29
    15b4:	e7f7      	b.n	15a6 <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    15b6:	2101      	movs	r1, #1
    15b8:	4091      	lsls	r1, r2
    15ba:	430b      	orrs	r3, r1
    15bc:	e7f4      	b.n	15a8 <tc_register_callback+0x10>
	...

000015c0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    15c0:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    15c2:	2601      	movs	r6, #1
	struct tc_module *module
    15c4:	4b14      	ldr	r3, [pc, #80]	; (1618 <_tc_interrupt_handler+0x58>)
    15c6:	0080      	lsls	r0, r0, #2
    15c8:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    15ca:	6823      	ldr	r3, [r4, #0]
    15cc:	7e22      	ldrb	r2, [r4, #24]
    15ce:	7e65      	ldrb	r5, [r4, #25]
    15d0:	7b9b      	ldrb	r3, [r3, #14]
    15d2:	4015      	ands	r5, r2
    15d4:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    15d6:	4235      	tst	r5, r6
    15d8:	d004      	beq.n	15e4 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    15da:	68a3      	ldr	r3, [r4, #8]
    15dc:	0020      	movs	r0, r4
    15de:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    15e0:	6823      	ldr	r3, [r4, #0]
    15e2:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    15e4:	2602      	movs	r6, #2
    15e6:	4235      	tst	r5, r6
    15e8:	d004      	beq.n	15f4 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    15ea:	68e3      	ldr	r3, [r4, #12]
    15ec:	0020      	movs	r0, r4
    15ee:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    15f0:	6823      	ldr	r3, [r4, #0]
    15f2:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    15f4:	2610      	movs	r6, #16
    15f6:	4235      	tst	r5, r6
    15f8:	d004      	beq.n	1604 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    15fa:	6923      	ldr	r3, [r4, #16]
    15fc:	0020      	movs	r0, r4
    15fe:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1600:	6823      	ldr	r3, [r4, #0]
    1602:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1604:	2620      	movs	r6, #32
    1606:	4235      	tst	r5, r6
    1608:	d004      	beq.n	1614 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    160a:	6963      	ldr	r3, [r4, #20]
    160c:	0020      	movs	r0, r4
    160e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1610:	6823      	ldr	r3, [r4, #0]
    1612:	739e      	strb	r6, [r3, #14]
	}
}
    1614:	bd70      	pop	{r4, r5, r6, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	2000017c 	.word	0x2000017c

0000161c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    161c:	b510      	push	{r4, lr}
    161e:	2000      	movs	r0, #0
    1620:	4b01      	ldr	r3, [pc, #4]	; (1628 <TC1_Handler+0xc>)
    1622:	4798      	blx	r3
    1624:	bd10      	pop	{r4, pc}
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	000015c1 	.word	0x000015c1

0000162c <TC2_Handler>:
    162c:	b510      	push	{r4, lr}
    162e:	2001      	movs	r0, #1
    1630:	4b01      	ldr	r3, [pc, #4]	; (1638 <TC2_Handler+0xc>)
    1632:	4798      	blx	r3
    1634:	bd10      	pop	{r4, pc}
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	000015c1 	.word	0x000015c1

0000163c <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    163c:	4b06      	ldr	r3, [pc, #24]	; (1658 <_tc_get_inst_index+0x1c>)
    163e:	4298      	cmp	r0, r3
    1640:	d007      	beq.n	1652 <_tc_get_inst_index+0x16>
    1642:	4a06      	ldr	r2, [pc, #24]	; (165c <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1644:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1646:	4290      	cmp	r0, r2
    1648:	d101      	bne.n	164e <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    164a:	3301      	adds	r3, #1
			return i;
    164c:	b2db      	uxtb	r3, r3
}
    164e:	0018      	movs	r0, r3
    1650:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1652:	2300      	movs	r3, #0
    1654:	e7fa      	b.n	164c <_tc_get_inst_index+0x10>
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	42001800 	.word	0x42001800
    165c:	42001c00 	.word	0x42001c00

00001660 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1660:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1662:	4b87      	ldr	r3, [pc, #540]	; (1880 <tc_init+0x220>)
{
    1664:	0005      	movs	r5, r0
    1666:	b085      	sub	sp, #20
	uint8_t instance = _tc_get_inst_index(hw);
    1668:	0008      	movs	r0, r1
{
    166a:	0014      	movs	r4, r2
    166c:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    166e:	4798      	blx	r3

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1670:	466a      	mov	r2, sp
    1672:	2312      	movs	r3, #18
    1674:	7113      	strb	r3, [r2, #4]
    1676:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1678:	332e      	adds	r3, #46	; 0x2e
    167a:	8113      	strh	r3, [r2, #8]
    167c:	3340      	adds	r3, #64	; 0x40
    167e:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1680:	2300      	movs	r3, #0
    1682:	60ab      	str	r3, [r5, #8]
    1684:	60eb      	str	r3, [r5, #12]
    1686:	612b      	str	r3, [r5, #16]
    1688:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    168a:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    168c:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    168e:	4b7d      	ldr	r3, [pc, #500]	; (1884 <tc_init+0x224>)
    1690:	0082      	lsls	r2, r0, #2
    1692:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1694:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1696:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    1698:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    169a:	2b08      	cmp	r3, #8
    169c:	d103      	bne.n	16a6 <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    169e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    16a0:	07fa      	lsls	r2, r7, #31
    16a2:	d500      	bpl.n	16a6 <tc_init+0x46>
    16a4:	e0d5      	b.n	1852 <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    16a6:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    16a8:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    16aa:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    16ac:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    16ae:	4213      	tst	r3, r2
    16b0:	d000      	beq.n	16b4 <tc_init+0x54>
    16b2:	e0ce      	b.n	1852 <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    16b4:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    16b6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    16b8:	06db      	lsls	r3, r3, #27
    16ba:	d500      	bpl.n	16be <tc_init+0x5e>
    16bc:	e0c9      	b.n	1852 <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    16be:	2102      	movs	r1, #2
    16c0:	8833      	ldrh	r3, [r6, #0]
    16c2:	400b      	ands	r3, r1
    16c4:	d000      	beq.n	16c8 <tc_init+0x68>
    16c6:	e0c4      	b.n	1852 <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    16c8:	7c21      	ldrb	r1, [r4, #16]
    16ca:	2900      	cmp	r1, #0
    16cc:	d008      	beq.n	16e0 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16ce:	a903      	add	r1, sp, #12
	config->powersave    = false;
    16d0:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    16d2:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    16d4:	7d20      	ldrb	r0, [r4, #20]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    16d6:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(
    16d8:	4b6b      	ldr	r3, [pc, #428]	; (1888 <tc_init+0x228>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16da:	708a      	strb	r2, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    16dc:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    16de:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    16e0:	7f23      	ldrb	r3, [r4, #28]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d00e      	beq.n	1704 <tc_init+0xa4>
	config->powersave    = false;
    16e6:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16e8:	2301      	movs	r3, #1
    16ea:	a903      	add	r1, sp, #12
	config->powersave    = false;
    16ec:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    16ee:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16f0:	708b      	strb	r3, [r1, #2]
    16f2:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    16f4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    16f6:	331f      	adds	r3, #31
    16f8:	18e3      	adds	r3, r4, r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    16fa:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    16fc:	7818      	ldrb	r0, [r3, #0]
    16fe:	4b62      	ldr	r3, [pc, #392]	; (1888 <tc_init+0x228>)
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1700:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    1702:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1704:	007a      	lsls	r2, r7, #1
    1706:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1708:	4668      	mov	r0, sp
    170a:	2208      	movs	r2, #8
    170c:	1880      	adds	r0, r0, r2
    170e:	4662      	mov	r2, ip
    1710:	4b5e      	ldr	r3, [pc, #376]	; (188c <tc_init+0x22c>)
    1712:	5a82      	ldrh	r2, [r0, r2]
    1714:	6a19      	ldr	r1, [r3, #32]
    1716:	430a      	orrs	r2, r1
    1718:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    171a:	78a2      	ldrb	r2, [r4, #2]
    171c:	2a08      	cmp	r2, #8
    171e:	d10a      	bne.n	1736 <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1720:	1c79      	adds	r1, r7, #1
    1722:	004a      	lsls	r2, r1, #1
    1724:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1726:	2108      	movs	r1, #8
    1728:	466a      	mov	r2, sp
    172a:	1852      	adds	r2, r2, r1
    172c:	4661      	mov	r1, ip
    172e:	6a18      	ldr	r0, [r3, #32]
    1730:	5a52      	ldrh	r2, [r2, r1]
    1732:	4302      	orrs	r2, r0
    1734:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1736:	466a      	mov	r2, sp
    1738:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    173a:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    173c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    173e:	466b      	mov	r3, sp
    1740:	3304      	adds	r3, #4
    1742:	5ddf      	ldrb	r7, [r3, r7]
    1744:	4b52      	ldr	r3, [pc, #328]	; (1890 <tc_init+0x230>)
    1746:	0038      	movs	r0, r7
    1748:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    174a:	4b52      	ldr	r3, [pc, #328]	; (1894 <tc_init+0x234>)
    174c:	0038      	movs	r0, r7
    174e:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1750:	8923      	ldrh	r3, [r4, #8]
    1752:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    1754:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    1756:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    1758:	78a3      	ldrb	r3, [r4, #2]
    175a:	430b      	orrs	r3, r1
	ctrla_tmp =
    175c:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    175e:	7862      	ldrb	r2, [r4, #1]
    1760:	2a00      	cmp	r2, #0
    1762:	d002      	beq.n	176a <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1764:	2280      	movs	r2, #128	; 0x80
    1766:	0112      	lsls	r2, r2, #4
    1768:	4313      	orrs	r3, r2
    176a:	6829      	ldr	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    176c:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    176e:	b252      	sxtb	r2, r2
    1770:	2a00      	cmp	r2, #0
    1772:	dbfb      	blt.n	176c <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1774:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1776:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1778:	1e5a      	subs	r2, r3, #1
    177a:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    177c:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    177e:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    1780:	2a00      	cmp	r2, #0
    1782:	d001      	beq.n	1788 <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1784:	2201      	movs	r2, #1
    1786:	4313      	orrs	r3, r2
    1788:	6829      	ldr	r1, [r5, #0]
    178a:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    178c:	b252      	sxtb	r2, r2
    178e:	2a00      	cmp	r2, #0
    1790:	dbfb      	blt.n	178a <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1792:	22ff      	movs	r2, #255	; 0xff
    1794:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1796:	2b00      	cmp	r3, #0
    1798:	d005      	beq.n	17a6 <tc_init+0x146>
    179a:	6829      	ldr	r1, [r5, #0]
    179c:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    179e:	b252      	sxtb	r2, r2
    17a0:	2a00      	cmp	r2, #0
    17a2:	dbfb      	blt.n	179c <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    17a4:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    17a6:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    17a8:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    17aa:	2b00      	cmp	r3, #0
    17ac:	d001      	beq.n	17b2 <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    17ae:	2310      	movs	r3, #16
    17b0:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    17b2:	7b23      	ldrb	r3, [r4, #12]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d001      	beq.n	17bc <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    17b8:	2320      	movs	r3, #32
    17ba:	431a      	orrs	r2, r3
    17bc:	6829      	ldr	r1, [r5, #0]
    17be:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    17c0:	b25b      	sxtb	r3, r3
    17c2:	2b00      	cmp	r3, #0
    17c4:	dbfb      	blt.n	17be <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    17c6:	71b2      	strb	r2, [r6, #6]
    17c8:	682b      	ldr	r3, [r5, #0]
    17ca:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    17cc:	b252      	sxtb	r2, r2
    17ce:	2a00      	cmp	r2, #0
    17d0:	dbfb      	blt.n	17ca <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    17d2:	792a      	ldrb	r2, [r5, #4]
    17d4:	2a04      	cmp	r2, #4
    17d6:	d019      	beq.n	180c <tc_init+0x1ac>
    17d8:	2a08      	cmp	r2, #8
    17da:	d03c      	beq.n	1856 <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    17dc:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    17de:	2a00      	cmp	r2, #0
    17e0:	d137      	bne.n	1852 <tc_init+0x1f2>
    17e2:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    17e4:	b252      	sxtb	r2, r2
    17e6:	2a00      	cmp	r2, #0
    17e8:	dbfb      	blt.n	17e2 <tc_init+0x182>
				= config->counter_16_bit.value;
    17ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    17ec:	8233      	strh	r3, [r6, #16]
    17ee:	682a      	ldr	r2, [r5, #0]
    17f0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17f2:	b25b      	sxtb	r3, r3
    17f4:	2b00      	cmp	r3, #0
    17f6:	dbfb      	blt.n	17f0 <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    17f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    17fa:	8333      	strh	r3, [r6, #24]
    17fc:	682a      	ldr	r2, [r5, #0]
    17fe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1800:	b25b      	sxtb	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	dbfb      	blt.n	17fe <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    1806:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1808:	8373      	strh	r3, [r6, #26]
    180a:	e021      	b.n	1850 <tc_init+0x1f0>
    180c:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    180e:	b252      	sxtb	r2, r2
    1810:	2a00      	cmp	r2, #0
    1812:	dbfb      	blt.n	180c <tc_init+0x1ac>
					config->counter_8_bit.value;
    1814:	0023      	movs	r3, r4
    1816:	3328      	adds	r3, #40	; 0x28
    1818:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    181a:	7433      	strb	r3, [r6, #16]
    181c:	682a      	ldr	r2, [r5, #0]
    181e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1820:	b25b      	sxtb	r3, r3
    1822:	2b00      	cmp	r3, #0
    1824:	dbfb      	blt.n	181e <tc_init+0x1be>
					config->counter_8_bit.period;
    1826:	0023      	movs	r3, r4
    1828:	3329      	adds	r3, #41	; 0x29
    182a:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    182c:	7533      	strb	r3, [r6, #20]
    182e:	682a      	ldr	r2, [r5, #0]
    1830:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1832:	b25b      	sxtb	r3, r3
    1834:	2b00      	cmp	r3, #0
    1836:	dbfb      	blt.n	1830 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    1838:	0023      	movs	r3, r4
    183a:	332a      	adds	r3, #42	; 0x2a
    183c:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    183e:	7633      	strb	r3, [r6, #24]
    1840:	682a      	ldr	r2, [r5, #0]
    1842:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1844:	b25b      	sxtb	r3, r3
    1846:	2b00      	cmp	r3, #0
    1848:	dbfb      	blt.n	1842 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    184a:	342b      	adds	r4, #43	; 0x2b
    184c:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    184e:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    1850:	2000      	movs	r0, #0
}
    1852:	b005      	add	sp, #20
    1854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1856:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1858:	b252      	sxtb	r2, r2
    185a:	2a00      	cmp	r2, #0
    185c:	dbfb      	blt.n	1856 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    185e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1860:	6133      	str	r3, [r6, #16]
    1862:	682a      	ldr	r2, [r5, #0]
    1864:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1866:	b25b      	sxtb	r3, r3
    1868:	2b00      	cmp	r3, #0
    186a:	dbfb      	blt.n	1864 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    186c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    186e:	61b3      	str	r3, [r6, #24]
    1870:	682a      	ldr	r2, [r5, #0]
    1872:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1874:	b25b      	sxtb	r3, r3
    1876:	2b00      	cmp	r3, #0
    1878:	dbfb      	blt.n	1872 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    187a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    187c:	61f3      	str	r3, [r6, #28]
    187e:	e7e7      	b.n	1850 <tc_init+0x1f0>
    1880:	0000163d 	.word	0x0000163d
    1884:	2000017c 	.word	0x2000017c
    1888:	00001141 	.word	0x00001141
    188c:	40000400 	.word	0x40000400
    1890:	0000106d 	.word	0x0000106d
    1894:	00000fe5 	.word	0x00000fe5

00001898 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1898:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    189a:	6804      	ldr	r4, [r0, #0]
    189c:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    189e:	b25b      	sxtb	r3, r3
    18a0:	2b00      	cmp	r3, #0
    18a2:	dbfb      	blt.n	189c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    18a4:	7903      	ldrb	r3, [r0, #4]
    18a6:	2b04      	cmp	r3, #4
    18a8:	d00c      	beq.n	18c4 <tc_set_compare_value+0x2c>
    18aa:	2b08      	cmp	r3, #8
    18ac:	d012      	beq.n	18d4 <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    18ae:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    18b0:	2b00      	cmp	r3, #0
    18b2:	d10e      	bne.n	18d2 <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    18b4:	2017      	movs	r0, #23
			if (channel_index <
    18b6:	2901      	cmp	r1, #1
    18b8:	d80b      	bhi.n	18d2 <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    18ba:	310c      	adds	r1, #12
						(uint16_t)compare;
    18bc:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    18be:	0049      	lsls	r1, r1, #1
    18c0:	530a      	strh	r2, [r1, r4]
    18c2:	e005      	b.n	18d0 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    18c4:	2017      	movs	r0, #23
			if (channel_index <
    18c6:	2901      	cmp	r1, #1
    18c8:	d803      	bhi.n	18d2 <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    18ca:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    18cc:	1861      	adds	r1, r4, r1
    18ce:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    18d0:	2000      	movs	r0, #0
}
    18d2:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    18d4:	2017      	movs	r0, #23
			if (channel_index <
    18d6:	2901      	cmp	r1, #1
    18d8:	d8fb      	bhi.n	18d2 <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    18da:	3106      	adds	r1, #6
    18dc:	0089      	lsls	r1, r1, #2
    18de:	510a      	str	r2, [r1, r4]
    18e0:	e7f6      	b.n	18d0 <tc_set_compare_value+0x38>

000018e2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18e2:	e7fe      	b.n	18e2 <Dummy_Handler>

000018e4 <Reset_Handler>:
        if (pSrc != pDest) {
    18e4:	4821      	ldr	r0, [pc, #132]	; (196c <Reset_Handler+0x88>)
    18e6:	4922      	ldr	r1, [pc, #136]	; (1970 <Reset_Handler+0x8c>)
{
    18e8:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    18ea:	4288      	cmp	r0, r1
    18ec:	d004      	beq.n	18f8 <Reset_Handler+0x14>
    18ee:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    18f0:	4c20      	ldr	r4, [pc, #128]	; (1974 <Reset_Handler+0x90>)
    18f2:	18ca      	adds	r2, r1, r3
    18f4:	42a2      	cmp	r2, r4
    18f6:	d332      	bcc.n	195e <Reset_Handler+0x7a>
                *pDest++ = 0;
    18f8:	2100      	movs	r1, #0
    18fa:	4b1f      	ldr	r3, [pc, #124]	; (1978 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    18fc:	4a1f      	ldr	r2, [pc, #124]	; (197c <Reset_Handler+0x98>)
    18fe:	4293      	cmp	r3, r2
    1900:	d331      	bcc.n	1966 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1902:	21ff      	movs	r1, #255	; 0xff
    1904:	4b1e      	ldr	r3, [pc, #120]	; (1980 <Reset_Handler+0x9c>)
    1906:	4a1f      	ldr	r2, [pc, #124]	; (1984 <Reset_Handler+0xa0>)
    1908:	438b      	bics	r3, r1
    190a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    190c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    190e:	250c      	movs	r5, #12
    1910:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1912:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1914:	4b1c      	ldr	r3, [pc, #112]	; (1988 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1916:	481d      	ldr	r0, [pc, #116]	; (198c <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1918:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    191a:	78c3      	ldrb	r3, [r0, #3]
    191c:	39fc      	subs	r1, #252	; 0xfc
    191e:	438b      	bics	r3, r1
    1920:	4313      	orrs	r3, r2
    1922:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1924:	78c3      	ldrb	r3, [r0, #3]
    1926:	43ab      	bics	r3, r5
    1928:	4323      	orrs	r3, r4
    192a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    192c:	4b18      	ldr	r3, [pc, #96]	; (1990 <Reset_Handler+0xac>)
    192e:	7b98      	ldrb	r0, [r3, #14]
    1930:	43b0      	bics	r0, r6
    1932:	0006      	movs	r6, r0
    1934:	2020      	movs	r0, #32
    1936:	4330      	orrs	r0, r6
    1938:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    193a:	7b98      	ldrb	r0, [r3, #14]
    193c:	43a8      	bics	r0, r5
    193e:	4304      	orrs	r4, r0
    1940:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1942:	7b98      	ldrb	r0, [r3, #14]
    1944:	4388      	bics	r0, r1
    1946:	4302      	orrs	r2, r0
    1948:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    194a:	2380      	movs	r3, #128	; 0x80
    194c:	4a11      	ldr	r2, [pc, #68]	; (1994 <Reset_Handler+0xb0>)
    194e:	6851      	ldr	r1, [r2, #4]
    1950:	430b      	orrs	r3, r1
    1952:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1954:	4b10      	ldr	r3, [pc, #64]	; (1998 <Reset_Handler+0xb4>)
    1956:	4798      	blx	r3
        main();
    1958:	4b10      	ldr	r3, [pc, #64]	; (199c <Reset_Handler+0xb8>)
    195a:	4798      	blx	r3
    195c:	e7fe      	b.n	195c <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    195e:	58c5      	ldr	r5, [r0, r3]
    1960:	3304      	adds	r3, #4
    1962:	6015      	str	r5, [r2, #0]
    1964:	e7c5      	b.n	18f2 <Reset_Handler+0xe>
                *pDest++ = 0;
    1966:	c302      	stmia	r3!, {r1}
    1968:	e7c9      	b.n	18fe <Reset_Handler+0x1a>
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	00003cac 	.word	0x00003cac
    1970:	20000000 	.word	0x20000000
    1974:	2000001c 	.word	0x2000001c
    1978:	2000001c 	.word	0x2000001c
    197c:	200001e4 	.word	0x200001e4
    1980:	00000000 	.word	0x00000000
    1984:	e000ed00 	.word	0xe000ed00
    1988:	410070fc 	.word	0x410070fc
    198c:	41005000 	.word	0x41005000
    1990:	41004800 	.word	0x41004800
    1994:	41004000 	.word	0x41004000
    1998:	00003b75 	.word	0x00003b75
    199c:	00002165 	.word	0x00002165

000019a0 <reset_battery_charge_routine>:
	{
	}
	
}

void reset_battery_charge_routine(void){
    19a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a2:	b08b      	sub	sp, #44	; 0x2c
	//reset_chip();
	// Enable PWM GREEN
	struct i2c_master_packet packet = {
    19a4:	ad01      	add	r5, sp, #4
    19a6:	4e19      	ldr	r6, [pc, #100]	; (1a0c <reset_battery_charge_routine+0x6c>)
    19a8:	220c      	movs	r2, #12
    19aa:	2100      	movs	r1, #0
    19ac:	0028      	movs	r0, r5
    19ae:	47b0      	blx	r6
    19b0:	2302      	movs	r3, #2
    19b2:	2731      	movs	r7, #49	; 0x31
    19b4:	806b      	strh	r3, [r5, #2]
    19b6:	4b16      	ldr	r3, [pc, #88]	; (1a10 <reset_battery_charge_routine+0x70>)
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_green_PWM,
	};
	
	// Enable Ramp (flash)
	struct i2c_master_packet set_ramp = {
    19b8:	220c      	movs	r2, #12
    19ba:	2100      	movs	r1, #0
    19bc:	a804      	add	r0, sp, #16
	struct i2c_master_packet packet = {
    19be:	606b      	str	r3, [r5, #4]
    19c0:	802f      	strh	r7, [r5, #0]
	struct i2c_master_packet set_ramp = {
    19c2:	47b0      	blx	r6
    19c4:	466b      	mov	r3, sp
    19c6:	2202      	movs	r2, #2
		.data = buffer_reset_charge_routine_flash_period,
	};
	

	// Enable Pulse
	struct i2c_master_packet set_trise_tfall = {
    19c8:	ac07      	add	r4, sp, #28
	struct i2c_master_packet set_ramp = {
    19ca:	825a      	strh	r2, [r3, #18]
    19cc:	821f      	strh	r7, [r3, #16]
    19ce:	4b11      	ldr	r3, [pc, #68]	; (1a14 <reset_battery_charge_routine+0x74>)
	struct i2c_master_packet set_trise_tfall = {
    19d0:	220c      	movs	r2, #12
    19d2:	2100      	movs	r1, #0
    19d4:	0020      	movs	r0, r4
	struct i2c_master_packet set_ramp = {
    19d6:	9305      	str	r3, [sp, #20]
	struct i2c_master_packet set_trise_tfall = {
    19d8:	47b0      	blx	r6
    19da:	2302      	movs	r3, #2
    19dc:	8063      	strh	r3, [r4, #2]
    19de:	4b0e      	ldr	r3, [pc, #56]	; (1a18 <reset_battery_charge_routine+0x78>)
    19e0:	8027      	strh	r7, [r4, #0]
    19e2:	6063      	str	r3, [r4, #4]
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_reset_charge_routine_trise_tfall,
	};


	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    19e4:	4f0d      	ldr	r7, [pc, #52]	; (1a1c <reset_battery_charge_routine+0x7c>)
    19e6:	0029      	movs	r1, r5
    19e8:	0038      	movs	r0, r7
    19ea:	4e0d      	ldr	r6, [pc, #52]	; (1a20 <reset_battery_charge_routine+0x80>)
    19ec:	47b0      	blx	r6
    19ee:	2800      	cmp	r0, #0
    19f0:	d1f8      	bne.n	19e4 <reset_battery_charge_routine+0x44>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_ramp)) != STATUS_OK)
    19f2:	a904      	add	r1, sp, #16
    19f4:	0038      	movs	r0, r7
    19f6:	47b0      	blx	r6
    19f8:	2800      	cmp	r0, #0
    19fa:	d1fa      	bne.n	19f2 <reset_battery_charge_routine+0x52>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_trise_tfall)) != STATUS_OK)
    19fc:	0021      	movs	r1, r4
    19fe:	0038      	movs	r0, r7
    1a00:	47b0      	blx	r6
    1a02:	2800      	cmp	r0, #0
    1a04:	d1fa      	bne.n	19fc <reset_battery_charge_routine+0x5c>
	{
	}
	
}
    1a06:	b00b      	add	sp, #44	; 0x2c
    1a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	00003bbd 	.word	0x00003bbd
    1a10:	2000000b 	.word	0x2000000b
    1a14:	20000001 	.word	0x20000001
    1a18:	20000003 	.word	0x20000003
    1a1c:	20000184 	.word	0x20000184
    1a20:	00000661 	.word	0x00000661

00001a24 <set_color_yellow>:
void set_color_yellow(void){
    1a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		reset_battery_charge_routine();
    1a26:	4b0a      	ldr	r3, [pc, #40]	; (1a50 <set_color_yellow+0x2c>)
	struct i2c_master_packet packet = {
    1a28:	ac01      	add	r4, sp, #4
		reset_battery_charge_routine();
    1a2a:	4798      	blx	r3
	struct i2c_master_packet packet = {
    1a2c:	4b09      	ldr	r3, [pc, #36]	; (1a54 <set_color_yellow+0x30>)
    1a2e:	220c      	movs	r2, #12
    1a30:	2100      	movs	r1, #0
    1a32:	0020      	movs	r0, r4
    1a34:	4798      	blx	r3
    1a36:	2331      	movs	r3, #49	; 0x31
    1a38:	8023      	strh	r3, [r4, #0]
    1a3a:	3b2f      	subs	r3, #47	; 0x2f
    1a3c:	8063      	strh	r3, [r4, #2]
    1a3e:	4b06      	ldr	r3, [pc, #24]	; (1a58 <set_color_yellow+0x34>)
    1a40:	6063      	str	r3, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1a42:	0021      	movs	r1, r4
    1a44:	4805      	ldr	r0, [pc, #20]	; (1a5c <set_color_yellow+0x38>)
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <set_color_yellow+0x3c>)
    1a48:	4798      	blx	r3
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d1f9      	bne.n	1a42 <set_color_yellow+0x1e>
}
    1a4e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1a50:	000019a1 	.word	0x000019a1
    1a54:	00003bbd 	.word	0x00003bbd
    1a58:	2000000f 	.word	0x2000000f
    1a5c:	20000184 	.word	0x20000184
    1a60:	00000661 	.word	0x00000661

00001a64 <set_color_purple>:
void set_color_purple(void){
    1a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		reset_battery_charge_routine();
    1a66:	4b0a      	ldr	r3, [pc, #40]	; (1a90 <set_color_purple+0x2c>)
	struct i2c_master_packet packet = {
    1a68:	ac01      	add	r4, sp, #4
		reset_battery_charge_routine();
    1a6a:	4798      	blx	r3
	struct i2c_master_packet packet = {
    1a6c:	4b09      	ldr	r3, [pc, #36]	; (1a94 <set_color_purple+0x30>)
    1a6e:	220c      	movs	r2, #12
    1a70:	2100      	movs	r1, #0
    1a72:	0020      	movs	r0, r4
    1a74:	4798      	blx	r3
    1a76:	2331      	movs	r3, #49	; 0x31
    1a78:	8023      	strh	r3, [r4, #0]
    1a7a:	3b2f      	subs	r3, #47	; 0x2f
    1a7c:	8063      	strh	r3, [r4, #2]
    1a7e:	4b06      	ldr	r3, [pc, #24]	; (1a98 <set_color_purple+0x34>)
    1a80:	6063      	str	r3, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1a82:	0021      	movs	r1, r4
    1a84:	4805      	ldr	r0, [pc, #20]	; (1a9c <set_color_purple+0x38>)
    1a86:	4b06      	ldr	r3, [pc, #24]	; (1aa0 <set_color_purple+0x3c>)
    1a88:	4798      	blx	r3
    1a8a:	2800      	cmp	r0, #0
    1a8c:	d1f9      	bne.n	1a82 <set_color_purple+0x1e>
}
    1a8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1a90:	000019a1 	.word	0x000019a1
    1a94:	00003bbd 	.word	0x00003bbd
    1a98:	2000000d 	.word	0x2000000d
    1a9c:	20000184 	.word	0x20000184
    1aa0:	00000661 	.word	0x00000661

00001aa4 <set_color_cyan>:
void set_color_cyan(void){
    1aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		reset_battery_charge_routine();
    1aa6:	4b0a      	ldr	r3, [pc, #40]	; (1ad0 <set_color_cyan+0x2c>)
	struct i2c_master_packet packet = {
    1aa8:	ac01      	add	r4, sp, #4
		reset_battery_charge_routine();
    1aaa:	4798      	blx	r3
	struct i2c_master_packet packet = {
    1aac:	4b09      	ldr	r3, [pc, #36]	; (1ad4 <set_color_cyan+0x30>)
    1aae:	220c      	movs	r2, #12
    1ab0:	2100      	movs	r1, #0
    1ab2:	0020      	movs	r0, r4
    1ab4:	4798      	blx	r3
    1ab6:	2331      	movs	r3, #49	; 0x31
    1ab8:	8023      	strh	r3, [r4, #0]
    1aba:	3b2f      	subs	r3, #47	; 0x2f
    1abc:	8063      	strh	r3, [r4, #2]
    1abe:	4b06      	ldr	r3, [pc, #24]	; (1ad8 <set_color_cyan+0x34>)
    1ac0:	6063      	str	r3, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1ac2:	0021      	movs	r1, r4
    1ac4:	4805      	ldr	r0, [pc, #20]	; (1adc <set_color_cyan+0x38>)
    1ac6:	4b06      	ldr	r3, [pc, #24]	; (1ae0 <set_color_cyan+0x3c>)
    1ac8:	4798      	blx	r3
    1aca:	2800      	cmp	r0, #0
    1acc:	d1f9      	bne.n	1ac2 <set_color_cyan+0x1e>
}
    1ace:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1ad0:	000019a1 	.word	0x000019a1
    1ad4:	00003bbd 	.word	0x00003bbd
    1ad8:	20000009 	.word	0x20000009
    1adc:	20000184 	.word	0x20000184
    1ae0:	00000661 	.word	0x00000661

00001ae4 <set_battery_charge_routine>:
void set_battery_charge_routine(void){
    1ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ae6:	b08b      	sub	sp, #44	; 0x2c
	struct i2c_master_packet packet = {
    1ae8:	ad01      	add	r5, sp, #4
		reset_battery_charge_routine();
    1aea:	4b1a      	ldr	r3, [pc, #104]	; (1b54 <set_battery_charge_routine+0x70>)
    1aec:	4798      	blx	r3
	struct i2c_master_packet packet = {
    1aee:	4e1a      	ldr	r6, [pc, #104]	; (1b58 <set_battery_charge_routine+0x74>)
    1af0:	220c      	movs	r2, #12
    1af2:	2100      	movs	r1, #0
    1af4:	0028      	movs	r0, r5
    1af6:	47b0      	blx	r6
    1af8:	2302      	movs	r3, #2
    1afa:	2731      	movs	r7, #49	; 0x31
    1afc:	806b      	strh	r3, [r5, #2]
    1afe:	4b17      	ldr	r3, [pc, #92]	; (1b5c <set_battery_charge_routine+0x78>)
	struct i2c_master_packet set_ramp = {
    1b00:	220c      	movs	r2, #12
    1b02:	2100      	movs	r1, #0
    1b04:	a804      	add	r0, sp, #16
	struct i2c_master_packet packet = {
    1b06:	606b      	str	r3, [r5, #4]
    1b08:	802f      	strh	r7, [r5, #0]
	struct i2c_master_packet set_ramp = {
    1b0a:	47b0      	blx	r6
    1b0c:	466b      	mov	r3, sp
    1b0e:	2202      	movs	r2, #2
	struct i2c_master_packet set_trise_tfall = {
    1b10:	ac07      	add	r4, sp, #28
	struct i2c_master_packet set_ramp = {
    1b12:	825a      	strh	r2, [r3, #18]
    1b14:	821f      	strh	r7, [r3, #16]
    1b16:	4b12      	ldr	r3, [pc, #72]	; (1b60 <set_battery_charge_routine+0x7c>)
	struct i2c_master_packet set_trise_tfall = {
    1b18:	220c      	movs	r2, #12
    1b1a:	2100      	movs	r1, #0
    1b1c:	0020      	movs	r0, r4
	struct i2c_master_packet set_ramp = {
    1b1e:	9305      	str	r3, [sp, #20]
	struct i2c_master_packet set_trise_tfall = {
    1b20:	47b0      	blx	r6
    1b22:	2302      	movs	r3, #2
    1b24:	8063      	strh	r3, [r4, #2]
    1b26:	4b0f      	ldr	r3, [pc, #60]	; (1b64 <set_battery_charge_routine+0x80>)
    1b28:	8027      	strh	r7, [r4, #0]
    1b2a:	6063      	str	r3, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1b2c:	4f0e      	ldr	r7, [pc, #56]	; (1b68 <set_battery_charge_routine+0x84>)
    1b2e:	0029      	movs	r1, r5
    1b30:	0038      	movs	r0, r7
    1b32:	4e0e      	ldr	r6, [pc, #56]	; (1b6c <set_battery_charge_routine+0x88>)
    1b34:	47b0      	blx	r6
    1b36:	2800      	cmp	r0, #0
    1b38:	d1f8      	bne.n	1b2c <set_battery_charge_routine+0x48>
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_ramp)) != STATUS_OK)
    1b3a:	a904      	add	r1, sp, #16
    1b3c:	0038      	movs	r0, r7
    1b3e:	47b0      	blx	r6
    1b40:	2800      	cmp	r0, #0
    1b42:	d1fa      	bne.n	1b3a <set_battery_charge_routine+0x56>
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_trise_tfall)) != STATUS_OK)
    1b44:	0021      	movs	r1, r4
    1b46:	0038      	movs	r0, r7
    1b48:	47b0      	blx	r6
    1b4a:	2800      	cmp	r0, #0
    1b4c:	d1fa      	bne.n	1b44 <set_battery_charge_routine+0x60>
}
    1b4e:	b00b      	add	sp, #44	; 0x2c
    1b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	000019a1 	.word	0x000019a1
    1b58:	00003bbd 	.word	0x00003bbd
    1b5c:	2000000b 	.word	0x2000000b
    1b60:	20000005 	.word	0x20000005
    1b64:	20000007 	.word	0x20000007
    1b68:	20000184 	.word	0x20000184
    1b6c:	00000661 	.word	0x00000661

00001b70 <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1b70:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1b72:	2364      	movs	r3, #100	; 0x64
	
}



void i2c_master_setup(void){
    1b74:	b570      	push	{r4, r5, r6, lr}
    1b76:	b08e      	sub	sp, #56	; 0x38
    1b78:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1b7a:	0389      	lsls	r1, r1, #14
    1b7c:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1b7e:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1b80:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1b82:	4b1e      	ldr	r3, [pc, #120]	; (1bfc <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    1b84:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1b86:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1b88:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    1b8a:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1b8c:	310a      	adds	r1, #10
    1b8e:	4469      	add	r1, sp
    1b90:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1b92:	a90c      	add	r1, sp, #48	; 0x30
    1b94:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1b96:	2131      	movs	r1, #49	; 0x31
    1b98:	4469      	add	r1, sp
    1b9a:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    1b9c:	2132      	movs	r1, #50	; 0x32
    1b9e:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1ba0:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    1ba2:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1ba4:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1ba6:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1ba8:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1baa:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    1bac:	700b      	strb	r3, [r1, #0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1bae:	33d7      	adds	r3, #215	; 0xd7
    1bb0:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1bb2:	4e13      	ldr	r6, [pc, #76]	; (1c00 <i2c_master_setup+0x90>)
	config_i2c_master.buffer_timeout = 10000;
    1bb4:	4b13      	ldr	r3, [pc, #76]	; (1c04 <i2c_master_setup+0x94>)
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1bb6:	4914      	ldr	r1, [pc, #80]	; (1c08 <i2c_master_setup+0x98>)
	config_i2c_master.buffer_timeout = 10000;
    1bb8:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1bba:	0030      	movs	r0, r6
    1bbc:	4b13      	ldr	r3, [pc, #76]	; (1c0c <i2c_master_setup+0x9c>)
    1bbe:	4798      	blx	r3
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1bc0:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1bc2:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1bc4:	69ec      	ldr	r4, [r5, #28]
    1bc6:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    1bc8:	d1fc      	bne.n	1bc4 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1bca:	2302      	movs	r3, #2
    1bcc:	682a      	ldr	r2, [r5, #0]
    1bce:	4313      	orrs	r3, r2
    1bd0:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1bd2:	6830      	ldr	r0, [r6, #0]
    1bd4:	4b0e      	ldr	r3, [pc, #56]	; (1c10 <i2c_master_setup+0xa0>)
    1bd6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1bd8:	231f      	movs	r3, #31
    1bda:	4018      	ands	r0, r3
    1bdc:	3b1e      	subs	r3, #30
    1bde:	4083      	lsls	r3, r0
    1be0:	4a0c      	ldr	r2, [pc, #48]	; (1c14 <i2c_master_setup+0xa4>)
    1be2:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1be4:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1be6:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1be8:	8b69      	ldrh	r1, [r5, #26]
    1bea:	4211      	tst	r1, r2
    1bec:	d103      	bne.n	1bf6 <i2c_master_setup+0x86>
		timeout_counter++;
    1bee:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1bf0:	4284      	cmp	r4, r0
    1bf2:	d3f9      	bcc.n	1be8 <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1bf4:	836a      	strh	r2, [r5, #26]
	i2c_master_enable(&i2c_master_instance);
	
}
    1bf6:	b00e      	add	sp, #56	; 0x38
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	00000d48 	.word	0x00000d48
    1c00:	20000184 	.word	0x20000184
    1c04:	00002710 	.word	0x00002710
    1c08:	42001000 	.word	0x42001000
    1c0c:	0000024d 	.word	0x0000024d
    1c10:	00000a31 	.word	0x00000a31
    1c14:	e000e100 	.word	0xe000e100

00001c18 <sys_tc_callback>:
	static int tick_count_50ms;
	static int tick_count_100ms;
	static int tick_count_200ms;
	
	
	tick_count_1ms++;
    1c18:	4916      	ldr	r1, [pc, #88]	; (1c74 <sys_tc_callback+0x5c>)
    1c1a:	680b      	ldr	r3, [r1, #0]
    1c1c:	1c5a      	adds	r2, r3, #1
    1c1e:	600a      	str	r2, [r1, #0]
    1c20:	4b15      	ldr	r3, [pc, #84]	; (1c78 <sys_tc_callback+0x60>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
    1c22:	2a09      	cmp	r2, #9
    1c24:	dd07      	ble.n	1c36 <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
    1c26:	681a      	ldr	r2, [r3, #0]
    1c28:	3201      	adds	r2, #1
    1c2a:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
    1c2c:	2200      	movs	r2, #0
    1c2e:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
    1c30:	2101      	movs	r1, #1
    1c32:	4a12      	ldr	r2, [pc, #72]	; (1c7c <sys_tc_callback+0x64>)
    1c34:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
    1c36:	6819      	ldr	r1, [r3, #0]
    1c38:	4a11      	ldr	r2, [pc, #68]	; (1c80 <sys_tc_callback+0x68>)
    1c3a:	2904      	cmp	r1, #4
    1c3c:	dd04      	ble.n	1c48 <sys_tc_callback+0x30>
	{
		tick_count_50ms++;
    1c3e:	6811      	ldr	r1, [r2, #0]
    1c40:	3101      	adds	r1, #1
    1c42:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
    1c44:	2100      	movs	r1, #0
    1c46:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
    1c48:	6811      	ldr	r1, [r2, #0]
    1c4a:	4b0e      	ldr	r3, [pc, #56]	; (1c84 <sys_tc_callback+0x6c>)
    1c4c:	2901      	cmp	r1, #1
    1c4e:	dd04      	ble.n	1c5a <sys_tc_callback+0x42>
	{
		tick_count_100ms++;
    1c50:	6819      	ldr	r1, [r3, #0]
    1c52:	3101      	adds	r1, #1
    1c54:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
    1c56:	2100      	movs	r1, #0
    1c58:	6011      	str	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
    1c5a:	681a      	ldr	r2, [r3, #0]
    1c5c:	2a01      	cmp	r2, #1
    1c5e:	dd08      	ble.n	1c72 <sys_tc_callback+0x5a>
	{
		tick_count_200ms++;
    1c60:	4909      	ldr	r1, [pc, #36]	; (1c88 <sys_tc_callback+0x70>)
    1c62:	680a      	ldr	r2, [r1, #0]
    1c64:	3201      	adds	r2, #1
    1c66:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
    1c68:	2200      	movs	r2, #0
    1c6a:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
    1c6c:	4b07      	ldr	r3, [pc, #28]	; (1c8c <sys_tc_callback+0x74>)
    1c6e:	3201      	adds	r2, #1
    1c70:	701a      	strb	r2, [r3, #0]
	}
	
	
	
	
}
    1c72:	4770      	bx	lr
    1c74:	20000078 	.word	0x20000078
    1c78:	20000074 	.word	0x20000074
    1c7c:	2000006c 	.word	0x2000006c
    1c80:	20000080 	.word	0x20000080
    1c84:	20000070 	.word	0x20000070
    1c88:	2000007c 	.word	0x2000007c
    1c8c:	2000006d 	.word	0x2000006d

00001c90 <configure_port_pins>:
{
    1c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1c92:	2602      	movs	r6, #2
	config->direction  = PORT_PIN_DIR_INPUT;
    1c94:	2700      	movs	r7, #0
    1c96:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1c98:	4d12      	ldr	r5, [pc, #72]	; (1ce4 <configure_port_pins+0x54>)
    1c9a:	0021      	movs	r1, r4
    1c9c:	201b      	movs	r0, #27
    1c9e:	7027      	strb	r7, [r4, #0]
	config->powersave  = false;
    1ca0:	70a7      	strb	r7, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1ca2:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1ca4:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1ca6:	2301      	movs	r3, #1
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1ca8:	0021      	movs	r1, r4
    1caa:	2006      	movs	r0, #6
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1cac:	7023      	strb	r3, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;						// START AT PULL DOWN.
    1cae:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1cb0:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1cb2:	2301      	movs	r3, #1
    1cb4:	7023      	strb	r3, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL UP.
    1cb6:	2301      	movs	r3, #1
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
    1cb8:	0021      	movs	r1, r4
    1cba:	2007      	movs	r0, #7
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL UP.
    1cbc:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
    1cbe:	47a8      	blx	r5
	port_pin_set_config(BUTTON_2, &config_port_pin);
    1cc0:	0021      	movs	r1, r4
    1cc2:	200f      	movs	r0, #15
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1cc4:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1cc6:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
    1cc8:	47a8      	blx	r5
	port_pin_set_config(CHARGN_ON_PIN, &config_port_pin);
    1cca:	0021      	movs	r1, r4
    1ccc:	200b      	movs	r0, #11
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1cce:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1cd0:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CHARGN_ON_PIN, &config_port_pin);
    1cd2:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1cd4:	2301      	movs	r3, #1
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
    1cd6:	0021      	movs	r1, r4
    1cd8:	2003      	movs	r0, #3
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1cda:	7066      	strb	r6, [r4, #1]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1cdc:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
    1cde:	47a8      	blx	r5
}
    1ce0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	00000221 	.word	0x00000221

00001ce8 <configure_system_tc>:
{
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);
	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1ce8:	21a0      	movs	r1, #160	; 0xa0
{
    1cea:	b510      	push	{r4, lr}
    1cec:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1cee:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1cf0:	00c9      	lsls	r1, r1, #3
    1cf2:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
    1cf4:	212d      	movs	r1, #45	; 0x2d
    1cf6:	2300      	movs	r3, #0
    1cf8:	206f      	movs	r0, #111	; 0x6f
    1cfa:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    1cfc:	8513      	strh	r3, [r2, #40]	; 0x28
    1cfe:	7008      	strb	r0, [r1, #0]
	
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1d00:	2101      	movs	r1, #1
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
	
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1d02:	4c12      	ldr	r4, [pc, #72]	; (1d4c <configure_system_tc+0x64>)
	config->clock_source               = GCLK_GENERATOR_0;
    1d04:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1d06:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1d08:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1d0a:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1d0c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1d0e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1d10:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1d12:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1d14:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1d16:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1d18:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1d1a:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1d1c:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1d1e:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1d20:	7411      	strb	r1, [r2, #16]
	config_tc.counter_size = TC_COUNTER_SIZE;
    1d22:	3304      	adds	r3, #4
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
    1d24:	310f      	adds	r1, #15
	config_tc.counter_size = TC_COUNTER_SIZE;
    1d26:	7093      	strb	r3, [r2, #2]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
    1d28:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
    1d2a:	6193      	str	r3, [r2, #24]
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1d2c:	4908      	ldr	r1, [pc, #32]	; (1d50 <configure_system_tc+0x68>)
    1d2e:	4b09      	ldr	r3, [pc, #36]	; (1d54 <configure_system_tc+0x6c>)
    1d30:	0020      	movs	r0, r4
    1d32:	4798      	blx	r3
    1d34:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d36:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1d38:	b252      	sxtb	r2, r2
    1d3a:	2a00      	cmp	r2, #0
    1d3c:	dbfb      	blt.n	1d36 <configure_system_tc+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1d3e:	2202      	movs	r2, #2
    1d40:	8819      	ldrh	r1, [r3, #0]
    1d42:	430a      	orrs	r2, r1
    1d44:	801a      	strh	r2, [r3, #0]
	tc_enable (&system_timer_instance);
}
    1d46:	b00e      	add	sp, #56	; 0x38
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	200001ac 	.word	0x200001ac
    1d50:	42001800 	.word	0x42001800
    1d54:	00001661 	.word	0x00001661

00001d58 <system_tc_callbacks>:

void system_tc_callbacks (void)
{
    1d58:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
    1d5a:	4c0c      	ldr	r4, [pc, #48]	; (1d8c <system_tc_callbacks+0x34>)
    1d5c:	2200      	movs	r2, #0
    1d5e:	490c      	ldr	r1, [pc, #48]	; (1d90 <system_tc_callbacks+0x38>)
    1d60:	0020      	movs	r0, r4
    1d62:	4b0c      	ldr	r3, [pc, #48]	; (1d94 <system_tc_callbacks+0x3c>)
    1d64:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1d66:	6820      	ldr	r0, [r4, #0]
    1d68:	4b0b      	ldr	r3, [pc, #44]	; (1d98 <system_tc_callbacks+0x40>)
    1d6a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1d6c:	4b0b      	ldr	r3, [pc, #44]	; (1d9c <system_tc_callbacks+0x44>)
    1d6e:	5c1a      	ldrb	r2, [r3, r0]
    1d70:	231f      	movs	r3, #31
    1d72:	401a      	ands	r2, r3
    1d74:	3b1e      	subs	r3, #30
    1d76:	0019      	movs	r1, r3
    1d78:	4091      	lsls	r1, r2
    1d7a:	4a09      	ldr	r2, [pc, #36]	; (1da0 <system_tc_callbacks+0x48>)
    1d7c:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1d7e:	7e62      	ldrb	r2, [r4, #25]
    1d80:	431a      	orrs	r2, r3
    1d82:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1d84:	6822      	ldr	r2, [r4, #0]
    1d86:	7353      	strb	r3, [r2, #13]
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback (&system_timer_instance, TC_CALLBACK_OVERFLOW);
}
    1d88:	bd10      	pop	{r4, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	200001ac 	.word	0x200001ac
    1d90:	00001c19 	.word	0x00001c19
    1d94:	00001599 	.word	0x00001599
    1d98:	0000163d 	.word	0x0000163d
    1d9c:	00003c08 	.word	0x00003c08
    1da0:	e000e100 	.word	0xe000e100

00001da4 <is_button_pressed>:
	return (port_base->IN.reg & pin_mask);
    1da4:	4b12      	ldr	r3, [pc, #72]	; (1df0 <is_button_pressed+0x4c>)
    1da6:	4a13      	ldr	r2, [pc, #76]	; (1df4 <is_button_pressed+0x50>)
    1da8:	6a19      	ldr	r1, [r3, #32]
    1daa:	4b13      	ldr	r3, [pc, #76]	; (1df8 <is_button_pressed+0x54>)


bool is_button_pressed (void)
{

	if (!port_pin_get_input_level (PIN_PA15))
    1dac:	0409      	lsls	r1, r1, #16
    1dae:	d416      	bmi.n	1dde <is_button_pressed+0x3a>
	{
		BUTTON_PRESS_STATUS = true;
		press_delay_count--;
    1db0:	6819      	ldr	r1, [r3, #0]
    1db2:	3901      	subs	r1, #1
    1db4:	6019      	str	r1, [r3, #0]
		long_press_delay_count--;
    1db6:	6811      	ldr	r1, [r2, #0]
    1db8:	3901      	subs	r1, #1
		
	}else
	{
		BUTTON_PRESS_STATUS = false;
		press_delay_count = DELAY_DEBOUNCE_CN;
		long_press_delay_count = DELAY_PRESS_CN;
    1dba:	6011      	str	r1, [r2, #0]
		
	}
	
	// long press delay logic
	if (long_press_delay_count <= 0){
    1dbc:	6811      	ldr	r1, [r2, #0]
    1dbe:	2900      	cmp	r1, #0
    1dc0:	dc04      	bgt.n	1dcc <is_button_pressed+0x28>
		LongPressFlag = true;
    1dc2:	2001      	movs	r0, #1
    1dc4:	490d      	ldr	r1, [pc, #52]	; (1dfc <is_button_pressed+0x58>)
    1dc6:	7008      	strb	r0, [r1, #0]
		long_press_delay_count = 0 ;
    1dc8:	2100      	movs	r1, #0
    1dca:	6011      	str	r1, [r2, #0]
    1dcc:	2000      	movs	r0, #0
	}
	
	// debounce logic
	if (press_delay_count <= 0)
    1dce:	6819      	ldr	r1, [r3, #0]
    1dd0:	4a0b      	ldr	r2, [pc, #44]	; (1e00 <is_button_pressed+0x5c>)
    1dd2:	4281      	cmp	r1, r0
    1dd4:	dc08      	bgt.n	1de8 <is_button_pressed+0x44>
	{
		BUTTON_RELEASE_STATUS = false;
    1dd6:	7010      	strb	r0, [r2, #0]
		press_delay_count = 0;
    1dd8:	6018      	str	r0, [r3, #0]
		return true;
    1dda:	3001      	adds	r0, #1
	else
	{
		BUTTON_RELEASE_STATUS = true;
		return false;
	}
}
    1ddc:	4770      	bx	lr
		press_delay_count = DELAY_DEBOUNCE_CN;
    1dde:	2102      	movs	r1, #2
    1de0:	6019      	str	r1, [r3, #0]
		long_press_delay_count = DELAY_PRESS_CN;
    1de2:	318f      	adds	r1, #143	; 0x8f
    1de4:	31ff      	adds	r1, #255	; 0xff
    1de6:	e7e8      	b.n	1dba <is_button_pressed+0x16>
		BUTTON_RELEASE_STATUS = true;
    1de8:	2301      	movs	r3, #1
    1dea:	7013      	strb	r3, [r2, #0]
		return false;
    1dec:	e7f6      	b.n	1ddc <is_button_pressed+0x38>
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	41004400 	.word	0x41004400
    1df4:	20000014 	.word	0x20000014
    1df8:	20000018 	.word	0x20000018
    1dfc:	20000068 	.word	0x20000068
    1e00:	20000066 	.word	0x20000066

00001e04 <pwm_motor_cleanup>:



void pwm_motor_cleanup(void);

void pwm_motor_cleanup(void){
    1e04:	b570      	push	{r4, r5, r6, lr}
	PULSATING_MOTOR_ROUTINE = false;
    1e06:	2400      	movs	r4, #0
    1e08:	4b0d      	ldr	r3, [pc, #52]	; (1e40 <pwm_motor_cleanup+0x3c>)
	toggle_count = 0;
	tc_set_compare_value (&pwm_generator_instance,
    1e0a:	4d0e      	ldr	r5, [pc, #56]	; (1e44 <pwm_motor_cleanup+0x40>)
	PULSATING_MOTOR_ROUTINE = false;
    1e0c:	701c      	strb	r4, [r3, #0]
	toggle_count = 0;
    1e0e:	4b0e      	ldr	r3, [pc, #56]	; (1e48 <pwm_motor_cleanup+0x44>)
	tc_set_compare_value (&pwm_generator_instance,
    1e10:	2215      	movs	r2, #21
	toggle_count = 0;
    1e12:	701c      	strb	r4, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,
    1e14:	0021      	movs	r1, r4
    1e16:	4b0d      	ldr	r3, [pc, #52]	; (1e4c <pwm_motor_cleanup+0x48>)
    1e18:	0028      	movs	r0, r5
    1e1a:	4798      	blx	r3
	TC_COMPARE_CAPTURE_CHANNEL_0,
	INITIAL_DUTY_CYCLE);
	PWM_RUNNING = false;
    1e1c:	4b0c      	ldr	r3, [pc, #48]	; (1e50 <pwm_motor_cleanup+0x4c>)
    1e1e:	701c      	strb	r4, [r3, #0]
    1e20:	682b      	ldr	r3, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e22:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1e24:	b252      	sxtb	r2, r2
    1e26:	2a00      	cmp	r2, #0
    1e28:	dbfb      	blt.n	1e22 <pwm_motor_cleanup+0x1e>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1e2a:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1e2c:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1e2e:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    1e30:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1e32:	881a      	ldrh	r2, [r3, #0]
    1e34:	438a      	bics	r2, r1
    1e36:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e38:	2240      	movs	r2, #64	; 0x40
    1e3a:	4b06      	ldr	r3, [pc, #24]	; (1e54 <pwm_motor_cleanup+0x50>)
    1e3c:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
    1e3e:	bd70      	pop	{r4, r5, r6, pc}
    1e40:	2000006a 	.word	0x2000006a
    1e44:	200001c8 	.word	0x200001c8
    1e48:	20000084 	.word	0x20000084
    1e4c:	00001899 	.word	0x00001899
    1e50:	2000006b 	.word	0x2000006b
    1e54:	41004400 	.word	0x41004400

00001e58 <cycle_pwm_duty>:




void cycle_pwm_duty (void)
{
    1e58:	b510      	push	{r4, lr}
	if (PWM_RUNNING)
    1e5a:	4b15      	ldr	r3, [pc, #84]	; (1eb0 <cycle_pwm_duty+0x58>)
    1e5c:	781b      	ldrb	r3, [r3, #0]
    1e5e:	2b00      	cmp	r3, #0
    1e60:	d00a      	beq.n	1e78 <cycle_pwm_duty+0x20>
	{
		
		if (toggle_count == 2)
    1e62:	4b14      	ldr	r3, [pc, #80]	; (1eb4 <cycle_pwm_duty+0x5c>)
    1e64:	781b      	ldrb	r3, [r3, #0]
    1e66:	2b02      	cmp	r3, #2
    1e68:	d107      	bne.n	1e7a <cycle_pwm_duty+0x22>
		{
			tc_set_compare_value (&pwm_generator_instance,
    1e6a:	4b13      	ldr	r3, [pc, #76]	; (1eb8 <cycle_pwm_duty+0x60>)
    1e6c:	2222      	movs	r2, #34	; 0x22
    1e6e:	2100      	movs	r1, #0
    1e70:	4812      	ldr	r0, [pc, #72]	; (1ebc <cycle_pwm_duty+0x64>)
    1e72:	4798      	blx	r3
			TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
			
			set_color_purple();
    1e74:	4b12      	ldr	r3, [pc, #72]	; (1ec0 <cycle_pwm_duty+0x68>)
		{
			tc_set_compare_value (&pwm_generator_instance,
			TC_COMPARE_CAPTURE_CHANNEL_0,
			SECOND_DUTY_CYCLE);	
			
			set_color_cyan();
    1e76:	4798      	blx	r3
		else if (toggle_count > 4)
		{
			pwm_motor_cleanup();
		}
	}
}
    1e78:	bd10      	pop	{r4, pc}
		else if (toggle_count == 3)
    1e7a:	2b03      	cmp	r3, #3
    1e7c:	d106      	bne.n	1e8c <cycle_pwm_duty+0x34>
			tc_set_compare_value (&pwm_generator_instance,
    1e7e:	4b0e      	ldr	r3, [pc, #56]	; (1eb8 <cycle_pwm_duty+0x60>)
    1e80:	224d      	movs	r2, #77	; 0x4d
    1e82:	2100      	movs	r1, #0
    1e84:	480d      	ldr	r0, [pc, #52]	; (1ebc <cycle_pwm_duty+0x64>)
    1e86:	4798      	blx	r3
			set_color_cyan();
    1e88:	4b0e      	ldr	r3, [pc, #56]	; (1ec4 <cycle_pwm_duty+0x6c>)
    1e8a:	e7f4      	b.n	1e76 <cycle_pwm_duty+0x1e>
		else if (toggle_count == 4)
    1e8c:	2b04      	cmp	r3, #4
    1e8e:	d109      	bne.n	1ea4 <cycle_pwm_duty+0x4c>
			PULSATING_MOTOR_ROUTINE = true;
    1e90:	2201      	movs	r2, #1
    1e92:	4b0d      	ldr	r3, [pc, #52]	; (1ec8 <cycle_pwm_duty+0x70>)
			tc_set_compare_value (&pwm_generator_instance,
    1e94:	2100      	movs	r1, #0
			PULSATING_MOTOR_ROUTINE = true;
    1e96:	701a      	strb	r2, [r3, #0]
			tc_set_compare_value (&pwm_generator_instance,
    1e98:	4808      	ldr	r0, [pc, #32]	; (1ebc <cycle_pwm_duty+0x64>)
    1e9a:	4b07      	ldr	r3, [pc, #28]	; (1eb8 <cycle_pwm_duty+0x60>)
    1e9c:	324c      	adds	r2, #76	; 0x4c
    1e9e:	4798      	blx	r3
			set_color_yellow();
    1ea0:	4b0a      	ldr	r3, [pc, #40]	; (1ecc <cycle_pwm_duty+0x74>)
    1ea2:	e7e8      	b.n	1e76 <cycle_pwm_duty+0x1e>
		else if (toggle_count > 4)
    1ea4:	2b04      	cmp	r3, #4
    1ea6:	d9e7      	bls.n	1e78 <cycle_pwm_duty+0x20>
			pwm_motor_cleanup();
    1ea8:	4b09      	ldr	r3, [pc, #36]	; (1ed0 <cycle_pwm_duty+0x78>)
    1eaa:	4798      	blx	r3
}
    1eac:	e7e4      	b.n	1e78 <cycle_pwm_duty+0x20>
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	2000006b 	.word	0x2000006b
    1eb4:	20000084 	.word	0x20000084
    1eb8:	00001899 	.word	0x00001899
    1ebc:	200001c8 	.word	0x200001c8
    1ec0:	00001a65 	.word	0x00001a65
    1ec4:	00001aa5 	.word	0x00001aa5
    1ec8:	2000006a 	.word	0x2000006a
    1ecc:	00001a25 	.word	0x00001a25
    1ed0:	00001e05 	.word	0x00001e05

00001ed4 <regular_routine>:
{
    1ed4:	b510      	push	{r4, lr}
	if (is_button_pressed()){
    1ed6:	4b1a      	ldr	r3, [pc, #104]	; (1f40 <regular_routine+0x6c>)
    1ed8:	4798      	blx	r3
    1eda:	2800      	cmp	r0, #0
    1edc:	d026      	beq.n	1f2c <regular_routine+0x58>
		if (LongPressFlag){
    1ede:	4b19      	ldr	r3, [pc, #100]	; (1f44 <regular_routine+0x70>)
    1ee0:	781b      	ldrb	r3, [r3, #0]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d006      	beq.n	1ef4 <regular_routine+0x20>
    1ee6:	2280      	movs	r2, #128	; 0x80
    1ee8:	4b17      	ldr	r3, [pc, #92]	; (1f48 <regular_routine+0x74>)
    1eea:	0252      	lsls	r2, r2, #9
    1eec:	615a      	str	r2, [r3, #20]
			pwm_motor_cleanup();
    1eee:	4b17      	ldr	r3, [pc, #92]	; (1f4c <regular_routine+0x78>)
					cycle_pwm_duty ();
    1ef0:	4798      	blx	r3
    1ef2:	e01b      	b.n	1f2c <regular_routine+0x58>
			if (!motor_status_changed)
    1ef4:	4916      	ldr	r1, [pc, #88]	; (1f50 <regular_routine+0x7c>)
    1ef6:	780b      	ldrb	r3, [r1, #0]
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d117      	bne.n	1f2c <regular_routine+0x58>
				toggle_count++;
    1efc:	4a15      	ldr	r2, [pc, #84]	; (1f54 <regular_routine+0x80>)
    1efe:	7813      	ldrb	r3, [r2, #0]
    1f00:	3301      	adds	r3, #1
    1f02:	7013      	strb	r3, [r2, #0]
				motor_status_changed = true;
    1f04:	2201      	movs	r2, #1
				if (!PWM_RUNNING)
    1f06:	4b14      	ldr	r3, [pc, #80]	; (1f58 <regular_routine+0x84>)
				motor_status_changed = true;
    1f08:	700a      	strb	r2, [r1, #0]
				if (!PWM_RUNNING)
    1f0a:	7819      	ldrb	r1, [r3, #0]
    1f0c:	2900      	cmp	r1, #0
    1f0e:	d115      	bne.n	1f3c <regular_routine+0x68>
					PWM_RUNNING = true;
    1f10:	701a      	strb	r2, [r3, #0]
    1f12:	4b12      	ldr	r3, [pc, #72]	; (1f5c <regular_routine+0x88>)
    1f14:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f16:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    1f18:	b252      	sxtb	r2, r2
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	dbfb      	blt.n	1f16 <regular_routine+0x42>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1f1e:	2202      	movs	r2, #2
    1f20:	8819      	ldrh	r1, [r3, #0]
    1f22:	430a      	orrs	r2, r1
    1f24:	801a      	strh	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    1f26:	2240      	movs	r2, #64	; 0x40
    1f28:	4b07      	ldr	r3, [pc, #28]	; (1f48 <regular_routine+0x74>)
    1f2a:	619a      	str	r2, [r3, #24]
	if (BUTTON_RELEASE_STATUS)
    1f2c:	4b0c      	ldr	r3, [pc, #48]	; (1f60 <regular_routine+0x8c>)
    1f2e:	781b      	ldrb	r3, [r3, #0]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d002      	beq.n	1f3a <regular_routine+0x66>
		motor_status_changed = false;
    1f34:	2200      	movs	r2, #0
    1f36:	4b06      	ldr	r3, [pc, #24]	; (1f50 <regular_routine+0x7c>)
    1f38:	701a      	strb	r2, [r3, #0]
}
    1f3a:	bd10      	pop	{r4, pc}
					cycle_pwm_duty ();
    1f3c:	4b09      	ldr	r3, [pc, #36]	; (1f64 <regular_routine+0x90>)
    1f3e:	e7d7      	b.n	1ef0 <regular_routine+0x1c>
    1f40:	00001da5 	.word	0x00001da5
    1f44:	20000068 	.word	0x20000068
    1f48:	41004400 	.word	0x41004400
    1f4c:	00001e05 	.word	0x00001e05
    1f50:	2000006f 	.word	0x2000006f
    1f54:	20000084 	.word	0x20000084
    1f58:	2000006b 	.word	0x2000006b
    1f5c:	200001c8 	.word	0x200001c8
    1f60:	20000066 	.word	0x20000066
    1f64:	00001e59 	.word	0x00001e59

00001f68 <get_vbus_state>:
	return (port_base->IN.reg & pin_mask);
    1f68:	4b03      	ldr	r3, [pc, #12]	; (1f78 <get_vbus_state+0x10>)


void get_vbus_state(void);

void get_vbus_state(void){
	VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
    1f6a:	4a04      	ldr	r2, [pc, #16]	; (1f7c <get_vbus_state+0x14>)
    1f6c:	6a1b      	ldr	r3, [r3, #32]
    1f6e:	011b      	lsls	r3, r3, #4
    1f70:	0fdb      	lsrs	r3, r3, #31
    1f72:	7013      	strb	r3, [r2, #0]
}
    1f74:	4770      	bx	lr
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	41004400 	.word	0x41004400
    1f7c:	2000006e 	.word	0x2000006e

00001f80 <get_charging_on_status_state>:
    1f80:	4b03      	ldr	r3, [pc, #12]	; (1f90 <get_charging_on_status_state+0x10>)


void get_charging_on_status_state(void);

void get_charging_on_status_state(void){
	CHARGN_ON_STATE = port_pin_get_input_level(CHARGN_ON_PIN);
    1f82:	4a04      	ldr	r2, [pc, #16]	; (1f94 <get_charging_on_status_state+0x14>)
    1f84:	6a1b      	ldr	r3, [r3, #32]
    1f86:	051b      	lsls	r3, r3, #20
    1f88:	0fdb      	lsrs	r3, r3, #31
    1f8a:	7013      	strb	r3, [r2, #0]
}
    1f8c:	4770      	bx	lr
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	41004400 	.word	0x41004400
    1f94:	20000067 	.word	0x20000067

00001f98 <update_battery_states>:
}


void update_battery_states(void);

void update_battery_states(void){
    1f98:	b510      	push	{r4, lr}
	
	/*
	Update Global Var based on state (using VBUS & CHRGHN)
	*/
	
	get_vbus_state();
    1f9a:	4b02      	ldr	r3, [pc, #8]	; (1fa4 <update_battery_states+0xc>)
    1f9c:	4798      	blx	r3
	get_charging_on_status_state();
    1f9e:	4b02      	ldr	r3, [pc, #8]	; (1fa8 <update_battery_states+0x10>)
    1fa0:	4798      	blx	r3
	
	
	
}
    1fa2:	bd10      	pop	{r4, pc}
    1fa4:	00001f69 	.word	0x00001f69
    1fa8:	00001f81 	.word	0x00001f81

00001fac <display_battery_state>:
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void);

void display_battery_state(void){
    1fac:	b510      	push	{r4, lr}
		set_battery_low_routine();
	}
	else if (BATTERY_LOW){
		set_color_red();
	}	
	else if (BATTERY_CHARGED){
    1fae:	4b06      	ldr	r3, [pc, #24]	; (1fc8 <display_battery_state+0x1c>)
    1fb0:	781b      	ldrb	r3, [r3, #0]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d002      	beq.n	1fbc <display_battery_state+0x10>
		set_color_purple();
    1fb6:	4b05      	ldr	r3, [pc, #20]	; (1fcc <display_battery_state+0x20>)
	}	
	else if (BATTERY_CHARGING){
		set_battery_charge_routine();
    1fb8:	4798      	blx	r3
	}
	
}
    1fba:	bd10      	pop	{r4, pc}
	else if (BATTERY_CHARGING){
    1fbc:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <display_battery_state+0x24>)
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d0fa      	beq.n	1fba <display_battery_state+0xe>
		set_battery_charge_routine();
    1fc4:	4b03      	ldr	r3, [pc, #12]	; (1fd4 <display_battery_state+0x28>)
    1fc6:	e7f7      	b.n	1fb8 <display_battery_state+0xc>
    1fc8:	20000064 	.word	0x20000064
    1fcc:	00001a65 	.word	0x00001a65
    1fd0:	20000065 	.word	0x20000065
    1fd4:	00001ae5 	.word	0x00001ae5

00001fd8 <toggle_nsleep>:


void toggle_nsleep(void);

void toggle_nsleep(void){
    1fd8:	b510      	push	{r4, lr}
	static bool PULSATING_MOTOR = false;
	if (PULSATING_MOTOR_ROUTINE){
    1fda:	4b0b      	ldr	r3, [pc, #44]	; (2008 <toggle_nsleep+0x30>)
    1fdc:	781b      	ldrb	r3, [r3, #0]
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d00b      	beq.n	1ffa <toggle_nsleep+0x22>
    1fe2:	2180      	movs	r1, #128	; 0x80
		if (PULSATING_MOTOR){
    1fe4:	4a09      	ldr	r2, [pc, #36]	; (200c <toggle_nsleep+0x34>)
    1fe6:	4b0a      	ldr	r3, [pc, #40]	; (2010 <toggle_nsleep+0x38>)
    1fe8:	7814      	ldrb	r4, [r2, #0]
    1fea:	2040      	movs	r0, #64	; 0x40
    1fec:	0249      	lsls	r1, r1, #9
    1fee:	2c00      	cmp	r4, #0
    1ff0:	d004      	beq.n	1ffc <toggle_nsleep+0x24>
		port_base->OUTCLR.reg = pin_mask;
    1ff2:	6158      	str	r0, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1ff4:	6199      	str	r1, [r3, #24]
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			LED_Off(LED0_PIN);
			PULSATING_MOTOR = false;
    1ff6:	2300      	movs	r3, #0
    1ff8:	7013      	strb	r3, [r2, #0]
			PULSATING_MOTOR = true;
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
			LED_On(LED0_PIN);
		}
	}
}
    1ffa:	bd10      	pop	{r4, pc}
			PULSATING_MOTOR = true;
    1ffc:	2401      	movs	r4, #1
    1ffe:	7014      	strb	r4, [r2, #0]
    2000:	6198      	str	r0, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    2002:	6159      	str	r1, [r3, #20]
}
    2004:	e7f9      	b.n	1ffa <toggle_nsleep+0x22>
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	2000006a 	.word	0x2000006a
    200c:	20000069 	.word	0x20000069
    2010:	41004400 	.word	0x41004400

00002014 <system_state>:
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void);

void system_state(void){
    2014:	b510      	push	{r4, lr}
	update_battery_states();
    2016:	4b02      	ldr	r3, [pc, #8]	; (2020 <system_state+0xc>)
    2018:	4798      	blx	r3
	sample_battery_states();
	display_battery_state();
    201a:	4b02      	ldr	r3, [pc, #8]	; (2024 <system_state+0x10>)
    201c:	4798      	blx	r3
}
    201e:	bd10      	pop	{r4, pc}
    2020:	00001f99 	.word	0x00001f99
    2024:	00001fad 	.word	0x00001fad

00002028 <system_logic>:
/* LOGIC MACHINE		                                                */
/************************************************************************/

void system_logic(void);

void system_logic(void){
    2028:	b500      	push	{lr}
	if (!VBUS_STATE){
    202a:	4b27      	ldr	r3, [pc, #156]	; (20c8 <system_logic+0xa0>)
void system_logic(void){
    202c:	b08f      	sub	sp, #60	; 0x3c
	if (!VBUS_STATE){
    202e:	781b      	ldrb	r3, [r3, #0]
    2030:	2b00      	cmp	r3, #0
    2032:	d13a      	bne.n	20aa <system_logic+0x82>
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    2034:	21a0      	movs	r1, #160	; 0xa0
	config->clock_source               = GCLK_GENERATOR_0;
    2036:	aa01      	add	r2, sp, #4
    2038:	00c9      	lsls	r1, r1, #3
    203a:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
    203c:	212d      	movs	r1, #45	; 0x2d
    203e:	2055      	movs	r0, #85	; 0x55
    2040:	4469      	add	r1, sp
	config->counter_16_bit.value                   = 0x0000;
    2042:	8513      	strh	r3, [r2, #40]	; 0x28
    2044:	7008      	strb	r0, [r1, #0]
	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
    2046:	212e      	movs	r1, #46	; 0x2e
    2048:	3840      	subs	r0, #64	; 0x40
    204a:	4469      	add	r1, sp
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    204c:	8553      	strh	r3, [r2, #42]	; 0x2a
    204e:	7008      	strb	r0, [r1, #0]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    2050:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
    2052:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2054:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2056:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2058:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    205a:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    205c:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    205e:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    2060:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2062:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2064:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2066:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2068:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
    206a:	3304      	adds	r3, #4
    206c:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    206e:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
    2070:	6193      	str	r3, [r2, #24]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
    2072:	3936      	subs	r1, #54	; 0x36
	config_tc.pwm_channel[0].enabled = true;
    2074:	3b03      	subs	r3, #3
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
    2076:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].enabled = true;
    2078:	7413      	strb	r3, [r2, #16]
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
    207a:	4914      	ldr	r1, [pc, #80]	; (20cc <system_logic+0xa4>)
    207c:	4b14      	ldr	r3, [pc, #80]	; (20d0 <system_logic+0xa8>)
    207e:	4815      	ldr	r0, [pc, #84]	; (20d4 <system_logic+0xac>)
    2080:	4798      	blx	r3
		configure_pwm_generator();					// Enable Motor PWM
		set_color_cyan();
    2082:	4b15      	ldr	r3, [pc, #84]	; (20d8 <system_logic+0xb0>)
    2084:	4798      	blx	r3
	//
	//
	
	
	
	if (SYS_TICK_10MS){
    2086:	4b15      	ldr	r3, [pc, #84]	; (20dc <system_logic+0xb4>)
    2088:	781a      	ldrb	r2, [r3, #0]
    208a:	2a00      	cmp	r2, #0
    208c:	d003      	beq.n	2096 <system_logic+0x6e>
		SYS_TICK_10MS = false;
    208e:	2200      	movs	r2, #0
    2090:	701a      	strb	r2, [r3, #0]
		regular_routine();
    2092:	4b13      	ldr	r3, [pc, #76]	; (20e0 <system_logic+0xb8>)
    2094:	4798      	blx	r3
	}
	
	if (SYS_TICK_200MS){
    2096:	4b13      	ldr	r3, [pc, #76]	; (20e4 <system_logic+0xbc>)
    2098:	781a      	ldrb	r2, [r3, #0]
    209a:	2a00      	cmp	r2, #0
    209c:	d003      	beq.n	20a6 <system_logic+0x7e>
		SYS_TICK_200MS = false;
    209e:	2200      	movs	r2, #0
    20a0:	701a      	strb	r2, [r3, #0]
		toggle_nsleep();
    20a2:	4b11      	ldr	r3, [pc, #68]	; (20e8 <system_logic+0xc0>)
    20a4:	4798      	blx	r3
	}


}
    20a6:	b00f      	add	sp, #60	; 0x3c
    20a8:	bd00      	pop	{pc}
		if (!CHARGN_ON_STATE){
    20aa:	4b10      	ldr	r3, [pc, #64]	; (20ec <system_logic+0xc4>)
    20ac:	4a10      	ldr	r2, [pc, #64]	; (20f0 <system_logic+0xc8>)
    20ae:	7819      	ldrb	r1, [r3, #0]
    20b0:	4b10      	ldr	r3, [pc, #64]	; (20f4 <system_logic+0xcc>)
    20b2:	2900      	cmp	r1, #0
    20b4:	d103      	bne.n	20be <system_logic+0x96>
			BATTERY_CHARGING = true;
    20b6:	2001      	movs	r0, #1
			BATTERY_CHARGED = false;			
    20b8:	7019      	strb	r1, [r3, #0]
			BATTERY_CHARGING = true;
    20ba:	7010      	strb	r0, [r2, #0]
    20bc:	e7e3      	b.n	2086 <system_logic+0x5e>
			BATTERY_CHARGING = false;
    20be:	2100      	movs	r1, #0
    20c0:	7011      	strb	r1, [r2, #0]
			BATTERY_CHARGED = true;
    20c2:	2201      	movs	r2, #1
    20c4:	701a      	strb	r2, [r3, #0]
    20c6:	e7de      	b.n	2086 <system_logic+0x5e>
    20c8:	2000006e 	.word	0x2000006e
    20cc:	42001c00 	.word	0x42001c00
    20d0:	00001661 	.word	0x00001661
    20d4:	200001c8 	.word	0x200001c8
    20d8:	00001aa5 	.word	0x00001aa5
    20dc:	2000006c 	.word	0x2000006c
    20e0:	00001ed5 	.word	0x00001ed5
    20e4:	2000006d 	.word	0x2000006d
    20e8:	00001fd9 	.word	0x00001fd9
    20ec:	20000067 	.word	0x20000067
    20f0:	20000065 	.word	0x20000065
    20f4:	20000064 	.word	0x20000064

000020f8 <startup_default_pin_state>:
    20f8:	2240      	movs	r2, #64	; 0x40
    20fa:	4b06      	ldr	r3, [pc, #24]	; (2114 <startup_default_pin_state+0x1c>)
    20fc:	615a      	str	r2, [r3, #20]
    20fe:	1892      	adds	r2, r2, r2
    2100:	615a      	str	r2, [r3, #20]
    2102:	2280      	movs	r2, #128	; 0x80
    2104:	0212      	lsls	r2, r2, #8
    2106:	615a      	str	r2, [r3, #20]
    2108:	2280      	movs	r2, #128	; 0x80
    210a:	0112      	lsls	r2, r2, #4
    210c:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    210e:	2208      	movs	r2, #8
    2110:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SWITCH_OFF_PIN,LOW);
	port_pin_set_output_level(BUTTON_2,LOW);
	port_pin_set_output_level(CHARGN_ON_PIN,LOW);
	port_pin_set_output_level(CHARGN_OFF_PIN,HIGH);
	
}
    2112:	4770      	bx	lr
    2114:	41004400 	.word	0x41004400

00002118 <startup_sys_configs>:


void startup_sys_configs(void);


void startup_sys_configs(void){
    2118:	b510      	push	{r4, lr}
	system_init ();									// System Initialize
    211a:	4b0a      	ldr	r3, [pc, #40]	; (2144 <startup_sys_configs+0x2c>)
    211c:	4798      	blx	r3
	cpu_irq_enable();
    211e:	2201      	movs	r2, #1
    2120:	4b09      	ldr	r3, [pc, #36]	; (2148 <startup_sys_configs+0x30>)
    2122:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2124:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2128:	b662      	cpsie	i
	system_interrupt_enable_global ();				// System Interrupts
	configure_port_pins ();							// System PORTs
    212a:	4b08      	ldr	r3, [pc, #32]	; (214c <startup_sys_configs+0x34>)
    212c:	4798      	blx	r3
	startup_default_pin_state();
    212e:	4b08      	ldr	r3, [pc, #32]	; (2150 <startup_sys_configs+0x38>)
    2130:	4798      	blx	r3
	configure_system_tc ();							// System Clock
    2132:	4b08      	ldr	r3, [pc, #32]	; (2154 <startup_sys_configs+0x3c>)
    2134:	4798      	blx	r3
	system_tc_callbacks ();							// System Clock Callback
    2136:	4b08      	ldr	r3, [pc, #32]	; (2158 <startup_sys_configs+0x40>)
    2138:	4798      	blx	r3
	i2c_master_setup();
    213a:	4b08      	ldr	r3, [pc, #32]	; (215c <startup_sys_configs+0x44>)
    213c:	4798      	blx	r3
	configure_pwm_tcc();
    213e:	4b08      	ldr	r3, [pc, #32]	; (2160 <startup_sys_configs+0x48>)
    2140:	4798      	blx	r3
}
    2142:	bd10      	pop	{r4, pc}
    2144:	00001171 	.word	0x00001171
    2148:	20000000 	.word	0x20000000
    214c:	00001c91 	.word	0x00001c91
    2150:	000020f9 	.word	0x000020f9
    2154:	00001ce9 	.word	0x00001ce9
    2158:	00001d59 	.word	0x00001d59
    215c:	00001b71 	.word	0x00001b71
    2160:	000000ed 	.word	0x000000ed

00002164 <main>:



int main (void)
{
    2164:	b510      	push	{r4, lr}
	startup_sys_configs ();
    2166:	4b03      	ldr	r3, [pc, #12]	; (2174 <main+0x10>)
    2168:	4798      	blx	r3
			
			
	while (true)
	{
		
		system_state();								// Get latest system_state
    216a:	4b03      	ldr	r3, [pc, #12]	; (2178 <main+0x14>)
    216c:	4798      	blx	r3
		system_logic();								// Invoke System Logic
    216e:	4b03      	ldr	r3, [pc, #12]	; (217c <main+0x18>)
    2170:	e7fa      	b.n	2168 <main+0x4>
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	00002119 	.word	0x00002119
    2178:	00002015 	.word	0x00002015
    217c:	00002029 	.word	0x00002029

00002180 <__gnu_thumb1_case_uqi>:
    2180:	b402      	push	{r1}
    2182:	4671      	mov	r1, lr
    2184:	0849      	lsrs	r1, r1, #1
    2186:	0049      	lsls	r1, r1, #1
    2188:	5c09      	ldrb	r1, [r1, r0]
    218a:	0049      	lsls	r1, r1, #1
    218c:	448e      	add	lr, r1
    218e:	bc02      	pop	{r1}
    2190:	4770      	bx	lr
    2192:	46c0      	nop			; (mov r8, r8)

00002194 <__udivsi3>:
    2194:	2200      	movs	r2, #0
    2196:	0843      	lsrs	r3, r0, #1
    2198:	428b      	cmp	r3, r1
    219a:	d374      	bcc.n	2286 <__udivsi3+0xf2>
    219c:	0903      	lsrs	r3, r0, #4
    219e:	428b      	cmp	r3, r1
    21a0:	d35f      	bcc.n	2262 <__udivsi3+0xce>
    21a2:	0a03      	lsrs	r3, r0, #8
    21a4:	428b      	cmp	r3, r1
    21a6:	d344      	bcc.n	2232 <__udivsi3+0x9e>
    21a8:	0b03      	lsrs	r3, r0, #12
    21aa:	428b      	cmp	r3, r1
    21ac:	d328      	bcc.n	2200 <__udivsi3+0x6c>
    21ae:	0c03      	lsrs	r3, r0, #16
    21b0:	428b      	cmp	r3, r1
    21b2:	d30d      	bcc.n	21d0 <__udivsi3+0x3c>
    21b4:	22ff      	movs	r2, #255	; 0xff
    21b6:	0209      	lsls	r1, r1, #8
    21b8:	ba12      	rev	r2, r2
    21ba:	0c03      	lsrs	r3, r0, #16
    21bc:	428b      	cmp	r3, r1
    21be:	d302      	bcc.n	21c6 <__udivsi3+0x32>
    21c0:	1212      	asrs	r2, r2, #8
    21c2:	0209      	lsls	r1, r1, #8
    21c4:	d065      	beq.n	2292 <__udivsi3+0xfe>
    21c6:	0b03      	lsrs	r3, r0, #12
    21c8:	428b      	cmp	r3, r1
    21ca:	d319      	bcc.n	2200 <__udivsi3+0x6c>
    21cc:	e000      	b.n	21d0 <__udivsi3+0x3c>
    21ce:	0a09      	lsrs	r1, r1, #8
    21d0:	0bc3      	lsrs	r3, r0, #15
    21d2:	428b      	cmp	r3, r1
    21d4:	d301      	bcc.n	21da <__udivsi3+0x46>
    21d6:	03cb      	lsls	r3, r1, #15
    21d8:	1ac0      	subs	r0, r0, r3
    21da:	4152      	adcs	r2, r2
    21dc:	0b83      	lsrs	r3, r0, #14
    21de:	428b      	cmp	r3, r1
    21e0:	d301      	bcc.n	21e6 <__udivsi3+0x52>
    21e2:	038b      	lsls	r3, r1, #14
    21e4:	1ac0      	subs	r0, r0, r3
    21e6:	4152      	adcs	r2, r2
    21e8:	0b43      	lsrs	r3, r0, #13
    21ea:	428b      	cmp	r3, r1
    21ec:	d301      	bcc.n	21f2 <__udivsi3+0x5e>
    21ee:	034b      	lsls	r3, r1, #13
    21f0:	1ac0      	subs	r0, r0, r3
    21f2:	4152      	adcs	r2, r2
    21f4:	0b03      	lsrs	r3, r0, #12
    21f6:	428b      	cmp	r3, r1
    21f8:	d301      	bcc.n	21fe <__udivsi3+0x6a>
    21fa:	030b      	lsls	r3, r1, #12
    21fc:	1ac0      	subs	r0, r0, r3
    21fe:	4152      	adcs	r2, r2
    2200:	0ac3      	lsrs	r3, r0, #11
    2202:	428b      	cmp	r3, r1
    2204:	d301      	bcc.n	220a <__udivsi3+0x76>
    2206:	02cb      	lsls	r3, r1, #11
    2208:	1ac0      	subs	r0, r0, r3
    220a:	4152      	adcs	r2, r2
    220c:	0a83      	lsrs	r3, r0, #10
    220e:	428b      	cmp	r3, r1
    2210:	d301      	bcc.n	2216 <__udivsi3+0x82>
    2212:	028b      	lsls	r3, r1, #10
    2214:	1ac0      	subs	r0, r0, r3
    2216:	4152      	adcs	r2, r2
    2218:	0a43      	lsrs	r3, r0, #9
    221a:	428b      	cmp	r3, r1
    221c:	d301      	bcc.n	2222 <__udivsi3+0x8e>
    221e:	024b      	lsls	r3, r1, #9
    2220:	1ac0      	subs	r0, r0, r3
    2222:	4152      	adcs	r2, r2
    2224:	0a03      	lsrs	r3, r0, #8
    2226:	428b      	cmp	r3, r1
    2228:	d301      	bcc.n	222e <__udivsi3+0x9a>
    222a:	020b      	lsls	r3, r1, #8
    222c:	1ac0      	subs	r0, r0, r3
    222e:	4152      	adcs	r2, r2
    2230:	d2cd      	bcs.n	21ce <__udivsi3+0x3a>
    2232:	09c3      	lsrs	r3, r0, #7
    2234:	428b      	cmp	r3, r1
    2236:	d301      	bcc.n	223c <__udivsi3+0xa8>
    2238:	01cb      	lsls	r3, r1, #7
    223a:	1ac0      	subs	r0, r0, r3
    223c:	4152      	adcs	r2, r2
    223e:	0983      	lsrs	r3, r0, #6
    2240:	428b      	cmp	r3, r1
    2242:	d301      	bcc.n	2248 <__udivsi3+0xb4>
    2244:	018b      	lsls	r3, r1, #6
    2246:	1ac0      	subs	r0, r0, r3
    2248:	4152      	adcs	r2, r2
    224a:	0943      	lsrs	r3, r0, #5
    224c:	428b      	cmp	r3, r1
    224e:	d301      	bcc.n	2254 <__udivsi3+0xc0>
    2250:	014b      	lsls	r3, r1, #5
    2252:	1ac0      	subs	r0, r0, r3
    2254:	4152      	adcs	r2, r2
    2256:	0903      	lsrs	r3, r0, #4
    2258:	428b      	cmp	r3, r1
    225a:	d301      	bcc.n	2260 <__udivsi3+0xcc>
    225c:	010b      	lsls	r3, r1, #4
    225e:	1ac0      	subs	r0, r0, r3
    2260:	4152      	adcs	r2, r2
    2262:	08c3      	lsrs	r3, r0, #3
    2264:	428b      	cmp	r3, r1
    2266:	d301      	bcc.n	226c <__udivsi3+0xd8>
    2268:	00cb      	lsls	r3, r1, #3
    226a:	1ac0      	subs	r0, r0, r3
    226c:	4152      	adcs	r2, r2
    226e:	0883      	lsrs	r3, r0, #2
    2270:	428b      	cmp	r3, r1
    2272:	d301      	bcc.n	2278 <__udivsi3+0xe4>
    2274:	008b      	lsls	r3, r1, #2
    2276:	1ac0      	subs	r0, r0, r3
    2278:	4152      	adcs	r2, r2
    227a:	0843      	lsrs	r3, r0, #1
    227c:	428b      	cmp	r3, r1
    227e:	d301      	bcc.n	2284 <__udivsi3+0xf0>
    2280:	004b      	lsls	r3, r1, #1
    2282:	1ac0      	subs	r0, r0, r3
    2284:	4152      	adcs	r2, r2
    2286:	1a41      	subs	r1, r0, r1
    2288:	d200      	bcs.n	228c <__udivsi3+0xf8>
    228a:	4601      	mov	r1, r0
    228c:	4152      	adcs	r2, r2
    228e:	4610      	mov	r0, r2
    2290:	4770      	bx	lr
    2292:	e7ff      	b.n	2294 <__udivsi3+0x100>
    2294:	b501      	push	{r0, lr}
    2296:	2000      	movs	r0, #0
    2298:	f000 f806 	bl	22a8 <__aeabi_idiv0>
    229c:	bd02      	pop	{r1, pc}
    229e:	46c0      	nop			; (mov r8, r8)

000022a0 <__aeabi_uidivmod>:
    22a0:	2900      	cmp	r1, #0
    22a2:	d0f7      	beq.n	2294 <__udivsi3+0x100>
    22a4:	e776      	b.n	2194 <__udivsi3>
    22a6:	4770      	bx	lr

000022a8 <__aeabi_idiv0>:
    22a8:	4770      	bx	lr
    22aa:	46c0      	nop			; (mov r8, r8)

000022ac <__aeabi_dadd>:
    22ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ae:	4645      	mov	r5, r8
    22b0:	46de      	mov	lr, fp
    22b2:	4657      	mov	r7, sl
    22b4:	464e      	mov	r6, r9
    22b6:	030c      	lsls	r4, r1, #12
    22b8:	b5e0      	push	{r5, r6, r7, lr}
    22ba:	004e      	lsls	r6, r1, #1
    22bc:	0fc9      	lsrs	r1, r1, #31
    22be:	4688      	mov	r8, r1
    22c0:	000d      	movs	r5, r1
    22c2:	0a61      	lsrs	r1, r4, #9
    22c4:	0f44      	lsrs	r4, r0, #29
    22c6:	430c      	orrs	r4, r1
    22c8:	00c7      	lsls	r7, r0, #3
    22ca:	0319      	lsls	r1, r3, #12
    22cc:	0058      	lsls	r0, r3, #1
    22ce:	0fdb      	lsrs	r3, r3, #31
    22d0:	469b      	mov	fp, r3
    22d2:	0a4b      	lsrs	r3, r1, #9
    22d4:	0f51      	lsrs	r1, r2, #29
    22d6:	430b      	orrs	r3, r1
    22d8:	0d76      	lsrs	r6, r6, #21
    22da:	0d40      	lsrs	r0, r0, #21
    22dc:	0019      	movs	r1, r3
    22de:	00d2      	lsls	r2, r2, #3
    22e0:	45d8      	cmp	r8, fp
    22e2:	d100      	bne.n	22e6 <__aeabi_dadd+0x3a>
    22e4:	e0ae      	b.n	2444 <__aeabi_dadd+0x198>
    22e6:	1a35      	subs	r5, r6, r0
    22e8:	2d00      	cmp	r5, #0
    22ea:	dc00      	bgt.n	22ee <__aeabi_dadd+0x42>
    22ec:	e0f6      	b.n	24dc <__aeabi_dadd+0x230>
    22ee:	2800      	cmp	r0, #0
    22f0:	d10f      	bne.n	2312 <__aeabi_dadd+0x66>
    22f2:	4313      	orrs	r3, r2
    22f4:	d100      	bne.n	22f8 <__aeabi_dadd+0x4c>
    22f6:	e0db      	b.n	24b0 <__aeabi_dadd+0x204>
    22f8:	1e6b      	subs	r3, r5, #1
    22fa:	2b00      	cmp	r3, #0
    22fc:	d000      	beq.n	2300 <__aeabi_dadd+0x54>
    22fe:	e137      	b.n	2570 <__aeabi_dadd+0x2c4>
    2300:	1aba      	subs	r2, r7, r2
    2302:	4297      	cmp	r7, r2
    2304:	41bf      	sbcs	r7, r7
    2306:	1a64      	subs	r4, r4, r1
    2308:	427f      	negs	r7, r7
    230a:	1be4      	subs	r4, r4, r7
    230c:	2601      	movs	r6, #1
    230e:	0017      	movs	r7, r2
    2310:	e024      	b.n	235c <__aeabi_dadd+0xb0>
    2312:	4bc6      	ldr	r3, [pc, #792]	; (262c <__aeabi_dadd+0x380>)
    2314:	429e      	cmp	r6, r3
    2316:	d04d      	beq.n	23b4 <__aeabi_dadd+0x108>
    2318:	2380      	movs	r3, #128	; 0x80
    231a:	041b      	lsls	r3, r3, #16
    231c:	4319      	orrs	r1, r3
    231e:	2d38      	cmp	r5, #56	; 0x38
    2320:	dd00      	ble.n	2324 <__aeabi_dadd+0x78>
    2322:	e107      	b.n	2534 <__aeabi_dadd+0x288>
    2324:	2d1f      	cmp	r5, #31
    2326:	dd00      	ble.n	232a <__aeabi_dadd+0x7e>
    2328:	e138      	b.n	259c <__aeabi_dadd+0x2f0>
    232a:	2020      	movs	r0, #32
    232c:	1b43      	subs	r3, r0, r5
    232e:	469a      	mov	sl, r3
    2330:	000b      	movs	r3, r1
    2332:	4650      	mov	r0, sl
    2334:	4083      	lsls	r3, r0
    2336:	4699      	mov	r9, r3
    2338:	0013      	movs	r3, r2
    233a:	4648      	mov	r0, r9
    233c:	40eb      	lsrs	r3, r5
    233e:	4318      	orrs	r0, r3
    2340:	0003      	movs	r3, r0
    2342:	4650      	mov	r0, sl
    2344:	4082      	lsls	r2, r0
    2346:	1e50      	subs	r0, r2, #1
    2348:	4182      	sbcs	r2, r0
    234a:	40e9      	lsrs	r1, r5
    234c:	431a      	orrs	r2, r3
    234e:	1aba      	subs	r2, r7, r2
    2350:	1a61      	subs	r1, r4, r1
    2352:	4297      	cmp	r7, r2
    2354:	41a4      	sbcs	r4, r4
    2356:	0017      	movs	r7, r2
    2358:	4264      	negs	r4, r4
    235a:	1b0c      	subs	r4, r1, r4
    235c:	0223      	lsls	r3, r4, #8
    235e:	d562      	bpl.n	2426 <__aeabi_dadd+0x17a>
    2360:	0264      	lsls	r4, r4, #9
    2362:	0a65      	lsrs	r5, r4, #9
    2364:	2d00      	cmp	r5, #0
    2366:	d100      	bne.n	236a <__aeabi_dadd+0xbe>
    2368:	e0df      	b.n	252a <__aeabi_dadd+0x27e>
    236a:	0028      	movs	r0, r5
    236c:	f001 fbe4 	bl	3b38 <__clzsi2>
    2370:	0003      	movs	r3, r0
    2372:	3b08      	subs	r3, #8
    2374:	2b1f      	cmp	r3, #31
    2376:	dd00      	ble.n	237a <__aeabi_dadd+0xce>
    2378:	e0d2      	b.n	2520 <__aeabi_dadd+0x274>
    237a:	2220      	movs	r2, #32
    237c:	003c      	movs	r4, r7
    237e:	1ad2      	subs	r2, r2, r3
    2380:	409d      	lsls	r5, r3
    2382:	40d4      	lsrs	r4, r2
    2384:	409f      	lsls	r7, r3
    2386:	4325      	orrs	r5, r4
    2388:	429e      	cmp	r6, r3
    238a:	dd00      	ble.n	238e <__aeabi_dadd+0xe2>
    238c:	e0c4      	b.n	2518 <__aeabi_dadd+0x26c>
    238e:	1b9e      	subs	r6, r3, r6
    2390:	1c73      	adds	r3, r6, #1
    2392:	2b1f      	cmp	r3, #31
    2394:	dd00      	ble.n	2398 <__aeabi_dadd+0xec>
    2396:	e0f1      	b.n	257c <__aeabi_dadd+0x2d0>
    2398:	2220      	movs	r2, #32
    239a:	0038      	movs	r0, r7
    239c:	0029      	movs	r1, r5
    239e:	1ad2      	subs	r2, r2, r3
    23a0:	40d8      	lsrs	r0, r3
    23a2:	4091      	lsls	r1, r2
    23a4:	4097      	lsls	r7, r2
    23a6:	002c      	movs	r4, r5
    23a8:	4301      	orrs	r1, r0
    23aa:	1e78      	subs	r0, r7, #1
    23ac:	4187      	sbcs	r7, r0
    23ae:	40dc      	lsrs	r4, r3
    23b0:	2600      	movs	r6, #0
    23b2:	430f      	orrs	r7, r1
    23b4:	077b      	lsls	r3, r7, #29
    23b6:	d009      	beq.n	23cc <__aeabi_dadd+0x120>
    23b8:	230f      	movs	r3, #15
    23ba:	403b      	ands	r3, r7
    23bc:	2b04      	cmp	r3, #4
    23be:	d005      	beq.n	23cc <__aeabi_dadd+0x120>
    23c0:	1d3b      	adds	r3, r7, #4
    23c2:	42bb      	cmp	r3, r7
    23c4:	41bf      	sbcs	r7, r7
    23c6:	427f      	negs	r7, r7
    23c8:	19e4      	adds	r4, r4, r7
    23ca:	001f      	movs	r7, r3
    23cc:	0223      	lsls	r3, r4, #8
    23ce:	d52c      	bpl.n	242a <__aeabi_dadd+0x17e>
    23d0:	4b96      	ldr	r3, [pc, #600]	; (262c <__aeabi_dadd+0x380>)
    23d2:	3601      	adds	r6, #1
    23d4:	429e      	cmp	r6, r3
    23d6:	d100      	bne.n	23da <__aeabi_dadd+0x12e>
    23d8:	e09a      	b.n	2510 <__aeabi_dadd+0x264>
    23da:	4645      	mov	r5, r8
    23dc:	4b94      	ldr	r3, [pc, #592]	; (2630 <__aeabi_dadd+0x384>)
    23de:	08ff      	lsrs	r7, r7, #3
    23e0:	401c      	ands	r4, r3
    23e2:	0760      	lsls	r0, r4, #29
    23e4:	0576      	lsls	r6, r6, #21
    23e6:	0264      	lsls	r4, r4, #9
    23e8:	4307      	orrs	r7, r0
    23ea:	0b24      	lsrs	r4, r4, #12
    23ec:	0d76      	lsrs	r6, r6, #21
    23ee:	2100      	movs	r1, #0
    23f0:	0324      	lsls	r4, r4, #12
    23f2:	0b23      	lsrs	r3, r4, #12
    23f4:	0d0c      	lsrs	r4, r1, #20
    23f6:	4a8f      	ldr	r2, [pc, #572]	; (2634 <__aeabi_dadd+0x388>)
    23f8:	0524      	lsls	r4, r4, #20
    23fa:	431c      	orrs	r4, r3
    23fc:	4014      	ands	r4, r2
    23fe:	0533      	lsls	r3, r6, #20
    2400:	4323      	orrs	r3, r4
    2402:	005b      	lsls	r3, r3, #1
    2404:	07ed      	lsls	r5, r5, #31
    2406:	085b      	lsrs	r3, r3, #1
    2408:	432b      	orrs	r3, r5
    240a:	0038      	movs	r0, r7
    240c:	0019      	movs	r1, r3
    240e:	bc3c      	pop	{r2, r3, r4, r5}
    2410:	4690      	mov	r8, r2
    2412:	4699      	mov	r9, r3
    2414:	46a2      	mov	sl, r4
    2416:	46ab      	mov	fp, r5
    2418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    241a:	4664      	mov	r4, ip
    241c:	4304      	orrs	r4, r0
    241e:	d100      	bne.n	2422 <__aeabi_dadd+0x176>
    2420:	e211      	b.n	2846 <__aeabi_dadd+0x59a>
    2422:	0004      	movs	r4, r0
    2424:	4667      	mov	r7, ip
    2426:	077b      	lsls	r3, r7, #29
    2428:	d1c6      	bne.n	23b8 <__aeabi_dadd+0x10c>
    242a:	4645      	mov	r5, r8
    242c:	0760      	lsls	r0, r4, #29
    242e:	08ff      	lsrs	r7, r7, #3
    2430:	4307      	orrs	r7, r0
    2432:	08e4      	lsrs	r4, r4, #3
    2434:	4b7d      	ldr	r3, [pc, #500]	; (262c <__aeabi_dadd+0x380>)
    2436:	429e      	cmp	r6, r3
    2438:	d030      	beq.n	249c <__aeabi_dadd+0x1f0>
    243a:	0324      	lsls	r4, r4, #12
    243c:	0576      	lsls	r6, r6, #21
    243e:	0b24      	lsrs	r4, r4, #12
    2440:	0d76      	lsrs	r6, r6, #21
    2442:	e7d4      	b.n	23ee <__aeabi_dadd+0x142>
    2444:	1a33      	subs	r3, r6, r0
    2446:	469a      	mov	sl, r3
    2448:	2b00      	cmp	r3, #0
    244a:	dd78      	ble.n	253e <__aeabi_dadd+0x292>
    244c:	2800      	cmp	r0, #0
    244e:	d031      	beq.n	24b4 <__aeabi_dadd+0x208>
    2450:	4876      	ldr	r0, [pc, #472]	; (262c <__aeabi_dadd+0x380>)
    2452:	4286      	cmp	r6, r0
    2454:	d0ae      	beq.n	23b4 <__aeabi_dadd+0x108>
    2456:	2080      	movs	r0, #128	; 0x80
    2458:	0400      	lsls	r0, r0, #16
    245a:	4301      	orrs	r1, r0
    245c:	4653      	mov	r3, sl
    245e:	2b38      	cmp	r3, #56	; 0x38
    2460:	dc00      	bgt.n	2464 <__aeabi_dadd+0x1b8>
    2462:	e0e9      	b.n	2638 <__aeabi_dadd+0x38c>
    2464:	430a      	orrs	r2, r1
    2466:	1e51      	subs	r1, r2, #1
    2468:	418a      	sbcs	r2, r1
    246a:	2100      	movs	r1, #0
    246c:	19d2      	adds	r2, r2, r7
    246e:	42ba      	cmp	r2, r7
    2470:	41bf      	sbcs	r7, r7
    2472:	1909      	adds	r1, r1, r4
    2474:	427c      	negs	r4, r7
    2476:	0017      	movs	r7, r2
    2478:	190c      	adds	r4, r1, r4
    247a:	0223      	lsls	r3, r4, #8
    247c:	d5d3      	bpl.n	2426 <__aeabi_dadd+0x17a>
    247e:	4b6b      	ldr	r3, [pc, #428]	; (262c <__aeabi_dadd+0x380>)
    2480:	3601      	adds	r6, #1
    2482:	429e      	cmp	r6, r3
    2484:	d100      	bne.n	2488 <__aeabi_dadd+0x1dc>
    2486:	e13a      	b.n	26fe <__aeabi_dadd+0x452>
    2488:	2001      	movs	r0, #1
    248a:	4b69      	ldr	r3, [pc, #420]	; (2630 <__aeabi_dadd+0x384>)
    248c:	401c      	ands	r4, r3
    248e:	087b      	lsrs	r3, r7, #1
    2490:	4007      	ands	r7, r0
    2492:	431f      	orrs	r7, r3
    2494:	07e0      	lsls	r0, r4, #31
    2496:	4307      	orrs	r7, r0
    2498:	0864      	lsrs	r4, r4, #1
    249a:	e78b      	b.n	23b4 <__aeabi_dadd+0x108>
    249c:	0023      	movs	r3, r4
    249e:	433b      	orrs	r3, r7
    24a0:	d100      	bne.n	24a4 <__aeabi_dadd+0x1f8>
    24a2:	e1cb      	b.n	283c <__aeabi_dadd+0x590>
    24a4:	2280      	movs	r2, #128	; 0x80
    24a6:	0312      	lsls	r2, r2, #12
    24a8:	4314      	orrs	r4, r2
    24aa:	0324      	lsls	r4, r4, #12
    24ac:	0b24      	lsrs	r4, r4, #12
    24ae:	e79e      	b.n	23ee <__aeabi_dadd+0x142>
    24b0:	002e      	movs	r6, r5
    24b2:	e77f      	b.n	23b4 <__aeabi_dadd+0x108>
    24b4:	0008      	movs	r0, r1
    24b6:	4310      	orrs	r0, r2
    24b8:	d100      	bne.n	24bc <__aeabi_dadd+0x210>
    24ba:	e0b4      	b.n	2626 <__aeabi_dadd+0x37a>
    24bc:	1e58      	subs	r0, r3, #1
    24be:	2800      	cmp	r0, #0
    24c0:	d000      	beq.n	24c4 <__aeabi_dadd+0x218>
    24c2:	e0de      	b.n	2682 <__aeabi_dadd+0x3d6>
    24c4:	18ba      	adds	r2, r7, r2
    24c6:	42ba      	cmp	r2, r7
    24c8:	419b      	sbcs	r3, r3
    24ca:	1864      	adds	r4, r4, r1
    24cc:	425b      	negs	r3, r3
    24ce:	18e4      	adds	r4, r4, r3
    24d0:	0017      	movs	r7, r2
    24d2:	2601      	movs	r6, #1
    24d4:	0223      	lsls	r3, r4, #8
    24d6:	d5a6      	bpl.n	2426 <__aeabi_dadd+0x17a>
    24d8:	2602      	movs	r6, #2
    24da:	e7d5      	b.n	2488 <__aeabi_dadd+0x1dc>
    24dc:	2d00      	cmp	r5, #0
    24de:	d16e      	bne.n	25be <__aeabi_dadd+0x312>
    24e0:	1c70      	adds	r0, r6, #1
    24e2:	0540      	lsls	r0, r0, #21
    24e4:	0d40      	lsrs	r0, r0, #21
    24e6:	2801      	cmp	r0, #1
    24e8:	dc00      	bgt.n	24ec <__aeabi_dadd+0x240>
    24ea:	e0f9      	b.n	26e0 <__aeabi_dadd+0x434>
    24ec:	1ab8      	subs	r0, r7, r2
    24ee:	4684      	mov	ip, r0
    24f0:	4287      	cmp	r7, r0
    24f2:	4180      	sbcs	r0, r0
    24f4:	1ae5      	subs	r5, r4, r3
    24f6:	4240      	negs	r0, r0
    24f8:	1a2d      	subs	r5, r5, r0
    24fa:	0228      	lsls	r0, r5, #8
    24fc:	d400      	bmi.n	2500 <__aeabi_dadd+0x254>
    24fe:	e089      	b.n	2614 <__aeabi_dadd+0x368>
    2500:	1bd7      	subs	r7, r2, r7
    2502:	42ba      	cmp	r2, r7
    2504:	4192      	sbcs	r2, r2
    2506:	1b1c      	subs	r4, r3, r4
    2508:	4252      	negs	r2, r2
    250a:	1aa5      	subs	r5, r4, r2
    250c:	46d8      	mov	r8, fp
    250e:	e729      	b.n	2364 <__aeabi_dadd+0xb8>
    2510:	4645      	mov	r5, r8
    2512:	2400      	movs	r4, #0
    2514:	2700      	movs	r7, #0
    2516:	e76a      	b.n	23ee <__aeabi_dadd+0x142>
    2518:	4c45      	ldr	r4, [pc, #276]	; (2630 <__aeabi_dadd+0x384>)
    251a:	1af6      	subs	r6, r6, r3
    251c:	402c      	ands	r4, r5
    251e:	e749      	b.n	23b4 <__aeabi_dadd+0x108>
    2520:	003d      	movs	r5, r7
    2522:	3828      	subs	r0, #40	; 0x28
    2524:	4085      	lsls	r5, r0
    2526:	2700      	movs	r7, #0
    2528:	e72e      	b.n	2388 <__aeabi_dadd+0xdc>
    252a:	0038      	movs	r0, r7
    252c:	f001 fb04 	bl	3b38 <__clzsi2>
    2530:	3020      	adds	r0, #32
    2532:	e71d      	b.n	2370 <__aeabi_dadd+0xc4>
    2534:	430a      	orrs	r2, r1
    2536:	1e51      	subs	r1, r2, #1
    2538:	418a      	sbcs	r2, r1
    253a:	2100      	movs	r1, #0
    253c:	e707      	b.n	234e <__aeabi_dadd+0xa2>
    253e:	2b00      	cmp	r3, #0
    2540:	d000      	beq.n	2544 <__aeabi_dadd+0x298>
    2542:	e0f3      	b.n	272c <__aeabi_dadd+0x480>
    2544:	1c70      	adds	r0, r6, #1
    2546:	0543      	lsls	r3, r0, #21
    2548:	0d5b      	lsrs	r3, r3, #21
    254a:	2b01      	cmp	r3, #1
    254c:	dc00      	bgt.n	2550 <__aeabi_dadd+0x2a4>
    254e:	e0ad      	b.n	26ac <__aeabi_dadd+0x400>
    2550:	4b36      	ldr	r3, [pc, #216]	; (262c <__aeabi_dadd+0x380>)
    2552:	4298      	cmp	r0, r3
    2554:	d100      	bne.n	2558 <__aeabi_dadd+0x2ac>
    2556:	e0d1      	b.n	26fc <__aeabi_dadd+0x450>
    2558:	18ba      	adds	r2, r7, r2
    255a:	42ba      	cmp	r2, r7
    255c:	41bf      	sbcs	r7, r7
    255e:	1864      	adds	r4, r4, r1
    2560:	427f      	negs	r7, r7
    2562:	19e4      	adds	r4, r4, r7
    2564:	07e7      	lsls	r7, r4, #31
    2566:	0852      	lsrs	r2, r2, #1
    2568:	4317      	orrs	r7, r2
    256a:	0864      	lsrs	r4, r4, #1
    256c:	0006      	movs	r6, r0
    256e:	e721      	b.n	23b4 <__aeabi_dadd+0x108>
    2570:	482e      	ldr	r0, [pc, #184]	; (262c <__aeabi_dadd+0x380>)
    2572:	4285      	cmp	r5, r0
    2574:	d100      	bne.n	2578 <__aeabi_dadd+0x2cc>
    2576:	e093      	b.n	26a0 <__aeabi_dadd+0x3f4>
    2578:	001d      	movs	r5, r3
    257a:	e6d0      	b.n	231e <__aeabi_dadd+0x72>
    257c:	0029      	movs	r1, r5
    257e:	3e1f      	subs	r6, #31
    2580:	40f1      	lsrs	r1, r6
    2582:	2b20      	cmp	r3, #32
    2584:	d100      	bne.n	2588 <__aeabi_dadd+0x2dc>
    2586:	e08d      	b.n	26a4 <__aeabi_dadd+0x3f8>
    2588:	2240      	movs	r2, #64	; 0x40
    258a:	1ad3      	subs	r3, r2, r3
    258c:	409d      	lsls	r5, r3
    258e:	432f      	orrs	r7, r5
    2590:	1e7d      	subs	r5, r7, #1
    2592:	41af      	sbcs	r7, r5
    2594:	2400      	movs	r4, #0
    2596:	430f      	orrs	r7, r1
    2598:	2600      	movs	r6, #0
    259a:	e744      	b.n	2426 <__aeabi_dadd+0x17a>
    259c:	002b      	movs	r3, r5
    259e:	0008      	movs	r0, r1
    25a0:	3b20      	subs	r3, #32
    25a2:	40d8      	lsrs	r0, r3
    25a4:	0003      	movs	r3, r0
    25a6:	2d20      	cmp	r5, #32
    25a8:	d100      	bne.n	25ac <__aeabi_dadd+0x300>
    25aa:	e07d      	b.n	26a8 <__aeabi_dadd+0x3fc>
    25ac:	2040      	movs	r0, #64	; 0x40
    25ae:	1b45      	subs	r5, r0, r5
    25b0:	40a9      	lsls	r1, r5
    25b2:	430a      	orrs	r2, r1
    25b4:	1e51      	subs	r1, r2, #1
    25b6:	418a      	sbcs	r2, r1
    25b8:	2100      	movs	r1, #0
    25ba:	431a      	orrs	r2, r3
    25bc:	e6c7      	b.n	234e <__aeabi_dadd+0xa2>
    25be:	2e00      	cmp	r6, #0
    25c0:	d050      	beq.n	2664 <__aeabi_dadd+0x3b8>
    25c2:	4e1a      	ldr	r6, [pc, #104]	; (262c <__aeabi_dadd+0x380>)
    25c4:	42b0      	cmp	r0, r6
    25c6:	d057      	beq.n	2678 <__aeabi_dadd+0x3cc>
    25c8:	2680      	movs	r6, #128	; 0x80
    25ca:	426b      	negs	r3, r5
    25cc:	4699      	mov	r9, r3
    25ce:	0436      	lsls	r6, r6, #16
    25d0:	4334      	orrs	r4, r6
    25d2:	464b      	mov	r3, r9
    25d4:	2b38      	cmp	r3, #56	; 0x38
    25d6:	dd00      	ble.n	25da <__aeabi_dadd+0x32e>
    25d8:	e0d6      	b.n	2788 <__aeabi_dadd+0x4dc>
    25da:	2b1f      	cmp	r3, #31
    25dc:	dd00      	ble.n	25e0 <__aeabi_dadd+0x334>
    25de:	e135      	b.n	284c <__aeabi_dadd+0x5a0>
    25e0:	2620      	movs	r6, #32
    25e2:	1af5      	subs	r5, r6, r3
    25e4:	0026      	movs	r6, r4
    25e6:	40ae      	lsls	r6, r5
    25e8:	46b2      	mov	sl, r6
    25ea:	003e      	movs	r6, r7
    25ec:	40de      	lsrs	r6, r3
    25ee:	46ac      	mov	ip, r5
    25f0:	0035      	movs	r5, r6
    25f2:	4656      	mov	r6, sl
    25f4:	432e      	orrs	r6, r5
    25f6:	4665      	mov	r5, ip
    25f8:	40af      	lsls	r7, r5
    25fa:	1e7d      	subs	r5, r7, #1
    25fc:	41af      	sbcs	r7, r5
    25fe:	40dc      	lsrs	r4, r3
    2600:	4337      	orrs	r7, r6
    2602:	1bd7      	subs	r7, r2, r7
    2604:	42ba      	cmp	r2, r7
    2606:	4192      	sbcs	r2, r2
    2608:	1b0c      	subs	r4, r1, r4
    260a:	4252      	negs	r2, r2
    260c:	1aa4      	subs	r4, r4, r2
    260e:	0006      	movs	r6, r0
    2610:	46d8      	mov	r8, fp
    2612:	e6a3      	b.n	235c <__aeabi_dadd+0xb0>
    2614:	4664      	mov	r4, ip
    2616:	4667      	mov	r7, ip
    2618:	432c      	orrs	r4, r5
    261a:	d000      	beq.n	261e <__aeabi_dadd+0x372>
    261c:	e6a2      	b.n	2364 <__aeabi_dadd+0xb8>
    261e:	2500      	movs	r5, #0
    2620:	2600      	movs	r6, #0
    2622:	2700      	movs	r7, #0
    2624:	e706      	b.n	2434 <__aeabi_dadd+0x188>
    2626:	001e      	movs	r6, r3
    2628:	e6c4      	b.n	23b4 <__aeabi_dadd+0x108>
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	000007ff 	.word	0x000007ff
    2630:	ff7fffff 	.word	0xff7fffff
    2634:	800fffff 	.word	0x800fffff
    2638:	2b1f      	cmp	r3, #31
    263a:	dc63      	bgt.n	2704 <__aeabi_dadd+0x458>
    263c:	2020      	movs	r0, #32
    263e:	1ac3      	subs	r3, r0, r3
    2640:	0008      	movs	r0, r1
    2642:	4098      	lsls	r0, r3
    2644:	469c      	mov	ip, r3
    2646:	4683      	mov	fp, r0
    2648:	4653      	mov	r3, sl
    264a:	0010      	movs	r0, r2
    264c:	40d8      	lsrs	r0, r3
    264e:	0003      	movs	r3, r0
    2650:	4658      	mov	r0, fp
    2652:	4318      	orrs	r0, r3
    2654:	4663      	mov	r3, ip
    2656:	409a      	lsls	r2, r3
    2658:	1e53      	subs	r3, r2, #1
    265a:	419a      	sbcs	r2, r3
    265c:	4653      	mov	r3, sl
    265e:	4302      	orrs	r2, r0
    2660:	40d9      	lsrs	r1, r3
    2662:	e703      	b.n	246c <__aeabi_dadd+0x1c0>
    2664:	0026      	movs	r6, r4
    2666:	433e      	orrs	r6, r7
    2668:	d006      	beq.n	2678 <__aeabi_dadd+0x3cc>
    266a:	43eb      	mvns	r3, r5
    266c:	4699      	mov	r9, r3
    266e:	2b00      	cmp	r3, #0
    2670:	d0c7      	beq.n	2602 <__aeabi_dadd+0x356>
    2672:	4e94      	ldr	r6, [pc, #592]	; (28c4 <__aeabi_dadd+0x618>)
    2674:	42b0      	cmp	r0, r6
    2676:	d1ac      	bne.n	25d2 <__aeabi_dadd+0x326>
    2678:	000c      	movs	r4, r1
    267a:	0017      	movs	r7, r2
    267c:	0006      	movs	r6, r0
    267e:	46d8      	mov	r8, fp
    2680:	e698      	b.n	23b4 <__aeabi_dadd+0x108>
    2682:	4b90      	ldr	r3, [pc, #576]	; (28c4 <__aeabi_dadd+0x618>)
    2684:	459a      	cmp	sl, r3
    2686:	d00b      	beq.n	26a0 <__aeabi_dadd+0x3f4>
    2688:	4682      	mov	sl, r0
    268a:	e6e7      	b.n	245c <__aeabi_dadd+0x1b0>
    268c:	2800      	cmp	r0, #0
    268e:	d000      	beq.n	2692 <__aeabi_dadd+0x3e6>
    2690:	e09e      	b.n	27d0 <__aeabi_dadd+0x524>
    2692:	0018      	movs	r0, r3
    2694:	4310      	orrs	r0, r2
    2696:	d100      	bne.n	269a <__aeabi_dadd+0x3ee>
    2698:	e0e9      	b.n	286e <__aeabi_dadd+0x5c2>
    269a:	001c      	movs	r4, r3
    269c:	0017      	movs	r7, r2
    269e:	46d8      	mov	r8, fp
    26a0:	4e88      	ldr	r6, [pc, #544]	; (28c4 <__aeabi_dadd+0x618>)
    26a2:	e687      	b.n	23b4 <__aeabi_dadd+0x108>
    26a4:	2500      	movs	r5, #0
    26a6:	e772      	b.n	258e <__aeabi_dadd+0x2e2>
    26a8:	2100      	movs	r1, #0
    26aa:	e782      	b.n	25b2 <__aeabi_dadd+0x306>
    26ac:	0023      	movs	r3, r4
    26ae:	433b      	orrs	r3, r7
    26b0:	2e00      	cmp	r6, #0
    26b2:	d000      	beq.n	26b6 <__aeabi_dadd+0x40a>
    26b4:	e0ab      	b.n	280e <__aeabi_dadd+0x562>
    26b6:	2b00      	cmp	r3, #0
    26b8:	d100      	bne.n	26bc <__aeabi_dadd+0x410>
    26ba:	e0e7      	b.n	288c <__aeabi_dadd+0x5e0>
    26bc:	000b      	movs	r3, r1
    26be:	4313      	orrs	r3, r2
    26c0:	d100      	bne.n	26c4 <__aeabi_dadd+0x418>
    26c2:	e677      	b.n	23b4 <__aeabi_dadd+0x108>
    26c4:	18ba      	adds	r2, r7, r2
    26c6:	42ba      	cmp	r2, r7
    26c8:	41bf      	sbcs	r7, r7
    26ca:	1864      	adds	r4, r4, r1
    26cc:	427f      	negs	r7, r7
    26ce:	19e4      	adds	r4, r4, r7
    26d0:	0223      	lsls	r3, r4, #8
    26d2:	d400      	bmi.n	26d6 <__aeabi_dadd+0x42a>
    26d4:	e0f2      	b.n	28bc <__aeabi_dadd+0x610>
    26d6:	4b7c      	ldr	r3, [pc, #496]	; (28c8 <__aeabi_dadd+0x61c>)
    26d8:	0017      	movs	r7, r2
    26da:	401c      	ands	r4, r3
    26dc:	0006      	movs	r6, r0
    26de:	e669      	b.n	23b4 <__aeabi_dadd+0x108>
    26e0:	0020      	movs	r0, r4
    26e2:	4338      	orrs	r0, r7
    26e4:	2e00      	cmp	r6, #0
    26e6:	d1d1      	bne.n	268c <__aeabi_dadd+0x3e0>
    26e8:	2800      	cmp	r0, #0
    26ea:	d15b      	bne.n	27a4 <__aeabi_dadd+0x4f8>
    26ec:	001c      	movs	r4, r3
    26ee:	4314      	orrs	r4, r2
    26f0:	d100      	bne.n	26f4 <__aeabi_dadd+0x448>
    26f2:	e0a8      	b.n	2846 <__aeabi_dadd+0x59a>
    26f4:	001c      	movs	r4, r3
    26f6:	0017      	movs	r7, r2
    26f8:	46d8      	mov	r8, fp
    26fa:	e65b      	b.n	23b4 <__aeabi_dadd+0x108>
    26fc:	0006      	movs	r6, r0
    26fe:	2400      	movs	r4, #0
    2700:	2700      	movs	r7, #0
    2702:	e697      	b.n	2434 <__aeabi_dadd+0x188>
    2704:	4650      	mov	r0, sl
    2706:	000b      	movs	r3, r1
    2708:	3820      	subs	r0, #32
    270a:	40c3      	lsrs	r3, r0
    270c:	4699      	mov	r9, r3
    270e:	4653      	mov	r3, sl
    2710:	2b20      	cmp	r3, #32
    2712:	d100      	bne.n	2716 <__aeabi_dadd+0x46a>
    2714:	e095      	b.n	2842 <__aeabi_dadd+0x596>
    2716:	2340      	movs	r3, #64	; 0x40
    2718:	4650      	mov	r0, sl
    271a:	1a1b      	subs	r3, r3, r0
    271c:	4099      	lsls	r1, r3
    271e:	430a      	orrs	r2, r1
    2720:	1e51      	subs	r1, r2, #1
    2722:	418a      	sbcs	r2, r1
    2724:	464b      	mov	r3, r9
    2726:	2100      	movs	r1, #0
    2728:	431a      	orrs	r2, r3
    272a:	e69f      	b.n	246c <__aeabi_dadd+0x1c0>
    272c:	2e00      	cmp	r6, #0
    272e:	d130      	bne.n	2792 <__aeabi_dadd+0x4e6>
    2730:	0026      	movs	r6, r4
    2732:	433e      	orrs	r6, r7
    2734:	d067      	beq.n	2806 <__aeabi_dadd+0x55a>
    2736:	43db      	mvns	r3, r3
    2738:	469a      	mov	sl, r3
    273a:	2b00      	cmp	r3, #0
    273c:	d01c      	beq.n	2778 <__aeabi_dadd+0x4cc>
    273e:	4e61      	ldr	r6, [pc, #388]	; (28c4 <__aeabi_dadd+0x618>)
    2740:	42b0      	cmp	r0, r6
    2742:	d060      	beq.n	2806 <__aeabi_dadd+0x55a>
    2744:	4653      	mov	r3, sl
    2746:	2b38      	cmp	r3, #56	; 0x38
    2748:	dd00      	ble.n	274c <__aeabi_dadd+0x4a0>
    274a:	e096      	b.n	287a <__aeabi_dadd+0x5ce>
    274c:	2b1f      	cmp	r3, #31
    274e:	dd00      	ble.n	2752 <__aeabi_dadd+0x4a6>
    2750:	e09f      	b.n	2892 <__aeabi_dadd+0x5e6>
    2752:	2620      	movs	r6, #32
    2754:	1af3      	subs	r3, r6, r3
    2756:	0026      	movs	r6, r4
    2758:	409e      	lsls	r6, r3
    275a:	469c      	mov	ip, r3
    275c:	46b3      	mov	fp, r6
    275e:	4653      	mov	r3, sl
    2760:	003e      	movs	r6, r7
    2762:	40de      	lsrs	r6, r3
    2764:	0033      	movs	r3, r6
    2766:	465e      	mov	r6, fp
    2768:	431e      	orrs	r6, r3
    276a:	4663      	mov	r3, ip
    276c:	409f      	lsls	r7, r3
    276e:	1e7b      	subs	r3, r7, #1
    2770:	419f      	sbcs	r7, r3
    2772:	4653      	mov	r3, sl
    2774:	40dc      	lsrs	r4, r3
    2776:	4337      	orrs	r7, r6
    2778:	18bf      	adds	r7, r7, r2
    277a:	4297      	cmp	r7, r2
    277c:	4192      	sbcs	r2, r2
    277e:	1864      	adds	r4, r4, r1
    2780:	4252      	negs	r2, r2
    2782:	18a4      	adds	r4, r4, r2
    2784:	0006      	movs	r6, r0
    2786:	e678      	b.n	247a <__aeabi_dadd+0x1ce>
    2788:	4327      	orrs	r7, r4
    278a:	1e7c      	subs	r4, r7, #1
    278c:	41a7      	sbcs	r7, r4
    278e:	2400      	movs	r4, #0
    2790:	e737      	b.n	2602 <__aeabi_dadd+0x356>
    2792:	4e4c      	ldr	r6, [pc, #304]	; (28c4 <__aeabi_dadd+0x618>)
    2794:	42b0      	cmp	r0, r6
    2796:	d036      	beq.n	2806 <__aeabi_dadd+0x55a>
    2798:	2680      	movs	r6, #128	; 0x80
    279a:	425b      	negs	r3, r3
    279c:	0436      	lsls	r6, r6, #16
    279e:	469a      	mov	sl, r3
    27a0:	4334      	orrs	r4, r6
    27a2:	e7cf      	b.n	2744 <__aeabi_dadd+0x498>
    27a4:	0018      	movs	r0, r3
    27a6:	4310      	orrs	r0, r2
    27a8:	d100      	bne.n	27ac <__aeabi_dadd+0x500>
    27aa:	e603      	b.n	23b4 <__aeabi_dadd+0x108>
    27ac:	1ab8      	subs	r0, r7, r2
    27ae:	4684      	mov	ip, r0
    27b0:	4567      	cmp	r7, ip
    27b2:	41ad      	sbcs	r5, r5
    27b4:	1ae0      	subs	r0, r4, r3
    27b6:	426d      	negs	r5, r5
    27b8:	1b40      	subs	r0, r0, r5
    27ba:	0205      	lsls	r5, r0, #8
    27bc:	d400      	bmi.n	27c0 <__aeabi_dadd+0x514>
    27be:	e62c      	b.n	241a <__aeabi_dadd+0x16e>
    27c0:	1bd7      	subs	r7, r2, r7
    27c2:	42ba      	cmp	r2, r7
    27c4:	4192      	sbcs	r2, r2
    27c6:	1b1c      	subs	r4, r3, r4
    27c8:	4252      	negs	r2, r2
    27ca:	1aa4      	subs	r4, r4, r2
    27cc:	46d8      	mov	r8, fp
    27ce:	e5f1      	b.n	23b4 <__aeabi_dadd+0x108>
    27d0:	0018      	movs	r0, r3
    27d2:	4310      	orrs	r0, r2
    27d4:	d100      	bne.n	27d8 <__aeabi_dadd+0x52c>
    27d6:	e763      	b.n	26a0 <__aeabi_dadd+0x3f4>
    27d8:	08f8      	lsrs	r0, r7, #3
    27da:	0767      	lsls	r7, r4, #29
    27dc:	4307      	orrs	r7, r0
    27de:	2080      	movs	r0, #128	; 0x80
    27e0:	08e4      	lsrs	r4, r4, #3
    27e2:	0300      	lsls	r0, r0, #12
    27e4:	4204      	tst	r4, r0
    27e6:	d008      	beq.n	27fa <__aeabi_dadd+0x54e>
    27e8:	08dd      	lsrs	r5, r3, #3
    27ea:	4205      	tst	r5, r0
    27ec:	d105      	bne.n	27fa <__aeabi_dadd+0x54e>
    27ee:	08d2      	lsrs	r2, r2, #3
    27f0:	0759      	lsls	r1, r3, #29
    27f2:	4311      	orrs	r1, r2
    27f4:	000f      	movs	r7, r1
    27f6:	002c      	movs	r4, r5
    27f8:	46d8      	mov	r8, fp
    27fa:	0f7b      	lsrs	r3, r7, #29
    27fc:	00e4      	lsls	r4, r4, #3
    27fe:	431c      	orrs	r4, r3
    2800:	00ff      	lsls	r7, r7, #3
    2802:	4e30      	ldr	r6, [pc, #192]	; (28c4 <__aeabi_dadd+0x618>)
    2804:	e5d6      	b.n	23b4 <__aeabi_dadd+0x108>
    2806:	000c      	movs	r4, r1
    2808:	0017      	movs	r7, r2
    280a:	0006      	movs	r6, r0
    280c:	e5d2      	b.n	23b4 <__aeabi_dadd+0x108>
    280e:	2b00      	cmp	r3, #0
    2810:	d038      	beq.n	2884 <__aeabi_dadd+0x5d8>
    2812:	000b      	movs	r3, r1
    2814:	4313      	orrs	r3, r2
    2816:	d100      	bne.n	281a <__aeabi_dadd+0x56e>
    2818:	e742      	b.n	26a0 <__aeabi_dadd+0x3f4>
    281a:	08f8      	lsrs	r0, r7, #3
    281c:	0767      	lsls	r7, r4, #29
    281e:	4307      	orrs	r7, r0
    2820:	2080      	movs	r0, #128	; 0x80
    2822:	08e4      	lsrs	r4, r4, #3
    2824:	0300      	lsls	r0, r0, #12
    2826:	4204      	tst	r4, r0
    2828:	d0e7      	beq.n	27fa <__aeabi_dadd+0x54e>
    282a:	08cb      	lsrs	r3, r1, #3
    282c:	4203      	tst	r3, r0
    282e:	d1e4      	bne.n	27fa <__aeabi_dadd+0x54e>
    2830:	08d2      	lsrs	r2, r2, #3
    2832:	0749      	lsls	r1, r1, #29
    2834:	4311      	orrs	r1, r2
    2836:	000f      	movs	r7, r1
    2838:	001c      	movs	r4, r3
    283a:	e7de      	b.n	27fa <__aeabi_dadd+0x54e>
    283c:	2700      	movs	r7, #0
    283e:	2400      	movs	r4, #0
    2840:	e5d5      	b.n	23ee <__aeabi_dadd+0x142>
    2842:	2100      	movs	r1, #0
    2844:	e76b      	b.n	271e <__aeabi_dadd+0x472>
    2846:	2500      	movs	r5, #0
    2848:	2700      	movs	r7, #0
    284a:	e5f3      	b.n	2434 <__aeabi_dadd+0x188>
    284c:	464e      	mov	r6, r9
    284e:	0025      	movs	r5, r4
    2850:	3e20      	subs	r6, #32
    2852:	40f5      	lsrs	r5, r6
    2854:	464b      	mov	r3, r9
    2856:	002e      	movs	r6, r5
    2858:	2b20      	cmp	r3, #32
    285a:	d02d      	beq.n	28b8 <__aeabi_dadd+0x60c>
    285c:	2540      	movs	r5, #64	; 0x40
    285e:	1aed      	subs	r5, r5, r3
    2860:	40ac      	lsls	r4, r5
    2862:	4327      	orrs	r7, r4
    2864:	1e7c      	subs	r4, r7, #1
    2866:	41a7      	sbcs	r7, r4
    2868:	2400      	movs	r4, #0
    286a:	4337      	orrs	r7, r6
    286c:	e6c9      	b.n	2602 <__aeabi_dadd+0x356>
    286e:	2480      	movs	r4, #128	; 0x80
    2870:	2500      	movs	r5, #0
    2872:	0324      	lsls	r4, r4, #12
    2874:	4e13      	ldr	r6, [pc, #76]	; (28c4 <__aeabi_dadd+0x618>)
    2876:	2700      	movs	r7, #0
    2878:	e5dc      	b.n	2434 <__aeabi_dadd+0x188>
    287a:	4327      	orrs	r7, r4
    287c:	1e7c      	subs	r4, r7, #1
    287e:	41a7      	sbcs	r7, r4
    2880:	2400      	movs	r4, #0
    2882:	e779      	b.n	2778 <__aeabi_dadd+0x4cc>
    2884:	000c      	movs	r4, r1
    2886:	0017      	movs	r7, r2
    2888:	4e0e      	ldr	r6, [pc, #56]	; (28c4 <__aeabi_dadd+0x618>)
    288a:	e593      	b.n	23b4 <__aeabi_dadd+0x108>
    288c:	000c      	movs	r4, r1
    288e:	0017      	movs	r7, r2
    2890:	e590      	b.n	23b4 <__aeabi_dadd+0x108>
    2892:	4656      	mov	r6, sl
    2894:	0023      	movs	r3, r4
    2896:	3e20      	subs	r6, #32
    2898:	40f3      	lsrs	r3, r6
    289a:	4699      	mov	r9, r3
    289c:	4653      	mov	r3, sl
    289e:	2b20      	cmp	r3, #32
    28a0:	d00e      	beq.n	28c0 <__aeabi_dadd+0x614>
    28a2:	2340      	movs	r3, #64	; 0x40
    28a4:	4656      	mov	r6, sl
    28a6:	1b9b      	subs	r3, r3, r6
    28a8:	409c      	lsls	r4, r3
    28aa:	4327      	orrs	r7, r4
    28ac:	1e7c      	subs	r4, r7, #1
    28ae:	41a7      	sbcs	r7, r4
    28b0:	464b      	mov	r3, r9
    28b2:	2400      	movs	r4, #0
    28b4:	431f      	orrs	r7, r3
    28b6:	e75f      	b.n	2778 <__aeabi_dadd+0x4cc>
    28b8:	2400      	movs	r4, #0
    28ba:	e7d2      	b.n	2862 <__aeabi_dadd+0x5b6>
    28bc:	0017      	movs	r7, r2
    28be:	e5b2      	b.n	2426 <__aeabi_dadd+0x17a>
    28c0:	2400      	movs	r4, #0
    28c2:	e7f2      	b.n	28aa <__aeabi_dadd+0x5fe>
    28c4:	000007ff 	.word	0x000007ff
    28c8:	ff7fffff 	.word	0xff7fffff

000028cc <__aeabi_ddiv>:
    28cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ce:	4657      	mov	r7, sl
    28d0:	4645      	mov	r5, r8
    28d2:	46de      	mov	lr, fp
    28d4:	464e      	mov	r6, r9
    28d6:	b5e0      	push	{r5, r6, r7, lr}
    28d8:	004c      	lsls	r4, r1, #1
    28da:	030e      	lsls	r6, r1, #12
    28dc:	b087      	sub	sp, #28
    28de:	4683      	mov	fp, r0
    28e0:	4692      	mov	sl, r2
    28e2:	001d      	movs	r5, r3
    28e4:	4680      	mov	r8, r0
    28e6:	0b36      	lsrs	r6, r6, #12
    28e8:	0d64      	lsrs	r4, r4, #21
    28ea:	0fcf      	lsrs	r7, r1, #31
    28ec:	2c00      	cmp	r4, #0
    28ee:	d04f      	beq.n	2990 <__aeabi_ddiv+0xc4>
    28f0:	4b6f      	ldr	r3, [pc, #444]	; (2ab0 <__aeabi_ddiv+0x1e4>)
    28f2:	429c      	cmp	r4, r3
    28f4:	d035      	beq.n	2962 <__aeabi_ddiv+0x96>
    28f6:	2380      	movs	r3, #128	; 0x80
    28f8:	0f42      	lsrs	r2, r0, #29
    28fa:	041b      	lsls	r3, r3, #16
    28fc:	00f6      	lsls	r6, r6, #3
    28fe:	4313      	orrs	r3, r2
    2900:	4333      	orrs	r3, r6
    2902:	4699      	mov	r9, r3
    2904:	00c3      	lsls	r3, r0, #3
    2906:	4698      	mov	r8, r3
    2908:	4b6a      	ldr	r3, [pc, #424]	; (2ab4 <__aeabi_ddiv+0x1e8>)
    290a:	2600      	movs	r6, #0
    290c:	469c      	mov	ip, r3
    290e:	2300      	movs	r3, #0
    2910:	4464      	add	r4, ip
    2912:	9303      	str	r3, [sp, #12]
    2914:	032b      	lsls	r3, r5, #12
    2916:	0b1b      	lsrs	r3, r3, #12
    2918:	469b      	mov	fp, r3
    291a:	006b      	lsls	r3, r5, #1
    291c:	0fed      	lsrs	r5, r5, #31
    291e:	4650      	mov	r0, sl
    2920:	0d5b      	lsrs	r3, r3, #21
    2922:	9501      	str	r5, [sp, #4]
    2924:	d05e      	beq.n	29e4 <__aeabi_ddiv+0x118>
    2926:	4a62      	ldr	r2, [pc, #392]	; (2ab0 <__aeabi_ddiv+0x1e4>)
    2928:	4293      	cmp	r3, r2
    292a:	d053      	beq.n	29d4 <__aeabi_ddiv+0x108>
    292c:	465a      	mov	r2, fp
    292e:	00d1      	lsls	r1, r2, #3
    2930:	2280      	movs	r2, #128	; 0x80
    2932:	0f40      	lsrs	r0, r0, #29
    2934:	0412      	lsls	r2, r2, #16
    2936:	4302      	orrs	r2, r0
    2938:	430a      	orrs	r2, r1
    293a:	4693      	mov	fp, r2
    293c:	4652      	mov	r2, sl
    293e:	00d1      	lsls	r1, r2, #3
    2940:	4a5c      	ldr	r2, [pc, #368]	; (2ab4 <__aeabi_ddiv+0x1e8>)
    2942:	4694      	mov	ip, r2
    2944:	2200      	movs	r2, #0
    2946:	4463      	add	r3, ip
    2948:	0038      	movs	r0, r7
    294a:	4068      	eors	r0, r5
    294c:	4684      	mov	ip, r0
    294e:	9002      	str	r0, [sp, #8]
    2950:	1ae4      	subs	r4, r4, r3
    2952:	4316      	orrs	r6, r2
    2954:	2e0f      	cmp	r6, #15
    2956:	d900      	bls.n	295a <__aeabi_ddiv+0x8e>
    2958:	e0b4      	b.n	2ac4 <__aeabi_ddiv+0x1f8>
    295a:	4b57      	ldr	r3, [pc, #348]	; (2ab8 <__aeabi_ddiv+0x1ec>)
    295c:	00b6      	lsls	r6, r6, #2
    295e:	599b      	ldr	r3, [r3, r6]
    2960:	469f      	mov	pc, r3
    2962:	0003      	movs	r3, r0
    2964:	4333      	orrs	r3, r6
    2966:	4699      	mov	r9, r3
    2968:	d16c      	bne.n	2a44 <__aeabi_ddiv+0x178>
    296a:	2300      	movs	r3, #0
    296c:	4698      	mov	r8, r3
    296e:	3302      	adds	r3, #2
    2970:	2608      	movs	r6, #8
    2972:	9303      	str	r3, [sp, #12]
    2974:	e7ce      	b.n	2914 <__aeabi_ddiv+0x48>
    2976:	46cb      	mov	fp, r9
    2978:	4641      	mov	r1, r8
    297a:	9a03      	ldr	r2, [sp, #12]
    297c:	9701      	str	r7, [sp, #4]
    297e:	2a02      	cmp	r2, #2
    2980:	d165      	bne.n	2a4e <__aeabi_ddiv+0x182>
    2982:	9b01      	ldr	r3, [sp, #4]
    2984:	4c4a      	ldr	r4, [pc, #296]	; (2ab0 <__aeabi_ddiv+0x1e4>)
    2986:	469c      	mov	ip, r3
    2988:	2300      	movs	r3, #0
    298a:	2200      	movs	r2, #0
    298c:	4698      	mov	r8, r3
    298e:	e06b      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2990:	0003      	movs	r3, r0
    2992:	4333      	orrs	r3, r6
    2994:	4699      	mov	r9, r3
    2996:	d04e      	beq.n	2a36 <__aeabi_ddiv+0x16a>
    2998:	2e00      	cmp	r6, #0
    299a:	d100      	bne.n	299e <__aeabi_ddiv+0xd2>
    299c:	e1bc      	b.n	2d18 <__aeabi_ddiv+0x44c>
    299e:	0030      	movs	r0, r6
    29a0:	f001 f8ca 	bl	3b38 <__clzsi2>
    29a4:	0003      	movs	r3, r0
    29a6:	3b0b      	subs	r3, #11
    29a8:	2b1c      	cmp	r3, #28
    29aa:	dd00      	ble.n	29ae <__aeabi_ddiv+0xe2>
    29ac:	e1ac      	b.n	2d08 <__aeabi_ddiv+0x43c>
    29ae:	221d      	movs	r2, #29
    29b0:	1ad3      	subs	r3, r2, r3
    29b2:	465a      	mov	r2, fp
    29b4:	0001      	movs	r1, r0
    29b6:	40da      	lsrs	r2, r3
    29b8:	3908      	subs	r1, #8
    29ba:	408e      	lsls	r6, r1
    29bc:	0013      	movs	r3, r2
    29be:	4333      	orrs	r3, r6
    29c0:	4699      	mov	r9, r3
    29c2:	465b      	mov	r3, fp
    29c4:	408b      	lsls	r3, r1
    29c6:	4698      	mov	r8, r3
    29c8:	2300      	movs	r3, #0
    29ca:	4c3c      	ldr	r4, [pc, #240]	; (2abc <__aeabi_ddiv+0x1f0>)
    29cc:	2600      	movs	r6, #0
    29ce:	1a24      	subs	r4, r4, r0
    29d0:	9303      	str	r3, [sp, #12]
    29d2:	e79f      	b.n	2914 <__aeabi_ddiv+0x48>
    29d4:	4651      	mov	r1, sl
    29d6:	465a      	mov	r2, fp
    29d8:	4311      	orrs	r1, r2
    29da:	d129      	bne.n	2a30 <__aeabi_ddiv+0x164>
    29dc:	2200      	movs	r2, #0
    29de:	4693      	mov	fp, r2
    29e0:	3202      	adds	r2, #2
    29e2:	e7b1      	b.n	2948 <__aeabi_ddiv+0x7c>
    29e4:	4659      	mov	r1, fp
    29e6:	4301      	orrs	r1, r0
    29e8:	d01e      	beq.n	2a28 <__aeabi_ddiv+0x15c>
    29ea:	465b      	mov	r3, fp
    29ec:	2b00      	cmp	r3, #0
    29ee:	d100      	bne.n	29f2 <__aeabi_ddiv+0x126>
    29f0:	e19e      	b.n	2d30 <__aeabi_ddiv+0x464>
    29f2:	4658      	mov	r0, fp
    29f4:	f001 f8a0 	bl	3b38 <__clzsi2>
    29f8:	0003      	movs	r3, r0
    29fa:	3b0b      	subs	r3, #11
    29fc:	2b1c      	cmp	r3, #28
    29fe:	dd00      	ble.n	2a02 <__aeabi_ddiv+0x136>
    2a00:	e18f      	b.n	2d22 <__aeabi_ddiv+0x456>
    2a02:	0002      	movs	r2, r0
    2a04:	4659      	mov	r1, fp
    2a06:	3a08      	subs	r2, #8
    2a08:	4091      	lsls	r1, r2
    2a0a:	468b      	mov	fp, r1
    2a0c:	211d      	movs	r1, #29
    2a0e:	1acb      	subs	r3, r1, r3
    2a10:	4651      	mov	r1, sl
    2a12:	40d9      	lsrs	r1, r3
    2a14:	000b      	movs	r3, r1
    2a16:	4659      	mov	r1, fp
    2a18:	430b      	orrs	r3, r1
    2a1a:	4651      	mov	r1, sl
    2a1c:	469b      	mov	fp, r3
    2a1e:	4091      	lsls	r1, r2
    2a20:	4b26      	ldr	r3, [pc, #152]	; (2abc <__aeabi_ddiv+0x1f0>)
    2a22:	2200      	movs	r2, #0
    2a24:	1a1b      	subs	r3, r3, r0
    2a26:	e78f      	b.n	2948 <__aeabi_ddiv+0x7c>
    2a28:	2300      	movs	r3, #0
    2a2a:	2201      	movs	r2, #1
    2a2c:	469b      	mov	fp, r3
    2a2e:	e78b      	b.n	2948 <__aeabi_ddiv+0x7c>
    2a30:	4651      	mov	r1, sl
    2a32:	2203      	movs	r2, #3
    2a34:	e788      	b.n	2948 <__aeabi_ddiv+0x7c>
    2a36:	2300      	movs	r3, #0
    2a38:	4698      	mov	r8, r3
    2a3a:	3301      	adds	r3, #1
    2a3c:	2604      	movs	r6, #4
    2a3e:	2400      	movs	r4, #0
    2a40:	9303      	str	r3, [sp, #12]
    2a42:	e767      	b.n	2914 <__aeabi_ddiv+0x48>
    2a44:	2303      	movs	r3, #3
    2a46:	46b1      	mov	r9, r6
    2a48:	9303      	str	r3, [sp, #12]
    2a4a:	260c      	movs	r6, #12
    2a4c:	e762      	b.n	2914 <__aeabi_ddiv+0x48>
    2a4e:	2a03      	cmp	r2, #3
    2a50:	d100      	bne.n	2a54 <__aeabi_ddiv+0x188>
    2a52:	e25c      	b.n	2f0e <__aeabi_ddiv+0x642>
    2a54:	9b01      	ldr	r3, [sp, #4]
    2a56:	2a01      	cmp	r2, #1
    2a58:	d000      	beq.n	2a5c <__aeabi_ddiv+0x190>
    2a5a:	e1e4      	b.n	2e26 <__aeabi_ddiv+0x55a>
    2a5c:	4013      	ands	r3, r2
    2a5e:	469c      	mov	ip, r3
    2a60:	2300      	movs	r3, #0
    2a62:	2400      	movs	r4, #0
    2a64:	2200      	movs	r2, #0
    2a66:	4698      	mov	r8, r3
    2a68:	2100      	movs	r1, #0
    2a6a:	0312      	lsls	r2, r2, #12
    2a6c:	0b13      	lsrs	r3, r2, #12
    2a6e:	0d0a      	lsrs	r2, r1, #20
    2a70:	0512      	lsls	r2, r2, #20
    2a72:	431a      	orrs	r2, r3
    2a74:	0523      	lsls	r3, r4, #20
    2a76:	4c12      	ldr	r4, [pc, #72]	; (2ac0 <__aeabi_ddiv+0x1f4>)
    2a78:	4640      	mov	r0, r8
    2a7a:	4022      	ands	r2, r4
    2a7c:	4313      	orrs	r3, r2
    2a7e:	4662      	mov	r2, ip
    2a80:	005b      	lsls	r3, r3, #1
    2a82:	07d2      	lsls	r2, r2, #31
    2a84:	085b      	lsrs	r3, r3, #1
    2a86:	4313      	orrs	r3, r2
    2a88:	0019      	movs	r1, r3
    2a8a:	b007      	add	sp, #28
    2a8c:	bc3c      	pop	{r2, r3, r4, r5}
    2a8e:	4690      	mov	r8, r2
    2a90:	4699      	mov	r9, r3
    2a92:	46a2      	mov	sl, r4
    2a94:	46ab      	mov	fp, r5
    2a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a98:	2300      	movs	r3, #0
    2a9a:	2280      	movs	r2, #128	; 0x80
    2a9c:	469c      	mov	ip, r3
    2a9e:	0312      	lsls	r2, r2, #12
    2aa0:	4698      	mov	r8, r3
    2aa2:	4c03      	ldr	r4, [pc, #12]	; (2ab0 <__aeabi_ddiv+0x1e4>)
    2aa4:	e7e0      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2aa6:	2300      	movs	r3, #0
    2aa8:	4c01      	ldr	r4, [pc, #4]	; (2ab0 <__aeabi_ddiv+0x1e4>)
    2aaa:	2200      	movs	r2, #0
    2aac:	4698      	mov	r8, r3
    2aae:	e7db      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2ab0:	000007ff 	.word	0x000007ff
    2ab4:	fffffc01 	.word	0xfffffc01
    2ab8:	00003c0c 	.word	0x00003c0c
    2abc:	fffffc0d 	.word	0xfffffc0d
    2ac0:	800fffff 	.word	0x800fffff
    2ac4:	45d9      	cmp	r9, fp
    2ac6:	d900      	bls.n	2aca <__aeabi_ddiv+0x1fe>
    2ac8:	e139      	b.n	2d3e <__aeabi_ddiv+0x472>
    2aca:	d100      	bne.n	2ace <__aeabi_ddiv+0x202>
    2acc:	e134      	b.n	2d38 <__aeabi_ddiv+0x46c>
    2ace:	2300      	movs	r3, #0
    2ad0:	4646      	mov	r6, r8
    2ad2:	464d      	mov	r5, r9
    2ad4:	469a      	mov	sl, r3
    2ad6:	3c01      	subs	r4, #1
    2ad8:	465b      	mov	r3, fp
    2ada:	0e0a      	lsrs	r2, r1, #24
    2adc:	021b      	lsls	r3, r3, #8
    2ade:	431a      	orrs	r2, r3
    2ae0:	020b      	lsls	r3, r1, #8
    2ae2:	0c17      	lsrs	r7, r2, #16
    2ae4:	9303      	str	r3, [sp, #12]
    2ae6:	0413      	lsls	r3, r2, #16
    2ae8:	0c1b      	lsrs	r3, r3, #16
    2aea:	0039      	movs	r1, r7
    2aec:	0028      	movs	r0, r5
    2aee:	4690      	mov	r8, r2
    2af0:	9301      	str	r3, [sp, #4]
    2af2:	f7ff fb4f 	bl	2194 <__udivsi3>
    2af6:	0002      	movs	r2, r0
    2af8:	9b01      	ldr	r3, [sp, #4]
    2afa:	4683      	mov	fp, r0
    2afc:	435a      	muls	r2, r3
    2afe:	0028      	movs	r0, r5
    2b00:	0039      	movs	r1, r7
    2b02:	4691      	mov	r9, r2
    2b04:	f7ff fbcc 	bl	22a0 <__aeabi_uidivmod>
    2b08:	0c35      	lsrs	r5, r6, #16
    2b0a:	0409      	lsls	r1, r1, #16
    2b0c:	430d      	orrs	r5, r1
    2b0e:	45a9      	cmp	r9, r5
    2b10:	d90d      	bls.n	2b2e <__aeabi_ddiv+0x262>
    2b12:	465b      	mov	r3, fp
    2b14:	4445      	add	r5, r8
    2b16:	3b01      	subs	r3, #1
    2b18:	45a8      	cmp	r8, r5
    2b1a:	d900      	bls.n	2b1e <__aeabi_ddiv+0x252>
    2b1c:	e13a      	b.n	2d94 <__aeabi_ddiv+0x4c8>
    2b1e:	45a9      	cmp	r9, r5
    2b20:	d800      	bhi.n	2b24 <__aeabi_ddiv+0x258>
    2b22:	e137      	b.n	2d94 <__aeabi_ddiv+0x4c8>
    2b24:	2302      	movs	r3, #2
    2b26:	425b      	negs	r3, r3
    2b28:	469c      	mov	ip, r3
    2b2a:	4445      	add	r5, r8
    2b2c:	44e3      	add	fp, ip
    2b2e:	464b      	mov	r3, r9
    2b30:	1aeb      	subs	r3, r5, r3
    2b32:	0039      	movs	r1, r7
    2b34:	0018      	movs	r0, r3
    2b36:	9304      	str	r3, [sp, #16]
    2b38:	f7ff fb2c 	bl	2194 <__udivsi3>
    2b3c:	9b01      	ldr	r3, [sp, #4]
    2b3e:	0005      	movs	r5, r0
    2b40:	4343      	muls	r3, r0
    2b42:	0039      	movs	r1, r7
    2b44:	9804      	ldr	r0, [sp, #16]
    2b46:	4699      	mov	r9, r3
    2b48:	f7ff fbaa 	bl	22a0 <__aeabi_uidivmod>
    2b4c:	0433      	lsls	r3, r6, #16
    2b4e:	0409      	lsls	r1, r1, #16
    2b50:	0c1b      	lsrs	r3, r3, #16
    2b52:	430b      	orrs	r3, r1
    2b54:	4599      	cmp	r9, r3
    2b56:	d909      	bls.n	2b6c <__aeabi_ddiv+0x2a0>
    2b58:	4443      	add	r3, r8
    2b5a:	1e6a      	subs	r2, r5, #1
    2b5c:	4598      	cmp	r8, r3
    2b5e:	d900      	bls.n	2b62 <__aeabi_ddiv+0x296>
    2b60:	e11a      	b.n	2d98 <__aeabi_ddiv+0x4cc>
    2b62:	4599      	cmp	r9, r3
    2b64:	d800      	bhi.n	2b68 <__aeabi_ddiv+0x29c>
    2b66:	e117      	b.n	2d98 <__aeabi_ddiv+0x4cc>
    2b68:	3d02      	subs	r5, #2
    2b6a:	4443      	add	r3, r8
    2b6c:	464a      	mov	r2, r9
    2b6e:	1a9b      	subs	r3, r3, r2
    2b70:	465a      	mov	r2, fp
    2b72:	0412      	lsls	r2, r2, #16
    2b74:	432a      	orrs	r2, r5
    2b76:	9903      	ldr	r1, [sp, #12]
    2b78:	4693      	mov	fp, r2
    2b7a:	0c10      	lsrs	r0, r2, #16
    2b7c:	0c0a      	lsrs	r2, r1, #16
    2b7e:	4691      	mov	r9, r2
    2b80:	0409      	lsls	r1, r1, #16
    2b82:	465a      	mov	r2, fp
    2b84:	0c09      	lsrs	r1, r1, #16
    2b86:	464e      	mov	r6, r9
    2b88:	000d      	movs	r5, r1
    2b8a:	0412      	lsls	r2, r2, #16
    2b8c:	0c12      	lsrs	r2, r2, #16
    2b8e:	4345      	muls	r5, r0
    2b90:	9105      	str	r1, [sp, #20]
    2b92:	4351      	muls	r1, r2
    2b94:	4372      	muls	r2, r6
    2b96:	4370      	muls	r0, r6
    2b98:	1952      	adds	r2, r2, r5
    2b9a:	0c0e      	lsrs	r6, r1, #16
    2b9c:	18b2      	adds	r2, r6, r2
    2b9e:	4295      	cmp	r5, r2
    2ba0:	d903      	bls.n	2baa <__aeabi_ddiv+0x2de>
    2ba2:	2580      	movs	r5, #128	; 0x80
    2ba4:	026d      	lsls	r5, r5, #9
    2ba6:	46ac      	mov	ip, r5
    2ba8:	4460      	add	r0, ip
    2baa:	0c15      	lsrs	r5, r2, #16
    2bac:	0409      	lsls	r1, r1, #16
    2bae:	0412      	lsls	r2, r2, #16
    2bb0:	0c09      	lsrs	r1, r1, #16
    2bb2:	1828      	adds	r0, r5, r0
    2bb4:	1852      	adds	r2, r2, r1
    2bb6:	4283      	cmp	r3, r0
    2bb8:	d200      	bcs.n	2bbc <__aeabi_ddiv+0x2f0>
    2bba:	e0ce      	b.n	2d5a <__aeabi_ddiv+0x48e>
    2bbc:	d100      	bne.n	2bc0 <__aeabi_ddiv+0x2f4>
    2bbe:	e0c8      	b.n	2d52 <__aeabi_ddiv+0x486>
    2bc0:	1a1d      	subs	r5, r3, r0
    2bc2:	4653      	mov	r3, sl
    2bc4:	1a9e      	subs	r6, r3, r2
    2bc6:	45b2      	cmp	sl, r6
    2bc8:	4192      	sbcs	r2, r2
    2bca:	4252      	negs	r2, r2
    2bcc:	1aab      	subs	r3, r5, r2
    2bce:	469a      	mov	sl, r3
    2bd0:	4598      	cmp	r8, r3
    2bd2:	d100      	bne.n	2bd6 <__aeabi_ddiv+0x30a>
    2bd4:	e117      	b.n	2e06 <__aeabi_ddiv+0x53a>
    2bd6:	0039      	movs	r1, r7
    2bd8:	0018      	movs	r0, r3
    2bda:	f7ff fadb 	bl	2194 <__udivsi3>
    2bde:	9b01      	ldr	r3, [sp, #4]
    2be0:	0005      	movs	r5, r0
    2be2:	4343      	muls	r3, r0
    2be4:	0039      	movs	r1, r7
    2be6:	4650      	mov	r0, sl
    2be8:	9304      	str	r3, [sp, #16]
    2bea:	f7ff fb59 	bl	22a0 <__aeabi_uidivmod>
    2bee:	9804      	ldr	r0, [sp, #16]
    2bf0:	040b      	lsls	r3, r1, #16
    2bf2:	0c31      	lsrs	r1, r6, #16
    2bf4:	4319      	orrs	r1, r3
    2bf6:	4288      	cmp	r0, r1
    2bf8:	d909      	bls.n	2c0e <__aeabi_ddiv+0x342>
    2bfa:	4441      	add	r1, r8
    2bfc:	1e6b      	subs	r3, r5, #1
    2bfe:	4588      	cmp	r8, r1
    2c00:	d900      	bls.n	2c04 <__aeabi_ddiv+0x338>
    2c02:	e107      	b.n	2e14 <__aeabi_ddiv+0x548>
    2c04:	4288      	cmp	r0, r1
    2c06:	d800      	bhi.n	2c0a <__aeabi_ddiv+0x33e>
    2c08:	e104      	b.n	2e14 <__aeabi_ddiv+0x548>
    2c0a:	3d02      	subs	r5, #2
    2c0c:	4441      	add	r1, r8
    2c0e:	9b04      	ldr	r3, [sp, #16]
    2c10:	1acb      	subs	r3, r1, r3
    2c12:	0018      	movs	r0, r3
    2c14:	0039      	movs	r1, r7
    2c16:	9304      	str	r3, [sp, #16]
    2c18:	f7ff fabc 	bl	2194 <__udivsi3>
    2c1c:	9b01      	ldr	r3, [sp, #4]
    2c1e:	4682      	mov	sl, r0
    2c20:	4343      	muls	r3, r0
    2c22:	0039      	movs	r1, r7
    2c24:	9804      	ldr	r0, [sp, #16]
    2c26:	9301      	str	r3, [sp, #4]
    2c28:	f7ff fb3a 	bl	22a0 <__aeabi_uidivmod>
    2c2c:	9801      	ldr	r0, [sp, #4]
    2c2e:	040b      	lsls	r3, r1, #16
    2c30:	0431      	lsls	r1, r6, #16
    2c32:	0c09      	lsrs	r1, r1, #16
    2c34:	4319      	orrs	r1, r3
    2c36:	4288      	cmp	r0, r1
    2c38:	d90d      	bls.n	2c56 <__aeabi_ddiv+0x38a>
    2c3a:	4653      	mov	r3, sl
    2c3c:	4441      	add	r1, r8
    2c3e:	3b01      	subs	r3, #1
    2c40:	4588      	cmp	r8, r1
    2c42:	d900      	bls.n	2c46 <__aeabi_ddiv+0x37a>
    2c44:	e0e8      	b.n	2e18 <__aeabi_ddiv+0x54c>
    2c46:	4288      	cmp	r0, r1
    2c48:	d800      	bhi.n	2c4c <__aeabi_ddiv+0x380>
    2c4a:	e0e5      	b.n	2e18 <__aeabi_ddiv+0x54c>
    2c4c:	2302      	movs	r3, #2
    2c4e:	425b      	negs	r3, r3
    2c50:	469c      	mov	ip, r3
    2c52:	4441      	add	r1, r8
    2c54:	44e2      	add	sl, ip
    2c56:	9b01      	ldr	r3, [sp, #4]
    2c58:	042d      	lsls	r5, r5, #16
    2c5a:	1ace      	subs	r6, r1, r3
    2c5c:	4651      	mov	r1, sl
    2c5e:	4329      	orrs	r1, r5
    2c60:	9d05      	ldr	r5, [sp, #20]
    2c62:	464f      	mov	r7, r9
    2c64:	002a      	movs	r2, r5
    2c66:	040b      	lsls	r3, r1, #16
    2c68:	0c08      	lsrs	r0, r1, #16
    2c6a:	0c1b      	lsrs	r3, r3, #16
    2c6c:	435a      	muls	r2, r3
    2c6e:	4345      	muls	r5, r0
    2c70:	437b      	muls	r3, r7
    2c72:	4378      	muls	r0, r7
    2c74:	195b      	adds	r3, r3, r5
    2c76:	0c17      	lsrs	r7, r2, #16
    2c78:	18fb      	adds	r3, r7, r3
    2c7a:	429d      	cmp	r5, r3
    2c7c:	d903      	bls.n	2c86 <__aeabi_ddiv+0x3ba>
    2c7e:	2580      	movs	r5, #128	; 0x80
    2c80:	026d      	lsls	r5, r5, #9
    2c82:	46ac      	mov	ip, r5
    2c84:	4460      	add	r0, ip
    2c86:	0c1d      	lsrs	r5, r3, #16
    2c88:	0412      	lsls	r2, r2, #16
    2c8a:	041b      	lsls	r3, r3, #16
    2c8c:	0c12      	lsrs	r2, r2, #16
    2c8e:	1828      	adds	r0, r5, r0
    2c90:	189b      	adds	r3, r3, r2
    2c92:	4286      	cmp	r6, r0
    2c94:	d200      	bcs.n	2c98 <__aeabi_ddiv+0x3cc>
    2c96:	e093      	b.n	2dc0 <__aeabi_ddiv+0x4f4>
    2c98:	d100      	bne.n	2c9c <__aeabi_ddiv+0x3d0>
    2c9a:	e08e      	b.n	2dba <__aeabi_ddiv+0x4ee>
    2c9c:	2301      	movs	r3, #1
    2c9e:	4319      	orrs	r1, r3
    2ca0:	4ba0      	ldr	r3, [pc, #640]	; (2f24 <__aeabi_ddiv+0x658>)
    2ca2:	18e3      	adds	r3, r4, r3
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	dc00      	bgt.n	2caa <__aeabi_ddiv+0x3de>
    2ca8:	e099      	b.n	2dde <__aeabi_ddiv+0x512>
    2caa:	074a      	lsls	r2, r1, #29
    2cac:	d000      	beq.n	2cb0 <__aeabi_ddiv+0x3e4>
    2cae:	e09e      	b.n	2dee <__aeabi_ddiv+0x522>
    2cb0:	465a      	mov	r2, fp
    2cb2:	01d2      	lsls	r2, r2, #7
    2cb4:	d506      	bpl.n	2cc4 <__aeabi_ddiv+0x3f8>
    2cb6:	465a      	mov	r2, fp
    2cb8:	4b9b      	ldr	r3, [pc, #620]	; (2f28 <__aeabi_ddiv+0x65c>)
    2cba:	401a      	ands	r2, r3
    2cbc:	2380      	movs	r3, #128	; 0x80
    2cbe:	4693      	mov	fp, r2
    2cc0:	00db      	lsls	r3, r3, #3
    2cc2:	18e3      	adds	r3, r4, r3
    2cc4:	4a99      	ldr	r2, [pc, #612]	; (2f2c <__aeabi_ddiv+0x660>)
    2cc6:	4293      	cmp	r3, r2
    2cc8:	dd68      	ble.n	2d9c <__aeabi_ddiv+0x4d0>
    2cca:	2301      	movs	r3, #1
    2ccc:	9a02      	ldr	r2, [sp, #8]
    2cce:	4c98      	ldr	r4, [pc, #608]	; (2f30 <__aeabi_ddiv+0x664>)
    2cd0:	401a      	ands	r2, r3
    2cd2:	2300      	movs	r3, #0
    2cd4:	4694      	mov	ip, r2
    2cd6:	4698      	mov	r8, r3
    2cd8:	2200      	movs	r2, #0
    2cda:	e6c5      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2cdc:	2280      	movs	r2, #128	; 0x80
    2cde:	464b      	mov	r3, r9
    2ce0:	0312      	lsls	r2, r2, #12
    2ce2:	4213      	tst	r3, r2
    2ce4:	d00a      	beq.n	2cfc <__aeabi_ddiv+0x430>
    2ce6:	465b      	mov	r3, fp
    2ce8:	4213      	tst	r3, r2
    2cea:	d106      	bne.n	2cfa <__aeabi_ddiv+0x42e>
    2cec:	431a      	orrs	r2, r3
    2cee:	0312      	lsls	r2, r2, #12
    2cf0:	0b12      	lsrs	r2, r2, #12
    2cf2:	46ac      	mov	ip, r5
    2cf4:	4688      	mov	r8, r1
    2cf6:	4c8e      	ldr	r4, [pc, #568]	; (2f30 <__aeabi_ddiv+0x664>)
    2cf8:	e6b6      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2cfa:	464b      	mov	r3, r9
    2cfc:	431a      	orrs	r2, r3
    2cfe:	0312      	lsls	r2, r2, #12
    2d00:	0b12      	lsrs	r2, r2, #12
    2d02:	46bc      	mov	ip, r7
    2d04:	4c8a      	ldr	r4, [pc, #552]	; (2f30 <__aeabi_ddiv+0x664>)
    2d06:	e6af      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2d08:	0003      	movs	r3, r0
    2d0a:	465a      	mov	r2, fp
    2d0c:	3b28      	subs	r3, #40	; 0x28
    2d0e:	409a      	lsls	r2, r3
    2d10:	2300      	movs	r3, #0
    2d12:	4691      	mov	r9, r2
    2d14:	4698      	mov	r8, r3
    2d16:	e657      	b.n	29c8 <__aeabi_ddiv+0xfc>
    2d18:	4658      	mov	r0, fp
    2d1a:	f000 ff0d 	bl	3b38 <__clzsi2>
    2d1e:	3020      	adds	r0, #32
    2d20:	e640      	b.n	29a4 <__aeabi_ddiv+0xd8>
    2d22:	0003      	movs	r3, r0
    2d24:	4652      	mov	r2, sl
    2d26:	3b28      	subs	r3, #40	; 0x28
    2d28:	409a      	lsls	r2, r3
    2d2a:	2100      	movs	r1, #0
    2d2c:	4693      	mov	fp, r2
    2d2e:	e677      	b.n	2a20 <__aeabi_ddiv+0x154>
    2d30:	f000 ff02 	bl	3b38 <__clzsi2>
    2d34:	3020      	adds	r0, #32
    2d36:	e65f      	b.n	29f8 <__aeabi_ddiv+0x12c>
    2d38:	4588      	cmp	r8, r1
    2d3a:	d200      	bcs.n	2d3e <__aeabi_ddiv+0x472>
    2d3c:	e6c7      	b.n	2ace <__aeabi_ddiv+0x202>
    2d3e:	464b      	mov	r3, r9
    2d40:	07de      	lsls	r6, r3, #31
    2d42:	085d      	lsrs	r5, r3, #1
    2d44:	4643      	mov	r3, r8
    2d46:	085b      	lsrs	r3, r3, #1
    2d48:	431e      	orrs	r6, r3
    2d4a:	4643      	mov	r3, r8
    2d4c:	07db      	lsls	r3, r3, #31
    2d4e:	469a      	mov	sl, r3
    2d50:	e6c2      	b.n	2ad8 <__aeabi_ddiv+0x20c>
    2d52:	2500      	movs	r5, #0
    2d54:	4592      	cmp	sl, r2
    2d56:	d300      	bcc.n	2d5a <__aeabi_ddiv+0x48e>
    2d58:	e733      	b.n	2bc2 <__aeabi_ddiv+0x2f6>
    2d5a:	9e03      	ldr	r6, [sp, #12]
    2d5c:	4659      	mov	r1, fp
    2d5e:	46b4      	mov	ip, r6
    2d60:	44e2      	add	sl, ip
    2d62:	45b2      	cmp	sl, r6
    2d64:	41ad      	sbcs	r5, r5
    2d66:	426d      	negs	r5, r5
    2d68:	4445      	add	r5, r8
    2d6a:	18eb      	adds	r3, r5, r3
    2d6c:	3901      	subs	r1, #1
    2d6e:	4598      	cmp	r8, r3
    2d70:	d207      	bcs.n	2d82 <__aeabi_ddiv+0x4b6>
    2d72:	4298      	cmp	r0, r3
    2d74:	d900      	bls.n	2d78 <__aeabi_ddiv+0x4ac>
    2d76:	e07f      	b.n	2e78 <__aeabi_ddiv+0x5ac>
    2d78:	d100      	bne.n	2d7c <__aeabi_ddiv+0x4b0>
    2d7a:	e0bc      	b.n	2ef6 <__aeabi_ddiv+0x62a>
    2d7c:	1a1d      	subs	r5, r3, r0
    2d7e:	468b      	mov	fp, r1
    2d80:	e71f      	b.n	2bc2 <__aeabi_ddiv+0x2f6>
    2d82:	4598      	cmp	r8, r3
    2d84:	d1fa      	bne.n	2d7c <__aeabi_ddiv+0x4b0>
    2d86:	9d03      	ldr	r5, [sp, #12]
    2d88:	4555      	cmp	r5, sl
    2d8a:	d9f2      	bls.n	2d72 <__aeabi_ddiv+0x4a6>
    2d8c:	4643      	mov	r3, r8
    2d8e:	468b      	mov	fp, r1
    2d90:	1a1d      	subs	r5, r3, r0
    2d92:	e716      	b.n	2bc2 <__aeabi_ddiv+0x2f6>
    2d94:	469b      	mov	fp, r3
    2d96:	e6ca      	b.n	2b2e <__aeabi_ddiv+0x262>
    2d98:	0015      	movs	r5, r2
    2d9a:	e6e7      	b.n	2b6c <__aeabi_ddiv+0x2a0>
    2d9c:	465a      	mov	r2, fp
    2d9e:	08c9      	lsrs	r1, r1, #3
    2da0:	0752      	lsls	r2, r2, #29
    2da2:	430a      	orrs	r2, r1
    2da4:	055b      	lsls	r3, r3, #21
    2da6:	4690      	mov	r8, r2
    2da8:	0d5c      	lsrs	r4, r3, #21
    2daa:	465a      	mov	r2, fp
    2dac:	2301      	movs	r3, #1
    2dae:	9902      	ldr	r1, [sp, #8]
    2db0:	0252      	lsls	r2, r2, #9
    2db2:	4019      	ands	r1, r3
    2db4:	0b12      	lsrs	r2, r2, #12
    2db6:	468c      	mov	ip, r1
    2db8:	e656      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d100      	bne.n	2dc0 <__aeabi_ddiv+0x4f4>
    2dbe:	e76f      	b.n	2ca0 <__aeabi_ddiv+0x3d4>
    2dc0:	4446      	add	r6, r8
    2dc2:	1e4a      	subs	r2, r1, #1
    2dc4:	45b0      	cmp	r8, r6
    2dc6:	d929      	bls.n	2e1c <__aeabi_ddiv+0x550>
    2dc8:	0011      	movs	r1, r2
    2dca:	4286      	cmp	r6, r0
    2dcc:	d000      	beq.n	2dd0 <__aeabi_ddiv+0x504>
    2dce:	e765      	b.n	2c9c <__aeabi_ddiv+0x3d0>
    2dd0:	9a03      	ldr	r2, [sp, #12]
    2dd2:	4293      	cmp	r3, r2
    2dd4:	d000      	beq.n	2dd8 <__aeabi_ddiv+0x50c>
    2dd6:	e761      	b.n	2c9c <__aeabi_ddiv+0x3d0>
    2dd8:	e762      	b.n	2ca0 <__aeabi_ddiv+0x3d4>
    2dda:	2101      	movs	r1, #1
    2ddc:	4249      	negs	r1, r1
    2dde:	2001      	movs	r0, #1
    2de0:	1ac2      	subs	r2, r0, r3
    2de2:	2a38      	cmp	r2, #56	; 0x38
    2de4:	dd21      	ble.n	2e2a <__aeabi_ddiv+0x55e>
    2de6:	9b02      	ldr	r3, [sp, #8]
    2de8:	4003      	ands	r3, r0
    2dea:	469c      	mov	ip, r3
    2dec:	e638      	b.n	2a60 <__aeabi_ddiv+0x194>
    2dee:	220f      	movs	r2, #15
    2df0:	400a      	ands	r2, r1
    2df2:	2a04      	cmp	r2, #4
    2df4:	d100      	bne.n	2df8 <__aeabi_ddiv+0x52c>
    2df6:	e75b      	b.n	2cb0 <__aeabi_ddiv+0x3e4>
    2df8:	000a      	movs	r2, r1
    2dfa:	1d11      	adds	r1, r2, #4
    2dfc:	4291      	cmp	r1, r2
    2dfe:	4192      	sbcs	r2, r2
    2e00:	4252      	negs	r2, r2
    2e02:	4493      	add	fp, r2
    2e04:	e754      	b.n	2cb0 <__aeabi_ddiv+0x3e4>
    2e06:	4b47      	ldr	r3, [pc, #284]	; (2f24 <__aeabi_ddiv+0x658>)
    2e08:	18e3      	adds	r3, r4, r3
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	dde5      	ble.n	2dda <__aeabi_ddiv+0x50e>
    2e0e:	2201      	movs	r2, #1
    2e10:	4252      	negs	r2, r2
    2e12:	e7f2      	b.n	2dfa <__aeabi_ddiv+0x52e>
    2e14:	001d      	movs	r5, r3
    2e16:	e6fa      	b.n	2c0e <__aeabi_ddiv+0x342>
    2e18:	469a      	mov	sl, r3
    2e1a:	e71c      	b.n	2c56 <__aeabi_ddiv+0x38a>
    2e1c:	42b0      	cmp	r0, r6
    2e1e:	d839      	bhi.n	2e94 <__aeabi_ddiv+0x5c8>
    2e20:	d06e      	beq.n	2f00 <__aeabi_ddiv+0x634>
    2e22:	0011      	movs	r1, r2
    2e24:	e73a      	b.n	2c9c <__aeabi_ddiv+0x3d0>
    2e26:	9302      	str	r3, [sp, #8]
    2e28:	e73a      	b.n	2ca0 <__aeabi_ddiv+0x3d4>
    2e2a:	2a1f      	cmp	r2, #31
    2e2c:	dc3c      	bgt.n	2ea8 <__aeabi_ddiv+0x5dc>
    2e2e:	2320      	movs	r3, #32
    2e30:	1a9b      	subs	r3, r3, r2
    2e32:	000c      	movs	r4, r1
    2e34:	4658      	mov	r0, fp
    2e36:	4099      	lsls	r1, r3
    2e38:	4098      	lsls	r0, r3
    2e3a:	1e4b      	subs	r3, r1, #1
    2e3c:	4199      	sbcs	r1, r3
    2e3e:	465b      	mov	r3, fp
    2e40:	40d4      	lsrs	r4, r2
    2e42:	40d3      	lsrs	r3, r2
    2e44:	4320      	orrs	r0, r4
    2e46:	4308      	orrs	r0, r1
    2e48:	001a      	movs	r2, r3
    2e4a:	0743      	lsls	r3, r0, #29
    2e4c:	d009      	beq.n	2e62 <__aeabi_ddiv+0x596>
    2e4e:	230f      	movs	r3, #15
    2e50:	4003      	ands	r3, r0
    2e52:	2b04      	cmp	r3, #4
    2e54:	d005      	beq.n	2e62 <__aeabi_ddiv+0x596>
    2e56:	0001      	movs	r1, r0
    2e58:	1d08      	adds	r0, r1, #4
    2e5a:	4288      	cmp	r0, r1
    2e5c:	419b      	sbcs	r3, r3
    2e5e:	425b      	negs	r3, r3
    2e60:	18d2      	adds	r2, r2, r3
    2e62:	0213      	lsls	r3, r2, #8
    2e64:	d53a      	bpl.n	2edc <__aeabi_ddiv+0x610>
    2e66:	2301      	movs	r3, #1
    2e68:	9a02      	ldr	r2, [sp, #8]
    2e6a:	2401      	movs	r4, #1
    2e6c:	401a      	ands	r2, r3
    2e6e:	2300      	movs	r3, #0
    2e70:	4694      	mov	ip, r2
    2e72:	4698      	mov	r8, r3
    2e74:	2200      	movs	r2, #0
    2e76:	e5f7      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2e78:	2102      	movs	r1, #2
    2e7a:	4249      	negs	r1, r1
    2e7c:	468c      	mov	ip, r1
    2e7e:	9d03      	ldr	r5, [sp, #12]
    2e80:	44e3      	add	fp, ip
    2e82:	46ac      	mov	ip, r5
    2e84:	44e2      	add	sl, ip
    2e86:	45aa      	cmp	sl, r5
    2e88:	41ad      	sbcs	r5, r5
    2e8a:	426d      	negs	r5, r5
    2e8c:	4445      	add	r5, r8
    2e8e:	18ed      	adds	r5, r5, r3
    2e90:	1a2d      	subs	r5, r5, r0
    2e92:	e696      	b.n	2bc2 <__aeabi_ddiv+0x2f6>
    2e94:	1e8a      	subs	r2, r1, #2
    2e96:	9903      	ldr	r1, [sp, #12]
    2e98:	004d      	lsls	r5, r1, #1
    2e9a:	428d      	cmp	r5, r1
    2e9c:	4189      	sbcs	r1, r1
    2e9e:	4249      	negs	r1, r1
    2ea0:	4441      	add	r1, r8
    2ea2:	1876      	adds	r6, r6, r1
    2ea4:	9503      	str	r5, [sp, #12]
    2ea6:	e78f      	b.n	2dc8 <__aeabi_ddiv+0x4fc>
    2ea8:	201f      	movs	r0, #31
    2eaa:	4240      	negs	r0, r0
    2eac:	1ac3      	subs	r3, r0, r3
    2eae:	4658      	mov	r0, fp
    2eb0:	40d8      	lsrs	r0, r3
    2eb2:	0003      	movs	r3, r0
    2eb4:	2a20      	cmp	r2, #32
    2eb6:	d028      	beq.n	2f0a <__aeabi_ddiv+0x63e>
    2eb8:	2040      	movs	r0, #64	; 0x40
    2eba:	465d      	mov	r5, fp
    2ebc:	1a82      	subs	r2, r0, r2
    2ebe:	4095      	lsls	r5, r2
    2ec0:	4329      	orrs	r1, r5
    2ec2:	1e4a      	subs	r2, r1, #1
    2ec4:	4191      	sbcs	r1, r2
    2ec6:	4319      	orrs	r1, r3
    2ec8:	2307      	movs	r3, #7
    2eca:	2200      	movs	r2, #0
    2ecc:	400b      	ands	r3, r1
    2ece:	d009      	beq.n	2ee4 <__aeabi_ddiv+0x618>
    2ed0:	230f      	movs	r3, #15
    2ed2:	2200      	movs	r2, #0
    2ed4:	400b      	ands	r3, r1
    2ed6:	0008      	movs	r0, r1
    2ed8:	2b04      	cmp	r3, #4
    2eda:	d1bd      	bne.n	2e58 <__aeabi_ddiv+0x58c>
    2edc:	0001      	movs	r1, r0
    2ede:	0753      	lsls	r3, r2, #29
    2ee0:	0252      	lsls	r2, r2, #9
    2ee2:	0b12      	lsrs	r2, r2, #12
    2ee4:	08c9      	lsrs	r1, r1, #3
    2ee6:	4319      	orrs	r1, r3
    2ee8:	2301      	movs	r3, #1
    2eea:	4688      	mov	r8, r1
    2eec:	9902      	ldr	r1, [sp, #8]
    2eee:	2400      	movs	r4, #0
    2ef0:	4019      	ands	r1, r3
    2ef2:	468c      	mov	ip, r1
    2ef4:	e5b8      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2ef6:	4552      	cmp	r2, sl
    2ef8:	d8be      	bhi.n	2e78 <__aeabi_ddiv+0x5ac>
    2efa:	468b      	mov	fp, r1
    2efc:	2500      	movs	r5, #0
    2efe:	e660      	b.n	2bc2 <__aeabi_ddiv+0x2f6>
    2f00:	9d03      	ldr	r5, [sp, #12]
    2f02:	429d      	cmp	r5, r3
    2f04:	d3c6      	bcc.n	2e94 <__aeabi_ddiv+0x5c8>
    2f06:	0011      	movs	r1, r2
    2f08:	e762      	b.n	2dd0 <__aeabi_ddiv+0x504>
    2f0a:	2500      	movs	r5, #0
    2f0c:	e7d8      	b.n	2ec0 <__aeabi_ddiv+0x5f4>
    2f0e:	2280      	movs	r2, #128	; 0x80
    2f10:	465b      	mov	r3, fp
    2f12:	0312      	lsls	r2, r2, #12
    2f14:	431a      	orrs	r2, r3
    2f16:	9b01      	ldr	r3, [sp, #4]
    2f18:	0312      	lsls	r2, r2, #12
    2f1a:	0b12      	lsrs	r2, r2, #12
    2f1c:	469c      	mov	ip, r3
    2f1e:	4688      	mov	r8, r1
    2f20:	4c03      	ldr	r4, [pc, #12]	; (2f30 <__aeabi_ddiv+0x664>)
    2f22:	e5a1      	b.n	2a68 <__aeabi_ddiv+0x19c>
    2f24:	000003ff 	.word	0x000003ff
    2f28:	feffffff 	.word	0xfeffffff
    2f2c:	000007fe 	.word	0x000007fe
    2f30:	000007ff 	.word	0x000007ff

00002f34 <__aeabi_dmul>:
    2f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f36:	4657      	mov	r7, sl
    2f38:	4645      	mov	r5, r8
    2f3a:	46de      	mov	lr, fp
    2f3c:	464e      	mov	r6, r9
    2f3e:	b5e0      	push	{r5, r6, r7, lr}
    2f40:	030c      	lsls	r4, r1, #12
    2f42:	4698      	mov	r8, r3
    2f44:	004e      	lsls	r6, r1, #1
    2f46:	0b23      	lsrs	r3, r4, #12
    2f48:	b087      	sub	sp, #28
    2f4a:	0007      	movs	r7, r0
    2f4c:	4692      	mov	sl, r2
    2f4e:	469b      	mov	fp, r3
    2f50:	0d76      	lsrs	r6, r6, #21
    2f52:	0fcd      	lsrs	r5, r1, #31
    2f54:	2e00      	cmp	r6, #0
    2f56:	d06b      	beq.n	3030 <__aeabi_dmul+0xfc>
    2f58:	4b6d      	ldr	r3, [pc, #436]	; (3110 <__aeabi_dmul+0x1dc>)
    2f5a:	429e      	cmp	r6, r3
    2f5c:	d035      	beq.n	2fca <__aeabi_dmul+0x96>
    2f5e:	2480      	movs	r4, #128	; 0x80
    2f60:	465b      	mov	r3, fp
    2f62:	0f42      	lsrs	r2, r0, #29
    2f64:	0424      	lsls	r4, r4, #16
    2f66:	00db      	lsls	r3, r3, #3
    2f68:	4314      	orrs	r4, r2
    2f6a:	431c      	orrs	r4, r3
    2f6c:	00c3      	lsls	r3, r0, #3
    2f6e:	4699      	mov	r9, r3
    2f70:	4b68      	ldr	r3, [pc, #416]	; (3114 <__aeabi_dmul+0x1e0>)
    2f72:	46a3      	mov	fp, r4
    2f74:	469c      	mov	ip, r3
    2f76:	2300      	movs	r3, #0
    2f78:	2700      	movs	r7, #0
    2f7a:	4466      	add	r6, ip
    2f7c:	9302      	str	r3, [sp, #8]
    2f7e:	4643      	mov	r3, r8
    2f80:	031c      	lsls	r4, r3, #12
    2f82:	005a      	lsls	r2, r3, #1
    2f84:	0fdb      	lsrs	r3, r3, #31
    2f86:	4650      	mov	r0, sl
    2f88:	0b24      	lsrs	r4, r4, #12
    2f8a:	0d52      	lsrs	r2, r2, #21
    2f8c:	4698      	mov	r8, r3
    2f8e:	d100      	bne.n	2f92 <__aeabi_dmul+0x5e>
    2f90:	e076      	b.n	3080 <__aeabi_dmul+0x14c>
    2f92:	4b5f      	ldr	r3, [pc, #380]	; (3110 <__aeabi_dmul+0x1dc>)
    2f94:	429a      	cmp	r2, r3
    2f96:	d06d      	beq.n	3074 <__aeabi_dmul+0x140>
    2f98:	2380      	movs	r3, #128	; 0x80
    2f9a:	0f41      	lsrs	r1, r0, #29
    2f9c:	041b      	lsls	r3, r3, #16
    2f9e:	430b      	orrs	r3, r1
    2fa0:	495c      	ldr	r1, [pc, #368]	; (3114 <__aeabi_dmul+0x1e0>)
    2fa2:	00e4      	lsls	r4, r4, #3
    2fa4:	468c      	mov	ip, r1
    2fa6:	431c      	orrs	r4, r3
    2fa8:	00c3      	lsls	r3, r0, #3
    2faa:	2000      	movs	r0, #0
    2fac:	4462      	add	r2, ip
    2fae:	4641      	mov	r1, r8
    2fb0:	18b6      	adds	r6, r6, r2
    2fb2:	4069      	eors	r1, r5
    2fb4:	1c72      	adds	r2, r6, #1
    2fb6:	9101      	str	r1, [sp, #4]
    2fb8:	4694      	mov	ip, r2
    2fba:	4307      	orrs	r7, r0
    2fbc:	2f0f      	cmp	r7, #15
    2fbe:	d900      	bls.n	2fc2 <__aeabi_dmul+0x8e>
    2fc0:	e0b0      	b.n	3124 <__aeabi_dmul+0x1f0>
    2fc2:	4a55      	ldr	r2, [pc, #340]	; (3118 <__aeabi_dmul+0x1e4>)
    2fc4:	00bf      	lsls	r7, r7, #2
    2fc6:	59d2      	ldr	r2, [r2, r7]
    2fc8:	4697      	mov	pc, r2
    2fca:	465b      	mov	r3, fp
    2fcc:	4303      	orrs	r3, r0
    2fce:	4699      	mov	r9, r3
    2fd0:	d000      	beq.n	2fd4 <__aeabi_dmul+0xa0>
    2fd2:	e087      	b.n	30e4 <__aeabi_dmul+0x1b0>
    2fd4:	2300      	movs	r3, #0
    2fd6:	469b      	mov	fp, r3
    2fd8:	3302      	adds	r3, #2
    2fda:	2708      	movs	r7, #8
    2fdc:	9302      	str	r3, [sp, #8]
    2fde:	e7ce      	b.n	2f7e <__aeabi_dmul+0x4a>
    2fe0:	4642      	mov	r2, r8
    2fe2:	9201      	str	r2, [sp, #4]
    2fe4:	2802      	cmp	r0, #2
    2fe6:	d067      	beq.n	30b8 <__aeabi_dmul+0x184>
    2fe8:	2803      	cmp	r0, #3
    2fea:	d100      	bne.n	2fee <__aeabi_dmul+0xba>
    2fec:	e20e      	b.n	340c <__aeabi_dmul+0x4d8>
    2fee:	2801      	cmp	r0, #1
    2ff0:	d000      	beq.n	2ff4 <__aeabi_dmul+0xc0>
    2ff2:	e162      	b.n	32ba <__aeabi_dmul+0x386>
    2ff4:	2300      	movs	r3, #0
    2ff6:	2400      	movs	r4, #0
    2ff8:	2200      	movs	r2, #0
    2ffa:	4699      	mov	r9, r3
    2ffc:	9901      	ldr	r1, [sp, #4]
    2ffe:	4001      	ands	r1, r0
    3000:	b2cd      	uxtb	r5, r1
    3002:	2100      	movs	r1, #0
    3004:	0312      	lsls	r2, r2, #12
    3006:	0d0b      	lsrs	r3, r1, #20
    3008:	0b12      	lsrs	r2, r2, #12
    300a:	051b      	lsls	r3, r3, #20
    300c:	4313      	orrs	r3, r2
    300e:	4a43      	ldr	r2, [pc, #268]	; (311c <__aeabi_dmul+0x1e8>)
    3010:	0524      	lsls	r4, r4, #20
    3012:	4013      	ands	r3, r2
    3014:	431c      	orrs	r4, r3
    3016:	0064      	lsls	r4, r4, #1
    3018:	07ed      	lsls	r5, r5, #31
    301a:	0864      	lsrs	r4, r4, #1
    301c:	432c      	orrs	r4, r5
    301e:	4648      	mov	r0, r9
    3020:	0021      	movs	r1, r4
    3022:	b007      	add	sp, #28
    3024:	bc3c      	pop	{r2, r3, r4, r5}
    3026:	4690      	mov	r8, r2
    3028:	4699      	mov	r9, r3
    302a:	46a2      	mov	sl, r4
    302c:	46ab      	mov	fp, r5
    302e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3030:	4303      	orrs	r3, r0
    3032:	4699      	mov	r9, r3
    3034:	d04f      	beq.n	30d6 <__aeabi_dmul+0x1a2>
    3036:	465b      	mov	r3, fp
    3038:	2b00      	cmp	r3, #0
    303a:	d100      	bne.n	303e <__aeabi_dmul+0x10a>
    303c:	e189      	b.n	3352 <__aeabi_dmul+0x41e>
    303e:	4658      	mov	r0, fp
    3040:	f000 fd7a 	bl	3b38 <__clzsi2>
    3044:	0003      	movs	r3, r0
    3046:	3b0b      	subs	r3, #11
    3048:	2b1c      	cmp	r3, #28
    304a:	dd00      	ble.n	304e <__aeabi_dmul+0x11a>
    304c:	e17a      	b.n	3344 <__aeabi_dmul+0x410>
    304e:	221d      	movs	r2, #29
    3050:	1ad3      	subs	r3, r2, r3
    3052:	003a      	movs	r2, r7
    3054:	0001      	movs	r1, r0
    3056:	465c      	mov	r4, fp
    3058:	40da      	lsrs	r2, r3
    305a:	3908      	subs	r1, #8
    305c:	408c      	lsls	r4, r1
    305e:	0013      	movs	r3, r2
    3060:	408f      	lsls	r7, r1
    3062:	4323      	orrs	r3, r4
    3064:	469b      	mov	fp, r3
    3066:	46b9      	mov	r9, r7
    3068:	2300      	movs	r3, #0
    306a:	4e2d      	ldr	r6, [pc, #180]	; (3120 <__aeabi_dmul+0x1ec>)
    306c:	2700      	movs	r7, #0
    306e:	1a36      	subs	r6, r6, r0
    3070:	9302      	str	r3, [sp, #8]
    3072:	e784      	b.n	2f7e <__aeabi_dmul+0x4a>
    3074:	4653      	mov	r3, sl
    3076:	4323      	orrs	r3, r4
    3078:	d12a      	bne.n	30d0 <__aeabi_dmul+0x19c>
    307a:	2400      	movs	r4, #0
    307c:	2002      	movs	r0, #2
    307e:	e796      	b.n	2fae <__aeabi_dmul+0x7a>
    3080:	4653      	mov	r3, sl
    3082:	4323      	orrs	r3, r4
    3084:	d020      	beq.n	30c8 <__aeabi_dmul+0x194>
    3086:	2c00      	cmp	r4, #0
    3088:	d100      	bne.n	308c <__aeabi_dmul+0x158>
    308a:	e157      	b.n	333c <__aeabi_dmul+0x408>
    308c:	0020      	movs	r0, r4
    308e:	f000 fd53 	bl	3b38 <__clzsi2>
    3092:	0003      	movs	r3, r0
    3094:	3b0b      	subs	r3, #11
    3096:	2b1c      	cmp	r3, #28
    3098:	dd00      	ble.n	309c <__aeabi_dmul+0x168>
    309a:	e149      	b.n	3330 <__aeabi_dmul+0x3fc>
    309c:	211d      	movs	r1, #29
    309e:	1acb      	subs	r3, r1, r3
    30a0:	4651      	mov	r1, sl
    30a2:	0002      	movs	r2, r0
    30a4:	40d9      	lsrs	r1, r3
    30a6:	4653      	mov	r3, sl
    30a8:	3a08      	subs	r2, #8
    30aa:	4094      	lsls	r4, r2
    30ac:	4093      	lsls	r3, r2
    30ae:	430c      	orrs	r4, r1
    30b0:	4a1b      	ldr	r2, [pc, #108]	; (3120 <__aeabi_dmul+0x1ec>)
    30b2:	1a12      	subs	r2, r2, r0
    30b4:	2000      	movs	r0, #0
    30b6:	e77a      	b.n	2fae <__aeabi_dmul+0x7a>
    30b8:	2501      	movs	r5, #1
    30ba:	9b01      	ldr	r3, [sp, #4]
    30bc:	4c14      	ldr	r4, [pc, #80]	; (3110 <__aeabi_dmul+0x1dc>)
    30be:	401d      	ands	r5, r3
    30c0:	2300      	movs	r3, #0
    30c2:	2200      	movs	r2, #0
    30c4:	4699      	mov	r9, r3
    30c6:	e79c      	b.n	3002 <__aeabi_dmul+0xce>
    30c8:	2400      	movs	r4, #0
    30ca:	2200      	movs	r2, #0
    30cc:	2001      	movs	r0, #1
    30ce:	e76e      	b.n	2fae <__aeabi_dmul+0x7a>
    30d0:	4653      	mov	r3, sl
    30d2:	2003      	movs	r0, #3
    30d4:	e76b      	b.n	2fae <__aeabi_dmul+0x7a>
    30d6:	2300      	movs	r3, #0
    30d8:	469b      	mov	fp, r3
    30da:	3301      	adds	r3, #1
    30dc:	2704      	movs	r7, #4
    30de:	2600      	movs	r6, #0
    30e0:	9302      	str	r3, [sp, #8]
    30e2:	e74c      	b.n	2f7e <__aeabi_dmul+0x4a>
    30e4:	2303      	movs	r3, #3
    30e6:	4681      	mov	r9, r0
    30e8:	270c      	movs	r7, #12
    30ea:	9302      	str	r3, [sp, #8]
    30ec:	e747      	b.n	2f7e <__aeabi_dmul+0x4a>
    30ee:	2280      	movs	r2, #128	; 0x80
    30f0:	2300      	movs	r3, #0
    30f2:	2500      	movs	r5, #0
    30f4:	0312      	lsls	r2, r2, #12
    30f6:	4699      	mov	r9, r3
    30f8:	4c05      	ldr	r4, [pc, #20]	; (3110 <__aeabi_dmul+0x1dc>)
    30fa:	e782      	b.n	3002 <__aeabi_dmul+0xce>
    30fc:	465c      	mov	r4, fp
    30fe:	464b      	mov	r3, r9
    3100:	9802      	ldr	r0, [sp, #8]
    3102:	e76f      	b.n	2fe4 <__aeabi_dmul+0xb0>
    3104:	465c      	mov	r4, fp
    3106:	464b      	mov	r3, r9
    3108:	9501      	str	r5, [sp, #4]
    310a:	9802      	ldr	r0, [sp, #8]
    310c:	e76a      	b.n	2fe4 <__aeabi_dmul+0xb0>
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	000007ff 	.word	0x000007ff
    3114:	fffffc01 	.word	0xfffffc01
    3118:	00003c4c 	.word	0x00003c4c
    311c:	800fffff 	.word	0x800fffff
    3120:	fffffc0d 	.word	0xfffffc0d
    3124:	464a      	mov	r2, r9
    3126:	4649      	mov	r1, r9
    3128:	0c17      	lsrs	r7, r2, #16
    312a:	0c1a      	lsrs	r2, r3, #16
    312c:	041b      	lsls	r3, r3, #16
    312e:	0c1b      	lsrs	r3, r3, #16
    3130:	0408      	lsls	r0, r1, #16
    3132:	0019      	movs	r1, r3
    3134:	0c00      	lsrs	r0, r0, #16
    3136:	4341      	muls	r1, r0
    3138:	0015      	movs	r5, r2
    313a:	4688      	mov	r8, r1
    313c:	0019      	movs	r1, r3
    313e:	437d      	muls	r5, r7
    3140:	4379      	muls	r1, r7
    3142:	9503      	str	r5, [sp, #12]
    3144:	4689      	mov	r9, r1
    3146:	0029      	movs	r1, r5
    3148:	0015      	movs	r5, r2
    314a:	4345      	muls	r5, r0
    314c:	444d      	add	r5, r9
    314e:	9502      	str	r5, [sp, #8]
    3150:	4645      	mov	r5, r8
    3152:	0c2d      	lsrs	r5, r5, #16
    3154:	46aa      	mov	sl, r5
    3156:	9d02      	ldr	r5, [sp, #8]
    3158:	4455      	add	r5, sl
    315a:	45a9      	cmp	r9, r5
    315c:	d906      	bls.n	316c <__aeabi_dmul+0x238>
    315e:	468a      	mov	sl, r1
    3160:	2180      	movs	r1, #128	; 0x80
    3162:	0249      	lsls	r1, r1, #9
    3164:	4689      	mov	r9, r1
    3166:	44ca      	add	sl, r9
    3168:	4651      	mov	r1, sl
    316a:	9103      	str	r1, [sp, #12]
    316c:	0c29      	lsrs	r1, r5, #16
    316e:	9104      	str	r1, [sp, #16]
    3170:	4641      	mov	r1, r8
    3172:	0409      	lsls	r1, r1, #16
    3174:	042d      	lsls	r5, r5, #16
    3176:	0c09      	lsrs	r1, r1, #16
    3178:	4688      	mov	r8, r1
    317a:	0029      	movs	r1, r5
    317c:	0c25      	lsrs	r5, r4, #16
    317e:	0424      	lsls	r4, r4, #16
    3180:	4441      	add	r1, r8
    3182:	0c24      	lsrs	r4, r4, #16
    3184:	9105      	str	r1, [sp, #20]
    3186:	0021      	movs	r1, r4
    3188:	4341      	muls	r1, r0
    318a:	4688      	mov	r8, r1
    318c:	0021      	movs	r1, r4
    318e:	4379      	muls	r1, r7
    3190:	468a      	mov	sl, r1
    3192:	4368      	muls	r0, r5
    3194:	4641      	mov	r1, r8
    3196:	4450      	add	r0, sl
    3198:	4681      	mov	r9, r0
    319a:	0c08      	lsrs	r0, r1, #16
    319c:	4448      	add	r0, r9
    319e:	436f      	muls	r7, r5
    31a0:	4582      	cmp	sl, r0
    31a2:	d903      	bls.n	31ac <__aeabi_dmul+0x278>
    31a4:	2180      	movs	r1, #128	; 0x80
    31a6:	0249      	lsls	r1, r1, #9
    31a8:	4689      	mov	r9, r1
    31aa:	444f      	add	r7, r9
    31ac:	0c01      	lsrs	r1, r0, #16
    31ae:	4689      	mov	r9, r1
    31b0:	0039      	movs	r1, r7
    31b2:	4449      	add	r1, r9
    31b4:	9102      	str	r1, [sp, #8]
    31b6:	4641      	mov	r1, r8
    31b8:	040f      	lsls	r7, r1, #16
    31ba:	9904      	ldr	r1, [sp, #16]
    31bc:	0c3f      	lsrs	r7, r7, #16
    31be:	4688      	mov	r8, r1
    31c0:	0400      	lsls	r0, r0, #16
    31c2:	19c0      	adds	r0, r0, r7
    31c4:	4480      	add	r8, r0
    31c6:	4641      	mov	r1, r8
    31c8:	9104      	str	r1, [sp, #16]
    31ca:	4659      	mov	r1, fp
    31cc:	0c0f      	lsrs	r7, r1, #16
    31ce:	0409      	lsls	r1, r1, #16
    31d0:	0c09      	lsrs	r1, r1, #16
    31d2:	4688      	mov	r8, r1
    31d4:	4359      	muls	r1, r3
    31d6:	468a      	mov	sl, r1
    31d8:	0039      	movs	r1, r7
    31da:	4351      	muls	r1, r2
    31dc:	4689      	mov	r9, r1
    31de:	4641      	mov	r1, r8
    31e0:	434a      	muls	r2, r1
    31e2:	4651      	mov	r1, sl
    31e4:	0c09      	lsrs	r1, r1, #16
    31e6:	468b      	mov	fp, r1
    31e8:	437b      	muls	r3, r7
    31ea:	18d2      	adds	r2, r2, r3
    31ec:	445a      	add	r2, fp
    31ee:	4293      	cmp	r3, r2
    31f0:	d903      	bls.n	31fa <__aeabi_dmul+0x2c6>
    31f2:	2380      	movs	r3, #128	; 0x80
    31f4:	025b      	lsls	r3, r3, #9
    31f6:	469b      	mov	fp, r3
    31f8:	44d9      	add	r9, fp
    31fa:	4651      	mov	r1, sl
    31fc:	0409      	lsls	r1, r1, #16
    31fe:	0c09      	lsrs	r1, r1, #16
    3200:	468a      	mov	sl, r1
    3202:	4641      	mov	r1, r8
    3204:	4361      	muls	r1, r4
    3206:	437c      	muls	r4, r7
    3208:	0c13      	lsrs	r3, r2, #16
    320a:	0412      	lsls	r2, r2, #16
    320c:	444b      	add	r3, r9
    320e:	4452      	add	r2, sl
    3210:	46a1      	mov	r9, r4
    3212:	468a      	mov	sl, r1
    3214:	003c      	movs	r4, r7
    3216:	4641      	mov	r1, r8
    3218:	436c      	muls	r4, r5
    321a:	434d      	muls	r5, r1
    321c:	4651      	mov	r1, sl
    321e:	444d      	add	r5, r9
    3220:	0c0f      	lsrs	r7, r1, #16
    3222:	197d      	adds	r5, r7, r5
    3224:	45a9      	cmp	r9, r5
    3226:	d903      	bls.n	3230 <__aeabi_dmul+0x2fc>
    3228:	2180      	movs	r1, #128	; 0x80
    322a:	0249      	lsls	r1, r1, #9
    322c:	4688      	mov	r8, r1
    322e:	4444      	add	r4, r8
    3230:	9f04      	ldr	r7, [sp, #16]
    3232:	9903      	ldr	r1, [sp, #12]
    3234:	46b8      	mov	r8, r7
    3236:	4441      	add	r1, r8
    3238:	468b      	mov	fp, r1
    323a:	4583      	cmp	fp, r0
    323c:	4180      	sbcs	r0, r0
    323e:	4241      	negs	r1, r0
    3240:	4688      	mov	r8, r1
    3242:	4651      	mov	r1, sl
    3244:	0408      	lsls	r0, r1, #16
    3246:	042f      	lsls	r7, r5, #16
    3248:	0c00      	lsrs	r0, r0, #16
    324a:	183f      	adds	r7, r7, r0
    324c:	4658      	mov	r0, fp
    324e:	9902      	ldr	r1, [sp, #8]
    3250:	1810      	adds	r0, r2, r0
    3252:	4689      	mov	r9, r1
    3254:	4290      	cmp	r0, r2
    3256:	4192      	sbcs	r2, r2
    3258:	444f      	add	r7, r9
    325a:	46ba      	mov	sl, r7
    325c:	4252      	negs	r2, r2
    325e:	4699      	mov	r9, r3
    3260:	4693      	mov	fp, r2
    3262:	44c2      	add	sl, r8
    3264:	44d1      	add	r9, sl
    3266:	44cb      	add	fp, r9
    3268:	428f      	cmp	r7, r1
    326a:	41bf      	sbcs	r7, r7
    326c:	45c2      	cmp	sl, r8
    326e:	4189      	sbcs	r1, r1
    3270:	4599      	cmp	r9, r3
    3272:	419b      	sbcs	r3, r3
    3274:	4593      	cmp	fp, r2
    3276:	4192      	sbcs	r2, r2
    3278:	427f      	negs	r7, r7
    327a:	4249      	negs	r1, r1
    327c:	0c2d      	lsrs	r5, r5, #16
    327e:	4252      	negs	r2, r2
    3280:	430f      	orrs	r7, r1
    3282:	425b      	negs	r3, r3
    3284:	4313      	orrs	r3, r2
    3286:	197f      	adds	r7, r7, r5
    3288:	18ff      	adds	r7, r7, r3
    328a:	465b      	mov	r3, fp
    328c:	193c      	adds	r4, r7, r4
    328e:	0ddb      	lsrs	r3, r3, #23
    3290:	9a05      	ldr	r2, [sp, #20]
    3292:	0264      	lsls	r4, r4, #9
    3294:	431c      	orrs	r4, r3
    3296:	0243      	lsls	r3, r0, #9
    3298:	4313      	orrs	r3, r2
    329a:	1e5d      	subs	r5, r3, #1
    329c:	41ab      	sbcs	r3, r5
    329e:	465a      	mov	r2, fp
    32a0:	0dc0      	lsrs	r0, r0, #23
    32a2:	4303      	orrs	r3, r0
    32a4:	0252      	lsls	r2, r2, #9
    32a6:	4313      	orrs	r3, r2
    32a8:	01e2      	lsls	r2, r4, #7
    32aa:	d556      	bpl.n	335a <__aeabi_dmul+0x426>
    32ac:	2001      	movs	r0, #1
    32ae:	085a      	lsrs	r2, r3, #1
    32b0:	4003      	ands	r3, r0
    32b2:	4313      	orrs	r3, r2
    32b4:	07e2      	lsls	r2, r4, #31
    32b6:	4313      	orrs	r3, r2
    32b8:	0864      	lsrs	r4, r4, #1
    32ba:	485a      	ldr	r0, [pc, #360]	; (3424 <__aeabi_dmul+0x4f0>)
    32bc:	4460      	add	r0, ip
    32be:	2800      	cmp	r0, #0
    32c0:	dd4d      	ble.n	335e <__aeabi_dmul+0x42a>
    32c2:	075a      	lsls	r2, r3, #29
    32c4:	d009      	beq.n	32da <__aeabi_dmul+0x3a6>
    32c6:	220f      	movs	r2, #15
    32c8:	401a      	ands	r2, r3
    32ca:	2a04      	cmp	r2, #4
    32cc:	d005      	beq.n	32da <__aeabi_dmul+0x3a6>
    32ce:	1d1a      	adds	r2, r3, #4
    32d0:	429a      	cmp	r2, r3
    32d2:	419b      	sbcs	r3, r3
    32d4:	425b      	negs	r3, r3
    32d6:	18e4      	adds	r4, r4, r3
    32d8:	0013      	movs	r3, r2
    32da:	01e2      	lsls	r2, r4, #7
    32dc:	d504      	bpl.n	32e8 <__aeabi_dmul+0x3b4>
    32de:	2080      	movs	r0, #128	; 0x80
    32e0:	4a51      	ldr	r2, [pc, #324]	; (3428 <__aeabi_dmul+0x4f4>)
    32e2:	00c0      	lsls	r0, r0, #3
    32e4:	4014      	ands	r4, r2
    32e6:	4460      	add	r0, ip
    32e8:	4a50      	ldr	r2, [pc, #320]	; (342c <__aeabi_dmul+0x4f8>)
    32ea:	4290      	cmp	r0, r2
    32ec:	dd00      	ble.n	32f0 <__aeabi_dmul+0x3bc>
    32ee:	e6e3      	b.n	30b8 <__aeabi_dmul+0x184>
    32f0:	2501      	movs	r5, #1
    32f2:	08db      	lsrs	r3, r3, #3
    32f4:	0762      	lsls	r2, r4, #29
    32f6:	431a      	orrs	r2, r3
    32f8:	0264      	lsls	r4, r4, #9
    32fa:	9b01      	ldr	r3, [sp, #4]
    32fc:	4691      	mov	r9, r2
    32fe:	0b22      	lsrs	r2, r4, #12
    3300:	0544      	lsls	r4, r0, #21
    3302:	0d64      	lsrs	r4, r4, #21
    3304:	401d      	ands	r5, r3
    3306:	e67c      	b.n	3002 <__aeabi_dmul+0xce>
    3308:	2280      	movs	r2, #128	; 0x80
    330a:	4659      	mov	r1, fp
    330c:	0312      	lsls	r2, r2, #12
    330e:	4211      	tst	r1, r2
    3310:	d008      	beq.n	3324 <__aeabi_dmul+0x3f0>
    3312:	4214      	tst	r4, r2
    3314:	d106      	bne.n	3324 <__aeabi_dmul+0x3f0>
    3316:	4322      	orrs	r2, r4
    3318:	0312      	lsls	r2, r2, #12
    331a:	0b12      	lsrs	r2, r2, #12
    331c:	4645      	mov	r5, r8
    331e:	4699      	mov	r9, r3
    3320:	4c43      	ldr	r4, [pc, #268]	; (3430 <__aeabi_dmul+0x4fc>)
    3322:	e66e      	b.n	3002 <__aeabi_dmul+0xce>
    3324:	465b      	mov	r3, fp
    3326:	431a      	orrs	r2, r3
    3328:	0312      	lsls	r2, r2, #12
    332a:	0b12      	lsrs	r2, r2, #12
    332c:	4c40      	ldr	r4, [pc, #256]	; (3430 <__aeabi_dmul+0x4fc>)
    332e:	e668      	b.n	3002 <__aeabi_dmul+0xce>
    3330:	0003      	movs	r3, r0
    3332:	4654      	mov	r4, sl
    3334:	3b28      	subs	r3, #40	; 0x28
    3336:	409c      	lsls	r4, r3
    3338:	2300      	movs	r3, #0
    333a:	e6b9      	b.n	30b0 <__aeabi_dmul+0x17c>
    333c:	f000 fbfc 	bl	3b38 <__clzsi2>
    3340:	3020      	adds	r0, #32
    3342:	e6a6      	b.n	3092 <__aeabi_dmul+0x15e>
    3344:	0003      	movs	r3, r0
    3346:	3b28      	subs	r3, #40	; 0x28
    3348:	409f      	lsls	r7, r3
    334a:	2300      	movs	r3, #0
    334c:	46bb      	mov	fp, r7
    334e:	4699      	mov	r9, r3
    3350:	e68a      	b.n	3068 <__aeabi_dmul+0x134>
    3352:	f000 fbf1 	bl	3b38 <__clzsi2>
    3356:	3020      	adds	r0, #32
    3358:	e674      	b.n	3044 <__aeabi_dmul+0x110>
    335a:	46b4      	mov	ip, r6
    335c:	e7ad      	b.n	32ba <__aeabi_dmul+0x386>
    335e:	2501      	movs	r5, #1
    3360:	1a2a      	subs	r2, r5, r0
    3362:	2a38      	cmp	r2, #56	; 0x38
    3364:	dd06      	ble.n	3374 <__aeabi_dmul+0x440>
    3366:	9b01      	ldr	r3, [sp, #4]
    3368:	2400      	movs	r4, #0
    336a:	401d      	ands	r5, r3
    336c:	2300      	movs	r3, #0
    336e:	2200      	movs	r2, #0
    3370:	4699      	mov	r9, r3
    3372:	e646      	b.n	3002 <__aeabi_dmul+0xce>
    3374:	2a1f      	cmp	r2, #31
    3376:	dc21      	bgt.n	33bc <__aeabi_dmul+0x488>
    3378:	2520      	movs	r5, #32
    337a:	0020      	movs	r0, r4
    337c:	1aad      	subs	r5, r5, r2
    337e:	001e      	movs	r6, r3
    3380:	40ab      	lsls	r3, r5
    3382:	40a8      	lsls	r0, r5
    3384:	40d6      	lsrs	r6, r2
    3386:	1e5d      	subs	r5, r3, #1
    3388:	41ab      	sbcs	r3, r5
    338a:	4330      	orrs	r0, r6
    338c:	4318      	orrs	r0, r3
    338e:	40d4      	lsrs	r4, r2
    3390:	0743      	lsls	r3, r0, #29
    3392:	d009      	beq.n	33a8 <__aeabi_dmul+0x474>
    3394:	230f      	movs	r3, #15
    3396:	4003      	ands	r3, r0
    3398:	2b04      	cmp	r3, #4
    339a:	d005      	beq.n	33a8 <__aeabi_dmul+0x474>
    339c:	0003      	movs	r3, r0
    339e:	1d18      	adds	r0, r3, #4
    33a0:	4298      	cmp	r0, r3
    33a2:	419b      	sbcs	r3, r3
    33a4:	425b      	negs	r3, r3
    33a6:	18e4      	adds	r4, r4, r3
    33a8:	0223      	lsls	r3, r4, #8
    33aa:	d521      	bpl.n	33f0 <__aeabi_dmul+0x4bc>
    33ac:	2501      	movs	r5, #1
    33ae:	9b01      	ldr	r3, [sp, #4]
    33b0:	2401      	movs	r4, #1
    33b2:	401d      	ands	r5, r3
    33b4:	2300      	movs	r3, #0
    33b6:	2200      	movs	r2, #0
    33b8:	4699      	mov	r9, r3
    33ba:	e622      	b.n	3002 <__aeabi_dmul+0xce>
    33bc:	251f      	movs	r5, #31
    33be:	0021      	movs	r1, r4
    33c0:	426d      	negs	r5, r5
    33c2:	1a28      	subs	r0, r5, r0
    33c4:	40c1      	lsrs	r1, r0
    33c6:	0008      	movs	r0, r1
    33c8:	2a20      	cmp	r2, #32
    33ca:	d01d      	beq.n	3408 <__aeabi_dmul+0x4d4>
    33cc:	355f      	adds	r5, #95	; 0x5f
    33ce:	1aaa      	subs	r2, r5, r2
    33d0:	4094      	lsls	r4, r2
    33d2:	4323      	orrs	r3, r4
    33d4:	1e5c      	subs	r4, r3, #1
    33d6:	41a3      	sbcs	r3, r4
    33d8:	2507      	movs	r5, #7
    33da:	4303      	orrs	r3, r0
    33dc:	401d      	ands	r5, r3
    33de:	2200      	movs	r2, #0
    33e0:	2d00      	cmp	r5, #0
    33e2:	d009      	beq.n	33f8 <__aeabi_dmul+0x4c4>
    33e4:	220f      	movs	r2, #15
    33e6:	2400      	movs	r4, #0
    33e8:	401a      	ands	r2, r3
    33ea:	0018      	movs	r0, r3
    33ec:	2a04      	cmp	r2, #4
    33ee:	d1d6      	bne.n	339e <__aeabi_dmul+0x46a>
    33f0:	0003      	movs	r3, r0
    33f2:	0765      	lsls	r5, r4, #29
    33f4:	0264      	lsls	r4, r4, #9
    33f6:	0b22      	lsrs	r2, r4, #12
    33f8:	08db      	lsrs	r3, r3, #3
    33fa:	432b      	orrs	r3, r5
    33fc:	2501      	movs	r5, #1
    33fe:	4699      	mov	r9, r3
    3400:	9b01      	ldr	r3, [sp, #4]
    3402:	2400      	movs	r4, #0
    3404:	401d      	ands	r5, r3
    3406:	e5fc      	b.n	3002 <__aeabi_dmul+0xce>
    3408:	2400      	movs	r4, #0
    340a:	e7e2      	b.n	33d2 <__aeabi_dmul+0x49e>
    340c:	2280      	movs	r2, #128	; 0x80
    340e:	2501      	movs	r5, #1
    3410:	0312      	lsls	r2, r2, #12
    3412:	4322      	orrs	r2, r4
    3414:	9901      	ldr	r1, [sp, #4]
    3416:	0312      	lsls	r2, r2, #12
    3418:	0b12      	lsrs	r2, r2, #12
    341a:	400d      	ands	r5, r1
    341c:	4699      	mov	r9, r3
    341e:	4c04      	ldr	r4, [pc, #16]	; (3430 <__aeabi_dmul+0x4fc>)
    3420:	e5ef      	b.n	3002 <__aeabi_dmul+0xce>
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	000003ff 	.word	0x000003ff
    3428:	feffffff 	.word	0xfeffffff
    342c:	000007fe 	.word	0x000007fe
    3430:	000007ff 	.word	0x000007ff

00003434 <__aeabi_dsub>:
    3434:	b5f0      	push	{r4, r5, r6, r7, lr}
    3436:	4646      	mov	r6, r8
    3438:	46d6      	mov	lr, sl
    343a:	464f      	mov	r7, r9
    343c:	030c      	lsls	r4, r1, #12
    343e:	b5c0      	push	{r6, r7, lr}
    3440:	0fcd      	lsrs	r5, r1, #31
    3442:	004e      	lsls	r6, r1, #1
    3444:	0a61      	lsrs	r1, r4, #9
    3446:	0f44      	lsrs	r4, r0, #29
    3448:	430c      	orrs	r4, r1
    344a:	00c1      	lsls	r1, r0, #3
    344c:	0058      	lsls	r0, r3, #1
    344e:	0d40      	lsrs	r0, r0, #21
    3450:	4684      	mov	ip, r0
    3452:	468a      	mov	sl, r1
    3454:	000f      	movs	r7, r1
    3456:	0319      	lsls	r1, r3, #12
    3458:	0f50      	lsrs	r0, r2, #29
    345a:	0a49      	lsrs	r1, r1, #9
    345c:	4301      	orrs	r1, r0
    345e:	48c6      	ldr	r0, [pc, #792]	; (3778 <__aeabi_dsub+0x344>)
    3460:	0d76      	lsrs	r6, r6, #21
    3462:	46a8      	mov	r8, r5
    3464:	0fdb      	lsrs	r3, r3, #31
    3466:	00d2      	lsls	r2, r2, #3
    3468:	4584      	cmp	ip, r0
    346a:	d100      	bne.n	346e <__aeabi_dsub+0x3a>
    346c:	e0d8      	b.n	3620 <__aeabi_dsub+0x1ec>
    346e:	2001      	movs	r0, #1
    3470:	4043      	eors	r3, r0
    3472:	42ab      	cmp	r3, r5
    3474:	d100      	bne.n	3478 <__aeabi_dsub+0x44>
    3476:	e0a6      	b.n	35c6 <__aeabi_dsub+0x192>
    3478:	4660      	mov	r0, ip
    347a:	1a35      	subs	r5, r6, r0
    347c:	2d00      	cmp	r5, #0
    347e:	dc00      	bgt.n	3482 <__aeabi_dsub+0x4e>
    3480:	e105      	b.n	368e <__aeabi_dsub+0x25a>
    3482:	2800      	cmp	r0, #0
    3484:	d110      	bne.n	34a8 <__aeabi_dsub+0x74>
    3486:	000b      	movs	r3, r1
    3488:	4313      	orrs	r3, r2
    348a:	d100      	bne.n	348e <__aeabi_dsub+0x5a>
    348c:	e0d7      	b.n	363e <__aeabi_dsub+0x20a>
    348e:	1e6b      	subs	r3, r5, #1
    3490:	2b00      	cmp	r3, #0
    3492:	d000      	beq.n	3496 <__aeabi_dsub+0x62>
    3494:	e14b      	b.n	372e <__aeabi_dsub+0x2fa>
    3496:	4653      	mov	r3, sl
    3498:	1a9f      	subs	r7, r3, r2
    349a:	45ba      	cmp	sl, r7
    349c:	4180      	sbcs	r0, r0
    349e:	1a64      	subs	r4, r4, r1
    34a0:	4240      	negs	r0, r0
    34a2:	1a24      	subs	r4, r4, r0
    34a4:	2601      	movs	r6, #1
    34a6:	e01e      	b.n	34e6 <__aeabi_dsub+0xb2>
    34a8:	4bb3      	ldr	r3, [pc, #716]	; (3778 <__aeabi_dsub+0x344>)
    34aa:	429e      	cmp	r6, r3
    34ac:	d048      	beq.n	3540 <__aeabi_dsub+0x10c>
    34ae:	2380      	movs	r3, #128	; 0x80
    34b0:	041b      	lsls	r3, r3, #16
    34b2:	4319      	orrs	r1, r3
    34b4:	2d38      	cmp	r5, #56	; 0x38
    34b6:	dd00      	ble.n	34ba <__aeabi_dsub+0x86>
    34b8:	e119      	b.n	36ee <__aeabi_dsub+0x2ba>
    34ba:	2d1f      	cmp	r5, #31
    34bc:	dd00      	ble.n	34c0 <__aeabi_dsub+0x8c>
    34be:	e14c      	b.n	375a <__aeabi_dsub+0x326>
    34c0:	2320      	movs	r3, #32
    34c2:	000f      	movs	r7, r1
    34c4:	1b5b      	subs	r3, r3, r5
    34c6:	0010      	movs	r0, r2
    34c8:	409a      	lsls	r2, r3
    34ca:	409f      	lsls	r7, r3
    34cc:	40e8      	lsrs	r0, r5
    34ce:	1e53      	subs	r3, r2, #1
    34d0:	419a      	sbcs	r2, r3
    34d2:	40e9      	lsrs	r1, r5
    34d4:	4307      	orrs	r7, r0
    34d6:	4317      	orrs	r7, r2
    34d8:	4653      	mov	r3, sl
    34da:	1bdf      	subs	r7, r3, r7
    34dc:	1a61      	subs	r1, r4, r1
    34de:	45ba      	cmp	sl, r7
    34e0:	41a4      	sbcs	r4, r4
    34e2:	4264      	negs	r4, r4
    34e4:	1b0c      	subs	r4, r1, r4
    34e6:	0223      	lsls	r3, r4, #8
    34e8:	d400      	bmi.n	34ec <__aeabi_dsub+0xb8>
    34ea:	e0c5      	b.n	3678 <__aeabi_dsub+0x244>
    34ec:	0264      	lsls	r4, r4, #9
    34ee:	0a65      	lsrs	r5, r4, #9
    34f0:	2d00      	cmp	r5, #0
    34f2:	d100      	bne.n	34f6 <__aeabi_dsub+0xc2>
    34f4:	e0f6      	b.n	36e4 <__aeabi_dsub+0x2b0>
    34f6:	0028      	movs	r0, r5
    34f8:	f000 fb1e 	bl	3b38 <__clzsi2>
    34fc:	0003      	movs	r3, r0
    34fe:	3b08      	subs	r3, #8
    3500:	2b1f      	cmp	r3, #31
    3502:	dd00      	ble.n	3506 <__aeabi_dsub+0xd2>
    3504:	e0e9      	b.n	36da <__aeabi_dsub+0x2a6>
    3506:	2220      	movs	r2, #32
    3508:	003c      	movs	r4, r7
    350a:	1ad2      	subs	r2, r2, r3
    350c:	409d      	lsls	r5, r3
    350e:	40d4      	lsrs	r4, r2
    3510:	409f      	lsls	r7, r3
    3512:	4325      	orrs	r5, r4
    3514:	429e      	cmp	r6, r3
    3516:	dd00      	ble.n	351a <__aeabi_dsub+0xe6>
    3518:	e0db      	b.n	36d2 <__aeabi_dsub+0x29e>
    351a:	1b9e      	subs	r6, r3, r6
    351c:	1c73      	adds	r3, r6, #1
    351e:	2b1f      	cmp	r3, #31
    3520:	dd00      	ble.n	3524 <__aeabi_dsub+0xf0>
    3522:	e10a      	b.n	373a <__aeabi_dsub+0x306>
    3524:	2220      	movs	r2, #32
    3526:	0038      	movs	r0, r7
    3528:	1ad2      	subs	r2, r2, r3
    352a:	0029      	movs	r1, r5
    352c:	4097      	lsls	r7, r2
    352e:	002c      	movs	r4, r5
    3530:	4091      	lsls	r1, r2
    3532:	40d8      	lsrs	r0, r3
    3534:	1e7a      	subs	r2, r7, #1
    3536:	4197      	sbcs	r7, r2
    3538:	40dc      	lsrs	r4, r3
    353a:	2600      	movs	r6, #0
    353c:	4301      	orrs	r1, r0
    353e:	430f      	orrs	r7, r1
    3540:	077b      	lsls	r3, r7, #29
    3542:	d009      	beq.n	3558 <__aeabi_dsub+0x124>
    3544:	230f      	movs	r3, #15
    3546:	403b      	ands	r3, r7
    3548:	2b04      	cmp	r3, #4
    354a:	d005      	beq.n	3558 <__aeabi_dsub+0x124>
    354c:	1d3b      	adds	r3, r7, #4
    354e:	42bb      	cmp	r3, r7
    3550:	41bf      	sbcs	r7, r7
    3552:	427f      	negs	r7, r7
    3554:	19e4      	adds	r4, r4, r7
    3556:	001f      	movs	r7, r3
    3558:	0223      	lsls	r3, r4, #8
    355a:	d525      	bpl.n	35a8 <__aeabi_dsub+0x174>
    355c:	4b86      	ldr	r3, [pc, #536]	; (3778 <__aeabi_dsub+0x344>)
    355e:	3601      	adds	r6, #1
    3560:	429e      	cmp	r6, r3
    3562:	d100      	bne.n	3566 <__aeabi_dsub+0x132>
    3564:	e0af      	b.n	36c6 <__aeabi_dsub+0x292>
    3566:	4b85      	ldr	r3, [pc, #532]	; (377c <__aeabi_dsub+0x348>)
    3568:	2501      	movs	r5, #1
    356a:	401c      	ands	r4, r3
    356c:	4643      	mov	r3, r8
    356e:	0762      	lsls	r2, r4, #29
    3570:	08ff      	lsrs	r7, r7, #3
    3572:	0264      	lsls	r4, r4, #9
    3574:	0576      	lsls	r6, r6, #21
    3576:	4317      	orrs	r7, r2
    3578:	0b24      	lsrs	r4, r4, #12
    357a:	0d76      	lsrs	r6, r6, #21
    357c:	401d      	ands	r5, r3
    357e:	2100      	movs	r1, #0
    3580:	0324      	lsls	r4, r4, #12
    3582:	0b23      	lsrs	r3, r4, #12
    3584:	0d0c      	lsrs	r4, r1, #20
    3586:	4a7e      	ldr	r2, [pc, #504]	; (3780 <__aeabi_dsub+0x34c>)
    3588:	0524      	lsls	r4, r4, #20
    358a:	431c      	orrs	r4, r3
    358c:	4014      	ands	r4, r2
    358e:	0533      	lsls	r3, r6, #20
    3590:	4323      	orrs	r3, r4
    3592:	005b      	lsls	r3, r3, #1
    3594:	07ed      	lsls	r5, r5, #31
    3596:	085b      	lsrs	r3, r3, #1
    3598:	432b      	orrs	r3, r5
    359a:	0038      	movs	r0, r7
    359c:	0019      	movs	r1, r3
    359e:	bc1c      	pop	{r2, r3, r4}
    35a0:	4690      	mov	r8, r2
    35a2:	4699      	mov	r9, r3
    35a4:	46a2      	mov	sl, r4
    35a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35a8:	2501      	movs	r5, #1
    35aa:	4643      	mov	r3, r8
    35ac:	0762      	lsls	r2, r4, #29
    35ae:	08ff      	lsrs	r7, r7, #3
    35b0:	4317      	orrs	r7, r2
    35b2:	08e4      	lsrs	r4, r4, #3
    35b4:	401d      	ands	r5, r3
    35b6:	4b70      	ldr	r3, [pc, #448]	; (3778 <__aeabi_dsub+0x344>)
    35b8:	429e      	cmp	r6, r3
    35ba:	d036      	beq.n	362a <__aeabi_dsub+0x1f6>
    35bc:	0324      	lsls	r4, r4, #12
    35be:	0576      	lsls	r6, r6, #21
    35c0:	0b24      	lsrs	r4, r4, #12
    35c2:	0d76      	lsrs	r6, r6, #21
    35c4:	e7db      	b.n	357e <__aeabi_dsub+0x14a>
    35c6:	4663      	mov	r3, ip
    35c8:	1af3      	subs	r3, r6, r3
    35ca:	2b00      	cmp	r3, #0
    35cc:	dc00      	bgt.n	35d0 <__aeabi_dsub+0x19c>
    35ce:	e094      	b.n	36fa <__aeabi_dsub+0x2c6>
    35d0:	4660      	mov	r0, ip
    35d2:	2800      	cmp	r0, #0
    35d4:	d035      	beq.n	3642 <__aeabi_dsub+0x20e>
    35d6:	4868      	ldr	r0, [pc, #416]	; (3778 <__aeabi_dsub+0x344>)
    35d8:	4286      	cmp	r6, r0
    35da:	d0b1      	beq.n	3540 <__aeabi_dsub+0x10c>
    35dc:	2780      	movs	r7, #128	; 0x80
    35de:	043f      	lsls	r7, r7, #16
    35e0:	4339      	orrs	r1, r7
    35e2:	2b38      	cmp	r3, #56	; 0x38
    35e4:	dc00      	bgt.n	35e8 <__aeabi_dsub+0x1b4>
    35e6:	e0fd      	b.n	37e4 <__aeabi_dsub+0x3b0>
    35e8:	430a      	orrs	r2, r1
    35ea:	0017      	movs	r7, r2
    35ec:	2100      	movs	r1, #0
    35ee:	1e7a      	subs	r2, r7, #1
    35f0:	4197      	sbcs	r7, r2
    35f2:	4457      	add	r7, sl
    35f4:	4557      	cmp	r7, sl
    35f6:	4180      	sbcs	r0, r0
    35f8:	1909      	adds	r1, r1, r4
    35fa:	4244      	negs	r4, r0
    35fc:	190c      	adds	r4, r1, r4
    35fe:	0223      	lsls	r3, r4, #8
    3600:	d53a      	bpl.n	3678 <__aeabi_dsub+0x244>
    3602:	4b5d      	ldr	r3, [pc, #372]	; (3778 <__aeabi_dsub+0x344>)
    3604:	3601      	adds	r6, #1
    3606:	429e      	cmp	r6, r3
    3608:	d100      	bne.n	360c <__aeabi_dsub+0x1d8>
    360a:	e14b      	b.n	38a4 <__aeabi_dsub+0x470>
    360c:	2201      	movs	r2, #1
    360e:	4b5b      	ldr	r3, [pc, #364]	; (377c <__aeabi_dsub+0x348>)
    3610:	401c      	ands	r4, r3
    3612:	087b      	lsrs	r3, r7, #1
    3614:	4017      	ands	r7, r2
    3616:	431f      	orrs	r7, r3
    3618:	07e2      	lsls	r2, r4, #31
    361a:	4317      	orrs	r7, r2
    361c:	0864      	lsrs	r4, r4, #1
    361e:	e78f      	b.n	3540 <__aeabi_dsub+0x10c>
    3620:	0008      	movs	r0, r1
    3622:	4310      	orrs	r0, r2
    3624:	d000      	beq.n	3628 <__aeabi_dsub+0x1f4>
    3626:	e724      	b.n	3472 <__aeabi_dsub+0x3e>
    3628:	e721      	b.n	346e <__aeabi_dsub+0x3a>
    362a:	0023      	movs	r3, r4
    362c:	433b      	orrs	r3, r7
    362e:	d100      	bne.n	3632 <__aeabi_dsub+0x1fe>
    3630:	e1b9      	b.n	39a6 <__aeabi_dsub+0x572>
    3632:	2280      	movs	r2, #128	; 0x80
    3634:	0312      	lsls	r2, r2, #12
    3636:	4314      	orrs	r4, r2
    3638:	0324      	lsls	r4, r4, #12
    363a:	0b24      	lsrs	r4, r4, #12
    363c:	e79f      	b.n	357e <__aeabi_dsub+0x14a>
    363e:	002e      	movs	r6, r5
    3640:	e77e      	b.n	3540 <__aeabi_dsub+0x10c>
    3642:	0008      	movs	r0, r1
    3644:	4310      	orrs	r0, r2
    3646:	d100      	bne.n	364a <__aeabi_dsub+0x216>
    3648:	e0ca      	b.n	37e0 <__aeabi_dsub+0x3ac>
    364a:	1e58      	subs	r0, r3, #1
    364c:	4684      	mov	ip, r0
    364e:	2800      	cmp	r0, #0
    3650:	d000      	beq.n	3654 <__aeabi_dsub+0x220>
    3652:	e0e7      	b.n	3824 <__aeabi_dsub+0x3f0>
    3654:	4452      	add	r2, sl
    3656:	4552      	cmp	r2, sl
    3658:	4180      	sbcs	r0, r0
    365a:	1864      	adds	r4, r4, r1
    365c:	4240      	negs	r0, r0
    365e:	1824      	adds	r4, r4, r0
    3660:	0017      	movs	r7, r2
    3662:	2601      	movs	r6, #1
    3664:	0223      	lsls	r3, r4, #8
    3666:	d507      	bpl.n	3678 <__aeabi_dsub+0x244>
    3668:	2602      	movs	r6, #2
    366a:	e7cf      	b.n	360c <__aeabi_dsub+0x1d8>
    366c:	4664      	mov	r4, ip
    366e:	432c      	orrs	r4, r5
    3670:	d100      	bne.n	3674 <__aeabi_dsub+0x240>
    3672:	e1b3      	b.n	39dc <__aeabi_dsub+0x5a8>
    3674:	002c      	movs	r4, r5
    3676:	4667      	mov	r7, ip
    3678:	077b      	lsls	r3, r7, #29
    367a:	d000      	beq.n	367e <__aeabi_dsub+0x24a>
    367c:	e762      	b.n	3544 <__aeabi_dsub+0x110>
    367e:	0763      	lsls	r3, r4, #29
    3680:	08ff      	lsrs	r7, r7, #3
    3682:	431f      	orrs	r7, r3
    3684:	2501      	movs	r5, #1
    3686:	4643      	mov	r3, r8
    3688:	08e4      	lsrs	r4, r4, #3
    368a:	401d      	ands	r5, r3
    368c:	e793      	b.n	35b6 <__aeabi_dsub+0x182>
    368e:	2d00      	cmp	r5, #0
    3690:	d178      	bne.n	3784 <__aeabi_dsub+0x350>
    3692:	1c75      	adds	r5, r6, #1
    3694:	056d      	lsls	r5, r5, #21
    3696:	0d6d      	lsrs	r5, r5, #21
    3698:	2d01      	cmp	r5, #1
    369a:	dc00      	bgt.n	369e <__aeabi_dsub+0x26a>
    369c:	e0f2      	b.n	3884 <__aeabi_dsub+0x450>
    369e:	4650      	mov	r0, sl
    36a0:	1a80      	subs	r0, r0, r2
    36a2:	4582      	cmp	sl, r0
    36a4:	41bf      	sbcs	r7, r7
    36a6:	1a65      	subs	r5, r4, r1
    36a8:	427f      	negs	r7, r7
    36aa:	1bed      	subs	r5, r5, r7
    36ac:	4684      	mov	ip, r0
    36ae:	0228      	lsls	r0, r5, #8
    36b0:	d400      	bmi.n	36b4 <__aeabi_dsub+0x280>
    36b2:	e08c      	b.n	37ce <__aeabi_dsub+0x39a>
    36b4:	4650      	mov	r0, sl
    36b6:	1a17      	subs	r7, r2, r0
    36b8:	42ba      	cmp	r2, r7
    36ba:	4192      	sbcs	r2, r2
    36bc:	1b0c      	subs	r4, r1, r4
    36be:	4255      	negs	r5, r2
    36c0:	1b65      	subs	r5, r4, r5
    36c2:	4698      	mov	r8, r3
    36c4:	e714      	b.n	34f0 <__aeabi_dsub+0xbc>
    36c6:	2501      	movs	r5, #1
    36c8:	4643      	mov	r3, r8
    36ca:	2400      	movs	r4, #0
    36cc:	401d      	ands	r5, r3
    36ce:	2700      	movs	r7, #0
    36d0:	e755      	b.n	357e <__aeabi_dsub+0x14a>
    36d2:	4c2a      	ldr	r4, [pc, #168]	; (377c <__aeabi_dsub+0x348>)
    36d4:	1af6      	subs	r6, r6, r3
    36d6:	402c      	ands	r4, r5
    36d8:	e732      	b.n	3540 <__aeabi_dsub+0x10c>
    36da:	003d      	movs	r5, r7
    36dc:	3828      	subs	r0, #40	; 0x28
    36de:	4085      	lsls	r5, r0
    36e0:	2700      	movs	r7, #0
    36e2:	e717      	b.n	3514 <__aeabi_dsub+0xe0>
    36e4:	0038      	movs	r0, r7
    36e6:	f000 fa27 	bl	3b38 <__clzsi2>
    36ea:	3020      	adds	r0, #32
    36ec:	e706      	b.n	34fc <__aeabi_dsub+0xc8>
    36ee:	430a      	orrs	r2, r1
    36f0:	0017      	movs	r7, r2
    36f2:	2100      	movs	r1, #0
    36f4:	1e7a      	subs	r2, r7, #1
    36f6:	4197      	sbcs	r7, r2
    36f8:	e6ee      	b.n	34d8 <__aeabi_dsub+0xa4>
    36fa:	2b00      	cmp	r3, #0
    36fc:	d000      	beq.n	3700 <__aeabi_dsub+0x2cc>
    36fe:	e0e5      	b.n	38cc <__aeabi_dsub+0x498>
    3700:	1c73      	adds	r3, r6, #1
    3702:	469c      	mov	ip, r3
    3704:	055b      	lsls	r3, r3, #21
    3706:	0d5b      	lsrs	r3, r3, #21
    3708:	2b01      	cmp	r3, #1
    370a:	dc00      	bgt.n	370e <__aeabi_dsub+0x2da>
    370c:	e09f      	b.n	384e <__aeabi_dsub+0x41a>
    370e:	4b1a      	ldr	r3, [pc, #104]	; (3778 <__aeabi_dsub+0x344>)
    3710:	459c      	cmp	ip, r3
    3712:	d100      	bne.n	3716 <__aeabi_dsub+0x2e2>
    3714:	e0c5      	b.n	38a2 <__aeabi_dsub+0x46e>
    3716:	4452      	add	r2, sl
    3718:	4552      	cmp	r2, sl
    371a:	4180      	sbcs	r0, r0
    371c:	1864      	adds	r4, r4, r1
    371e:	4240      	negs	r0, r0
    3720:	1824      	adds	r4, r4, r0
    3722:	07e7      	lsls	r7, r4, #31
    3724:	0852      	lsrs	r2, r2, #1
    3726:	4317      	orrs	r7, r2
    3728:	0864      	lsrs	r4, r4, #1
    372a:	4666      	mov	r6, ip
    372c:	e708      	b.n	3540 <__aeabi_dsub+0x10c>
    372e:	4812      	ldr	r0, [pc, #72]	; (3778 <__aeabi_dsub+0x344>)
    3730:	4285      	cmp	r5, r0
    3732:	d100      	bne.n	3736 <__aeabi_dsub+0x302>
    3734:	e085      	b.n	3842 <__aeabi_dsub+0x40e>
    3736:	001d      	movs	r5, r3
    3738:	e6bc      	b.n	34b4 <__aeabi_dsub+0x80>
    373a:	0029      	movs	r1, r5
    373c:	3e1f      	subs	r6, #31
    373e:	40f1      	lsrs	r1, r6
    3740:	2b20      	cmp	r3, #32
    3742:	d100      	bne.n	3746 <__aeabi_dsub+0x312>
    3744:	e07f      	b.n	3846 <__aeabi_dsub+0x412>
    3746:	2240      	movs	r2, #64	; 0x40
    3748:	1ad3      	subs	r3, r2, r3
    374a:	409d      	lsls	r5, r3
    374c:	432f      	orrs	r7, r5
    374e:	1e7d      	subs	r5, r7, #1
    3750:	41af      	sbcs	r7, r5
    3752:	2400      	movs	r4, #0
    3754:	430f      	orrs	r7, r1
    3756:	2600      	movs	r6, #0
    3758:	e78e      	b.n	3678 <__aeabi_dsub+0x244>
    375a:	002b      	movs	r3, r5
    375c:	000f      	movs	r7, r1
    375e:	3b20      	subs	r3, #32
    3760:	40df      	lsrs	r7, r3
    3762:	2d20      	cmp	r5, #32
    3764:	d071      	beq.n	384a <__aeabi_dsub+0x416>
    3766:	2340      	movs	r3, #64	; 0x40
    3768:	1b5d      	subs	r5, r3, r5
    376a:	40a9      	lsls	r1, r5
    376c:	430a      	orrs	r2, r1
    376e:	1e51      	subs	r1, r2, #1
    3770:	418a      	sbcs	r2, r1
    3772:	2100      	movs	r1, #0
    3774:	4317      	orrs	r7, r2
    3776:	e6af      	b.n	34d8 <__aeabi_dsub+0xa4>
    3778:	000007ff 	.word	0x000007ff
    377c:	ff7fffff 	.word	0xff7fffff
    3780:	800fffff 	.word	0x800fffff
    3784:	2e00      	cmp	r6, #0
    3786:	d03e      	beq.n	3806 <__aeabi_dsub+0x3d2>
    3788:	4eb3      	ldr	r6, [pc, #716]	; (3a58 <__aeabi_dsub+0x624>)
    378a:	45b4      	cmp	ip, r6
    378c:	d045      	beq.n	381a <__aeabi_dsub+0x3e6>
    378e:	2680      	movs	r6, #128	; 0x80
    3790:	0436      	lsls	r6, r6, #16
    3792:	426d      	negs	r5, r5
    3794:	4334      	orrs	r4, r6
    3796:	2d38      	cmp	r5, #56	; 0x38
    3798:	dd00      	ble.n	379c <__aeabi_dsub+0x368>
    379a:	e0a8      	b.n	38ee <__aeabi_dsub+0x4ba>
    379c:	2d1f      	cmp	r5, #31
    379e:	dd00      	ble.n	37a2 <__aeabi_dsub+0x36e>
    37a0:	e11f      	b.n	39e2 <__aeabi_dsub+0x5ae>
    37a2:	2620      	movs	r6, #32
    37a4:	0027      	movs	r7, r4
    37a6:	4650      	mov	r0, sl
    37a8:	1b76      	subs	r6, r6, r5
    37aa:	40b7      	lsls	r7, r6
    37ac:	40e8      	lsrs	r0, r5
    37ae:	4307      	orrs	r7, r0
    37b0:	4650      	mov	r0, sl
    37b2:	40b0      	lsls	r0, r6
    37b4:	1e46      	subs	r6, r0, #1
    37b6:	41b0      	sbcs	r0, r6
    37b8:	40ec      	lsrs	r4, r5
    37ba:	4338      	orrs	r0, r7
    37bc:	1a17      	subs	r7, r2, r0
    37be:	42ba      	cmp	r2, r7
    37c0:	4192      	sbcs	r2, r2
    37c2:	1b0c      	subs	r4, r1, r4
    37c4:	4252      	negs	r2, r2
    37c6:	1aa4      	subs	r4, r4, r2
    37c8:	4666      	mov	r6, ip
    37ca:	4698      	mov	r8, r3
    37cc:	e68b      	b.n	34e6 <__aeabi_dsub+0xb2>
    37ce:	4664      	mov	r4, ip
    37d0:	4667      	mov	r7, ip
    37d2:	432c      	orrs	r4, r5
    37d4:	d000      	beq.n	37d8 <__aeabi_dsub+0x3a4>
    37d6:	e68b      	b.n	34f0 <__aeabi_dsub+0xbc>
    37d8:	2500      	movs	r5, #0
    37da:	2600      	movs	r6, #0
    37dc:	2700      	movs	r7, #0
    37de:	e6ea      	b.n	35b6 <__aeabi_dsub+0x182>
    37e0:	001e      	movs	r6, r3
    37e2:	e6ad      	b.n	3540 <__aeabi_dsub+0x10c>
    37e4:	2b1f      	cmp	r3, #31
    37e6:	dc60      	bgt.n	38aa <__aeabi_dsub+0x476>
    37e8:	2720      	movs	r7, #32
    37ea:	1af8      	subs	r0, r7, r3
    37ec:	000f      	movs	r7, r1
    37ee:	4684      	mov	ip, r0
    37f0:	4087      	lsls	r7, r0
    37f2:	0010      	movs	r0, r2
    37f4:	40d8      	lsrs	r0, r3
    37f6:	4307      	orrs	r7, r0
    37f8:	4660      	mov	r0, ip
    37fa:	4082      	lsls	r2, r0
    37fc:	1e50      	subs	r0, r2, #1
    37fe:	4182      	sbcs	r2, r0
    3800:	40d9      	lsrs	r1, r3
    3802:	4317      	orrs	r7, r2
    3804:	e6f5      	b.n	35f2 <__aeabi_dsub+0x1be>
    3806:	0026      	movs	r6, r4
    3808:	4650      	mov	r0, sl
    380a:	4306      	orrs	r6, r0
    380c:	d005      	beq.n	381a <__aeabi_dsub+0x3e6>
    380e:	43ed      	mvns	r5, r5
    3810:	2d00      	cmp	r5, #0
    3812:	d0d3      	beq.n	37bc <__aeabi_dsub+0x388>
    3814:	4e90      	ldr	r6, [pc, #576]	; (3a58 <__aeabi_dsub+0x624>)
    3816:	45b4      	cmp	ip, r6
    3818:	d1bd      	bne.n	3796 <__aeabi_dsub+0x362>
    381a:	000c      	movs	r4, r1
    381c:	0017      	movs	r7, r2
    381e:	4666      	mov	r6, ip
    3820:	4698      	mov	r8, r3
    3822:	e68d      	b.n	3540 <__aeabi_dsub+0x10c>
    3824:	488c      	ldr	r0, [pc, #560]	; (3a58 <__aeabi_dsub+0x624>)
    3826:	4283      	cmp	r3, r0
    3828:	d00b      	beq.n	3842 <__aeabi_dsub+0x40e>
    382a:	4663      	mov	r3, ip
    382c:	e6d9      	b.n	35e2 <__aeabi_dsub+0x1ae>
    382e:	2d00      	cmp	r5, #0
    3830:	d000      	beq.n	3834 <__aeabi_dsub+0x400>
    3832:	e096      	b.n	3962 <__aeabi_dsub+0x52e>
    3834:	0008      	movs	r0, r1
    3836:	4310      	orrs	r0, r2
    3838:	d100      	bne.n	383c <__aeabi_dsub+0x408>
    383a:	e0e2      	b.n	3a02 <__aeabi_dsub+0x5ce>
    383c:	000c      	movs	r4, r1
    383e:	0017      	movs	r7, r2
    3840:	4698      	mov	r8, r3
    3842:	4e85      	ldr	r6, [pc, #532]	; (3a58 <__aeabi_dsub+0x624>)
    3844:	e67c      	b.n	3540 <__aeabi_dsub+0x10c>
    3846:	2500      	movs	r5, #0
    3848:	e780      	b.n	374c <__aeabi_dsub+0x318>
    384a:	2100      	movs	r1, #0
    384c:	e78e      	b.n	376c <__aeabi_dsub+0x338>
    384e:	0023      	movs	r3, r4
    3850:	4650      	mov	r0, sl
    3852:	4303      	orrs	r3, r0
    3854:	2e00      	cmp	r6, #0
    3856:	d000      	beq.n	385a <__aeabi_dsub+0x426>
    3858:	e0a8      	b.n	39ac <__aeabi_dsub+0x578>
    385a:	2b00      	cmp	r3, #0
    385c:	d100      	bne.n	3860 <__aeabi_dsub+0x42c>
    385e:	e0de      	b.n	3a1e <__aeabi_dsub+0x5ea>
    3860:	000b      	movs	r3, r1
    3862:	4313      	orrs	r3, r2
    3864:	d100      	bne.n	3868 <__aeabi_dsub+0x434>
    3866:	e66b      	b.n	3540 <__aeabi_dsub+0x10c>
    3868:	4452      	add	r2, sl
    386a:	4552      	cmp	r2, sl
    386c:	4180      	sbcs	r0, r0
    386e:	1864      	adds	r4, r4, r1
    3870:	4240      	negs	r0, r0
    3872:	1824      	adds	r4, r4, r0
    3874:	0017      	movs	r7, r2
    3876:	0223      	lsls	r3, r4, #8
    3878:	d400      	bmi.n	387c <__aeabi_dsub+0x448>
    387a:	e6fd      	b.n	3678 <__aeabi_dsub+0x244>
    387c:	4b77      	ldr	r3, [pc, #476]	; (3a5c <__aeabi_dsub+0x628>)
    387e:	4666      	mov	r6, ip
    3880:	401c      	ands	r4, r3
    3882:	e65d      	b.n	3540 <__aeabi_dsub+0x10c>
    3884:	0025      	movs	r5, r4
    3886:	4650      	mov	r0, sl
    3888:	4305      	orrs	r5, r0
    388a:	2e00      	cmp	r6, #0
    388c:	d1cf      	bne.n	382e <__aeabi_dsub+0x3fa>
    388e:	2d00      	cmp	r5, #0
    3890:	d14f      	bne.n	3932 <__aeabi_dsub+0x4fe>
    3892:	000c      	movs	r4, r1
    3894:	4314      	orrs	r4, r2
    3896:	d100      	bne.n	389a <__aeabi_dsub+0x466>
    3898:	e0a0      	b.n	39dc <__aeabi_dsub+0x5a8>
    389a:	000c      	movs	r4, r1
    389c:	0017      	movs	r7, r2
    389e:	4698      	mov	r8, r3
    38a0:	e64e      	b.n	3540 <__aeabi_dsub+0x10c>
    38a2:	4666      	mov	r6, ip
    38a4:	2400      	movs	r4, #0
    38a6:	2700      	movs	r7, #0
    38a8:	e685      	b.n	35b6 <__aeabi_dsub+0x182>
    38aa:	001f      	movs	r7, r3
    38ac:	0008      	movs	r0, r1
    38ae:	3f20      	subs	r7, #32
    38b0:	40f8      	lsrs	r0, r7
    38b2:	0007      	movs	r7, r0
    38b4:	2b20      	cmp	r3, #32
    38b6:	d100      	bne.n	38ba <__aeabi_dsub+0x486>
    38b8:	e08e      	b.n	39d8 <__aeabi_dsub+0x5a4>
    38ba:	2040      	movs	r0, #64	; 0x40
    38bc:	1ac3      	subs	r3, r0, r3
    38be:	4099      	lsls	r1, r3
    38c0:	430a      	orrs	r2, r1
    38c2:	1e51      	subs	r1, r2, #1
    38c4:	418a      	sbcs	r2, r1
    38c6:	2100      	movs	r1, #0
    38c8:	4317      	orrs	r7, r2
    38ca:	e692      	b.n	35f2 <__aeabi_dsub+0x1be>
    38cc:	2e00      	cmp	r6, #0
    38ce:	d114      	bne.n	38fa <__aeabi_dsub+0x4c6>
    38d0:	0026      	movs	r6, r4
    38d2:	4650      	mov	r0, sl
    38d4:	4306      	orrs	r6, r0
    38d6:	d062      	beq.n	399e <__aeabi_dsub+0x56a>
    38d8:	43db      	mvns	r3, r3
    38da:	2b00      	cmp	r3, #0
    38dc:	d15c      	bne.n	3998 <__aeabi_dsub+0x564>
    38de:	1887      	adds	r7, r0, r2
    38e0:	4297      	cmp	r7, r2
    38e2:	4192      	sbcs	r2, r2
    38e4:	1864      	adds	r4, r4, r1
    38e6:	4252      	negs	r2, r2
    38e8:	18a4      	adds	r4, r4, r2
    38ea:	4666      	mov	r6, ip
    38ec:	e687      	b.n	35fe <__aeabi_dsub+0x1ca>
    38ee:	4650      	mov	r0, sl
    38f0:	4320      	orrs	r0, r4
    38f2:	1e44      	subs	r4, r0, #1
    38f4:	41a0      	sbcs	r0, r4
    38f6:	2400      	movs	r4, #0
    38f8:	e760      	b.n	37bc <__aeabi_dsub+0x388>
    38fa:	4e57      	ldr	r6, [pc, #348]	; (3a58 <__aeabi_dsub+0x624>)
    38fc:	45b4      	cmp	ip, r6
    38fe:	d04e      	beq.n	399e <__aeabi_dsub+0x56a>
    3900:	2680      	movs	r6, #128	; 0x80
    3902:	0436      	lsls	r6, r6, #16
    3904:	425b      	negs	r3, r3
    3906:	4334      	orrs	r4, r6
    3908:	2b38      	cmp	r3, #56	; 0x38
    390a:	dd00      	ble.n	390e <__aeabi_dsub+0x4da>
    390c:	e07f      	b.n	3a0e <__aeabi_dsub+0x5da>
    390e:	2b1f      	cmp	r3, #31
    3910:	dd00      	ble.n	3914 <__aeabi_dsub+0x4e0>
    3912:	e08b      	b.n	3a2c <__aeabi_dsub+0x5f8>
    3914:	2620      	movs	r6, #32
    3916:	0027      	movs	r7, r4
    3918:	4650      	mov	r0, sl
    391a:	1af6      	subs	r6, r6, r3
    391c:	40b7      	lsls	r7, r6
    391e:	40d8      	lsrs	r0, r3
    3920:	4307      	orrs	r7, r0
    3922:	4650      	mov	r0, sl
    3924:	40b0      	lsls	r0, r6
    3926:	1e46      	subs	r6, r0, #1
    3928:	41b0      	sbcs	r0, r6
    392a:	4307      	orrs	r7, r0
    392c:	40dc      	lsrs	r4, r3
    392e:	18bf      	adds	r7, r7, r2
    3930:	e7d6      	b.n	38e0 <__aeabi_dsub+0x4ac>
    3932:	000d      	movs	r5, r1
    3934:	4315      	orrs	r5, r2
    3936:	d100      	bne.n	393a <__aeabi_dsub+0x506>
    3938:	e602      	b.n	3540 <__aeabi_dsub+0x10c>
    393a:	4650      	mov	r0, sl
    393c:	1a80      	subs	r0, r0, r2
    393e:	4582      	cmp	sl, r0
    3940:	41bf      	sbcs	r7, r7
    3942:	1a65      	subs	r5, r4, r1
    3944:	427f      	negs	r7, r7
    3946:	1bed      	subs	r5, r5, r7
    3948:	4684      	mov	ip, r0
    394a:	0228      	lsls	r0, r5, #8
    394c:	d400      	bmi.n	3950 <__aeabi_dsub+0x51c>
    394e:	e68d      	b.n	366c <__aeabi_dsub+0x238>
    3950:	4650      	mov	r0, sl
    3952:	1a17      	subs	r7, r2, r0
    3954:	42ba      	cmp	r2, r7
    3956:	4192      	sbcs	r2, r2
    3958:	1b0c      	subs	r4, r1, r4
    395a:	4252      	negs	r2, r2
    395c:	1aa4      	subs	r4, r4, r2
    395e:	4698      	mov	r8, r3
    3960:	e5ee      	b.n	3540 <__aeabi_dsub+0x10c>
    3962:	000d      	movs	r5, r1
    3964:	4315      	orrs	r5, r2
    3966:	d100      	bne.n	396a <__aeabi_dsub+0x536>
    3968:	e76b      	b.n	3842 <__aeabi_dsub+0x40e>
    396a:	4650      	mov	r0, sl
    396c:	0767      	lsls	r7, r4, #29
    396e:	08c0      	lsrs	r0, r0, #3
    3970:	4307      	orrs	r7, r0
    3972:	2080      	movs	r0, #128	; 0x80
    3974:	08e4      	lsrs	r4, r4, #3
    3976:	0300      	lsls	r0, r0, #12
    3978:	4204      	tst	r4, r0
    397a:	d007      	beq.n	398c <__aeabi_dsub+0x558>
    397c:	08cd      	lsrs	r5, r1, #3
    397e:	4205      	tst	r5, r0
    3980:	d104      	bne.n	398c <__aeabi_dsub+0x558>
    3982:	002c      	movs	r4, r5
    3984:	4698      	mov	r8, r3
    3986:	08d7      	lsrs	r7, r2, #3
    3988:	0749      	lsls	r1, r1, #29
    398a:	430f      	orrs	r7, r1
    398c:	0f7b      	lsrs	r3, r7, #29
    398e:	00e4      	lsls	r4, r4, #3
    3990:	431c      	orrs	r4, r3
    3992:	00ff      	lsls	r7, r7, #3
    3994:	4e30      	ldr	r6, [pc, #192]	; (3a58 <__aeabi_dsub+0x624>)
    3996:	e5d3      	b.n	3540 <__aeabi_dsub+0x10c>
    3998:	4e2f      	ldr	r6, [pc, #188]	; (3a58 <__aeabi_dsub+0x624>)
    399a:	45b4      	cmp	ip, r6
    399c:	d1b4      	bne.n	3908 <__aeabi_dsub+0x4d4>
    399e:	000c      	movs	r4, r1
    39a0:	0017      	movs	r7, r2
    39a2:	4666      	mov	r6, ip
    39a4:	e5cc      	b.n	3540 <__aeabi_dsub+0x10c>
    39a6:	2700      	movs	r7, #0
    39a8:	2400      	movs	r4, #0
    39aa:	e5e8      	b.n	357e <__aeabi_dsub+0x14a>
    39ac:	2b00      	cmp	r3, #0
    39ae:	d039      	beq.n	3a24 <__aeabi_dsub+0x5f0>
    39b0:	000b      	movs	r3, r1
    39b2:	4313      	orrs	r3, r2
    39b4:	d100      	bne.n	39b8 <__aeabi_dsub+0x584>
    39b6:	e744      	b.n	3842 <__aeabi_dsub+0x40e>
    39b8:	08c0      	lsrs	r0, r0, #3
    39ba:	0767      	lsls	r7, r4, #29
    39bc:	4307      	orrs	r7, r0
    39be:	2080      	movs	r0, #128	; 0x80
    39c0:	08e4      	lsrs	r4, r4, #3
    39c2:	0300      	lsls	r0, r0, #12
    39c4:	4204      	tst	r4, r0
    39c6:	d0e1      	beq.n	398c <__aeabi_dsub+0x558>
    39c8:	08cb      	lsrs	r3, r1, #3
    39ca:	4203      	tst	r3, r0
    39cc:	d1de      	bne.n	398c <__aeabi_dsub+0x558>
    39ce:	08d7      	lsrs	r7, r2, #3
    39d0:	0749      	lsls	r1, r1, #29
    39d2:	430f      	orrs	r7, r1
    39d4:	001c      	movs	r4, r3
    39d6:	e7d9      	b.n	398c <__aeabi_dsub+0x558>
    39d8:	2100      	movs	r1, #0
    39da:	e771      	b.n	38c0 <__aeabi_dsub+0x48c>
    39dc:	2500      	movs	r5, #0
    39de:	2700      	movs	r7, #0
    39e0:	e5e9      	b.n	35b6 <__aeabi_dsub+0x182>
    39e2:	002e      	movs	r6, r5
    39e4:	0027      	movs	r7, r4
    39e6:	3e20      	subs	r6, #32
    39e8:	40f7      	lsrs	r7, r6
    39ea:	2d20      	cmp	r5, #32
    39ec:	d02f      	beq.n	3a4e <__aeabi_dsub+0x61a>
    39ee:	2640      	movs	r6, #64	; 0x40
    39f0:	1b75      	subs	r5, r6, r5
    39f2:	40ac      	lsls	r4, r5
    39f4:	4650      	mov	r0, sl
    39f6:	4320      	orrs	r0, r4
    39f8:	1e44      	subs	r4, r0, #1
    39fa:	41a0      	sbcs	r0, r4
    39fc:	2400      	movs	r4, #0
    39fe:	4338      	orrs	r0, r7
    3a00:	e6dc      	b.n	37bc <__aeabi_dsub+0x388>
    3a02:	2480      	movs	r4, #128	; 0x80
    3a04:	2500      	movs	r5, #0
    3a06:	0324      	lsls	r4, r4, #12
    3a08:	4e13      	ldr	r6, [pc, #76]	; (3a58 <__aeabi_dsub+0x624>)
    3a0a:	2700      	movs	r7, #0
    3a0c:	e5d3      	b.n	35b6 <__aeabi_dsub+0x182>
    3a0e:	4650      	mov	r0, sl
    3a10:	4320      	orrs	r0, r4
    3a12:	0007      	movs	r7, r0
    3a14:	1e78      	subs	r0, r7, #1
    3a16:	4187      	sbcs	r7, r0
    3a18:	2400      	movs	r4, #0
    3a1a:	18bf      	adds	r7, r7, r2
    3a1c:	e760      	b.n	38e0 <__aeabi_dsub+0x4ac>
    3a1e:	000c      	movs	r4, r1
    3a20:	0017      	movs	r7, r2
    3a22:	e58d      	b.n	3540 <__aeabi_dsub+0x10c>
    3a24:	000c      	movs	r4, r1
    3a26:	0017      	movs	r7, r2
    3a28:	4e0b      	ldr	r6, [pc, #44]	; (3a58 <__aeabi_dsub+0x624>)
    3a2a:	e589      	b.n	3540 <__aeabi_dsub+0x10c>
    3a2c:	001e      	movs	r6, r3
    3a2e:	0027      	movs	r7, r4
    3a30:	3e20      	subs	r6, #32
    3a32:	40f7      	lsrs	r7, r6
    3a34:	2b20      	cmp	r3, #32
    3a36:	d00c      	beq.n	3a52 <__aeabi_dsub+0x61e>
    3a38:	2640      	movs	r6, #64	; 0x40
    3a3a:	1af3      	subs	r3, r6, r3
    3a3c:	409c      	lsls	r4, r3
    3a3e:	4650      	mov	r0, sl
    3a40:	4320      	orrs	r0, r4
    3a42:	1e44      	subs	r4, r0, #1
    3a44:	41a0      	sbcs	r0, r4
    3a46:	4307      	orrs	r7, r0
    3a48:	2400      	movs	r4, #0
    3a4a:	18bf      	adds	r7, r7, r2
    3a4c:	e748      	b.n	38e0 <__aeabi_dsub+0x4ac>
    3a4e:	2400      	movs	r4, #0
    3a50:	e7d0      	b.n	39f4 <__aeabi_dsub+0x5c0>
    3a52:	2400      	movs	r4, #0
    3a54:	e7f3      	b.n	3a3e <__aeabi_dsub+0x60a>
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	000007ff 	.word	0x000007ff
    3a5c:	ff7fffff 	.word	0xff7fffff

00003a60 <__aeabi_d2iz>:
    3a60:	b530      	push	{r4, r5, lr}
    3a62:	4d13      	ldr	r5, [pc, #76]	; (3ab0 <__aeabi_d2iz+0x50>)
    3a64:	030a      	lsls	r2, r1, #12
    3a66:	004b      	lsls	r3, r1, #1
    3a68:	0b12      	lsrs	r2, r2, #12
    3a6a:	0d5b      	lsrs	r3, r3, #21
    3a6c:	0fc9      	lsrs	r1, r1, #31
    3a6e:	2400      	movs	r4, #0
    3a70:	42ab      	cmp	r3, r5
    3a72:	dd10      	ble.n	3a96 <__aeabi_d2iz+0x36>
    3a74:	4c0f      	ldr	r4, [pc, #60]	; (3ab4 <__aeabi_d2iz+0x54>)
    3a76:	42a3      	cmp	r3, r4
    3a78:	dc0f      	bgt.n	3a9a <__aeabi_d2iz+0x3a>
    3a7a:	2480      	movs	r4, #128	; 0x80
    3a7c:	4d0e      	ldr	r5, [pc, #56]	; (3ab8 <__aeabi_d2iz+0x58>)
    3a7e:	0364      	lsls	r4, r4, #13
    3a80:	4322      	orrs	r2, r4
    3a82:	1aed      	subs	r5, r5, r3
    3a84:	2d1f      	cmp	r5, #31
    3a86:	dd0b      	ble.n	3aa0 <__aeabi_d2iz+0x40>
    3a88:	480c      	ldr	r0, [pc, #48]	; (3abc <__aeabi_d2iz+0x5c>)
    3a8a:	1ac3      	subs	r3, r0, r3
    3a8c:	40da      	lsrs	r2, r3
    3a8e:	4254      	negs	r4, r2
    3a90:	2900      	cmp	r1, #0
    3a92:	d100      	bne.n	3a96 <__aeabi_d2iz+0x36>
    3a94:	0014      	movs	r4, r2
    3a96:	0020      	movs	r0, r4
    3a98:	bd30      	pop	{r4, r5, pc}
    3a9a:	4b09      	ldr	r3, [pc, #36]	; (3ac0 <__aeabi_d2iz+0x60>)
    3a9c:	18cc      	adds	r4, r1, r3
    3a9e:	e7fa      	b.n	3a96 <__aeabi_d2iz+0x36>
    3aa0:	4c08      	ldr	r4, [pc, #32]	; (3ac4 <__aeabi_d2iz+0x64>)
    3aa2:	40e8      	lsrs	r0, r5
    3aa4:	46a4      	mov	ip, r4
    3aa6:	4463      	add	r3, ip
    3aa8:	409a      	lsls	r2, r3
    3aaa:	4302      	orrs	r2, r0
    3aac:	e7ef      	b.n	3a8e <__aeabi_d2iz+0x2e>
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	000003fe 	.word	0x000003fe
    3ab4:	0000041d 	.word	0x0000041d
    3ab8:	00000433 	.word	0x00000433
    3abc:	00000413 	.word	0x00000413
    3ac0:	7fffffff 	.word	0x7fffffff
    3ac4:	fffffbed 	.word	0xfffffbed

00003ac8 <__aeabi_ui2d>:
    3ac8:	b510      	push	{r4, lr}
    3aca:	1e04      	subs	r4, r0, #0
    3acc:	d028      	beq.n	3b20 <__aeabi_ui2d+0x58>
    3ace:	f000 f833 	bl	3b38 <__clzsi2>
    3ad2:	4b15      	ldr	r3, [pc, #84]	; (3b28 <__aeabi_ui2d+0x60>)
    3ad4:	4a15      	ldr	r2, [pc, #84]	; (3b2c <__aeabi_ui2d+0x64>)
    3ad6:	1a1b      	subs	r3, r3, r0
    3ad8:	1ad2      	subs	r2, r2, r3
    3ada:	2a1f      	cmp	r2, #31
    3adc:	dd15      	ble.n	3b0a <__aeabi_ui2d+0x42>
    3ade:	4a14      	ldr	r2, [pc, #80]	; (3b30 <__aeabi_ui2d+0x68>)
    3ae0:	1ad2      	subs	r2, r2, r3
    3ae2:	4094      	lsls	r4, r2
    3ae4:	2200      	movs	r2, #0
    3ae6:	0324      	lsls	r4, r4, #12
    3ae8:	055b      	lsls	r3, r3, #21
    3aea:	0b24      	lsrs	r4, r4, #12
    3aec:	0d5b      	lsrs	r3, r3, #21
    3aee:	2100      	movs	r1, #0
    3af0:	0010      	movs	r0, r2
    3af2:	0324      	lsls	r4, r4, #12
    3af4:	0d0a      	lsrs	r2, r1, #20
    3af6:	0b24      	lsrs	r4, r4, #12
    3af8:	0512      	lsls	r2, r2, #20
    3afa:	4322      	orrs	r2, r4
    3afc:	4c0d      	ldr	r4, [pc, #52]	; (3b34 <__aeabi_ui2d+0x6c>)
    3afe:	051b      	lsls	r3, r3, #20
    3b00:	4022      	ands	r2, r4
    3b02:	4313      	orrs	r3, r2
    3b04:	005b      	lsls	r3, r3, #1
    3b06:	0859      	lsrs	r1, r3, #1
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	0021      	movs	r1, r4
    3b0c:	4091      	lsls	r1, r2
    3b0e:	000a      	movs	r2, r1
    3b10:	210b      	movs	r1, #11
    3b12:	1a08      	subs	r0, r1, r0
    3b14:	40c4      	lsrs	r4, r0
    3b16:	055b      	lsls	r3, r3, #21
    3b18:	0324      	lsls	r4, r4, #12
    3b1a:	0b24      	lsrs	r4, r4, #12
    3b1c:	0d5b      	lsrs	r3, r3, #21
    3b1e:	e7e6      	b.n	3aee <__aeabi_ui2d+0x26>
    3b20:	2300      	movs	r3, #0
    3b22:	2400      	movs	r4, #0
    3b24:	2200      	movs	r2, #0
    3b26:	e7e2      	b.n	3aee <__aeabi_ui2d+0x26>
    3b28:	0000041e 	.word	0x0000041e
    3b2c:	00000433 	.word	0x00000433
    3b30:	00000413 	.word	0x00000413
    3b34:	800fffff 	.word	0x800fffff

00003b38 <__clzsi2>:
    3b38:	211c      	movs	r1, #28
    3b3a:	2301      	movs	r3, #1
    3b3c:	041b      	lsls	r3, r3, #16
    3b3e:	4298      	cmp	r0, r3
    3b40:	d301      	bcc.n	3b46 <__clzsi2+0xe>
    3b42:	0c00      	lsrs	r0, r0, #16
    3b44:	3910      	subs	r1, #16
    3b46:	0a1b      	lsrs	r3, r3, #8
    3b48:	4298      	cmp	r0, r3
    3b4a:	d301      	bcc.n	3b50 <__clzsi2+0x18>
    3b4c:	0a00      	lsrs	r0, r0, #8
    3b4e:	3908      	subs	r1, #8
    3b50:	091b      	lsrs	r3, r3, #4
    3b52:	4298      	cmp	r0, r3
    3b54:	d301      	bcc.n	3b5a <__clzsi2+0x22>
    3b56:	0900      	lsrs	r0, r0, #4
    3b58:	3904      	subs	r1, #4
    3b5a:	a202      	add	r2, pc, #8	; (adr r2, 3b64 <__clzsi2+0x2c>)
    3b5c:	5c10      	ldrb	r0, [r2, r0]
    3b5e:	1840      	adds	r0, r0, r1
    3b60:	4770      	bx	lr
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	02020304 	.word	0x02020304
    3b68:	01010101 	.word	0x01010101
	...

00003b74 <__libc_init_array>:
    3b74:	b570      	push	{r4, r5, r6, lr}
    3b76:	2600      	movs	r6, #0
    3b78:	4d0c      	ldr	r5, [pc, #48]	; (3bac <__libc_init_array+0x38>)
    3b7a:	4c0d      	ldr	r4, [pc, #52]	; (3bb0 <__libc_init_array+0x3c>)
    3b7c:	1b64      	subs	r4, r4, r5
    3b7e:	10a4      	asrs	r4, r4, #2
    3b80:	42a6      	cmp	r6, r4
    3b82:	d109      	bne.n	3b98 <__libc_init_array+0x24>
    3b84:	2600      	movs	r6, #0
    3b86:	f000 f881 	bl	3c8c <_init>
    3b8a:	4d0a      	ldr	r5, [pc, #40]	; (3bb4 <__libc_init_array+0x40>)
    3b8c:	4c0a      	ldr	r4, [pc, #40]	; (3bb8 <__libc_init_array+0x44>)
    3b8e:	1b64      	subs	r4, r4, r5
    3b90:	10a4      	asrs	r4, r4, #2
    3b92:	42a6      	cmp	r6, r4
    3b94:	d105      	bne.n	3ba2 <__libc_init_array+0x2e>
    3b96:	bd70      	pop	{r4, r5, r6, pc}
    3b98:	00b3      	lsls	r3, r6, #2
    3b9a:	58eb      	ldr	r3, [r5, r3]
    3b9c:	4798      	blx	r3
    3b9e:	3601      	adds	r6, #1
    3ba0:	e7ee      	b.n	3b80 <__libc_init_array+0xc>
    3ba2:	00b3      	lsls	r3, r6, #2
    3ba4:	58eb      	ldr	r3, [r5, r3]
    3ba6:	4798      	blx	r3
    3ba8:	3601      	adds	r6, #1
    3baa:	e7f2      	b.n	3b92 <__libc_init_array+0x1e>
    3bac:	00003c98 	.word	0x00003c98
    3bb0:	00003c98 	.word	0x00003c98
    3bb4:	00003c98 	.word	0x00003c98
    3bb8:	00003c9c 	.word	0x00003c9c

00003bbc <memset>:
    3bbc:	0003      	movs	r3, r0
    3bbe:	1882      	adds	r2, r0, r2
    3bc0:	4293      	cmp	r3, r2
    3bc2:	d100      	bne.n	3bc6 <memset+0xa>
    3bc4:	4770      	bx	lr
    3bc6:	7019      	strb	r1, [r3, #0]
    3bc8:	3301      	adds	r3, #1
    3bca:	e7f9      	b.n	3bc0 <memset+0x4>
    3bcc:	42000800 	.word	0x42000800
    3bd0:	42000c00 	.word	0x42000c00
    3bd4:	42001000 	.word	0x42001000

00003bd8 <_tcc_intflag>:
    3bd8:	00000001 00000002 00000004 00000008     ................
    3be8:	00001000 00002000 00004000 00008000     ..... ...@......
    3bf8:	00010000 00020000 00040000 00080000     ................

00003c08 <tc_interrupt_vectors.12207>:
    3c08:	00000e0d 00002ac4 00002aa6 00002a60     .....*...*..`*..
    3c18:	0000297e 00002a60 00002a98 00002a60     ~)..`*...*..`*..
    3c28:	0000297e 00002aa6 00002aa6 00002a98     ~)...*...*...*..
    3c38:	0000297e 00002976 00002976 00002976     ~)..v)..v)..v)..
    3c48:	00002cdc 00003124 00002fe4 00002fe4     .,..$1.../.../..
    3c58:	00002fe0 000030fc 000030fc 000030ee     ./...0...0...0..
    3c68:	00002fe0 000030fc 000030ee 000030fc     ./...0...0...0..
    3c78:	00002fe0 00003104 00003104 00003104     ./...1...1...1..
    3c88:	00003308                                .3..

00003c8c <_init>:
    3c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c92:	bc08      	pop	{r3}
    3c94:	469e      	mov	lr, r3
    3c96:	4770      	bx	lr

00003c98 <__init_array_start>:
    3c98:	000000b5 	.word	0x000000b5

00003c9c <_fini>:
    3c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3ca2:	bc08      	pop	{r3}
    3ca4:	469e      	mov	lr, r3
    3ca6:	4770      	bx	lr

00003ca8 <__fini_array_start>:
    3ca8:	0000008d 	.word	0x0000008d
