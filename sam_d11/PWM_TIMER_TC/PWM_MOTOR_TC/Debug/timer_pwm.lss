
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d88  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000028  20000000  00003d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d4  20000028  00003db0  00020028  2**2
                  ALLOC
  3 .stack        00000404  200001fc  00003f84  00020028  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004a42f  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000524d  00000000  00000000  0006a4da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005f5a  00000000  00000000  0006f727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000780  00000000  00000000  00075681  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b68  00000000  00000000  00075e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019f72  00000000  00000000  00076969  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012661  00000000  00000000  000908db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007b4ba  00000000  00000000  000a2f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001358  00000000  00000000  0011e3f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 06 00 20 3d 1f 00 00 3b 1f 00 00 3b 1f 00 00     ... =...;...;...
	...
      2c:	3b 1f 00 00 00 00 00 00 00 00 00 00 3b 1f 00 00     ;...........;...
      3c:	3b 1f 00 00 3b 1f 00 00 3b 1f 00 00 3b 1f 00 00     ;...;...;...;...
      4c:	3b 1f 00 00 3b 1f 00 00 3b 1f 00 00 3b 1f 00 00     ;...;...;...;...
      5c:	3b 1f 00 00 3b 1f 00 00 0d 11 00 00 1d 11 00 00     ;...;...........
      6c:	2d 11 00 00 05 1c 00 00 91 1c 00 00 9b 1c 00 00     -...............
      7c:	3b 1f 00 00 3b 1f 00 00 3b 1f 00 00 3b 1f 00 00     ;...;...;...;...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000028 	.word	0x20000028
      ac:	00000000 	.word	0x00000000
      b0:	00003d88 	.word	0x00003d88

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	2000002c 	.word	0x2000002c
      e0:	00003d88 	.word	0x00003d88
      e4:	00003d88 	.word	0x00003d88
      e8:	00000000 	.word	0x00000000

000000ec <is_button_one_pressed>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
      ec:	4b14      	ldr	r3, [pc, #80]	; (140 <is_button_one_pressed+0x54>)
      ee:	4915      	ldr	r1, [pc, #84]	; (144 <is_button_one_pressed+0x58>)
      f0:	6a18      	ldr	r0, [r3, #32]
      f2:	4a15      	ldr	r2, [pc, #84]	; (148 <is_button_one_pressed+0x5c>)
      f4:	4b15      	ldr	r3, [pc, #84]	; (14c <is_button_one_pressed+0x60>)
/************************************************************************/
/* Button 1 function													*/
/************************************************************************/
bool is_button_one_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_1)) {
      f6:	0440      	lsls	r0, r0, #17
      f8:	d418      	bmi.n	12c <is_button_one_pressed+0x40>
    BUTTON_ONE_PRESS_STATUS = true;
      fa:	2001      	movs	r0, #1
      fc:	7008      	strb	r0, [r1, #0]
    press_B1_delay_count--;
      fe:	6819      	ldr	r1, [r3, #0]
     100:	3901      	subs	r1, #1
     102:	6019      	str	r1, [r3, #0]
    long_press_B1_delay_count--;
     104:	6811      	ldr	r1, [r2, #0]
     106:	3901      	subs	r1, #1

  } else {
    BUTTON_ONE_PRESS_STATUS = false;
    press_B1_delay_count = DELAY_DEBOUNCE_CN;
    long_press_B1_delay_count = DELAY_PRESS_CN;
     108:	6011      	str	r1, [r2, #0]

  }

  // long press delay logic
  if (long_press_B1_delay_count <= 0) {
     10a:	6811      	ldr	r1, [r2, #0]
     10c:	2900      	cmp	r1, #0
     10e:	dc04      	bgt.n	11a <is_button_one_pressed+0x2e>
    LongPressB1Flag = true;
     110:	2001      	movs	r0, #1
     112:	490f      	ldr	r1, [pc, #60]	; (150 <is_button_one_pressed+0x64>)
     114:	7008      	strb	r0, [r1, #0]
    long_press_B1_delay_count = 0;
     116:	2100      	movs	r1, #0
     118:	6011      	str	r1, [r2, #0]
     11a:	2000      	movs	r0, #0
  }

  // debounce logic
  if (press_B1_delay_count <= 0) {
     11c:	6819      	ldr	r1, [r3, #0]
     11e:	4a0d      	ldr	r2, [pc, #52]	; (154 <is_button_one_pressed+0x68>)
     120:	4281      	cmp	r1, r0
     122:	dc0a      	bgt.n	13a <is_button_one_pressed+0x4e>
    BUTTON_ONE_RELEASE_STATUS = false;
     124:	7010      	strb	r0, [r2, #0]
    press_B1_delay_count = 0;
     126:	6018      	str	r0, [r3, #0]
    return true;
     128:	3001      	adds	r0, #1

  } else {
    BUTTON_ONE_RELEASE_STATUS = true;
    return false;
  }
}
     12a:	4770      	bx	lr
    BUTTON_ONE_PRESS_STATUS = false;
     12c:	2000      	movs	r0, #0
     12e:	7008      	strb	r0, [r1, #0]
    press_B1_delay_count = DELAY_DEBOUNCE_CN;
     130:	2102      	movs	r1, #2
     132:	6019      	str	r1, [r3, #0]
    long_press_B1_delay_count = DELAY_PRESS_CN;
     134:	318f      	adds	r1, #143	; 0x8f
     136:	31ff      	adds	r1, #255	; 0xff
     138:	e7e6      	b.n	108 <is_button_one_pressed+0x1c>
    BUTTON_ONE_RELEASE_STATUS = true;
     13a:	2301      	movs	r3, #1
     13c:	7013      	strb	r3, [r2, #0]
    return false;
     13e:	e7f4      	b.n	12a <is_button_one_pressed+0x3e>
     140:	41004400 	.word	0x41004400
     144:	20000044 	.word	0x20000044
     148:	20000000 	.word	0x20000000
     14c:	20000008 	.word	0x20000008
     150:	20000048 	.word	0x20000048
     154:	20000045 	.word	0x20000045

00000158 <is_button_two_pressed>:
     158:	4b14      	ldr	r3, [pc, #80]	; (1ac <is_button_two_pressed+0x54>)
     15a:	4915      	ldr	r1, [pc, #84]	; (1b0 <is_button_two_pressed+0x58>)
     15c:	6a18      	ldr	r0, [r3, #32]
     15e:	4a15      	ldr	r2, [pc, #84]	; (1b4 <is_button_two_pressed+0x5c>)
     160:	4b15      	ldr	r3, [pc, #84]	; (1b8 <is_button_two_pressed+0x60>)
/************************************************************************/
/* Button 2 function														*/
/************************************************************************/
bool is_button_two_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_2)) {
     162:	0400      	lsls	r0, r0, #16
     164:	d418      	bmi.n	198 <is_button_two_pressed+0x40>
    BUTTON_TWO_PRESS_STATUS = true;
     166:	2001      	movs	r0, #1
     168:	7008      	strb	r0, [r1, #0]
    press_B2_delay_count--;
     16a:	6819      	ldr	r1, [r3, #0]
     16c:	3901      	subs	r1, #1
     16e:	6019      	str	r1, [r3, #0]
    long_press_B2_delay_count--;
     170:	6811      	ldr	r1, [r2, #0]
     172:	3901      	subs	r1, #1

  } else {
    BUTTON_TWO_PRESS_STATUS = false;
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
    long_press_B2_delay_count = DELAY_PRESS_CN;
     174:	6011      	str	r1, [r2, #0]

  }

  // long press delay logic
  if (long_press_B2_delay_count <= 0) {
     176:	6811      	ldr	r1, [r2, #0]
     178:	2900      	cmp	r1, #0
     17a:	dc04      	bgt.n	186 <is_button_two_pressed+0x2e>
    LongPressB2Flag = true;
     17c:	2001      	movs	r0, #1
     17e:	490f      	ldr	r1, [pc, #60]	; (1bc <is_button_two_pressed+0x64>)
     180:	7008      	strb	r0, [r1, #0]
    long_press_B2_delay_count = 0;
     182:	2100      	movs	r1, #0
     184:	6011      	str	r1, [r2, #0]
     186:	2000      	movs	r0, #0
  }

  // debounce logic
  if (press_B2_delay_count <= 0) {
     188:	6819      	ldr	r1, [r3, #0]
     18a:	4a0d      	ldr	r2, [pc, #52]	; (1c0 <is_button_two_pressed+0x68>)
     18c:	4281      	cmp	r1, r0
     18e:	dc0a      	bgt.n	1a6 <is_button_two_pressed+0x4e>
    BUTTON_TWO_RELEASE_STATUS = false;
     190:	7010      	strb	r0, [r2, #0]
    press_B2_delay_count = 0;
     192:	6018      	str	r0, [r3, #0]
    return true;
     194:	3001      	adds	r0, #1

  } else {
    BUTTON_TWO_RELEASE_STATUS = true;
    return false;
  }
     196:	4770      	bx	lr
    BUTTON_TWO_PRESS_STATUS = false;
     198:	2000      	movs	r0, #0
     19a:	7008      	strb	r0, [r1, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     19c:	2102      	movs	r1, #2
     19e:	6019      	str	r1, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     1a0:	318f      	adds	r1, #143	; 0x8f
     1a2:	31ff      	adds	r1, #255	; 0xff
     1a4:	e7e6      	b.n	174 <is_button_two_pressed+0x1c>
    BUTTON_TWO_RELEASE_STATUS = true;
     1a6:	2301      	movs	r3, #1
     1a8:	7013      	strb	r3, [r2, #0]
    return false;
     1aa:	e7f4      	b.n	196 <is_button_two_pressed+0x3e>
     1ac:	41004400 	.word	0x41004400
     1b0:	20000046 	.word	0x20000046
     1b4:	20000004 	.word	0x20000004
     1b8:	2000000c 	.word	0x2000000c
     1bc:	20000049 	.word	0x20000049
     1c0:	20000047 	.word	0x20000047

000001c4 <set_pwm_color_channel>:
#include "pwm_led.h"

uint8_t pwm_led_toggle_count = 0;


void set_pwm_color_channel(uint8_t channel, bool enable) {
     1c4:	b510      	push	{r4, lr}
     1c6:	1e0a      	subs	r2, r1, #0
     1c8:	4c0a      	ldr	r4, [pc, #40]	; (1f4 <set_pwm_color_channel+0x30>)
	
	
	if (enable){
     1ca:	d000      	beq.n	1ce <set_pwm_color_channel+0xa>
		tcc_set_compare_value(&tcc_instance,
     1cc:	4a0a      	ldr	r2, [pc, #40]	; (1f8 <set_pwm_color_channel+0x34>)
		channel,
		0x3FF);
	}else{
		tcc_set_compare_value(&tcc_instance,
     1ce:	0001      	movs	r1, r0
     1d0:	0020      	movs	r0, r4
     1d2:	f001 fcf1 	bl	1bb8 <tcc_set_compare_value>
	Tcc *const tcc_module = module_inst->hw;
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     1d6:	2104      	movs	r1, #4
     1d8:	201f      	movs	r0, #31
     1da:	6822      	ldr	r2, [r4, #0]
     1dc:	6893      	ldr	r3, [r2, #8]
     1de:	420b      	tst	r3, r1
     1e0:	d1fc      	bne.n	1dc <set_pwm_color_channel+0x18>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     1e2:	7953      	ldrb	r3, [r2, #5]
     1e4:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     1e6:	d002      	beq.n	1ee <set_pwm_color_channel+0x2a>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     1e8:	2b60      	cmp	r3, #96	; 0x60
     1ea:	d1f7      	bne.n	1dc <set_pwm_color_channel+0x18>
		channel,
		ZERO_DUTY_CYCLE);
	}
	
	tcc_force_double_buffer_update(&tcc_instance);
}
     1ec:	bd10      	pop	{r4, pc}
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     1ee:	2360      	movs	r3, #96	; 0x60
     1f0:	7153      	strb	r3, [r2, #5]
     1f2:	e7fb      	b.n	1ec <set_pwm_color_channel+0x28>
     1f4:	20000098 	.word	0x20000098
     1f8:	000003ff 	.word	0x000003ff

000001fc <pwm_led_system_cleanup>:



void pwm_led_system_cleanup(void) {
	set_pwm_color_channel(RED_CHANNEL, false);
     1fc:	2100      	movs	r1, #0
void pwm_led_system_cleanup(void) {
     1fe:	b510      	push	{r4, lr}
	set_pwm_color_channel(RED_CHANNEL, false);
     200:	0008      	movs	r0, r1
     202:	f7ff ffdf 	bl	1c4 <set_pwm_color_channel>
	set_pwm_color_channel(BLUE_CHANNEL, false);
     206:	2100      	movs	r1, #0
     208:	2002      	movs	r0, #2
     20a:	f7ff ffdb 	bl	1c4 <set_pwm_color_channel>
	set_pwm_color_channel(GREEN_CHANNEL, false);
     20e:	2100      	movs	r1, #0
     210:	2001      	movs	r0, #1
     212:	f7ff ffd7 	bl	1c4 <set_pwm_color_channel>
	set_pwm_color_channel(WHITE_CHANNEL, false);
     216:	2100      	movs	r1, #0
     218:	2003      	movs	r0, #3
     21a:	f7ff ffd3 	bl	1c4 <set_pwm_color_channel>
}
     21e:	bd10      	pop	{r4, pc}

00000220 <set_pwm_color>:



void set_pwm_color(int color) {
	
	set_pwm_color_channel(RED_CHANNEL, false);
     220:	2100      	movs	r1, #0
void set_pwm_color(int color) {
     222:	b510      	push	{r4, lr}
     224:	0004      	movs	r4, r0
	set_pwm_color_channel(RED_CHANNEL, false);
     226:	0008      	movs	r0, r1
     228:	f7ff ffcc 	bl	1c4 <set_pwm_color_channel>
	set_pwm_color_channel(BLUE_CHANNEL, false);
     22c:	2100      	movs	r1, #0
     22e:	2002      	movs	r0, #2
     230:	f7ff ffc8 	bl	1c4 <set_pwm_color_channel>
	set_pwm_color_channel(GREEN_CHANNEL, false);
     234:	2100      	movs	r1, #0
     236:	2001      	movs	r0, #1
     238:	f7ff ffc4 	bl	1c4 <set_pwm_color_channel>
	set_pwm_color_channel(WHITE_CHANNEL, false);
     23c:	2100      	movs	r1, #0
     23e:	2003      	movs	r0, #3
     240:	f7ff ffc0 	bl	1c4 <set_pwm_color_channel>
		
	
	switch (color) {
     244:	2c06      	cmp	r4, #6
     246:	d80a      	bhi.n	25e <set_pwm_color+0x3e>
     248:	0020      	movs	r0, r4
		case 5:  // Purple (Red + Blue)
		set_pwm_color_channel(RED_CHANNEL, true);
		set_pwm_color_channel(BLUE_CHANNEL, true);
		break;
		case 6:  // Cyan (Blue + Green)
		set_pwm_color_channel(BLUE_CHANNEL, true);
     24a:	2101      	movs	r1, #1
	switch (color) {
     24c:	f002 f806 	bl	225c <__gnu_thumb1_case_uqi>
     250:	08140e04 	.word	0x08140e04
     254:	100a      	.short	0x100a
     256:	16          	.byte	0x16
     257:	00          	.byte	0x00
		set_pwm_color_channel(RED_CHANNEL, true);
     258:	2000      	movs	r0, #0
		set_pwm_color_channel(GREEN_CHANNEL, true);
     25a:	f7ff ffb3 	bl	1c4 <set_pwm_color_channel>
		break;
		default:
		break;
	}
}
     25e:	bd10      	pop	{r4, pc}
		set_pwm_color_channel(WHITE_CHANNEL, true);
     260:	2003      	movs	r0, #3
     262:	e7fa      	b.n	25a <set_pwm_color+0x3a>
		set_pwm_color_channel(RED_CHANNEL, true);
     264:	2000      	movs	r0, #0
		set_pwm_color_channel(BLUE_CHANNEL, true);
     266:	f7ff ffad 	bl	1c4 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
     26a:	2101      	movs	r1, #1
     26c:	0008      	movs	r0, r1
     26e:	e7f4      	b.n	25a <set_pwm_color+0x3a>
		set_pwm_color_channel(RED_CHANNEL, true);
     270:	2000      	movs	r0, #0
     272:	f7ff ffa7 	bl	1c4 <set_pwm_color_channel>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     276:	2101      	movs	r1, #1
     278:	2002      	movs	r0, #2
     27a:	e7ee      	b.n	25a <set_pwm_color+0x3a>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     27c:	2002      	movs	r0, #2
     27e:	e7f2      	b.n	266 <set_pwm_color+0x46>

00000280 <configure_pwm_tcc>:


void configure_pwm_tcc(void)
{
     280:	b570      	push	{r4, r5, r6, lr}
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     282:	4c1c      	ldr	r4, [pc, #112]	; (2f4 <configure_pwm_tcc+0x74>)
     284:	491c      	ldr	r1, [pc, #112]	; (2f8 <configure_pwm_tcc+0x78>)
     286:	0020      	movs	r0, r4
     288:	f001 fac8 	bl	181c <tcc_get_config_defaults>
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
	
	config_tcc.compare.match[RED_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     28c:	2300      	movs	r3, #0

	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
	
	
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
     28e:	2105      	movs	r1, #5
	config_tcc.compare.match[RED_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     290:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.match[BLUE_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     292:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.compare.match[GREEN_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     294:	6223      	str	r3, [r4, #32]
	config_tcc.compare.match[WHITE_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     296:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     298:	4b18      	ldr	r3, [pc, #96]	; (2fc <configure_pwm_tcc+0x7c>)
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
     29a:	67a1      	str	r1, [r4, #120]	; 0x78
	config_tcc.compare.match[RED_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
	
	config_tcc.pins.wave_out_pin[GREEN_CHANNEL]							= PIN_PA05F_TCC0_WO1;		// GREEN
     29c:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL]						= MUX_PA05F_TCC0_WO1;
     29e:	67e1      	str	r1, [r4, #124]	; 0x7c
	config_tcc.compare.match[GREEN_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     2a0:	0021      	movs	r1, r4
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     2a2:	6063      	str	r3, [r4, #4]
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     2a4:	2301      	movs	r3, #1
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     2a6:	3199      	adds	r1, #153	; 0x99
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     2a8:	2204      	movs	r2, #4
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     2aa:	700b      	strb	r3, [r1, #0]

	config_tcc.pins.wave_out_pin[BLUE_CHANNEL]							= PIN_PA08E_TCC0_WO2;		// BLUE
     2ac:	2108      	movs	r1, #8
     2ae:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL]						= MUX_PA08E_TCC0_WO2;
     2b0:	18a1      	adds	r1, r4, r2
     2b2:	67ca      	str	r2, [r1, #124]	; 0x7c
	config_tcc.compare.match[BLUE_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[BLUE_CHANNEL] = true;
     2b4:	0021      	movs	r1, r4
     2b6:	319a      	adds	r1, #154	; 0x9a
     2b8:	700b      	strb	r3, [r1, #0]

	config_tcc.pins.wave_out_pin[WHITE_CHANNEL]							= PIN_PA09E_TCC0_WO3;		// WHITE
     2ba:	2109      	movs	r1, #9
     2bc:	6661      	str	r1, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]						= MUX_PA09E_TCC0_WO3;
     2be:	0021      	movs	r1, r4
     2c0:	3108      	adds	r1, #8
     2c2:	67ca      	str	r2, [r1, #124]	; 0x7c
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     2c4:	65a2      	str	r2, [r4, #88]	; 0x58
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     2c6:	0020      	movs	r0, r4
	config_tcc.compare.match[WHITE_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     2c8:	0022      	movs	r2, r4
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     2ca:	2502      	movs	r5, #2
	
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     2cc:	4e0c      	ldr	r6, [pc, #48]	; (300 <configure_pwm_tcc+0x80>)
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     2ce:	3098      	adds	r0, #152	; 0x98
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     2d0:	329b      	adds	r2, #155	; 0x9b
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     2d2:	7003      	strb	r3, [r0, #0]
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     2d4:	7013      	strb	r3, [r2, #0]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     2d6:	4908      	ldr	r1, [pc, #32]	; (2f8 <configure_pwm_tcc+0x78>)
     2d8:	0022      	movs	r2, r4
     2da:	0030      	movs	r0, r6
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     2dc:	7625      	strb	r5, [r4, #24]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     2de:	f001 fb0f 	bl	1900 <tcc_init>
     2e2:	6833      	ldr	r3, [r6, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     2e4:	689a      	ldr	r2, [r3, #8]
     2e6:	422a      	tst	r2, r5
     2e8:	d1fc      	bne.n	2e4 <configure_pwm_tcc+0x64>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     2ea:	681a      	ldr	r2, [r3, #0]
     2ec:	4315      	orrs	r5, r2
     2ee:	601d      	str	r5, [r3, #0]
	tcc_enable(&tcc_instance);
	
}
     2f0:	bd70      	pop	{r4, r5, r6, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	200000f4 	.word	0x200000f4
     2f8:	42001400 	.word	0x42001400
     2fc:	00000fff 	.word	0x00000fff
     300:	20000098 	.word	0x20000098

00000304 <set_pwm_red>:
5	p	(r + b)
6	c	(b + g)
*/
	

void set_pwm_red(void){
     304:	b510      	push	{r4, lr}
	set_pwm_color(0);
     306:	2000      	movs	r0, #0
     308:	f7ff ff8a 	bl	220 <set_pwm_color>
}
     30c:	bd10      	pop	{r4, pc}

0000030e <set_pwm_green>:

void set_pwm_green(void){
     30e:	b510      	push	{r4, lr}
	set_pwm_color(1);
     310:	2001      	movs	r0, #1
     312:	f7ff ff85 	bl	220 <set_pwm_color>
	
}
     316:	bd10      	pop	{r4, pc}

00000318 <set_pwm_blue>:

void set_pwm_blue(void){
     318:	b510      	push	{r4, lr}
	set_pwm_color(2);
     31a:	2002      	movs	r0, #2
     31c:	f7ff ff80 	bl	220 <set_pwm_color>
}
     320:	bd10      	pop	{r4, pc}

00000322 <set_pwm_white>:

void set_pwm_white(void){
     322:	b510      	push	{r4, lr}
	set_pwm_color(3);
     324:	2003      	movs	r0, #3
     326:	f7ff ff7b 	bl	220 <set_pwm_color>
}
     32a:	bd10      	pop	{r4, pc}

0000032c <set_pwm_yellow>:


void set_pwm_yellow(void){
     32c:	b510      	push	{r4, lr}
	set_pwm_color(4);
     32e:	2004      	movs	r0, #4
     330:	f7ff ff76 	bl	220 <set_pwm_color>
	
}
     334:	bd10      	pop	{r4, pc}

00000336 <set_pwm_purple>:

void set_pwm_purple(void){
     336:	b510      	push	{r4, lr}
	set_pwm_color(5);
     338:	2005      	movs	r0, #5
     33a:	f7ff ff71 	bl	220 <set_pwm_color>
	
}
     33e:	bd10      	pop	{r4, pc}

00000340 <set_pwm_cyan>:

void set_pwm_cyan(void){
     340:	b510      	push	{r4, lr}
	set_pwm_color(6);
     342:	2006      	movs	r0, #6
     344:	f7ff ff6c 	bl	220 <set_pwm_color>
	
}
     348:	bd10      	pop	{r4, pc}
	...

0000034c <cycle_pwm_led>:


void cycle_pwm_led(void) {
     34c:	b510      	push	{r4, lr}
switch (pwm_led_toggle_count) {
     34e:	4c12      	ldr	r4, [pc, #72]	; (398 <cycle_pwm_led+0x4c>)
     350:	7820      	ldrb	r0, [r4, #0]
     352:	3801      	subs	r0, #1
     354:	2806      	cmp	r0, #6
     356:	d81a      	bhi.n	38e <cycle_pwm_led+0x42>
     358:	f001 ff80 	bl	225c <__gnu_thumb1_case_uqi>
     35c:	0d0a0704 	.word	0x0d0a0704
     360:	1310      	.short	0x1310
     362:	16          	.byte	0x16
     363:	00          	.byte	0x00
	case 1:
	set_pwm_red();
     364:	f7ff ffce 	bl	304 <set_pwm_red>
	case 8:
	pwm_led_system_cleanup();							// Reset to 1 for red
	pwm_led_toggle_count = 0;
	break;
}
}
     368:	bd10      	pop	{r4, pc}
	set_pwm_green();
     36a:	f7ff ffd0 	bl	30e <set_pwm_green>
	break;
     36e:	e7fb      	b.n	368 <cycle_pwm_led+0x1c>
	set_pwm_blue();
     370:	f7ff ffd2 	bl	318 <set_pwm_blue>
	break;
     374:	e7f8      	b.n	368 <cycle_pwm_led+0x1c>
	set_pwm_yellow();
     376:	f7ff ffd9 	bl	32c <set_pwm_yellow>
	break;
     37a:	e7f5      	b.n	368 <cycle_pwm_led+0x1c>
	set_pwm_purple();
     37c:	f7ff ffdb 	bl	336 <set_pwm_purple>
	break;
     380:	e7f2      	b.n	368 <cycle_pwm_led+0x1c>
	set_pwm_cyan();
     382:	f7ff ffdd 	bl	340 <set_pwm_cyan>
	break;
     386:	e7ef      	b.n	368 <cycle_pwm_led+0x1c>
	set_pwm_white();
     388:	f7ff ffcb 	bl	322 <set_pwm_white>
	break;
     38c:	e7ec      	b.n	368 <cycle_pwm_led+0x1c>
	pwm_led_system_cleanup();							// Reset to 1 for red
     38e:	f7ff ff35 	bl	1fc <pwm_led_system_cleanup>
	pwm_led_toggle_count = 0;
     392:	2300      	movs	r3, #0
     394:	7023      	strb	r3, [r4, #0]
}
     396:	e7e7      	b.n	368 <cycle_pwm_led+0x1c>
     398:	2000004a 	.word	0x2000004a

0000039c <configure_pwm_generator>:
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);

	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     39c:	21a0      	movs	r1, #160	; 0xa0
{
     39e:	b500      	push	{lr}
     3a0:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     3a2:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     3a4:	00c9      	lsls	r1, r1, #3
     3a6:	8091      	strh	r1, [r2, #4]

	config_tc.counter_8_bit.value = 0;
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     3a8:	212d      	movs	r1, #45	; 0x2d
     3aa:	2300      	movs	r3, #0
     3ac:	2055      	movs	r0, #85	; 0x55
     3ae:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
     3b0:	8513      	strh	r3, [r2, #40]	; 0x28
     3b2:	7008      	strb	r0, [r1, #0]

	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     3b4:	212e      	movs	r1, #46	; 0x2e
     3b6:	3840      	subs	r0, #64	; 0x40
     3b8:	4469      	add	r1, sp
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     3ba:	8553      	strh	r3, [r2, #42]	; 0x2a
     3bc:	7008      	strb	r0, [r1, #0]

	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     3be:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
     3c0:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     3c2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     3c4:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     3c6:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     3c8:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     3ca:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     3cc:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     3ce:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     3d0:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     3d2:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     3d4:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     3d6:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
     3d8:	3304      	adds	r3, #4
     3da:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     3dc:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     3de:	6193      	str	r3, [r2, #24]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     3e0:	3936      	subs	r1, #54	; 0x36

	config_tc.pwm_channel[0].enabled = true;
     3e2:	3b03      	subs	r3, #3
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     3e4:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].enabled = true;
     3e6:	7413      	strb	r3, [r2, #16]
	
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     3e8:	4902      	ldr	r1, [pc, #8]	; (3f4 <configure_pwm_generator+0x58>)
     3ea:	4803      	ldr	r0, [pc, #12]	; (3f8 <configure_pwm_generator+0x5c>)
     3ec:	f001 fc6c 	bl	1cc8 <tc_init>
}
     3f0:	b00f      	add	sp, #60	; 0x3c
     3f2:	bd00      	pop	{pc}
     3f4:	42001c00 	.word	0x42001c00
     3f8:	20000198 	.word	0x20000198

000003fc <pwm_motor_cleanup>:




void pwm_motor_cleanup(void){
     3fc:	b570      	push	{r4, r5, r6, lr}
	PULSATING_MOTOR_ROUTINE = false;
     3fe:	2400      	movs	r4, #0
     400:	4b0d      	ldr	r3, [pc, #52]	; (438 <STACK_SIZE+0x38>)
	motor_toggle_count = 0;
	tc_set_compare_value (&pwm_generator_instance,
     402:	4d0e      	ldr	r5, [pc, #56]	; (43c <STACK_SIZE+0x3c>)
	PULSATING_MOTOR_ROUTINE = false;
     404:	701c      	strb	r4, [r3, #0]
	motor_toggle_count = 0;
     406:	4b0e      	ldr	r3, [pc, #56]	; (440 <STACK_SIZE+0x40>)
	tc_set_compare_value (&pwm_generator_instance,
     408:	2215      	movs	r2, #21
     40a:	0021      	movs	r1, r4
     40c:	0028      	movs	r0, r5
	motor_toggle_count = 0;
     40e:	701c      	strb	r4, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,
     410:	f001 fd6e 	bl	1ef0 <tc_set_compare_value>
	TC_COMPARE_CAPTURE_CHANNEL_0,
	INITIAL_DUTY_CYCLE);
	PWM_RUNNING = false;
     414:	4b0b      	ldr	r3, [pc, #44]	; (444 <STACK_SIZE+0x44>)
     416:	701c      	strb	r4, [r3, #0]
     418:	682b      	ldr	r3, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     41a:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     41c:	b252      	sxtb	r2, r2
     41e:	2a00      	cmp	r2, #0
     420:	dbfb      	blt.n	41a <STACK_SIZE+0x1a>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     422:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     424:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     426:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     428:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     42a:	881a      	ldrh	r2, [r3, #0]
     42c:	438a      	bics	r2, r1
     42e:	801a      	strh	r2, [r3, #0]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     430:	2240      	movs	r2, #64	; 0x40
     432:	4b05      	ldr	r3, [pc, #20]	; (448 <STACK_SIZE+0x48>)
     434:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
     436:	bd70      	pop	{r4, r5, r6, pc}
     438:	2000004c 	.word	0x2000004c
     43c:	20000198 	.word	0x20000198
     440:	2000004e 	.word	0x2000004e
     444:	2000004d 	.word	0x2000004d
     448:	41004400 	.word	0x41004400

0000044c <cycle_pwm_motor>:



void cycle_pwm_motor (void)
{
     44c:	b510      	push	{r4, lr}
	{
		if (PWM_RUNNING)
     44e:	4b0e      	ldr	r3, [pc, #56]	; (488 <cycle_pwm_motor+0x3c>)
     450:	781b      	ldrb	r3, [r3, #0]
     452:	2b00      	cmp	r3, #0
     454:	d00b      	beq.n	46e <cycle_pwm_motor+0x22>
		{
			
			if (motor_toggle_count == 2)
     456:	4b0d      	ldr	r3, [pc, #52]	; (48c <cycle_pwm_motor+0x40>)
			{
				tc_set_compare_value (&pwm_generator_instance,
     458:	2222      	movs	r2, #34	; 0x22
			if (motor_toggle_count == 2)
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	2b02      	cmp	r3, #2
     45e:	d002      	beq.n	466 <cycle_pwm_motor+0x1a>
				TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);


			}
			else if (motor_toggle_count == 3)
     460:	2b03      	cmp	r3, #3
     462:	d105      	bne.n	470 <cycle_pwm_motor+0x24>
			{
				tc_set_compare_value (&pwm_generator_instance,
     464:	224d      	movs	r2, #77	; 0x4d
     466:	2100      	movs	r1, #0
     468:	4809      	ldr	r0, [pc, #36]	; (490 <cycle_pwm_motor+0x44>)
     46a:	f001 fd41 	bl	1ef0 <tc_set_compare_value>
				pwm_motor_cleanup();
			}
		}
	}

}
     46e:	bd10      	pop	{r4, pc}
			else if (motor_toggle_count == 4)
     470:	2b04      	cmp	r3, #4
     472:	d104      	bne.n	47e <cycle_pwm_motor+0x32>
				PULSATING_MOTOR_ROUTINE = true;
     474:	2201      	movs	r2, #1
     476:	4b07      	ldr	r3, [pc, #28]	; (494 <cycle_pwm_motor+0x48>)
     478:	701a      	strb	r2, [r3, #0]
				tc_set_compare_value (&pwm_generator_instance,
     47a:	324c      	adds	r2, #76	; 0x4c
     47c:	e7f3      	b.n	466 <cycle_pwm_motor+0x1a>
			else if (motor_toggle_count > 4)
     47e:	2b04      	cmp	r3, #4
     480:	d9f5      	bls.n	46e <cycle_pwm_motor+0x22>
				pwm_motor_cleanup();
     482:	f7ff ffbb 	bl	3fc <pwm_motor_cleanup>
}
     486:	e7f2      	b.n	46e <cycle_pwm_motor+0x22>
     488:	2000004d 	.word	0x2000004d
     48c:	2000004e 	.word	0x2000004e
     490:	20000198 	.word	0x20000198
     494:	2000004c 	.word	0x2000004c

00000498 <toggle_nsleep>:



 void toggle_nsleep(void){
	 static bool PULSATING_MOTOR = false;
	 if (PULSATING_MOTOR_ROUTINE){
     498:	4b08      	ldr	r3, [pc, #32]	; (4bc <toggle_nsleep+0x24>)
     49a:	781b      	ldrb	r3, [r3, #0]
     49c:	2b00      	cmp	r3, #0
     49e:	d008      	beq.n	4b2 <toggle_nsleep+0x1a>
		 if (PULSATING_MOTOR){
     4a0:	4b07      	ldr	r3, [pc, #28]	; (4c0 <toggle_nsleep+0x28>)
     4a2:	4a08      	ldr	r2, [pc, #32]	; (4c4 <toggle_nsleep+0x2c>)
     4a4:	7818      	ldrb	r0, [r3, #0]
     4a6:	2140      	movs	r1, #64	; 0x40
     4a8:	2800      	cmp	r0, #0
     4aa:	d003      	beq.n	4b4 <toggle_nsleep+0x1c>
     4ac:	6151      	str	r1, [r2, #20]
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			 PULSATING_MOTOR = false;
     4ae:	2200      	movs	r2, #0
     4b0:	701a      	strb	r2, [r3, #0]
			 }else{
			 PULSATING_MOTOR = true;
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
		 }
	 }
 }
     4b2:	4770      	bx	lr
			 PULSATING_MOTOR = true;
     4b4:	2001      	movs	r0, #1
     4b6:	7018      	strb	r0, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
     4b8:	6191      	str	r1, [r2, #24]
 }
     4ba:	e7fa      	b.n	4b2 <toggle_nsleep+0x1a>
     4bc:	2000004c 	.word	0x2000004c
     4c0:	2000004b 	.word	0x2000004b
     4c4:	41004400 	.word	0x41004400

000004c8 <system_shutdown>:
 *  Author: jatan
 */ 

 #include <system_logic.h>

 void system_shutdown(void) {
     4c8:	b510      	push	{r4, lr}
	 pwm_motor_cleanup(); // shutdown pwm motor
     4ca:	f7ff ff97 	bl	3fc <pwm_motor_cleanup>
	 pwm_led_system_cleanup(); // shutdown illumination led
     4ce:	f7ff fe95 	bl	1fc <pwm_led_system_cleanup>
 }
     4d2:	bd10      	pop	{r4, pc}

000004d4 <regular_routine>:



 void regular_routine(void) {
     4d4:	b510      	push	{r4, lr}
	 static bool motor_status_changed = false;
	 static bool led_button_status_changed = false;

	 //-------------------------------------------------------------

	 if (is_button_one_pressed()) {
     4d6:	f7ff fe09 	bl	ec <is_button_one_pressed>
     4da:	2800      	cmp	r0, #0
     4dc:	d007      	beq.n	4ee <regular_routine+0x1a>
		 if (LongPressB1Flag) {
     4de:	4c28      	ldr	r4, [pc, #160]	; (580 <regular_routine+0xac>)
     4e0:	7823      	ldrb	r3, [r4, #0]
     4e2:	2b00      	cmp	r3, #0
     4e4:	d01e      	beq.n	524 <regular_routine+0x50>
			 system_shutdown();
     4e6:	f7ff ffef 	bl	4c8 <system_shutdown>
			 LongPressB1Flag = false; // ALLOW IT TO CYCLE AGAIN
     4ea:	2300      	movs	r3, #0
     4ec:	7023      	strb	r3, [r4, #0]
				 }
			 }
		 }
	 }

	 if (BUTTON_ONE_RELEASE_STATUS) {
     4ee:	4b25      	ldr	r3, [pc, #148]	; (584 <regular_routine+0xb0>)
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	2b00      	cmp	r3, #0
     4f4:	d002      	beq.n	4fc <regular_routine+0x28>
		 motor_status_changed = false;
     4f6:	2200      	movs	r2, #0
     4f8:	4b23      	ldr	r3, [pc, #140]	; (588 <regular_routine+0xb4>)
     4fa:	701a      	strb	r2, [r3, #0]
	 }

	 //-------------------------------------------------------

	 if (is_button_two_pressed()) {
     4fc:	f7ff fe2c 	bl	158 <is_button_two_pressed>
     500:	2800      	cmp	r0, #0
     502:	d007      	beq.n	514 <regular_routine+0x40>
		 if (LongPressB2Flag) {
     504:	4c21      	ldr	r4, [pc, #132]	; (58c <regular_routine+0xb8>)
     506:	7823      	ldrb	r3, [r4, #0]
     508:	2b00      	cmp	r3, #0
     50a:	d02b      	beq.n	564 <regular_routine+0x90>
			 system_shutdown();
     50c:	f7ff ffdc 	bl	4c8 <system_shutdown>
			 LongPressB2Flag = false; // ALLOW IT TO CYCLE AGAIN
     510:	2300      	movs	r3, #0
     512:	7023      	strb	r3, [r4, #0]
				 led_button_status_changed = true;
				 cycle_pwm_led();
			 }
		 }
	 }
	 if (BUTTON_TWO_RELEASE_STATUS) {
     514:	4b1e      	ldr	r3, [pc, #120]	; (590 <regular_routine+0xbc>)
     516:	781b      	ldrb	r3, [r3, #0]
     518:	2b00      	cmp	r3, #0
     51a:	d002      	beq.n	522 <regular_routine+0x4e>
		 led_button_status_changed = false;
     51c:	2200      	movs	r2, #0
     51e:	4b1d      	ldr	r3, [pc, #116]	; (594 <regular_routine+0xc0>)
     520:	701a      	strb	r2, [r3, #0]
	 }
 }
     522:	bd10      	pop	{r4, pc}
			 if (!motor_status_changed) {
     524:	4918      	ldr	r1, [pc, #96]	; (588 <regular_routine+0xb4>)
     526:	780b      	ldrb	r3, [r1, #0]
     528:	2b00      	cmp	r3, #0
     52a:	d1e0      	bne.n	4ee <regular_routine+0x1a>
				 motor_toggle_count++;
     52c:	4a1a      	ldr	r2, [pc, #104]	; (598 <regular_routine+0xc4>)
     52e:	7813      	ldrb	r3, [r2, #0]
     530:	3301      	adds	r3, #1
     532:	7013      	strb	r3, [r2, #0]
				 motor_status_changed = true;
     534:	2201      	movs	r2, #1
				 if (!PWM_RUNNING) {
     536:	4b19      	ldr	r3, [pc, #100]	; (59c <regular_routine+0xc8>)
				 motor_status_changed = true;
     538:	700a      	strb	r2, [r1, #0]
				 if (!PWM_RUNNING) {
     53a:	7819      	ldrb	r1, [r3, #0]
     53c:	2900      	cmp	r1, #0
     53e:	d10e      	bne.n	55e <regular_routine+0x8a>
					 PWM_RUNNING = true;
     540:	701a      	strb	r2, [r3, #0]
     542:	4b17      	ldr	r3, [pc, #92]	; (5a0 <regular_routine+0xcc>)
     544:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     546:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     548:	b252      	sxtb	r2, r2
     54a:	2a00      	cmp	r2, #0
     54c:	dbfb      	blt.n	546 <regular_routine+0x72>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     54e:	2202      	movs	r2, #2
     550:	8819      	ldrh	r1, [r3, #0]
     552:	430a      	orrs	r2, r1
     554:	801a      	strh	r2, [r3, #0]
     556:	2240      	movs	r2, #64	; 0x40
     558:	4b12      	ldr	r3, [pc, #72]	; (5a4 <regular_routine+0xd0>)
     55a:	619a      	str	r2, [r3, #24]
     55c:	e7c7      	b.n	4ee <regular_routine+0x1a>
					 cycle_pwm_motor();
     55e:	f7ff ff75 	bl	44c <cycle_pwm_motor>
     562:	e7c4      	b.n	4ee <regular_routine+0x1a>
			 if (!led_button_status_changed) {
     564:	4a0b      	ldr	r2, [pc, #44]	; (594 <regular_routine+0xc0>)
     566:	7813      	ldrb	r3, [r2, #0]
     568:	2b00      	cmp	r3, #0
     56a:	d1d3      	bne.n	514 <regular_routine+0x40>
				 pwm_led_toggle_count++;
     56c:	490e      	ldr	r1, [pc, #56]	; (5a8 <regular_routine+0xd4>)
     56e:	780b      	ldrb	r3, [r1, #0]
     570:	3301      	adds	r3, #1
     572:	700b      	strb	r3, [r1, #0]
				 led_button_status_changed = true;
     574:	2301      	movs	r3, #1
     576:	7013      	strb	r3, [r2, #0]
				 cycle_pwm_led();
     578:	f7ff fee8 	bl	34c <cycle_pwm_led>
     57c:	e7ca      	b.n	514 <regular_routine+0x40>
     57e:	46c0      	nop			; (mov r8, r8)
     580:	20000048 	.word	0x20000048
     584:	20000045 	.word	0x20000045
     588:	20000050 	.word	0x20000050
     58c:	20000049 	.word	0x20000049
     590:	20000047 	.word	0x20000047
     594:	2000004f 	.word	0x2000004f
     598:	2000004e 	.word	0x2000004e
     59c:	2000004d 	.word	0x2000004d
     5a0:	20000198 	.word	0x20000198
     5a4:	41004400 	.word	0x41004400
     5a8:	2000004a 	.word	0x2000004a

000005ac <system_logic>:
 
 /************************************************************************/
 /* LOGIC MACHINE		                                                */
 /************************************************************************/

 void system_logic(void) {
     5ac:	b510      	push	{r4, lr}
	 if (!VBUS_STATE) {
     5ae:	4b17      	ldr	r3, [pc, #92]	; (60c <system_logic+0x60>)
     5b0:	781b      	ldrb	r3, [r3, #0]
     5b2:	2b00      	cmp	r3, #0
     5b4:	d114      	bne.n	5e0 <system_logic+0x34>
		 reset_chip();
     5b6:	f001 fd4b 	bl	2050 <reset_chip>
		 configure_pwm_generator();						// Enable Motor PWM
     5ba:	f7ff feef 	bl	39c <configure_pwm_generator>
			 } else if (!CHARGN_OFF_STATE) {
			 BATTERY_CHARGING = false;
			 BATTERY_CHARGED = true;
		 }
	 }
	 if (SYS_TICK_10MS) {
     5be:	4b14      	ldr	r3, [pc, #80]	; (610 <system_logic+0x64>)
     5c0:	781a      	ldrb	r2, [r3, #0]
     5c2:	2a00      	cmp	r2, #0
     5c4:	d003      	beq.n	5ce <system_logic+0x22>
		 SYS_TICK_10MS = false;
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
		 regular_routine();
     5ca:	f7ff ff83 	bl	4d4 <regular_routine>
	 }
	 if (SYS_TICK_200MS) {
     5ce:	4b11      	ldr	r3, [pc, #68]	; (614 <system_logic+0x68>)
     5d0:	781a      	ldrb	r2, [r3, #0]
     5d2:	2a00      	cmp	r2, #0
     5d4:	d003      	beq.n	5de <system_logic+0x32>
		 SYS_TICK_200MS = false;
     5d6:	2200      	movs	r2, #0
     5d8:	701a      	strb	r2, [r3, #0]
		 toggle_nsleep();
     5da:	f7ff ff5d 	bl	498 <toggle_nsleep>
	 }
     5de:	bd10      	pop	{r4, pc}
		 system_shutdown();
     5e0:	f7ff ff72 	bl	4c8 <system_shutdown>
		 if (!CHARGN_ON_STATE) {							// battery charging (plugged in)
     5e4:	4b0c      	ldr	r3, [pc, #48]	; (618 <system_logic+0x6c>)
     5e6:	781b      	ldrb	r3, [r3, #0]
     5e8:	2b00      	cmp	r3, #0
     5ea:	d105      	bne.n	5f8 <system_logic+0x4c>
			 BATTERY_CHARGING = true;						// show battery charge routine
     5ec:	2101      	movs	r1, #1
     5ee:	4a0b      	ldr	r2, [pc, #44]	; (61c <system_logic+0x70>)
     5f0:	7011      	strb	r1, [r2, #0]
			 BATTERY_CHARGED = false;
     5f2:	4a0b      	ldr	r2, [pc, #44]	; (620 <system_logic+0x74>)
     5f4:	7013      	strb	r3, [r2, #0]
     5f6:	e7e2      	b.n	5be <system_logic+0x12>
			 } else if (!CHARGN_OFF_STATE) {
     5f8:	4b0a      	ldr	r3, [pc, #40]	; (624 <system_logic+0x78>)
     5fa:	781b      	ldrb	r3, [r3, #0]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d1de      	bne.n	5be <system_logic+0x12>
			 BATTERY_CHARGING = false;
     600:	4a06      	ldr	r2, [pc, #24]	; (61c <system_logic+0x70>)
     602:	7013      	strb	r3, [r2, #0]
			 BATTERY_CHARGED = true;
     604:	2201      	movs	r2, #1
     606:	4b06      	ldr	r3, [pc, #24]	; (620 <system_logic+0x74>)
     608:	701a      	strb	r2, [r3, #0]
     60a:	e7d8      	b.n	5be <system_logic+0x12>
     60c:	200001b4 	.word	0x200001b4
     610:	20000052 	.word	0x20000052
     614:	20000053 	.word	0x20000053
     618:	200001ba 	.word	0x200001ba
     61c:	200001b9 	.word	0x200001b9
     620:	200001b7 	.word	0x200001b7
     624:	200001b5 	.word	0x200001b5

00000628 <sys_tc_callback>:
	static int tick_count_50ms;
	static int tick_count_100ms;
	static int tick_count_200ms;
	
	
	tick_count_1ms++;
     628:	4919      	ldr	r1, [pc, #100]	; (690 <sys_tc_callback+0x68>)
     62a:	680b      	ldr	r3, [r1, #0]
     62c:	1c5a      	adds	r2, r3, #1
     62e:	600a      	str	r2, [r1, #0]
     630:	4b18      	ldr	r3, [pc, #96]	; (694 <sys_tc_callback+0x6c>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
     632:	2a09      	cmp	r2, #9
     634:	dd07      	ble.n	646 <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
     636:	681a      	ldr	r2, [r3, #0]
     638:	3201      	adds	r2, #1
     63a:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
     63c:	2200      	movs	r2, #0
     63e:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
     640:	2101      	movs	r1, #1
     642:	4a15      	ldr	r2, [pc, #84]	; (698 <sys_tc_callback+0x70>)
     644:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
     646:	6819      	ldr	r1, [r3, #0]
     648:	4a14      	ldr	r2, [pc, #80]	; (69c <sys_tc_callback+0x74>)
     64a:	2904      	cmp	r1, #4
     64c:	dd07      	ble.n	65e <sys_tc_callback+0x36>
	{
		tick_count_50ms++;
     64e:	6811      	ldr	r1, [r2, #0]
     650:	3101      	adds	r1, #1
     652:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
     654:	2100      	movs	r1, #0
     656:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
     658:	4b11      	ldr	r3, [pc, #68]	; (6a0 <sys_tc_callback+0x78>)
     65a:	3101      	adds	r1, #1
     65c:	7019      	strb	r1, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
     65e:	6811      	ldr	r1, [r2, #0]
     660:	4b10      	ldr	r3, [pc, #64]	; (6a4 <sys_tc_callback+0x7c>)
     662:	2901      	cmp	r1, #1
     664:	dd07      	ble.n	676 <sys_tc_callback+0x4e>
	{
		tick_count_100ms++;
     666:	6819      	ldr	r1, [r3, #0]
     668:	3101      	adds	r1, #1
     66a:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
     66c:	2100      	movs	r1, #0
     66e:	6011      	str	r1, [r2, #0]
		SYS_TICK_100MS = true;									// Flag for 100ms interval
     670:	4a0d      	ldr	r2, [pc, #52]	; (6a8 <sys_tc_callback+0x80>)
     672:	3101      	adds	r1, #1
     674:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
     676:	681a      	ldr	r2, [r3, #0]
     678:	2a01      	cmp	r2, #1
     67a:	dd08      	ble.n	68e <sys_tc_callback+0x66>
	{
		tick_count_200ms++;
     67c:	490b      	ldr	r1, [pc, #44]	; (6ac <sys_tc_callback+0x84>)
     67e:	680a      	ldr	r2, [r1, #0]
     680:	3201      	adds	r2, #1
     682:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
     684:	2200      	movs	r2, #0
     686:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
     688:	4b09      	ldr	r3, [pc, #36]	; (6b0 <sys_tc_callback+0x88>)
     68a:	3201      	adds	r2, #1
     68c:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
}
     68e:	4770      	bx	lr
     690:	20000060 	.word	0x20000060
     694:	2000005c 	.word	0x2000005c
     698:	20000052 	.word	0x20000052
     69c:	20000068 	.word	0x20000068
     6a0:	20000054 	.word	0x20000054
     6a4:	20000058 	.word	0x20000058
     6a8:	20000051 	.word	0x20000051
     6ac:	20000064 	.word	0x20000064
     6b0:	20000053 	.word	0x20000053

000006b4 <configure_port_pins>:
{
     6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     6b6:	2502      	movs	r5, #2
	config->direction  = PORT_PIN_DIR_INPUT;
     6b8:	2700      	movs	r7, #0
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     6ba:	2601      	movs	r6, #1
     6bc:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     6be:	0021      	movs	r1, r4
     6c0:	201b      	movs	r0, #27
     6c2:	7027      	strb	r7, [r4, #0]
	config->powersave  = false;
     6c4:	70a7      	strb	r7, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     6c6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     6c8:	f000 f940 	bl	94c <port_pin_set_config>
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     6cc:	0021      	movs	r1, r4
     6ce:	2006      	movs	r0, #6
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     6d0:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;						// START AT PULL DOWN.
     6d2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     6d4:	f000 f93a 	bl	94c <port_pin_set_config>
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     6d8:	0021      	movs	r1, r4
     6da:	2007      	movs	r0, #7
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     6dc:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL UP.
     6de:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     6e0:	f000 f934 	bl	94c <port_pin_set_config>
	port_pin_set_config(BUTTON_2, &config_port_pin);
     6e4:	0021      	movs	r1, r4
     6e6:	200f      	movs	r0, #15
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     6e8:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     6ea:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
     6ec:	f000 f92e 	bl	94c <port_pin_set_config>
	port_pin_set_config(CHARGN_ON_PIN, &config_port_pin);
     6f0:	0021      	movs	r1, r4
     6f2:	200b      	movs	r0, #11
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     6f4:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     6f6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(CHARGN_ON_PIN, &config_port_pin);
     6f8:	f000 f928 	bl	94c <port_pin_set_config>
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     6fc:	0021      	movs	r1, r4
     6fe:	2003      	movs	r0, #3
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     700:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     702:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     704:	f000 f922 	bl	94c <port_pin_set_config>
}
     708:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

0000070c <configure_system_tc>:
	config->clock_source               = GCLK_GENERATOR_0;
     70c:	2300      	movs	r3, #0
 {
     70e:	b510      	push	{r4, lr}
     710:	b08e      	sub	sp, #56	; 0x38
     712:	aa01      	add	r2, sp, #4
	config->counter_16_bit.value                   = 0x0000;
     714:	8513      	strh	r3, [r2, #40]	; 0x28
	config->clock_source               = GCLK_GENERATOR_0;
     716:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     718:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     71a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     71c:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     71e:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     720:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     722:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     724:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     726:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     728:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     72a:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     72c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     72e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     730:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     732:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     734:	8593      	strh	r3, [r2, #44]	; 0x2c
	 config_tc.counter_size = TC_COUNTER_SIZE;
     736:	3304      	adds	r3, #4
     738:	7093      	strb	r3, [r2, #2]
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     73a:	23a0      	movs	r3, #160	; 0xa0
     73c:	00db      	lsls	r3, r3, #3
     73e:	8093      	strh	r3, [r2, #4]
	 config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
     740:	232d      	movs	r3, #45	; 0x2d
     742:	216f      	movs	r1, #111	; 0x6f
     744:	446b      	add	r3, sp
     746:	7019      	strb	r1, [r3, #0]
	 config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     748:	2301      	movs	r3, #1
	 tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
     74a:	4c08      	ldr	r4, [pc, #32]	; (76c <configure_system_tc+0x60>)
	 config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     74c:	7413      	strb	r3, [r2, #16]
	 tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
     74e:	4908      	ldr	r1, [pc, #32]	; (770 <configure_system_tc+0x64>)
     750:	0020      	movs	r0, r4
     752:	f001 fab9 	bl	1cc8 <tc_init>
     756:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     758:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     75a:	b252      	sxtb	r2, r2
     75c:	2a00      	cmp	r2, #0
     75e:	dbfb      	blt.n	758 <configure_system_tc+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     760:	2202      	movs	r2, #2
     762:	8819      	ldrh	r1, [r3, #0]
     764:	430a      	orrs	r2, r1
     766:	801a      	strh	r2, [r3, #0]
 }
     768:	b00e      	add	sp, #56	; 0x38
     76a:	bd10      	pop	{r4, pc}
     76c:	200000d8 	.word	0x200000d8
     770:	42001800 	.word	0x42001800

00000774 <system_tc_callbacks>:
{
     774:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
     776:	4c0c      	ldr	r4, [pc, #48]	; (7a8 <system_tc_callbacks+0x34>)
     778:	2200      	movs	r2, #0
     77a:	490c      	ldr	r1, [pc, #48]	; (7ac <system_tc_callbacks+0x38>)
     77c:	0020      	movs	r0, r4
     77e:	f001 fa46 	bl	1c0e <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     782:	6820      	ldr	r0, [r4, #0]
     784:	f001 fa8e 	bl	1ca4 <_tc_get_inst_index>
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     788:	4b09      	ldr	r3, [pc, #36]	; (7b0 <system_tc_callbacks+0x3c>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     78a:	5c1a      	ldrb	r2, [r3, r0]
     78c:	231f      	movs	r3, #31
     78e:	401a      	ands	r2, r3
     790:	3b1e      	subs	r3, #30
     792:	0019      	movs	r1, r3
     794:	4091      	lsls	r1, r2
     796:	4a07      	ldr	r2, [pc, #28]	; (7b4 <system_tc_callbacks+0x40>)
     798:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     79a:	7e62      	ldrb	r2, [r4, #25]
     79c:	431a      	orrs	r2, r3
     79e:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     7a0:	6822      	ldr	r2, [r4, #0]
     7a2:	7353      	strb	r3, [r2, #13]
}
     7a4:	bd10      	pop	{r4, pc}
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	200000d8 	.word	0x200000d8
     7ac:	00000629 	.word	0x00000629
     7b0:	00003ca8 	.word	0x00003ca8
     7b4:	e000e100 	.word	0xe000e100

000007b8 <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
     7b8:	2240      	movs	r2, #64	; 0x40
     7ba:	4b06      	ldr	r3, [pc, #24]	; (7d4 <startup_default_pin_state+0x1c>)
     7bc:	615a      	str	r2, [r3, #20]
     7be:	1892      	adds	r2, r2, r2
     7c0:	615a      	str	r2, [r3, #20]
     7c2:	2280      	movs	r2, #128	; 0x80
     7c4:	0212      	lsls	r2, r2, #8
     7c6:	615a      	str	r2, [r3, #20]
     7c8:	2280      	movs	r2, #128	; 0x80
     7ca:	0112      	lsls	r2, r2, #4
     7cc:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     7ce:	2208      	movs	r2, #8
     7d0:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(SWITCH_OFF_PIN,LOW);
	 port_pin_set_output_level(BUTTON_2,LOW);
	 port_pin_set_output_level(CHARGN_ON_PIN,LOW);
	 port_pin_set_output_level(CHARGN_OFF_PIN,HIGH);
	 
 }
     7d2:	4770      	bx	lr
     7d4:	41004400 	.word	0x41004400

000007d8 <startup_sys_configs>:


/************************************************************************/
/* SYSTEM startup function call (config functions)						*/
/************************************************************************/
void startup_sys_configs(void){
     7d8:	b510      	push	{r4, lr}
	system_init();									// System Initialize
     7da:	f000 ffe8 	bl	17ae <system_init>
	cpu_irq_enable();
     7de:	2201      	movs	r2, #1
     7e0:	4b08      	ldr	r3, [pc, #32]	; (804 <startup_sys_configs+0x2c>)
     7e2:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     7e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     7e8:	b662      	cpsie	i
	system_interrupt_enable_global();				// System Interrupts
	configure_port_pins();							// System PORTs
     7ea:	f7ff ff63 	bl	6b4 <configure_port_pins>
	startup_default_pin_state();
     7ee:	f7ff ffe3 	bl	7b8 <startup_default_pin_state>
	configure_system_tc();							// System Clock
     7f2:	f7ff ff8b 	bl	70c <configure_system_tc>
	system_tc_callbacks();							// System Clock Callback
     7f6:	f7ff ffbd 	bl	774 <system_tc_callbacks>
	i2c_master_setup();								// Startup I2C
     7fa:	f001 fcd7 	bl	21ac <i2c_master_setup>
	configure_pwm_tcc();							// Startup PWM
     7fe:	f7ff fd3f 	bl	280 <configure_pwm_tcc>
     802:	bd10      	pop	{r4, pc}
     804:	20000010 	.word	0x20000010

00000808 <get_vbus_state>:
	return (port_base->IN.reg & pin_mask);
     808:	4b03      	ldr	r3, [pc, #12]	; (818 <get_vbus_state+0x10>)
/* GET SYSTEM STATES			                                        */
/************************************************************************/


void get_vbus_state(void) {
  VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
     80a:	4a04      	ldr	r2, [pc, #16]	; (81c <get_vbus_state+0x14>)
     80c:	6a1b      	ldr	r3, [r3, #32]
     80e:	011b      	lsls	r3, r3, #4
     810:	0fdb      	lsrs	r3, r3, #31
     812:	7013      	strb	r3, [r2, #0]
}
     814:	4770      	bx	lr
     816:	46c0      	nop			; (mov r8, r8)
     818:	41004400 	.word	0x41004400
     81c:	200001b4 	.word	0x200001b4

00000820 <get_charging_on_status_state>:
     820:	4b03      	ldr	r3, [pc, #12]	; (830 <get_charging_on_status_state+0x10>)

void get_charging_on_status_state(void) {
  CHARGN_ON_STATE = port_pin_get_input_level(CHARGN_ON_PIN);
     822:	4a04      	ldr	r2, [pc, #16]	; (834 <get_charging_on_status_state+0x14>)
     824:	6a1b      	ldr	r3, [r3, #32]
     826:	051b      	lsls	r3, r3, #20
     828:	0fdb      	lsrs	r3, r3, #31
     82a:	7013      	strb	r3, [r2, #0]
}
     82c:	4770      	bx	lr
     82e:	46c0      	nop			; (mov r8, r8)
     830:	41004400 	.word	0x41004400
     834:	200001ba 	.word	0x200001ba

00000838 <get_charging_off_status_state>:
     838:	4b03      	ldr	r3, [pc, #12]	; (848 <get_charging_off_status_state+0x10>)

void get_charging_off_status_state(void) {
  CHARGN_OFF_STATE = port_pin_get_input_level(CHARGN_OFF_PIN);
     83a:	4a04      	ldr	r2, [pc, #16]	; (84c <get_charging_off_status_state+0x14>)
     83c:	6a1b      	ldr	r3, [r3, #32]
     83e:	071b      	lsls	r3, r3, #28
     840:	0fdb      	lsrs	r3, r3, #31
     842:	7013      	strb	r3, [r2, #0]
}
     844:	4770      	bx	lr
     846:	46c0      	nop			; (mov r8, r8)
     848:	41004400 	.word	0x41004400
     84c:	200001b5 	.word	0x200001b5

00000850 <update_battery_states>:

void update_battery_states(void) {
     850:	b510      	push	{r4, lr}
  get_vbus_state();
     852:	f7ff ffd9 	bl	808 <get_vbus_state>
  get_charging_on_status_state();
     856:	f7ff ffe3 	bl	820 <get_charging_on_status_state>
  get_charging_off_status_state();
     85a:	f7ff ffed 	bl	838 <get_charging_off_status_state>

}
     85e:	bd10      	pop	{r4, pc}

00000860 <display_battery_state>:

/************************************************************************/
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void) {
     860:	b510      	push	{r4, lr}
  2. Steady red light when device has a low battery
  3. Blinking green light when device is charging
  4. Steady green light when the device is at least 100% charged.
  */

  if (BATTERY_LOWEST) {
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <display_battery_state+0x3c>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d002      	beq.n	870 <display_battery_state+0x10>
    set_battery_low_routine();
     86a:	f001 fc5d 	bl	2128 <set_battery_low_routine>
    set_color_cyan(); // set_color_green(); (currently flipped hence,)
  } else if (BATTERY_CHARGING) {
    set_battery_charge_routine();
  }

}
     86e:	bd10      	pop	{r4, pc}
  } else if (BATTERY_LOW) {
     870:	4b0b      	ldr	r3, [pc, #44]	; (8a0 <display_battery_state+0x40>)
     872:	781b      	ldrb	r3, [r3, #0]
     874:	2b00      	cmp	r3, #0
     876:	d002      	beq.n	87e <display_battery_state+0x1e>
    set_color_red();
     878:	f001 fbba 	bl	1ff0 <set_color_red>
     87c:	e7f7      	b.n	86e <display_battery_state+0xe>
  } else if (BATTERY_CHARGED) {
     87e:	4b09      	ldr	r3, [pc, #36]	; (8a4 <display_battery_state+0x44>)
     880:	781b      	ldrb	r3, [r3, #0]
     882:	2b00      	cmp	r3, #0
     884:	d002      	beq.n	88c <display_battery_state+0x2c>
    set_color_cyan(); // set_color_green(); (currently flipped hence,)
     886:	f001 fbcb 	bl	2020 <set_color_cyan>
     88a:	e7f0      	b.n	86e <display_battery_state+0xe>
  } else if (BATTERY_CHARGING) {
     88c:	4b06      	ldr	r3, [pc, #24]	; (8a8 <display_battery_state+0x48>)
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	2b00      	cmp	r3, #0
     892:	d0ec      	beq.n	86e <display_battery_state+0xe>
    set_battery_charge_routine();
     894:	f001 fbf4 	bl	2080 <set_battery_charge_routine>
}
     898:	e7e9      	b.n	86e <display_battery_state+0xe>
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	200001b6 	.word	0x200001b6
     8a0:	200001b8 	.word	0x200001b8
     8a4:	200001b7 	.word	0x200001b7
     8a8:	200001b9 	.word	0x200001b9

000008ac <system_state>:

/************************************************************************/
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void) {
     8ac:	b510      	push	{r4, lr}
  update_battery_states();
     8ae:	f7ff ffcf 	bl	850 <update_battery_states>
  display_battery_state();
     8b2:	f7ff ffd5 	bl	860 <display_battery_state>
     8b6:	bd10      	pop	{r4, pc}

000008b8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     8b8:	4b09      	ldr	r3, [pc, #36]	; (8e0 <cpu_irq_enter_critical+0x28>)
     8ba:	6819      	ldr	r1, [r3, #0]
     8bc:	2900      	cmp	r1, #0
     8be:	d10b      	bne.n	8d8 <cpu_irq_enter_critical+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8c0:	f3ef 8010 	mrs	r0, PRIMASK
     8c4:	4a07      	ldr	r2, [pc, #28]	; (8e4 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     8c6:	2800      	cmp	r0, #0
     8c8:	d105      	bne.n	8d6 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     8ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     8cc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     8d0:	4905      	ldr	r1, [pc, #20]	; (8e8 <cpu_irq_enter_critical+0x30>)
     8d2:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     8d4:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     8d6:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     8d8:	681a      	ldr	r2, [r3, #0]
     8da:	3201      	adds	r2, #1
     8dc:	601a      	str	r2, [r3, #0]
}
     8de:	4770      	bx	lr
     8e0:	2000006c 	.word	0x2000006c
     8e4:	20000070 	.word	0x20000070
     8e8:	20000010 	.word	0x20000010

000008ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     8ec:	4b08      	ldr	r3, [pc, #32]	; (910 <cpu_irq_leave_critical+0x24>)
     8ee:	681a      	ldr	r2, [r3, #0]
     8f0:	3a01      	subs	r2, #1
     8f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     8f4:	681b      	ldr	r3, [r3, #0]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d109      	bne.n	90e <cpu_irq_leave_critical+0x22>
     8fa:	4b06      	ldr	r3, [pc, #24]	; (914 <cpu_irq_leave_critical+0x28>)
     8fc:	781b      	ldrb	r3, [r3, #0]
     8fe:	2b00      	cmp	r3, #0
     900:	d005      	beq.n	90e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     902:	2201      	movs	r2, #1
     904:	4b04      	ldr	r3, [pc, #16]	; (918 <cpu_irq_leave_critical+0x2c>)
     906:	701a      	strb	r2, [r3, #0]
     908:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     90c:	b662      	cpsie	i
	}
}
     90e:	4770      	bx	lr
     910:	2000006c 	.word	0x2000006c
     914:	20000070 	.word	0x20000070
     918:	20000010 	.word	0x20000010

0000091c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     91c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	config->input_pull = PORT_PIN_PULL_UP;
     91e:	2501      	movs	r5, #1
	config->powersave  = false;
     920:	2600      	movs	r6, #0
	config->input_pull = PORT_PIN_PULL_UP;
     922:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
     924:	0021      	movs	r1, r4
     926:	2010      	movs	r0, #16
     928:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     92a:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     92c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     92e:	f000 f80d 	bl	94c <port_pin_set_config>
		port_base->OUTSET.reg = pin_mask;
     932:	2280      	movs	r2, #128	; 0x80
     934:	4b04      	ldr	r3, [pc, #16]	; (948 <system_board_init+0x2c>)
     936:	0252      	lsls	r2, r2, #9
     938:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     93a:	0021      	movs	r1, r4
     93c:	200e      	movs	r0, #14
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     93e:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     940:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     942:	f000 f803 	bl	94c <port_pin_set_config>
}
     946:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
     948:	41004400 	.word	0x41004400

0000094c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     94c:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     94e:	2280      	movs	r2, #128	; 0x80
     950:	ab01      	add	r3, sp, #4
     952:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     954:	780a      	ldrb	r2, [r1, #0]
     956:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     958:	784a      	ldrb	r2, [r1, #1]
     95a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     95c:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     95e:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     960:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     962:	f000 ff0f 	bl	1784 <system_pinmux_pin_set_config>
}
     966:	bd07      	pop	{r0, r1, r2, pc}

00000968 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     968:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     96a:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     96c:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     96e:	421a      	tst	r2, r3
     970:	d1fc      	bne.n	96c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     972:	4770      	bx	lr

00000974 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     974:	b5f0      	push	{r4, r5, r6, r7, lr}
     976:	0007      	movs	r7, r0
     978:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     97a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     97c:	0008      	movs	r0, r1
{
     97e:	0014      	movs	r4, r2
     980:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     982:	f000 fb7d 	bl	1080 <_sercom_get_sercom_inst_index>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     986:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     988:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     98a:	409d      	lsls	r5, r3
     98c:	002b      	movs	r3, r5
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     98e:	4a9a      	ldr	r2, [pc, #616]	; (bf8 <i2c_master_init+0x284>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     990:	300e      	adds	r0, #14
     992:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     994:	b2c5      	uxtb	r5, r0
     996:	430b      	orrs	r3, r1
     998:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     99a:	7b23      	ldrb	r3, [r4, #12]
     99c:	aa08      	add	r2, sp, #32
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     99e:	0011      	movs	r1, r2
     9a0:	0028      	movs	r0, r5
	gclk_chan_conf.source_generator = config->generator_source;
     9a2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     9a4:	f000 fe8c 	bl	16c0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
     9a8:	0028      	movs	r0, r5
     9aa:	f000 fe4d 	bl	1648 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
     9ae:	7b20      	ldrb	r0, [r4, #12]
     9b0:	2100      	movs	r1, #0
     9b2:	f000 faed 	bl	f90 <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     9b6:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     9b8:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     9ba:	079b      	lsls	r3, r3, #30
     9bc:	d500      	bpl.n	9c0 <i2c_master_init+0x4c>
     9be:	e10d      	b.n	bdc <i2c_master_init+0x268>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     9c0:	2301      	movs	r3, #1
     9c2:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     9c4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     9c6:	401d      	ands	r5, r3
     9c8:	d000      	beq.n	9cc <i2c_master_init+0x58>
     9ca:	e107      	b.n	bdc <i2c_master_init+0x268>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     9cc:	6838      	ldr	r0, [r7, #0]
     9ce:	f000 fb57 	bl	1080 <_sercom_get_sercom_inst_index>
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     9d2:	498a      	ldr	r1, [pc, #552]	; (bfc <i2c_master_init+0x288>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     9d4:	9001      	str	r0, [sp, #4]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     9d6:	f000 fb71 	bl	10bc <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
     9da:	9b01      	ldr	r3, [sp, #4]

	/* Initialize values in module. */
	module->registered_callback = 0;
     9dc:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     9de:	009a      	lsls	r2, r3, #2
     9e0:	4b87      	ldr	r3, [pc, #540]	; (c00 <i2c_master_init+0x28c>)
	module->enabled_callback = 0;
     9e2:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     9e4:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     9e6:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     9e8:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     9ea:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     9ec:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     9ee:	2314      	movs	r3, #20
	module->buffer = NULL;
     9f0:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     9f2:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9f4:	683b      	ldr	r3, [r7, #0]
     9f6:	ae09      	add	r6, sp, #36	; 0x24
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     9f8:	0018      	movs	r0, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9fa:	9301      	str	r3, [sp, #4]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     9fc:	f000 fb40 	bl	1080 <_sercom_get_sercom_inst_index>
     a00:	2380      	movs	r3, #128	; 0x80
     a02:	9004      	str	r0, [sp, #16]
	uint32_t pad0 = config->pinmux_pad0;
     a04:	69e0      	ldr	r0, [r4, #28]
     a06:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a08:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a0a:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     a0c:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a0e:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     a10:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     a12:	2800      	cmp	r0, #0
     a14:	d103      	bne.n	a1e <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     a16:	0001      	movs	r1, r0
     a18:	9801      	ldr	r0, [sp, #4]
     a1a:	f000 fad7 	bl	fcc <_sercom_get_default_pad>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     a1e:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     a20:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     a22:	0c00      	lsrs	r0, r0, #16
     a24:	b2c0      	uxtb	r0, r0
     a26:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     a28:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     a2a:	f000 feab 	bl	1784 <system_pinmux_pin_set_config>
	if (pad1 == PINMUX_DEFAULT) {
     a2e:	2d00      	cmp	r5, #0
     a30:	d104      	bne.n	a3c <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     a32:	2101      	movs	r1, #1
     a34:	9801      	ldr	r0, [sp, #4]
     a36:	f000 fac9 	bl	fcc <_sercom_get_default_pad>
     a3a:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     a3c:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     a3e:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     a40:	0c2d      	lsrs	r5, r5, #16
     a42:	b2e8      	uxtb	r0, r5
     a44:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     a46:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     a48:	f000 fe9c 	bl	1784 <system_pinmux_pin_set_config>
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     a4c:	8aa3      	ldrh	r3, [r4, #20]
     a4e:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     a50:	8ae3      	ldrh	r3, [r4, #22]
     a52:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     a54:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     a56:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     a58:	2a00      	cmp	r2, #0
     a5a:	d106      	bne.n	a6a <i2c_master_init+0xf6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a5c:	4b69      	ldr	r3, [pc, #420]	; (c04 <i2c_master_init+0x290>)
     a5e:	3202      	adds	r2, #2
     a60:	789b      	ldrb	r3, [r3, #2]
     a62:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     a64:	1e5f      	subs	r7, r3, #1
     a66:	41bb      	sbcs	r3, r7
     a68:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     a6a:	68a2      	ldr	r2, [r4, #8]
     a6c:	6927      	ldr	r7, [r4, #16]
     a6e:	4317      	orrs	r7, r2
     a70:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     a72:	1d63      	adds	r3, r4, #5
     a74:	7fdb      	ldrb	r3, [r3, #31]
     a76:	2b00      	cmp	r3, #0
     a78:	d002      	beq.n	a80 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     a7a:	2380      	movs	r3, #128	; 0x80
     a7c:	05db      	lsls	r3, r3, #23
     a7e:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     a80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a82:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     a84:	0023      	movs	r3, r4
     a86:	332c      	adds	r3, #44	; 0x2c
     a88:	781b      	ldrb	r3, [r3, #0]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d103      	bne.n	a96 <i2c_master_init+0x122>
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	049b      	lsls	r3, r3, #18
     a92:	429a      	cmp	r2, r3
     a94:	d102      	bne.n	a9c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     a96:	2380      	movs	r3, #128	; 0x80
     a98:	051b      	lsls	r3, r3, #20
     a9a:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     a9c:	0023      	movs	r3, r4
     a9e:	332d      	adds	r3, #45	; 0x2d
     aa0:	781b      	ldrb	r3, [r3, #0]
     aa2:	2b00      	cmp	r3, #0
     aa4:	d002      	beq.n	aac <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     aa6:	2380      	movs	r3, #128	; 0x80
     aa8:	041b      	lsls	r3, r3, #16
     aaa:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     aac:	0023      	movs	r3, r4
     aae:	332e      	adds	r3, #46	; 0x2e
     ab0:	781b      	ldrb	r3, [r3, #0]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d002      	beq.n	abc <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     ab6:	2380      	movs	r3, #128	; 0x80
     ab8:	03db      	lsls	r3, r3, #15
     aba:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     abc:	9b01      	ldr	r3, [sp, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     abe:	9804      	ldr	r0, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     ac0:	681b      	ldr	r3, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     ac2:	9a01      	ldr	r2, [sp, #4]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     ac4:	431f      	orrs	r7, r3
     ac6:	9b01      	ldr	r3, [sp, #4]
	uint32_t fscl        = 1000 * config->baud_rate;
     ac8:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     aca:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     acc:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     ace:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     ad0:	005b      	lsls	r3, r3, #1
     ad2:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     ad4:	b2c0      	uxtb	r0, r0
     ad6:	f000 fdff 	bl	16d8 <system_gclk_chan_get_hz>
	uint32_t fscl        = 1000 * config->baud_rate;
     ada:	6823      	ldr	r3, [r4, #0]
     adc:	00ad      	lsls	r5, r5, #2
     ade:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     ae0:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     ae2:	9004      	str	r0, [sp, #16]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     ae4:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     ae6:	f003 f85d 	bl	3ba4 <__aeabi_ui2d>
     aea:	0006      	movs	r6, r0
     aec:	0068      	lsls	r0, r5, #1
     aee:	000f      	movs	r7, r1
     af0:	f003 f858 	bl	3ba4 <__aeabi_ui2d>
     af4:	9002      	str	r0, [sp, #8]
     af6:	9103      	str	r1, [sp, #12]
     af8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     afa:	f003 f853 	bl	3ba4 <__aeabi_ui2d>
     afe:	4a42      	ldr	r2, [pc, #264]	; (c08 <i2c_master_init+0x294>)
     b00:	9006      	str	r0, [sp, #24]
     b02:	9107      	str	r1, [sp, #28]
     b04:	4b41      	ldr	r3, [pc, #260]	; (c0c <i2c_master_init+0x298>)
     b06:	0030      	movs	r0, r6
     b08:	0039      	movs	r1, r7
     b0a:	f002 fa81 	bl	3010 <__aeabi_dmul>
     b0e:	0002      	movs	r2, r0
     b10:	000b      	movs	r3, r1
     b12:	9806      	ldr	r0, [sp, #24]
     b14:	9907      	ldr	r1, [sp, #28]
     b16:	f002 fa7b 	bl	3010 <__aeabi_dmul>
     b1a:	2200      	movs	r2, #0
     b1c:	4b3c      	ldr	r3, [pc, #240]	; (c10 <i2c_master_init+0x29c>)
     b1e:	f001 fc33 	bl	2388 <__aeabi_dadd>
     b22:	9006      	str	r0, [sp, #24]
     b24:	9107      	str	r1, [sp, #28]
     b26:	0028      	movs	r0, r5
     b28:	f003 f83c 	bl	3ba4 <__aeabi_ui2d>
     b2c:	0002      	movs	r2, r0
     b2e:	000b      	movs	r3, r1
     b30:	9806      	ldr	r0, [sp, #24]
     b32:	9907      	ldr	r1, [sp, #28]
     b34:	f002 fa6c 	bl	3010 <__aeabi_dmul>
     b38:	0002      	movs	r2, r0
     b3a:	000b      	movs	r3, r1
     b3c:	0030      	movs	r0, r6
     b3e:	0039      	movs	r1, r7
     b40:	f002 fce6 	bl	3510 <__aeabi_dsub>
     b44:	9a02      	ldr	r2, [sp, #8]
     b46:	9b03      	ldr	r3, [sp, #12]
     b48:	f001 fc1e 	bl	2388 <__aeabi_dadd>
     b4c:	2200      	movs	r2, #0
     b4e:	4b31      	ldr	r3, [pc, #196]	; (c14 <i2c_master_init+0x2a0>)
     b50:	f002 fcde 	bl	3510 <__aeabi_dsub>
     b54:	9a02      	ldr	r2, [sp, #8]
     b56:	9b03      	ldr	r3, [sp, #12]
     b58:	f001 ff26 	bl	29a8 <__aeabi_ddiv>
     b5c:	f002 ffee 	bl	3b3c <__aeabi_d2iz>
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     b60:	2380      	movs	r3, #128	; 0x80
     b62:	68a2      	ldr	r2, [r4, #8]
	tmp_baud = (int32_t)(div_ceil(
     b64:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     b66:	049b      	lsls	r3, r3, #18
     b68:	429a      	cmp	r2, r3
     b6a:	d141      	bne.n	bf0 <i2c_master_init+0x27c>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     b6c:	23fa      	movs	r3, #250	; 0xfa
     b6e:	9d05      	ldr	r5, [sp, #20]
     b70:	009b      	lsls	r3, r3, #2
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     b72:	0032      	movs	r2, r6
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     b74:	435d      	muls	r5, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     b76:	0030      	movs	r0, r6
     b78:	003b      	movs	r3, r7
     b7a:	0039      	movs	r1, r7
     b7c:	f001 fc04 	bl	2388 <__aeabi_dadd>
     b80:	0006      	movs	r6, r0
     b82:	0028      	movs	r0, r5
     b84:	000f      	movs	r7, r1
     b86:	f003 f80d 	bl	3ba4 <__aeabi_ui2d>
     b8a:	2200      	movs	r2, #0
     b8c:	4b22      	ldr	r3, [pc, #136]	; (c18 <i2c_master_init+0x2a4>)
     b8e:	f002 fa3f 	bl	3010 <__aeabi_dmul>
     b92:	0002      	movs	r2, r0
     b94:	000b      	movs	r3, r1
     b96:	0030      	movs	r0, r6
     b98:	0039      	movs	r1, r7
     b9a:	f001 ff05 	bl	29a8 <__aeabi_ddiv>
     b9e:	2200      	movs	r2, #0
     ba0:	4b1c      	ldr	r3, [pc, #112]	; (c14 <i2c_master_init+0x2a0>)
     ba2:	f002 fcb5 	bl	3510 <__aeabi_dsub>
     ba6:	f002 ffc9 	bl	3b3c <__aeabi_d2iz>
     baa:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     bac:	d018      	beq.n	be0 <i2c_master_init+0x26c>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     bae:	0029      	movs	r1, r5
     bb0:	9804      	ldr	r0, [sp, #16]
     bb2:	f001 fb5d 	bl	2270 <__udivsi3>
     bb6:	3802      	subs	r0, #2
     bb8:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     bba:	9a02      	ldr	r2, [sp, #8]
     bbc:	2040      	movs	r0, #64	; 0x40
     bbe:	2aff      	cmp	r2, #255	; 0xff
     bc0:	d80c      	bhi.n	bdc <i2c_master_init+0x268>
     bc2:	2bff      	cmp	r3, #255	; 0xff
     bc4:	d80a      	bhi.n	bdc <i2c_master_init+0x268>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     bc6:	20ff      	movs	r0, #255	; 0xff
     bc8:	0014      	movs	r4, r2
     bca:	0400      	lsls	r0, r0, #16
     bcc:	041b      	lsls	r3, r3, #16
     bce:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     bd0:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     bd2:	0636      	lsls	r6, r6, #24
     bd4:	4334      	orrs	r4, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     bd6:	9a01      	ldr	r2, [sp, #4]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     bd8:	4323      	orrs	r3, r4
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     bda:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     bdc:	b00b      	add	sp, #44	; 0x2c
     bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     be0:	9b04      	ldr	r3, [sp, #16]
     be2:	0069      	lsls	r1, r5, #1
     be4:	1e48      	subs	r0, r1, #1
     be6:	18c0      	adds	r0, r0, r3
     be8:	f001 fb42 	bl	2270 <__udivsi3>
     bec:	1e43      	subs	r3, r0, #1
     bee:	e7e4      	b.n	bba <i2c_master_init+0x246>
	int32_t tmp_baudlow_hs = 0;
     bf0:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     bf2:	0033      	movs	r3, r6
     bf4:	e7e1      	b.n	bba <i2c_master_init+0x246>
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	40000400 	.word	0x40000400
     bfc:	00000e11 	.word	0x00000e11
     c00:	200001bc 	.word	0x200001bc
     c04:	41002000 	.word	0x41002000
     c08:	e826d695 	.word	0xe826d695
     c0c:	3e112e0b 	.word	0x3e112e0b
     c10:	40240000 	.word	0x40240000
     c14:	3ff00000 	.word	0x3ff00000
     c18:	40080000 	.word	0x40080000

00000c1c <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     c1c:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c1e:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     c20:	7e19      	ldrb	r1, [r3, #24]
     c22:	4211      	tst	r1, r2
     c24:	d006      	beq.n	c34 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     c26:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     c28:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     c2a:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     c2c:	4213      	tst	r3, r2
     c2e:	d10a      	bne.n	c46 <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     c30:	2000      	movs	r0, #0
     c32:	e008      	b.n	c46 <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     c34:	8b5a      	ldrh	r2, [r3, #26]
     c36:	0752      	lsls	r2, r2, #29
     c38:	d5fa      	bpl.n	c30 <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c3a:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
     c3c:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c3e:	6859      	ldr	r1, [r3, #4]
     c40:	0292      	lsls	r2, r2, #10
     c42:	430a      	orrs	r2, r1
     c44:	605a      	str	r2, [r3, #4]
}
     c46:	4770      	bx	lr

00000c48 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     c48:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     c4a:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     c4c:	2601      	movs	r6, #1
     c4e:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c50:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     c52:	7e0b      	ldrb	r3, [r1, #24]
     c54:	4033      	ands	r3, r6
     c56:	d102      	bne.n	c5e <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     c58:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     c5a:	4225      	tst	r5, r4
     c5c:	d001      	beq.n	c62 <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     c5e:	2000      	movs	r0, #0
     c60:	e005      	b.n	c6e <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
     c62:	3201      	adds	r2, #1
     c64:	8903      	ldrh	r3, [r0, #8]
     c66:	b292      	uxth	r2, r2
     c68:	4293      	cmp	r3, r2
     c6a:	d8f2      	bhi.n	c52 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     c6c:	2012      	movs	r0, #18
}
     c6e:	bd70      	pop	{r4, r5, r6, pc}

00000c70 <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c70:	2380      	movs	r3, #128	; 0x80
{
     c72:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c74:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c76:	02db      	lsls	r3, r3, #11
     c78:	6862      	ldr	r2, [r4, #4]
     c7a:	4313      	orrs	r3, r2
     c7c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     c7e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     c80:	f7ff ffe2 	bl	c48 <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     c84:	2301      	movs	r3, #1
     c86:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     c88:	bd10      	pop	{r4, pc}
	...

00000c8c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c8e:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     c90:	884b      	ldrh	r3, [r1, #2]
{
     c92:	0005      	movs	r5, r0
	uint16_t tmp_data_length = packet->data_length;
     c94:	9301      	str	r3, [sp, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c96:	6804      	ldr	r4, [r0, #0]

	_i2c_master_wait_for_sync(module);
     c98:	f7ff fe66 	bl	968 <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
     c9c:	7a7b      	ldrb	r3, [r7, #9]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d003      	beq.n	caa <_i2c_master_write_packet+0x1e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     ca2:	7ab9      	ldrb	r1, [r7, #10]
     ca4:	0028      	movs	r0, r5
     ca6:	f7ff ffe3 	bl	c70 <_i2c_master_send_hs_master_code>
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     caa:	6863      	ldr	r3, [r4, #4]
     cac:	4a24      	ldr	r2, [pc, #144]	; (d40 <_i2c_master_write_packet+0xb4>)
     cae:	4013      	ands	r3, r2
     cb0:	6063      	str	r3, [r4, #4]
     cb2:	7a7a      	ldrb	r2, [r7, #9]
     cb4:	883b      	ldrh	r3, [r7, #0]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     cb6:	7a39      	ldrb	r1, [r7, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     cb8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cba:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     cbc:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
     cbe:	2900      	cmp	r1, #0
     cc0:	d002      	beq.n	cc8 <_i2c_master_write_packet+0x3c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cc2:	2280      	movs	r2, #128	; 0x80
     cc4:	0212      	lsls	r2, r2, #8
     cc6:	4313      	orrs	r3, r2
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     cc8:	6263      	str	r3, [r4, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     cca:	0028      	movs	r0, r5
     ccc:	f7ff ffbc 	bl	c48 <_i2c_master_wait_for_bus>
     cd0:	1e06      	subs	r6, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     cd2:	d115      	bne.n	d00 <_i2c_master_write_packet+0x74>
		tmp_status = _i2c_master_address_response(module);
     cd4:	0028      	movs	r0, r5
     cd6:	f7ff ffa1 	bl	c1c <_i2c_master_address_response>
     cda:	1e06      	subs	r6, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     cdc:	d110      	bne.n	d00 <_i2c_master_write_packet+0x74>
     cde:	9000      	str	r0, [sp, #0]
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     ce0:	9b00      	ldr	r3, [sp, #0]
     ce2:	9a01      	ldr	r2, [sp, #4]
     ce4:	4293      	cmp	r3, r2
     ce6:	d10d      	bne.n	d04 <_i2c_master_write_packet+0x78>
     ce8:	2600      	movs	r6, #0
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     cea:	7aab      	ldrb	r3, [r5, #10]
     cec:	2b00      	cmp	r3, #0
     cee:	d007      	beq.n	d00 <_i2c_master_write_packet+0x74>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     cf0:	0028      	movs	r0, r5
     cf2:	f7ff fe39 	bl	968 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     cf6:	23c0      	movs	r3, #192	; 0xc0
     cf8:	6862      	ldr	r2, [r4, #4]
     cfa:	029b      	lsls	r3, r3, #10
     cfc:	4313      	orrs	r3, r2
     cfe:	6063      	str	r3, [r4, #4]
		}
	}

	return tmp_status;
}
     d00:	0030      	movs	r0, r6
     d02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     d04:	2220      	movs	r2, #32
     d06:	8b63      	ldrh	r3, [r4, #26]
     d08:	4213      	tst	r3, r2
     d0a:	d016      	beq.n	d3a <_i2c_master_write_packet+0xae>
			_i2c_master_wait_for_sync(module);
     d0c:	0028      	movs	r0, r5
     d0e:	f7ff fe2b 	bl	968 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	9a00      	ldr	r2, [sp, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     d16:	0028      	movs	r0, r5
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     d18:	5c9a      	ldrb	r2, [r3, r2]
     d1a:	0023      	movs	r3, r4
     d1c:	3328      	adds	r3, #40	; 0x28
     d1e:	701a      	strb	r2, [r3, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     d20:	f7ff ff92 	bl	c48 <_i2c_master_wait_for_bus>
     d24:	1e06      	subs	r6, r0, #0
			if (tmp_status != STATUS_OK) {
     d26:	d1e0      	bne.n	cea <_i2c_master_write_packet+0x5e>
     d28:	9a00      	ldr	r2, [sp, #0]
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     d2a:	8b63      	ldrh	r3, [r4, #26]
     d2c:	3201      	adds	r2, #1
     d2e:	9200      	str	r2, [sp, #0]
     d30:	2204      	movs	r2, #4
     d32:	4213      	tst	r3, r2
     d34:	d0d4      	beq.n	ce0 <_i2c_master_write_packet+0x54>
				tmp_status = STATUS_ERR_OVERFLOW;
     d36:	261e      	movs	r6, #30
     d38:	e7d7      	b.n	cea <_i2c_master_write_packet+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
     d3a:	2641      	movs	r6, #65	; 0x41
     d3c:	e7e0      	b.n	d00 <_i2c_master_write_packet+0x74>
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	fffbffff 	.word	0xfffbffff

00000d44 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d44:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     d46:	8b82      	ldrh	r2, [r0, #28]
{
     d48:	0003      	movs	r3, r0
		return STATUS_BUSY;
     d4a:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
     d4c:	2a00      	cmp	r2, #0
     d4e:	d105      	bne.n	d5c <i2c_master_write_packet_wait+0x18>
	}
#endif

	module->send_stop = true;
     d50:	3201      	adds	r2, #1
     d52:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     d54:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     d56:	0018      	movs	r0, r3
     d58:	f7ff ff98 	bl	c8c <_i2c_master_write_packet>
}
     d5c:	bd10      	pop	{r4, pc}

00000d5e <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d5e:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     d60:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d62:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     d64:	421a      	tst	r2, r3
     d66:	d1fc      	bne.n	d62 <_i2c_master_wait_for_sync+0x4>
}
     d68:	4770      	bx	lr

00000d6a <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     d6a:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d6c:	6805      	ldr	r5, [r0, #0]
{
     d6e:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     d70:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     d72:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     d74:	8b83      	ldrh	r3, [r0, #28]
     d76:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
     d78:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     d7a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     d7c:	3b01      	subs	r3, #1
     d7e:	b29b      	uxth	r3, r3
     d80:	8383      	strh	r3, [r0, #28]
     d82:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
     d84:	0112      	lsls	r2, r2, #4
     d86:	d50a      	bpl.n	d9e <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
     d88:	2b00      	cmp	r3, #0
     d8a:	d00d      	beq.n	da8 <_i2c_master_read+0x3e>
     d8c:	8b83      	ldrh	r3, [r0, #28]
     d8e:	2b01      	cmp	r3, #1
     d90:	d10a      	bne.n	da8 <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d92:	2380      	movs	r3, #128	; 0x80
     d94:	686a      	ldr	r2, [r5, #4]
     d96:	02db      	lsls	r3, r3, #11
     d98:	4313      	orrs	r3, r2
     d9a:	606b      	str	r3, [r5, #4]
     d9c:	e004      	b.n	da8 <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
     d9e:	2b00      	cmp	r3, #0
     da0:	d002      	beq.n	da8 <_i2c_master_read+0x3e>
     da2:	8b83      	ldrh	r3, [r0, #28]
     da4:	2b00      	cmp	r3, #0
     da6:	d0f4      	beq.n	d92 <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
     da8:	8ba3      	ldrh	r3, [r4, #28]
     daa:	2b00      	cmp	r3, #0
     dac:	d10a      	bne.n	dc4 <_i2c_master_read+0x5a>
		if (module->send_stop) {
     dae:	7aa3      	ldrb	r3, [r4, #10]
     db0:	2b00      	cmp	r3, #0
     db2:	d007      	beq.n	dc4 <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     db4:	0020      	movs	r0, r4
     db6:	f7ff ffd2 	bl	d5e <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     dba:	23c0      	movs	r3, #192	; 0xc0
     dbc:	686a      	ldr	r2, [r5, #4]
     dbe:	029b      	lsls	r3, r3, #10
     dc0:	4313      	orrs	r3, r2
     dc2:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     dc4:	0020      	movs	r0, r4
     dc6:	f7ff ffca 	bl	d5e <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     dca:	6a23      	ldr	r3, [r4, #32]
     dcc:	3528      	adds	r5, #40	; 0x28
     dce:	199e      	adds	r6, r3, r6
     dd0:	782b      	ldrb	r3, [r5, #0]
     dd2:	b2db      	uxtb	r3, r3
     dd4:	7033      	strb	r3, [r6, #0]
}
     dd6:	bd70      	pop	{r4, r5, r6, pc}

00000dd8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     dd8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dda:	6806      	ldr	r6, [r0, #0]
{
     ddc:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     dde:	8b73      	ldrh	r3, [r6, #26]
     de0:	075b      	lsls	r3, r3, #29
     de2:	d503      	bpl.n	dec <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     de4:	231e      	movs	r3, #30
     de6:	3406      	adds	r4, #6
     de8:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     dea:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     dec:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     dee:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
     df0:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
     df2:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
     df4:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     df6:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
     df8:	3b01      	subs	r3, #1
     dfa:	b29b      	uxth	r3, r3
     dfc:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     dfe:	f7ff ffae 	bl	d5e <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
     e02:	6a23      	ldr	r3, [r4, #32]
     e04:	195d      	adds	r5, r3, r5
     e06:	782b      	ldrb	r3, [r5, #0]
     e08:	b2db      	uxtb	r3, r3
     e0a:	7033      	strb	r3, [r6, #0]
     e0c:	e7ed      	b.n	dea <_i2c_master_write+0x12>
	...

00000e10 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     e12:	4b5e      	ldr	r3, [pc, #376]	; (f8c <_i2c_master_interrupt_handler+0x17c>)
     e14:	0080      	lsls	r0, r0, #2
     e16:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e18:	6825      	ldr	r5, [r4, #0]
     e1a:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     e1c:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     e1e:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
     e20:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     e22:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
     e24:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     e26:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     e28:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     e2a:	2a00      	cmp	r2, #0
     e2c:	d12e      	bne.n	e8c <_i2c_master_interrupt_handler+0x7c>
     e2e:	8ba2      	ldrh	r2, [r4, #28]
     e30:	2a00      	cmp	r2, #0
     e32:	d02b      	beq.n	e8c <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     e34:	2301      	movs	r3, #1
     e36:	7e2a      	ldrb	r2, [r5, #24]
     e38:	421a      	tst	r2, r3
     e3a:	d006      	beq.n	e4a <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     e3c:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     e3e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     e40:	8b6b      	ldrh	r3, [r5, #26]
     e42:	4013      	ands	r3, r2
     e44:	d010      	beq.n	e68 <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
     e46:	2341      	movs	r3, #65	; 0x41
     e48:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
     e4a:	8ba3      	ldrh	r3, [r4, #28]
     e4c:	b29b      	uxth	r3, r3
     e4e:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     e50:	7ff3      	ldrb	r3, [r6, #31]
     e52:	2b05      	cmp	r3, #5
     e54:	d13c      	bne.n	ed0 <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e56:	1d63      	adds	r3, r4, #5
     e58:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
     e5a:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e5c:	2b00      	cmp	r3, #0
     e5e:	d000      	beq.n	e62 <_i2c_master_interrupt_handler+0x52>
     e60:	e08a      	b.n	f78 <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
     e62:	f7ff ffb9 	bl	dd8 <_i2c_master_write>
     e66:	e033      	b.n	ed0 <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     e68:	8b6a      	ldrh	r2, [r5, #26]
     e6a:	0752      	lsls	r2, r2, #29
     e6c:	d5ed      	bpl.n	e4a <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     e6e:	2218      	movs	r2, #24
     e70:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
     e72:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     e74:	7aa3      	ldrb	r3, [r4, #10]
     e76:	2b00      	cmp	r3, #0
     e78:	d0e7      	beq.n	e4a <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
     e7a:	0020      	movs	r0, r4
     e7c:	f7ff ff6f 	bl	d5e <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e80:	23c0      	movs	r3, #192	; 0xc0
     e82:	686a      	ldr	r2, [r5, #4]
     e84:	029b      	lsls	r3, r3, #10
     e86:	4313      	orrs	r3, r2
     e88:	606b      	str	r3, [r5, #4]
     e8a:	e7de      	b.n	e4a <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e8c:	8b62      	ldrh	r2, [r4, #26]
     e8e:	2a00      	cmp	r2, #0
     e90:	d05f      	beq.n	f52 <_i2c_master_interrupt_handler+0x142>
     e92:	8ba2      	ldrh	r2, [r4, #28]
     e94:	2a00      	cmp	r2, #0
     e96:	d15c      	bne.n	f52 <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
     e98:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e9a:	2a05      	cmp	r2, #5
     e9c:	d159      	bne.n	f52 <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e9e:	1d62      	adds	r2, r4, #5
     ea0:	7fd2      	ldrb	r2, [r2, #31]
     ea2:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
     ea4:	2a00      	cmp	r2, #0
     ea6:	d154      	bne.n	f52 <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
     ea8:	2303      	movs	r3, #3
     eaa:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     eac:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     eae:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
     eb0:	7aa3      	ldrb	r3, [r4, #10]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d04a      	beq.n	f4c <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
     eb6:	0020      	movs	r0, r4
     eb8:	f7ff ff51 	bl	d5e <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ebc:	23c0      	movs	r3, #192	; 0xc0
     ebe:	686a      	ldr	r2, [r5, #4]
     ec0:	029b      	lsls	r3, r3, #10
     ec2:	4313      	orrs	r3, r2
     ec4:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     ec6:	07fb      	lsls	r3, r7, #31
     ec8:	d502      	bpl.n	ed0 <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     eca:	68e3      	ldr	r3, [r4, #12]
     ecc:	0020      	movs	r0, r4
     ece:	4798      	blx	r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ed0:	8b63      	ldrh	r3, [r4, #26]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d01b      	beq.n	f0e <_i2c_master_interrupt_handler+0xfe>
     ed6:	8ba3      	ldrh	r3, [r4, #28]
     ed8:	2b00      	cmp	r3, #0
     eda:	d118      	bne.n	f0e <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
     edc:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ede:	2b05      	cmp	r3, #5
     ee0:	d115      	bne.n	f0e <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     ee2:	1d63      	adds	r3, r4, #5
     ee4:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
     ee6:	2a01      	cmp	r2, #1
     ee8:	d111      	bne.n	f0e <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     eea:	7e29      	ldrb	r1, [r5, #24]
     eec:	3201      	adds	r2, #1
     eee:	4211      	tst	r1, r2
     ef0:	d000      	beq.n	ef4 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ef2:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     ef4:	2203      	movs	r2, #3
     ef6:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     ef8:	2200      	movs	r2, #0
     efa:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     efc:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     efe:	07ba      	lsls	r2, r7, #30
     f00:	d53d      	bpl.n	f7e <_i2c_master_interrupt_handler+0x16e>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     f02:	7fda      	ldrb	r2, [r3, #31]
     f04:	2a01      	cmp	r2, #1
     f06:	d13a      	bne.n	f7e <_i2c_master_interrupt_handler+0x16e>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     f08:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     f0a:	0020      	movs	r0, r4
     f0c:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     f0e:	7ff3      	ldrb	r3, [r6, #31]
     f10:	2b05      	cmp	r3, #5
     f12:	d01a      	beq.n	f4a <_i2c_master_interrupt_handler+0x13a>
     f14:	7ff3      	ldrb	r3, [r6, #31]
     f16:	2b00      	cmp	r3, #0
     f18:	d017      	beq.n	f4a <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     f1a:	2303      	movs	r3, #3
     f1c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     f1e:	2300      	movs	r3, #0
     f20:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     f22:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     f24:	7ff3      	ldrb	r3, [r6, #31]
     f26:	2b41      	cmp	r3, #65	; 0x41
     f28:	d00a      	beq.n	f40 <_i2c_master_interrupt_handler+0x130>
     f2a:	7aa3      	ldrb	r3, [r4, #10]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d007      	beq.n	f40 <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     f30:	0020      	movs	r0, r4
     f32:	f7ff ff14 	bl	d5e <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     f36:	23e0      	movs	r3, #224	; 0xe0
     f38:	686a      	ldr	r2, [r5, #4]
     f3a:	02db      	lsls	r3, r3, #11
     f3c:	4313      	orrs	r3, r2
     f3e:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     f40:	077b      	lsls	r3, r7, #29
     f42:	d502      	bpl.n	f4a <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     f44:	6963      	ldr	r3, [r4, #20]
     f46:	0020      	movs	r0, r4
     f48:	4798      	blx	r3
		}
	}
}
     f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     f4c:	2301      	movs	r3, #1
     f4e:	762b      	strb	r3, [r5, #24]
     f50:	e7b9      	b.n	ec6 <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     f52:	8b62      	ldrh	r2, [r4, #26]
     f54:	2a00      	cmp	r2, #0
     f56:	d0bb      	beq.n	ed0 <_i2c_master_interrupt_handler+0xc0>
     f58:	8ba2      	ldrh	r2, [r4, #28]
     f5a:	2a00      	cmp	r2, #0
     f5c:	d0b8      	beq.n	ed0 <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     f5e:	8b6a      	ldrh	r2, [r5, #26]
     f60:	0692      	lsls	r2, r2, #26
     f62:	d500      	bpl.n	f66 <_i2c_master_interrupt_handler+0x156>
     f64:	e777      	b.n	e56 <_i2c_master_interrupt_handler+0x46>
     f66:	2b00      	cmp	r3, #0
     f68:	d003      	beq.n	f72 <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     f6a:	8ba3      	ldrh	r3, [r4, #28]
     f6c:	2b01      	cmp	r3, #1
     f6e:	d100      	bne.n	f72 <_i2c_master_interrupt_handler+0x162>
     f70:	e771      	b.n	e56 <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
     f72:	2341      	movs	r3, #65	; 0x41
     f74:	77f3      	strb	r3, [r6, #31]
     f76:	e7ab      	b.n	ed0 <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
     f78:	f7ff fef7 	bl	d6a <_i2c_master_read>
     f7c:	e7a8      	b.n	ed0 <_i2c_master_interrupt_handler+0xc0>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     f7e:	07fa      	lsls	r2, r7, #31
     f80:	d5c5      	bpl.n	f0e <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     f82:	7fdb      	ldrb	r3, [r3, #31]
     f84:	2b00      	cmp	r3, #0
     f86:	d1c2      	bne.n	f0e <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     f88:	68e3      	ldr	r3, [r4, #12]
     f8a:	e7be      	b.n	f0a <_i2c_master_interrupt_handler+0xfa>
     f8c:	200001bc 	.word	0x200001bc

00000f90 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     f92:	4c0d      	ldr	r4, [pc, #52]	; (fc8 <sercom_set_gclk_generator+0x38>)
{
     f94:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     f96:	7823      	ldrb	r3, [r4, #0]
     f98:	2b00      	cmp	r3, #0
     f9a:	d001      	beq.n	fa0 <sercom_set_gclk_generator+0x10>
     f9c:	2900      	cmp	r1, #0
     f9e:	d00c      	beq.n	fba <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     fa0:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     fa2:	200d      	movs	r0, #13
		gclk_chan_conf.source_generator = generator_source;
     fa4:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     fa6:	f000 fb8b 	bl	16c0 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     faa:	200d      	movs	r0, #13
     fac:	f000 fb4c 	bl	1648 <system_gclk_chan_enable>

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     fb0:	2301      	movs	r3, #1

		return STATUS_OK;
     fb2:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     fb4:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     fb6:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     fb8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     fba:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     fbc:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     fbe:	42ab      	cmp	r3, r5
     fc0:	d0fa      	beq.n	fb8 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     fc2:	201d      	movs	r0, #29
     fc4:	e7f8      	b.n	fb8 <sercom_set_gclk_generator+0x28>
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	20000071 	.word	0x20000071

00000fcc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     fcc:	4a1d      	ldr	r2, [pc, #116]	; (1044 <_sercom_get_default_pad+0x78>)
{
     fce:	0003      	movs	r3, r0
     fd0:	b500      	push	{lr}
     fd2:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     fd4:	4293      	cmp	r3, r2
     fd6:	d013      	beq.n	1000 <_sercom_get_default_pad+0x34>
     fd8:	4a1b      	ldr	r2, [pc, #108]	; (1048 <_sercom_get_default_pad+0x7c>)
     fda:	4293      	cmp	r3, r2
     fdc:	d01d      	beq.n	101a <_sercom_get_default_pad+0x4e>
     fde:	4a1b      	ldr	r2, [pc, #108]	; (104c <_sercom_get_default_pad+0x80>)
     fe0:	4293      	cmp	r3, r2
     fe2:	d127      	bne.n	1034 <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     fe4:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fe6:	2903      	cmp	r1, #3
     fe8:	d804      	bhi.n	ff4 <_sercom_get_default_pad+0x28>
     fea:	f001 f937 	bl	225c <__gnu_thumb1_case_uqi>
     fee:	0225      	.short	0x0225
     ff0:	0705      	.short	0x0705
     ff2:	4b17      	ldr	r3, [pc, #92]	; (1050 <_sercom_get_default_pad+0x84>)
}
     ff4:	0018      	movs	r0, r3
     ff6:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ff8:	4b16      	ldr	r3, [pc, #88]	; (1054 <_sercom_get_default_pad+0x88>)
     ffa:	e7fb      	b.n	ff4 <_sercom_get_default_pad+0x28>
     ffc:	4b16      	ldr	r3, [pc, #88]	; (1058 <_sercom_get_default_pad+0x8c>)
     ffe:	e7f9      	b.n	ff4 <_sercom_get_default_pad+0x28>
	return 0;
    1000:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1002:	2903      	cmp	r1, #3
    1004:	d8f6      	bhi.n	ff4 <_sercom_get_default_pad+0x28>
    1006:	f001 f929 	bl	225c <__gnu_thumb1_case_uqi>
    100a:	0219      	.short	0x0219
    100c:	0604      	.short	0x0604
    100e:	4b13      	ldr	r3, [pc, #76]	; (105c <_sercom_get_default_pad+0x90>)
    1010:	e7f0      	b.n	ff4 <_sercom_get_default_pad+0x28>
    1012:	4b13      	ldr	r3, [pc, #76]	; (1060 <_sercom_get_default_pad+0x94>)
    1014:	e7ee      	b.n	ff4 <_sercom_get_default_pad+0x28>
    1016:	4b13      	ldr	r3, [pc, #76]	; (1064 <_sercom_get_default_pad+0x98>)
    1018:	e7ec      	b.n	ff4 <_sercom_get_default_pad+0x28>
	return 0;
    101a:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    101c:	2903      	cmp	r1, #3
    101e:	d8e9      	bhi.n	ff4 <_sercom_get_default_pad+0x28>
    1020:	f001 f91c 	bl	225c <__gnu_thumb1_case_uqi>
    1024:	0604020e 	.word	0x0604020e
    1028:	4b0f      	ldr	r3, [pc, #60]	; (1068 <_sercom_get_default_pad+0x9c>)
    102a:	e7e3      	b.n	ff4 <_sercom_get_default_pad+0x28>
    102c:	4b0f      	ldr	r3, [pc, #60]	; (106c <_sercom_get_default_pad+0xa0>)
    102e:	e7e1      	b.n	ff4 <_sercom_get_default_pad+0x28>
    1030:	4b0f      	ldr	r3, [pc, #60]	; (1070 <_sercom_get_default_pad+0xa4>)
    1032:	e7df      	b.n	ff4 <_sercom_get_default_pad+0x28>
	return 0;
    1034:	2300      	movs	r3, #0
    1036:	e7dd      	b.n	ff4 <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1038:	4b0e      	ldr	r3, [pc, #56]	; (1074 <_sercom_get_default_pad+0xa8>)
    103a:	e7db      	b.n	ff4 <_sercom_get_default_pad+0x28>
    103c:	4b0e      	ldr	r3, [pc, #56]	; (1078 <_sercom_get_default_pad+0xac>)
    103e:	e7d9      	b.n	ff4 <_sercom_get_default_pad+0x28>
    1040:	4b0e      	ldr	r3, [pc, #56]	; (107c <_sercom_get_default_pad+0xb0>)
    1042:	e7d7      	b.n	ff4 <_sercom_get_default_pad+0x28>
    1044:	42000c00 	.word	0x42000c00
    1048:	42001000 	.word	0x42001000
    104c:	42000800 	.word	0x42000800
    1050:	00050003 	.word	0x00050003
    1054:	00060003 	.word	0x00060003
    1058:	00070003 	.word	0x00070003
    105c:	00170002 	.word	0x00170002
    1060:	001e0003 	.word	0x001e0003
    1064:	001f0003 	.word	0x001f0003
    1068:	00170003 	.word	0x00170003
    106c:	00100003 	.word	0x00100003
    1070:	00190003 	.word	0x00190003
    1074:	00040003 	.word	0x00040003
    1078:	00160002 	.word	0x00160002
    107c:	00160003 	.word	0x00160003

00001080 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1080:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1082:	4b0c      	ldr	r3, [pc, #48]	; (10b4 <_sercom_get_sercom_inst_index+0x34>)
{
    1084:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1086:	0018      	movs	r0, r3
    1088:	aa01      	add	r2, sp, #4
    108a:	c870      	ldmia	r0!, {r4, r5, r6}
    108c:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    108e:	9a01      	ldr	r2, [sp, #4]
    1090:	428a      	cmp	r2, r1
    1092:	d00a      	beq.n	10aa <_sercom_get_sercom_inst_index+0x2a>
    1094:	685a      	ldr	r2, [r3, #4]
    1096:	428a      	cmp	r2, r1
    1098:	d009      	beq.n	10ae <_sercom_get_sercom_inst_index+0x2e>
    109a:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    109c:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    109e:	428b      	cmp	r3, r1
    10a0:	d101      	bne.n	10a6 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10a2:	3002      	adds	r0, #2
			return i;
    10a4:	b2c0      	uxtb	r0, r0
}
    10a6:	b004      	add	sp, #16
    10a8:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10aa:	2000      	movs	r0, #0
    10ac:	e7fa      	b.n	10a4 <_sercom_get_sercom_inst_index+0x24>
    10ae:	2001      	movs	r0, #1
    10b0:	e7f8      	b.n	10a4 <_sercom_get_sercom_inst_index+0x24>
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	00003cac 	.word	0x00003cac

000010b8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    10b8:	4770      	bx	lr
	...

000010bc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    10bc:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    10be:	4e09      	ldr	r6, [pc, #36]	; (10e4 <_sercom_set_handler+0x28>)
    10c0:	4b09      	ldr	r3, [pc, #36]	; (10e8 <_sercom_set_handler+0x2c>)
    10c2:	7832      	ldrb	r2, [r6, #0]
    10c4:	2a00      	cmp	r2, #0
    10c6:	d109      	bne.n	10dc <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    10c8:	4c08      	ldr	r4, [pc, #32]	; (10ec <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10ca:	4d09      	ldr	r5, [pc, #36]	; (10f0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    10cc:	6022      	str	r2, [r4, #0]
    10ce:	6062      	str	r2, [r4, #4]
    10d0:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
    10d2:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10d4:	601d      	str	r5, [r3, #0]
    10d6:	605d      	str	r5, [r3, #4]
    10d8:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
    10da:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    10dc:	0080      	lsls	r0, r0, #2
    10de:	5019      	str	r1, [r3, r0]
}
    10e0:	bd70      	pop	{r4, r5, r6, pc}
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	20000073 	.word	0x20000073
    10e8:	20000074 	.word	0x20000074
    10ec:	200001bc 	.word	0x200001bc
    10f0:	000010b9 	.word	0x000010b9

000010f4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    10f4:	2309      	movs	r3, #9
{
    10f6:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    10f8:	ac01      	add	r4, sp, #4
    10fa:	7023      	strb	r3, [r4, #0]
    10fc:	3301      	adds	r3, #1
    10fe:	7063      	strb	r3, [r4, #1]
    1100:	3301      	adds	r3, #1
    1102:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1104:	f7ff ffbc 	bl	1080 <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1108:	5620      	ldrsb	r0, [r4, r0]
}
    110a:	bd16      	pop	{r1, r2, r4, pc}

0000110c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    110c:	b510      	push	{r4, lr}
    110e:	4b02      	ldr	r3, [pc, #8]	; (1118 <SERCOM0_Handler+0xc>)
    1110:	2000      	movs	r0, #0
    1112:	681b      	ldr	r3, [r3, #0]
    1114:	4798      	blx	r3
    1116:	bd10      	pop	{r4, pc}
    1118:	20000074 	.word	0x20000074

0000111c <SERCOM1_Handler>:
    111c:	b510      	push	{r4, lr}
    111e:	4b02      	ldr	r3, [pc, #8]	; (1128 <SERCOM1_Handler+0xc>)
    1120:	2001      	movs	r0, #1
    1122:	685b      	ldr	r3, [r3, #4]
    1124:	4798      	blx	r3
    1126:	bd10      	pop	{r4, pc}
    1128:	20000074 	.word	0x20000074

0000112c <SERCOM2_Handler>:
    112c:	b510      	push	{r4, lr}
    112e:	4b02      	ldr	r3, [pc, #8]	; (1138 <SERCOM2_Handler+0xc>)
    1130:	2002      	movs	r0, #2
    1132:	689b      	ldr	r3, [r3, #8]
    1134:	4798      	blx	r3
    1136:	bd10      	pop	{r4, pc}
    1138:	20000074 	.word	0x20000074

0000113c <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    113c:	2310      	movs	r3, #16
    113e:	4902      	ldr	r1, [pc, #8]	; (1148 <_system_dfll_wait_for_sync+0xc>)
    1140:	68ca      	ldr	r2, [r1, #12]
    1142:	421a      	tst	r2, r3
    1144:	d0fc      	beq.n	1140 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    1146:	4770      	bx	lr
    1148:	40000800 	.word	0x40000800

0000114c <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    114c:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
    114e:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
    1150:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1152:	4d0a      	ldr	r5, [pc, #40]	; (117c <system_clock_source_enable.part.0+0x30>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1154:	4c0a      	ldr	r4, [pc, #40]	; (1180 <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1156:	682b      	ldr	r3, [r5, #0]
    1158:	4313      	orrs	r3, r2
    115a:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    115c:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    115e:	f7ff ffed 	bl	113c <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1162:	68ab      	ldr	r3, [r5, #8]
    1164:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1166:	686b      	ldr	r3, [r5, #4]
    1168:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    116a:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    116c:	f7ff ffe6 	bl	113c <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1170:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1172:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1174:	b29b      	uxth	r3, r3
    1176:	84a3      	strh	r3, [r4, #36]	; 0x24
}
    1178:	bd70      	pop	{r4, r5, r6, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	20000080 	.word	0x20000080
    1180:	40000800 	.word	0x40000800

00001184 <system_clock_source_get_hz>:
{
    1184:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    1186:	2808      	cmp	r0, #8
    1188:	d806      	bhi.n	1198 <system_clock_source_get_hz+0x14>
    118a:	f001 f867 	bl	225c <__gnu_thumb1_case_uqi>
    118e:	0508      	.short	0x0508
    1190:	12303005 	.word	0x12303005
    1194:	150b      	.short	0x150b
    1196:	28          	.byte	0x28
    1197:	00          	.byte	0x00
		return 0;
    1198:	2400      	movs	r4, #0
}
    119a:	0020      	movs	r0, r4
    119c:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    119e:	4b16      	ldr	r3, [pc, #88]	; (11f8 <system_clock_source_get_hz+0x74>)
    11a0:	691c      	ldr	r4, [r3, #16]
    11a2:	e7fa      	b.n	119a <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    11a4:	4b15      	ldr	r3, [pc, #84]	; (11fc <system_clock_source_get_hz+0x78>)
    11a6:	4c16      	ldr	r4, [pc, #88]	; (1200 <system_clock_source_get_hz+0x7c>)
    11a8:	6a1b      	ldr	r3, [r3, #32]
    11aa:	059b      	lsls	r3, r3, #22
    11ac:	0f9b      	lsrs	r3, r3, #30
    11ae:	40dc      	lsrs	r4, r3
    11b0:	e7f3      	b.n	119a <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    11b2:	4b11      	ldr	r3, [pc, #68]	; (11f8 <system_clock_source_get_hz+0x74>)
    11b4:	695c      	ldr	r4, [r3, #20]
    11b6:	e7f0      	b.n	119a <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    11b8:	4d0f      	ldr	r5, [pc, #60]	; (11f8 <system_clock_source_get_hz+0x74>)
			return 0;
    11ba:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    11bc:	682b      	ldr	r3, [r5, #0]
    11be:	079b      	lsls	r3, r3, #30
    11c0:	d5eb      	bpl.n	119a <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    11c2:	f7ff ffbb 	bl	113c <_system_dfll_wait_for_sync>
		switch(_system_clock_inst.dfll.control &
    11c6:	2224      	movs	r2, #36	; 0x24
    11c8:	682b      	ldr	r3, [r5, #0]
    11ca:	4013      	ands	r3, r2
    11cc:	2b04      	cmp	r3, #4
    11ce:	d111      	bne.n	11f4 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    11d0:	0020      	movs	r0, r4
    11d2:	f000 fa81 	bl	16d8 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    11d6:	68ac      	ldr	r4, [r5, #8]
    11d8:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    11da:	4344      	muls	r4, r0
    11dc:	e7dd      	b.n	119a <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    11de:	4b09      	ldr	r3, [pc, #36]	; (1204 <system_clock_source_get_hz+0x80>)
			return 0;
    11e0:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    11e2:	781b      	ldrb	r3, [r3, #0]
    11e4:	075b      	lsls	r3, r3, #29
    11e6:	d5d8      	bpl.n	119a <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    11e8:	4b03      	ldr	r3, [pc, #12]	; (11f8 <system_clock_source_get_hz+0x74>)
    11ea:	68dc      	ldr	r4, [r3, #12]
    11ec:	e7d5      	b.n	119a <system_clock_source_get_hz+0x16>
		return 32768UL;
    11ee:	2480      	movs	r4, #128	; 0x80
    11f0:	0224      	lsls	r4, r4, #8
    11f2:	e7d2      	b.n	119a <system_clock_source_get_hz+0x16>
			return 48000000UL;
    11f4:	4c04      	ldr	r4, [pc, #16]	; (1208 <system_clock_source_get_hz+0x84>)
    11f6:	e7d0      	b.n	119a <system_clock_source_get_hz+0x16>
    11f8:	20000080 	.word	0x20000080
    11fc:	40000800 	.word	0x40000800
    1200:	007a1200 	.word	0x007a1200
    1204:	40000850 	.word	0x40000850
    1208:	02dc6c00 	.word	0x02dc6c00

0000120c <system_clock_source_osc8m_set_config>:
{
    120c:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
    120e:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    1210:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
    1212:	7845      	ldrb	r5, [r0, #1]
    1214:	2001      	movs	r0, #1
    1216:	2640      	movs	r6, #64	; 0x40
    1218:	4005      	ands	r5, r0
    121a:	4020      	ands	r0, r4
    121c:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    121e:	4908      	ldr	r1, [pc, #32]	; (1240 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    1220:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1222:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    1224:	01c0      	lsls	r0, r0, #7
    1226:	43b3      	bics	r3, r6
    1228:	432b      	orrs	r3, r5
    122a:	43a3      	bics	r3, r4
    122c:	4303      	orrs	r3, r0
    122e:	2003      	movs	r0, #3
    1230:	4002      	ands	r2, r0
    1232:	4804      	ldr	r0, [pc, #16]	; (1244 <system_clock_source_osc8m_set_config+0x38>)
    1234:	0212      	lsls	r2, r2, #8
    1236:	4003      	ands	r3, r0
    1238:	4313      	orrs	r3, r2
    123a:	620b      	str	r3, [r1, #32]
}
    123c:	bd70      	pop	{r4, r5, r6, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	40000800 	.word	0x40000800
    1244:	fffffcff 	.word	0xfffffcff

00001248 <system_clock_source_osc32k_set_config>:
{
    1248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    124a:	4f18      	ldr	r7, [pc, #96]	; (12ac <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
    124c:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    124e:	69bb      	ldr	r3, [r7, #24]
    1250:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
    1252:	7803      	ldrb	r3, [r0, #0]
    1254:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
    1256:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
    1258:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
    125a:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    125c:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    125e:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
    1260:	2201      	movs	r2, #1
    1262:	4399      	bics	r1, r3
    1264:	2308      	movs	r3, #8
    1266:	7880      	ldrb	r0, [r0, #2]
    1268:	4016      	ands	r6, r2
    126a:	4010      	ands	r0, r2
    126c:	0080      	lsls	r0, r0, #2
    126e:	4308      	orrs	r0, r1
    1270:	4398      	bics	r0, r3
    1272:	00f6      	lsls	r6, r6, #3
    1274:	4306      	orrs	r6, r0
    1276:	4015      	ands	r5, r2
    1278:	01a8      	lsls	r0, r5, #6
    127a:	0035      	movs	r5, r6
    127c:	3338      	adds	r3, #56	; 0x38
    127e:	439d      	bics	r5, r3
    1280:	4305      	orrs	r5, r0
    1282:	4014      	ands	r4, r2
    1284:	01e3      	lsls	r3, r4, #7
    1286:	2080      	movs	r0, #128	; 0x80
    1288:	002c      	movs	r4, r5
    128a:	4384      	bics	r4, r0
    128c:	431c      	orrs	r4, r3
    128e:	2307      	movs	r3, #7
    1290:	9901      	ldr	r1, [sp, #4]
    1292:	400b      	ands	r3, r1
    1294:	4906      	ldr	r1, [pc, #24]	; (12b0 <system_clock_source_osc32k_set_config+0x68>)
    1296:	021b      	lsls	r3, r3, #8
    1298:	4021      	ands	r1, r4
    129a:	4319      	orrs	r1, r3
    129c:	9b00      	ldr	r3, [sp, #0]
    129e:	401a      	ands	r2, r3
    12a0:	0313      	lsls	r3, r2, #12
    12a2:	4a04      	ldr	r2, [pc, #16]	; (12b4 <system_clock_source_osc32k_set_config+0x6c>)
    12a4:	400a      	ands	r2, r1
    12a6:	431a      	orrs	r2, r3
    12a8:	61ba      	str	r2, [r7, #24]
}
    12aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    12ac:	40000800 	.word	0x40000800
    12b0:	fffff8ff 	.word	0xfffff8ff
    12b4:	ffffefff 	.word	0xffffefff

000012b8 <system_clock_source_dfll_set_config>:
{
    12b8:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12ba:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    12bc:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12be:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    12c0:	059b      	lsls	r3, r3, #22
    12c2:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12c4:	0c12      	lsrs	r2, r2, #16
    12c6:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    12c8:	4b17      	ldr	r3, [pc, #92]	; (1328 <system_clock_source_dfll_set_config+0x70>)
    12ca:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
    12cc:	79c1      	ldrb	r1, [r0, #7]
    12ce:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
    12d0:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    12d2:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
    12d4:	8841      	ldrh	r1, [r0, #2]
    12d6:	4321      	orrs	r1, r4
    12d8:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    12da:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    12dc:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    12de:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    12e0:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
    12e2:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    12e4:	2c04      	cmp	r4, #4
    12e6:	d10d      	bne.n	1304 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12e8:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12ea:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12ec:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12ee:	430a      	orrs	r2, r1
    12f0:	89c1      	ldrh	r1, [r0, #14]
    12f2:	480e      	ldr	r0, [pc, #56]	; (132c <system_clock_source_dfll_set_config+0x74>)
    12f4:	0409      	lsls	r1, r1, #16
    12f6:	4001      	ands	r1, r0
    12f8:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    12fa:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    12fc:	681a      	ldr	r2, [r3, #0]
    12fe:	4314      	orrs	r4, r2
    1300:	601c      	str	r4, [r3, #0]
}
    1302:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1304:	2c20      	cmp	r4, #32
    1306:	d1fc      	bne.n	1302 <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1308:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    130a:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    130c:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    130e:	430a      	orrs	r2, r1
    1310:	89c1      	ldrh	r1, [r0, #14]
    1312:	4806      	ldr	r0, [pc, #24]	; (132c <system_clock_source_dfll_set_config+0x74>)
    1314:	0409      	lsls	r1, r1, #16
    1316:	4001      	ands	r1, r0
    1318:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    131a:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    131c:	6819      	ldr	r1, [r3, #0]
    131e:	4a04      	ldr	r2, [pc, #16]	; (1330 <system_clock_source_dfll_set_config+0x78>)
    1320:	430a      	orrs	r2, r1
    1322:	601a      	str	r2, [r3, #0]
}
    1324:	e7ed      	b.n	1302 <system_clock_source_dfll_set_config+0x4a>
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	20000080 	.word	0x20000080
    132c:	03ff0000 	.word	0x03ff0000
    1330:	00000424 	.word	0x00000424

00001334 <system_clock_source_enable>:
{
    1334:	b510      	push	{r4, lr}
	switch (clock_source) {
    1336:	2808      	cmp	r0, #8
    1338:	d806      	bhi.n	1348 <system_clock_source_enable+0x14>
    133a:	f000 ff8f 	bl	225c <__gnu_thumb1_case_uqi>
    133e:	0514      	.short	0x0514
    1340:	1a0e0c05 	.word	0x1a0e0c05
    1344:	2007      	.short	0x2007
    1346:	23          	.byte	0x23
    1347:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
    1348:	2017      	movs	r0, #23
}
    134a:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    134c:	2302      	movs	r3, #2
    134e:	4a10      	ldr	r2, [pc, #64]	; (1390 <system_clock_source_enable+0x5c>)
    1350:	6a11      	ldr	r1, [r2, #32]
    1352:	430b      	orrs	r3, r1
    1354:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1356:	2000      	movs	r0, #0
    1358:	e7f7      	b.n	134a <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    135a:	2302      	movs	r3, #2
    135c:	4a0c      	ldr	r2, [pc, #48]	; (1390 <system_clock_source_enable+0x5c>)
    135e:	6991      	ldr	r1, [r2, #24]
    1360:	430b      	orrs	r3, r1
    1362:	6193      	str	r3, [r2, #24]
    1364:	e7f7      	b.n	1356 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1366:	2302      	movs	r3, #2
    1368:	4a09      	ldr	r2, [pc, #36]	; (1390 <system_clock_source_enable+0x5c>)
    136a:	8a11      	ldrh	r1, [r2, #16]
    136c:	430b      	orrs	r3, r1
    136e:	8213      	strh	r3, [r2, #16]
    1370:	e7f1      	b.n	1356 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1372:	2302      	movs	r3, #2
    1374:	4a06      	ldr	r2, [pc, #24]	; (1390 <system_clock_source_enable+0x5c>)
    1376:	8a91      	ldrh	r1, [r2, #20]
    1378:	430b      	orrs	r3, r1
    137a:	8293      	strh	r3, [r2, #20]
    137c:	e7eb      	b.n	1356 <system_clock_source_enable+0x22>
    137e:	f7ff fee5 	bl	114c <system_clock_source_enable.part.0>
    1382:	e7e2      	b.n	134a <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1384:	2302      	movs	r3, #2
    1386:	4a03      	ldr	r2, [pc, #12]	; (1394 <system_clock_source_enable+0x60>)
    1388:	7811      	ldrb	r1, [r2, #0]
    138a:	430b      	orrs	r3, r1
    138c:	7013      	strb	r3, [r2, #0]
    138e:	e7e2      	b.n	1356 <system_clock_source_enable+0x22>
    1390:	40000800 	.word	0x40000800
    1394:	40000844 	.word	0x40000844

00001398 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1398:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    139a:	221e      	movs	r2, #30
{
    139c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    139e:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13a0:	4e48      	ldr	r6, [pc, #288]	; (14c4 <system_clock_init+0x12c>)
    13a2:	00db      	lsls	r3, r3, #3
    13a4:	4948      	ldr	r1, [pc, #288]	; (14c8 <system_clock_init+0x130>)
    13a6:	60b3      	str	r3, [r6, #8]
    13a8:	684b      	ldr	r3, [r1, #4]
{
    13aa:	b08d      	sub	sp, #52	; 0x34
    13ac:	4393      	bics	r3, r2
    13ae:	3a1c      	subs	r2, #28
    13b0:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    13b2:	ac07      	add	r4, sp, #28
    13b4:	604b      	str	r3, [r1, #4]
    13b6:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13b8:	b2e8      	uxtb	r0, r5
    13ba:	0021      	movs	r1, r4
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13bc:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13be:	f000 f97f 	bl	16c0 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13c2:	2d18      	cmp	r5, #24
    13c4:	d1f8      	bne.n	13b8 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    13c6:	4f41      	ldr	r7, [pc, #260]	; (14cc <system_clock_init+0x134>)
	SYSCTRL->OSC32K.bit.CALIB =
    13c8:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    13ca:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
    13cc:	4940      	ldr	r1, [pc, #256]	; (14d0 <system_clock_init+0x138>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    13ce:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    13d0:	0e5b      	lsrs	r3, r3, #25
    13d2:	400a      	ands	r2, r1
    13d4:	041b      	lsls	r3, r3, #16
    13d6:	4313      	orrs	r3, r2
    13d8:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
    13da:	2301      	movs	r3, #1
	config->run_in_standby      = false;
    13dc:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
    13de:	a802      	add	r0, sp, #8
    13e0:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    13e2:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    13e4:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    13e6:	3306      	adds	r3, #6
    13e8:	7003      	strb	r3, [r0, #0]
	config->run_in_standby      = false;
    13ea:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
    13ec:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    13ee:	f7ff ff2b 	bl	1248 <system_clock_source_osc32k_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    13f2:	2004      	movs	r0, #4
    13f4:	f7ff ff9e 	bl	1334 <system_clock_source_enable>
	config->fine_value      = 0xff / 4; /* Midpoint */
    13f8:	233f      	movs	r3, #63	; 0x3f
    13fa:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    13fc:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    13fe:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1400:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1402:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1404:	71e5      	strb	r5, [r4, #7]
    1406:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
    1408:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    140a:	683b      	ldr	r3, [r7, #0]
    140c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    140e:	2b3f      	cmp	r3, #63	; 0x3f
    1410:	d100      	bne.n	1414 <system_clock_init+0x7c>
		coarse = 0x1f;
    1412:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
    1414:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1416:	23b7      	movs	r3, #183	; 0xb7
    1418:	00db      	lsls	r3, r3, #3
    141a:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    141c:	2307      	movs	r3, #7
    141e:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1420:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
    1422:	2500      	movs	r5, #0
	config->on_demand       = true;
    1424:	2701      	movs	r7, #1
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1426:	0020      	movs	r0, r4
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1428:	81e3      	strh	r3, [r4, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
    142a:	f7ff ff45 	bl	12b8 <system_clock_source_dfll_set_config>
	config->run_in_standby  = false;
    142e:	a801      	add	r0, sp, #4
    1430:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1432:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1434:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1436:	f7ff fee9 	bl	120c <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    143a:	2006      	movs	r0, #6
    143c:	f7ff ff7a 	bl	1334 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1440:	f000 f850 	bl	14e4 <system_gclk_init>

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1444:	2304      	movs	r3, #4
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1446:	ac04      	add	r4, sp, #16
    1448:	0021      	movs	r1, r4
    144a:	0038      	movs	r0, r7
    144c:	7023      	strb	r3, [r4, #0]
    144e:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    1450:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1452:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1454:	7265      	strb	r5, [r4, #9]
    1456:	f000 f855 	bl	1504 <system_gclk_gen_set_config>
    145a:	0038      	movs	r0, r7
    145c:	f000 f8a0 	bl	15a0 <system_gclk_gen_enable>
    1460:	2307      	movs	r3, #7
    1462:	0021      	movs	r1, r4
    1464:	2003      	movs	r0, #3
    1466:	7023      	strb	r3, [r4, #0]
	config->division_factor    = 1;
    1468:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    146a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    146c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    146e:	7265      	strb	r5, [r4, #9]
    1470:	f000 f848 	bl	1504 <system_gclk_gen_set_config>
    1474:	2003      	movs	r0, #3
    1476:	f000 f893 	bl	15a0 <system_gclk_gen_enable>
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    147a:	0021      	movs	r1, r4
    147c:	0028      	movs	r0, r5
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    147e:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1480:	f000 f91e 	bl	16c0 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1484:	0028      	movs	r0, r5
    1486:	f000 f8df 	bl	1648 <system_gclk_chan_enable>
    148a:	f7ff fe5f 	bl	114c <system_clock_source_enable.part.0>
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    148e:	22d0      	movs	r2, #208	; 0xd0
    1490:	68f3      	ldr	r3, [r6, #12]
    1492:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1494:	2bd0      	cmp	r3, #208	; 0xd0
    1496:	d1fb      	bne.n	1490 <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
    1498:	2500      	movs	r5, #0
    149a:	4b0e      	ldr	r3, [pc, #56]	; (14d4 <system_clock_init+0x13c>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    149c:	0021      	movs	r1, r4
    149e:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    14a0:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    14a2:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    14a4:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    14a6:	2301      	movs	r3, #1
    14a8:	0028      	movs	r0, r5
    14aa:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    14ac:	3305      	adds	r3, #5
    14ae:	7023      	strb	r3, [r4, #0]
	config->high_when_disabled = false;
    14b0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    14b2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    14b4:	7265      	strb	r5, [r4, #9]
    14b6:	f000 f825 	bl	1504 <system_gclk_gen_set_config>
    14ba:	0028      	movs	r0, r5
    14bc:	f000 f870 	bl	15a0 <system_gclk_gen_enable>
#endif
}
    14c0:	b00d      	add	sp, #52	; 0x34
    14c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c4:	40000800 	.word	0x40000800
    14c8:	41004000 	.word	0x41004000
    14cc:	00806024 	.word	0x00806024
    14d0:	ff80ffff 	.word	0xff80ffff
    14d4:	40000400 	.word	0x40000400

000014d8 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14d8:	4b01      	ldr	r3, [pc, #4]	; (14e0 <system_gclk_is_syncing+0x8>)
    14da:	7858      	ldrb	r0, [r3, #1]
    14dc:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    14de:	4770      	bx	lr
    14e0:	40000c00 	.word	0x40000c00

000014e4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    14e4:	2308      	movs	r3, #8
    14e6:	4a05      	ldr	r2, [pc, #20]	; (14fc <system_gclk_init+0x18>)
    14e8:	6991      	ldr	r1, [r2, #24]
    14ea:	430b      	orrs	r3, r1
    14ec:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    14ee:	2301      	movs	r3, #1
    14f0:	4a03      	ldr	r2, [pc, #12]	; (1500 <system_gclk_init+0x1c>)
    14f2:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    14f4:	7811      	ldrb	r1, [r2, #0]
    14f6:	4219      	tst	r1, r3
    14f8:	d1fc      	bne.n	14f4 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    14fa:	4770      	bx	lr
    14fc:	40000400 	.word	0x40000400
    1500:	40000c00 	.word	0x40000c00

00001504 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1504:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1506:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1508:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    150a:	0224      	lsls	r4, r4, #8
{
    150c:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    150e:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1510:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    1512:	2b00      	cmp	r3, #0
    1514:	d002      	beq.n	151c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1516:	2380      	movs	r3, #128	; 0x80
    1518:	02db      	lsls	r3, r3, #11
    151a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    151c:	7a4b      	ldrb	r3, [r1, #9]
    151e:	2b00      	cmp	r3, #0
    1520:	d002      	beq.n	1528 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1522:	2380      	movs	r3, #128	; 0x80
    1524:	031b      	lsls	r3, r3, #12
    1526:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1528:	684b      	ldr	r3, [r1, #4]
    152a:	2b01      	cmp	r3, #1
    152c:	d912      	bls.n	1554 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    152e:	1e5d      	subs	r5, r3, #1
    1530:	401d      	ands	r5, r3
    1532:	2202      	movs	r2, #2
    1534:	2d00      	cmp	r5, #0
    1536:	d006      	beq.n	1546 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1538:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    153a:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    153c:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    153e:	029b      	lsls	r3, r3, #10
    1540:	e007      	b.n	1552 <system_gclk_gen_set_config+0x4e>
				div2_count++;
    1542:	3501      	adds	r5, #1
						mask <<= 1) {
    1544:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1546:	429a      	cmp	r2, r3
    1548:	d3fb      	bcc.n	1542 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    154a:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    154c:	022d      	lsls	r5, r5, #8
    154e:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1550:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1552:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1554:	7a0b      	ldrb	r3, [r1, #8]
    1556:	2b00      	cmp	r3, #0
    1558:	d002      	beq.n	1560 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    155a:	2380      	movs	r3, #128	; 0x80
    155c:	039b      	lsls	r3, r3, #14
    155e:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    1560:	f7ff ffba 	bl	14d8 <system_gclk_is_syncing>
    1564:	2800      	cmp	r0, #0
    1566:	d1fb      	bne.n	1560 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1568:	f7ff f9a6 	bl	8b8 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    156c:	4b0a      	ldr	r3, [pc, #40]	; (1598 <system_gclk_gen_set_config+0x94>)
    156e:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1570:	f7ff ffb2 	bl	14d8 <system_gclk_is_syncing>
    1574:	2800      	cmp	r0, #0
    1576:	d1fb      	bne.n	1570 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1578:	4b08      	ldr	r3, [pc, #32]	; (159c <system_gclk_gen_set_config+0x98>)
    157a:	609d      	str	r5, [r3, #8]
    157c:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    157e:	f7ff ffab 	bl	14d8 <system_gclk_is_syncing>
    1582:	2800      	cmp	r0, #0
    1584:	d1fb      	bne.n	157e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1586:	2280      	movs	r2, #128	; 0x80
    1588:	686b      	ldr	r3, [r5, #4]
    158a:	0252      	lsls	r2, r2, #9
    158c:	4013      	ands	r3, r2
    158e:	431c      	orrs	r4, r3
    1590:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    1592:	f7ff f9ab 	bl	8ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1596:	bd70      	pop	{r4, r5, r6, pc}
    1598:	40000c08 	.word	0x40000c08
    159c:	40000c00 	.word	0x40000c00

000015a0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    15a0:	b510      	push	{r4, lr}
    15a2:	0004      	movs	r4, r0
	while (system_gclk_is_syncing()) {
    15a4:	f7ff ff98 	bl	14d8 <system_gclk_is_syncing>
    15a8:	2800      	cmp	r0, #0
    15aa:	d1fb      	bne.n	15a4 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    15ac:	f7ff f984 	bl	8b8 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15b0:	4b07      	ldr	r3, [pc, #28]	; (15d0 <system_gclk_gen_enable+0x30>)
    15b2:	701c      	strb	r4, [r3, #0]
	while (system_gclk_is_syncing()) {
    15b4:	f7ff ff90 	bl	14d8 <system_gclk_is_syncing>
    15b8:	2800      	cmp	r0, #0
    15ba:	d1fb      	bne.n	15b4 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    15bc:	2380      	movs	r3, #128	; 0x80
    15be:	4a05      	ldr	r2, [pc, #20]	; (15d4 <system_gclk_gen_enable+0x34>)
    15c0:	025b      	lsls	r3, r3, #9
    15c2:	6851      	ldr	r1, [r2, #4]
    15c4:	430b      	orrs	r3, r1
    15c6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    15c8:	f7ff f990 	bl	8ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    15cc:	bd10      	pop	{r4, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	40000c04 	.word	0x40000c04
    15d4:	40000c00 	.word	0x40000c00

000015d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    15d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15da:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    15dc:	f7ff ff7c 	bl	14d8 <system_gclk_is_syncing>
    15e0:	2800      	cmp	r0, #0
    15e2:	d1fb      	bne.n	15dc <system_gclk_gen_get_hz+0x4>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15e4:	4e15      	ldr	r6, [pc, #84]	; (163c <system_gclk_gen_get_hz+0x64>)
	cpu_irq_enter_critical();
    15e6:	f7ff f967 	bl	8b8 <cpu_irq_enter_critical>
    15ea:	7037      	strb	r7, [r6, #0]
	while (system_gclk_is_syncing()) {
    15ec:	f7ff ff74 	bl	14d8 <system_gclk_is_syncing>
    15f0:	2800      	cmp	r0, #0
    15f2:	d1fb      	bne.n	15ec <system_gclk_gen_get_hz+0x14>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    15f4:	4c12      	ldr	r4, [pc, #72]	; (1640 <system_gclk_gen_get_hz+0x68>)
    15f6:	6860      	ldr	r0, [r4, #4]
    15f8:	04c0      	lsls	r0, r0, #19
    15fa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    15fc:	f7ff fdc2 	bl	1184 <system_clock_source_get_hz>
    1600:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1602:	7037      	strb	r7, [r6, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1604:	6866      	ldr	r6, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1606:	4b0f      	ldr	r3, [pc, #60]	; (1644 <system_gclk_gen_get_hz+0x6c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1608:	02f6      	lsls	r6, r6, #11
    160a:	0ff6      	lsrs	r6, r6, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    160c:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    160e:	f7ff ff63 	bl	14d8 <system_gclk_is_syncing>
    1612:	2800      	cmp	r0, #0
    1614:	d1fb      	bne.n	160e <system_gclk_gen_get_hz+0x36>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1616:	68a4      	ldr	r4, [r4, #8]
    1618:	0224      	lsls	r4, r4, #8
    161a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    161c:	f7ff f966 	bl	8ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1620:	2e00      	cmp	r6, #0
    1622:	d108      	bne.n	1636 <system_gclk_gen_get_hz+0x5e>
    1624:	2c01      	cmp	r4, #1
    1626:	d904      	bls.n	1632 <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
    1628:	0028      	movs	r0, r5
    162a:	0021      	movs	r1, r4
    162c:	f000 fe20 	bl	2270 <__udivsi3>
    1630:	0005      	movs	r5, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    1632:	0028      	movs	r0, r5
    1634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    1636:	3401      	adds	r4, #1
    1638:	40e5      	lsrs	r5, r4
	return gen_input_hz;
    163a:	e7fa      	b.n	1632 <system_gclk_gen_get_hz+0x5a>
    163c:	40000c04 	.word	0x40000c04
    1640:	40000c00 	.word	0x40000c00
    1644:	40000c08 	.word	0x40000c08

00001648 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1648:	b510      	push	{r4, lr}
    164a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    164c:	f7ff f934 	bl	8b8 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1650:	4b05      	ldr	r3, [pc, #20]	; (1668 <system_gclk_chan_enable+0x20>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1652:	4a06      	ldr	r2, [pc, #24]	; (166c <system_gclk_chan_enable+0x24>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1654:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1656:	2380      	movs	r3, #128	; 0x80
    1658:	8851      	ldrh	r1, [r2, #2]
    165a:	01db      	lsls	r3, r3, #7
    165c:	430b      	orrs	r3, r1
    165e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1660:	f7ff f944 	bl	8ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1664:	bd10      	pop	{r4, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	40000c02 	.word	0x40000c02
    166c:	40000c00 	.word	0x40000c00

00001670 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1670:	b510      	push	{r4, lr}
    1672:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1674:	f7ff f920 	bl	8b8 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1678:	4b0d      	ldr	r3, [pc, #52]	; (16b0 <system_gclk_chan_disable+0x40>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    167a:	4a0e      	ldr	r2, [pc, #56]	; (16b4 <system_gclk_chan_disable+0x44>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    167c:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    167e:	4b0e      	ldr	r3, [pc, #56]	; (16b8 <system_gclk_chan_disable+0x48>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1680:	4c0e      	ldr	r4, [pc, #56]	; (16bc <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1682:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1684:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1686:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1688:	4011      	ands	r1, r2
    168a:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    168c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    168e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1690:	4021      	ands	r1, r4
    1692:	8059      	strh	r1, [r3, #2]
    1694:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1696:	2280      	movs	r2, #128	; 0x80
    1698:	01d2      	lsls	r2, r2, #7
    169a:	885c      	ldrh	r4, [r3, #2]
    169c:	4214      	tst	r4, r2
    169e:	d1fc      	bne.n	169a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    16a0:	885a      	ldrh	r2, [r3, #2]
    16a2:	0200      	lsls	r0, r0, #8
    16a4:	400a      	ands	r2, r1
    16a6:	4302      	orrs	r2, r0
    16a8:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    16aa:	f7ff f91f 	bl	8ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    16ae:	bd10      	pop	{r4, pc}
    16b0:	40000c02 	.word	0x40000c02
    16b4:	fffff0ff 	.word	0xfffff0ff
    16b8:	40000c00 	.word	0x40000c00
    16bc:	ffffbfff 	.word	0xffffbfff

000016c0 <system_gclk_chan_set_config>:
{
    16c0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    16c2:	780c      	ldrb	r4, [r1, #0]
    16c4:	0224      	lsls	r4, r4, #8
    16c6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    16c8:	f7ff ffd2 	bl	1670 <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    16cc:	4b01      	ldr	r3, [pc, #4]	; (16d4 <system_gclk_chan_set_config+0x14>)
    16ce:	b2a4      	uxth	r4, r4
    16d0:	805c      	strh	r4, [r3, #2]
}
    16d2:	bd10      	pop	{r4, pc}
    16d4:	40000c00 	.word	0x40000c00

000016d8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16d8:	b510      	push	{r4, lr}
    16da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16dc:	f7ff f8ec 	bl	8b8 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16e0:	4b05      	ldr	r3, [pc, #20]	; (16f8 <system_gclk_chan_get_hz+0x20>)
    16e2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    16e4:	4b05      	ldr	r3, [pc, #20]	; (16fc <system_gclk_chan_get_hz+0x24>)
    16e6:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    16e8:	f7ff f900 	bl	8ec <cpu_irq_leave_critical>
    16ec:	0524      	lsls	r4, r4, #20
    16ee:	0f24      	lsrs	r4, r4, #28

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    16f0:	0020      	movs	r0, r4
    16f2:	f7ff ff71 	bl	15d8 <system_gclk_gen_get_hz>
}
    16f6:	bd10      	pop	{r4, pc}
    16f8:	40000c02 	.word	0x40000c02
    16fc:	40000c00 	.word	0x40000c00

00001700 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1700:	78d3      	ldrb	r3, [r2, #3]
{
    1702:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1704:	2b00      	cmp	r3, #0
    1706:	d135      	bne.n	1774 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1708:	7814      	ldrb	r4, [r2, #0]
    170a:	2c80      	cmp	r4, #128	; 0x80
    170c:	d003      	beq.n	1716 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    170e:	2380      	movs	r3, #128	; 0x80
    1710:	0624      	lsls	r4, r4, #24
    1712:	025b      	lsls	r3, r3, #9
    1714:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1716:	2502      	movs	r5, #2
    1718:	7854      	ldrb	r4, [r2, #1]
    171a:	43ac      	bics	r4, r5
    171c:	d106      	bne.n	172c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    171e:	7894      	ldrb	r4, [r2, #2]
    1720:	2c00      	cmp	r4, #0
    1722:	d124      	bne.n	176e <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1724:	2480      	movs	r4, #128	; 0x80
    1726:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1728:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    172a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    172c:	7854      	ldrb	r4, [r2, #1]
    172e:	3c01      	subs	r4, #1
    1730:	2c01      	cmp	r4, #1
    1732:	d801      	bhi.n	1738 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1734:	4c12      	ldr	r4, [pc, #72]	; (1780 <_system_pinmux_config+0x80>)
    1736:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1738:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    173a:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    173c:	05e4      	lsls	r4, r4, #23
    173e:	432c      	orrs	r4, r5
    1740:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1742:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1744:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1746:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1748:	0624      	lsls	r4, r4, #24
    174a:	432c      	orrs	r4, r5
    174c:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    174e:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1750:	78d4      	ldrb	r4, [r2, #3]
    1752:	2c00      	cmp	r4, #0
    1754:	d10a      	bne.n	176c <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1756:	035b      	lsls	r3, r3, #13
    1758:	d503      	bpl.n	1762 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    175a:	7893      	ldrb	r3, [r2, #2]
    175c:	2b01      	cmp	r3, #1
    175e:	d10c      	bne.n	177a <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1760:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1762:	7853      	ldrb	r3, [r2, #1]
    1764:	3b01      	subs	r3, #1
    1766:	2b01      	cmp	r3, #1
    1768:	d800      	bhi.n	176c <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    176a:	6081      	str	r1, [r0, #8]
		}
	}
}
    176c:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    176e:	24c0      	movs	r4, #192	; 0xc0
    1770:	02e4      	lsls	r4, r4, #11
    1772:	e7d9      	b.n	1728 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1774:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1776:	2300      	movs	r3, #0
    1778:	e7de      	b.n	1738 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    177a:	6141      	str	r1, [r0, #20]
    177c:	e7f1      	b.n	1762 <_system_pinmux_config+0x62>
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	fffbffff 	.word	0xfffbffff

00001784 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1784:	b510      	push	{r4, lr}
    1786:	0003      	movs	r3, r0
    1788:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    178a:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    178c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    178e:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1790:	4281      	cmp	r1, r0
    1792:	d102      	bne.n	179a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1794:	4904      	ldr	r1, [pc, #16]	; (17a8 <system_pinmux_pin_set_config+0x24>)
    1796:	01e0      	lsls	r0, r4, #7
    1798:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    179a:	211f      	movs	r1, #31
    179c:	400b      	ands	r3, r1
    179e:	391e      	subs	r1, #30
    17a0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    17a2:	f7ff ffad 	bl	1700 <_system_pinmux_config>
}
    17a6:	bd10      	pop	{r4, pc}
    17a8:	41004400 	.word	0x41004400

000017ac <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    17ac:	4770      	bx	lr

000017ae <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    17ae:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    17b0:	f7ff fdf2 	bl	1398 <system_clock_init>
	/* Initialize board hardware */
	system_board_init();
    17b4:	f7ff f8b2 	bl	91c <system_board_init>
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    17b8:	f7ff fff8 	bl	17ac <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    17bc:	f7ff fff6 	bl	17ac <_system_dummy_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    17c0:	f7ff fff4 	bl	17ac <_system_dummy_init>
}
    17c4:	bd10      	pop	{r4, pc}

000017c6 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    17c6:	2000      	movs	r0, #0
    17c8:	4770      	bx	lr
	...

000017cc <_tcc_set_compare_value.isra.5>:
 *
 * \retval  STATUS_OK               The compare value was updated successfully
 * \retval  STATUS_ERR_INVALID_ARG  An invalid channel index was supplied or
 *                                  compare value exceed resolution
 */
static enum status_code _tcc_set_compare_value(
    17cc:	b530      	push	{r4, r5, lr}
    17ce:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    17d0:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    17d2:	2903      	cmp	r1, #3
    17d4:	d813      	bhi.n	17fe <_tcc_set_compare_value.isra.5+0x32>
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
    17d6:	4d10      	ldr	r5, [pc, #64]	; (1818 <_tcc_set_compare_value.isra.5+0x4c>)
    17d8:	42aa      	cmp	r2, r5
    17da:	d810      	bhi.n	17fe <_tcc_set_compare_value.isra.5+0x32>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
    17dc:	2b00      	cmp	r3, #0
    17de:	d00f      	beq.n	1800 <_tcc_set_compare_value.isra.5+0x34>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
				(TCC_STATUS_CCBV0 << channel_index)) {
    17e0:	2380      	movs	r3, #128	; 0x80
    17e2:	025b      	lsls	r3, r3, #9
    17e4:	408b      	lsls	r3, r1
		while(tcc_module->STATUS.reg  &
    17e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    17e8:	4203      	tst	r3, r0
    17ea:	d1fc      	bne.n	17e6 <_tcc_set_compare_value.isra.5+0x1a>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    17ec:	2580      	movs	r5, #128	; 0x80
    17ee:	032d      	lsls	r5, r5, #12
    17f0:	408d      	lsls	r5, r1
		while(tcc_module->SYNCBUSY.reg  &
    17f2:	68a0      	ldr	r0, [r4, #8]
    17f4:	4028      	ands	r0, r5
    17f6:	d1fc      	bne.n	17f2 <_tcc_set_compare_value.isra.5+0x26>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    17f8:	311c      	adds	r1, #28
    17fa:	0089      	lsls	r1, r1, #2
    17fc:	510a      	str	r2, [r1, r4]
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    17fe:	bd30      	pop	{r4, r5, pc}
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1800:	2080      	movs	r0, #128	; 0x80
    1802:	0040      	lsls	r0, r0, #1
    1804:	4088      	lsls	r0, r1
    1806:	68a3      	ldr	r3, [r4, #8]
    1808:	4003      	ands	r3, r0
    180a:	d1fc      	bne.n	1806 <_tcc_set_compare_value.isra.5+0x3a>
		tcc_module->CC[channel_index].reg = compare;
    180c:	3110      	adds	r1, #16
    180e:	0089      	lsls	r1, r1, #2
    1810:	1861      	adds	r1, r4, r1
    1812:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    1814:	0018      	movs	r0, r3
    1816:	e7f2      	b.n	17fe <_tcc_set_compare_value.isra.5+0x32>
    1818:	00ffffff 	.word	0x00ffffff

0000181c <tcc_get_config_defaults>:
	config->counter.period                 = _tcc_maxs[module_index];
    181c:	4a37      	ldr	r2, [pc, #220]	; (18fc <tcc_get_config_defaults+0xe0>)
{
    181e:	b510      	push	{r4, lr}
	config->counter.period                 = _tcc_maxs[module_index];
    1820:	6042      	str	r2, [r0, #4]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1822:	0002      	movs	r2, r0
	config->counter.count                  = 0;
    1824:	2300      	movs	r3, #0
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1826:	0004      	movs	r4, r0
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1828:	322c      	adds	r2, #44	; 0x2c
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    182a:	3448      	adds	r4, #72	; 0x48
	config->counter.count                  = 0;
    182c:	6003      	str	r3, [r0, #0]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    182e:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1830:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1832:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1834:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    1836:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    1838:	61c3      	str	r3, [r0, #28]
    183a:	6203      	str	r3, [r0, #32]
    183c:	6243      	str	r3, [r0, #36]	; 0x24
    183e:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1840:	7503      	strb	r3, [r0, #20]
    1842:	7543      	strb	r3, [r0, #21]
    1844:	7583      	strb	r3, [r0, #22]
    1846:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1848:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    184a:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    184c:	7403      	strb	r3, [r0, #16]
    184e:	7443      	strb	r3, [r0, #17]
    1850:	7483      	strb	r3, [r0, #18]
    1852:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1854:	7013      	strb	r3, [r2, #0]
    1856:	7053      	strb	r3, [r2, #1]
    1858:	7093      	strb	r3, [r2, #2]
    185a:	70d3      	strb	r3, [r2, #3]
    185c:	7113      	strb	r3, [r2, #4]
    185e:	7153      	strb	r3, [r2, #5]
    1860:	7193      	strb	r3, [r2, #6]
    1862:	71d3      	strb	r3, [r2, #7]
    1864:	7213      	strb	r3, [r2, #8]
    1866:	7253      	strb	r3, [r2, #9]
    1868:	7293      	strb	r3, [r2, #10]
    186a:	72d3      	strb	r3, [r2, #11]
    186c:	320c      	adds	r2, #12
    186e:	7013      	strb	r3, [r2, #0]
    1870:	7053      	strb	r3, [r2, #1]
    1872:	7093      	strb	r3, [r2, #2]
    1874:	70d3      	strb	r3, [r2, #3]
    1876:	7113      	strb	r3, [r2, #4]
    1878:	7153      	strb	r3, [r2, #5]
    187a:	7193      	strb	r3, [r2, #6]
    187c:	71d3      	strb	r3, [r2, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    187e:	7213      	strb	r3, [r2, #8]
    1880:	7253      	strb	r3, [r2, #9]
    1882:	7293      	strb	r3, [r2, #10]
    1884:	72d3      	strb	r3, [r2, #11]
    1886:	7313      	strb	r3, [r2, #12]
    1888:	7353      	strb	r3, [r2, #13]
    188a:	7393      	strb	r3, [r2, #14]
    188c:	73d3      	strb	r3, [r2, #15]
    188e:	1d01      	adds	r1, r0, #4
    1890:	7023      	strb	r3, [r4, #0]
    1892:	7063      	strb	r3, [r4, #1]
    1894:	70a3      	strb	r3, [r4, #2]
    1896:	70e3      	strb	r3, [r4, #3]
    1898:	7123      	strb	r3, [r4, #4]
    189a:	7163      	strb	r3, [r4, #5]
    189c:	71a3      	strb	r3, [r4, #6]
    189e:	71e3      	strb	r3, [r4, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    18a0:	7223      	strb	r3, [r4, #8]
    18a2:	7263      	strb	r3, [r4, #9]
    18a4:	72a3      	strb	r3, [r4, #10]
    18a6:	72e3      	strb	r3, [r4, #11]
    18a8:	7323      	strb	r3, [r4, #12]
    18aa:	7363      	strb	r3, [r4, #13]
    18ac:	73a3      	strb	r3, [r4, #14]
    18ae:	73e3      	strb	r3, [r4, #15]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    18b0:	3450      	adds	r4, #80	; 0x50
    18b2:	7023      	strb	r3, [r4, #0]
    18b4:	6583      	str	r3, [r0, #88]	; 0x58
    18b6:	6783      	str	r3, [r0, #120]	; 0x78
    18b8:	7063      	strb	r3, [r4, #1]
    18ba:	65c3      	str	r3, [r0, #92]	; 0x5c
    18bc:	67c3      	str	r3, [r0, #124]	; 0x7c
    18be:	70a3      	strb	r3, [r4, #2]
    18c0:	6603      	str	r3, [r0, #96]	; 0x60
    18c2:	67cb      	str	r3, [r1, #124]	; 0x7c
    18c4:	3197      	adds	r1, #151	; 0x97
    18c6:	700b      	strb	r3, [r1, #0]
	config->double_buffering_enabled  = true;
    18c8:	2101      	movs	r1, #1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    18ca:	3a30      	subs	r2, #48	; 0x30
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    18cc:	6643      	str	r3, [r0, #100]	; 0x64
    18ce:	67d3      	str	r3, [r2, #124]	; 0x7c
    18d0:	3294      	adds	r2, #148	; 0x94
    18d2:	7013      	strb	r3, [r2, #0]
    18d4:	3a14      	subs	r2, #20
    18d6:	6683      	str	r3, [r0, #104]	; 0x68
    18d8:	6013      	str	r3, [r2, #0]
    18da:	7553      	strb	r3, [r2, #21]
    18dc:	3204      	adds	r2, #4
    18de:	66c3      	str	r3, [r0, #108]	; 0x6c
    18e0:	6013      	str	r3, [r2, #0]
    18e2:	7493      	strb	r3, [r2, #18]
    18e4:	3204      	adds	r2, #4
    18e6:	6703      	str	r3, [r0, #112]	; 0x70
    18e8:	6013      	str	r3, [r2, #0]
    18ea:	73d3      	strb	r3, [r2, #15]
    18ec:	6743      	str	r3, [r0, #116]	; 0x74
    18ee:	3204      	adds	r2, #4
	config->run_in_standby            = false;
    18f0:	30a1      	adds	r0, #161	; 0xa1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    18f2:	6013      	str	r3, [r2, #0]
	config->double_buffering_enabled  = true;
    18f4:	7311      	strb	r1, [r2, #12]
	config->run_in_standby            = false;
    18f6:	7003      	strb	r3, [r0, #0]
}
    18f8:	bd10      	pop	{r4, pc}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	00ffffff 	.word	0x00ffffff

00001900 <tcc_init>:
{
    1900:	b5f0      	push	{r4, r5, r6, r7, lr}
    1902:	0006      	movs	r6, r0
    1904:	b08f      	sub	sp, #60	; 0x3c
	uint8_t module_index = _tcc_get_inst_index(hw);
    1906:	0008      	movs	r0, r1
{
    1908:	000d      	movs	r5, r1
    190a:	0014      	movs	r4, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    190c:	f7ff ff5b 	bl	17c6 <_tcc_get_inst_index>
			PM->APBCMASK.reg |= mask;
    1910:	2320      	movs	r3, #32
    1912:	4aa3      	ldr	r2, [pc, #652]	; (1ba0 <tcc_init+0x2a0>)
    1914:	9009      	str	r0, [sp, #36]	; 0x24
    1916:	6a11      	ldr	r1, [r2, #32]
		return STATUS_ERR_DENIED;
    1918:	201c      	movs	r0, #28
    191a:	430b      	orrs	r3, r1
    191c:	6213      	str	r3, [r2, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    191e:	682b      	ldr	r3, [r5, #0]
    1920:	079b      	lsls	r3, r3, #30
    1922:	d407      	bmi.n	1934 <tcc_init+0x34>
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1924:	682b      	ldr	r3, [r5, #0]
    1926:	07db      	lsls	r3, r3, #31
    1928:	d404      	bmi.n	1934 <tcc_init+0x34>
    192a:	4a9e      	ldr	r2, [pc, #632]	; (1ba4 <tcc_init+0x2a4>)
	if ((config->counter.count > count_max)
    192c:	6823      	ldr	r3, [r4, #0]
    192e:	4293      	cmp	r3, r2
    1930:	d902      	bls.n	1938 <tcc_init+0x38>
		return STATUS_ERR_INVALID_ARG;
    1932:	2017      	movs	r0, #23
}
    1934:	b00f      	add	sp, #60	; 0x3c
    1936:	bdf0      	pop	{r4, r5, r6, r7, pc}
		|| (config->counter.period > count_max)
    1938:	6863      	ldr	r3, [r4, #4]
    193a:	4293      	cmp	r3, r2
    193c:	d8f9      	bhi.n	1932 <tcc_init+0x32>
    193e:	0023      	movs	r3, r4
    1940:	0021      	movs	r1, r4
    1942:	331c      	adds	r3, #28
    1944:	312c      	adds	r1, #44	; 0x2c
		if ((config->compare.match[i] > count_max)
    1946:	6818      	ldr	r0, [r3, #0]
    1948:	4290      	cmp	r0, r2
    194a:	d8f2      	bhi.n	1932 <tcc_init+0x32>
    194c:	3304      	adds	r3, #4
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    194e:	428b      	cmp	r3, r1
    1950:	d1f9      	bne.n	1946 <tcc_init+0x46>
    1952:	2200      	movs	r2, #0
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1954:	2180      	movs	r1, #128	; 0x80
    1956:	9202      	str	r2, [sp, #8]
    1958:	0449      	lsls	r1, r1, #17
		if (config->capture.channel_function[i] ==
    195a:	18a0      	adds	r0, r4, r2
    195c:	7c00      	ldrb	r0, [r0, #16]
    195e:	2801      	cmp	r0, #1
    1960:	d104      	bne.n	196c <tcc_init+0x6c>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1962:	0008      	movs	r0, r1
    1964:	4090      	lsls	r0, r2
    1966:	9f02      	ldr	r7, [sp, #8]
    1968:	4307      	orrs	r7, r0
    196a:	9702      	str	r7, [sp, #8]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    196c:	3201      	adds	r2, #1
    196e:	2a04      	cmp	r2, #4
    1970:	d1f3      	bne.n	195a <tcc_init+0x5a>
	if (config->run_in_standby) {
    1972:	0022      	movs	r2, r4
    1974:	32a1      	adds	r2, #161	; 0xa1
    1976:	7812      	ldrb	r2, [r2, #0]
    1978:	2a00      	cmp	r2, #0
    197a:	d004      	beq.n	1986 <tcc_init+0x86>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    197c:	2280      	movs	r2, #128	; 0x80
    197e:	9902      	ldr	r1, [sp, #8]
    1980:	0112      	lsls	r2, r2, #4
    1982:	4311      	orrs	r1, r2
    1984:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    1986:	7a22      	ldrb	r2, [r4, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1988:	1e51      	subs	r1, r2, #1
    198a:	418a      	sbcs	r2, r1
    198c:	0092      	lsls	r2, r2, #2
    198e:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    1990:	7a62      	ldrb	r2, [r4, #9]
    1992:	2a01      	cmp	r2, #1
    1994:	d102      	bne.n	199c <tcc_init+0x9c>
		ctrlb |= TCC_CTRLBSET_DIR;
    1996:	9903      	ldr	r1, [sp, #12]
    1998:	4311      	orrs	r1, r2
    199a:	9103      	str	r1, [sp, #12]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    199c:	7b22      	ldrb	r2, [r4, #12]
    199e:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    19a0:	7ae2      	ldrb	r2, [r4, #11]
    19a2:	9207      	str	r2, [sp, #28]
    19a4:	2200      	movs	r2, #0
    19a6:	4694      	mov	ip, r2
		if (cfg->capture_channel >= cc_num) {
    19a8:	7a5f      	ldrb	r7, [r3, #9]
    19aa:	2f03      	cmp	r7, #3
    19ac:	d8c1      	bhi.n	1932 <tcc_init+0x32>
		if (cfg->filter_value > 0xF) {
    19ae:	7819      	ldrb	r1, [r3, #0]
    19b0:	290f      	cmp	r1, #15
    19b2:	d8be      	bhi.n	1932 <tcc_init+0x32>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    19b4:	20f0      	movs	r0, #240	; 0xf0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    19b6:	785a      	ldrb	r2, [r3, #1]
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    19b8:	0500      	lsls	r0, r0, #20
    19ba:	0609      	lsls	r1, r1, #24
    19bc:	4001      	ands	r1, r0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    19be:	0412      	lsls	r2, r2, #16
    19c0:	430a      	orrs	r2, r1
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    19c2:	7899      	ldrb	r1, [r3, #2]
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    19c4:	9201      	str	r2, [sp, #4]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    19c6:	1e48      	subs	r0, r1, #1
    19c8:	4181      	sbcs	r1, r0
    19ca:	01c9      	lsls	r1, r1, #7
    19cc:	9104      	str	r1, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    19ce:	78d9      	ldrb	r1, [r3, #3]
				| TCC_FCTRLA_SRC(cfg->source)
    19d0:	2203      	movs	r2, #3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    19d2:	1e48      	subs	r0, r1, #1
    19d4:	4181      	sbcs	r1, r0
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    19d6:	7918      	ldrb	r0, [r3, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    19d8:	00c9      	lsls	r1, r1, #3
    19da:	9105      	str	r1, [sp, #20]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    19dc:	1e41      	subs	r1, r0, #1
    19de:	4188      	sbcs	r0, r1
    19e0:	0101      	lsls	r1, r0, #4
				| TCC_FCTRLA_BLANK(cfg->blanking)
    19e2:	2060      	movs	r0, #96	; 0x60
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    19e4:	9108      	str	r1, [sp, #32]
				| TCC_FCTRLA_BLANK(cfg->blanking)
    19e6:	7999      	ldrb	r1, [r3, #6]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    19e8:	02bf      	lsls	r7, r7, #10
				| TCC_FCTRLA_BLANK(cfg->blanking)
    19ea:	0149      	lsls	r1, r1, #5
    19ec:	4001      	ands	r1, r0
				| TCC_FCTRLA_SRC(cfg->source)
    19ee:	7958      	ldrb	r0, [r3, #5]
    19f0:	4010      	ands	r0, r2
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    19f2:	9a01      	ldr	r2, [sp, #4]
    19f4:	4302      	orrs	r2, r0
    19f6:	430a      	orrs	r2, r1
				| TCC_FCTRLA_HALT(cfg->halt_action)
    19f8:	21c0      	movs	r1, #192	; 0xc0
    19fa:	79d8      	ldrb	r0, [r3, #7]
    19fc:	0089      	lsls	r1, r1, #2
    19fe:	0200      	lsls	r0, r0, #8
    1a00:	4001      	ands	r1, r0
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1a02:	20e0      	movs	r0, #224	; 0xe0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1a04:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1a06:	7a1a      	ldrb	r2, [r3, #8]
    1a08:	01c0      	lsls	r0, r0, #7
    1a0a:	0312      	lsls	r2, r2, #12
    1a0c:	4002      	ands	r2, r0
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1a0e:	20c0      	movs	r0, #192	; 0xc0
    1a10:	0100      	lsls	r0, r0, #4
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1a12:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1a14:	4007      	ands	r7, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1a16:	430f      	orrs	r7, r1
		value_buffer[i] = fault;
    1a18:	4661      	mov	r1, ip
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1a1a:	9a04      	ldr	r2, [sp, #16]
    1a1c:	330a      	adds	r3, #10
    1a1e:	4317      	orrs	r7, r2
    1a20:	9a05      	ldr	r2, [sp, #20]
    1a22:	4317      	orrs	r7, r2
    1a24:	9a08      	ldr	r2, [sp, #32]
    1a26:	4317      	orrs	r7, r2
		value_buffer[i] = fault;
    1a28:	aa0c      	add	r2, sp, #48	; 0x30
    1a2a:	508f      	str	r7, [r1, r2]
    1a2c:	2204      	movs	r2, #4
    1a2e:	4494      	add	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1a30:	4662      	mov	r2, ip
    1a32:	2a08      	cmp	r2, #8
    1a34:	d1b8      	bne.n	19a8 <tcc_init+0xa8>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1a36:	2280      	movs	r2, #128	; 0x80
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1a38:	2300      	movs	r3, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1a3a:	0252      	lsls	r2, r2, #9
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1a3c:	2002      	movs	r0, #2
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1a3e:	4694      	mov	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1a40:	9301      	str	r3, [sp, #4]
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1a42:	30ff      	adds	r0, #255	; 0xff
    1a44:	18e2      	adds	r2, r4, r3
		if (config->wave_ext.invert[i]) {
    1a46:	0017      	movs	r7, r2
    1a48:	3750      	adds	r7, #80	; 0x50
    1a4a:	783f      	ldrb	r7, [r7, #0]
    1a4c:	2f00      	cmp	r7, #0
    1a4e:	d004      	beq.n	1a5a <tcc_init+0x15a>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1a50:	4667      	mov	r7, ip
    1a52:	409f      	lsls	r7, r3
    1a54:	9901      	ldr	r1, [sp, #4]
    1a56:	4339      	orrs	r1, r7
    1a58:	9101      	str	r1, [sp, #4]
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1a5a:	001f      	movs	r7, r3
    1a5c:	3741      	adds	r7, #65	; 0x41
    1a5e:	5dd2      	ldrb	r2, [r2, r7]
    1a60:	2a00      	cmp	r2, #0
    1a62:	d007      	beq.n	1a74 <tcc_init+0x174>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    1a64:	2a02      	cmp	r2, #2
    1a66:	d000      	beq.n	1a6a <tcc_init+0x16a>
    1a68:	e098      	b.n	1b9c <tcc_init+0x29c>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1a6a:	0002      	movs	r2, r0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1a6c:	409a      	lsls	r2, r3
    1a6e:	9901      	ldr	r1, [sp, #4]
    1a70:	4311      	orrs	r1, r2
    1a72:	9101      	str	r1, [sp, #4]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1a74:	3301      	adds	r3, #1
    1a76:	2b08      	cmp	r3, #8
    1a78:	d1e4      	bne.n	1a44 <tcc_init+0x144>
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a7a:	2230      	movs	r2, #48	; 0x30
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1a7c:	2107      	movs	r1, #7
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a7e:	7e63      	ldrb	r3, [r4, #25]
    1a80:	011b      	lsls	r3, r3, #4
    1a82:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1a84:	7e22      	ldrb	r2, [r4, #24]
    1a86:	400a      	ands	r2, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a88:	4313      	orrs	r3, r2
			wave |= (TCC_WAVE_POL0 << n);
    1a8a:	2280      	movs	r2, #128	; 0x80
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a8c:	9304      	str	r3, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1a8e:	2300      	movs	r3, #0
			wave |= (TCC_WAVE_POL0 << n);
    1a90:	0252      	lsls	r2, r2, #9
		if (wav_cfg->wave_polarity[n]) {
    1a92:	18e1      	adds	r1, r4, r3
    1a94:	7d09      	ldrb	r1, [r1, #20]
    1a96:	2900      	cmp	r1, #0
    1a98:	d004      	beq.n	1aa4 <tcc_init+0x1a4>
			wave |= (TCC_WAVE_POL0 << n);
    1a9a:	0011      	movs	r1, r2
    1a9c:	4099      	lsls	r1, r3
    1a9e:	9804      	ldr	r0, [sp, #16]
    1aa0:	4308      	orrs	r0, r1
    1aa2:	9004      	str	r0, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1aa4:	3301      	adds	r3, #1
    1aa6:	2b04      	cmp	r3, #4
    1aa8:	d1f3      	bne.n	1a92 <tcc_init+0x192>
    1aaa:	0031      	movs	r1, r6
		module_inst->callback[i] = NULL;
    1aac:	2300      	movs	r3, #0
    1aae:	1d32      	adds	r2, r6, #4
    1ab0:	3134      	adds	r1, #52	; 0x34
    1ab2:	c208      	stmia	r2!, {r3}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1ab4:	428a      	cmp	r2, r1
    1ab6:	d1fc      	bne.n	1ab2 <tcc_init+0x1b2>
	module_inst->register_callback_mask = 0;
    1ab8:	6373      	str	r3, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1aba:	63b3      	str	r3, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	gclk_chan_config.source_generator = config->counter.clock_source;
    1abe:	aa0a      	add	r2, sp, #40	; 0x28
	_tcc_instances[module_index] = module_inst;
    1ac0:	0098      	lsls	r0, r3, #2
    1ac2:	4b39      	ldr	r3, [pc, #228]	; (1ba8 <tcc_init+0x2a8>)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1ac4:	0011      	movs	r1, r2
	_tcc_instances[module_index] = module_inst;
    1ac6:	50c6      	str	r6, [r0, r3]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1ac8:	0023      	movs	r3, r4
	module_inst->hw = hw;
    1aca:	6035      	str	r5, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1acc:	33a0      	adds	r3, #160	; 0xa0
    1ace:	781b      	ldrb	r3, [r3, #0]
    1ad0:	363c      	adds	r6, #60	; 0x3c
    1ad2:	7033      	strb	r3, [r6, #0]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1ad4:	7aa3      	ldrb	r3, [r4, #10]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1ad6:	2011      	movs	r0, #17
	gclk_chan_config.source_generator = config->counter.clock_source;
    1ad8:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1ada:	f7ff fdf1 	bl	16c0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1ade:	2011      	movs	r0, #17
    1ae0:	f7ff fdb2 	bl	1648 <system_gclk_chan_enable>
    1ae4:	0023      	movs	r3, r4
    1ae6:	0027      	movs	r7, r4
    1ae8:	0026      	movs	r6, r4
    1aea:	3378      	adds	r3, #120	; 0x78
    1aec:	3798      	adds	r7, #152	; 0x98
    1aee:	3658      	adds	r6, #88	; 0x58
    1af0:	9305      	str	r3, [sp, #20]
		if (!config->pins.enable_wave_out_pin[i]) {
    1af2:	783b      	ldrb	r3, [r7, #0]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d00d      	beq.n	1b14 <tcc_init+0x214>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1af8:	2301      	movs	r3, #1
    1afa:	a90b      	add	r1, sp, #44	; 0x2c
    1afc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1afe:	2300      	movs	r3, #0
    1b00:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1b02:	3320      	adds	r3, #32
    1b04:	18f3      	adds	r3, r6, r3
    1b06:	781b      	ldrb	r3, [r3, #0]
		system_pinmux_pin_set_config(
    1b08:	7830      	ldrb	r0, [r6, #0]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1b0a:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b0c:	2301      	movs	r3, #1
    1b0e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1b10:	f7ff fe38 	bl	1784 <system_pinmux_pin_set_config>
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1b14:	9b05      	ldr	r3, [sp, #20]
    1b16:	3604      	adds	r6, #4
    1b18:	3701      	adds	r7, #1
    1b1a:	42b3      	cmp	r3, r6
    1b1c:	d1e9      	bne.n	1af2 <tcc_init+0x1f2>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1b1e:	9b06      	ldr	r3, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1b20:	9a07      	ldr	r2, [sp, #28]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1b22:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1b24:	0212      	lsls	r2, r2, #8
    1b26:	4313      	orrs	r3, r2
    1b28:	9a02      	ldr	r2, [sp, #8]
    1b2a:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    1b2c:	602b      	str	r3, [r5, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1b2e:	2304      	movs	r3, #4
    1b30:	68aa      	ldr	r2, [r5, #8]
    1b32:	421a      	tst	r2, r3
    1b34:	d1fc      	bne.n	1b30 <tcc_init+0x230>
	hw->CTRLBCLR.reg = 0xFF;
    1b36:	23ff      	movs	r3, #255	; 0xff
    1b38:	712b      	strb	r3, [r5, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1b3a:	3bfb      	subs	r3, #251	; 0xfb
    1b3c:	68aa      	ldr	r2, [r5, #8]
    1b3e:	421a      	tst	r2, r3
    1b40:	d1fc      	bne.n	1b3c <tcc_init+0x23c>
	hw->CTRLBSET.reg = ctrlb;
    1b42:	466b      	mov	r3, sp
    1b44:	7b1b      	ldrb	r3, [r3, #12]
    1b46:	716b      	strb	r3, [r5, #5]
	hw->FCTRLA.reg = faults[0];
    1b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1b4a:	60eb      	str	r3, [r5, #12]
	hw->FCTRLB.reg = faults[1];
    1b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b4e:	612b      	str	r3, [r5, #16]
	hw->DRVCTRL.reg = drvctrl;
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	61ab      	str	r3, [r5, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    1b54:	4b15      	ldr	r3, [pc, #84]	; (1bac <tcc_init+0x2ac>)
    1b56:	68aa      	ldr	r2, [r5, #8]
    1b58:	421a      	tst	r2, r3
    1b5a:	d1fc      	bne.n	1b56 <tcc_init+0x256>
	hw->WAVE.reg = waves[0];
    1b5c:	9b04      	ldr	r3, [sp, #16]
    1b5e:	63eb      	str	r3, [r5, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1b60:	2310      	movs	r3, #16
    1b62:	68aa      	ldr	r2, [r5, #8]
    1b64:	421a      	tst	r2, r3
    1b66:	d1fc      	bne.n	1b62 <tcc_init+0x262>
	hw->COUNT.reg = config->counter.count;
    1b68:	6823      	ldr	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1b6a:	4a11      	ldr	r2, [pc, #68]	; (1bb0 <tcc_init+0x2b0>)
	hw->COUNT.reg = config->counter.count;
    1b6c:	636b      	str	r3, [r5, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1b6e:	68ab      	ldr	r3, [r5, #8]
    1b70:	4013      	ands	r3, r2
    1b72:	d1fc      	bne.n	1b6e <tcc_init+0x26e>
	hw->PER.reg = (config->counter.period);
    1b74:	6862      	ldr	r2, [r4, #4]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1b76:	490f      	ldr	r1, [pc, #60]	; (1bb4 <tcc_init+0x2b4>)
	hw->PER.reg = (config->counter.period);
    1b78:	642a      	str	r2, [r5, #64]	; 0x40
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1b7a:	000a      	movs	r2, r1
    1b7c:	409a      	lsls	r2, r3
		while (hw->SYNCBUSY.reg & (
    1b7e:	68a8      	ldr	r0, [r5, #8]
    1b80:	4010      	ands	r0, r2
    1b82:	d1fc      	bne.n	1b7e <tcc_init+0x27e>
		hw->CC[i].reg = (config->compare.match[i]);
    1b84:	009a      	lsls	r2, r3, #2
    1b86:	18a2      	adds	r2, r4, r2
    1b88:	69d6      	ldr	r6, [r2, #28]
    1b8a:	001a      	movs	r2, r3
    1b8c:	3210      	adds	r2, #16
    1b8e:	0092      	lsls	r2, r2, #2
    1b90:	18aa      	adds	r2, r5, r2
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1b92:	3301      	adds	r3, #1
		hw->CC[i].reg = (config->compare.match[i]);
    1b94:	6056      	str	r6, [r2, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1b96:	2b04      	cmp	r3, #4
    1b98:	d1ef      	bne.n	1b7a <tcc_init+0x27a>
    1b9a:	e6cb      	b.n	1934 <tcc_init+0x34>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1b9c:	2201      	movs	r2, #1
    1b9e:	e765      	b.n	1a6c <tcc_init+0x16c>
    1ba0:	40000400 	.word	0x40000400
    1ba4:	00ffffff 	.word	0x00ffffff
    1ba8:	200001c8 	.word	0x200001c8
    1bac:	00020040 	.word	0x00020040
    1bb0:	00040080 	.word	0x00040080
    1bb4:	00080100 	.word	0x00080100

00001bb8 <tcc_set_compare_value>:
		const uint32_t compare)
{
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1bb8:	0003      	movs	r3, r0
{
    1bba:	b510      	push	{r4, lr}
	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1bbc:	333c      	adds	r3, #60	; 0x3c
    1bbe:	781b      	ldrb	r3, [r3, #0]
    1bc0:	6800      	ldr	r0, [r0, #0]
    1bc2:	f7ff fe03 	bl	17cc <_tcc_set_compare_value.isra.5>
			module_inst->double_buffering_enabled);
}
    1bc6:	bd10      	pop	{r4, pc}

00001bc8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1bca:	2500      	movs	r5, #0
	struct tcc_module *module =
    1bcc:	4b0b      	ldr	r3, [pc, #44]	; (1bfc <_tcc_interrupt_handler+0x34>)
    1bce:	0080      	lsls	r0, r0, #2
    1bd0:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1bd2:	6823      	ldr	r3, [r4, #0]
    1bd4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1bd6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1bda:	4013      	ands	r3, r2
    1bdc:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1bde:	4b08      	ldr	r3, [pc, #32]	; (1c00 <_tcc_interrupt_handler+0x38>)
    1be0:	58ef      	ldr	r7, [r5, r3]
    1be2:	4237      	tst	r7, r6
    1be4:	d005      	beq.n	1bf2 <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1be6:	1963      	adds	r3, r4, r5
    1be8:	685b      	ldr	r3, [r3, #4]
    1bea:	0020      	movs	r0, r4
    1bec:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1bee:	6823      	ldr	r3, [r4, #0]
    1bf0:	62df      	str	r7, [r3, #44]	; 0x2c
    1bf2:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1bf4:	2d30      	cmp	r5, #48	; 0x30
    1bf6:	d1f2      	bne.n	1bde <_tcc_interrupt_handler+0x16>
		}
	}
}
    1bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	200001c8 	.word	0x200001c8
    1c00:	00003cb8 	.word	0x00003cb8

00001c04 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1c04:	b510      	push	{r4, lr}
    1c06:	2000      	movs	r0, #0
    1c08:	f7ff ffde 	bl	1bc8 <_tcc_interrupt_handler>
    1c0c:	bd10      	pop	{r4, pc}

00001c0e <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1c0e:	1c93      	adds	r3, r2, #2
    1c10:	009b      	lsls	r3, r3, #2
    1c12:	5019      	str	r1, [r3, r0]
    1c14:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1c16:	2a02      	cmp	r2, #2
    1c18:	d104      	bne.n	1c24 <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1c1a:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1c1c:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1c1e:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1c20:	2000      	movs	r0, #0
    1c22:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1c24:	2a03      	cmp	r2, #3
    1c26:	d101      	bne.n	1c2c <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1c28:	321d      	adds	r2, #29
    1c2a:	e7f7      	b.n	1c1c <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    1c2c:	2101      	movs	r1, #1
    1c2e:	4091      	lsls	r1, r2
    1c30:	430b      	orrs	r3, r1
    1c32:	e7f4      	b.n	1c1e <tc_register_callback+0x10>

00001c34 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1c34:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c36:	2601      	movs	r6, #1
	struct tc_module *module
    1c38:	4b14      	ldr	r3, [pc, #80]	; (1c8c <_tc_interrupt_handler+0x58>)
    1c3a:	0080      	lsls	r0, r0, #2
    1c3c:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c3e:	6823      	ldr	r3, [r4, #0]
    1c40:	7e22      	ldrb	r2, [r4, #24]
    1c42:	7e65      	ldrb	r5, [r4, #25]
    1c44:	7b9b      	ldrb	r3, [r3, #14]
    1c46:	4015      	ands	r5, r2
    1c48:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c4a:	4235      	tst	r5, r6
    1c4c:	d004      	beq.n	1c58 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1c4e:	68a3      	ldr	r3, [r4, #8]
    1c50:	0020      	movs	r0, r4
    1c52:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1c54:	6823      	ldr	r3, [r4, #0]
    1c56:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1c58:	2602      	movs	r6, #2
    1c5a:	4235      	tst	r5, r6
    1c5c:	d004      	beq.n	1c68 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c5e:	68e3      	ldr	r3, [r4, #12]
    1c60:	0020      	movs	r0, r4
    1c62:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c64:	6823      	ldr	r3, [r4, #0]
    1c66:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1c68:	2610      	movs	r6, #16
    1c6a:	4235      	tst	r5, r6
    1c6c:	d004      	beq.n	1c78 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1c6e:	6923      	ldr	r3, [r4, #16]
    1c70:	0020      	movs	r0, r4
    1c72:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1c74:	6823      	ldr	r3, [r4, #0]
    1c76:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1c78:	2620      	movs	r6, #32
    1c7a:	4235      	tst	r5, r6
    1c7c:	d004      	beq.n	1c88 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1c7e:	6963      	ldr	r3, [r4, #20]
    1c80:	0020      	movs	r0, r4
    1c82:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1c84:	6823      	ldr	r3, [r4, #0]
    1c86:	739e      	strb	r6, [r3, #14]
	}
}
    1c88:	bd70      	pop	{r4, r5, r6, pc}
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	200001cc 	.word	0x200001cc

00001c90 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1c90:	b510      	push	{r4, lr}
    1c92:	2000      	movs	r0, #0
    1c94:	f7ff ffce 	bl	1c34 <_tc_interrupt_handler>
    1c98:	bd10      	pop	{r4, pc}

00001c9a <TC2_Handler>:
    1c9a:	b510      	push	{r4, lr}
    1c9c:	2001      	movs	r0, #1
    1c9e:	f7ff ffc9 	bl	1c34 <_tc_interrupt_handler>
    1ca2:	bd10      	pop	{r4, pc}

00001ca4 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1ca4:	4b06      	ldr	r3, [pc, #24]	; (1cc0 <_tc_get_inst_index+0x1c>)
    1ca6:	4298      	cmp	r0, r3
    1ca8:	d007      	beq.n	1cba <_tc_get_inst_index+0x16>
    1caa:	4a06      	ldr	r2, [pc, #24]	; (1cc4 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1cac:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1cae:	4290      	cmp	r0, r2
    1cb0:	d101      	bne.n	1cb6 <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1cb2:	3301      	adds	r3, #1
			return i;
    1cb4:	b2db      	uxtb	r3, r3
}
    1cb6:	0018      	movs	r0, r3
    1cb8:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1cba:	2300      	movs	r3, #0
    1cbc:	e7fa      	b.n	1cb4 <_tc_get_inst_index+0x10>
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	42001800 	.word	0x42001800
    1cc4:	42001c00 	.word	0x42001c00

00001cc8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cca:	0005      	movs	r5, r0
    1ccc:	b085      	sub	sp, #20
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1cce:	0008      	movs	r0, r1
{
    1cd0:	0014      	movs	r4, r2
    1cd2:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    1cd4:	f7ff ffe6 	bl	1ca4 <_tc_get_inst_index>

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1cd8:	466a      	mov	r2, sp
    1cda:	2312      	movs	r3, #18
    1cdc:	7113      	strb	r3, [r2, #4]
    1cde:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1ce0:	332e      	adds	r3, #46	; 0x2e
    1ce2:	8113      	strh	r3, [r2, #8]
    1ce4:	3340      	adds	r3, #64	; 0x40
    1ce6:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1ce8:	2300      	movs	r3, #0
    1cea:	60ab      	str	r3, [r5, #8]
    1cec:	60eb      	str	r3, [r5, #12]
    1cee:	612b      	str	r3, [r5, #16]
    1cf0:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1cf2:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    1cf4:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1cf6:	4b7c      	ldr	r3, [pc, #496]	; (1ee8 <tc_init+0x220>)
    1cf8:	0082      	lsls	r2, r0, #2
    1cfa:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1cfc:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1cfe:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    1d00:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d02:	2b08      	cmp	r3, #8
    1d04:	d103      	bne.n	1d0e <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d06:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d08:	07fa      	lsls	r2, r7, #31
    1d0a:	d500      	bpl.n	1d0e <tc_init+0x46>
    1d0c:	e0d5      	b.n	1eba <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d0e:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    1d10:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d12:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1d14:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d16:	4213      	tst	r3, r2
    1d18:	d000      	beq.n	1d1c <tc_init+0x54>
    1d1a:	e0ce      	b.n	1eba <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d1c:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1d1e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d20:	06db      	lsls	r3, r3, #27
    1d22:	d500      	bpl.n	1d26 <tc_init+0x5e>
    1d24:	e0c9      	b.n	1eba <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1d26:	2102      	movs	r1, #2
    1d28:	8833      	ldrh	r3, [r6, #0]
    1d2a:	400b      	ands	r3, r1
    1d2c:	d000      	beq.n	1d30 <tc_init+0x68>
    1d2e:	e0c4      	b.n	1eba <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1d30:	7c21      	ldrb	r1, [r4, #16]
    1d32:	2900      	cmp	r1, #0
    1d34:	d008      	beq.n	1d48 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d36:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1d38:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1d3a:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1d3c:	7d20      	ldrb	r0, [r4, #20]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d3e:	708a      	strb	r2, [r1, #2]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1d40:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d42:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    1d44:	f7ff fd1e 	bl	1784 <system_pinmux_pin_set_config>
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1d48:	7f23      	ldrb	r3, [r4, #28]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d00e      	beq.n	1d6c <tc_init+0xa4>
	config->powersave    = false;
    1d4e:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d50:	2301      	movs	r3, #1
    1d52:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1d54:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d56:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d58:	708b      	strb	r3, [r1, #2]
    1d5a:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d5c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1d5e:	331f      	adds	r3, #31
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d60:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    1d62:	18e3      	adds	r3, r4, r3
    1d64:	7818      	ldrb	r0, [r3, #0]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d66:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    1d68:	f7ff fd0c 	bl	1784 <system_pinmux_pin_set_config>
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1d6c:	007a      	lsls	r2, r7, #1
    1d6e:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1d70:	4668      	mov	r0, sp
    1d72:	2208      	movs	r2, #8
    1d74:	1880      	adds	r0, r0, r2
    1d76:	4662      	mov	r2, ip
    1d78:	4b5c      	ldr	r3, [pc, #368]	; (1eec <tc_init+0x224>)
    1d7a:	5a82      	ldrh	r2, [r0, r2]
    1d7c:	6a19      	ldr	r1, [r3, #32]
    1d7e:	430a      	orrs	r2, r1
    1d80:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1d82:	78a2      	ldrb	r2, [r4, #2]
    1d84:	2a08      	cmp	r2, #8
    1d86:	d10a      	bne.n	1d9e <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1d88:	1c79      	adds	r1, r7, #1
    1d8a:	004a      	lsls	r2, r1, #1
    1d8c:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1d8e:	2108      	movs	r1, #8
    1d90:	466a      	mov	r2, sp
    1d92:	1852      	adds	r2, r2, r1
    1d94:	4661      	mov	r1, ip
    1d96:	6a18      	ldr	r0, [r3, #32]
    1d98:	5a52      	ldrh	r2, [r2, r1]
    1d9a:	4302      	orrs	r2, r0
    1d9c:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1d9e:	466a      	mov	r2, sp
    1da0:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1da2:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    1da4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1da6:	466b      	mov	r3, sp
    1da8:	3304      	adds	r3, #4
    1daa:	5ddf      	ldrb	r7, [r3, r7]
    1dac:	0038      	movs	r0, r7
    1dae:	f7ff fc87 	bl	16c0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1db2:	0038      	movs	r0, r7
    1db4:	f7ff fc48 	bl	1648 <system_gclk_chan_enable>

	/* Set ctrla register */
	ctrla_tmp =
    1db8:	8923      	ldrh	r3, [r4, #8]
    1dba:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    1dbc:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    1dbe:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    1dc0:	78a3      	ldrb	r3, [r4, #2]
    1dc2:	430b      	orrs	r3, r1
	ctrla_tmp =
    1dc4:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1dc6:	7862      	ldrb	r2, [r4, #1]
    1dc8:	2a00      	cmp	r2, #0
    1dca:	d002      	beq.n	1dd2 <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1dcc:	2280      	movs	r2, #128	; 0x80
    1dce:	0112      	lsls	r2, r2, #4
    1dd0:	4313      	orrs	r3, r2
    1dd2:	6829      	ldr	r1, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dd4:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1dd6:	b252      	sxtb	r2, r2
    1dd8:	2a00      	cmp	r2, #0
    1dda:	dbfb      	blt.n	1dd4 <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1ddc:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1dde:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1de0:	1e5a      	subs	r2, r3, #1
    1de2:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    1de4:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1de6:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    1de8:	2a00      	cmp	r2, #0
    1dea:	d001      	beq.n	1df0 <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1dec:	2201      	movs	r2, #1
    1dee:	4313      	orrs	r3, r2
    1df0:	6829      	ldr	r1, [r5, #0]
    1df2:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1df4:	b252      	sxtb	r2, r2
    1df6:	2a00      	cmp	r2, #0
    1df8:	dbfb      	blt.n	1df2 <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1dfa:	22ff      	movs	r2, #255	; 0xff
    1dfc:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d005      	beq.n	1e0e <tc_init+0x146>
    1e02:	6829      	ldr	r1, [r5, #0]
    1e04:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1e06:	b252      	sxtb	r2, r2
    1e08:	2a00      	cmp	r2, #0
    1e0a:	dbfb      	blt.n	1e04 <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1e0c:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1e0e:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    1e10:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1e12:	2b00      	cmp	r3, #0
    1e14:	d001      	beq.n	1e1a <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e16:	2310      	movs	r3, #16
    1e18:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    1e1a:	7b23      	ldrb	r3, [r4, #12]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	d001      	beq.n	1e24 <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e20:	2320      	movs	r3, #32
    1e22:	431a      	orrs	r2, r3
    1e24:	6829      	ldr	r1, [r5, #0]
    1e26:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e28:	b25b      	sxtb	r3, r3
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	dbfb      	blt.n	1e26 <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1e2e:	71b2      	strb	r2, [r6, #6]
    1e30:	682b      	ldr	r3, [r5, #0]
    1e32:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e34:	b252      	sxtb	r2, r2
    1e36:	2a00      	cmp	r2, #0
    1e38:	dbfb      	blt.n	1e32 <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1e3a:	792a      	ldrb	r2, [r5, #4]
    1e3c:	2a04      	cmp	r2, #4
    1e3e:	d019      	beq.n	1e74 <tc_init+0x1ac>
    1e40:	2a08      	cmp	r2, #8
    1e42:	d03c      	beq.n	1ebe <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1e44:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1e46:	2a00      	cmp	r2, #0
    1e48:	d137      	bne.n	1eba <tc_init+0x1f2>
    1e4a:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1e4c:	b252      	sxtb	r2, r2
    1e4e:	2a00      	cmp	r2, #0
    1e50:	dbfb      	blt.n	1e4a <tc_init+0x182>
				= config->counter_16_bit.value;
    1e52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1e54:	8233      	strh	r3, [r6, #16]
    1e56:	682a      	ldr	r2, [r5, #0]
    1e58:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e5a:	b25b      	sxtb	r3, r3
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	dbfb      	blt.n	1e58 <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    1e60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1e62:	8333      	strh	r3, [r6, #24]
    1e64:	682a      	ldr	r2, [r5, #0]
    1e66:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e68:	b25b      	sxtb	r3, r3
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	dbfb      	blt.n	1e66 <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    1e6e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1e70:	8373      	strh	r3, [r6, #26]
    1e72:	e021      	b.n	1eb8 <tc_init+0x1f0>
    1e74:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1e76:	b252      	sxtb	r2, r2
    1e78:	2a00      	cmp	r2, #0
    1e7a:	dbfb      	blt.n	1e74 <tc_init+0x1ac>
					config->counter_8_bit.value;
    1e7c:	0023      	movs	r3, r4
    1e7e:	3328      	adds	r3, #40	; 0x28
    1e80:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    1e82:	7433      	strb	r3, [r6, #16]
    1e84:	682a      	ldr	r2, [r5, #0]
    1e86:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e88:	b25b      	sxtb	r3, r3
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	dbfb      	blt.n	1e86 <tc_init+0x1be>
					config->counter_8_bit.period;
    1e8e:	0023      	movs	r3, r4
    1e90:	3329      	adds	r3, #41	; 0x29
    1e92:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    1e94:	7533      	strb	r3, [r6, #20]
    1e96:	682a      	ldr	r2, [r5, #0]
    1e98:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e9a:	b25b      	sxtb	r3, r3
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	dbfb      	blt.n	1e98 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    1ea0:	0023      	movs	r3, r4
    1ea2:	332a      	adds	r3, #42	; 0x2a
    1ea4:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    1ea6:	7633      	strb	r3, [r6, #24]
    1ea8:	682a      	ldr	r2, [r5, #0]
    1eaa:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1eac:	b25b      	sxtb	r3, r3
    1eae:	2b00      	cmp	r3, #0
    1eb0:	dbfb      	blt.n	1eaa <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    1eb2:	342b      	adds	r4, #43	; 0x2b
    1eb4:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    1eb6:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    1eb8:	2000      	movs	r0, #0
}
    1eba:	b005      	add	sp, #20
    1ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ebe:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1ec0:	b252      	sxtb	r2, r2
    1ec2:	2a00      	cmp	r2, #0
    1ec4:	dbfb      	blt.n	1ebe <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1ec6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ec8:	6133      	str	r3, [r6, #16]
    1eca:	682a      	ldr	r2, [r5, #0]
    1ecc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ece:	b25b      	sxtb	r3, r3
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	dbfb      	blt.n	1ecc <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1ed4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ed6:	61b3      	str	r3, [r6, #24]
    1ed8:	682a      	ldr	r2, [r5, #0]
    1eda:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1edc:	b25b      	sxtb	r3, r3
    1ede:	2b00      	cmp	r3, #0
    1ee0:	dbfb      	blt.n	1eda <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1ee2:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1ee4:	61f3      	str	r3, [r6, #28]
    1ee6:	e7e7      	b.n	1eb8 <tc_init+0x1f0>
    1ee8:	200001cc 	.word	0x200001cc
    1eec:	40000400 	.word	0x40000400

00001ef0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1ef0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1ef2:	6804      	ldr	r4, [r0, #0]
    1ef4:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1ef6:	b25b      	sxtb	r3, r3
    1ef8:	2b00      	cmp	r3, #0
    1efa:	dbfb      	blt.n	1ef4 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1efc:	7903      	ldrb	r3, [r0, #4]
    1efe:	2b04      	cmp	r3, #4
    1f00:	d00c      	beq.n	1f1c <tc_set_compare_value+0x2c>
    1f02:	2b08      	cmp	r3, #8
    1f04:	d012      	beq.n	1f2c <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1f06:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d10e      	bne.n	1f2a <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    1f0c:	2017      	movs	r0, #23
			if (channel_index <
    1f0e:	2901      	cmp	r1, #1
    1f10:	d80b      	bhi.n	1f2a <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    1f12:	310c      	adds	r1, #12
						(uint16_t)compare;
    1f14:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1f16:	0049      	lsls	r1, r1, #1
    1f18:	530a      	strh	r2, [r1, r4]
    1f1a:	e005      	b.n	1f28 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    1f1c:	2017      	movs	r0, #23
			if (channel_index <
    1f1e:	2901      	cmp	r1, #1
    1f20:	d803      	bhi.n	1f2a <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    1f22:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1f24:	1861      	adds	r1, r4, r1
    1f26:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1f28:	2000      	movs	r0, #0
}
    1f2a:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1f2c:	2017      	movs	r0, #23
			if (channel_index <
    1f2e:	2901      	cmp	r1, #1
    1f30:	d8fb      	bhi.n	1f2a <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    1f32:	3106      	adds	r1, #6
    1f34:	0089      	lsls	r1, r1, #2
    1f36:	510a      	str	r2, [r1, r4]
    1f38:	e7f6      	b.n	1f28 <tc_set_compare_value+0x38>

00001f3a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f3a:	e7fe      	b.n	1f3a <Dummy_Handler>

00001f3c <Reset_Handler>:
        if (pSrc != pDest) {
    1f3c:	4821      	ldr	r0, [pc, #132]	; (1fc4 <Reset_Handler+0x88>)
    1f3e:	4922      	ldr	r1, [pc, #136]	; (1fc8 <Reset_Handler+0x8c>)
{
    1f40:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1f42:	4288      	cmp	r0, r1
    1f44:	d004      	beq.n	1f50 <Reset_Handler+0x14>
    1f46:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1f48:	4c20      	ldr	r4, [pc, #128]	; (1fcc <Reset_Handler+0x90>)
    1f4a:	18ca      	adds	r2, r1, r3
    1f4c:	42a2      	cmp	r2, r4
    1f4e:	d332      	bcc.n	1fb6 <Reset_Handler+0x7a>
                *pDest++ = 0;
    1f50:	2100      	movs	r1, #0
    1f52:	4b1f      	ldr	r3, [pc, #124]	; (1fd0 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1f54:	4a1f      	ldr	r2, [pc, #124]	; (1fd4 <Reset_Handler+0x98>)
    1f56:	4293      	cmp	r3, r2
    1f58:	d331      	bcc.n	1fbe <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f5a:	21ff      	movs	r1, #255	; 0xff
    1f5c:	4b1e      	ldr	r3, [pc, #120]	; (1fd8 <Reset_Handler+0x9c>)
    1f5e:	4a1f      	ldr	r2, [pc, #124]	; (1fdc <Reset_Handler+0xa0>)
    1f60:	438b      	bics	r3, r1
    1f62:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f64:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f66:	250c      	movs	r5, #12
    1f68:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f6a:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f6c:	4b1c      	ldr	r3, [pc, #112]	; (1fe0 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f6e:	481d      	ldr	r0, [pc, #116]	; (1fe4 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f70:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f72:	78c3      	ldrb	r3, [r0, #3]
    1f74:	39fc      	subs	r1, #252	; 0xfc
    1f76:	438b      	bics	r3, r1
    1f78:	4313      	orrs	r3, r2
    1f7a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f7c:	78c3      	ldrb	r3, [r0, #3]
    1f7e:	43ab      	bics	r3, r5
    1f80:	4323      	orrs	r3, r4
    1f82:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f84:	4b18      	ldr	r3, [pc, #96]	; (1fe8 <Reset_Handler+0xac>)
    1f86:	7b98      	ldrb	r0, [r3, #14]
    1f88:	43b0      	bics	r0, r6
    1f8a:	0006      	movs	r6, r0
    1f8c:	2020      	movs	r0, #32
    1f8e:	4330      	orrs	r0, r6
    1f90:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1f92:	7b98      	ldrb	r0, [r3, #14]
    1f94:	43a8      	bics	r0, r5
    1f96:	4304      	orrs	r4, r0
    1f98:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1f9a:	7b98      	ldrb	r0, [r3, #14]
    1f9c:	4388      	bics	r0, r1
    1f9e:	4302      	orrs	r2, r0
    1fa0:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1fa2:	2380      	movs	r3, #128	; 0x80
    1fa4:	4a11      	ldr	r2, [pc, #68]	; (1fec <Reset_Handler+0xb0>)
    1fa6:	6851      	ldr	r1, [r2, #4]
    1fa8:	430b      	orrs	r3, r1
    1faa:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1fac:	f001 fe50 	bl	3c50 <__libc_init_array>
        main();
    1fb0:	f000 f94c 	bl	224c <main>
    1fb4:	e7fe      	b.n	1fb4 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1fb6:	58c5      	ldr	r5, [r0, r3]
    1fb8:	3304      	adds	r3, #4
    1fba:	6015      	str	r5, [r2, #0]
    1fbc:	e7c5      	b.n	1f4a <Reset_Handler+0xe>
                *pDest++ = 0;
    1fbe:	c302      	stmia	r3!, {r1}
    1fc0:	e7c9      	b.n	1f56 <Reset_Handler+0x1a>
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	00003d88 	.word	0x00003d88
    1fc8:	20000000 	.word	0x20000000
    1fcc:	20000028 	.word	0x20000028
    1fd0:	20000028 	.word	0x20000028
    1fd4:	200001fc 	.word	0x200001fc
    1fd8:	00000000 	.word	0x00000000
    1fdc:	e000ed00 	.word	0xe000ed00
    1fe0:	410070fc 	.word	0x410070fc
    1fe4:	41005000 	.word	0x41005000
    1fe8:	41004800 	.word	0x41004800
    1fec:	41004000 	.word	0x41004000

00001ff0 <set_color_red>:
	{
	}
	
}

void set_color_red(void){
    1ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_master_packet packet = {
    1ff2:	ac01      	add	r4, sp, #4
    1ff4:	220c      	movs	r2, #12
    1ff6:	2100      	movs	r1, #0
    1ff8:	0020      	movs	r0, r4
    1ffa:	f001 fe4d 	bl	3c98 <memset>
    1ffe:	2331      	movs	r3, #49	; 0x31
    2000:	8023      	strh	r3, [r4, #0]
    2002:	3b2f      	subs	r3, #47	; 0x2f
    2004:	8063      	strh	r3, [r4, #2]
    2006:	4b04      	ldr	r3, [pc, #16]	; (2018 <set_color_red+0x28>)
    2008:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_red,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    200a:	0021      	movs	r1, r4
    200c:	4803      	ldr	r0, [pc, #12]	; (201c <set_color_red+0x2c>)
    200e:	f7fe fe99 	bl	d44 <i2c_master_write_packet_wait>
    2012:	2800      	cmp	r0, #0
    2014:	d1f9      	bne.n	200a <set_color_red+0x1a>
	{
	}
}
    2016:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    2018:	2000001d 	.word	0x2000001d
    201c:	200001d4 	.word	0x200001d4

00002020 <set_color_cyan>:
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
	{
	}
}

void set_color_cyan(void){
    2020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_master_packet packet = {
    2022:	ac01      	add	r4, sp, #4
    2024:	220c      	movs	r2, #12
    2026:	2100      	movs	r1, #0
    2028:	0020      	movs	r0, r4
    202a:	f001 fe35 	bl	3c98 <memset>
    202e:	2331      	movs	r3, #49	; 0x31
    2030:	8023      	strh	r3, [r4, #0]
    2032:	3b2f      	subs	r3, #47	; 0x2f
    2034:	8063      	strh	r3, [r4, #2]
    2036:	4b04      	ldr	r3, [pc, #16]	; (2048 <set_color_cyan+0x28>)
    2038:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_cyan,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    203a:	0021      	movs	r1, r4
    203c:	4803      	ldr	r0, [pc, #12]	; (204c <set_color_cyan+0x2c>)
    203e:	f7fe fe81 	bl	d44 <i2c_master_write_packet_wait>
    2042:	2800      	cmp	r0, #0
    2044:	d1f9      	bne.n	203a <set_color_cyan+0x1a>
	{
	}
}
    2046:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    2048:	20000019 	.word	0x20000019
    204c:	200001d4 	.word	0x200001d4

00002050 <reset_chip>:
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
	{
	}
}

void reset_chip(void){
    2050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_disable_trise_tfall,
	};

	// Disable pwm's timer
	struct i2c_master_packet disable_PWM1_timer = {
    2052:	ac01      	add	r4, sp, #4
    2054:	220c      	movs	r2, #12
    2056:	2100      	movs	r1, #0
    2058:	0020      	movs	r0, r4
    205a:	f001 fe1d 	bl	3c98 <memset>
    205e:	2331      	movs	r3, #49	; 0x31
    2060:	8023      	strh	r3, [r4, #0]
    2062:	3b2f      	subs	r3, #47	; 0x2f
    2064:	8063      	strh	r3, [r4, #2]
    2066:	4b04      	ldr	r3, [pc, #16]	; (2078 <reset_chip+0x28>)
    2068:	6063      	str	r3, [r4, #4]
	};




	while ((i2c_master_write_packet_wait(&i2c_master_instance, &disable_PWM1_timer)) != STATUS_OK)
    206a:	0021      	movs	r1, r4
    206c:	4803      	ldr	r0, [pc, #12]	; (207c <reset_chip+0x2c>)
    206e:	f7fe fe69 	bl	d44 <i2c_master_write_packet_wait>
    2072:	2800      	cmp	r0, #0
    2074:	d1f9      	bne.n	206a <reset_chip+0x1a>
	{
	}
}
    2076:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    2078:	20000011 	.word	0x20000011
    207c:	200001d4 	.word	0x200001d4

00002080 <set_battery_charge_routine>:





void set_battery_charge_routine(void){
    2080:	b5f0      	push	{r4, r5, r6, r7, lr}
    2082:	b08d      	sub	sp, #52	; 0x34

	// Enable PWM GREEN
	struct i2c_master_packet packet = {
    2084:	220c      	movs	r2, #12
    2086:	2100      	movs	r1, #0
    2088:	4668      	mov	r0, sp
    208a:	f001 fe05 	bl	3c98 <memset>
    208e:	2731      	movs	r7, #49	; 0x31
    2090:	466b      	mov	r3, sp
    2092:	2202      	movs	r2, #2
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_green_PWM,
	};
	
	// Enable Ramp (flash)
	struct i2c_master_packet set_ramp = {
    2094:	ae03      	add	r6, sp, #12
	struct i2c_master_packet packet = {
    2096:	805a      	strh	r2, [r3, #2]
    2098:	801f      	strh	r7, [r3, #0]
    209a:	4b1e      	ldr	r3, [pc, #120]	; (2114 <set_battery_charge_routine+0x94>)
	struct i2c_master_packet set_ramp = {
    209c:	220c      	movs	r2, #12
    209e:	2100      	movs	r1, #0
    20a0:	0030      	movs	r0, r6
	struct i2c_master_packet packet = {
    20a2:	9301      	str	r3, [sp, #4]
	struct i2c_master_packet set_ramp = {
    20a4:	f001 fdf8 	bl	3c98 <memset>
    20a8:	2302      	movs	r3, #2
		.data = buffer_set_charge_routine_flash_period,
	};
	

	// Enable Pulse
	struct i2c_master_packet set_trise_tfall = {
    20aa:	ad06      	add	r5, sp, #24
	struct i2c_master_packet set_ramp = {
    20ac:	8073      	strh	r3, [r6, #2]
    20ae:	4b1a      	ldr	r3, [pc, #104]	; (2118 <set_battery_charge_routine+0x98>)
	struct i2c_master_packet set_trise_tfall = {
    20b0:	220c      	movs	r2, #12
    20b2:	2100      	movs	r1, #0
    20b4:	0028      	movs	r0, r5
	struct i2c_master_packet set_ramp = {
    20b6:	6073      	str	r3, [r6, #4]
    20b8:	8037      	strh	r7, [r6, #0]
	struct i2c_master_packet set_trise_tfall = {
    20ba:	f001 fded 	bl	3c98 <memset>
    20be:	2302      	movs	r3, #2
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_charge_routine_trise_tfall,
	};

	// Enable pwm's timer
	struct i2c_master_packet set_PWM1_timer = {
    20c0:	ac09      	add	r4, sp, #36	; 0x24
	struct i2c_master_packet set_trise_tfall = {
    20c2:	806b      	strh	r3, [r5, #2]
    20c4:	4b15      	ldr	r3, [pc, #84]	; (211c <set_battery_charge_routine+0x9c>)
	struct i2c_master_packet set_PWM1_timer = {
    20c6:	220c      	movs	r2, #12
    20c8:	2100      	movs	r1, #0
    20ca:	0020      	movs	r0, r4
	struct i2c_master_packet set_trise_tfall = {
    20cc:	606b      	str	r3, [r5, #4]
    20ce:	802f      	strh	r7, [r5, #0]
	struct i2c_master_packet set_PWM1_timer = {
    20d0:	f001 fde2 	bl	3c98 <memset>
    20d4:	2302      	movs	r3, #2
    20d6:	8063      	strh	r3, [r4, #2]
    20d8:	4b11      	ldr	r3, [pc, #68]	; (2120 <set_battery_charge_routine+0xa0>)
    20da:	8027      	strh	r7, [r4, #0]
    20dc:	6063      	str	r3, [r4, #4]
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_charge_routine_PWM1_timer,
	};


	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    20de:	4f11      	ldr	r7, [pc, #68]	; (2124 <set_battery_charge_routine+0xa4>)
    20e0:	4669      	mov	r1, sp
    20e2:	0038      	movs	r0, r7
    20e4:	f7fe fe2e 	bl	d44 <i2c_master_write_packet_wait>
    20e8:	2800      	cmp	r0, #0
    20ea:	d1f8      	bne.n	20de <set_battery_charge_routine+0x5e>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_ramp)) != STATUS_OK)
    20ec:	0031      	movs	r1, r6
    20ee:	0038      	movs	r0, r7
    20f0:	f7fe fe28 	bl	d44 <i2c_master_write_packet_wait>
    20f4:	2800      	cmp	r0, #0
    20f6:	d1f9      	bne.n	20ec <set_battery_charge_routine+0x6c>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_trise_tfall)) != STATUS_OK)
    20f8:	0029      	movs	r1, r5
    20fa:	0038      	movs	r0, r7
    20fc:	f7fe fe22 	bl	d44 <i2c_master_write_packet_wait>
    2100:	2800      	cmp	r0, #0
    2102:	d1f9      	bne.n	20f8 <set_battery_charge_routine+0x78>
	{
	}

	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_PWM1_timer)) != STATUS_OK)
    2104:	0021      	movs	r1, r4
    2106:	0038      	movs	r0, r7
    2108:	f7fe fe1c 	bl	d44 <i2c_master_write_packet_wait>
    210c:	2800      	cmp	r0, #0
    210e:	d1f9      	bne.n	2104 <set_battery_charge_routine+0x84>
	{
	}
	
	
}
    2110:	b00d      	add	sp, #52	; 0x34
    2112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2114:	2000001b 	.word	0x2000001b
    2118:	20000015 	.word	0x20000015
    211c:	20000017 	.word	0x20000017
    2120:	20000013 	.word	0x20000013
    2124:	200001d4 	.word	0x200001d4

00002128 <set_battery_low_routine>:

void set_battery_low_routine(void){
    2128:	b5f0      	push	{r4, r5, r6, r7, lr}
    212a:	b08b      	sub	sp, #44	; 0x2c

	// Enable PWM RED
	struct i2c_master_packet packet = {
    212c:	ae01      	add	r6, sp, #4
    212e:	220c      	movs	r2, #12
    2130:	2100      	movs	r1, #0
    2132:	0030      	movs	r0, r6
    2134:	f001 fdb0 	bl	3c98 <memset>
    2138:	2302      	movs	r3, #2
    213a:	2731      	movs	r7, #49	; 0x31
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_red_PWM,
	};
	
	// Enable Ramp (flash)
	struct i2c_master_packet set_ramp = {
    213c:	ad04      	add	r5, sp, #16
	struct i2c_master_packet packet = {
    213e:	8073      	strh	r3, [r6, #2]
    2140:	4b16      	ldr	r3, [pc, #88]	; (219c <set_battery_low_routine+0x74>)
	struct i2c_master_packet set_ramp = {
    2142:	220c      	movs	r2, #12
    2144:	2100      	movs	r1, #0
    2146:	0028      	movs	r0, r5
	struct i2c_master_packet packet = {
    2148:	6073      	str	r3, [r6, #4]
    214a:	8037      	strh	r7, [r6, #0]
	struct i2c_master_packet set_ramp = {
    214c:	f001 fda4 	bl	3c98 <memset>
    2150:	2302      	movs	r3, #2
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_low_routine_flash_period,
	};
	
	// Enable Pulse
	struct i2c_master_packet set_trise_tfall = {
    2152:	ac07      	add	r4, sp, #28
	struct i2c_master_packet set_ramp = {
    2154:	806b      	strh	r3, [r5, #2]
    2156:	4b12      	ldr	r3, [pc, #72]	; (21a0 <set_battery_low_routine+0x78>)
	struct i2c_master_packet set_trise_tfall = {
    2158:	220c      	movs	r2, #12
    215a:	2100      	movs	r1, #0
    215c:	0020      	movs	r0, r4
	struct i2c_master_packet set_ramp = {
    215e:	606b      	str	r3, [r5, #4]
    2160:	802f      	strh	r7, [r5, #0]
	struct i2c_master_packet set_trise_tfall = {
    2162:	f001 fd99 	bl	3c98 <memset>
    2166:	2302      	movs	r3, #2
    2168:	8063      	strh	r3, [r4, #2]
    216a:	4b0e      	ldr	r3, [pc, #56]	; (21a4 <set_battery_low_routine+0x7c>)
    216c:	8027      	strh	r7, [r4, #0]
    216e:	6063      	str	r3, [r4, #4]
		.data = buffer_set_low_routine_trise_tfall,
	};



	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    2170:	4f0d      	ldr	r7, [pc, #52]	; (21a8 <set_battery_low_routine+0x80>)
    2172:	0031      	movs	r1, r6
    2174:	0038      	movs	r0, r7
    2176:	f7fe fde5 	bl	d44 <i2c_master_write_packet_wait>
    217a:	2800      	cmp	r0, #0
    217c:	d1f8      	bne.n	2170 <set_battery_low_routine+0x48>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_ramp)) != STATUS_OK)
    217e:	0029      	movs	r1, r5
    2180:	0038      	movs	r0, r7
    2182:	f7fe fddf 	bl	d44 <i2c_master_write_packet_wait>
    2186:	2800      	cmp	r0, #0
    2188:	d1f9      	bne.n	217e <set_battery_low_routine+0x56>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_trise_tfall)) != STATUS_OK)
    218a:	0021      	movs	r1, r4
    218c:	0038      	movs	r0, r7
    218e:	f7fe fdd9 	bl	d44 <i2c_master_write_packet_wait>
    2192:	2800      	cmp	r0, #0
    2194:	d1f9      	bne.n	218a <set_battery_low_routine+0x62>
	{
	}
	
}
    2196:	b00b      	add	sp, #44	; 0x2c
    2198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	2000001f 	.word	0x2000001f
    21a0:	20000021 	.word	0x20000021
    21a4:	20000023 	.word	0x20000023
    21a8:	200001d4 	.word	0x200001d4

000021ac <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    21ac:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    21ae:	2364      	movs	r3, #100	; 0x64





void i2c_master_setup(void){
    21b0:	b570      	push	{r4, r5, r6, lr}
    21b2:	b08e      	sub	sp, #56	; 0x38
    21b4:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    21b6:	0389      	lsls	r1, r1, #14
    21b8:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    21ba:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    21bc:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    21be:	4b1e      	ldr	r3, [pc, #120]	; (2238 <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    21c0:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    21c2:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    21c4:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    21c6:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    21c8:	310a      	adds	r1, #10
    21ca:	4469      	add	r1, sp
    21cc:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    21ce:	a90c      	add	r1, sp, #48	; 0x30
    21d0:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    21d2:	2131      	movs	r1, #49	; 0x31
    21d4:	4469      	add	r1, sp
    21d6:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    21d8:	2132      	movs	r1, #50	; 0x32
    21da:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    21dc:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    21de:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    21e0:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    21e2:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    21e4:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    21e6:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    21e8:	700b      	strb	r3, [r1, #0]
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    21ea:	4e14      	ldr	r6, [pc, #80]	; (223c <i2c_master_setup+0x90>)
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    21ec:	33d7      	adds	r3, #215	; 0xd7
    21ee:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c_master.buffer_timeout = 10000;
    21f0:	4b13      	ldr	r3, [pc, #76]	; (2240 <i2c_master_setup+0x94>)
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    21f2:	4914      	ldr	r1, [pc, #80]	; (2244 <i2c_master_setup+0x98>)
    21f4:	0030      	movs	r0, r6
	config_i2c_master.buffer_timeout = 10000;
    21f6:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    21f8:	f7fe fbbc 	bl	974 <i2c_master_init>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    21fc:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    21fe:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2200:	69ec      	ldr	r4, [r5, #28]
    2202:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    2204:	d1fc      	bne.n	2200 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2206:	2302      	movs	r3, #2
    2208:	682a      	ldr	r2, [r5, #0]
    220a:	4313      	orrs	r3, r2
    220c:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    220e:	6830      	ldr	r0, [r6, #0]
    2210:	f7fe ff70 	bl	10f4 <_sercom_get_interrupt_vector>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2214:	231f      	movs	r3, #31
    2216:	4018      	ands	r0, r3
    2218:	3b1e      	subs	r3, #30
    221a:	4083      	lsls	r3, r0
    221c:	4a0a      	ldr	r2, [pc, #40]	; (2248 <i2c_master_setup+0x9c>)
    221e:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2220:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2222:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2224:	8b69      	ldrh	r1, [r5, #26]
    2226:	4211      	tst	r1, r2
    2228:	d103      	bne.n	2232 <i2c_master_setup+0x86>
		timeout_counter++;
    222a:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    222c:	4284      	cmp	r4, r0
    222e:	d3f9      	bcc.n	2224 <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2230:	836a      	strh	r2, [r5, #26]
	i2c_master_enable(&i2c_master_instance);
	
}
    2232:	b00e      	add	sp, #56	; 0x38
    2234:	bd70      	pop	{r4, r5, r6, pc}
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	00000d48 	.word	0x00000d48
    223c:	200001d4 	.word	0x200001d4
    2240:	00002710 	.word	0x00002710
    2244:	42001000 	.word	0x42001000
    2248:	e000e100 	.word	0xe000e100

0000224c <main>:
#include "system_state.h"

#include "system_logic.h"


int main(void) {
    224c:	b510      	push	{r4, lr}
  startup_sys_configs();
    224e:	f7fe fac3 	bl	7d8 <startup_sys_configs>
  while (true) {
    system_state();						// Get latest system_state
    2252:	f7fe fb2b 	bl	8ac <system_state>
    system_logic();						// Invoke System Logic
    2256:	f7fe f9a9 	bl	5ac <system_logic>
    225a:	e7fa      	b.n	2252 <main+0x6>

0000225c <__gnu_thumb1_case_uqi>:
    225c:	b402      	push	{r1}
    225e:	4671      	mov	r1, lr
    2260:	0849      	lsrs	r1, r1, #1
    2262:	0049      	lsls	r1, r1, #1
    2264:	5c09      	ldrb	r1, [r1, r0]
    2266:	0049      	lsls	r1, r1, #1
    2268:	448e      	add	lr, r1
    226a:	bc02      	pop	{r1}
    226c:	4770      	bx	lr
    226e:	46c0      	nop			; (mov r8, r8)

00002270 <__udivsi3>:
    2270:	2200      	movs	r2, #0
    2272:	0843      	lsrs	r3, r0, #1
    2274:	428b      	cmp	r3, r1
    2276:	d374      	bcc.n	2362 <__udivsi3+0xf2>
    2278:	0903      	lsrs	r3, r0, #4
    227a:	428b      	cmp	r3, r1
    227c:	d35f      	bcc.n	233e <__udivsi3+0xce>
    227e:	0a03      	lsrs	r3, r0, #8
    2280:	428b      	cmp	r3, r1
    2282:	d344      	bcc.n	230e <__udivsi3+0x9e>
    2284:	0b03      	lsrs	r3, r0, #12
    2286:	428b      	cmp	r3, r1
    2288:	d328      	bcc.n	22dc <__udivsi3+0x6c>
    228a:	0c03      	lsrs	r3, r0, #16
    228c:	428b      	cmp	r3, r1
    228e:	d30d      	bcc.n	22ac <__udivsi3+0x3c>
    2290:	22ff      	movs	r2, #255	; 0xff
    2292:	0209      	lsls	r1, r1, #8
    2294:	ba12      	rev	r2, r2
    2296:	0c03      	lsrs	r3, r0, #16
    2298:	428b      	cmp	r3, r1
    229a:	d302      	bcc.n	22a2 <__udivsi3+0x32>
    229c:	1212      	asrs	r2, r2, #8
    229e:	0209      	lsls	r1, r1, #8
    22a0:	d065      	beq.n	236e <__udivsi3+0xfe>
    22a2:	0b03      	lsrs	r3, r0, #12
    22a4:	428b      	cmp	r3, r1
    22a6:	d319      	bcc.n	22dc <__udivsi3+0x6c>
    22a8:	e000      	b.n	22ac <__udivsi3+0x3c>
    22aa:	0a09      	lsrs	r1, r1, #8
    22ac:	0bc3      	lsrs	r3, r0, #15
    22ae:	428b      	cmp	r3, r1
    22b0:	d301      	bcc.n	22b6 <__udivsi3+0x46>
    22b2:	03cb      	lsls	r3, r1, #15
    22b4:	1ac0      	subs	r0, r0, r3
    22b6:	4152      	adcs	r2, r2
    22b8:	0b83      	lsrs	r3, r0, #14
    22ba:	428b      	cmp	r3, r1
    22bc:	d301      	bcc.n	22c2 <__udivsi3+0x52>
    22be:	038b      	lsls	r3, r1, #14
    22c0:	1ac0      	subs	r0, r0, r3
    22c2:	4152      	adcs	r2, r2
    22c4:	0b43      	lsrs	r3, r0, #13
    22c6:	428b      	cmp	r3, r1
    22c8:	d301      	bcc.n	22ce <__udivsi3+0x5e>
    22ca:	034b      	lsls	r3, r1, #13
    22cc:	1ac0      	subs	r0, r0, r3
    22ce:	4152      	adcs	r2, r2
    22d0:	0b03      	lsrs	r3, r0, #12
    22d2:	428b      	cmp	r3, r1
    22d4:	d301      	bcc.n	22da <__udivsi3+0x6a>
    22d6:	030b      	lsls	r3, r1, #12
    22d8:	1ac0      	subs	r0, r0, r3
    22da:	4152      	adcs	r2, r2
    22dc:	0ac3      	lsrs	r3, r0, #11
    22de:	428b      	cmp	r3, r1
    22e0:	d301      	bcc.n	22e6 <__udivsi3+0x76>
    22e2:	02cb      	lsls	r3, r1, #11
    22e4:	1ac0      	subs	r0, r0, r3
    22e6:	4152      	adcs	r2, r2
    22e8:	0a83      	lsrs	r3, r0, #10
    22ea:	428b      	cmp	r3, r1
    22ec:	d301      	bcc.n	22f2 <__udivsi3+0x82>
    22ee:	028b      	lsls	r3, r1, #10
    22f0:	1ac0      	subs	r0, r0, r3
    22f2:	4152      	adcs	r2, r2
    22f4:	0a43      	lsrs	r3, r0, #9
    22f6:	428b      	cmp	r3, r1
    22f8:	d301      	bcc.n	22fe <__udivsi3+0x8e>
    22fa:	024b      	lsls	r3, r1, #9
    22fc:	1ac0      	subs	r0, r0, r3
    22fe:	4152      	adcs	r2, r2
    2300:	0a03      	lsrs	r3, r0, #8
    2302:	428b      	cmp	r3, r1
    2304:	d301      	bcc.n	230a <__udivsi3+0x9a>
    2306:	020b      	lsls	r3, r1, #8
    2308:	1ac0      	subs	r0, r0, r3
    230a:	4152      	adcs	r2, r2
    230c:	d2cd      	bcs.n	22aa <__udivsi3+0x3a>
    230e:	09c3      	lsrs	r3, r0, #7
    2310:	428b      	cmp	r3, r1
    2312:	d301      	bcc.n	2318 <__udivsi3+0xa8>
    2314:	01cb      	lsls	r3, r1, #7
    2316:	1ac0      	subs	r0, r0, r3
    2318:	4152      	adcs	r2, r2
    231a:	0983      	lsrs	r3, r0, #6
    231c:	428b      	cmp	r3, r1
    231e:	d301      	bcc.n	2324 <__udivsi3+0xb4>
    2320:	018b      	lsls	r3, r1, #6
    2322:	1ac0      	subs	r0, r0, r3
    2324:	4152      	adcs	r2, r2
    2326:	0943      	lsrs	r3, r0, #5
    2328:	428b      	cmp	r3, r1
    232a:	d301      	bcc.n	2330 <__udivsi3+0xc0>
    232c:	014b      	lsls	r3, r1, #5
    232e:	1ac0      	subs	r0, r0, r3
    2330:	4152      	adcs	r2, r2
    2332:	0903      	lsrs	r3, r0, #4
    2334:	428b      	cmp	r3, r1
    2336:	d301      	bcc.n	233c <__udivsi3+0xcc>
    2338:	010b      	lsls	r3, r1, #4
    233a:	1ac0      	subs	r0, r0, r3
    233c:	4152      	adcs	r2, r2
    233e:	08c3      	lsrs	r3, r0, #3
    2340:	428b      	cmp	r3, r1
    2342:	d301      	bcc.n	2348 <__udivsi3+0xd8>
    2344:	00cb      	lsls	r3, r1, #3
    2346:	1ac0      	subs	r0, r0, r3
    2348:	4152      	adcs	r2, r2
    234a:	0883      	lsrs	r3, r0, #2
    234c:	428b      	cmp	r3, r1
    234e:	d301      	bcc.n	2354 <__udivsi3+0xe4>
    2350:	008b      	lsls	r3, r1, #2
    2352:	1ac0      	subs	r0, r0, r3
    2354:	4152      	adcs	r2, r2
    2356:	0843      	lsrs	r3, r0, #1
    2358:	428b      	cmp	r3, r1
    235a:	d301      	bcc.n	2360 <__udivsi3+0xf0>
    235c:	004b      	lsls	r3, r1, #1
    235e:	1ac0      	subs	r0, r0, r3
    2360:	4152      	adcs	r2, r2
    2362:	1a41      	subs	r1, r0, r1
    2364:	d200      	bcs.n	2368 <__udivsi3+0xf8>
    2366:	4601      	mov	r1, r0
    2368:	4152      	adcs	r2, r2
    236a:	4610      	mov	r0, r2
    236c:	4770      	bx	lr
    236e:	e7ff      	b.n	2370 <__udivsi3+0x100>
    2370:	b501      	push	{r0, lr}
    2372:	2000      	movs	r0, #0
    2374:	f000 f806 	bl	2384 <__aeabi_idiv0>
    2378:	bd02      	pop	{r1, pc}
    237a:	46c0      	nop			; (mov r8, r8)

0000237c <__aeabi_uidivmod>:
    237c:	2900      	cmp	r1, #0
    237e:	d0f7      	beq.n	2370 <__udivsi3+0x100>
    2380:	e776      	b.n	2270 <__udivsi3>
    2382:	4770      	bx	lr

00002384 <__aeabi_idiv0>:
    2384:	4770      	bx	lr
    2386:	46c0      	nop			; (mov r8, r8)

00002388 <__aeabi_dadd>:
    2388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    238a:	4645      	mov	r5, r8
    238c:	46de      	mov	lr, fp
    238e:	4657      	mov	r7, sl
    2390:	464e      	mov	r6, r9
    2392:	030c      	lsls	r4, r1, #12
    2394:	b5e0      	push	{r5, r6, r7, lr}
    2396:	004e      	lsls	r6, r1, #1
    2398:	0fc9      	lsrs	r1, r1, #31
    239a:	4688      	mov	r8, r1
    239c:	000d      	movs	r5, r1
    239e:	0a61      	lsrs	r1, r4, #9
    23a0:	0f44      	lsrs	r4, r0, #29
    23a2:	430c      	orrs	r4, r1
    23a4:	00c7      	lsls	r7, r0, #3
    23a6:	0319      	lsls	r1, r3, #12
    23a8:	0058      	lsls	r0, r3, #1
    23aa:	0fdb      	lsrs	r3, r3, #31
    23ac:	469b      	mov	fp, r3
    23ae:	0a4b      	lsrs	r3, r1, #9
    23b0:	0f51      	lsrs	r1, r2, #29
    23b2:	430b      	orrs	r3, r1
    23b4:	0d76      	lsrs	r6, r6, #21
    23b6:	0d40      	lsrs	r0, r0, #21
    23b8:	0019      	movs	r1, r3
    23ba:	00d2      	lsls	r2, r2, #3
    23bc:	45d8      	cmp	r8, fp
    23be:	d100      	bne.n	23c2 <__aeabi_dadd+0x3a>
    23c0:	e0ae      	b.n	2520 <__aeabi_dadd+0x198>
    23c2:	1a35      	subs	r5, r6, r0
    23c4:	2d00      	cmp	r5, #0
    23c6:	dc00      	bgt.n	23ca <__aeabi_dadd+0x42>
    23c8:	e0f6      	b.n	25b8 <__aeabi_dadd+0x230>
    23ca:	2800      	cmp	r0, #0
    23cc:	d10f      	bne.n	23ee <__aeabi_dadd+0x66>
    23ce:	4313      	orrs	r3, r2
    23d0:	d100      	bne.n	23d4 <__aeabi_dadd+0x4c>
    23d2:	e0db      	b.n	258c <__aeabi_dadd+0x204>
    23d4:	1e6b      	subs	r3, r5, #1
    23d6:	2b00      	cmp	r3, #0
    23d8:	d000      	beq.n	23dc <__aeabi_dadd+0x54>
    23da:	e137      	b.n	264c <__aeabi_dadd+0x2c4>
    23dc:	1aba      	subs	r2, r7, r2
    23de:	4297      	cmp	r7, r2
    23e0:	41bf      	sbcs	r7, r7
    23e2:	1a64      	subs	r4, r4, r1
    23e4:	427f      	negs	r7, r7
    23e6:	1be4      	subs	r4, r4, r7
    23e8:	2601      	movs	r6, #1
    23ea:	0017      	movs	r7, r2
    23ec:	e024      	b.n	2438 <__aeabi_dadd+0xb0>
    23ee:	4bc6      	ldr	r3, [pc, #792]	; (2708 <__aeabi_dadd+0x380>)
    23f0:	429e      	cmp	r6, r3
    23f2:	d04d      	beq.n	2490 <__aeabi_dadd+0x108>
    23f4:	2380      	movs	r3, #128	; 0x80
    23f6:	041b      	lsls	r3, r3, #16
    23f8:	4319      	orrs	r1, r3
    23fa:	2d38      	cmp	r5, #56	; 0x38
    23fc:	dd00      	ble.n	2400 <__aeabi_dadd+0x78>
    23fe:	e107      	b.n	2610 <__aeabi_dadd+0x288>
    2400:	2d1f      	cmp	r5, #31
    2402:	dd00      	ble.n	2406 <__aeabi_dadd+0x7e>
    2404:	e138      	b.n	2678 <__aeabi_dadd+0x2f0>
    2406:	2020      	movs	r0, #32
    2408:	1b43      	subs	r3, r0, r5
    240a:	469a      	mov	sl, r3
    240c:	000b      	movs	r3, r1
    240e:	4650      	mov	r0, sl
    2410:	4083      	lsls	r3, r0
    2412:	4699      	mov	r9, r3
    2414:	0013      	movs	r3, r2
    2416:	4648      	mov	r0, r9
    2418:	40eb      	lsrs	r3, r5
    241a:	4318      	orrs	r0, r3
    241c:	0003      	movs	r3, r0
    241e:	4650      	mov	r0, sl
    2420:	4082      	lsls	r2, r0
    2422:	1e50      	subs	r0, r2, #1
    2424:	4182      	sbcs	r2, r0
    2426:	40e9      	lsrs	r1, r5
    2428:	431a      	orrs	r2, r3
    242a:	1aba      	subs	r2, r7, r2
    242c:	1a61      	subs	r1, r4, r1
    242e:	4297      	cmp	r7, r2
    2430:	41a4      	sbcs	r4, r4
    2432:	0017      	movs	r7, r2
    2434:	4264      	negs	r4, r4
    2436:	1b0c      	subs	r4, r1, r4
    2438:	0223      	lsls	r3, r4, #8
    243a:	d562      	bpl.n	2502 <__aeabi_dadd+0x17a>
    243c:	0264      	lsls	r4, r4, #9
    243e:	0a65      	lsrs	r5, r4, #9
    2440:	2d00      	cmp	r5, #0
    2442:	d100      	bne.n	2446 <__aeabi_dadd+0xbe>
    2444:	e0df      	b.n	2606 <__aeabi_dadd+0x27e>
    2446:	0028      	movs	r0, r5
    2448:	f001 fbe4 	bl	3c14 <__clzsi2>
    244c:	0003      	movs	r3, r0
    244e:	3b08      	subs	r3, #8
    2450:	2b1f      	cmp	r3, #31
    2452:	dd00      	ble.n	2456 <__aeabi_dadd+0xce>
    2454:	e0d2      	b.n	25fc <__aeabi_dadd+0x274>
    2456:	2220      	movs	r2, #32
    2458:	003c      	movs	r4, r7
    245a:	1ad2      	subs	r2, r2, r3
    245c:	409d      	lsls	r5, r3
    245e:	40d4      	lsrs	r4, r2
    2460:	409f      	lsls	r7, r3
    2462:	4325      	orrs	r5, r4
    2464:	429e      	cmp	r6, r3
    2466:	dd00      	ble.n	246a <__aeabi_dadd+0xe2>
    2468:	e0c4      	b.n	25f4 <__aeabi_dadd+0x26c>
    246a:	1b9e      	subs	r6, r3, r6
    246c:	1c73      	adds	r3, r6, #1
    246e:	2b1f      	cmp	r3, #31
    2470:	dd00      	ble.n	2474 <__aeabi_dadd+0xec>
    2472:	e0f1      	b.n	2658 <__aeabi_dadd+0x2d0>
    2474:	2220      	movs	r2, #32
    2476:	0038      	movs	r0, r7
    2478:	0029      	movs	r1, r5
    247a:	1ad2      	subs	r2, r2, r3
    247c:	40d8      	lsrs	r0, r3
    247e:	4091      	lsls	r1, r2
    2480:	4097      	lsls	r7, r2
    2482:	002c      	movs	r4, r5
    2484:	4301      	orrs	r1, r0
    2486:	1e78      	subs	r0, r7, #1
    2488:	4187      	sbcs	r7, r0
    248a:	40dc      	lsrs	r4, r3
    248c:	2600      	movs	r6, #0
    248e:	430f      	orrs	r7, r1
    2490:	077b      	lsls	r3, r7, #29
    2492:	d009      	beq.n	24a8 <__aeabi_dadd+0x120>
    2494:	230f      	movs	r3, #15
    2496:	403b      	ands	r3, r7
    2498:	2b04      	cmp	r3, #4
    249a:	d005      	beq.n	24a8 <__aeabi_dadd+0x120>
    249c:	1d3b      	adds	r3, r7, #4
    249e:	42bb      	cmp	r3, r7
    24a0:	41bf      	sbcs	r7, r7
    24a2:	427f      	negs	r7, r7
    24a4:	19e4      	adds	r4, r4, r7
    24a6:	001f      	movs	r7, r3
    24a8:	0223      	lsls	r3, r4, #8
    24aa:	d52c      	bpl.n	2506 <__aeabi_dadd+0x17e>
    24ac:	4b96      	ldr	r3, [pc, #600]	; (2708 <__aeabi_dadd+0x380>)
    24ae:	3601      	adds	r6, #1
    24b0:	429e      	cmp	r6, r3
    24b2:	d100      	bne.n	24b6 <__aeabi_dadd+0x12e>
    24b4:	e09a      	b.n	25ec <__aeabi_dadd+0x264>
    24b6:	4645      	mov	r5, r8
    24b8:	4b94      	ldr	r3, [pc, #592]	; (270c <__aeabi_dadd+0x384>)
    24ba:	08ff      	lsrs	r7, r7, #3
    24bc:	401c      	ands	r4, r3
    24be:	0760      	lsls	r0, r4, #29
    24c0:	0576      	lsls	r6, r6, #21
    24c2:	0264      	lsls	r4, r4, #9
    24c4:	4307      	orrs	r7, r0
    24c6:	0b24      	lsrs	r4, r4, #12
    24c8:	0d76      	lsrs	r6, r6, #21
    24ca:	2100      	movs	r1, #0
    24cc:	0324      	lsls	r4, r4, #12
    24ce:	0b23      	lsrs	r3, r4, #12
    24d0:	0d0c      	lsrs	r4, r1, #20
    24d2:	4a8f      	ldr	r2, [pc, #572]	; (2710 <__aeabi_dadd+0x388>)
    24d4:	0524      	lsls	r4, r4, #20
    24d6:	431c      	orrs	r4, r3
    24d8:	4014      	ands	r4, r2
    24da:	0533      	lsls	r3, r6, #20
    24dc:	4323      	orrs	r3, r4
    24de:	005b      	lsls	r3, r3, #1
    24e0:	07ed      	lsls	r5, r5, #31
    24e2:	085b      	lsrs	r3, r3, #1
    24e4:	432b      	orrs	r3, r5
    24e6:	0038      	movs	r0, r7
    24e8:	0019      	movs	r1, r3
    24ea:	bc3c      	pop	{r2, r3, r4, r5}
    24ec:	4690      	mov	r8, r2
    24ee:	4699      	mov	r9, r3
    24f0:	46a2      	mov	sl, r4
    24f2:	46ab      	mov	fp, r5
    24f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24f6:	4664      	mov	r4, ip
    24f8:	4304      	orrs	r4, r0
    24fa:	d100      	bne.n	24fe <__aeabi_dadd+0x176>
    24fc:	e211      	b.n	2922 <__aeabi_dadd+0x59a>
    24fe:	0004      	movs	r4, r0
    2500:	4667      	mov	r7, ip
    2502:	077b      	lsls	r3, r7, #29
    2504:	d1c6      	bne.n	2494 <__aeabi_dadd+0x10c>
    2506:	4645      	mov	r5, r8
    2508:	0760      	lsls	r0, r4, #29
    250a:	08ff      	lsrs	r7, r7, #3
    250c:	4307      	orrs	r7, r0
    250e:	08e4      	lsrs	r4, r4, #3
    2510:	4b7d      	ldr	r3, [pc, #500]	; (2708 <__aeabi_dadd+0x380>)
    2512:	429e      	cmp	r6, r3
    2514:	d030      	beq.n	2578 <__aeabi_dadd+0x1f0>
    2516:	0324      	lsls	r4, r4, #12
    2518:	0576      	lsls	r6, r6, #21
    251a:	0b24      	lsrs	r4, r4, #12
    251c:	0d76      	lsrs	r6, r6, #21
    251e:	e7d4      	b.n	24ca <__aeabi_dadd+0x142>
    2520:	1a33      	subs	r3, r6, r0
    2522:	469a      	mov	sl, r3
    2524:	2b00      	cmp	r3, #0
    2526:	dd78      	ble.n	261a <__aeabi_dadd+0x292>
    2528:	2800      	cmp	r0, #0
    252a:	d031      	beq.n	2590 <__aeabi_dadd+0x208>
    252c:	4876      	ldr	r0, [pc, #472]	; (2708 <__aeabi_dadd+0x380>)
    252e:	4286      	cmp	r6, r0
    2530:	d0ae      	beq.n	2490 <__aeabi_dadd+0x108>
    2532:	2080      	movs	r0, #128	; 0x80
    2534:	0400      	lsls	r0, r0, #16
    2536:	4301      	orrs	r1, r0
    2538:	4653      	mov	r3, sl
    253a:	2b38      	cmp	r3, #56	; 0x38
    253c:	dc00      	bgt.n	2540 <__aeabi_dadd+0x1b8>
    253e:	e0e9      	b.n	2714 <__aeabi_dadd+0x38c>
    2540:	430a      	orrs	r2, r1
    2542:	1e51      	subs	r1, r2, #1
    2544:	418a      	sbcs	r2, r1
    2546:	2100      	movs	r1, #0
    2548:	19d2      	adds	r2, r2, r7
    254a:	42ba      	cmp	r2, r7
    254c:	41bf      	sbcs	r7, r7
    254e:	1909      	adds	r1, r1, r4
    2550:	427c      	negs	r4, r7
    2552:	0017      	movs	r7, r2
    2554:	190c      	adds	r4, r1, r4
    2556:	0223      	lsls	r3, r4, #8
    2558:	d5d3      	bpl.n	2502 <__aeabi_dadd+0x17a>
    255a:	4b6b      	ldr	r3, [pc, #428]	; (2708 <__aeabi_dadd+0x380>)
    255c:	3601      	adds	r6, #1
    255e:	429e      	cmp	r6, r3
    2560:	d100      	bne.n	2564 <__aeabi_dadd+0x1dc>
    2562:	e13a      	b.n	27da <__aeabi_dadd+0x452>
    2564:	2001      	movs	r0, #1
    2566:	4b69      	ldr	r3, [pc, #420]	; (270c <__aeabi_dadd+0x384>)
    2568:	401c      	ands	r4, r3
    256a:	087b      	lsrs	r3, r7, #1
    256c:	4007      	ands	r7, r0
    256e:	431f      	orrs	r7, r3
    2570:	07e0      	lsls	r0, r4, #31
    2572:	4307      	orrs	r7, r0
    2574:	0864      	lsrs	r4, r4, #1
    2576:	e78b      	b.n	2490 <__aeabi_dadd+0x108>
    2578:	0023      	movs	r3, r4
    257a:	433b      	orrs	r3, r7
    257c:	d100      	bne.n	2580 <__aeabi_dadd+0x1f8>
    257e:	e1cb      	b.n	2918 <__aeabi_dadd+0x590>
    2580:	2280      	movs	r2, #128	; 0x80
    2582:	0312      	lsls	r2, r2, #12
    2584:	4314      	orrs	r4, r2
    2586:	0324      	lsls	r4, r4, #12
    2588:	0b24      	lsrs	r4, r4, #12
    258a:	e79e      	b.n	24ca <__aeabi_dadd+0x142>
    258c:	002e      	movs	r6, r5
    258e:	e77f      	b.n	2490 <__aeabi_dadd+0x108>
    2590:	0008      	movs	r0, r1
    2592:	4310      	orrs	r0, r2
    2594:	d100      	bne.n	2598 <__aeabi_dadd+0x210>
    2596:	e0b4      	b.n	2702 <__aeabi_dadd+0x37a>
    2598:	1e58      	subs	r0, r3, #1
    259a:	2800      	cmp	r0, #0
    259c:	d000      	beq.n	25a0 <__aeabi_dadd+0x218>
    259e:	e0de      	b.n	275e <__aeabi_dadd+0x3d6>
    25a0:	18ba      	adds	r2, r7, r2
    25a2:	42ba      	cmp	r2, r7
    25a4:	419b      	sbcs	r3, r3
    25a6:	1864      	adds	r4, r4, r1
    25a8:	425b      	negs	r3, r3
    25aa:	18e4      	adds	r4, r4, r3
    25ac:	0017      	movs	r7, r2
    25ae:	2601      	movs	r6, #1
    25b0:	0223      	lsls	r3, r4, #8
    25b2:	d5a6      	bpl.n	2502 <__aeabi_dadd+0x17a>
    25b4:	2602      	movs	r6, #2
    25b6:	e7d5      	b.n	2564 <__aeabi_dadd+0x1dc>
    25b8:	2d00      	cmp	r5, #0
    25ba:	d16e      	bne.n	269a <__aeabi_dadd+0x312>
    25bc:	1c70      	adds	r0, r6, #1
    25be:	0540      	lsls	r0, r0, #21
    25c0:	0d40      	lsrs	r0, r0, #21
    25c2:	2801      	cmp	r0, #1
    25c4:	dc00      	bgt.n	25c8 <__aeabi_dadd+0x240>
    25c6:	e0f9      	b.n	27bc <__aeabi_dadd+0x434>
    25c8:	1ab8      	subs	r0, r7, r2
    25ca:	4684      	mov	ip, r0
    25cc:	4287      	cmp	r7, r0
    25ce:	4180      	sbcs	r0, r0
    25d0:	1ae5      	subs	r5, r4, r3
    25d2:	4240      	negs	r0, r0
    25d4:	1a2d      	subs	r5, r5, r0
    25d6:	0228      	lsls	r0, r5, #8
    25d8:	d400      	bmi.n	25dc <__aeabi_dadd+0x254>
    25da:	e089      	b.n	26f0 <__aeabi_dadd+0x368>
    25dc:	1bd7      	subs	r7, r2, r7
    25de:	42ba      	cmp	r2, r7
    25e0:	4192      	sbcs	r2, r2
    25e2:	1b1c      	subs	r4, r3, r4
    25e4:	4252      	negs	r2, r2
    25e6:	1aa5      	subs	r5, r4, r2
    25e8:	46d8      	mov	r8, fp
    25ea:	e729      	b.n	2440 <__aeabi_dadd+0xb8>
    25ec:	4645      	mov	r5, r8
    25ee:	2400      	movs	r4, #0
    25f0:	2700      	movs	r7, #0
    25f2:	e76a      	b.n	24ca <__aeabi_dadd+0x142>
    25f4:	4c45      	ldr	r4, [pc, #276]	; (270c <__aeabi_dadd+0x384>)
    25f6:	1af6      	subs	r6, r6, r3
    25f8:	402c      	ands	r4, r5
    25fa:	e749      	b.n	2490 <__aeabi_dadd+0x108>
    25fc:	003d      	movs	r5, r7
    25fe:	3828      	subs	r0, #40	; 0x28
    2600:	4085      	lsls	r5, r0
    2602:	2700      	movs	r7, #0
    2604:	e72e      	b.n	2464 <__aeabi_dadd+0xdc>
    2606:	0038      	movs	r0, r7
    2608:	f001 fb04 	bl	3c14 <__clzsi2>
    260c:	3020      	adds	r0, #32
    260e:	e71d      	b.n	244c <__aeabi_dadd+0xc4>
    2610:	430a      	orrs	r2, r1
    2612:	1e51      	subs	r1, r2, #1
    2614:	418a      	sbcs	r2, r1
    2616:	2100      	movs	r1, #0
    2618:	e707      	b.n	242a <__aeabi_dadd+0xa2>
    261a:	2b00      	cmp	r3, #0
    261c:	d000      	beq.n	2620 <__aeabi_dadd+0x298>
    261e:	e0f3      	b.n	2808 <__aeabi_dadd+0x480>
    2620:	1c70      	adds	r0, r6, #1
    2622:	0543      	lsls	r3, r0, #21
    2624:	0d5b      	lsrs	r3, r3, #21
    2626:	2b01      	cmp	r3, #1
    2628:	dc00      	bgt.n	262c <__aeabi_dadd+0x2a4>
    262a:	e0ad      	b.n	2788 <__aeabi_dadd+0x400>
    262c:	4b36      	ldr	r3, [pc, #216]	; (2708 <__aeabi_dadd+0x380>)
    262e:	4298      	cmp	r0, r3
    2630:	d100      	bne.n	2634 <__aeabi_dadd+0x2ac>
    2632:	e0d1      	b.n	27d8 <__aeabi_dadd+0x450>
    2634:	18ba      	adds	r2, r7, r2
    2636:	42ba      	cmp	r2, r7
    2638:	41bf      	sbcs	r7, r7
    263a:	1864      	adds	r4, r4, r1
    263c:	427f      	negs	r7, r7
    263e:	19e4      	adds	r4, r4, r7
    2640:	07e7      	lsls	r7, r4, #31
    2642:	0852      	lsrs	r2, r2, #1
    2644:	4317      	orrs	r7, r2
    2646:	0864      	lsrs	r4, r4, #1
    2648:	0006      	movs	r6, r0
    264a:	e721      	b.n	2490 <__aeabi_dadd+0x108>
    264c:	482e      	ldr	r0, [pc, #184]	; (2708 <__aeabi_dadd+0x380>)
    264e:	4285      	cmp	r5, r0
    2650:	d100      	bne.n	2654 <__aeabi_dadd+0x2cc>
    2652:	e093      	b.n	277c <__aeabi_dadd+0x3f4>
    2654:	001d      	movs	r5, r3
    2656:	e6d0      	b.n	23fa <__aeabi_dadd+0x72>
    2658:	0029      	movs	r1, r5
    265a:	3e1f      	subs	r6, #31
    265c:	40f1      	lsrs	r1, r6
    265e:	2b20      	cmp	r3, #32
    2660:	d100      	bne.n	2664 <__aeabi_dadd+0x2dc>
    2662:	e08d      	b.n	2780 <__aeabi_dadd+0x3f8>
    2664:	2240      	movs	r2, #64	; 0x40
    2666:	1ad3      	subs	r3, r2, r3
    2668:	409d      	lsls	r5, r3
    266a:	432f      	orrs	r7, r5
    266c:	1e7d      	subs	r5, r7, #1
    266e:	41af      	sbcs	r7, r5
    2670:	2400      	movs	r4, #0
    2672:	430f      	orrs	r7, r1
    2674:	2600      	movs	r6, #0
    2676:	e744      	b.n	2502 <__aeabi_dadd+0x17a>
    2678:	002b      	movs	r3, r5
    267a:	0008      	movs	r0, r1
    267c:	3b20      	subs	r3, #32
    267e:	40d8      	lsrs	r0, r3
    2680:	0003      	movs	r3, r0
    2682:	2d20      	cmp	r5, #32
    2684:	d100      	bne.n	2688 <__aeabi_dadd+0x300>
    2686:	e07d      	b.n	2784 <__aeabi_dadd+0x3fc>
    2688:	2040      	movs	r0, #64	; 0x40
    268a:	1b45      	subs	r5, r0, r5
    268c:	40a9      	lsls	r1, r5
    268e:	430a      	orrs	r2, r1
    2690:	1e51      	subs	r1, r2, #1
    2692:	418a      	sbcs	r2, r1
    2694:	2100      	movs	r1, #0
    2696:	431a      	orrs	r2, r3
    2698:	e6c7      	b.n	242a <__aeabi_dadd+0xa2>
    269a:	2e00      	cmp	r6, #0
    269c:	d050      	beq.n	2740 <__aeabi_dadd+0x3b8>
    269e:	4e1a      	ldr	r6, [pc, #104]	; (2708 <__aeabi_dadd+0x380>)
    26a0:	42b0      	cmp	r0, r6
    26a2:	d057      	beq.n	2754 <__aeabi_dadd+0x3cc>
    26a4:	2680      	movs	r6, #128	; 0x80
    26a6:	426b      	negs	r3, r5
    26a8:	4699      	mov	r9, r3
    26aa:	0436      	lsls	r6, r6, #16
    26ac:	4334      	orrs	r4, r6
    26ae:	464b      	mov	r3, r9
    26b0:	2b38      	cmp	r3, #56	; 0x38
    26b2:	dd00      	ble.n	26b6 <__aeabi_dadd+0x32e>
    26b4:	e0d6      	b.n	2864 <__aeabi_dadd+0x4dc>
    26b6:	2b1f      	cmp	r3, #31
    26b8:	dd00      	ble.n	26bc <__aeabi_dadd+0x334>
    26ba:	e135      	b.n	2928 <__aeabi_dadd+0x5a0>
    26bc:	2620      	movs	r6, #32
    26be:	1af5      	subs	r5, r6, r3
    26c0:	0026      	movs	r6, r4
    26c2:	40ae      	lsls	r6, r5
    26c4:	46b2      	mov	sl, r6
    26c6:	003e      	movs	r6, r7
    26c8:	40de      	lsrs	r6, r3
    26ca:	46ac      	mov	ip, r5
    26cc:	0035      	movs	r5, r6
    26ce:	4656      	mov	r6, sl
    26d0:	432e      	orrs	r6, r5
    26d2:	4665      	mov	r5, ip
    26d4:	40af      	lsls	r7, r5
    26d6:	1e7d      	subs	r5, r7, #1
    26d8:	41af      	sbcs	r7, r5
    26da:	40dc      	lsrs	r4, r3
    26dc:	4337      	orrs	r7, r6
    26de:	1bd7      	subs	r7, r2, r7
    26e0:	42ba      	cmp	r2, r7
    26e2:	4192      	sbcs	r2, r2
    26e4:	1b0c      	subs	r4, r1, r4
    26e6:	4252      	negs	r2, r2
    26e8:	1aa4      	subs	r4, r4, r2
    26ea:	0006      	movs	r6, r0
    26ec:	46d8      	mov	r8, fp
    26ee:	e6a3      	b.n	2438 <__aeabi_dadd+0xb0>
    26f0:	4664      	mov	r4, ip
    26f2:	4667      	mov	r7, ip
    26f4:	432c      	orrs	r4, r5
    26f6:	d000      	beq.n	26fa <__aeabi_dadd+0x372>
    26f8:	e6a2      	b.n	2440 <__aeabi_dadd+0xb8>
    26fa:	2500      	movs	r5, #0
    26fc:	2600      	movs	r6, #0
    26fe:	2700      	movs	r7, #0
    2700:	e706      	b.n	2510 <__aeabi_dadd+0x188>
    2702:	001e      	movs	r6, r3
    2704:	e6c4      	b.n	2490 <__aeabi_dadd+0x108>
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	000007ff 	.word	0x000007ff
    270c:	ff7fffff 	.word	0xff7fffff
    2710:	800fffff 	.word	0x800fffff
    2714:	2b1f      	cmp	r3, #31
    2716:	dc63      	bgt.n	27e0 <__aeabi_dadd+0x458>
    2718:	2020      	movs	r0, #32
    271a:	1ac3      	subs	r3, r0, r3
    271c:	0008      	movs	r0, r1
    271e:	4098      	lsls	r0, r3
    2720:	469c      	mov	ip, r3
    2722:	4683      	mov	fp, r0
    2724:	4653      	mov	r3, sl
    2726:	0010      	movs	r0, r2
    2728:	40d8      	lsrs	r0, r3
    272a:	0003      	movs	r3, r0
    272c:	4658      	mov	r0, fp
    272e:	4318      	orrs	r0, r3
    2730:	4663      	mov	r3, ip
    2732:	409a      	lsls	r2, r3
    2734:	1e53      	subs	r3, r2, #1
    2736:	419a      	sbcs	r2, r3
    2738:	4653      	mov	r3, sl
    273a:	4302      	orrs	r2, r0
    273c:	40d9      	lsrs	r1, r3
    273e:	e703      	b.n	2548 <__aeabi_dadd+0x1c0>
    2740:	0026      	movs	r6, r4
    2742:	433e      	orrs	r6, r7
    2744:	d006      	beq.n	2754 <__aeabi_dadd+0x3cc>
    2746:	43eb      	mvns	r3, r5
    2748:	4699      	mov	r9, r3
    274a:	2b00      	cmp	r3, #0
    274c:	d0c7      	beq.n	26de <__aeabi_dadd+0x356>
    274e:	4e94      	ldr	r6, [pc, #592]	; (29a0 <__aeabi_dadd+0x618>)
    2750:	42b0      	cmp	r0, r6
    2752:	d1ac      	bne.n	26ae <__aeabi_dadd+0x326>
    2754:	000c      	movs	r4, r1
    2756:	0017      	movs	r7, r2
    2758:	0006      	movs	r6, r0
    275a:	46d8      	mov	r8, fp
    275c:	e698      	b.n	2490 <__aeabi_dadd+0x108>
    275e:	4b90      	ldr	r3, [pc, #576]	; (29a0 <__aeabi_dadd+0x618>)
    2760:	459a      	cmp	sl, r3
    2762:	d00b      	beq.n	277c <__aeabi_dadd+0x3f4>
    2764:	4682      	mov	sl, r0
    2766:	e6e7      	b.n	2538 <__aeabi_dadd+0x1b0>
    2768:	2800      	cmp	r0, #0
    276a:	d000      	beq.n	276e <__aeabi_dadd+0x3e6>
    276c:	e09e      	b.n	28ac <__aeabi_dadd+0x524>
    276e:	0018      	movs	r0, r3
    2770:	4310      	orrs	r0, r2
    2772:	d100      	bne.n	2776 <__aeabi_dadd+0x3ee>
    2774:	e0e9      	b.n	294a <__aeabi_dadd+0x5c2>
    2776:	001c      	movs	r4, r3
    2778:	0017      	movs	r7, r2
    277a:	46d8      	mov	r8, fp
    277c:	4e88      	ldr	r6, [pc, #544]	; (29a0 <__aeabi_dadd+0x618>)
    277e:	e687      	b.n	2490 <__aeabi_dadd+0x108>
    2780:	2500      	movs	r5, #0
    2782:	e772      	b.n	266a <__aeabi_dadd+0x2e2>
    2784:	2100      	movs	r1, #0
    2786:	e782      	b.n	268e <__aeabi_dadd+0x306>
    2788:	0023      	movs	r3, r4
    278a:	433b      	orrs	r3, r7
    278c:	2e00      	cmp	r6, #0
    278e:	d000      	beq.n	2792 <__aeabi_dadd+0x40a>
    2790:	e0ab      	b.n	28ea <__aeabi_dadd+0x562>
    2792:	2b00      	cmp	r3, #0
    2794:	d100      	bne.n	2798 <__aeabi_dadd+0x410>
    2796:	e0e7      	b.n	2968 <__aeabi_dadd+0x5e0>
    2798:	000b      	movs	r3, r1
    279a:	4313      	orrs	r3, r2
    279c:	d100      	bne.n	27a0 <__aeabi_dadd+0x418>
    279e:	e677      	b.n	2490 <__aeabi_dadd+0x108>
    27a0:	18ba      	adds	r2, r7, r2
    27a2:	42ba      	cmp	r2, r7
    27a4:	41bf      	sbcs	r7, r7
    27a6:	1864      	adds	r4, r4, r1
    27a8:	427f      	negs	r7, r7
    27aa:	19e4      	adds	r4, r4, r7
    27ac:	0223      	lsls	r3, r4, #8
    27ae:	d400      	bmi.n	27b2 <__aeabi_dadd+0x42a>
    27b0:	e0f2      	b.n	2998 <__aeabi_dadd+0x610>
    27b2:	4b7c      	ldr	r3, [pc, #496]	; (29a4 <__aeabi_dadd+0x61c>)
    27b4:	0017      	movs	r7, r2
    27b6:	401c      	ands	r4, r3
    27b8:	0006      	movs	r6, r0
    27ba:	e669      	b.n	2490 <__aeabi_dadd+0x108>
    27bc:	0020      	movs	r0, r4
    27be:	4338      	orrs	r0, r7
    27c0:	2e00      	cmp	r6, #0
    27c2:	d1d1      	bne.n	2768 <__aeabi_dadd+0x3e0>
    27c4:	2800      	cmp	r0, #0
    27c6:	d15b      	bne.n	2880 <__aeabi_dadd+0x4f8>
    27c8:	001c      	movs	r4, r3
    27ca:	4314      	orrs	r4, r2
    27cc:	d100      	bne.n	27d0 <__aeabi_dadd+0x448>
    27ce:	e0a8      	b.n	2922 <__aeabi_dadd+0x59a>
    27d0:	001c      	movs	r4, r3
    27d2:	0017      	movs	r7, r2
    27d4:	46d8      	mov	r8, fp
    27d6:	e65b      	b.n	2490 <__aeabi_dadd+0x108>
    27d8:	0006      	movs	r6, r0
    27da:	2400      	movs	r4, #0
    27dc:	2700      	movs	r7, #0
    27de:	e697      	b.n	2510 <__aeabi_dadd+0x188>
    27e0:	4650      	mov	r0, sl
    27e2:	000b      	movs	r3, r1
    27e4:	3820      	subs	r0, #32
    27e6:	40c3      	lsrs	r3, r0
    27e8:	4699      	mov	r9, r3
    27ea:	4653      	mov	r3, sl
    27ec:	2b20      	cmp	r3, #32
    27ee:	d100      	bne.n	27f2 <__aeabi_dadd+0x46a>
    27f0:	e095      	b.n	291e <__aeabi_dadd+0x596>
    27f2:	2340      	movs	r3, #64	; 0x40
    27f4:	4650      	mov	r0, sl
    27f6:	1a1b      	subs	r3, r3, r0
    27f8:	4099      	lsls	r1, r3
    27fa:	430a      	orrs	r2, r1
    27fc:	1e51      	subs	r1, r2, #1
    27fe:	418a      	sbcs	r2, r1
    2800:	464b      	mov	r3, r9
    2802:	2100      	movs	r1, #0
    2804:	431a      	orrs	r2, r3
    2806:	e69f      	b.n	2548 <__aeabi_dadd+0x1c0>
    2808:	2e00      	cmp	r6, #0
    280a:	d130      	bne.n	286e <__aeabi_dadd+0x4e6>
    280c:	0026      	movs	r6, r4
    280e:	433e      	orrs	r6, r7
    2810:	d067      	beq.n	28e2 <__aeabi_dadd+0x55a>
    2812:	43db      	mvns	r3, r3
    2814:	469a      	mov	sl, r3
    2816:	2b00      	cmp	r3, #0
    2818:	d01c      	beq.n	2854 <__aeabi_dadd+0x4cc>
    281a:	4e61      	ldr	r6, [pc, #388]	; (29a0 <__aeabi_dadd+0x618>)
    281c:	42b0      	cmp	r0, r6
    281e:	d060      	beq.n	28e2 <__aeabi_dadd+0x55a>
    2820:	4653      	mov	r3, sl
    2822:	2b38      	cmp	r3, #56	; 0x38
    2824:	dd00      	ble.n	2828 <__aeabi_dadd+0x4a0>
    2826:	e096      	b.n	2956 <__aeabi_dadd+0x5ce>
    2828:	2b1f      	cmp	r3, #31
    282a:	dd00      	ble.n	282e <__aeabi_dadd+0x4a6>
    282c:	e09f      	b.n	296e <__aeabi_dadd+0x5e6>
    282e:	2620      	movs	r6, #32
    2830:	1af3      	subs	r3, r6, r3
    2832:	0026      	movs	r6, r4
    2834:	409e      	lsls	r6, r3
    2836:	469c      	mov	ip, r3
    2838:	46b3      	mov	fp, r6
    283a:	4653      	mov	r3, sl
    283c:	003e      	movs	r6, r7
    283e:	40de      	lsrs	r6, r3
    2840:	0033      	movs	r3, r6
    2842:	465e      	mov	r6, fp
    2844:	431e      	orrs	r6, r3
    2846:	4663      	mov	r3, ip
    2848:	409f      	lsls	r7, r3
    284a:	1e7b      	subs	r3, r7, #1
    284c:	419f      	sbcs	r7, r3
    284e:	4653      	mov	r3, sl
    2850:	40dc      	lsrs	r4, r3
    2852:	4337      	orrs	r7, r6
    2854:	18bf      	adds	r7, r7, r2
    2856:	4297      	cmp	r7, r2
    2858:	4192      	sbcs	r2, r2
    285a:	1864      	adds	r4, r4, r1
    285c:	4252      	negs	r2, r2
    285e:	18a4      	adds	r4, r4, r2
    2860:	0006      	movs	r6, r0
    2862:	e678      	b.n	2556 <__aeabi_dadd+0x1ce>
    2864:	4327      	orrs	r7, r4
    2866:	1e7c      	subs	r4, r7, #1
    2868:	41a7      	sbcs	r7, r4
    286a:	2400      	movs	r4, #0
    286c:	e737      	b.n	26de <__aeabi_dadd+0x356>
    286e:	4e4c      	ldr	r6, [pc, #304]	; (29a0 <__aeabi_dadd+0x618>)
    2870:	42b0      	cmp	r0, r6
    2872:	d036      	beq.n	28e2 <__aeabi_dadd+0x55a>
    2874:	2680      	movs	r6, #128	; 0x80
    2876:	425b      	negs	r3, r3
    2878:	0436      	lsls	r6, r6, #16
    287a:	469a      	mov	sl, r3
    287c:	4334      	orrs	r4, r6
    287e:	e7cf      	b.n	2820 <__aeabi_dadd+0x498>
    2880:	0018      	movs	r0, r3
    2882:	4310      	orrs	r0, r2
    2884:	d100      	bne.n	2888 <__aeabi_dadd+0x500>
    2886:	e603      	b.n	2490 <__aeabi_dadd+0x108>
    2888:	1ab8      	subs	r0, r7, r2
    288a:	4684      	mov	ip, r0
    288c:	4567      	cmp	r7, ip
    288e:	41ad      	sbcs	r5, r5
    2890:	1ae0      	subs	r0, r4, r3
    2892:	426d      	negs	r5, r5
    2894:	1b40      	subs	r0, r0, r5
    2896:	0205      	lsls	r5, r0, #8
    2898:	d400      	bmi.n	289c <__aeabi_dadd+0x514>
    289a:	e62c      	b.n	24f6 <__aeabi_dadd+0x16e>
    289c:	1bd7      	subs	r7, r2, r7
    289e:	42ba      	cmp	r2, r7
    28a0:	4192      	sbcs	r2, r2
    28a2:	1b1c      	subs	r4, r3, r4
    28a4:	4252      	negs	r2, r2
    28a6:	1aa4      	subs	r4, r4, r2
    28a8:	46d8      	mov	r8, fp
    28aa:	e5f1      	b.n	2490 <__aeabi_dadd+0x108>
    28ac:	0018      	movs	r0, r3
    28ae:	4310      	orrs	r0, r2
    28b0:	d100      	bne.n	28b4 <__aeabi_dadd+0x52c>
    28b2:	e763      	b.n	277c <__aeabi_dadd+0x3f4>
    28b4:	08f8      	lsrs	r0, r7, #3
    28b6:	0767      	lsls	r7, r4, #29
    28b8:	4307      	orrs	r7, r0
    28ba:	2080      	movs	r0, #128	; 0x80
    28bc:	08e4      	lsrs	r4, r4, #3
    28be:	0300      	lsls	r0, r0, #12
    28c0:	4204      	tst	r4, r0
    28c2:	d008      	beq.n	28d6 <__aeabi_dadd+0x54e>
    28c4:	08dd      	lsrs	r5, r3, #3
    28c6:	4205      	tst	r5, r0
    28c8:	d105      	bne.n	28d6 <__aeabi_dadd+0x54e>
    28ca:	08d2      	lsrs	r2, r2, #3
    28cc:	0759      	lsls	r1, r3, #29
    28ce:	4311      	orrs	r1, r2
    28d0:	000f      	movs	r7, r1
    28d2:	002c      	movs	r4, r5
    28d4:	46d8      	mov	r8, fp
    28d6:	0f7b      	lsrs	r3, r7, #29
    28d8:	00e4      	lsls	r4, r4, #3
    28da:	431c      	orrs	r4, r3
    28dc:	00ff      	lsls	r7, r7, #3
    28de:	4e30      	ldr	r6, [pc, #192]	; (29a0 <__aeabi_dadd+0x618>)
    28e0:	e5d6      	b.n	2490 <__aeabi_dadd+0x108>
    28e2:	000c      	movs	r4, r1
    28e4:	0017      	movs	r7, r2
    28e6:	0006      	movs	r6, r0
    28e8:	e5d2      	b.n	2490 <__aeabi_dadd+0x108>
    28ea:	2b00      	cmp	r3, #0
    28ec:	d038      	beq.n	2960 <__aeabi_dadd+0x5d8>
    28ee:	000b      	movs	r3, r1
    28f0:	4313      	orrs	r3, r2
    28f2:	d100      	bne.n	28f6 <__aeabi_dadd+0x56e>
    28f4:	e742      	b.n	277c <__aeabi_dadd+0x3f4>
    28f6:	08f8      	lsrs	r0, r7, #3
    28f8:	0767      	lsls	r7, r4, #29
    28fa:	4307      	orrs	r7, r0
    28fc:	2080      	movs	r0, #128	; 0x80
    28fe:	08e4      	lsrs	r4, r4, #3
    2900:	0300      	lsls	r0, r0, #12
    2902:	4204      	tst	r4, r0
    2904:	d0e7      	beq.n	28d6 <__aeabi_dadd+0x54e>
    2906:	08cb      	lsrs	r3, r1, #3
    2908:	4203      	tst	r3, r0
    290a:	d1e4      	bne.n	28d6 <__aeabi_dadd+0x54e>
    290c:	08d2      	lsrs	r2, r2, #3
    290e:	0749      	lsls	r1, r1, #29
    2910:	4311      	orrs	r1, r2
    2912:	000f      	movs	r7, r1
    2914:	001c      	movs	r4, r3
    2916:	e7de      	b.n	28d6 <__aeabi_dadd+0x54e>
    2918:	2700      	movs	r7, #0
    291a:	2400      	movs	r4, #0
    291c:	e5d5      	b.n	24ca <__aeabi_dadd+0x142>
    291e:	2100      	movs	r1, #0
    2920:	e76b      	b.n	27fa <__aeabi_dadd+0x472>
    2922:	2500      	movs	r5, #0
    2924:	2700      	movs	r7, #0
    2926:	e5f3      	b.n	2510 <__aeabi_dadd+0x188>
    2928:	464e      	mov	r6, r9
    292a:	0025      	movs	r5, r4
    292c:	3e20      	subs	r6, #32
    292e:	40f5      	lsrs	r5, r6
    2930:	464b      	mov	r3, r9
    2932:	002e      	movs	r6, r5
    2934:	2b20      	cmp	r3, #32
    2936:	d02d      	beq.n	2994 <__aeabi_dadd+0x60c>
    2938:	2540      	movs	r5, #64	; 0x40
    293a:	1aed      	subs	r5, r5, r3
    293c:	40ac      	lsls	r4, r5
    293e:	4327      	orrs	r7, r4
    2940:	1e7c      	subs	r4, r7, #1
    2942:	41a7      	sbcs	r7, r4
    2944:	2400      	movs	r4, #0
    2946:	4337      	orrs	r7, r6
    2948:	e6c9      	b.n	26de <__aeabi_dadd+0x356>
    294a:	2480      	movs	r4, #128	; 0x80
    294c:	2500      	movs	r5, #0
    294e:	0324      	lsls	r4, r4, #12
    2950:	4e13      	ldr	r6, [pc, #76]	; (29a0 <__aeabi_dadd+0x618>)
    2952:	2700      	movs	r7, #0
    2954:	e5dc      	b.n	2510 <__aeabi_dadd+0x188>
    2956:	4327      	orrs	r7, r4
    2958:	1e7c      	subs	r4, r7, #1
    295a:	41a7      	sbcs	r7, r4
    295c:	2400      	movs	r4, #0
    295e:	e779      	b.n	2854 <__aeabi_dadd+0x4cc>
    2960:	000c      	movs	r4, r1
    2962:	0017      	movs	r7, r2
    2964:	4e0e      	ldr	r6, [pc, #56]	; (29a0 <__aeabi_dadd+0x618>)
    2966:	e593      	b.n	2490 <__aeabi_dadd+0x108>
    2968:	000c      	movs	r4, r1
    296a:	0017      	movs	r7, r2
    296c:	e590      	b.n	2490 <__aeabi_dadd+0x108>
    296e:	4656      	mov	r6, sl
    2970:	0023      	movs	r3, r4
    2972:	3e20      	subs	r6, #32
    2974:	40f3      	lsrs	r3, r6
    2976:	4699      	mov	r9, r3
    2978:	4653      	mov	r3, sl
    297a:	2b20      	cmp	r3, #32
    297c:	d00e      	beq.n	299c <__aeabi_dadd+0x614>
    297e:	2340      	movs	r3, #64	; 0x40
    2980:	4656      	mov	r6, sl
    2982:	1b9b      	subs	r3, r3, r6
    2984:	409c      	lsls	r4, r3
    2986:	4327      	orrs	r7, r4
    2988:	1e7c      	subs	r4, r7, #1
    298a:	41a7      	sbcs	r7, r4
    298c:	464b      	mov	r3, r9
    298e:	2400      	movs	r4, #0
    2990:	431f      	orrs	r7, r3
    2992:	e75f      	b.n	2854 <__aeabi_dadd+0x4cc>
    2994:	2400      	movs	r4, #0
    2996:	e7d2      	b.n	293e <__aeabi_dadd+0x5b6>
    2998:	0017      	movs	r7, r2
    299a:	e5b2      	b.n	2502 <__aeabi_dadd+0x17a>
    299c:	2400      	movs	r4, #0
    299e:	e7f2      	b.n	2986 <__aeabi_dadd+0x5fe>
    29a0:	000007ff 	.word	0x000007ff
    29a4:	ff7fffff 	.word	0xff7fffff

000029a8 <__aeabi_ddiv>:
    29a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29aa:	4657      	mov	r7, sl
    29ac:	4645      	mov	r5, r8
    29ae:	46de      	mov	lr, fp
    29b0:	464e      	mov	r6, r9
    29b2:	b5e0      	push	{r5, r6, r7, lr}
    29b4:	004c      	lsls	r4, r1, #1
    29b6:	030e      	lsls	r6, r1, #12
    29b8:	b087      	sub	sp, #28
    29ba:	4683      	mov	fp, r0
    29bc:	4692      	mov	sl, r2
    29be:	001d      	movs	r5, r3
    29c0:	4680      	mov	r8, r0
    29c2:	0b36      	lsrs	r6, r6, #12
    29c4:	0d64      	lsrs	r4, r4, #21
    29c6:	0fcf      	lsrs	r7, r1, #31
    29c8:	2c00      	cmp	r4, #0
    29ca:	d04f      	beq.n	2a6c <__aeabi_ddiv+0xc4>
    29cc:	4b6f      	ldr	r3, [pc, #444]	; (2b8c <__aeabi_ddiv+0x1e4>)
    29ce:	429c      	cmp	r4, r3
    29d0:	d035      	beq.n	2a3e <__aeabi_ddiv+0x96>
    29d2:	2380      	movs	r3, #128	; 0x80
    29d4:	0f42      	lsrs	r2, r0, #29
    29d6:	041b      	lsls	r3, r3, #16
    29d8:	00f6      	lsls	r6, r6, #3
    29da:	4313      	orrs	r3, r2
    29dc:	4333      	orrs	r3, r6
    29de:	4699      	mov	r9, r3
    29e0:	00c3      	lsls	r3, r0, #3
    29e2:	4698      	mov	r8, r3
    29e4:	4b6a      	ldr	r3, [pc, #424]	; (2b90 <__aeabi_ddiv+0x1e8>)
    29e6:	2600      	movs	r6, #0
    29e8:	469c      	mov	ip, r3
    29ea:	2300      	movs	r3, #0
    29ec:	4464      	add	r4, ip
    29ee:	9303      	str	r3, [sp, #12]
    29f0:	032b      	lsls	r3, r5, #12
    29f2:	0b1b      	lsrs	r3, r3, #12
    29f4:	469b      	mov	fp, r3
    29f6:	006b      	lsls	r3, r5, #1
    29f8:	0fed      	lsrs	r5, r5, #31
    29fa:	4650      	mov	r0, sl
    29fc:	0d5b      	lsrs	r3, r3, #21
    29fe:	9501      	str	r5, [sp, #4]
    2a00:	d05e      	beq.n	2ac0 <__aeabi_ddiv+0x118>
    2a02:	4a62      	ldr	r2, [pc, #392]	; (2b8c <__aeabi_ddiv+0x1e4>)
    2a04:	4293      	cmp	r3, r2
    2a06:	d053      	beq.n	2ab0 <__aeabi_ddiv+0x108>
    2a08:	465a      	mov	r2, fp
    2a0a:	00d1      	lsls	r1, r2, #3
    2a0c:	2280      	movs	r2, #128	; 0x80
    2a0e:	0f40      	lsrs	r0, r0, #29
    2a10:	0412      	lsls	r2, r2, #16
    2a12:	4302      	orrs	r2, r0
    2a14:	430a      	orrs	r2, r1
    2a16:	4693      	mov	fp, r2
    2a18:	4652      	mov	r2, sl
    2a1a:	00d1      	lsls	r1, r2, #3
    2a1c:	4a5c      	ldr	r2, [pc, #368]	; (2b90 <__aeabi_ddiv+0x1e8>)
    2a1e:	4694      	mov	ip, r2
    2a20:	2200      	movs	r2, #0
    2a22:	4463      	add	r3, ip
    2a24:	0038      	movs	r0, r7
    2a26:	4068      	eors	r0, r5
    2a28:	4684      	mov	ip, r0
    2a2a:	9002      	str	r0, [sp, #8]
    2a2c:	1ae4      	subs	r4, r4, r3
    2a2e:	4316      	orrs	r6, r2
    2a30:	2e0f      	cmp	r6, #15
    2a32:	d900      	bls.n	2a36 <__aeabi_ddiv+0x8e>
    2a34:	e0b4      	b.n	2ba0 <__aeabi_ddiv+0x1f8>
    2a36:	4b57      	ldr	r3, [pc, #348]	; (2b94 <__aeabi_ddiv+0x1ec>)
    2a38:	00b6      	lsls	r6, r6, #2
    2a3a:	599b      	ldr	r3, [r3, r6]
    2a3c:	469f      	mov	pc, r3
    2a3e:	0003      	movs	r3, r0
    2a40:	4333      	orrs	r3, r6
    2a42:	4699      	mov	r9, r3
    2a44:	d16c      	bne.n	2b20 <__aeabi_ddiv+0x178>
    2a46:	2300      	movs	r3, #0
    2a48:	4698      	mov	r8, r3
    2a4a:	3302      	adds	r3, #2
    2a4c:	2608      	movs	r6, #8
    2a4e:	9303      	str	r3, [sp, #12]
    2a50:	e7ce      	b.n	29f0 <__aeabi_ddiv+0x48>
    2a52:	46cb      	mov	fp, r9
    2a54:	4641      	mov	r1, r8
    2a56:	9a03      	ldr	r2, [sp, #12]
    2a58:	9701      	str	r7, [sp, #4]
    2a5a:	2a02      	cmp	r2, #2
    2a5c:	d165      	bne.n	2b2a <__aeabi_ddiv+0x182>
    2a5e:	9b01      	ldr	r3, [sp, #4]
    2a60:	4c4a      	ldr	r4, [pc, #296]	; (2b8c <__aeabi_ddiv+0x1e4>)
    2a62:	469c      	mov	ip, r3
    2a64:	2300      	movs	r3, #0
    2a66:	2200      	movs	r2, #0
    2a68:	4698      	mov	r8, r3
    2a6a:	e06b      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2a6c:	0003      	movs	r3, r0
    2a6e:	4333      	orrs	r3, r6
    2a70:	4699      	mov	r9, r3
    2a72:	d04e      	beq.n	2b12 <__aeabi_ddiv+0x16a>
    2a74:	2e00      	cmp	r6, #0
    2a76:	d100      	bne.n	2a7a <__aeabi_ddiv+0xd2>
    2a78:	e1bc      	b.n	2df4 <__aeabi_ddiv+0x44c>
    2a7a:	0030      	movs	r0, r6
    2a7c:	f001 f8ca 	bl	3c14 <__clzsi2>
    2a80:	0003      	movs	r3, r0
    2a82:	3b0b      	subs	r3, #11
    2a84:	2b1c      	cmp	r3, #28
    2a86:	dd00      	ble.n	2a8a <__aeabi_ddiv+0xe2>
    2a88:	e1ac      	b.n	2de4 <__aeabi_ddiv+0x43c>
    2a8a:	221d      	movs	r2, #29
    2a8c:	1ad3      	subs	r3, r2, r3
    2a8e:	465a      	mov	r2, fp
    2a90:	0001      	movs	r1, r0
    2a92:	40da      	lsrs	r2, r3
    2a94:	3908      	subs	r1, #8
    2a96:	408e      	lsls	r6, r1
    2a98:	0013      	movs	r3, r2
    2a9a:	4333      	orrs	r3, r6
    2a9c:	4699      	mov	r9, r3
    2a9e:	465b      	mov	r3, fp
    2aa0:	408b      	lsls	r3, r1
    2aa2:	4698      	mov	r8, r3
    2aa4:	2300      	movs	r3, #0
    2aa6:	4c3c      	ldr	r4, [pc, #240]	; (2b98 <__aeabi_ddiv+0x1f0>)
    2aa8:	2600      	movs	r6, #0
    2aaa:	1a24      	subs	r4, r4, r0
    2aac:	9303      	str	r3, [sp, #12]
    2aae:	e79f      	b.n	29f0 <__aeabi_ddiv+0x48>
    2ab0:	4651      	mov	r1, sl
    2ab2:	465a      	mov	r2, fp
    2ab4:	4311      	orrs	r1, r2
    2ab6:	d129      	bne.n	2b0c <__aeabi_ddiv+0x164>
    2ab8:	2200      	movs	r2, #0
    2aba:	4693      	mov	fp, r2
    2abc:	3202      	adds	r2, #2
    2abe:	e7b1      	b.n	2a24 <__aeabi_ddiv+0x7c>
    2ac0:	4659      	mov	r1, fp
    2ac2:	4301      	orrs	r1, r0
    2ac4:	d01e      	beq.n	2b04 <__aeabi_ddiv+0x15c>
    2ac6:	465b      	mov	r3, fp
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d100      	bne.n	2ace <__aeabi_ddiv+0x126>
    2acc:	e19e      	b.n	2e0c <__aeabi_ddiv+0x464>
    2ace:	4658      	mov	r0, fp
    2ad0:	f001 f8a0 	bl	3c14 <__clzsi2>
    2ad4:	0003      	movs	r3, r0
    2ad6:	3b0b      	subs	r3, #11
    2ad8:	2b1c      	cmp	r3, #28
    2ada:	dd00      	ble.n	2ade <__aeabi_ddiv+0x136>
    2adc:	e18f      	b.n	2dfe <__aeabi_ddiv+0x456>
    2ade:	0002      	movs	r2, r0
    2ae0:	4659      	mov	r1, fp
    2ae2:	3a08      	subs	r2, #8
    2ae4:	4091      	lsls	r1, r2
    2ae6:	468b      	mov	fp, r1
    2ae8:	211d      	movs	r1, #29
    2aea:	1acb      	subs	r3, r1, r3
    2aec:	4651      	mov	r1, sl
    2aee:	40d9      	lsrs	r1, r3
    2af0:	000b      	movs	r3, r1
    2af2:	4659      	mov	r1, fp
    2af4:	430b      	orrs	r3, r1
    2af6:	4651      	mov	r1, sl
    2af8:	469b      	mov	fp, r3
    2afa:	4091      	lsls	r1, r2
    2afc:	4b26      	ldr	r3, [pc, #152]	; (2b98 <__aeabi_ddiv+0x1f0>)
    2afe:	2200      	movs	r2, #0
    2b00:	1a1b      	subs	r3, r3, r0
    2b02:	e78f      	b.n	2a24 <__aeabi_ddiv+0x7c>
    2b04:	2300      	movs	r3, #0
    2b06:	2201      	movs	r2, #1
    2b08:	469b      	mov	fp, r3
    2b0a:	e78b      	b.n	2a24 <__aeabi_ddiv+0x7c>
    2b0c:	4651      	mov	r1, sl
    2b0e:	2203      	movs	r2, #3
    2b10:	e788      	b.n	2a24 <__aeabi_ddiv+0x7c>
    2b12:	2300      	movs	r3, #0
    2b14:	4698      	mov	r8, r3
    2b16:	3301      	adds	r3, #1
    2b18:	2604      	movs	r6, #4
    2b1a:	2400      	movs	r4, #0
    2b1c:	9303      	str	r3, [sp, #12]
    2b1e:	e767      	b.n	29f0 <__aeabi_ddiv+0x48>
    2b20:	2303      	movs	r3, #3
    2b22:	46b1      	mov	r9, r6
    2b24:	9303      	str	r3, [sp, #12]
    2b26:	260c      	movs	r6, #12
    2b28:	e762      	b.n	29f0 <__aeabi_ddiv+0x48>
    2b2a:	2a03      	cmp	r2, #3
    2b2c:	d100      	bne.n	2b30 <__aeabi_ddiv+0x188>
    2b2e:	e25c      	b.n	2fea <__aeabi_ddiv+0x642>
    2b30:	9b01      	ldr	r3, [sp, #4]
    2b32:	2a01      	cmp	r2, #1
    2b34:	d000      	beq.n	2b38 <__aeabi_ddiv+0x190>
    2b36:	e1e4      	b.n	2f02 <__aeabi_ddiv+0x55a>
    2b38:	4013      	ands	r3, r2
    2b3a:	469c      	mov	ip, r3
    2b3c:	2300      	movs	r3, #0
    2b3e:	2400      	movs	r4, #0
    2b40:	2200      	movs	r2, #0
    2b42:	4698      	mov	r8, r3
    2b44:	2100      	movs	r1, #0
    2b46:	0312      	lsls	r2, r2, #12
    2b48:	0b13      	lsrs	r3, r2, #12
    2b4a:	0d0a      	lsrs	r2, r1, #20
    2b4c:	0512      	lsls	r2, r2, #20
    2b4e:	431a      	orrs	r2, r3
    2b50:	0523      	lsls	r3, r4, #20
    2b52:	4c12      	ldr	r4, [pc, #72]	; (2b9c <__aeabi_ddiv+0x1f4>)
    2b54:	4640      	mov	r0, r8
    2b56:	4022      	ands	r2, r4
    2b58:	4313      	orrs	r3, r2
    2b5a:	4662      	mov	r2, ip
    2b5c:	005b      	lsls	r3, r3, #1
    2b5e:	07d2      	lsls	r2, r2, #31
    2b60:	085b      	lsrs	r3, r3, #1
    2b62:	4313      	orrs	r3, r2
    2b64:	0019      	movs	r1, r3
    2b66:	b007      	add	sp, #28
    2b68:	bc3c      	pop	{r2, r3, r4, r5}
    2b6a:	4690      	mov	r8, r2
    2b6c:	4699      	mov	r9, r3
    2b6e:	46a2      	mov	sl, r4
    2b70:	46ab      	mov	fp, r5
    2b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b74:	2300      	movs	r3, #0
    2b76:	2280      	movs	r2, #128	; 0x80
    2b78:	469c      	mov	ip, r3
    2b7a:	0312      	lsls	r2, r2, #12
    2b7c:	4698      	mov	r8, r3
    2b7e:	4c03      	ldr	r4, [pc, #12]	; (2b8c <__aeabi_ddiv+0x1e4>)
    2b80:	e7e0      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2b82:	2300      	movs	r3, #0
    2b84:	4c01      	ldr	r4, [pc, #4]	; (2b8c <__aeabi_ddiv+0x1e4>)
    2b86:	2200      	movs	r2, #0
    2b88:	4698      	mov	r8, r3
    2b8a:	e7db      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2b8c:	000007ff 	.word	0x000007ff
    2b90:	fffffc01 	.word	0xfffffc01
    2b94:	00003ce8 	.word	0x00003ce8
    2b98:	fffffc0d 	.word	0xfffffc0d
    2b9c:	800fffff 	.word	0x800fffff
    2ba0:	45d9      	cmp	r9, fp
    2ba2:	d900      	bls.n	2ba6 <__aeabi_ddiv+0x1fe>
    2ba4:	e139      	b.n	2e1a <__aeabi_ddiv+0x472>
    2ba6:	d100      	bne.n	2baa <__aeabi_ddiv+0x202>
    2ba8:	e134      	b.n	2e14 <__aeabi_ddiv+0x46c>
    2baa:	2300      	movs	r3, #0
    2bac:	4646      	mov	r6, r8
    2bae:	464d      	mov	r5, r9
    2bb0:	469a      	mov	sl, r3
    2bb2:	3c01      	subs	r4, #1
    2bb4:	465b      	mov	r3, fp
    2bb6:	0e0a      	lsrs	r2, r1, #24
    2bb8:	021b      	lsls	r3, r3, #8
    2bba:	431a      	orrs	r2, r3
    2bbc:	020b      	lsls	r3, r1, #8
    2bbe:	0c17      	lsrs	r7, r2, #16
    2bc0:	9303      	str	r3, [sp, #12]
    2bc2:	0413      	lsls	r3, r2, #16
    2bc4:	0c1b      	lsrs	r3, r3, #16
    2bc6:	0039      	movs	r1, r7
    2bc8:	0028      	movs	r0, r5
    2bca:	4690      	mov	r8, r2
    2bcc:	9301      	str	r3, [sp, #4]
    2bce:	f7ff fb4f 	bl	2270 <__udivsi3>
    2bd2:	0002      	movs	r2, r0
    2bd4:	9b01      	ldr	r3, [sp, #4]
    2bd6:	4683      	mov	fp, r0
    2bd8:	435a      	muls	r2, r3
    2bda:	0028      	movs	r0, r5
    2bdc:	0039      	movs	r1, r7
    2bde:	4691      	mov	r9, r2
    2be0:	f7ff fbcc 	bl	237c <__aeabi_uidivmod>
    2be4:	0c35      	lsrs	r5, r6, #16
    2be6:	0409      	lsls	r1, r1, #16
    2be8:	430d      	orrs	r5, r1
    2bea:	45a9      	cmp	r9, r5
    2bec:	d90d      	bls.n	2c0a <__aeabi_ddiv+0x262>
    2bee:	465b      	mov	r3, fp
    2bf0:	4445      	add	r5, r8
    2bf2:	3b01      	subs	r3, #1
    2bf4:	45a8      	cmp	r8, r5
    2bf6:	d900      	bls.n	2bfa <__aeabi_ddiv+0x252>
    2bf8:	e13a      	b.n	2e70 <__aeabi_ddiv+0x4c8>
    2bfa:	45a9      	cmp	r9, r5
    2bfc:	d800      	bhi.n	2c00 <__aeabi_ddiv+0x258>
    2bfe:	e137      	b.n	2e70 <__aeabi_ddiv+0x4c8>
    2c00:	2302      	movs	r3, #2
    2c02:	425b      	negs	r3, r3
    2c04:	469c      	mov	ip, r3
    2c06:	4445      	add	r5, r8
    2c08:	44e3      	add	fp, ip
    2c0a:	464b      	mov	r3, r9
    2c0c:	1aeb      	subs	r3, r5, r3
    2c0e:	0039      	movs	r1, r7
    2c10:	0018      	movs	r0, r3
    2c12:	9304      	str	r3, [sp, #16]
    2c14:	f7ff fb2c 	bl	2270 <__udivsi3>
    2c18:	9b01      	ldr	r3, [sp, #4]
    2c1a:	0005      	movs	r5, r0
    2c1c:	4343      	muls	r3, r0
    2c1e:	0039      	movs	r1, r7
    2c20:	9804      	ldr	r0, [sp, #16]
    2c22:	4699      	mov	r9, r3
    2c24:	f7ff fbaa 	bl	237c <__aeabi_uidivmod>
    2c28:	0433      	lsls	r3, r6, #16
    2c2a:	0409      	lsls	r1, r1, #16
    2c2c:	0c1b      	lsrs	r3, r3, #16
    2c2e:	430b      	orrs	r3, r1
    2c30:	4599      	cmp	r9, r3
    2c32:	d909      	bls.n	2c48 <__aeabi_ddiv+0x2a0>
    2c34:	4443      	add	r3, r8
    2c36:	1e6a      	subs	r2, r5, #1
    2c38:	4598      	cmp	r8, r3
    2c3a:	d900      	bls.n	2c3e <__aeabi_ddiv+0x296>
    2c3c:	e11a      	b.n	2e74 <__aeabi_ddiv+0x4cc>
    2c3e:	4599      	cmp	r9, r3
    2c40:	d800      	bhi.n	2c44 <__aeabi_ddiv+0x29c>
    2c42:	e117      	b.n	2e74 <__aeabi_ddiv+0x4cc>
    2c44:	3d02      	subs	r5, #2
    2c46:	4443      	add	r3, r8
    2c48:	464a      	mov	r2, r9
    2c4a:	1a9b      	subs	r3, r3, r2
    2c4c:	465a      	mov	r2, fp
    2c4e:	0412      	lsls	r2, r2, #16
    2c50:	432a      	orrs	r2, r5
    2c52:	9903      	ldr	r1, [sp, #12]
    2c54:	4693      	mov	fp, r2
    2c56:	0c10      	lsrs	r0, r2, #16
    2c58:	0c0a      	lsrs	r2, r1, #16
    2c5a:	4691      	mov	r9, r2
    2c5c:	0409      	lsls	r1, r1, #16
    2c5e:	465a      	mov	r2, fp
    2c60:	0c09      	lsrs	r1, r1, #16
    2c62:	464e      	mov	r6, r9
    2c64:	000d      	movs	r5, r1
    2c66:	0412      	lsls	r2, r2, #16
    2c68:	0c12      	lsrs	r2, r2, #16
    2c6a:	4345      	muls	r5, r0
    2c6c:	9105      	str	r1, [sp, #20]
    2c6e:	4351      	muls	r1, r2
    2c70:	4372      	muls	r2, r6
    2c72:	4370      	muls	r0, r6
    2c74:	1952      	adds	r2, r2, r5
    2c76:	0c0e      	lsrs	r6, r1, #16
    2c78:	18b2      	adds	r2, r6, r2
    2c7a:	4295      	cmp	r5, r2
    2c7c:	d903      	bls.n	2c86 <__aeabi_ddiv+0x2de>
    2c7e:	2580      	movs	r5, #128	; 0x80
    2c80:	026d      	lsls	r5, r5, #9
    2c82:	46ac      	mov	ip, r5
    2c84:	4460      	add	r0, ip
    2c86:	0c15      	lsrs	r5, r2, #16
    2c88:	0409      	lsls	r1, r1, #16
    2c8a:	0412      	lsls	r2, r2, #16
    2c8c:	0c09      	lsrs	r1, r1, #16
    2c8e:	1828      	adds	r0, r5, r0
    2c90:	1852      	adds	r2, r2, r1
    2c92:	4283      	cmp	r3, r0
    2c94:	d200      	bcs.n	2c98 <__aeabi_ddiv+0x2f0>
    2c96:	e0ce      	b.n	2e36 <__aeabi_ddiv+0x48e>
    2c98:	d100      	bne.n	2c9c <__aeabi_ddiv+0x2f4>
    2c9a:	e0c8      	b.n	2e2e <__aeabi_ddiv+0x486>
    2c9c:	1a1d      	subs	r5, r3, r0
    2c9e:	4653      	mov	r3, sl
    2ca0:	1a9e      	subs	r6, r3, r2
    2ca2:	45b2      	cmp	sl, r6
    2ca4:	4192      	sbcs	r2, r2
    2ca6:	4252      	negs	r2, r2
    2ca8:	1aab      	subs	r3, r5, r2
    2caa:	469a      	mov	sl, r3
    2cac:	4598      	cmp	r8, r3
    2cae:	d100      	bne.n	2cb2 <__aeabi_ddiv+0x30a>
    2cb0:	e117      	b.n	2ee2 <__aeabi_ddiv+0x53a>
    2cb2:	0039      	movs	r1, r7
    2cb4:	0018      	movs	r0, r3
    2cb6:	f7ff fadb 	bl	2270 <__udivsi3>
    2cba:	9b01      	ldr	r3, [sp, #4]
    2cbc:	0005      	movs	r5, r0
    2cbe:	4343      	muls	r3, r0
    2cc0:	0039      	movs	r1, r7
    2cc2:	4650      	mov	r0, sl
    2cc4:	9304      	str	r3, [sp, #16]
    2cc6:	f7ff fb59 	bl	237c <__aeabi_uidivmod>
    2cca:	9804      	ldr	r0, [sp, #16]
    2ccc:	040b      	lsls	r3, r1, #16
    2cce:	0c31      	lsrs	r1, r6, #16
    2cd0:	4319      	orrs	r1, r3
    2cd2:	4288      	cmp	r0, r1
    2cd4:	d909      	bls.n	2cea <__aeabi_ddiv+0x342>
    2cd6:	4441      	add	r1, r8
    2cd8:	1e6b      	subs	r3, r5, #1
    2cda:	4588      	cmp	r8, r1
    2cdc:	d900      	bls.n	2ce0 <__aeabi_ddiv+0x338>
    2cde:	e107      	b.n	2ef0 <__aeabi_ddiv+0x548>
    2ce0:	4288      	cmp	r0, r1
    2ce2:	d800      	bhi.n	2ce6 <__aeabi_ddiv+0x33e>
    2ce4:	e104      	b.n	2ef0 <__aeabi_ddiv+0x548>
    2ce6:	3d02      	subs	r5, #2
    2ce8:	4441      	add	r1, r8
    2cea:	9b04      	ldr	r3, [sp, #16]
    2cec:	1acb      	subs	r3, r1, r3
    2cee:	0018      	movs	r0, r3
    2cf0:	0039      	movs	r1, r7
    2cf2:	9304      	str	r3, [sp, #16]
    2cf4:	f7ff fabc 	bl	2270 <__udivsi3>
    2cf8:	9b01      	ldr	r3, [sp, #4]
    2cfa:	4682      	mov	sl, r0
    2cfc:	4343      	muls	r3, r0
    2cfe:	0039      	movs	r1, r7
    2d00:	9804      	ldr	r0, [sp, #16]
    2d02:	9301      	str	r3, [sp, #4]
    2d04:	f7ff fb3a 	bl	237c <__aeabi_uidivmod>
    2d08:	9801      	ldr	r0, [sp, #4]
    2d0a:	040b      	lsls	r3, r1, #16
    2d0c:	0431      	lsls	r1, r6, #16
    2d0e:	0c09      	lsrs	r1, r1, #16
    2d10:	4319      	orrs	r1, r3
    2d12:	4288      	cmp	r0, r1
    2d14:	d90d      	bls.n	2d32 <__aeabi_ddiv+0x38a>
    2d16:	4653      	mov	r3, sl
    2d18:	4441      	add	r1, r8
    2d1a:	3b01      	subs	r3, #1
    2d1c:	4588      	cmp	r8, r1
    2d1e:	d900      	bls.n	2d22 <__aeabi_ddiv+0x37a>
    2d20:	e0e8      	b.n	2ef4 <__aeabi_ddiv+0x54c>
    2d22:	4288      	cmp	r0, r1
    2d24:	d800      	bhi.n	2d28 <__aeabi_ddiv+0x380>
    2d26:	e0e5      	b.n	2ef4 <__aeabi_ddiv+0x54c>
    2d28:	2302      	movs	r3, #2
    2d2a:	425b      	negs	r3, r3
    2d2c:	469c      	mov	ip, r3
    2d2e:	4441      	add	r1, r8
    2d30:	44e2      	add	sl, ip
    2d32:	9b01      	ldr	r3, [sp, #4]
    2d34:	042d      	lsls	r5, r5, #16
    2d36:	1ace      	subs	r6, r1, r3
    2d38:	4651      	mov	r1, sl
    2d3a:	4329      	orrs	r1, r5
    2d3c:	9d05      	ldr	r5, [sp, #20]
    2d3e:	464f      	mov	r7, r9
    2d40:	002a      	movs	r2, r5
    2d42:	040b      	lsls	r3, r1, #16
    2d44:	0c08      	lsrs	r0, r1, #16
    2d46:	0c1b      	lsrs	r3, r3, #16
    2d48:	435a      	muls	r2, r3
    2d4a:	4345      	muls	r5, r0
    2d4c:	437b      	muls	r3, r7
    2d4e:	4378      	muls	r0, r7
    2d50:	195b      	adds	r3, r3, r5
    2d52:	0c17      	lsrs	r7, r2, #16
    2d54:	18fb      	adds	r3, r7, r3
    2d56:	429d      	cmp	r5, r3
    2d58:	d903      	bls.n	2d62 <__aeabi_ddiv+0x3ba>
    2d5a:	2580      	movs	r5, #128	; 0x80
    2d5c:	026d      	lsls	r5, r5, #9
    2d5e:	46ac      	mov	ip, r5
    2d60:	4460      	add	r0, ip
    2d62:	0c1d      	lsrs	r5, r3, #16
    2d64:	0412      	lsls	r2, r2, #16
    2d66:	041b      	lsls	r3, r3, #16
    2d68:	0c12      	lsrs	r2, r2, #16
    2d6a:	1828      	adds	r0, r5, r0
    2d6c:	189b      	adds	r3, r3, r2
    2d6e:	4286      	cmp	r6, r0
    2d70:	d200      	bcs.n	2d74 <__aeabi_ddiv+0x3cc>
    2d72:	e093      	b.n	2e9c <__aeabi_ddiv+0x4f4>
    2d74:	d100      	bne.n	2d78 <__aeabi_ddiv+0x3d0>
    2d76:	e08e      	b.n	2e96 <__aeabi_ddiv+0x4ee>
    2d78:	2301      	movs	r3, #1
    2d7a:	4319      	orrs	r1, r3
    2d7c:	4ba0      	ldr	r3, [pc, #640]	; (3000 <__aeabi_ddiv+0x658>)
    2d7e:	18e3      	adds	r3, r4, r3
    2d80:	2b00      	cmp	r3, #0
    2d82:	dc00      	bgt.n	2d86 <__aeabi_ddiv+0x3de>
    2d84:	e099      	b.n	2eba <__aeabi_ddiv+0x512>
    2d86:	074a      	lsls	r2, r1, #29
    2d88:	d000      	beq.n	2d8c <__aeabi_ddiv+0x3e4>
    2d8a:	e09e      	b.n	2eca <__aeabi_ddiv+0x522>
    2d8c:	465a      	mov	r2, fp
    2d8e:	01d2      	lsls	r2, r2, #7
    2d90:	d506      	bpl.n	2da0 <__aeabi_ddiv+0x3f8>
    2d92:	465a      	mov	r2, fp
    2d94:	4b9b      	ldr	r3, [pc, #620]	; (3004 <__aeabi_ddiv+0x65c>)
    2d96:	401a      	ands	r2, r3
    2d98:	2380      	movs	r3, #128	; 0x80
    2d9a:	4693      	mov	fp, r2
    2d9c:	00db      	lsls	r3, r3, #3
    2d9e:	18e3      	adds	r3, r4, r3
    2da0:	4a99      	ldr	r2, [pc, #612]	; (3008 <__aeabi_ddiv+0x660>)
    2da2:	4293      	cmp	r3, r2
    2da4:	dd68      	ble.n	2e78 <__aeabi_ddiv+0x4d0>
    2da6:	2301      	movs	r3, #1
    2da8:	9a02      	ldr	r2, [sp, #8]
    2daa:	4c98      	ldr	r4, [pc, #608]	; (300c <__aeabi_ddiv+0x664>)
    2dac:	401a      	ands	r2, r3
    2dae:	2300      	movs	r3, #0
    2db0:	4694      	mov	ip, r2
    2db2:	4698      	mov	r8, r3
    2db4:	2200      	movs	r2, #0
    2db6:	e6c5      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2db8:	2280      	movs	r2, #128	; 0x80
    2dba:	464b      	mov	r3, r9
    2dbc:	0312      	lsls	r2, r2, #12
    2dbe:	4213      	tst	r3, r2
    2dc0:	d00a      	beq.n	2dd8 <__aeabi_ddiv+0x430>
    2dc2:	465b      	mov	r3, fp
    2dc4:	4213      	tst	r3, r2
    2dc6:	d106      	bne.n	2dd6 <__aeabi_ddiv+0x42e>
    2dc8:	431a      	orrs	r2, r3
    2dca:	0312      	lsls	r2, r2, #12
    2dcc:	0b12      	lsrs	r2, r2, #12
    2dce:	46ac      	mov	ip, r5
    2dd0:	4688      	mov	r8, r1
    2dd2:	4c8e      	ldr	r4, [pc, #568]	; (300c <__aeabi_ddiv+0x664>)
    2dd4:	e6b6      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2dd6:	464b      	mov	r3, r9
    2dd8:	431a      	orrs	r2, r3
    2dda:	0312      	lsls	r2, r2, #12
    2ddc:	0b12      	lsrs	r2, r2, #12
    2dde:	46bc      	mov	ip, r7
    2de0:	4c8a      	ldr	r4, [pc, #552]	; (300c <__aeabi_ddiv+0x664>)
    2de2:	e6af      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2de4:	0003      	movs	r3, r0
    2de6:	465a      	mov	r2, fp
    2de8:	3b28      	subs	r3, #40	; 0x28
    2dea:	409a      	lsls	r2, r3
    2dec:	2300      	movs	r3, #0
    2dee:	4691      	mov	r9, r2
    2df0:	4698      	mov	r8, r3
    2df2:	e657      	b.n	2aa4 <__aeabi_ddiv+0xfc>
    2df4:	4658      	mov	r0, fp
    2df6:	f000 ff0d 	bl	3c14 <__clzsi2>
    2dfa:	3020      	adds	r0, #32
    2dfc:	e640      	b.n	2a80 <__aeabi_ddiv+0xd8>
    2dfe:	0003      	movs	r3, r0
    2e00:	4652      	mov	r2, sl
    2e02:	3b28      	subs	r3, #40	; 0x28
    2e04:	409a      	lsls	r2, r3
    2e06:	2100      	movs	r1, #0
    2e08:	4693      	mov	fp, r2
    2e0a:	e677      	b.n	2afc <__aeabi_ddiv+0x154>
    2e0c:	f000 ff02 	bl	3c14 <__clzsi2>
    2e10:	3020      	adds	r0, #32
    2e12:	e65f      	b.n	2ad4 <__aeabi_ddiv+0x12c>
    2e14:	4588      	cmp	r8, r1
    2e16:	d200      	bcs.n	2e1a <__aeabi_ddiv+0x472>
    2e18:	e6c7      	b.n	2baa <__aeabi_ddiv+0x202>
    2e1a:	464b      	mov	r3, r9
    2e1c:	07de      	lsls	r6, r3, #31
    2e1e:	085d      	lsrs	r5, r3, #1
    2e20:	4643      	mov	r3, r8
    2e22:	085b      	lsrs	r3, r3, #1
    2e24:	431e      	orrs	r6, r3
    2e26:	4643      	mov	r3, r8
    2e28:	07db      	lsls	r3, r3, #31
    2e2a:	469a      	mov	sl, r3
    2e2c:	e6c2      	b.n	2bb4 <__aeabi_ddiv+0x20c>
    2e2e:	2500      	movs	r5, #0
    2e30:	4592      	cmp	sl, r2
    2e32:	d300      	bcc.n	2e36 <__aeabi_ddiv+0x48e>
    2e34:	e733      	b.n	2c9e <__aeabi_ddiv+0x2f6>
    2e36:	9e03      	ldr	r6, [sp, #12]
    2e38:	4659      	mov	r1, fp
    2e3a:	46b4      	mov	ip, r6
    2e3c:	44e2      	add	sl, ip
    2e3e:	45b2      	cmp	sl, r6
    2e40:	41ad      	sbcs	r5, r5
    2e42:	426d      	negs	r5, r5
    2e44:	4445      	add	r5, r8
    2e46:	18eb      	adds	r3, r5, r3
    2e48:	3901      	subs	r1, #1
    2e4a:	4598      	cmp	r8, r3
    2e4c:	d207      	bcs.n	2e5e <__aeabi_ddiv+0x4b6>
    2e4e:	4298      	cmp	r0, r3
    2e50:	d900      	bls.n	2e54 <__aeabi_ddiv+0x4ac>
    2e52:	e07f      	b.n	2f54 <__aeabi_ddiv+0x5ac>
    2e54:	d100      	bne.n	2e58 <__aeabi_ddiv+0x4b0>
    2e56:	e0bc      	b.n	2fd2 <__aeabi_ddiv+0x62a>
    2e58:	1a1d      	subs	r5, r3, r0
    2e5a:	468b      	mov	fp, r1
    2e5c:	e71f      	b.n	2c9e <__aeabi_ddiv+0x2f6>
    2e5e:	4598      	cmp	r8, r3
    2e60:	d1fa      	bne.n	2e58 <__aeabi_ddiv+0x4b0>
    2e62:	9d03      	ldr	r5, [sp, #12]
    2e64:	4555      	cmp	r5, sl
    2e66:	d9f2      	bls.n	2e4e <__aeabi_ddiv+0x4a6>
    2e68:	4643      	mov	r3, r8
    2e6a:	468b      	mov	fp, r1
    2e6c:	1a1d      	subs	r5, r3, r0
    2e6e:	e716      	b.n	2c9e <__aeabi_ddiv+0x2f6>
    2e70:	469b      	mov	fp, r3
    2e72:	e6ca      	b.n	2c0a <__aeabi_ddiv+0x262>
    2e74:	0015      	movs	r5, r2
    2e76:	e6e7      	b.n	2c48 <__aeabi_ddiv+0x2a0>
    2e78:	465a      	mov	r2, fp
    2e7a:	08c9      	lsrs	r1, r1, #3
    2e7c:	0752      	lsls	r2, r2, #29
    2e7e:	430a      	orrs	r2, r1
    2e80:	055b      	lsls	r3, r3, #21
    2e82:	4690      	mov	r8, r2
    2e84:	0d5c      	lsrs	r4, r3, #21
    2e86:	465a      	mov	r2, fp
    2e88:	2301      	movs	r3, #1
    2e8a:	9902      	ldr	r1, [sp, #8]
    2e8c:	0252      	lsls	r2, r2, #9
    2e8e:	4019      	ands	r1, r3
    2e90:	0b12      	lsrs	r2, r2, #12
    2e92:	468c      	mov	ip, r1
    2e94:	e656      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2e96:	2b00      	cmp	r3, #0
    2e98:	d100      	bne.n	2e9c <__aeabi_ddiv+0x4f4>
    2e9a:	e76f      	b.n	2d7c <__aeabi_ddiv+0x3d4>
    2e9c:	4446      	add	r6, r8
    2e9e:	1e4a      	subs	r2, r1, #1
    2ea0:	45b0      	cmp	r8, r6
    2ea2:	d929      	bls.n	2ef8 <__aeabi_ddiv+0x550>
    2ea4:	0011      	movs	r1, r2
    2ea6:	4286      	cmp	r6, r0
    2ea8:	d000      	beq.n	2eac <__aeabi_ddiv+0x504>
    2eaa:	e765      	b.n	2d78 <__aeabi_ddiv+0x3d0>
    2eac:	9a03      	ldr	r2, [sp, #12]
    2eae:	4293      	cmp	r3, r2
    2eb0:	d000      	beq.n	2eb4 <__aeabi_ddiv+0x50c>
    2eb2:	e761      	b.n	2d78 <__aeabi_ddiv+0x3d0>
    2eb4:	e762      	b.n	2d7c <__aeabi_ddiv+0x3d4>
    2eb6:	2101      	movs	r1, #1
    2eb8:	4249      	negs	r1, r1
    2eba:	2001      	movs	r0, #1
    2ebc:	1ac2      	subs	r2, r0, r3
    2ebe:	2a38      	cmp	r2, #56	; 0x38
    2ec0:	dd21      	ble.n	2f06 <__aeabi_ddiv+0x55e>
    2ec2:	9b02      	ldr	r3, [sp, #8]
    2ec4:	4003      	ands	r3, r0
    2ec6:	469c      	mov	ip, r3
    2ec8:	e638      	b.n	2b3c <__aeabi_ddiv+0x194>
    2eca:	220f      	movs	r2, #15
    2ecc:	400a      	ands	r2, r1
    2ece:	2a04      	cmp	r2, #4
    2ed0:	d100      	bne.n	2ed4 <__aeabi_ddiv+0x52c>
    2ed2:	e75b      	b.n	2d8c <__aeabi_ddiv+0x3e4>
    2ed4:	000a      	movs	r2, r1
    2ed6:	1d11      	adds	r1, r2, #4
    2ed8:	4291      	cmp	r1, r2
    2eda:	4192      	sbcs	r2, r2
    2edc:	4252      	negs	r2, r2
    2ede:	4493      	add	fp, r2
    2ee0:	e754      	b.n	2d8c <__aeabi_ddiv+0x3e4>
    2ee2:	4b47      	ldr	r3, [pc, #284]	; (3000 <__aeabi_ddiv+0x658>)
    2ee4:	18e3      	adds	r3, r4, r3
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	dde5      	ble.n	2eb6 <__aeabi_ddiv+0x50e>
    2eea:	2201      	movs	r2, #1
    2eec:	4252      	negs	r2, r2
    2eee:	e7f2      	b.n	2ed6 <__aeabi_ddiv+0x52e>
    2ef0:	001d      	movs	r5, r3
    2ef2:	e6fa      	b.n	2cea <__aeabi_ddiv+0x342>
    2ef4:	469a      	mov	sl, r3
    2ef6:	e71c      	b.n	2d32 <__aeabi_ddiv+0x38a>
    2ef8:	42b0      	cmp	r0, r6
    2efa:	d839      	bhi.n	2f70 <__aeabi_ddiv+0x5c8>
    2efc:	d06e      	beq.n	2fdc <__aeabi_ddiv+0x634>
    2efe:	0011      	movs	r1, r2
    2f00:	e73a      	b.n	2d78 <__aeabi_ddiv+0x3d0>
    2f02:	9302      	str	r3, [sp, #8]
    2f04:	e73a      	b.n	2d7c <__aeabi_ddiv+0x3d4>
    2f06:	2a1f      	cmp	r2, #31
    2f08:	dc3c      	bgt.n	2f84 <__aeabi_ddiv+0x5dc>
    2f0a:	2320      	movs	r3, #32
    2f0c:	1a9b      	subs	r3, r3, r2
    2f0e:	000c      	movs	r4, r1
    2f10:	4658      	mov	r0, fp
    2f12:	4099      	lsls	r1, r3
    2f14:	4098      	lsls	r0, r3
    2f16:	1e4b      	subs	r3, r1, #1
    2f18:	4199      	sbcs	r1, r3
    2f1a:	465b      	mov	r3, fp
    2f1c:	40d4      	lsrs	r4, r2
    2f1e:	40d3      	lsrs	r3, r2
    2f20:	4320      	orrs	r0, r4
    2f22:	4308      	orrs	r0, r1
    2f24:	001a      	movs	r2, r3
    2f26:	0743      	lsls	r3, r0, #29
    2f28:	d009      	beq.n	2f3e <__aeabi_ddiv+0x596>
    2f2a:	230f      	movs	r3, #15
    2f2c:	4003      	ands	r3, r0
    2f2e:	2b04      	cmp	r3, #4
    2f30:	d005      	beq.n	2f3e <__aeabi_ddiv+0x596>
    2f32:	0001      	movs	r1, r0
    2f34:	1d08      	adds	r0, r1, #4
    2f36:	4288      	cmp	r0, r1
    2f38:	419b      	sbcs	r3, r3
    2f3a:	425b      	negs	r3, r3
    2f3c:	18d2      	adds	r2, r2, r3
    2f3e:	0213      	lsls	r3, r2, #8
    2f40:	d53a      	bpl.n	2fb8 <__aeabi_ddiv+0x610>
    2f42:	2301      	movs	r3, #1
    2f44:	9a02      	ldr	r2, [sp, #8]
    2f46:	2401      	movs	r4, #1
    2f48:	401a      	ands	r2, r3
    2f4a:	2300      	movs	r3, #0
    2f4c:	4694      	mov	ip, r2
    2f4e:	4698      	mov	r8, r3
    2f50:	2200      	movs	r2, #0
    2f52:	e5f7      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2f54:	2102      	movs	r1, #2
    2f56:	4249      	negs	r1, r1
    2f58:	468c      	mov	ip, r1
    2f5a:	9d03      	ldr	r5, [sp, #12]
    2f5c:	44e3      	add	fp, ip
    2f5e:	46ac      	mov	ip, r5
    2f60:	44e2      	add	sl, ip
    2f62:	45aa      	cmp	sl, r5
    2f64:	41ad      	sbcs	r5, r5
    2f66:	426d      	negs	r5, r5
    2f68:	4445      	add	r5, r8
    2f6a:	18ed      	adds	r5, r5, r3
    2f6c:	1a2d      	subs	r5, r5, r0
    2f6e:	e696      	b.n	2c9e <__aeabi_ddiv+0x2f6>
    2f70:	1e8a      	subs	r2, r1, #2
    2f72:	9903      	ldr	r1, [sp, #12]
    2f74:	004d      	lsls	r5, r1, #1
    2f76:	428d      	cmp	r5, r1
    2f78:	4189      	sbcs	r1, r1
    2f7a:	4249      	negs	r1, r1
    2f7c:	4441      	add	r1, r8
    2f7e:	1876      	adds	r6, r6, r1
    2f80:	9503      	str	r5, [sp, #12]
    2f82:	e78f      	b.n	2ea4 <__aeabi_ddiv+0x4fc>
    2f84:	201f      	movs	r0, #31
    2f86:	4240      	negs	r0, r0
    2f88:	1ac3      	subs	r3, r0, r3
    2f8a:	4658      	mov	r0, fp
    2f8c:	40d8      	lsrs	r0, r3
    2f8e:	0003      	movs	r3, r0
    2f90:	2a20      	cmp	r2, #32
    2f92:	d028      	beq.n	2fe6 <__aeabi_ddiv+0x63e>
    2f94:	2040      	movs	r0, #64	; 0x40
    2f96:	465d      	mov	r5, fp
    2f98:	1a82      	subs	r2, r0, r2
    2f9a:	4095      	lsls	r5, r2
    2f9c:	4329      	orrs	r1, r5
    2f9e:	1e4a      	subs	r2, r1, #1
    2fa0:	4191      	sbcs	r1, r2
    2fa2:	4319      	orrs	r1, r3
    2fa4:	2307      	movs	r3, #7
    2fa6:	2200      	movs	r2, #0
    2fa8:	400b      	ands	r3, r1
    2faa:	d009      	beq.n	2fc0 <__aeabi_ddiv+0x618>
    2fac:	230f      	movs	r3, #15
    2fae:	2200      	movs	r2, #0
    2fb0:	400b      	ands	r3, r1
    2fb2:	0008      	movs	r0, r1
    2fb4:	2b04      	cmp	r3, #4
    2fb6:	d1bd      	bne.n	2f34 <__aeabi_ddiv+0x58c>
    2fb8:	0001      	movs	r1, r0
    2fba:	0753      	lsls	r3, r2, #29
    2fbc:	0252      	lsls	r2, r2, #9
    2fbe:	0b12      	lsrs	r2, r2, #12
    2fc0:	08c9      	lsrs	r1, r1, #3
    2fc2:	4319      	orrs	r1, r3
    2fc4:	2301      	movs	r3, #1
    2fc6:	4688      	mov	r8, r1
    2fc8:	9902      	ldr	r1, [sp, #8]
    2fca:	2400      	movs	r4, #0
    2fcc:	4019      	ands	r1, r3
    2fce:	468c      	mov	ip, r1
    2fd0:	e5b8      	b.n	2b44 <__aeabi_ddiv+0x19c>
    2fd2:	4552      	cmp	r2, sl
    2fd4:	d8be      	bhi.n	2f54 <__aeabi_ddiv+0x5ac>
    2fd6:	468b      	mov	fp, r1
    2fd8:	2500      	movs	r5, #0
    2fda:	e660      	b.n	2c9e <__aeabi_ddiv+0x2f6>
    2fdc:	9d03      	ldr	r5, [sp, #12]
    2fde:	429d      	cmp	r5, r3
    2fe0:	d3c6      	bcc.n	2f70 <__aeabi_ddiv+0x5c8>
    2fe2:	0011      	movs	r1, r2
    2fe4:	e762      	b.n	2eac <__aeabi_ddiv+0x504>
    2fe6:	2500      	movs	r5, #0
    2fe8:	e7d8      	b.n	2f9c <__aeabi_ddiv+0x5f4>
    2fea:	2280      	movs	r2, #128	; 0x80
    2fec:	465b      	mov	r3, fp
    2fee:	0312      	lsls	r2, r2, #12
    2ff0:	431a      	orrs	r2, r3
    2ff2:	9b01      	ldr	r3, [sp, #4]
    2ff4:	0312      	lsls	r2, r2, #12
    2ff6:	0b12      	lsrs	r2, r2, #12
    2ff8:	469c      	mov	ip, r3
    2ffa:	4688      	mov	r8, r1
    2ffc:	4c03      	ldr	r4, [pc, #12]	; (300c <__aeabi_ddiv+0x664>)
    2ffe:	e5a1      	b.n	2b44 <__aeabi_ddiv+0x19c>
    3000:	000003ff 	.word	0x000003ff
    3004:	feffffff 	.word	0xfeffffff
    3008:	000007fe 	.word	0x000007fe
    300c:	000007ff 	.word	0x000007ff

00003010 <__aeabi_dmul>:
    3010:	b5f0      	push	{r4, r5, r6, r7, lr}
    3012:	4657      	mov	r7, sl
    3014:	4645      	mov	r5, r8
    3016:	46de      	mov	lr, fp
    3018:	464e      	mov	r6, r9
    301a:	b5e0      	push	{r5, r6, r7, lr}
    301c:	030c      	lsls	r4, r1, #12
    301e:	4698      	mov	r8, r3
    3020:	004e      	lsls	r6, r1, #1
    3022:	0b23      	lsrs	r3, r4, #12
    3024:	b087      	sub	sp, #28
    3026:	0007      	movs	r7, r0
    3028:	4692      	mov	sl, r2
    302a:	469b      	mov	fp, r3
    302c:	0d76      	lsrs	r6, r6, #21
    302e:	0fcd      	lsrs	r5, r1, #31
    3030:	2e00      	cmp	r6, #0
    3032:	d06b      	beq.n	310c <__aeabi_dmul+0xfc>
    3034:	4b6d      	ldr	r3, [pc, #436]	; (31ec <__aeabi_dmul+0x1dc>)
    3036:	429e      	cmp	r6, r3
    3038:	d035      	beq.n	30a6 <__aeabi_dmul+0x96>
    303a:	2480      	movs	r4, #128	; 0x80
    303c:	465b      	mov	r3, fp
    303e:	0f42      	lsrs	r2, r0, #29
    3040:	0424      	lsls	r4, r4, #16
    3042:	00db      	lsls	r3, r3, #3
    3044:	4314      	orrs	r4, r2
    3046:	431c      	orrs	r4, r3
    3048:	00c3      	lsls	r3, r0, #3
    304a:	4699      	mov	r9, r3
    304c:	4b68      	ldr	r3, [pc, #416]	; (31f0 <__aeabi_dmul+0x1e0>)
    304e:	46a3      	mov	fp, r4
    3050:	469c      	mov	ip, r3
    3052:	2300      	movs	r3, #0
    3054:	2700      	movs	r7, #0
    3056:	4466      	add	r6, ip
    3058:	9302      	str	r3, [sp, #8]
    305a:	4643      	mov	r3, r8
    305c:	031c      	lsls	r4, r3, #12
    305e:	005a      	lsls	r2, r3, #1
    3060:	0fdb      	lsrs	r3, r3, #31
    3062:	4650      	mov	r0, sl
    3064:	0b24      	lsrs	r4, r4, #12
    3066:	0d52      	lsrs	r2, r2, #21
    3068:	4698      	mov	r8, r3
    306a:	d100      	bne.n	306e <__aeabi_dmul+0x5e>
    306c:	e076      	b.n	315c <__aeabi_dmul+0x14c>
    306e:	4b5f      	ldr	r3, [pc, #380]	; (31ec <__aeabi_dmul+0x1dc>)
    3070:	429a      	cmp	r2, r3
    3072:	d06d      	beq.n	3150 <__aeabi_dmul+0x140>
    3074:	2380      	movs	r3, #128	; 0x80
    3076:	0f41      	lsrs	r1, r0, #29
    3078:	041b      	lsls	r3, r3, #16
    307a:	430b      	orrs	r3, r1
    307c:	495c      	ldr	r1, [pc, #368]	; (31f0 <__aeabi_dmul+0x1e0>)
    307e:	00e4      	lsls	r4, r4, #3
    3080:	468c      	mov	ip, r1
    3082:	431c      	orrs	r4, r3
    3084:	00c3      	lsls	r3, r0, #3
    3086:	2000      	movs	r0, #0
    3088:	4462      	add	r2, ip
    308a:	4641      	mov	r1, r8
    308c:	18b6      	adds	r6, r6, r2
    308e:	4069      	eors	r1, r5
    3090:	1c72      	adds	r2, r6, #1
    3092:	9101      	str	r1, [sp, #4]
    3094:	4694      	mov	ip, r2
    3096:	4307      	orrs	r7, r0
    3098:	2f0f      	cmp	r7, #15
    309a:	d900      	bls.n	309e <__aeabi_dmul+0x8e>
    309c:	e0b0      	b.n	3200 <__aeabi_dmul+0x1f0>
    309e:	4a55      	ldr	r2, [pc, #340]	; (31f4 <__aeabi_dmul+0x1e4>)
    30a0:	00bf      	lsls	r7, r7, #2
    30a2:	59d2      	ldr	r2, [r2, r7]
    30a4:	4697      	mov	pc, r2
    30a6:	465b      	mov	r3, fp
    30a8:	4303      	orrs	r3, r0
    30aa:	4699      	mov	r9, r3
    30ac:	d000      	beq.n	30b0 <__aeabi_dmul+0xa0>
    30ae:	e087      	b.n	31c0 <__aeabi_dmul+0x1b0>
    30b0:	2300      	movs	r3, #0
    30b2:	469b      	mov	fp, r3
    30b4:	3302      	adds	r3, #2
    30b6:	2708      	movs	r7, #8
    30b8:	9302      	str	r3, [sp, #8]
    30ba:	e7ce      	b.n	305a <__aeabi_dmul+0x4a>
    30bc:	4642      	mov	r2, r8
    30be:	9201      	str	r2, [sp, #4]
    30c0:	2802      	cmp	r0, #2
    30c2:	d067      	beq.n	3194 <__aeabi_dmul+0x184>
    30c4:	2803      	cmp	r0, #3
    30c6:	d100      	bne.n	30ca <__aeabi_dmul+0xba>
    30c8:	e20e      	b.n	34e8 <__aeabi_dmul+0x4d8>
    30ca:	2801      	cmp	r0, #1
    30cc:	d000      	beq.n	30d0 <__aeabi_dmul+0xc0>
    30ce:	e162      	b.n	3396 <__aeabi_dmul+0x386>
    30d0:	2300      	movs	r3, #0
    30d2:	2400      	movs	r4, #0
    30d4:	2200      	movs	r2, #0
    30d6:	4699      	mov	r9, r3
    30d8:	9901      	ldr	r1, [sp, #4]
    30da:	4001      	ands	r1, r0
    30dc:	b2cd      	uxtb	r5, r1
    30de:	2100      	movs	r1, #0
    30e0:	0312      	lsls	r2, r2, #12
    30e2:	0d0b      	lsrs	r3, r1, #20
    30e4:	0b12      	lsrs	r2, r2, #12
    30e6:	051b      	lsls	r3, r3, #20
    30e8:	4313      	orrs	r3, r2
    30ea:	4a43      	ldr	r2, [pc, #268]	; (31f8 <__aeabi_dmul+0x1e8>)
    30ec:	0524      	lsls	r4, r4, #20
    30ee:	4013      	ands	r3, r2
    30f0:	431c      	orrs	r4, r3
    30f2:	0064      	lsls	r4, r4, #1
    30f4:	07ed      	lsls	r5, r5, #31
    30f6:	0864      	lsrs	r4, r4, #1
    30f8:	432c      	orrs	r4, r5
    30fa:	4648      	mov	r0, r9
    30fc:	0021      	movs	r1, r4
    30fe:	b007      	add	sp, #28
    3100:	bc3c      	pop	{r2, r3, r4, r5}
    3102:	4690      	mov	r8, r2
    3104:	4699      	mov	r9, r3
    3106:	46a2      	mov	sl, r4
    3108:	46ab      	mov	fp, r5
    310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    310c:	4303      	orrs	r3, r0
    310e:	4699      	mov	r9, r3
    3110:	d04f      	beq.n	31b2 <__aeabi_dmul+0x1a2>
    3112:	465b      	mov	r3, fp
    3114:	2b00      	cmp	r3, #0
    3116:	d100      	bne.n	311a <__aeabi_dmul+0x10a>
    3118:	e189      	b.n	342e <__aeabi_dmul+0x41e>
    311a:	4658      	mov	r0, fp
    311c:	f000 fd7a 	bl	3c14 <__clzsi2>
    3120:	0003      	movs	r3, r0
    3122:	3b0b      	subs	r3, #11
    3124:	2b1c      	cmp	r3, #28
    3126:	dd00      	ble.n	312a <__aeabi_dmul+0x11a>
    3128:	e17a      	b.n	3420 <__aeabi_dmul+0x410>
    312a:	221d      	movs	r2, #29
    312c:	1ad3      	subs	r3, r2, r3
    312e:	003a      	movs	r2, r7
    3130:	0001      	movs	r1, r0
    3132:	465c      	mov	r4, fp
    3134:	40da      	lsrs	r2, r3
    3136:	3908      	subs	r1, #8
    3138:	408c      	lsls	r4, r1
    313a:	0013      	movs	r3, r2
    313c:	408f      	lsls	r7, r1
    313e:	4323      	orrs	r3, r4
    3140:	469b      	mov	fp, r3
    3142:	46b9      	mov	r9, r7
    3144:	2300      	movs	r3, #0
    3146:	4e2d      	ldr	r6, [pc, #180]	; (31fc <__aeabi_dmul+0x1ec>)
    3148:	2700      	movs	r7, #0
    314a:	1a36      	subs	r6, r6, r0
    314c:	9302      	str	r3, [sp, #8]
    314e:	e784      	b.n	305a <__aeabi_dmul+0x4a>
    3150:	4653      	mov	r3, sl
    3152:	4323      	orrs	r3, r4
    3154:	d12a      	bne.n	31ac <__aeabi_dmul+0x19c>
    3156:	2400      	movs	r4, #0
    3158:	2002      	movs	r0, #2
    315a:	e796      	b.n	308a <__aeabi_dmul+0x7a>
    315c:	4653      	mov	r3, sl
    315e:	4323      	orrs	r3, r4
    3160:	d020      	beq.n	31a4 <__aeabi_dmul+0x194>
    3162:	2c00      	cmp	r4, #0
    3164:	d100      	bne.n	3168 <__aeabi_dmul+0x158>
    3166:	e157      	b.n	3418 <__aeabi_dmul+0x408>
    3168:	0020      	movs	r0, r4
    316a:	f000 fd53 	bl	3c14 <__clzsi2>
    316e:	0003      	movs	r3, r0
    3170:	3b0b      	subs	r3, #11
    3172:	2b1c      	cmp	r3, #28
    3174:	dd00      	ble.n	3178 <__aeabi_dmul+0x168>
    3176:	e149      	b.n	340c <__aeabi_dmul+0x3fc>
    3178:	211d      	movs	r1, #29
    317a:	1acb      	subs	r3, r1, r3
    317c:	4651      	mov	r1, sl
    317e:	0002      	movs	r2, r0
    3180:	40d9      	lsrs	r1, r3
    3182:	4653      	mov	r3, sl
    3184:	3a08      	subs	r2, #8
    3186:	4094      	lsls	r4, r2
    3188:	4093      	lsls	r3, r2
    318a:	430c      	orrs	r4, r1
    318c:	4a1b      	ldr	r2, [pc, #108]	; (31fc <__aeabi_dmul+0x1ec>)
    318e:	1a12      	subs	r2, r2, r0
    3190:	2000      	movs	r0, #0
    3192:	e77a      	b.n	308a <__aeabi_dmul+0x7a>
    3194:	2501      	movs	r5, #1
    3196:	9b01      	ldr	r3, [sp, #4]
    3198:	4c14      	ldr	r4, [pc, #80]	; (31ec <__aeabi_dmul+0x1dc>)
    319a:	401d      	ands	r5, r3
    319c:	2300      	movs	r3, #0
    319e:	2200      	movs	r2, #0
    31a0:	4699      	mov	r9, r3
    31a2:	e79c      	b.n	30de <__aeabi_dmul+0xce>
    31a4:	2400      	movs	r4, #0
    31a6:	2200      	movs	r2, #0
    31a8:	2001      	movs	r0, #1
    31aa:	e76e      	b.n	308a <__aeabi_dmul+0x7a>
    31ac:	4653      	mov	r3, sl
    31ae:	2003      	movs	r0, #3
    31b0:	e76b      	b.n	308a <__aeabi_dmul+0x7a>
    31b2:	2300      	movs	r3, #0
    31b4:	469b      	mov	fp, r3
    31b6:	3301      	adds	r3, #1
    31b8:	2704      	movs	r7, #4
    31ba:	2600      	movs	r6, #0
    31bc:	9302      	str	r3, [sp, #8]
    31be:	e74c      	b.n	305a <__aeabi_dmul+0x4a>
    31c0:	2303      	movs	r3, #3
    31c2:	4681      	mov	r9, r0
    31c4:	270c      	movs	r7, #12
    31c6:	9302      	str	r3, [sp, #8]
    31c8:	e747      	b.n	305a <__aeabi_dmul+0x4a>
    31ca:	2280      	movs	r2, #128	; 0x80
    31cc:	2300      	movs	r3, #0
    31ce:	2500      	movs	r5, #0
    31d0:	0312      	lsls	r2, r2, #12
    31d2:	4699      	mov	r9, r3
    31d4:	4c05      	ldr	r4, [pc, #20]	; (31ec <__aeabi_dmul+0x1dc>)
    31d6:	e782      	b.n	30de <__aeabi_dmul+0xce>
    31d8:	465c      	mov	r4, fp
    31da:	464b      	mov	r3, r9
    31dc:	9802      	ldr	r0, [sp, #8]
    31de:	e76f      	b.n	30c0 <__aeabi_dmul+0xb0>
    31e0:	465c      	mov	r4, fp
    31e2:	464b      	mov	r3, r9
    31e4:	9501      	str	r5, [sp, #4]
    31e6:	9802      	ldr	r0, [sp, #8]
    31e8:	e76a      	b.n	30c0 <__aeabi_dmul+0xb0>
    31ea:	46c0      	nop			; (mov r8, r8)
    31ec:	000007ff 	.word	0x000007ff
    31f0:	fffffc01 	.word	0xfffffc01
    31f4:	00003d28 	.word	0x00003d28
    31f8:	800fffff 	.word	0x800fffff
    31fc:	fffffc0d 	.word	0xfffffc0d
    3200:	464a      	mov	r2, r9
    3202:	4649      	mov	r1, r9
    3204:	0c17      	lsrs	r7, r2, #16
    3206:	0c1a      	lsrs	r2, r3, #16
    3208:	041b      	lsls	r3, r3, #16
    320a:	0c1b      	lsrs	r3, r3, #16
    320c:	0408      	lsls	r0, r1, #16
    320e:	0019      	movs	r1, r3
    3210:	0c00      	lsrs	r0, r0, #16
    3212:	4341      	muls	r1, r0
    3214:	0015      	movs	r5, r2
    3216:	4688      	mov	r8, r1
    3218:	0019      	movs	r1, r3
    321a:	437d      	muls	r5, r7
    321c:	4379      	muls	r1, r7
    321e:	9503      	str	r5, [sp, #12]
    3220:	4689      	mov	r9, r1
    3222:	0029      	movs	r1, r5
    3224:	0015      	movs	r5, r2
    3226:	4345      	muls	r5, r0
    3228:	444d      	add	r5, r9
    322a:	9502      	str	r5, [sp, #8]
    322c:	4645      	mov	r5, r8
    322e:	0c2d      	lsrs	r5, r5, #16
    3230:	46aa      	mov	sl, r5
    3232:	9d02      	ldr	r5, [sp, #8]
    3234:	4455      	add	r5, sl
    3236:	45a9      	cmp	r9, r5
    3238:	d906      	bls.n	3248 <__aeabi_dmul+0x238>
    323a:	468a      	mov	sl, r1
    323c:	2180      	movs	r1, #128	; 0x80
    323e:	0249      	lsls	r1, r1, #9
    3240:	4689      	mov	r9, r1
    3242:	44ca      	add	sl, r9
    3244:	4651      	mov	r1, sl
    3246:	9103      	str	r1, [sp, #12]
    3248:	0c29      	lsrs	r1, r5, #16
    324a:	9104      	str	r1, [sp, #16]
    324c:	4641      	mov	r1, r8
    324e:	0409      	lsls	r1, r1, #16
    3250:	042d      	lsls	r5, r5, #16
    3252:	0c09      	lsrs	r1, r1, #16
    3254:	4688      	mov	r8, r1
    3256:	0029      	movs	r1, r5
    3258:	0c25      	lsrs	r5, r4, #16
    325a:	0424      	lsls	r4, r4, #16
    325c:	4441      	add	r1, r8
    325e:	0c24      	lsrs	r4, r4, #16
    3260:	9105      	str	r1, [sp, #20]
    3262:	0021      	movs	r1, r4
    3264:	4341      	muls	r1, r0
    3266:	4688      	mov	r8, r1
    3268:	0021      	movs	r1, r4
    326a:	4379      	muls	r1, r7
    326c:	468a      	mov	sl, r1
    326e:	4368      	muls	r0, r5
    3270:	4641      	mov	r1, r8
    3272:	4450      	add	r0, sl
    3274:	4681      	mov	r9, r0
    3276:	0c08      	lsrs	r0, r1, #16
    3278:	4448      	add	r0, r9
    327a:	436f      	muls	r7, r5
    327c:	4582      	cmp	sl, r0
    327e:	d903      	bls.n	3288 <__aeabi_dmul+0x278>
    3280:	2180      	movs	r1, #128	; 0x80
    3282:	0249      	lsls	r1, r1, #9
    3284:	4689      	mov	r9, r1
    3286:	444f      	add	r7, r9
    3288:	0c01      	lsrs	r1, r0, #16
    328a:	4689      	mov	r9, r1
    328c:	0039      	movs	r1, r7
    328e:	4449      	add	r1, r9
    3290:	9102      	str	r1, [sp, #8]
    3292:	4641      	mov	r1, r8
    3294:	040f      	lsls	r7, r1, #16
    3296:	9904      	ldr	r1, [sp, #16]
    3298:	0c3f      	lsrs	r7, r7, #16
    329a:	4688      	mov	r8, r1
    329c:	0400      	lsls	r0, r0, #16
    329e:	19c0      	adds	r0, r0, r7
    32a0:	4480      	add	r8, r0
    32a2:	4641      	mov	r1, r8
    32a4:	9104      	str	r1, [sp, #16]
    32a6:	4659      	mov	r1, fp
    32a8:	0c0f      	lsrs	r7, r1, #16
    32aa:	0409      	lsls	r1, r1, #16
    32ac:	0c09      	lsrs	r1, r1, #16
    32ae:	4688      	mov	r8, r1
    32b0:	4359      	muls	r1, r3
    32b2:	468a      	mov	sl, r1
    32b4:	0039      	movs	r1, r7
    32b6:	4351      	muls	r1, r2
    32b8:	4689      	mov	r9, r1
    32ba:	4641      	mov	r1, r8
    32bc:	434a      	muls	r2, r1
    32be:	4651      	mov	r1, sl
    32c0:	0c09      	lsrs	r1, r1, #16
    32c2:	468b      	mov	fp, r1
    32c4:	437b      	muls	r3, r7
    32c6:	18d2      	adds	r2, r2, r3
    32c8:	445a      	add	r2, fp
    32ca:	4293      	cmp	r3, r2
    32cc:	d903      	bls.n	32d6 <__aeabi_dmul+0x2c6>
    32ce:	2380      	movs	r3, #128	; 0x80
    32d0:	025b      	lsls	r3, r3, #9
    32d2:	469b      	mov	fp, r3
    32d4:	44d9      	add	r9, fp
    32d6:	4651      	mov	r1, sl
    32d8:	0409      	lsls	r1, r1, #16
    32da:	0c09      	lsrs	r1, r1, #16
    32dc:	468a      	mov	sl, r1
    32de:	4641      	mov	r1, r8
    32e0:	4361      	muls	r1, r4
    32e2:	437c      	muls	r4, r7
    32e4:	0c13      	lsrs	r3, r2, #16
    32e6:	0412      	lsls	r2, r2, #16
    32e8:	444b      	add	r3, r9
    32ea:	4452      	add	r2, sl
    32ec:	46a1      	mov	r9, r4
    32ee:	468a      	mov	sl, r1
    32f0:	003c      	movs	r4, r7
    32f2:	4641      	mov	r1, r8
    32f4:	436c      	muls	r4, r5
    32f6:	434d      	muls	r5, r1
    32f8:	4651      	mov	r1, sl
    32fa:	444d      	add	r5, r9
    32fc:	0c0f      	lsrs	r7, r1, #16
    32fe:	197d      	adds	r5, r7, r5
    3300:	45a9      	cmp	r9, r5
    3302:	d903      	bls.n	330c <__aeabi_dmul+0x2fc>
    3304:	2180      	movs	r1, #128	; 0x80
    3306:	0249      	lsls	r1, r1, #9
    3308:	4688      	mov	r8, r1
    330a:	4444      	add	r4, r8
    330c:	9f04      	ldr	r7, [sp, #16]
    330e:	9903      	ldr	r1, [sp, #12]
    3310:	46b8      	mov	r8, r7
    3312:	4441      	add	r1, r8
    3314:	468b      	mov	fp, r1
    3316:	4583      	cmp	fp, r0
    3318:	4180      	sbcs	r0, r0
    331a:	4241      	negs	r1, r0
    331c:	4688      	mov	r8, r1
    331e:	4651      	mov	r1, sl
    3320:	0408      	lsls	r0, r1, #16
    3322:	042f      	lsls	r7, r5, #16
    3324:	0c00      	lsrs	r0, r0, #16
    3326:	183f      	adds	r7, r7, r0
    3328:	4658      	mov	r0, fp
    332a:	9902      	ldr	r1, [sp, #8]
    332c:	1810      	adds	r0, r2, r0
    332e:	4689      	mov	r9, r1
    3330:	4290      	cmp	r0, r2
    3332:	4192      	sbcs	r2, r2
    3334:	444f      	add	r7, r9
    3336:	46ba      	mov	sl, r7
    3338:	4252      	negs	r2, r2
    333a:	4699      	mov	r9, r3
    333c:	4693      	mov	fp, r2
    333e:	44c2      	add	sl, r8
    3340:	44d1      	add	r9, sl
    3342:	44cb      	add	fp, r9
    3344:	428f      	cmp	r7, r1
    3346:	41bf      	sbcs	r7, r7
    3348:	45c2      	cmp	sl, r8
    334a:	4189      	sbcs	r1, r1
    334c:	4599      	cmp	r9, r3
    334e:	419b      	sbcs	r3, r3
    3350:	4593      	cmp	fp, r2
    3352:	4192      	sbcs	r2, r2
    3354:	427f      	negs	r7, r7
    3356:	4249      	negs	r1, r1
    3358:	0c2d      	lsrs	r5, r5, #16
    335a:	4252      	negs	r2, r2
    335c:	430f      	orrs	r7, r1
    335e:	425b      	negs	r3, r3
    3360:	4313      	orrs	r3, r2
    3362:	197f      	adds	r7, r7, r5
    3364:	18ff      	adds	r7, r7, r3
    3366:	465b      	mov	r3, fp
    3368:	193c      	adds	r4, r7, r4
    336a:	0ddb      	lsrs	r3, r3, #23
    336c:	9a05      	ldr	r2, [sp, #20]
    336e:	0264      	lsls	r4, r4, #9
    3370:	431c      	orrs	r4, r3
    3372:	0243      	lsls	r3, r0, #9
    3374:	4313      	orrs	r3, r2
    3376:	1e5d      	subs	r5, r3, #1
    3378:	41ab      	sbcs	r3, r5
    337a:	465a      	mov	r2, fp
    337c:	0dc0      	lsrs	r0, r0, #23
    337e:	4303      	orrs	r3, r0
    3380:	0252      	lsls	r2, r2, #9
    3382:	4313      	orrs	r3, r2
    3384:	01e2      	lsls	r2, r4, #7
    3386:	d556      	bpl.n	3436 <__aeabi_dmul+0x426>
    3388:	2001      	movs	r0, #1
    338a:	085a      	lsrs	r2, r3, #1
    338c:	4003      	ands	r3, r0
    338e:	4313      	orrs	r3, r2
    3390:	07e2      	lsls	r2, r4, #31
    3392:	4313      	orrs	r3, r2
    3394:	0864      	lsrs	r4, r4, #1
    3396:	485a      	ldr	r0, [pc, #360]	; (3500 <__aeabi_dmul+0x4f0>)
    3398:	4460      	add	r0, ip
    339a:	2800      	cmp	r0, #0
    339c:	dd4d      	ble.n	343a <__aeabi_dmul+0x42a>
    339e:	075a      	lsls	r2, r3, #29
    33a0:	d009      	beq.n	33b6 <__aeabi_dmul+0x3a6>
    33a2:	220f      	movs	r2, #15
    33a4:	401a      	ands	r2, r3
    33a6:	2a04      	cmp	r2, #4
    33a8:	d005      	beq.n	33b6 <__aeabi_dmul+0x3a6>
    33aa:	1d1a      	adds	r2, r3, #4
    33ac:	429a      	cmp	r2, r3
    33ae:	419b      	sbcs	r3, r3
    33b0:	425b      	negs	r3, r3
    33b2:	18e4      	adds	r4, r4, r3
    33b4:	0013      	movs	r3, r2
    33b6:	01e2      	lsls	r2, r4, #7
    33b8:	d504      	bpl.n	33c4 <__aeabi_dmul+0x3b4>
    33ba:	2080      	movs	r0, #128	; 0x80
    33bc:	4a51      	ldr	r2, [pc, #324]	; (3504 <__aeabi_dmul+0x4f4>)
    33be:	00c0      	lsls	r0, r0, #3
    33c0:	4014      	ands	r4, r2
    33c2:	4460      	add	r0, ip
    33c4:	4a50      	ldr	r2, [pc, #320]	; (3508 <__aeabi_dmul+0x4f8>)
    33c6:	4290      	cmp	r0, r2
    33c8:	dd00      	ble.n	33cc <__aeabi_dmul+0x3bc>
    33ca:	e6e3      	b.n	3194 <__aeabi_dmul+0x184>
    33cc:	2501      	movs	r5, #1
    33ce:	08db      	lsrs	r3, r3, #3
    33d0:	0762      	lsls	r2, r4, #29
    33d2:	431a      	orrs	r2, r3
    33d4:	0264      	lsls	r4, r4, #9
    33d6:	9b01      	ldr	r3, [sp, #4]
    33d8:	4691      	mov	r9, r2
    33da:	0b22      	lsrs	r2, r4, #12
    33dc:	0544      	lsls	r4, r0, #21
    33de:	0d64      	lsrs	r4, r4, #21
    33e0:	401d      	ands	r5, r3
    33e2:	e67c      	b.n	30de <__aeabi_dmul+0xce>
    33e4:	2280      	movs	r2, #128	; 0x80
    33e6:	4659      	mov	r1, fp
    33e8:	0312      	lsls	r2, r2, #12
    33ea:	4211      	tst	r1, r2
    33ec:	d008      	beq.n	3400 <__aeabi_dmul+0x3f0>
    33ee:	4214      	tst	r4, r2
    33f0:	d106      	bne.n	3400 <__aeabi_dmul+0x3f0>
    33f2:	4322      	orrs	r2, r4
    33f4:	0312      	lsls	r2, r2, #12
    33f6:	0b12      	lsrs	r2, r2, #12
    33f8:	4645      	mov	r5, r8
    33fa:	4699      	mov	r9, r3
    33fc:	4c43      	ldr	r4, [pc, #268]	; (350c <__aeabi_dmul+0x4fc>)
    33fe:	e66e      	b.n	30de <__aeabi_dmul+0xce>
    3400:	465b      	mov	r3, fp
    3402:	431a      	orrs	r2, r3
    3404:	0312      	lsls	r2, r2, #12
    3406:	0b12      	lsrs	r2, r2, #12
    3408:	4c40      	ldr	r4, [pc, #256]	; (350c <__aeabi_dmul+0x4fc>)
    340a:	e668      	b.n	30de <__aeabi_dmul+0xce>
    340c:	0003      	movs	r3, r0
    340e:	4654      	mov	r4, sl
    3410:	3b28      	subs	r3, #40	; 0x28
    3412:	409c      	lsls	r4, r3
    3414:	2300      	movs	r3, #0
    3416:	e6b9      	b.n	318c <__aeabi_dmul+0x17c>
    3418:	f000 fbfc 	bl	3c14 <__clzsi2>
    341c:	3020      	adds	r0, #32
    341e:	e6a6      	b.n	316e <__aeabi_dmul+0x15e>
    3420:	0003      	movs	r3, r0
    3422:	3b28      	subs	r3, #40	; 0x28
    3424:	409f      	lsls	r7, r3
    3426:	2300      	movs	r3, #0
    3428:	46bb      	mov	fp, r7
    342a:	4699      	mov	r9, r3
    342c:	e68a      	b.n	3144 <__aeabi_dmul+0x134>
    342e:	f000 fbf1 	bl	3c14 <__clzsi2>
    3432:	3020      	adds	r0, #32
    3434:	e674      	b.n	3120 <__aeabi_dmul+0x110>
    3436:	46b4      	mov	ip, r6
    3438:	e7ad      	b.n	3396 <__aeabi_dmul+0x386>
    343a:	2501      	movs	r5, #1
    343c:	1a2a      	subs	r2, r5, r0
    343e:	2a38      	cmp	r2, #56	; 0x38
    3440:	dd06      	ble.n	3450 <__aeabi_dmul+0x440>
    3442:	9b01      	ldr	r3, [sp, #4]
    3444:	2400      	movs	r4, #0
    3446:	401d      	ands	r5, r3
    3448:	2300      	movs	r3, #0
    344a:	2200      	movs	r2, #0
    344c:	4699      	mov	r9, r3
    344e:	e646      	b.n	30de <__aeabi_dmul+0xce>
    3450:	2a1f      	cmp	r2, #31
    3452:	dc21      	bgt.n	3498 <__aeabi_dmul+0x488>
    3454:	2520      	movs	r5, #32
    3456:	0020      	movs	r0, r4
    3458:	1aad      	subs	r5, r5, r2
    345a:	001e      	movs	r6, r3
    345c:	40ab      	lsls	r3, r5
    345e:	40a8      	lsls	r0, r5
    3460:	40d6      	lsrs	r6, r2
    3462:	1e5d      	subs	r5, r3, #1
    3464:	41ab      	sbcs	r3, r5
    3466:	4330      	orrs	r0, r6
    3468:	4318      	orrs	r0, r3
    346a:	40d4      	lsrs	r4, r2
    346c:	0743      	lsls	r3, r0, #29
    346e:	d009      	beq.n	3484 <__aeabi_dmul+0x474>
    3470:	230f      	movs	r3, #15
    3472:	4003      	ands	r3, r0
    3474:	2b04      	cmp	r3, #4
    3476:	d005      	beq.n	3484 <__aeabi_dmul+0x474>
    3478:	0003      	movs	r3, r0
    347a:	1d18      	adds	r0, r3, #4
    347c:	4298      	cmp	r0, r3
    347e:	419b      	sbcs	r3, r3
    3480:	425b      	negs	r3, r3
    3482:	18e4      	adds	r4, r4, r3
    3484:	0223      	lsls	r3, r4, #8
    3486:	d521      	bpl.n	34cc <__aeabi_dmul+0x4bc>
    3488:	2501      	movs	r5, #1
    348a:	9b01      	ldr	r3, [sp, #4]
    348c:	2401      	movs	r4, #1
    348e:	401d      	ands	r5, r3
    3490:	2300      	movs	r3, #0
    3492:	2200      	movs	r2, #0
    3494:	4699      	mov	r9, r3
    3496:	e622      	b.n	30de <__aeabi_dmul+0xce>
    3498:	251f      	movs	r5, #31
    349a:	0021      	movs	r1, r4
    349c:	426d      	negs	r5, r5
    349e:	1a28      	subs	r0, r5, r0
    34a0:	40c1      	lsrs	r1, r0
    34a2:	0008      	movs	r0, r1
    34a4:	2a20      	cmp	r2, #32
    34a6:	d01d      	beq.n	34e4 <__aeabi_dmul+0x4d4>
    34a8:	355f      	adds	r5, #95	; 0x5f
    34aa:	1aaa      	subs	r2, r5, r2
    34ac:	4094      	lsls	r4, r2
    34ae:	4323      	orrs	r3, r4
    34b0:	1e5c      	subs	r4, r3, #1
    34b2:	41a3      	sbcs	r3, r4
    34b4:	2507      	movs	r5, #7
    34b6:	4303      	orrs	r3, r0
    34b8:	401d      	ands	r5, r3
    34ba:	2200      	movs	r2, #0
    34bc:	2d00      	cmp	r5, #0
    34be:	d009      	beq.n	34d4 <__aeabi_dmul+0x4c4>
    34c0:	220f      	movs	r2, #15
    34c2:	2400      	movs	r4, #0
    34c4:	401a      	ands	r2, r3
    34c6:	0018      	movs	r0, r3
    34c8:	2a04      	cmp	r2, #4
    34ca:	d1d6      	bne.n	347a <__aeabi_dmul+0x46a>
    34cc:	0003      	movs	r3, r0
    34ce:	0765      	lsls	r5, r4, #29
    34d0:	0264      	lsls	r4, r4, #9
    34d2:	0b22      	lsrs	r2, r4, #12
    34d4:	08db      	lsrs	r3, r3, #3
    34d6:	432b      	orrs	r3, r5
    34d8:	2501      	movs	r5, #1
    34da:	4699      	mov	r9, r3
    34dc:	9b01      	ldr	r3, [sp, #4]
    34de:	2400      	movs	r4, #0
    34e0:	401d      	ands	r5, r3
    34e2:	e5fc      	b.n	30de <__aeabi_dmul+0xce>
    34e4:	2400      	movs	r4, #0
    34e6:	e7e2      	b.n	34ae <__aeabi_dmul+0x49e>
    34e8:	2280      	movs	r2, #128	; 0x80
    34ea:	2501      	movs	r5, #1
    34ec:	0312      	lsls	r2, r2, #12
    34ee:	4322      	orrs	r2, r4
    34f0:	9901      	ldr	r1, [sp, #4]
    34f2:	0312      	lsls	r2, r2, #12
    34f4:	0b12      	lsrs	r2, r2, #12
    34f6:	400d      	ands	r5, r1
    34f8:	4699      	mov	r9, r3
    34fa:	4c04      	ldr	r4, [pc, #16]	; (350c <__aeabi_dmul+0x4fc>)
    34fc:	e5ef      	b.n	30de <__aeabi_dmul+0xce>
    34fe:	46c0      	nop			; (mov r8, r8)
    3500:	000003ff 	.word	0x000003ff
    3504:	feffffff 	.word	0xfeffffff
    3508:	000007fe 	.word	0x000007fe
    350c:	000007ff 	.word	0x000007ff

00003510 <__aeabi_dsub>:
    3510:	b5f0      	push	{r4, r5, r6, r7, lr}
    3512:	4646      	mov	r6, r8
    3514:	46d6      	mov	lr, sl
    3516:	464f      	mov	r7, r9
    3518:	030c      	lsls	r4, r1, #12
    351a:	b5c0      	push	{r6, r7, lr}
    351c:	0fcd      	lsrs	r5, r1, #31
    351e:	004e      	lsls	r6, r1, #1
    3520:	0a61      	lsrs	r1, r4, #9
    3522:	0f44      	lsrs	r4, r0, #29
    3524:	430c      	orrs	r4, r1
    3526:	00c1      	lsls	r1, r0, #3
    3528:	0058      	lsls	r0, r3, #1
    352a:	0d40      	lsrs	r0, r0, #21
    352c:	4684      	mov	ip, r0
    352e:	468a      	mov	sl, r1
    3530:	000f      	movs	r7, r1
    3532:	0319      	lsls	r1, r3, #12
    3534:	0f50      	lsrs	r0, r2, #29
    3536:	0a49      	lsrs	r1, r1, #9
    3538:	4301      	orrs	r1, r0
    353a:	48c6      	ldr	r0, [pc, #792]	; (3854 <__aeabi_dsub+0x344>)
    353c:	0d76      	lsrs	r6, r6, #21
    353e:	46a8      	mov	r8, r5
    3540:	0fdb      	lsrs	r3, r3, #31
    3542:	00d2      	lsls	r2, r2, #3
    3544:	4584      	cmp	ip, r0
    3546:	d100      	bne.n	354a <__aeabi_dsub+0x3a>
    3548:	e0d8      	b.n	36fc <__aeabi_dsub+0x1ec>
    354a:	2001      	movs	r0, #1
    354c:	4043      	eors	r3, r0
    354e:	42ab      	cmp	r3, r5
    3550:	d100      	bne.n	3554 <__aeabi_dsub+0x44>
    3552:	e0a6      	b.n	36a2 <__aeabi_dsub+0x192>
    3554:	4660      	mov	r0, ip
    3556:	1a35      	subs	r5, r6, r0
    3558:	2d00      	cmp	r5, #0
    355a:	dc00      	bgt.n	355e <__aeabi_dsub+0x4e>
    355c:	e105      	b.n	376a <__aeabi_dsub+0x25a>
    355e:	2800      	cmp	r0, #0
    3560:	d110      	bne.n	3584 <__aeabi_dsub+0x74>
    3562:	000b      	movs	r3, r1
    3564:	4313      	orrs	r3, r2
    3566:	d100      	bne.n	356a <__aeabi_dsub+0x5a>
    3568:	e0d7      	b.n	371a <__aeabi_dsub+0x20a>
    356a:	1e6b      	subs	r3, r5, #1
    356c:	2b00      	cmp	r3, #0
    356e:	d000      	beq.n	3572 <__aeabi_dsub+0x62>
    3570:	e14b      	b.n	380a <__aeabi_dsub+0x2fa>
    3572:	4653      	mov	r3, sl
    3574:	1a9f      	subs	r7, r3, r2
    3576:	45ba      	cmp	sl, r7
    3578:	4180      	sbcs	r0, r0
    357a:	1a64      	subs	r4, r4, r1
    357c:	4240      	negs	r0, r0
    357e:	1a24      	subs	r4, r4, r0
    3580:	2601      	movs	r6, #1
    3582:	e01e      	b.n	35c2 <__aeabi_dsub+0xb2>
    3584:	4bb3      	ldr	r3, [pc, #716]	; (3854 <__aeabi_dsub+0x344>)
    3586:	429e      	cmp	r6, r3
    3588:	d048      	beq.n	361c <__aeabi_dsub+0x10c>
    358a:	2380      	movs	r3, #128	; 0x80
    358c:	041b      	lsls	r3, r3, #16
    358e:	4319      	orrs	r1, r3
    3590:	2d38      	cmp	r5, #56	; 0x38
    3592:	dd00      	ble.n	3596 <__aeabi_dsub+0x86>
    3594:	e119      	b.n	37ca <__aeabi_dsub+0x2ba>
    3596:	2d1f      	cmp	r5, #31
    3598:	dd00      	ble.n	359c <__aeabi_dsub+0x8c>
    359a:	e14c      	b.n	3836 <__aeabi_dsub+0x326>
    359c:	2320      	movs	r3, #32
    359e:	000f      	movs	r7, r1
    35a0:	1b5b      	subs	r3, r3, r5
    35a2:	0010      	movs	r0, r2
    35a4:	409a      	lsls	r2, r3
    35a6:	409f      	lsls	r7, r3
    35a8:	40e8      	lsrs	r0, r5
    35aa:	1e53      	subs	r3, r2, #1
    35ac:	419a      	sbcs	r2, r3
    35ae:	40e9      	lsrs	r1, r5
    35b0:	4307      	orrs	r7, r0
    35b2:	4317      	orrs	r7, r2
    35b4:	4653      	mov	r3, sl
    35b6:	1bdf      	subs	r7, r3, r7
    35b8:	1a61      	subs	r1, r4, r1
    35ba:	45ba      	cmp	sl, r7
    35bc:	41a4      	sbcs	r4, r4
    35be:	4264      	negs	r4, r4
    35c0:	1b0c      	subs	r4, r1, r4
    35c2:	0223      	lsls	r3, r4, #8
    35c4:	d400      	bmi.n	35c8 <__aeabi_dsub+0xb8>
    35c6:	e0c5      	b.n	3754 <__aeabi_dsub+0x244>
    35c8:	0264      	lsls	r4, r4, #9
    35ca:	0a65      	lsrs	r5, r4, #9
    35cc:	2d00      	cmp	r5, #0
    35ce:	d100      	bne.n	35d2 <__aeabi_dsub+0xc2>
    35d0:	e0f6      	b.n	37c0 <__aeabi_dsub+0x2b0>
    35d2:	0028      	movs	r0, r5
    35d4:	f000 fb1e 	bl	3c14 <__clzsi2>
    35d8:	0003      	movs	r3, r0
    35da:	3b08      	subs	r3, #8
    35dc:	2b1f      	cmp	r3, #31
    35de:	dd00      	ble.n	35e2 <__aeabi_dsub+0xd2>
    35e0:	e0e9      	b.n	37b6 <__aeabi_dsub+0x2a6>
    35e2:	2220      	movs	r2, #32
    35e4:	003c      	movs	r4, r7
    35e6:	1ad2      	subs	r2, r2, r3
    35e8:	409d      	lsls	r5, r3
    35ea:	40d4      	lsrs	r4, r2
    35ec:	409f      	lsls	r7, r3
    35ee:	4325      	orrs	r5, r4
    35f0:	429e      	cmp	r6, r3
    35f2:	dd00      	ble.n	35f6 <__aeabi_dsub+0xe6>
    35f4:	e0db      	b.n	37ae <__aeabi_dsub+0x29e>
    35f6:	1b9e      	subs	r6, r3, r6
    35f8:	1c73      	adds	r3, r6, #1
    35fa:	2b1f      	cmp	r3, #31
    35fc:	dd00      	ble.n	3600 <__aeabi_dsub+0xf0>
    35fe:	e10a      	b.n	3816 <__aeabi_dsub+0x306>
    3600:	2220      	movs	r2, #32
    3602:	0038      	movs	r0, r7
    3604:	1ad2      	subs	r2, r2, r3
    3606:	0029      	movs	r1, r5
    3608:	4097      	lsls	r7, r2
    360a:	002c      	movs	r4, r5
    360c:	4091      	lsls	r1, r2
    360e:	40d8      	lsrs	r0, r3
    3610:	1e7a      	subs	r2, r7, #1
    3612:	4197      	sbcs	r7, r2
    3614:	40dc      	lsrs	r4, r3
    3616:	2600      	movs	r6, #0
    3618:	4301      	orrs	r1, r0
    361a:	430f      	orrs	r7, r1
    361c:	077b      	lsls	r3, r7, #29
    361e:	d009      	beq.n	3634 <__aeabi_dsub+0x124>
    3620:	230f      	movs	r3, #15
    3622:	403b      	ands	r3, r7
    3624:	2b04      	cmp	r3, #4
    3626:	d005      	beq.n	3634 <__aeabi_dsub+0x124>
    3628:	1d3b      	adds	r3, r7, #4
    362a:	42bb      	cmp	r3, r7
    362c:	41bf      	sbcs	r7, r7
    362e:	427f      	negs	r7, r7
    3630:	19e4      	adds	r4, r4, r7
    3632:	001f      	movs	r7, r3
    3634:	0223      	lsls	r3, r4, #8
    3636:	d525      	bpl.n	3684 <__aeabi_dsub+0x174>
    3638:	4b86      	ldr	r3, [pc, #536]	; (3854 <__aeabi_dsub+0x344>)
    363a:	3601      	adds	r6, #1
    363c:	429e      	cmp	r6, r3
    363e:	d100      	bne.n	3642 <__aeabi_dsub+0x132>
    3640:	e0af      	b.n	37a2 <__aeabi_dsub+0x292>
    3642:	4b85      	ldr	r3, [pc, #532]	; (3858 <__aeabi_dsub+0x348>)
    3644:	2501      	movs	r5, #1
    3646:	401c      	ands	r4, r3
    3648:	4643      	mov	r3, r8
    364a:	0762      	lsls	r2, r4, #29
    364c:	08ff      	lsrs	r7, r7, #3
    364e:	0264      	lsls	r4, r4, #9
    3650:	0576      	lsls	r6, r6, #21
    3652:	4317      	orrs	r7, r2
    3654:	0b24      	lsrs	r4, r4, #12
    3656:	0d76      	lsrs	r6, r6, #21
    3658:	401d      	ands	r5, r3
    365a:	2100      	movs	r1, #0
    365c:	0324      	lsls	r4, r4, #12
    365e:	0b23      	lsrs	r3, r4, #12
    3660:	0d0c      	lsrs	r4, r1, #20
    3662:	4a7e      	ldr	r2, [pc, #504]	; (385c <__aeabi_dsub+0x34c>)
    3664:	0524      	lsls	r4, r4, #20
    3666:	431c      	orrs	r4, r3
    3668:	4014      	ands	r4, r2
    366a:	0533      	lsls	r3, r6, #20
    366c:	4323      	orrs	r3, r4
    366e:	005b      	lsls	r3, r3, #1
    3670:	07ed      	lsls	r5, r5, #31
    3672:	085b      	lsrs	r3, r3, #1
    3674:	432b      	orrs	r3, r5
    3676:	0038      	movs	r0, r7
    3678:	0019      	movs	r1, r3
    367a:	bc1c      	pop	{r2, r3, r4}
    367c:	4690      	mov	r8, r2
    367e:	4699      	mov	r9, r3
    3680:	46a2      	mov	sl, r4
    3682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3684:	2501      	movs	r5, #1
    3686:	4643      	mov	r3, r8
    3688:	0762      	lsls	r2, r4, #29
    368a:	08ff      	lsrs	r7, r7, #3
    368c:	4317      	orrs	r7, r2
    368e:	08e4      	lsrs	r4, r4, #3
    3690:	401d      	ands	r5, r3
    3692:	4b70      	ldr	r3, [pc, #448]	; (3854 <__aeabi_dsub+0x344>)
    3694:	429e      	cmp	r6, r3
    3696:	d036      	beq.n	3706 <__aeabi_dsub+0x1f6>
    3698:	0324      	lsls	r4, r4, #12
    369a:	0576      	lsls	r6, r6, #21
    369c:	0b24      	lsrs	r4, r4, #12
    369e:	0d76      	lsrs	r6, r6, #21
    36a0:	e7db      	b.n	365a <__aeabi_dsub+0x14a>
    36a2:	4663      	mov	r3, ip
    36a4:	1af3      	subs	r3, r6, r3
    36a6:	2b00      	cmp	r3, #0
    36a8:	dc00      	bgt.n	36ac <__aeabi_dsub+0x19c>
    36aa:	e094      	b.n	37d6 <__aeabi_dsub+0x2c6>
    36ac:	4660      	mov	r0, ip
    36ae:	2800      	cmp	r0, #0
    36b0:	d035      	beq.n	371e <__aeabi_dsub+0x20e>
    36b2:	4868      	ldr	r0, [pc, #416]	; (3854 <__aeabi_dsub+0x344>)
    36b4:	4286      	cmp	r6, r0
    36b6:	d0b1      	beq.n	361c <__aeabi_dsub+0x10c>
    36b8:	2780      	movs	r7, #128	; 0x80
    36ba:	043f      	lsls	r7, r7, #16
    36bc:	4339      	orrs	r1, r7
    36be:	2b38      	cmp	r3, #56	; 0x38
    36c0:	dc00      	bgt.n	36c4 <__aeabi_dsub+0x1b4>
    36c2:	e0fd      	b.n	38c0 <__aeabi_dsub+0x3b0>
    36c4:	430a      	orrs	r2, r1
    36c6:	0017      	movs	r7, r2
    36c8:	2100      	movs	r1, #0
    36ca:	1e7a      	subs	r2, r7, #1
    36cc:	4197      	sbcs	r7, r2
    36ce:	4457      	add	r7, sl
    36d0:	4557      	cmp	r7, sl
    36d2:	4180      	sbcs	r0, r0
    36d4:	1909      	adds	r1, r1, r4
    36d6:	4244      	negs	r4, r0
    36d8:	190c      	adds	r4, r1, r4
    36da:	0223      	lsls	r3, r4, #8
    36dc:	d53a      	bpl.n	3754 <__aeabi_dsub+0x244>
    36de:	4b5d      	ldr	r3, [pc, #372]	; (3854 <__aeabi_dsub+0x344>)
    36e0:	3601      	adds	r6, #1
    36e2:	429e      	cmp	r6, r3
    36e4:	d100      	bne.n	36e8 <__aeabi_dsub+0x1d8>
    36e6:	e14b      	b.n	3980 <__aeabi_dsub+0x470>
    36e8:	2201      	movs	r2, #1
    36ea:	4b5b      	ldr	r3, [pc, #364]	; (3858 <__aeabi_dsub+0x348>)
    36ec:	401c      	ands	r4, r3
    36ee:	087b      	lsrs	r3, r7, #1
    36f0:	4017      	ands	r7, r2
    36f2:	431f      	orrs	r7, r3
    36f4:	07e2      	lsls	r2, r4, #31
    36f6:	4317      	orrs	r7, r2
    36f8:	0864      	lsrs	r4, r4, #1
    36fa:	e78f      	b.n	361c <__aeabi_dsub+0x10c>
    36fc:	0008      	movs	r0, r1
    36fe:	4310      	orrs	r0, r2
    3700:	d000      	beq.n	3704 <__aeabi_dsub+0x1f4>
    3702:	e724      	b.n	354e <__aeabi_dsub+0x3e>
    3704:	e721      	b.n	354a <__aeabi_dsub+0x3a>
    3706:	0023      	movs	r3, r4
    3708:	433b      	orrs	r3, r7
    370a:	d100      	bne.n	370e <__aeabi_dsub+0x1fe>
    370c:	e1b9      	b.n	3a82 <__aeabi_dsub+0x572>
    370e:	2280      	movs	r2, #128	; 0x80
    3710:	0312      	lsls	r2, r2, #12
    3712:	4314      	orrs	r4, r2
    3714:	0324      	lsls	r4, r4, #12
    3716:	0b24      	lsrs	r4, r4, #12
    3718:	e79f      	b.n	365a <__aeabi_dsub+0x14a>
    371a:	002e      	movs	r6, r5
    371c:	e77e      	b.n	361c <__aeabi_dsub+0x10c>
    371e:	0008      	movs	r0, r1
    3720:	4310      	orrs	r0, r2
    3722:	d100      	bne.n	3726 <__aeabi_dsub+0x216>
    3724:	e0ca      	b.n	38bc <__aeabi_dsub+0x3ac>
    3726:	1e58      	subs	r0, r3, #1
    3728:	4684      	mov	ip, r0
    372a:	2800      	cmp	r0, #0
    372c:	d000      	beq.n	3730 <__aeabi_dsub+0x220>
    372e:	e0e7      	b.n	3900 <__aeabi_dsub+0x3f0>
    3730:	4452      	add	r2, sl
    3732:	4552      	cmp	r2, sl
    3734:	4180      	sbcs	r0, r0
    3736:	1864      	adds	r4, r4, r1
    3738:	4240      	negs	r0, r0
    373a:	1824      	adds	r4, r4, r0
    373c:	0017      	movs	r7, r2
    373e:	2601      	movs	r6, #1
    3740:	0223      	lsls	r3, r4, #8
    3742:	d507      	bpl.n	3754 <__aeabi_dsub+0x244>
    3744:	2602      	movs	r6, #2
    3746:	e7cf      	b.n	36e8 <__aeabi_dsub+0x1d8>
    3748:	4664      	mov	r4, ip
    374a:	432c      	orrs	r4, r5
    374c:	d100      	bne.n	3750 <__aeabi_dsub+0x240>
    374e:	e1b3      	b.n	3ab8 <__aeabi_dsub+0x5a8>
    3750:	002c      	movs	r4, r5
    3752:	4667      	mov	r7, ip
    3754:	077b      	lsls	r3, r7, #29
    3756:	d000      	beq.n	375a <__aeabi_dsub+0x24a>
    3758:	e762      	b.n	3620 <__aeabi_dsub+0x110>
    375a:	0763      	lsls	r3, r4, #29
    375c:	08ff      	lsrs	r7, r7, #3
    375e:	431f      	orrs	r7, r3
    3760:	2501      	movs	r5, #1
    3762:	4643      	mov	r3, r8
    3764:	08e4      	lsrs	r4, r4, #3
    3766:	401d      	ands	r5, r3
    3768:	e793      	b.n	3692 <__aeabi_dsub+0x182>
    376a:	2d00      	cmp	r5, #0
    376c:	d178      	bne.n	3860 <__aeabi_dsub+0x350>
    376e:	1c75      	adds	r5, r6, #1
    3770:	056d      	lsls	r5, r5, #21
    3772:	0d6d      	lsrs	r5, r5, #21
    3774:	2d01      	cmp	r5, #1
    3776:	dc00      	bgt.n	377a <__aeabi_dsub+0x26a>
    3778:	e0f2      	b.n	3960 <__aeabi_dsub+0x450>
    377a:	4650      	mov	r0, sl
    377c:	1a80      	subs	r0, r0, r2
    377e:	4582      	cmp	sl, r0
    3780:	41bf      	sbcs	r7, r7
    3782:	1a65      	subs	r5, r4, r1
    3784:	427f      	negs	r7, r7
    3786:	1bed      	subs	r5, r5, r7
    3788:	4684      	mov	ip, r0
    378a:	0228      	lsls	r0, r5, #8
    378c:	d400      	bmi.n	3790 <__aeabi_dsub+0x280>
    378e:	e08c      	b.n	38aa <__aeabi_dsub+0x39a>
    3790:	4650      	mov	r0, sl
    3792:	1a17      	subs	r7, r2, r0
    3794:	42ba      	cmp	r2, r7
    3796:	4192      	sbcs	r2, r2
    3798:	1b0c      	subs	r4, r1, r4
    379a:	4255      	negs	r5, r2
    379c:	1b65      	subs	r5, r4, r5
    379e:	4698      	mov	r8, r3
    37a0:	e714      	b.n	35cc <__aeabi_dsub+0xbc>
    37a2:	2501      	movs	r5, #1
    37a4:	4643      	mov	r3, r8
    37a6:	2400      	movs	r4, #0
    37a8:	401d      	ands	r5, r3
    37aa:	2700      	movs	r7, #0
    37ac:	e755      	b.n	365a <__aeabi_dsub+0x14a>
    37ae:	4c2a      	ldr	r4, [pc, #168]	; (3858 <__aeabi_dsub+0x348>)
    37b0:	1af6      	subs	r6, r6, r3
    37b2:	402c      	ands	r4, r5
    37b4:	e732      	b.n	361c <__aeabi_dsub+0x10c>
    37b6:	003d      	movs	r5, r7
    37b8:	3828      	subs	r0, #40	; 0x28
    37ba:	4085      	lsls	r5, r0
    37bc:	2700      	movs	r7, #0
    37be:	e717      	b.n	35f0 <__aeabi_dsub+0xe0>
    37c0:	0038      	movs	r0, r7
    37c2:	f000 fa27 	bl	3c14 <__clzsi2>
    37c6:	3020      	adds	r0, #32
    37c8:	e706      	b.n	35d8 <__aeabi_dsub+0xc8>
    37ca:	430a      	orrs	r2, r1
    37cc:	0017      	movs	r7, r2
    37ce:	2100      	movs	r1, #0
    37d0:	1e7a      	subs	r2, r7, #1
    37d2:	4197      	sbcs	r7, r2
    37d4:	e6ee      	b.n	35b4 <__aeabi_dsub+0xa4>
    37d6:	2b00      	cmp	r3, #0
    37d8:	d000      	beq.n	37dc <__aeabi_dsub+0x2cc>
    37da:	e0e5      	b.n	39a8 <__aeabi_dsub+0x498>
    37dc:	1c73      	adds	r3, r6, #1
    37de:	469c      	mov	ip, r3
    37e0:	055b      	lsls	r3, r3, #21
    37e2:	0d5b      	lsrs	r3, r3, #21
    37e4:	2b01      	cmp	r3, #1
    37e6:	dc00      	bgt.n	37ea <__aeabi_dsub+0x2da>
    37e8:	e09f      	b.n	392a <__aeabi_dsub+0x41a>
    37ea:	4b1a      	ldr	r3, [pc, #104]	; (3854 <__aeabi_dsub+0x344>)
    37ec:	459c      	cmp	ip, r3
    37ee:	d100      	bne.n	37f2 <__aeabi_dsub+0x2e2>
    37f0:	e0c5      	b.n	397e <__aeabi_dsub+0x46e>
    37f2:	4452      	add	r2, sl
    37f4:	4552      	cmp	r2, sl
    37f6:	4180      	sbcs	r0, r0
    37f8:	1864      	adds	r4, r4, r1
    37fa:	4240      	negs	r0, r0
    37fc:	1824      	adds	r4, r4, r0
    37fe:	07e7      	lsls	r7, r4, #31
    3800:	0852      	lsrs	r2, r2, #1
    3802:	4317      	orrs	r7, r2
    3804:	0864      	lsrs	r4, r4, #1
    3806:	4666      	mov	r6, ip
    3808:	e708      	b.n	361c <__aeabi_dsub+0x10c>
    380a:	4812      	ldr	r0, [pc, #72]	; (3854 <__aeabi_dsub+0x344>)
    380c:	4285      	cmp	r5, r0
    380e:	d100      	bne.n	3812 <__aeabi_dsub+0x302>
    3810:	e085      	b.n	391e <__aeabi_dsub+0x40e>
    3812:	001d      	movs	r5, r3
    3814:	e6bc      	b.n	3590 <__aeabi_dsub+0x80>
    3816:	0029      	movs	r1, r5
    3818:	3e1f      	subs	r6, #31
    381a:	40f1      	lsrs	r1, r6
    381c:	2b20      	cmp	r3, #32
    381e:	d100      	bne.n	3822 <__aeabi_dsub+0x312>
    3820:	e07f      	b.n	3922 <__aeabi_dsub+0x412>
    3822:	2240      	movs	r2, #64	; 0x40
    3824:	1ad3      	subs	r3, r2, r3
    3826:	409d      	lsls	r5, r3
    3828:	432f      	orrs	r7, r5
    382a:	1e7d      	subs	r5, r7, #1
    382c:	41af      	sbcs	r7, r5
    382e:	2400      	movs	r4, #0
    3830:	430f      	orrs	r7, r1
    3832:	2600      	movs	r6, #0
    3834:	e78e      	b.n	3754 <__aeabi_dsub+0x244>
    3836:	002b      	movs	r3, r5
    3838:	000f      	movs	r7, r1
    383a:	3b20      	subs	r3, #32
    383c:	40df      	lsrs	r7, r3
    383e:	2d20      	cmp	r5, #32
    3840:	d071      	beq.n	3926 <__aeabi_dsub+0x416>
    3842:	2340      	movs	r3, #64	; 0x40
    3844:	1b5d      	subs	r5, r3, r5
    3846:	40a9      	lsls	r1, r5
    3848:	430a      	orrs	r2, r1
    384a:	1e51      	subs	r1, r2, #1
    384c:	418a      	sbcs	r2, r1
    384e:	2100      	movs	r1, #0
    3850:	4317      	orrs	r7, r2
    3852:	e6af      	b.n	35b4 <__aeabi_dsub+0xa4>
    3854:	000007ff 	.word	0x000007ff
    3858:	ff7fffff 	.word	0xff7fffff
    385c:	800fffff 	.word	0x800fffff
    3860:	2e00      	cmp	r6, #0
    3862:	d03e      	beq.n	38e2 <__aeabi_dsub+0x3d2>
    3864:	4eb3      	ldr	r6, [pc, #716]	; (3b34 <__aeabi_dsub+0x624>)
    3866:	45b4      	cmp	ip, r6
    3868:	d045      	beq.n	38f6 <__aeabi_dsub+0x3e6>
    386a:	2680      	movs	r6, #128	; 0x80
    386c:	0436      	lsls	r6, r6, #16
    386e:	426d      	negs	r5, r5
    3870:	4334      	orrs	r4, r6
    3872:	2d38      	cmp	r5, #56	; 0x38
    3874:	dd00      	ble.n	3878 <__aeabi_dsub+0x368>
    3876:	e0a8      	b.n	39ca <__aeabi_dsub+0x4ba>
    3878:	2d1f      	cmp	r5, #31
    387a:	dd00      	ble.n	387e <__aeabi_dsub+0x36e>
    387c:	e11f      	b.n	3abe <__aeabi_dsub+0x5ae>
    387e:	2620      	movs	r6, #32
    3880:	0027      	movs	r7, r4
    3882:	4650      	mov	r0, sl
    3884:	1b76      	subs	r6, r6, r5
    3886:	40b7      	lsls	r7, r6
    3888:	40e8      	lsrs	r0, r5
    388a:	4307      	orrs	r7, r0
    388c:	4650      	mov	r0, sl
    388e:	40b0      	lsls	r0, r6
    3890:	1e46      	subs	r6, r0, #1
    3892:	41b0      	sbcs	r0, r6
    3894:	40ec      	lsrs	r4, r5
    3896:	4338      	orrs	r0, r7
    3898:	1a17      	subs	r7, r2, r0
    389a:	42ba      	cmp	r2, r7
    389c:	4192      	sbcs	r2, r2
    389e:	1b0c      	subs	r4, r1, r4
    38a0:	4252      	negs	r2, r2
    38a2:	1aa4      	subs	r4, r4, r2
    38a4:	4666      	mov	r6, ip
    38a6:	4698      	mov	r8, r3
    38a8:	e68b      	b.n	35c2 <__aeabi_dsub+0xb2>
    38aa:	4664      	mov	r4, ip
    38ac:	4667      	mov	r7, ip
    38ae:	432c      	orrs	r4, r5
    38b0:	d000      	beq.n	38b4 <__aeabi_dsub+0x3a4>
    38b2:	e68b      	b.n	35cc <__aeabi_dsub+0xbc>
    38b4:	2500      	movs	r5, #0
    38b6:	2600      	movs	r6, #0
    38b8:	2700      	movs	r7, #0
    38ba:	e6ea      	b.n	3692 <__aeabi_dsub+0x182>
    38bc:	001e      	movs	r6, r3
    38be:	e6ad      	b.n	361c <__aeabi_dsub+0x10c>
    38c0:	2b1f      	cmp	r3, #31
    38c2:	dc60      	bgt.n	3986 <__aeabi_dsub+0x476>
    38c4:	2720      	movs	r7, #32
    38c6:	1af8      	subs	r0, r7, r3
    38c8:	000f      	movs	r7, r1
    38ca:	4684      	mov	ip, r0
    38cc:	4087      	lsls	r7, r0
    38ce:	0010      	movs	r0, r2
    38d0:	40d8      	lsrs	r0, r3
    38d2:	4307      	orrs	r7, r0
    38d4:	4660      	mov	r0, ip
    38d6:	4082      	lsls	r2, r0
    38d8:	1e50      	subs	r0, r2, #1
    38da:	4182      	sbcs	r2, r0
    38dc:	40d9      	lsrs	r1, r3
    38de:	4317      	orrs	r7, r2
    38e0:	e6f5      	b.n	36ce <__aeabi_dsub+0x1be>
    38e2:	0026      	movs	r6, r4
    38e4:	4650      	mov	r0, sl
    38e6:	4306      	orrs	r6, r0
    38e8:	d005      	beq.n	38f6 <__aeabi_dsub+0x3e6>
    38ea:	43ed      	mvns	r5, r5
    38ec:	2d00      	cmp	r5, #0
    38ee:	d0d3      	beq.n	3898 <__aeabi_dsub+0x388>
    38f0:	4e90      	ldr	r6, [pc, #576]	; (3b34 <__aeabi_dsub+0x624>)
    38f2:	45b4      	cmp	ip, r6
    38f4:	d1bd      	bne.n	3872 <__aeabi_dsub+0x362>
    38f6:	000c      	movs	r4, r1
    38f8:	0017      	movs	r7, r2
    38fa:	4666      	mov	r6, ip
    38fc:	4698      	mov	r8, r3
    38fe:	e68d      	b.n	361c <__aeabi_dsub+0x10c>
    3900:	488c      	ldr	r0, [pc, #560]	; (3b34 <__aeabi_dsub+0x624>)
    3902:	4283      	cmp	r3, r0
    3904:	d00b      	beq.n	391e <__aeabi_dsub+0x40e>
    3906:	4663      	mov	r3, ip
    3908:	e6d9      	b.n	36be <__aeabi_dsub+0x1ae>
    390a:	2d00      	cmp	r5, #0
    390c:	d000      	beq.n	3910 <__aeabi_dsub+0x400>
    390e:	e096      	b.n	3a3e <__aeabi_dsub+0x52e>
    3910:	0008      	movs	r0, r1
    3912:	4310      	orrs	r0, r2
    3914:	d100      	bne.n	3918 <__aeabi_dsub+0x408>
    3916:	e0e2      	b.n	3ade <__aeabi_dsub+0x5ce>
    3918:	000c      	movs	r4, r1
    391a:	0017      	movs	r7, r2
    391c:	4698      	mov	r8, r3
    391e:	4e85      	ldr	r6, [pc, #532]	; (3b34 <__aeabi_dsub+0x624>)
    3920:	e67c      	b.n	361c <__aeabi_dsub+0x10c>
    3922:	2500      	movs	r5, #0
    3924:	e780      	b.n	3828 <__aeabi_dsub+0x318>
    3926:	2100      	movs	r1, #0
    3928:	e78e      	b.n	3848 <__aeabi_dsub+0x338>
    392a:	0023      	movs	r3, r4
    392c:	4650      	mov	r0, sl
    392e:	4303      	orrs	r3, r0
    3930:	2e00      	cmp	r6, #0
    3932:	d000      	beq.n	3936 <__aeabi_dsub+0x426>
    3934:	e0a8      	b.n	3a88 <__aeabi_dsub+0x578>
    3936:	2b00      	cmp	r3, #0
    3938:	d100      	bne.n	393c <__aeabi_dsub+0x42c>
    393a:	e0de      	b.n	3afa <__aeabi_dsub+0x5ea>
    393c:	000b      	movs	r3, r1
    393e:	4313      	orrs	r3, r2
    3940:	d100      	bne.n	3944 <__aeabi_dsub+0x434>
    3942:	e66b      	b.n	361c <__aeabi_dsub+0x10c>
    3944:	4452      	add	r2, sl
    3946:	4552      	cmp	r2, sl
    3948:	4180      	sbcs	r0, r0
    394a:	1864      	adds	r4, r4, r1
    394c:	4240      	negs	r0, r0
    394e:	1824      	adds	r4, r4, r0
    3950:	0017      	movs	r7, r2
    3952:	0223      	lsls	r3, r4, #8
    3954:	d400      	bmi.n	3958 <__aeabi_dsub+0x448>
    3956:	e6fd      	b.n	3754 <__aeabi_dsub+0x244>
    3958:	4b77      	ldr	r3, [pc, #476]	; (3b38 <__aeabi_dsub+0x628>)
    395a:	4666      	mov	r6, ip
    395c:	401c      	ands	r4, r3
    395e:	e65d      	b.n	361c <__aeabi_dsub+0x10c>
    3960:	0025      	movs	r5, r4
    3962:	4650      	mov	r0, sl
    3964:	4305      	orrs	r5, r0
    3966:	2e00      	cmp	r6, #0
    3968:	d1cf      	bne.n	390a <__aeabi_dsub+0x3fa>
    396a:	2d00      	cmp	r5, #0
    396c:	d14f      	bne.n	3a0e <__aeabi_dsub+0x4fe>
    396e:	000c      	movs	r4, r1
    3970:	4314      	orrs	r4, r2
    3972:	d100      	bne.n	3976 <__aeabi_dsub+0x466>
    3974:	e0a0      	b.n	3ab8 <__aeabi_dsub+0x5a8>
    3976:	000c      	movs	r4, r1
    3978:	0017      	movs	r7, r2
    397a:	4698      	mov	r8, r3
    397c:	e64e      	b.n	361c <__aeabi_dsub+0x10c>
    397e:	4666      	mov	r6, ip
    3980:	2400      	movs	r4, #0
    3982:	2700      	movs	r7, #0
    3984:	e685      	b.n	3692 <__aeabi_dsub+0x182>
    3986:	001f      	movs	r7, r3
    3988:	0008      	movs	r0, r1
    398a:	3f20      	subs	r7, #32
    398c:	40f8      	lsrs	r0, r7
    398e:	0007      	movs	r7, r0
    3990:	2b20      	cmp	r3, #32
    3992:	d100      	bne.n	3996 <__aeabi_dsub+0x486>
    3994:	e08e      	b.n	3ab4 <__aeabi_dsub+0x5a4>
    3996:	2040      	movs	r0, #64	; 0x40
    3998:	1ac3      	subs	r3, r0, r3
    399a:	4099      	lsls	r1, r3
    399c:	430a      	orrs	r2, r1
    399e:	1e51      	subs	r1, r2, #1
    39a0:	418a      	sbcs	r2, r1
    39a2:	2100      	movs	r1, #0
    39a4:	4317      	orrs	r7, r2
    39a6:	e692      	b.n	36ce <__aeabi_dsub+0x1be>
    39a8:	2e00      	cmp	r6, #0
    39aa:	d114      	bne.n	39d6 <__aeabi_dsub+0x4c6>
    39ac:	0026      	movs	r6, r4
    39ae:	4650      	mov	r0, sl
    39b0:	4306      	orrs	r6, r0
    39b2:	d062      	beq.n	3a7a <__aeabi_dsub+0x56a>
    39b4:	43db      	mvns	r3, r3
    39b6:	2b00      	cmp	r3, #0
    39b8:	d15c      	bne.n	3a74 <__aeabi_dsub+0x564>
    39ba:	1887      	adds	r7, r0, r2
    39bc:	4297      	cmp	r7, r2
    39be:	4192      	sbcs	r2, r2
    39c0:	1864      	adds	r4, r4, r1
    39c2:	4252      	negs	r2, r2
    39c4:	18a4      	adds	r4, r4, r2
    39c6:	4666      	mov	r6, ip
    39c8:	e687      	b.n	36da <__aeabi_dsub+0x1ca>
    39ca:	4650      	mov	r0, sl
    39cc:	4320      	orrs	r0, r4
    39ce:	1e44      	subs	r4, r0, #1
    39d0:	41a0      	sbcs	r0, r4
    39d2:	2400      	movs	r4, #0
    39d4:	e760      	b.n	3898 <__aeabi_dsub+0x388>
    39d6:	4e57      	ldr	r6, [pc, #348]	; (3b34 <__aeabi_dsub+0x624>)
    39d8:	45b4      	cmp	ip, r6
    39da:	d04e      	beq.n	3a7a <__aeabi_dsub+0x56a>
    39dc:	2680      	movs	r6, #128	; 0x80
    39de:	0436      	lsls	r6, r6, #16
    39e0:	425b      	negs	r3, r3
    39e2:	4334      	orrs	r4, r6
    39e4:	2b38      	cmp	r3, #56	; 0x38
    39e6:	dd00      	ble.n	39ea <__aeabi_dsub+0x4da>
    39e8:	e07f      	b.n	3aea <__aeabi_dsub+0x5da>
    39ea:	2b1f      	cmp	r3, #31
    39ec:	dd00      	ble.n	39f0 <__aeabi_dsub+0x4e0>
    39ee:	e08b      	b.n	3b08 <__aeabi_dsub+0x5f8>
    39f0:	2620      	movs	r6, #32
    39f2:	0027      	movs	r7, r4
    39f4:	4650      	mov	r0, sl
    39f6:	1af6      	subs	r6, r6, r3
    39f8:	40b7      	lsls	r7, r6
    39fa:	40d8      	lsrs	r0, r3
    39fc:	4307      	orrs	r7, r0
    39fe:	4650      	mov	r0, sl
    3a00:	40b0      	lsls	r0, r6
    3a02:	1e46      	subs	r6, r0, #1
    3a04:	41b0      	sbcs	r0, r6
    3a06:	4307      	orrs	r7, r0
    3a08:	40dc      	lsrs	r4, r3
    3a0a:	18bf      	adds	r7, r7, r2
    3a0c:	e7d6      	b.n	39bc <__aeabi_dsub+0x4ac>
    3a0e:	000d      	movs	r5, r1
    3a10:	4315      	orrs	r5, r2
    3a12:	d100      	bne.n	3a16 <__aeabi_dsub+0x506>
    3a14:	e602      	b.n	361c <__aeabi_dsub+0x10c>
    3a16:	4650      	mov	r0, sl
    3a18:	1a80      	subs	r0, r0, r2
    3a1a:	4582      	cmp	sl, r0
    3a1c:	41bf      	sbcs	r7, r7
    3a1e:	1a65      	subs	r5, r4, r1
    3a20:	427f      	negs	r7, r7
    3a22:	1bed      	subs	r5, r5, r7
    3a24:	4684      	mov	ip, r0
    3a26:	0228      	lsls	r0, r5, #8
    3a28:	d400      	bmi.n	3a2c <__aeabi_dsub+0x51c>
    3a2a:	e68d      	b.n	3748 <__aeabi_dsub+0x238>
    3a2c:	4650      	mov	r0, sl
    3a2e:	1a17      	subs	r7, r2, r0
    3a30:	42ba      	cmp	r2, r7
    3a32:	4192      	sbcs	r2, r2
    3a34:	1b0c      	subs	r4, r1, r4
    3a36:	4252      	negs	r2, r2
    3a38:	1aa4      	subs	r4, r4, r2
    3a3a:	4698      	mov	r8, r3
    3a3c:	e5ee      	b.n	361c <__aeabi_dsub+0x10c>
    3a3e:	000d      	movs	r5, r1
    3a40:	4315      	orrs	r5, r2
    3a42:	d100      	bne.n	3a46 <__aeabi_dsub+0x536>
    3a44:	e76b      	b.n	391e <__aeabi_dsub+0x40e>
    3a46:	4650      	mov	r0, sl
    3a48:	0767      	lsls	r7, r4, #29
    3a4a:	08c0      	lsrs	r0, r0, #3
    3a4c:	4307      	orrs	r7, r0
    3a4e:	2080      	movs	r0, #128	; 0x80
    3a50:	08e4      	lsrs	r4, r4, #3
    3a52:	0300      	lsls	r0, r0, #12
    3a54:	4204      	tst	r4, r0
    3a56:	d007      	beq.n	3a68 <__aeabi_dsub+0x558>
    3a58:	08cd      	lsrs	r5, r1, #3
    3a5a:	4205      	tst	r5, r0
    3a5c:	d104      	bne.n	3a68 <__aeabi_dsub+0x558>
    3a5e:	002c      	movs	r4, r5
    3a60:	4698      	mov	r8, r3
    3a62:	08d7      	lsrs	r7, r2, #3
    3a64:	0749      	lsls	r1, r1, #29
    3a66:	430f      	orrs	r7, r1
    3a68:	0f7b      	lsrs	r3, r7, #29
    3a6a:	00e4      	lsls	r4, r4, #3
    3a6c:	431c      	orrs	r4, r3
    3a6e:	00ff      	lsls	r7, r7, #3
    3a70:	4e30      	ldr	r6, [pc, #192]	; (3b34 <__aeabi_dsub+0x624>)
    3a72:	e5d3      	b.n	361c <__aeabi_dsub+0x10c>
    3a74:	4e2f      	ldr	r6, [pc, #188]	; (3b34 <__aeabi_dsub+0x624>)
    3a76:	45b4      	cmp	ip, r6
    3a78:	d1b4      	bne.n	39e4 <__aeabi_dsub+0x4d4>
    3a7a:	000c      	movs	r4, r1
    3a7c:	0017      	movs	r7, r2
    3a7e:	4666      	mov	r6, ip
    3a80:	e5cc      	b.n	361c <__aeabi_dsub+0x10c>
    3a82:	2700      	movs	r7, #0
    3a84:	2400      	movs	r4, #0
    3a86:	e5e8      	b.n	365a <__aeabi_dsub+0x14a>
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d039      	beq.n	3b00 <__aeabi_dsub+0x5f0>
    3a8c:	000b      	movs	r3, r1
    3a8e:	4313      	orrs	r3, r2
    3a90:	d100      	bne.n	3a94 <__aeabi_dsub+0x584>
    3a92:	e744      	b.n	391e <__aeabi_dsub+0x40e>
    3a94:	08c0      	lsrs	r0, r0, #3
    3a96:	0767      	lsls	r7, r4, #29
    3a98:	4307      	orrs	r7, r0
    3a9a:	2080      	movs	r0, #128	; 0x80
    3a9c:	08e4      	lsrs	r4, r4, #3
    3a9e:	0300      	lsls	r0, r0, #12
    3aa0:	4204      	tst	r4, r0
    3aa2:	d0e1      	beq.n	3a68 <__aeabi_dsub+0x558>
    3aa4:	08cb      	lsrs	r3, r1, #3
    3aa6:	4203      	tst	r3, r0
    3aa8:	d1de      	bne.n	3a68 <__aeabi_dsub+0x558>
    3aaa:	08d7      	lsrs	r7, r2, #3
    3aac:	0749      	lsls	r1, r1, #29
    3aae:	430f      	orrs	r7, r1
    3ab0:	001c      	movs	r4, r3
    3ab2:	e7d9      	b.n	3a68 <__aeabi_dsub+0x558>
    3ab4:	2100      	movs	r1, #0
    3ab6:	e771      	b.n	399c <__aeabi_dsub+0x48c>
    3ab8:	2500      	movs	r5, #0
    3aba:	2700      	movs	r7, #0
    3abc:	e5e9      	b.n	3692 <__aeabi_dsub+0x182>
    3abe:	002e      	movs	r6, r5
    3ac0:	0027      	movs	r7, r4
    3ac2:	3e20      	subs	r6, #32
    3ac4:	40f7      	lsrs	r7, r6
    3ac6:	2d20      	cmp	r5, #32
    3ac8:	d02f      	beq.n	3b2a <__aeabi_dsub+0x61a>
    3aca:	2640      	movs	r6, #64	; 0x40
    3acc:	1b75      	subs	r5, r6, r5
    3ace:	40ac      	lsls	r4, r5
    3ad0:	4650      	mov	r0, sl
    3ad2:	4320      	orrs	r0, r4
    3ad4:	1e44      	subs	r4, r0, #1
    3ad6:	41a0      	sbcs	r0, r4
    3ad8:	2400      	movs	r4, #0
    3ada:	4338      	orrs	r0, r7
    3adc:	e6dc      	b.n	3898 <__aeabi_dsub+0x388>
    3ade:	2480      	movs	r4, #128	; 0x80
    3ae0:	2500      	movs	r5, #0
    3ae2:	0324      	lsls	r4, r4, #12
    3ae4:	4e13      	ldr	r6, [pc, #76]	; (3b34 <__aeabi_dsub+0x624>)
    3ae6:	2700      	movs	r7, #0
    3ae8:	e5d3      	b.n	3692 <__aeabi_dsub+0x182>
    3aea:	4650      	mov	r0, sl
    3aec:	4320      	orrs	r0, r4
    3aee:	0007      	movs	r7, r0
    3af0:	1e78      	subs	r0, r7, #1
    3af2:	4187      	sbcs	r7, r0
    3af4:	2400      	movs	r4, #0
    3af6:	18bf      	adds	r7, r7, r2
    3af8:	e760      	b.n	39bc <__aeabi_dsub+0x4ac>
    3afa:	000c      	movs	r4, r1
    3afc:	0017      	movs	r7, r2
    3afe:	e58d      	b.n	361c <__aeabi_dsub+0x10c>
    3b00:	000c      	movs	r4, r1
    3b02:	0017      	movs	r7, r2
    3b04:	4e0b      	ldr	r6, [pc, #44]	; (3b34 <__aeabi_dsub+0x624>)
    3b06:	e589      	b.n	361c <__aeabi_dsub+0x10c>
    3b08:	001e      	movs	r6, r3
    3b0a:	0027      	movs	r7, r4
    3b0c:	3e20      	subs	r6, #32
    3b0e:	40f7      	lsrs	r7, r6
    3b10:	2b20      	cmp	r3, #32
    3b12:	d00c      	beq.n	3b2e <__aeabi_dsub+0x61e>
    3b14:	2640      	movs	r6, #64	; 0x40
    3b16:	1af3      	subs	r3, r6, r3
    3b18:	409c      	lsls	r4, r3
    3b1a:	4650      	mov	r0, sl
    3b1c:	4320      	orrs	r0, r4
    3b1e:	1e44      	subs	r4, r0, #1
    3b20:	41a0      	sbcs	r0, r4
    3b22:	4307      	orrs	r7, r0
    3b24:	2400      	movs	r4, #0
    3b26:	18bf      	adds	r7, r7, r2
    3b28:	e748      	b.n	39bc <__aeabi_dsub+0x4ac>
    3b2a:	2400      	movs	r4, #0
    3b2c:	e7d0      	b.n	3ad0 <__aeabi_dsub+0x5c0>
    3b2e:	2400      	movs	r4, #0
    3b30:	e7f3      	b.n	3b1a <__aeabi_dsub+0x60a>
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	000007ff 	.word	0x000007ff
    3b38:	ff7fffff 	.word	0xff7fffff

00003b3c <__aeabi_d2iz>:
    3b3c:	b530      	push	{r4, r5, lr}
    3b3e:	4d13      	ldr	r5, [pc, #76]	; (3b8c <__aeabi_d2iz+0x50>)
    3b40:	030a      	lsls	r2, r1, #12
    3b42:	004b      	lsls	r3, r1, #1
    3b44:	0b12      	lsrs	r2, r2, #12
    3b46:	0d5b      	lsrs	r3, r3, #21
    3b48:	0fc9      	lsrs	r1, r1, #31
    3b4a:	2400      	movs	r4, #0
    3b4c:	42ab      	cmp	r3, r5
    3b4e:	dd10      	ble.n	3b72 <__aeabi_d2iz+0x36>
    3b50:	4c0f      	ldr	r4, [pc, #60]	; (3b90 <__aeabi_d2iz+0x54>)
    3b52:	42a3      	cmp	r3, r4
    3b54:	dc0f      	bgt.n	3b76 <__aeabi_d2iz+0x3a>
    3b56:	2480      	movs	r4, #128	; 0x80
    3b58:	4d0e      	ldr	r5, [pc, #56]	; (3b94 <__aeabi_d2iz+0x58>)
    3b5a:	0364      	lsls	r4, r4, #13
    3b5c:	4322      	orrs	r2, r4
    3b5e:	1aed      	subs	r5, r5, r3
    3b60:	2d1f      	cmp	r5, #31
    3b62:	dd0b      	ble.n	3b7c <__aeabi_d2iz+0x40>
    3b64:	480c      	ldr	r0, [pc, #48]	; (3b98 <__aeabi_d2iz+0x5c>)
    3b66:	1ac3      	subs	r3, r0, r3
    3b68:	40da      	lsrs	r2, r3
    3b6a:	4254      	negs	r4, r2
    3b6c:	2900      	cmp	r1, #0
    3b6e:	d100      	bne.n	3b72 <__aeabi_d2iz+0x36>
    3b70:	0014      	movs	r4, r2
    3b72:	0020      	movs	r0, r4
    3b74:	bd30      	pop	{r4, r5, pc}
    3b76:	4b09      	ldr	r3, [pc, #36]	; (3b9c <__aeabi_d2iz+0x60>)
    3b78:	18cc      	adds	r4, r1, r3
    3b7a:	e7fa      	b.n	3b72 <__aeabi_d2iz+0x36>
    3b7c:	4c08      	ldr	r4, [pc, #32]	; (3ba0 <__aeabi_d2iz+0x64>)
    3b7e:	40e8      	lsrs	r0, r5
    3b80:	46a4      	mov	ip, r4
    3b82:	4463      	add	r3, ip
    3b84:	409a      	lsls	r2, r3
    3b86:	4302      	orrs	r2, r0
    3b88:	e7ef      	b.n	3b6a <__aeabi_d2iz+0x2e>
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	000003fe 	.word	0x000003fe
    3b90:	0000041d 	.word	0x0000041d
    3b94:	00000433 	.word	0x00000433
    3b98:	00000413 	.word	0x00000413
    3b9c:	7fffffff 	.word	0x7fffffff
    3ba0:	fffffbed 	.word	0xfffffbed

00003ba4 <__aeabi_ui2d>:
    3ba4:	b510      	push	{r4, lr}
    3ba6:	1e04      	subs	r4, r0, #0
    3ba8:	d028      	beq.n	3bfc <__aeabi_ui2d+0x58>
    3baa:	f000 f833 	bl	3c14 <__clzsi2>
    3bae:	4b15      	ldr	r3, [pc, #84]	; (3c04 <__aeabi_ui2d+0x60>)
    3bb0:	4a15      	ldr	r2, [pc, #84]	; (3c08 <__aeabi_ui2d+0x64>)
    3bb2:	1a1b      	subs	r3, r3, r0
    3bb4:	1ad2      	subs	r2, r2, r3
    3bb6:	2a1f      	cmp	r2, #31
    3bb8:	dd15      	ble.n	3be6 <__aeabi_ui2d+0x42>
    3bba:	4a14      	ldr	r2, [pc, #80]	; (3c0c <__aeabi_ui2d+0x68>)
    3bbc:	1ad2      	subs	r2, r2, r3
    3bbe:	4094      	lsls	r4, r2
    3bc0:	2200      	movs	r2, #0
    3bc2:	0324      	lsls	r4, r4, #12
    3bc4:	055b      	lsls	r3, r3, #21
    3bc6:	0b24      	lsrs	r4, r4, #12
    3bc8:	0d5b      	lsrs	r3, r3, #21
    3bca:	2100      	movs	r1, #0
    3bcc:	0010      	movs	r0, r2
    3bce:	0324      	lsls	r4, r4, #12
    3bd0:	0d0a      	lsrs	r2, r1, #20
    3bd2:	0b24      	lsrs	r4, r4, #12
    3bd4:	0512      	lsls	r2, r2, #20
    3bd6:	4322      	orrs	r2, r4
    3bd8:	4c0d      	ldr	r4, [pc, #52]	; (3c10 <__aeabi_ui2d+0x6c>)
    3bda:	051b      	lsls	r3, r3, #20
    3bdc:	4022      	ands	r2, r4
    3bde:	4313      	orrs	r3, r2
    3be0:	005b      	lsls	r3, r3, #1
    3be2:	0859      	lsrs	r1, r3, #1
    3be4:	bd10      	pop	{r4, pc}
    3be6:	0021      	movs	r1, r4
    3be8:	4091      	lsls	r1, r2
    3bea:	000a      	movs	r2, r1
    3bec:	210b      	movs	r1, #11
    3bee:	1a08      	subs	r0, r1, r0
    3bf0:	40c4      	lsrs	r4, r0
    3bf2:	055b      	lsls	r3, r3, #21
    3bf4:	0324      	lsls	r4, r4, #12
    3bf6:	0b24      	lsrs	r4, r4, #12
    3bf8:	0d5b      	lsrs	r3, r3, #21
    3bfa:	e7e6      	b.n	3bca <__aeabi_ui2d+0x26>
    3bfc:	2300      	movs	r3, #0
    3bfe:	2400      	movs	r4, #0
    3c00:	2200      	movs	r2, #0
    3c02:	e7e2      	b.n	3bca <__aeabi_ui2d+0x26>
    3c04:	0000041e 	.word	0x0000041e
    3c08:	00000433 	.word	0x00000433
    3c0c:	00000413 	.word	0x00000413
    3c10:	800fffff 	.word	0x800fffff

00003c14 <__clzsi2>:
    3c14:	211c      	movs	r1, #28
    3c16:	2301      	movs	r3, #1
    3c18:	041b      	lsls	r3, r3, #16
    3c1a:	4298      	cmp	r0, r3
    3c1c:	d301      	bcc.n	3c22 <__clzsi2+0xe>
    3c1e:	0c00      	lsrs	r0, r0, #16
    3c20:	3910      	subs	r1, #16
    3c22:	0a1b      	lsrs	r3, r3, #8
    3c24:	4298      	cmp	r0, r3
    3c26:	d301      	bcc.n	3c2c <__clzsi2+0x18>
    3c28:	0a00      	lsrs	r0, r0, #8
    3c2a:	3908      	subs	r1, #8
    3c2c:	091b      	lsrs	r3, r3, #4
    3c2e:	4298      	cmp	r0, r3
    3c30:	d301      	bcc.n	3c36 <__clzsi2+0x22>
    3c32:	0900      	lsrs	r0, r0, #4
    3c34:	3904      	subs	r1, #4
    3c36:	a202      	add	r2, pc, #8	; (adr r2, 3c40 <__clzsi2+0x2c>)
    3c38:	5c10      	ldrb	r0, [r2, r0]
    3c3a:	1840      	adds	r0, r0, r1
    3c3c:	4770      	bx	lr
    3c3e:	46c0      	nop			; (mov r8, r8)
    3c40:	02020304 	.word	0x02020304
    3c44:	01010101 	.word	0x01010101
	...

00003c50 <__libc_init_array>:
    3c50:	b570      	push	{r4, r5, r6, lr}
    3c52:	2600      	movs	r6, #0
    3c54:	4d0c      	ldr	r5, [pc, #48]	; (3c88 <__libc_init_array+0x38>)
    3c56:	4c0d      	ldr	r4, [pc, #52]	; (3c8c <__libc_init_array+0x3c>)
    3c58:	1b64      	subs	r4, r4, r5
    3c5a:	10a4      	asrs	r4, r4, #2
    3c5c:	42a6      	cmp	r6, r4
    3c5e:	d109      	bne.n	3c74 <__libc_init_array+0x24>
    3c60:	2600      	movs	r6, #0
    3c62:	f000 f881 	bl	3d68 <_init>
    3c66:	4d0a      	ldr	r5, [pc, #40]	; (3c90 <__libc_init_array+0x40>)
    3c68:	4c0a      	ldr	r4, [pc, #40]	; (3c94 <__libc_init_array+0x44>)
    3c6a:	1b64      	subs	r4, r4, r5
    3c6c:	10a4      	asrs	r4, r4, #2
    3c6e:	42a6      	cmp	r6, r4
    3c70:	d105      	bne.n	3c7e <__libc_init_array+0x2e>
    3c72:	bd70      	pop	{r4, r5, r6, pc}
    3c74:	00b3      	lsls	r3, r6, #2
    3c76:	58eb      	ldr	r3, [r5, r3]
    3c78:	4798      	blx	r3
    3c7a:	3601      	adds	r6, #1
    3c7c:	e7ee      	b.n	3c5c <__libc_init_array+0xc>
    3c7e:	00b3      	lsls	r3, r6, #2
    3c80:	58eb      	ldr	r3, [r5, r3]
    3c82:	4798      	blx	r3
    3c84:	3601      	adds	r6, #1
    3c86:	e7f2      	b.n	3c6e <__libc_init_array+0x1e>
    3c88:	00003d74 	.word	0x00003d74
    3c8c:	00003d74 	.word	0x00003d74
    3c90:	00003d74 	.word	0x00003d74
    3c94:	00003d78 	.word	0x00003d78

00003c98 <memset>:
    3c98:	0003      	movs	r3, r0
    3c9a:	1882      	adds	r2, r0, r2
    3c9c:	4293      	cmp	r3, r2
    3c9e:	d100      	bne.n	3ca2 <memset+0xa>
    3ca0:	4770      	bx	lr
    3ca2:	7019      	strb	r1, [r3, #0]
    3ca4:	3301      	adds	r3, #1
    3ca6:	e7f9      	b.n	3c9c <memset+0x4>

00003ca8 <tc_interrupt_vectors.12207>:
    3ca8:	0e0d 0000 0800 4200 0c00 4200 1000 4200     .......B...B...B

00003cb8 <_tcc_intflag>:
    3cb8:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    3cc8:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    3cd8:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    3ce8:	2ba0 0000 2b82 0000 2b3c 0000 2a5a 0000     .+...+..<+..Z*..
    3cf8:	2b3c 0000 2b74 0000 2b3c 0000 2a5a 0000     <+..t+..<+..Z*..
    3d08:	2b82 0000 2b82 0000 2b74 0000 2a5a 0000     .+...+..t+..Z*..
    3d18:	2a52 0000 2a52 0000 2a52 0000 2db8 0000     R*..R*..R*...-..
    3d28:	3200 0000 30c0 0000 30c0 0000 30bc 0000     .2...0...0...0..
    3d38:	31d8 0000 31d8 0000 31ca 0000 30bc 0000     .1...1...1...0..
    3d48:	31d8 0000 31ca 0000 31d8 0000 30bc 0000     .1...1...1...0..
    3d58:	31e0 0000 31e0 0000 31e0 0000 33e4 0000     .1...1...1...3..

00003d68 <_init>:
    3d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d6e:	bc08      	pop	{r3}
    3d70:	469e      	mov	lr, r3
    3d72:	4770      	bx	lr

00003d74 <__init_array_start>:
    3d74:	000000b5 	.word	0x000000b5

00003d78 <_fini>:
    3d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d7a:	46c0      	nop			; (mov r8, r8)
    3d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d7e:	bc08      	pop	{r3}
    3d80:	469e      	mov	lr, r3
    3d82:	4770      	bx	lr

00003d84 <__fini_array_start>:
    3d84:	0000008d 	.word	0x0000008d
