
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c84  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00003c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001c8  20000020  00003ca4  00020020  2**2
                  ALLOC
  3 .stack        00000400  200001e8  00003e6c  00020020  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00033d90  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000438f  00000000  00000000  00053e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005f3a  00000000  00000000  000581c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000700  00000000  00000000  0005e0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  0005e7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017de7  00000000  00000000  0005f33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e164  00000000  00000000  00077123  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007b379  00000000  00000000  00085287  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012f0  00000000  00000000  00100600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 05 00 20 f9 18 00 00 f7 18 00 00 f7 18 00 00     ... ............
	...
      2c:	f7 18 00 00 00 00 00 00 00 00 00 00 f7 18 00 00     ................
      3c:	f7 18 00 00 f7 18 00 00 f7 18 00 00 f7 18 00 00     ................
      4c:	f7 18 00 00 f7 18 00 00 f7 18 00 00 f7 18 00 00     ................
      5c:	f7 18 00 00 f7 18 00 00 c9 0a 00 00 d9 0a 00 00     ................
      6c:	e9 0a 00 00 c1 15 00 00 4d 16 00 00 57 16 00 00     ........M...W...
      7c:	f7 18 00 00 f7 18 00 00 f7 18 00 00 f7 18 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	00003c84 	.word	0x00003c84

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	00003c84 	.word	0x00003c84
      e4:	00003c84 	.word	0x00003c84
      e8:	00000000 	.word	0x00000000

000000ec <set_pwm_color_channel>:
 *  Author: jatan
 */ 

#include "pwm_led.h"

void set_pwm_color_channel(uint8_t channel, bool enable) {
      ec:	b510      	push	{r4, lr}
      ee:	1e0a      	subs	r2, r1, #0
      f0:	4c0a      	ldr	r4, [pc, #40]	; (11c <set_pwm_color_channel+0x30>)
	//
	//tcc_set_compare_value(&tcc_instance,
	//WHITE_CHANNEL,
	//ZERO_DUTY_CYCLE);
	
	if (enable){
      f2:	d000      	beq.n	f6 <set_pwm_color_channel+0xa>
		tcc_set_compare_value(&tcc_instance,
      f4:	4a0a      	ldr	r2, [pc, #40]	; (120 <set_pwm_color_channel+0x34>)
		channel,
		0x3FF);
	}else{
		tcc_set_compare_value(&tcc_instance,
      f6:	0001      	movs	r1, r0
      f8:	0020      	movs	r0, r4
      fa:	f001 fa3b 	bl	1574 <tcc_set_compare_value>
	Tcc *const tcc_module = module_inst->hw;
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
      fe:	2104      	movs	r1, #4
     100:	201f      	movs	r0, #31
     102:	6822      	ldr	r2, [r4, #0]
     104:	6893      	ldr	r3, [r2, #8]
     106:	420b      	tst	r3, r1
     108:	d1fc      	bne.n	104 <set_pwm_color_channel+0x18>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     10a:	7953      	ldrb	r3, [r2, #5]
     10c:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     10e:	d002      	beq.n	116 <set_pwm_color_channel+0x2a>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     110:	2b60      	cmp	r3, #96	; 0x60
     112:	d1f7      	bne.n	104 <set_pwm_color_channel+0x18>
	tcc_force_double_buffer_update(&tcc_instance);
	
	//config_tcc.pins.enable_wave_out_pin[channel] = enable;
	//tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
	//tcc_enable(&tcc_instance);
}
     114:	bd10      	pop	{r4, pc}
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     116:	2360      	movs	r3, #96	; 0x60
     118:	7153      	strb	r3, [r2, #5]
     11a:	e7fb      	b.n	114 <set_pwm_color_channel+0x28>
     11c:	2000008c 	.word	0x2000008c
     120:	000003ff 	.word	0x000003ff

00000124 <turn_off_all>:



void turn_off_all(void) {
	set_pwm_color_channel(RED_CHANNEL, false);
     124:	2100      	movs	r1, #0
void turn_off_all(void) {
     126:	b510      	push	{r4, lr}
	set_pwm_color_channel(RED_CHANNEL, false);
     128:	0008      	movs	r0, r1
     12a:	f7ff ffdf 	bl	ec <set_pwm_color_channel>
	set_pwm_color_channel(BLUE_CHANNEL, false);
     12e:	2100      	movs	r1, #0
     130:	2002      	movs	r0, #2
     132:	f7ff ffdb 	bl	ec <set_pwm_color_channel>
	set_pwm_color_channel(GREEN_CHANNEL, false);
     136:	2100      	movs	r1, #0
     138:	2001      	movs	r0, #1
     13a:	f7ff ffd7 	bl	ec <set_pwm_color_channel>
	set_pwm_color_channel(WHITE_CHANNEL, false);
     13e:	2100      	movs	r1, #0
     140:	2003      	movs	r0, #3
     142:	f7ff ffd3 	bl	ec <set_pwm_color_channel>
}
     146:	bd10      	pop	{r4, pc}

00000148 <set_pwm_color>:


void set_pwm_color(int color) {
	//turn_off_all();  // Turn off all channels
	
	set_pwm_color_channel(RED_CHANNEL, false);
     148:	2100      	movs	r1, #0
void set_pwm_color(int color) {
     14a:	b510      	push	{r4, lr}
     14c:	0004      	movs	r4, r0
	set_pwm_color_channel(RED_CHANNEL, false);
     14e:	0008      	movs	r0, r1
     150:	f7ff ffcc 	bl	ec <set_pwm_color_channel>
	set_pwm_color_channel(BLUE_CHANNEL, false);
     154:	2100      	movs	r1, #0
     156:	2002      	movs	r0, #2
     158:	f7ff ffc8 	bl	ec <set_pwm_color_channel>
	set_pwm_color_channel(GREEN_CHANNEL, false);
     15c:	2100      	movs	r1, #0
     15e:	2001      	movs	r0, #1
     160:	f7ff ffc4 	bl	ec <set_pwm_color_channel>
	set_pwm_color_channel(WHITE_CHANNEL, false);
     164:	2100      	movs	r1, #0
     166:	2003      	movs	r0, #3
     168:	f7ff ffc0 	bl	ec <set_pwm_color_channel>
		
	
	switch (color) {
     16c:	2c06      	cmp	r4, #6
     16e:	d80a      	bhi.n	186 <set_pwm_color+0x3e>
     170:	0020      	movs	r0, r4
		case 5:  // Purple (Red + Blue)
		set_pwm_color_channel(RED_CHANNEL, true);
		set_pwm_color_channel(BLUE_CHANNEL, true);
		break;
		case 6:  // Cyan (Blue + Green)
		set_pwm_color_channel(BLUE_CHANNEL, true);
     172:	2101      	movs	r1, #1
	switch (color) {
     174:	f001 fff0 	bl	2158 <__gnu_thumb1_case_uqi>
     178:	08140e04 	.word	0x08140e04
     17c:	100a      	.short	0x100a
     17e:	16          	.byte	0x16
     17f:	00          	.byte	0x00
		set_pwm_color_channel(RED_CHANNEL, true);
     180:	2000      	movs	r0, #0
		set_pwm_color_channel(GREEN_CHANNEL, true);
     182:	f7ff ffb3 	bl	ec <set_pwm_color_channel>
		break;
		default:
		break;
	}
}
     186:	bd10      	pop	{r4, pc}
		set_pwm_color_channel(WHITE_CHANNEL, true);
     188:	2003      	movs	r0, #3
     18a:	e7fa      	b.n	182 <set_pwm_color+0x3a>
		set_pwm_color_channel(RED_CHANNEL, true);
     18c:	2000      	movs	r0, #0
		set_pwm_color_channel(BLUE_CHANNEL, true);
     18e:	f7ff ffad 	bl	ec <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
     192:	2101      	movs	r1, #1
     194:	0008      	movs	r0, r1
     196:	e7f4      	b.n	182 <set_pwm_color+0x3a>
		set_pwm_color_channel(RED_CHANNEL, true);
     198:	2000      	movs	r0, #0
     19a:	f7ff ffa7 	bl	ec <set_pwm_color_channel>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     19e:	2101      	movs	r1, #1
     1a0:	2002      	movs	r0, #2
     1a2:	e7ee      	b.n	182 <set_pwm_color+0x3a>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     1a4:	2002      	movs	r0, #2
     1a6:	e7f2      	b.n	18e <set_pwm_color+0x46>

000001a8 <configure_pwm_tcc>:


void configure_pwm_tcc(void)
{
     1a8:	b570      	push	{r4, r5, r6, lr}
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     1aa:	4c1c      	ldr	r4, [pc, #112]	; (21c <configure_pwm_tcc+0x74>)
     1ac:	491c      	ldr	r1, [pc, #112]	; (220 <configure_pwm_tcc+0x78>)
     1ae:	0020      	movs	r0, r4
     1b0:	f001 f812 	bl	11d8 <tcc_get_config_defaults>
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
	
	config_tcc.compare.match[RED_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     1b4:	2300      	movs	r3, #0

	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
	
	
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
     1b6:	2105      	movs	r1, #5
	config_tcc.compare.match[RED_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     1b8:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.match[BLUE_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     1ba:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.compare.match[GREEN_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     1bc:	6223      	str	r3, [r4, #32]
	config_tcc.compare.match[WHITE_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     1be:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     1c0:	4b18      	ldr	r3, [pc, #96]	; (224 <configure_pwm_tcc+0x7c>)
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
     1c2:	67a1      	str	r1, [r4, #120]	; 0x78
	config_tcc.compare.match[RED_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
	
	config_tcc.pins.wave_out_pin[GREEN_CHANNEL]							= PIN_PA05F_TCC0_WO1;		// GREEN
     1c4:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL]						= MUX_PA05F_TCC0_WO1;
     1c6:	67e1      	str	r1, [r4, #124]	; 0x7c
	config_tcc.compare.match[GREEN_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     1c8:	0021      	movs	r1, r4
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     1ca:	6063      	str	r3, [r4, #4]
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     1cc:	2301      	movs	r3, #1
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     1ce:	3199      	adds	r1, #153	; 0x99
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     1d0:	2204      	movs	r2, #4
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     1d2:	700b      	strb	r3, [r1, #0]

	config_tcc.pins.wave_out_pin[BLUE_CHANNEL]							= PIN_PA08E_TCC0_WO2;		// BLUE
     1d4:	2108      	movs	r1, #8
     1d6:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL]						= MUX_PA08E_TCC0_WO2;
     1d8:	18a1      	adds	r1, r4, r2
     1da:	67ca      	str	r2, [r1, #124]	; 0x7c
	config_tcc.compare.match[BLUE_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[BLUE_CHANNEL] = true;
     1dc:	0021      	movs	r1, r4
     1de:	319a      	adds	r1, #154	; 0x9a
     1e0:	700b      	strb	r3, [r1, #0]

	config_tcc.pins.wave_out_pin[WHITE_CHANNEL]							= PIN_PA09E_TCC0_WO3;		// WHITE
     1e2:	2109      	movs	r1, #9
     1e4:	6661      	str	r1, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]						= MUX_PA09E_TCC0_WO3;
     1e6:	0021      	movs	r1, r4
     1e8:	3108      	adds	r1, #8
     1ea:	67ca      	str	r2, [r1, #124]	; 0x7c
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     1ec:	65a2      	str	r2, [r4, #88]	; 0x58
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     1ee:	0020      	movs	r0, r4
	config_tcc.compare.match[WHITE_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     1f0:	0022      	movs	r2, r4
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     1f2:	2502      	movs	r5, #2
	
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     1f4:	4e0c      	ldr	r6, [pc, #48]	; (228 <configure_pwm_tcc+0x80>)
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     1f6:	3098      	adds	r0, #152	; 0x98
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     1f8:	329b      	adds	r2, #155	; 0x9b
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     1fa:	7003      	strb	r3, [r0, #0]
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     1fc:	7013      	strb	r3, [r2, #0]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     1fe:	4908      	ldr	r1, [pc, #32]	; (220 <configure_pwm_tcc+0x78>)
     200:	0022      	movs	r2, r4
     202:	0030      	movs	r0, r6
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     204:	7625      	strb	r5, [r4, #24]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     206:	f001 f859 	bl	12bc <tcc_init>
     20a:	6833      	ldr	r3, [r6, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     20c:	689a      	ldr	r2, [r3, #8]
     20e:	422a      	tst	r2, r5
     210:	d1fc      	bne.n	20c <configure_pwm_tcc+0x64>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     212:	681a      	ldr	r2, [r3, #0]
     214:	4315      	orrs	r5, r2
     216:	601d      	str	r5, [r3, #0]
	tcc_enable(&tcc_instance);
	
}
     218:	bd70      	pop	{r4, r5, r6, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	200000cc 	.word	0x200000cc
     220:	42001400 	.word	0x42001400
     224:	00000fff 	.word	0x00000fff
     228:	2000008c 	.word	0x2000008c

0000022c <set_pwm_red>:
5	p	(r + b)
6	c	(b + g)
*/
	

void set_pwm_red(void){
     22c:	b510      	push	{r4, lr}
	set_pwm_color(0);
     22e:	2000      	movs	r0, #0
     230:	f7ff ff8a 	bl	148 <set_pwm_color>
}
     234:	bd10      	pop	{r4, pc}

00000236 <set_pwm_green>:

void set_pwm_green(void){
     236:	b510      	push	{r4, lr}
	set_pwm_color(1);
     238:	2001      	movs	r0, #1
     23a:	f7ff ff85 	bl	148 <set_pwm_color>
	
}
     23e:	bd10      	pop	{r4, pc}

00000240 <set_pwm_blue>:

void set_pwm_blue(void){
     240:	b510      	push	{r4, lr}
	set_pwm_color(2);
     242:	2002      	movs	r0, #2
     244:	f7ff ff80 	bl	148 <set_pwm_color>
}
     248:	bd10      	pop	{r4, pc}

0000024a <set_pwm_white>:

void set_pwm_white(void){
     24a:	b510      	push	{r4, lr}
	set_pwm_color(3);
     24c:	2003      	movs	r0, #3
     24e:	f7ff ff7b 	bl	148 <set_pwm_color>
}
     252:	bd10      	pop	{r4, pc}

00000254 <set_pwm_yellow>:


void set_pwm_yellow(void){
     254:	b510      	push	{r4, lr}
	set_pwm_color(4);
     256:	2004      	movs	r0, #4
     258:	f7ff ff76 	bl	148 <set_pwm_color>
	
}
     25c:	bd10      	pop	{r4, pc}

0000025e <set_pwm_purple>:

void set_pwm_purple(void){
     25e:	b510      	push	{r4, lr}
	set_pwm_color(5);
     260:	2005      	movs	r0, #5
     262:	f7ff ff71 	bl	148 <set_pwm_color>
	
}
     266:	bd10      	pop	{r4, pc}

00000268 <set_pwm_cyan>:

void set_pwm_cyan(void){
     268:	b510      	push	{r4, lr}
	set_pwm_color(6);
     26a:	2006      	movs	r0, #6
     26c:	f7ff ff6c 	bl	148 <set_pwm_color>
	
}
     270:	bd10      	pop	{r4, pc}
	...

00000274 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     274:	4b09      	ldr	r3, [pc, #36]	; (29c <cpu_irq_enter_critical+0x28>)
     276:	6819      	ldr	r1, [r3, #0]
     278:	2900      	cmp	r1, #0
     27a:	d10b      	bne.n	294 <cpu_irq_enter_critical+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     27c:	f3ef 8010 	mrs	r0, PRIMASK
     280:	4a07      	ldr	r2, [pc, #28]	; (2a0 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     282:	2800      	cmp	r0, #0
     284:	d105      	bne.n	292 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     286:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     288:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     28c:	4905      	ldr	r1, [pc, #20]	; (2a4 <cpu_irq_enter_critical+0x30>)
     28e:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     290:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     292:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     294:	681a      	ldr	r2, [r3, #0]
     296:	3201      	adds	r2, #1
     298:	601a      	str	r2, [r3, #0]
}
     29a:	4770      	bx	lr
     29c:	2000003c 	.word	0x2000003c
     2a0:	20000040 	.word	0x20000040
     2a4:	20000000 	.word	0x20000000

000002a8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     2a8:	4b08      	ldr	r3, [pc, #32]	; (2cc <cpu_irq_leave_critical+0x24>)
     2aa:	681a      	ldr	r2, [r3, #0]
     2ac:	3a01      	subs	r2, #1
     2ae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     2b0:	681b      	ldr	r3, [r3, #0]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d109      	bne.n	2ca <cpu_irq_leave_critical+0x22>
     2b6:	4b06      	ldr	r3, [pc, #24]	; (2d0 <cpu_irq_leave_critical+0x28>)
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b00      	cmp	r3, #0
     2bc:	d005      	beq.n	2ca <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     2be:	2201      	movs	r2, #1
     2c0:	4b04      	ldr	r3, [pc, #16]	; (2d4 <cpu_irq_leave_critical+0x2c>)
     2c2:	701a      	strb	r2, [r3, #0]
     2c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     2c8:	b662      	cpsie	i
	}
}
     2ca:	4770      	bx	lr
     2cc:	2000003c 	.word	0x2000003c
     2d0:	20000040 	.word	0x20000040
     2d4:	20000000 	.word	0x20000000

000002d8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2da:	2501      	movs	r5, #1
	config->powersave  = false;
     2dc:	2600      	movs	r6, #0
	config->input_pull = PORT_PIN_PULL_UP;
     2de:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2e0:	0021      	movs	r1, r4
     2e2:	2010      	movs	r0, #16
     2e4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     2e6:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2e8:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2ea:	f000 f80d 	bl	308 <port_pin_set_config>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2ee:	2280      	movs	r2, #128	; 0x80
     2f0:	4b04      	ldr	r3, [pc, #16]	; (304 <system_board_init+0x2c>)
     2f2:	0252      	lsls	r2, r2, #9
     2f4:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2f6:	0021      	movs	r1, r4
     2f8:	200e      	movs	r0, #14
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2fa:	7026      	strb	r6, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2fc:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2fe:	f000 f803 	bl	308 <port_pin_set_config>
}
     302:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
     304:	41004400 	.word	0x41004400

00000308 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     308:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     30a:	2280      	movs	r2, #128	; 0x80
     30c:	ab01      	add	r3, sp, #4
     30e:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     310:	780a      	ldrb	r2, [r1, #0]
     312:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     314:	784a      	ldrb	r2, [r1, #1]
     316:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     318:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     31a:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     31c:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     31e:	f000 ff0f 	bl	1140 <system_pinmux_pin_set_config>
}
     322:	bd07      	pop	{r0, r1, r2, pc}

00000324 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     324:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     326:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     328:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     32a:	421a      	tst	r2, r3
     32c:	d1fc      	bne.n	328 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     32e:	4770      	bx	lr

00000330 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	0007      	movs	r7, r0
     334:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     336:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     338:	0008      	movs	r0, r1
{
     33a:	0014      	movs	r4, r2
     33c:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     33e:	f000 fb7d 	bl	a3c <_sercom_get_sercom_inst_index>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     342:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     344:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     346:	409d      	lsls	r5, r3
     348:	002b      	movs	r3, r5
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     34a:	4a9a      	ldr	r2, [pc, #616]	; (5b4 <STACK_SIZE+0x1b4>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     34c:	300e      	adds	r0, #14
     34e:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     350:	b2c5      	uxtb	r5, r0
     352:	430b      	orrs	r3, r1
     354:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     356:	7b23      	ldrb	r3, [r4, #12]
     358:	aa08      	add	r2, sp, #32
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     35a:	0011      	movs	r1, r2
     35c:	0028      	movs	r0, r5
	gclk_chan_conf.source_generator = config->generator_source;
     35e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     360:	f000 fe8c 	bl	107c <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
     364:	0028      	movs	r0, r5
     366:	f000 fe4d 	bl	1004 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
     36a:	7b20      	ldrb	r0, [r4, #12]
     36c:	2100      	movs	r1, #0
     36e:	f000 faed 	bl	94c <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     372:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     374:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     376:	079b      	lsls	r3, r3, #30
     378:	d500      	bpl.n	37c <i2c_master_init+0x4c>
     37a:	e10d      	b.n	598 <STACK_SIZE+0x198>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     37c:	2301      	movs	r3, #1
     37e:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     380:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     382:	401d      	ands	r5, r3
     384:	d000      	beq.n	388 <i2c_master_init+0x58>
     386:	e107      	b.n	598 <STACK_SIZE+0x198>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     388:	6838      	ldr	r0, [r7, #0]
     38a:	f000 fb57 	bl	a3c <_sercom_get_sercom_inst_index>
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     38e:	498a      	ldr	r1, [pc, #552]	; (5b8 <STACK_SIZE+0x1b8>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     390:	9001      	str	r0, [sp, #4]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     392:	f000 fb71 	bl	a78 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
     396:	9b01      	ldr	r3, [sp, #4]

	/* Initialize values in module. */
	module->registered_callback = 0;
     398:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     39a:	009a      	lsls	r2, r3, #2
     39c:	4b87      	ldr	r3, [pc, #540]	; (5bc <STACK_SIZE+0x1bc>)
	module->enabled_callback = 0;
     39e:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     3a0:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     3a2:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     3a4:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     3a6:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     3a8:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     3aa:	2314      	movs	r3, #20
	module->buffer = NULL;
     3ac:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     3ae:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3b0:	683b      	ldr	r3, [r7, #0]
     3b2:	ae09      	add	r6, sp, #36	; 0x24
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     3b4:	0018      	movs	r0, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3b6:	9301      	str	r3, [sp, #4]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     3b8:	f000 fb40 	bl	a3c <_sercom_get_sercom_inst_index>
     3bc:	2380      	movs	r3, #128	; 0x80
     3be:	9004      	str	r0, [sp, #16]
	uint32_t pad0 = config->pinmux_pad0;
     3c0:	69e0      	ldr	r0, [r4, #28]
     3c2:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3c4:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3c6:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     3c8:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3ca:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     3cc:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     3ce:	2800      	cmp	r0, #0
     3d0:	d103      	bne.n	3da <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3d2:	0001      	movs	r1, r0
     3d4:	9801      	ldr	r0, [sp, #4]
     3d6:	f000 fad7 	bl	988 <_sercom_get_default_pad>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3da:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     3dc:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     3de:	0c00      	lsrs	r0, r0, #16
     3e0:	b2c0      	uxtb	r0, r0
     3e2:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3e4:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     3e6:	f000 feab 	bl	1140 <system_pinmux_pin_set_config>
	if (pad1 == PINMUX_DEFAULT) {
     3ea:	2d00      	cmp	r5, #0
     3ec:	d104      	bne.n	3f8 <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3ee:	2101      	movs	r1, #1
     3f0:	9801      	ldr	r0, [sp, #4]
     3f2:	f000 fac9 	bl	988 <_sercom_get_default_pad>
     3f6:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3f8:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     3fa:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     3fc:	0c2d      	lsrs	r5, r5, #16
     3fe:	b2e8      	uxtb	r0, r5
     400:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     402:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     404:	f000 fe9c 	bl	1140 <system_pinmux_pin_set_config>
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     408:	8aa3      	ldrh	r3, [r4, #20]
     40a:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     40c:	8ae3      	ldrh	r3, [r4, #22]
     40e:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     410:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     412:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     414:	2a00      	cmp	r2, #0
     416:	d106      	bne.n	426 <STACK_SIZE+0x26>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     418:	4b69      	ldr	r3, [pc, #420]	; (5c0 <STACK_SIZE+0x1c0>)
     41a:	3202      	adds	r2, #2
     41c:	789b      	ldrb	r3, [r3, #2]
     41e:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     420:	1e5f      	subs	r7, r3, #1
     422:	41bb      	sbcs	r3, r7
     424:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     426:	68a2      	ldr	r2, [r4, #8]
     428:	6927      	ldr	r7, [r4, #16]
     42a:	4317      	orrs	r7, r2
     42c:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     42e:	1d63      	adds	r3, r4, #5
     430:	7fdb      	ldrb	r3, [r3, #31]
     432:	2b00      	cmp	r3, #0
     434:	d002      	beq.n	43c <STACK_SIZE+0x3c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     436:	2380      	movs	r3, #128	; 0x80
     438:	05db      	lsls	r3, r3, #23
     43a:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     43c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     43e:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     440:	0023      	movs	r3, r4
     442:	332c      	adds	r3, #44	; 0x2c
     444:	781b      	ldrb	r3, [r3, #0]
     446:	2b00      	cmp	r3, #0
     448:	d103      	bne.n	452 <STACK_SIZE+0x52>
     44a:	2380      	movs	r3, #128	; 0x80
     44c:	049b      	lsls	r3, r3, #18
     44e:	429a      	cmp	r2, r3
     450:	d102      	bne.n	458 <STACK_SIZE+0x58>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     452:	2380      	movs	r3, #128	; 0x80
     454:	051b      	lsls	r3, r3, #20
     456:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     458:	0023      	movs	r3, r4
     45a:	332d      	adds	r3, #45	; 0x2d
     45c:	781b      	ldrb	r3, [r3, #0]
     45e:	2b00      	cmp	r3, #0
     460:	d002      	beq.n	468 <STACK_SIZE+0x68>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     462:	2380      	movs	r3, #128	; 0x80
     464:	041b      	lsls	r3, r3, #16
     466:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     468:	0023      	movs	r3, r4
     46a:	332e      	adds	r3, #46	; 0x2e
     46c:	781b      	ldrb	r3, [r3, #0]
     46e:	2b00      	cmp	r3, #0
     470:	d002      	beq.n	478 <STACK_SIZE+0x78>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     472:	2380      	movs	r3, #128	; 0x80
     474:	03db      	lsls	r3, r3, #15
     476:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     478:	9b01      	ldr	r3, [sp, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     47a:	9804      	ldr	r0, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     47c:	681b      	ldr	r3, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     47e:	9a01      	ldr	r2, [sp, #4]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     480:	431f      	orrs	r7, r3
     482:	9b01      	ldr	r3, [sp, #4]
	uint32_t fscl        = 1000 * config->baud_rate;
     484:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     486:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     488:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     48a:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     48c:	005b      	lsls	r3, r3, #1
     48e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     490:	b2c0      	uxtb	r0, r0
     492:	f000 fdff 	bl	1094 <system_gclk_chan_get_hz>
	uint32_t fscl        = 1000 * config->baud_rate;
     496:	6823      	ldr	r3, [r4, #0]
     498:	00ad      	lsls	r5, r5, #2
     49a:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     49c:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     49e:	9004      	str	r0, [sp, #16]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     4a0:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     4a2:	f003 fafd 	bl	3aa0 <__aeabi_ui2d>
     4a6:	0006      	movs	r6, r0
     4a8:	0068      	lsls	r0, r5, #1
     4aa:	000f      	movs	r7, r1
     4ac:	f003 faf8 	bl	3aa0 <__aeabi_ui2d>
     4b0:	9002      	str	r0, [sp, #8]
     4b2:	9103      	str	r1, [sp, #12]
     4b4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     4b6:	f003 faf3 	bl	3aa0 <__aeabi_ui2d>
     4ba:	4a42      	ldr	r2, [pc, #264]	; (5c4 <STACK_SIZE+0x1c4>)
     4bc:	9006      	str	r0, [sp, #24]
     4be:	9107      	str	r1, [sp, #28]
     4c0:	4b41      	ldr	r3, [pc, #260]	; (5c8 <STACK_SIZE+0x1c8>)
     4c2:	0030      	movs	r0, r6
     4c4:	0039      	movs	r1, r7
     4c6:	f002 fd21 	bl	2f0c <__aeabi_dmul>
     4ca:	0002      	movs	r2, r0
     4cc:	000b      	movs	r3, r1
     4ce:	9806      	ldr	r0, [sp, #24]
     4d0:	9907      	ldr	r1, [sp, #28]
     4d2:	f002 fd1b 	bl	2f0c <__aeabi_dmul>
     4d6:	2200      	movs	r2, #0
     4d8:	4b3c      	ldr	r3, [pc, #240]	; (5cc <STACK_SIZE+0x1cc>)
     4da:	f001 fed3 	bl	2284 <__aeabi_dadd>
     4de:	9006      	str	r0, [sp, #24]
     4e0:	9107      	str	r1, [sp, #28]
     4e2:	0028      	movs	r0, r5
     4e4:	f003 fadc 	bl	3aa0 <__aeabi_ui2d>
     4e8:	0002      	movs	r2, r0
     4ea:	000b      	movs	r3, r1
     4ec:	9806      	ldr	r0, [sp, #24]
     4ee:	9907      	ldr	r1, [sp, #28]
     4f0:	f002 fd0c 	bl	2f0c <__aeabi_dmul>
     4f4:	0002      	movs	r2, r0
     4f6:	000b      	movs	r3, r1
     4f8:	0030      	movs	r0, r6
     4fa:	0039      	movs	r1, r7
     4fc:	f002 ff86 	bl	340c <__aeabi_dsub>
     500:	9a02      	ldr	r2, [sp, #8]
     502:	9b03      	ldr	r3, [sp, #12]
     504:	f001 febe 	bl	2284 <__aeabi_dadd>
     508:	2200      	movs	r2, #0
     50a:	4b31      	ldr	r3, [pc, #196]	; (5d0 <STACK_SIZE+0x1d0>)
     50c:	f002 ff7e 	bl	340c <__aeabi_dsub>
     510:	9a02      	ldr	r2, [sp, #8]
     512:	9b03      	ldr	r3, [sp, #12]
     514:	f002 f9c6 	bl	28a4 <__aeabi_ddiv>
     518:	f003 fa8e 	bl	3a38 <__aeabi_d2iz>
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     51c:	2380      	movs	r3, #128	; 0x80
     51e:	68a2      	ldr	r2, [r4, #8]
	tmp_baud = (int32_t)(div_ceil(
     520:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     522:	049b      	lsls	r3, r3, #18
     524:	429a      	cmp	r2, r3
     526:	d141      	bne.n	5ac <STACK_SIZE+0x1ac>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     528:	23fa      	movs	r3, #250	; 0xfa
     52a:	9d05      	ldr	r5, [sp, #20]
     52c:	009b      	lsls	r3, r3, #2
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     52e:	0032      	movs	r2, r6
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     530:	435d      	muls	r5, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     532:	0030      	movs	r0, r6
     534:	003b      	movs	r3, r7
     536:	0039      	movs	r1, r7
     538:	f001 fea4 	bl	2284 <__aeabi_dadd>
     53c:	0006      	movs	r6, r0
     53e:	0028      	movs	r0, r5
     540:	000f      	movs	r7, r1
     542:	f003 faad 	bl	3aa0 <__aeabi_ui2d>
     546:	2200      	movs	r2, #0
     548:	4b22      	ldr	r3, [pc, #136]	; (5d4 <STACK_SIZE+0x1d4>)
     54a:	f002 fcdf 	bl	2f0c <__aeabi_dmul>
     54e:	0002      	movs	r2, r0
     550:	000b      	movs	r3, r1
     552:	0030      	movs	r0, r6
     554:	0039      	movs	r1, r7
     556:	f002 f9a5 	bl	28a4 <__aeabi_ddiv>
     55a:	2200      	movs	r2, #0
     55c:	4b1c      	ldr	r3, [pc, #112]	; (5d0 <STACK_SIZE+0x1d0>)
     55e:	f002 ff55 	bl	340c <__aeabi_dsub>
     562:	f003 fa69 	bl	3a38 <__aeabi_d2iz>
     566:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     568:	d018      	beq.n	59c <STACK_SIZE+0x19c>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     56a:	0029      	movs	r1, r5
     56c:	9804      	ldr	r0, [sp, #16]
     56e:	f001 fdfd 	bl	216c <__udivsi3>
     572:	3802      	subs	r0, #2
     574:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     576:	9a02      	ldr	r2, [sp, #8]
     578:	2040      	movs	r0, #64	; 0x40
     57a:	2aff      	cmp	r2, #255	; 0xff
     57c:	d80c      	bhi.n	598 <STACK_SIZE+0x198>
     57e:	2bff      	cmp	r3, #255	; 0xff
     580:	d80a      	bhi.n	598 <STACK_SIZE+0x198>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     582:	20ff      	movs	r0, #255	; 0xff
     584:	0014      	movs	r4, r2
     586:	0400      	lsls	r0, r0, #16
     588:	041b      	lsls	r3, r3, #16
     58a:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     58c:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     58e:	0636      	lsls	r6, r6, #24
     590:	4334      	orrs	r4, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     592:	9a01      	ldr	r2, [sp, #4]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     594:	4323      	orrs	r3, r4
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     596:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     598:	b00b      	add	sp, #44	; 0x2c
     59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     59c:	9b04      	ldr	r3, [sp, #16]
     59e:	0069      	lsls	r1, r5, #1
     5a0:	1e48      	subs	r0, r1, #1
     5a2:	18c0      	adds	r0, r0, r3
     5a4:	f001 fde2 	bl	216c <__udivsi3>
     5a8:	1e43      	subs	r3, r0, #1
     5aa:	e7e4      	b.n	576 <STACK_SIZE+0x176>
	int32_t tmp_baudlow_hs = 0;
     5ac:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     5ae:	0033      	movs	r3, r6
     5b0:	e7e1      	b.n	576 <STACK_SIZE+0x176>
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	40000400 	.word	0x40000400
     5b8:	000007cd 	.word	0x000007cd
     5bc:	20000170 	.word	0x20000170
     5c0:	41002000 	.word	0x41002000
     5c4:	e826d695 	.word	0xe826d695
     5c8:	3e112e0b 	.word	0x3e112e0b
     5cc:	40240000 	.word	0x40240000
     5d0:	3ff00000 	.word	0x3ff00000
     5d4:	40080000 	.word	0x40080000

000005d8 <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     5d8:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5da:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     5dc:	7e19      	ldrb	r1, [r3, #24]
     5de:	4211      	tst	r1, r2
     5e0:	d006      	beq.n	5f0 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     5e2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     5e4:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     5e6:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     5e8:	4213      	tst	r3, r2
     5ea:	d10a      	bne.n	602 <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     5ec:	2000      	movs	r0, #0
     5ee:	e008      	b.n	602 <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     5f0:	8b5a      	ldrh	r2, [r3, #26]
     5f2:	0752      	lsls	r2, r2, #29
     5f4:	d5fa      	bpl.n	5ec <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5f6:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
     5f8:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5fa:	6859      	ldr	r1, [r3, #4]
     5fc:	0292      	lsls	r2, r2, #10
     5fe:	430a      	orrs	r2, r1
     600:	605a      	str	r2, [r3, #4]
}
     602:	4770      	bx	lr

00000604 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     604:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     606:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     608:	2601      	movs	r6, #1
     60a:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     60c:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     60e:	7e0b      	ldrb	r3, [r1, #24]
     610:	4033      	ands	r3, r6
     612:	d102      	bne.n	61a <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     614:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     616:	4225      	tst	r5, r4
     618:	d001      	beq.n	61e <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     61a:	2000      	movs	r0, #0
     61c:	e005      	b.n	62a <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
     61e:	3201      	adds	r2, #1
     620:	8903      	ldrh	r3, [r0, #8]
     622:	b292      	uxth	r2, r2
     624:	4293      	cmp	r3, r2
     626:	d8f2      	bhi.n	60e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     628:	2012      	movs	r0, #18
}
     62a:	bd70      	pop	{r4, r5, r6, pc}

0000062c <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     62c:	2380      	movs	r3, #128	; 0x80
{
     62e:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     630:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     632:	02db      	lsls	r3, r3, #11
     634:	6862      	ldr	r2, [r4, #4]
     636:	4313      	orrs	r3, r2
     638:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     63a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     63c:	f7ff ffe2 	bl	604 <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     640:	2301      	movs	r3, #1
     642:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     644:	bd10      	pop	{r4, pc}
	...

00000648 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     64a:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     64c:	884b      	ldrh	r3, [r1, #2]
{
     64e:	0005      	movs	r5, r0
	uint16_t tmp_data_length = packet->data_length;
     650:	9301      	str	r3, [sp, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     652:	6804      	ldr	r4, [r0, #0]

	_i2c_master_wait_for_sync(module);
     654:	f7ff fe66 	bl	324 <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
     658:	7a7b      	ldrb	r3, [r7, #9]
     65a:	2b00      	cmp	r3, #0
     65c:	d003      	beq.n	666 <_i2c_master_write_packet+0x1e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     65e:	7ab9      	ldrb	r1, [r7, #10]
     660:	0028      	movs	r0, r5
     662:	f7ff ffe3 	bl	62c <_i2c_master_send_hs_master_code>
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     666:	6863      	ldr	r3, [r4, #4]
     668:	4a24      	ldr	r2, [pc, #144]	; (6fc <_i2c_master_write_packet+0xb4>)
     66a:	4013      	ands	r3, r2
     66c:	6063      	str	r3, [r4, #4]
     66e:	7a7a      	ldrb	r2, [r7, #9]
     670:	883b      	ldrh	r3, [r7, #0]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     672:	7a39      	ldrb	r1, [r7, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     674:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     676:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     678:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
     67a:	2900      	cmp	r1, #0
     67c:	d002      	beq.n	684 <_i2c_master_write_packet+0x3c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     67e:	2280      	movs	r2, #128	; 0x80
     680:	0212      	lsls	r2, r2, #8
     682:	4313      	orrs	r3, r2
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     684:	6263      	str	r3, [r4, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     686:	0028      	movs	r0, r5
     688:	f7ff ffbc 	bl	604 <_i2c_master_wait_for_bus>
     68c:	1e06      	subs	r6, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     68e:	d115      	bne.n	6bc <_i2c_master_write_packet+0x74>
		tmp_status = _i2c_master_address_response(module);
     690:	0028      	movs	r0, r5
     692:	f7ff ffa1 	bl	5d8 <_i2c_master_address_response>
     696:	1e06      	subs	r6, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     698:	d110      	bne.n	6bc <_i2c_master_write_packet+0x74>
     69a:	9000      	str	r0, [sp, #0]
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     69c:	9b00      	ldr	r3, [sp, #0]
     69e:	9a01      	ldr	r2, [sp, #4]
     6a0:	4293      	cmp	r3, r2
     6a2:	d10d      	bne.n	6c0 <_i2c_master_write_packet+0x78>
     6a4:	2600      	movs	r6, #0
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     6a6:	7aab      	ldrb	r3, [r5, #10]
     6a8:	2b00      	cmp	r3, #0
     6aa:	d007      	beq.n	6bc <_i2c_master_write_packet+0x74>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     6ac:	0028      	movs	r0, r5
     6ae:	f7ff fe39 	bl	324 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6b2:	23c0      	movs	r3, #192	; 0xc0
     6b4:	6862      	ldr	r2, [r4, #4]
     6b6:	029b      	lsls	r3, r3, #10
     6b8:	4313      	orrs	r3, r2
     6ba:	6063      	str	r3, [r4, #4]
		}
	}

	return tmp_status;
}
     6bc:	0030      	movs	r0, r6
     6be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6c0:	2220      	movs	r2, #32
     6c2:	8b63      	ldrh	r3, [r4, #26]
     6c4:	4213      	tst	r3, r2
     6c6:	d016      	beq.n	6f6 <_i2c_master_write_packet+0xae>
			_i2c_master_wait_for_sync(module);
     6c8:	0028      	movs	r0, r5
     6ca:	f7ff fe2b 	bl	324 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	9a00      	ldr	r2, [sp, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     6d2:	0028      	movs	r0, r5
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     6d4:	5c9a      	ldrb	r2, [r3, r2]
     6d6:	0023      	movs	r3, r4
     6d8:	3328      	adds	r3, #40	; 0x28
     6da:	701a      	strb	r2, [r3, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     6dc:	f7ff ff92 	bl	604 <_i2c_master_wait_for_bus>
     6e0:	1e06      	subs	r6, r0, #0
			if (tmp_status != STATUS_OK) {
     6e2:	d1e0      	bne.n	6a6 <_i2c_master_write_packet+0x5e>
     6e4:	9a00      	ldr	r2, [sp, #0]
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6e6:	8b63      	ldrh	r3, [r4, #26]
     6e8:	3201      	adds	r2, #1
     6ea:	9200      	str	r2, [sp, #0]
     6ec:	2204      	movs	r2, #4
     6ee:	4213      	tst	r3, r2
     6f0:	d0d4      	beq.n	69c <_i2c_master_write_packet+0x54>
				tmp_status = STATUS_ERR_OVERFLOW;
     6f2:	261e      	movs	r6, #30
     6f4:	e7d7      	b.n	6a6 <_i2c_master_write_packet+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
     6f6:	2641      	movs	r6, #65	; 0x41
     6f8:	e7e0      	b.n	6bc <_i2c_master_write_packet+0x74>
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	fffbffff 	.word	0xfffbffff

00000700 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     700:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     702:	8b82      	ldrh	r2, [r0, #28]
{
     704:	0003      	movs	r3, r0
		return STATUS_BUSY;
     706:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
     708:	2a00      	cmp	r2, #0
     70a:	d105      	bne.n	718 <i2c_master_write_packet_wait+0x18>
	}
#endif

	module->send_stop = true;
     70c:	3201      	adds	r2, #1
     70e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     710:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     712:	0018      	movs	r0, r3
     714:	f7ff ff98 	bl	648 <_i2c_master_write_packet>
}
     718:	bd10      	pop	{r4, pc}

0000071a <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     71a:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     71c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     71e:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     720:	421a      	tst	r2, r3
     722:	d1fc      	bne.n	71e <_i2c_master_wait_for_sync+0x4>
}
     724:	4770      	bx	lr

00000726 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     726:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     728:	6805      	ldr	r5, [r0, #0]
{
     72a:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     72c:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     72e:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     730:	8b83      	ldrh	r3, [r0, #28]
     732:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
     734:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     736:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     738:	3b01      	subs	r3, #1
     73a:	b29b      	uxth	r3, r3
     73c:	8383      	strh	r3, [r0, #28]
     73e:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
     740:	0112      	lsls	r2, r2, #4
     742:	d50a      	bpl.n	75a <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
     744:	2b00      	cmp	r3, #0
     746:	d00d      	beq.n	764 <_i2c_master_read+0x3e>
     748:	8b83      	ldrh	r3, [r0, #28]
     74a:	2b01      	cmp	r3, #1
     74c:	d10a      	bne.n	764 <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     74e:	2380      	movs	r3, #128	; 0x80
     750:	686a      	ldr	r2, [r5, #4]
     752:	02db      	lsls	r3, r3, #11
     754:	4313      	orrs	r3, r2
     756:	606b      	str	r3, [r5, #4]
     758:	e004      	b.n	764 <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
     75a:	2b00      	cmp	r3, #0
     75c:	d002      	beq.n	764 <_i2c_master_read+0x3e>
     75e:	8b83      	ldrh	r3, [r0, #28]
     760:	2b00      	cmp	r3, #0
     762:	d0f4      	beq.n	74e <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
     764:	8ba3      	ldrh	r3, [r4, #28]
     766:	2b00      	cmp	r3, #0
     768:	d10a      	bne.n	780 <_i2c_master_read+0x5a>
		if (module->send_stop) {
     76a:	7aa3      	ldrb	r3, [r4, #10]
     76c:	2b00      	cmp	r3, #0
     76e:	d007      	beq.n	780 <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     770:	0020      	movs	r0, r4
     772:	f7ff ffd2 	bl	71a <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     776:	23c0      	movs	r3, #192	; 0xc0
     778:	686a      	ldr	r2, [r5, #4]
     77a:	029b      	lsls	r3, r3, #10
     77c:	4313      	orrs	r3, r2
     77e:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     780:	0020      	movs	r0, r4
     782:	f7ff ffca 	bl	71a <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     786:	6a23      	ldr	r3, [r4, #32]
     788:	3528      	adds	r5, #40	; 0x28
     78a:	199e      	adds	r6, r3, r6
     78c:	782b      	ldrb	r3, [r5, #0]
     78e:	b2db      	uxtb	r3, r3
     790:	7033      	strb	r3, [r6, #0]
}
     792:	bd70      	pop	{r4, r5, r6, pc}

00000794 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     794:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     796:	6806      	ldr	r6, [r0, #0]
{
     798:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     79a:	8b73      	ldrh	r3, [r6, #26]
     79c:	075b      	lsls	r3, r3, #29
     79e:	d503      	bpl.n	7a8 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     7a0:	231e      	movs	r3, #30
     7a2:	3406      	adds	r4, #6
     7a4:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     7a6:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     7a8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     7aa:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
     7ac:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
     7ae:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
     7b0:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     7b2:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
     7b4:	3b01      	subs	r3, #1
     7b6:	b29b      	uxth	r3, r3
     7b8:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     7ba:	f7ff ffae 	bl	71a <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
     7be:	6a23      	ldr	r3, [r4, #32]
     7c0:	195d      	adds	r5, r3, r5
     7c2:	782b      	ldrb	r3, [r5, #0]
     7c4:	b2db      	uxtb	r3, r3
     7c6:	7033      	strb	r3, [r6, #0]
     7c8:	e7ed      	b.n	7a6 <_i2c_master_write+0x12>
	...

000007cc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     7ce:	4b5e      	ldr	r3, [pc, #376]	; (948 <_i2c_master_interrupt_handler+0x17c>)
     7d0:	0080      	lsls	r0, r0, #2
     7d2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7d4:	6825      	ldr	r5, [r4, #0]
     7d6:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7d8:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     7da:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
     7dc:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7de:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
     7e0:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     7e2:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7e4:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     7e6:	2a00      	cmp	r2, #0
     7e8:	d12e      	bne.n	848 <_i2c_master_interrupt_handler+0x7c>
     7ea:	8ba2      	ldrh	r2, [r4, #28]
     7ec:	2a00      	cmp	r2, #0
     7ee:	d02b      	beq.n	848 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     7f0:	2301      	movs	r3, #1
     7f2:	7e2a      	ldrb	r2, [r5, #24]
     7f4:	421a      	tst	r2, r3
     7f6:	d006      	beq.n	806 <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     7f8:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     7fa:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     7fc:	8b6b      	ldrh	r3, [r5, #26]
     7fe:	4013      	ands	r3, r2
     800:	d010      	beq.n	824 <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
     802:	2341      	movs	r3, #65	; 0x41
     804:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
     806:	8ba3      	ldrh	r3, [r4, #28]
     808:	b29b      	uxth	r3, r3
     80a:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     80c:	7ff3      	ldrb	r3, [r6, #31]
     80e:	2b05      	cmp	r3, #5
     810:	d13c      	bne.n	88c <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     812:	1d63      	adds	r3, r4, #5
     814:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
     816:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     818:	2b00      	cmp	r3, #0
     81a:	d000      	beq.n	81e <_i2c_master_interrupt_handler+0x52>
     81c:	e08a      	b.n	934 <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
     81e:	f7ff ffb9 	bl	794 <_i2c_master_write>
     822:	e033      	b.n	88c <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     824:	8b6a      	ldrh	r2, [r5, #26]
     826:	0752      	lsls	r2, r2, #29
     828:	d5ed      	bpl.n	806 <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     82a:	2218      	movs	r2, #24
     82c:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
     82e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     830:	7aa3      	ldrb	r3, [r4, #10]
     832:	2b00      	cmp	r3, #0
     834:	d0e7      	beq.n	806 <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
     836:	0020      	movs	r0, r4
     838:	f7ff ff6f 	bl	71a <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     83c:	23c0      	movs	r3, #192	; 0xc0
     83e:	686a      	ldr	r2, [r5, #4]
     840:	029b      	lsls	r3, r3, #10
     842:	4313      	orrs	r3, r2
     844:	606b      	str	r3, [r5, #4]
     846:	e7de      	b.n	806 <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     848:	8b62      	ldrh	r2, [r4, #26]
     84a:	2a00      	cmp	r2, #0
     84c:	d05f      	beq.n	90e <_i2c_master_interrupt_handler+0x142>
     84e:	8ba2      	ldrh	r2, [r4, #28]
     850:	2a00      	cmp	r2, #0
     852:	d15c      	bne.n	90e <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
     854:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     856:	2a05      	cmp	r2, #5
     858:	d159      	bne.n	90e <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     85a:	1d62      	adds	r2, r4, #5
     85c:	7fd2      	ldrb	r2, [r2, #31]
     85e:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
     860:	2a00      	cmp	r2, #0
     862:	d154      	bne.n	90e <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
     864:	2303      	movs	r3, #3
     866:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     868:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     86a:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
     86c:	7aa3      	ldrb	r3, [r4, #10]
     86e:	2b00      	cmp	r3, #0
     870:	d04a      	beq.n	908 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
     872:	0020      	movs	r0, r4
     874:	f7ff ff51 	bl	71a <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     878:	23c0      	movs	r3, #192	; 0xc0
     87a:	686a      	ldr	r2, [r5, #4]
     87c:	029b      	lsls	r3, r3, #10
     87e:	4313      	orrs	r3, r2
     880:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     882:	07fb      	lsls	r3, r7, #31
     884:	d502      	bpl.n	88c <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     886:	68e3      	ldr	r3, [r4, #12]
     888:	0020      	movs	r0, r4
     88a:	4798      	blx	r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     88c:	8b63      	ldrh	r3, [r4, #26]
     88e:	2b00      	cmp	r3, #0
     890:	d01b      	beq.n	8ca <_i2c_master_interrupt_handler+0xfe>
     892:	8ba3      	ldrh	r3, [r4, #28]
     894:	2b00      	cmp	r3, #0
     896:	d118      	bne.n	8ca <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
     898:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     89a:	2b05      	cmp	r3, #5
     89c:	d115      	bne.n	8ca <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     89e:	1d63      	adds	r3, r4, #5
     8a0:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
     8a2:	2a01      	cmp	r2, #1
     8a4:	d111      	bne.n	8ca <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     8a6:	7e29      	ldrb	r1, [r5, #24]
     8a8:	3201      	adds	r2, #1
     8aa:	4211      	tst	r1, r2
     8ac:	d000      	beq.n	8b0 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     8ae:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     8b0:	2203      	movs	r2, #3
     8b2:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     8b4:	2200      	movs	r2, #0
     8b6:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     8b8:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     8ba:	07ba      	lsls	r2, r7, #30
     8bc:	d53d      	bpl.n	93a <_i2c_master_interrupt_handler+0x16e>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     8be:	7fda      	ldrb	r2, [r3, #31]
     8c0:	2a01      	cmp	r2, #1
     8c2:	d13a      	bne.n	93a <_i2c_master_interrupt_handler+0x16e>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     8c4:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     8c6:	0020      	movs	r0, r4
     8c8:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     8ca:	7ff3      	ldrb	r3, [r6, #31]
     8cc:	2b05      	cmp	r3, #5
     8ce:	d01a      	beq.n	906 <_i2c_master_interrupt_handler+0x13a>
     8d0:	7ff3      	ldrb	r3, [r6, #31]
     8d2:	2b00      	cmp	r3, #0
     8d4:	d017      	beq.n	906 <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     8d6:	2303      	movs	r3, #3
     8d8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     8da:	2300      	movs	r3, #0
     8dc:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     8de:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     8e0:	7ff3      	ldrb	r3, [r6, #31]
     8e2:	2b41      	cmp	r3, #65	; 0x41
     8e4:	d00a      	beq.n	8fc <_i2c_master_interrupt_handler+0x130>
     8e6:	7aa3      	ldrb	r3, [r4, #10]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d007      	beq.n	8fc <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     8ec:	0020      	movs	r0, r4
     8ee:	f7ff ff14 	bl	71a <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     8f2:	23e0      	movs	r3, #224	; 0xe0
     8f4:	686a      	ldr	r2, [r5, #4]
     8f6:	02db      	lsls	r3, r3, #11
     8f8:	4313      	orrs	r3, r2
     8fa:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     8fc:	077b      	lsls	r3, r7, #29
     8fe:	d502      	bpl.n	906 <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     900:	6963      	ldr	r3, [r4, #20]
     902:	0020      	movs	r0, r4
     904:	4798      	blx	r3
		}
	}
}
     906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     908:	2301      	movs	r3, #1
     90a:	762b      	strb	r3, [r5, #24]
     90c:	e7b9      	b.n	882 <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     90e:	8b62      	ldrh	r2, [r4, #26]
     910:	2a00      	cmp	r2, #0
     912:	d0bb      	beq.n	88c <_i2c_master_interrupt_handler+0xc0>
     914:	8ba2      	ldrh	r2, [r4, #28]
     916:	2a00      	cmp	r2, #0
     918:	d0b8      	beq.n	88c <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     91a:	8b6a      	ldrh	r2, [r5, #26]
     91c:	0692      	lsls	r2, r2, #26
     91e:	d500      	bpl.n	922 <_i2c_master_interrupt_handler+0x156>
     920:	e777      	b.n	812 <_i2c_master_interrupt_handler+0x46>
     922:	2b00      	cmp	r3, #0
     924:	d003      	beq.n	92e <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     926:	8ba3      	ldrh	r3, [r4, #28]
     928:	2b01      	cmp	r3, #1
     92a:	d100      	bne.n	92e <_i2c_master_interrupt_handler+0x162>
     92c:	e771      	b.n	812 <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
     92e:	2341      	movs	r3, #65	; 0x41
     930:	77f3      	strb	r3, [r6, #31]
     932:	e7ab      	b.n	88c <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
     934:	f7ff fef7 	bl	726 <_i2c_master_read>
     938:	e7a8      	b.n	88c <_i2c_master_interrupt_handler+0xc0>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     93a:	07fa      	lsls	r2, r7, #31
     93c:	d5c5      	bpl.n	8ca <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     93e:	7fdb      	ldrb	r3, [r3, #31]
     940:	2b00      	cmp	r3, #0
     942:	d1c2      	bne.n	8ca <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     944:	68e3      	ldr	r3, [r4, #12]
     946:	e7be      	b.n	8c6 <_i2c_master_interrupt_handler+0xfa>
     948:	20000170 	.word	0x20000170

0000094c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     94e:	4c0d      	ldr	r4, [pc, #52]	; (984 <sercom_set_gclk_generator+0x38>)
{
     950:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     952:	7823      	ldrb	r3, [r4, #0]
     954:	2b00      	cmp	r3, #0
     956:	d001      	beq.n	95c <sercom_set_gclk_generator+0x10>
     958:	2900      	cmp	r1, #0
     95a:	d00c      	beq.n	976 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     95c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     95e:	200d      	movs	r0, #13
		gclk_chan_conf.source_generator = generator_source;
     960:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     962:	f000 fb8b 	bl	107c <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     966:	200d      	movs	r0, #13
     968:	f000 fb4c 	bl	1004 <system_gclk_chan_enable>

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     96c:	2301      	movs	r3, #1

		return STATUS_OK;
     96e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     970:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     972:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     974:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     976:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     978:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     97a:	42ab      	cmp	r3, r5
     97c:	d0fa      	beq.n	974 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     97e:	201d      	movs	r0, #29
     980:	e7f8      	b.n	974 <sercom_set_gclk_generator+0x28>
     982:	46c0      	nop			; (mov r8, r8)
     984:	20000041 	.word	0x20000041

00000988 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     988:	4a1d      	ldr	r2, [pc, #116]	; (a00 <_sercom_get_default_pad+0x78>)
{
     98a:	0003      	movs	r3, r0
     98c:	b500      	push	{lr}
     98e:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     990:	4293      	cmp	r3, r2
     992:	d013      	beq.n	9bc <_sercom_get_default_pad+0x34>
     994:	4a1b      	ldr	r2, [pc, #108]	; (a04 <_sercom_get_default_pad+0x7c>)
     996:	4293      	cmp	r3, r2
     998:	d01d      	beq.n	9d6 <_sercom_get_default_pad+0x4e>
     99a:	4a1b      	ldr	r2, [pc, #108]	; (a08 <_sercom_get_default_pad+0x80>)
     99c:	4293      	cmp	r3, r2
     99e:	d127      	bne.n	9f0 <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     9a0:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9a2:	2903      	cmp	r1, #3
     9a4:	d804      	bhi.n	9b0 <_sercom_get_default_pad+0x28>
     9a6:	f001 fbd7 	bl	2158 <__gnu_thumb1_case_uqi>
     9aa:	0225      	.short	0x0225
     9ac:	0705      	.short	0x0705
     9ae:	4b17      	ldr	r3, [pc, #92]	; (a0c <_sercom_get_default_pad+0x84>)
}
     9b0:	0018      	movs	r0, r3
     9b2:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9b4:	4b16      	ldr	r3, [pc, #88]	; (a10 <_sercom_get_default_pad+0x88>)
     9b6:	e7fb      	b.n	9b0 <_sercom_get_default_pad+0x28>
     9b8:	4b16      	ldr	r3, [pc, #88]	; (a14 <_sercom_get_default_pad+0x8c>)
     9ba:	e7f9      	b.n	9b0 <_sercom_get_default_pad+0x28>
	return 0;
     9bc:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9be:	2903      	cmp	r1, #3
     9c0:	d8f6      	bhi.n	9b0 <_sercom_get_default_pad+0x28>
     9c2:	f001 fbc9 	bl	2158 <__gnu_thumb1_case_uqi>
     9c6:	0219      	.short	0x0219
     9c8:	0604      	.short	0x0604
     9ca:	4b13      	ldr	r3, [pc, #76]	; (a18 <_sercom_get_default_pad+0x90>)
     9cc:	e7f0      	b.n	9b0 <_sercom_get_default_pad+0x28>
     9ce:	4b13      	ldr	r3, [pc, #76]	; (a1c <_sercom_get_default_pad+0x94>)
     9d0:	e7ee      	b.n	9b0 <_sercom_get_default_pad+0x28>
     9d2:	4b13      	ldr	r3, [pc, #76]	; (a20 <_sercom_get_default_pad+0x98>)
     9d4:	e7ec      	b.n	9b0 <_sercom_get_default_pad+0x28>
	return 0;
     9d6:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9d8:	2903      	cmp	r1, #3
     9da:	d8e9      	bhi.n	9b0 <_sercom_get_default_pad+0x28>
     9dc:	f001 fbbc 	bl	2158 <__gnu_thumb1_case_uqi>
     9e0:	0604020e 	.word	0x0604020e
     9e4:	4b0f      	ldr	r3, [pc, #60]	; (a24 <_sercom_get_default_pad+0x9c>)
     9e6:	e7e3      	b.n	9b0 <_sercom_get_default_pad+0x28>
     9e8:	4b0f      	ldr	r3, [pc, #60]	; (a28 <_sercom_get_default_pad+0xa0>)
     9ea:	e7e1      	b.n	9b0 <_sercom_get_default_pad+0x28>
     9ec:	4b0f      	ldr	r3, [pc, #60]	; (a2c <_sercom_get_default_pad+0xa4>)
     9ee:	e7df      	b.n	9b0 <_sercom_get_default_pad+0x28>
	return 0;
     9f0:	2300      	movs	r3, #0
     9f2:	e7dd      	b.n	9b0 <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9f4:	4b0e      	ldr	r3, [pc, #56]	; (a30 <_sercom_get_default_pad+0xa8>)
     9f6:	e7db      	b.n	9b0 <_sercom_get_default_pad+0x28>
     9f8:	4b0e      	ldr	r3, [pc, #56]	; (a34 <_sercom_get_default_pad+0xac>)
     9fa:	e7d9      	b.n	9b0 <_sercom_get_default_pad+0x28>
     9fc:	4b0e      	ldr	r3, [pc, #56]	; (a38 <_sercom_get_default_pad+0xb0>)
     9fe:	e7d7      	b.n	9b0 <_sercom_get_default_pad+0x28>
     a00:	42000c00 	.word	0x42000c00
     a04:	42001000 	.word	0x42001000
     a08:	42000800 	.word	0x42000800
     a0c:	00050003 	.word	0x00050003
     a10:	00060003 	.word	0x00060003
     a14:	00070003 	.word	0x00070003
     a18:	00170002 	.word	0x00170002
     a1c:	001e0003 	.word	0x001e0003
     a20:	001f0003 	.word	0x001f0003
     a24:	00170003 	.word	0x00170003
     a28:	00100003 	.word	0x00100003
     a2c:	00190003 	.word	0x00190003
     a30:	00040003 	.word	0x00040003
     a34:	00160002 	.word	0x00160002
     a38:	00160003 	.word	0x00160003

00000a3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a3e:	4b0c      	ldr	r3, [pc, #48]	; (a70 <_sercom_get_sercom_inst_index+0x34>)
{
     a40:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a42:	0018      	movs	r0, r3
     a44:	aa01      	add	r2, sp, #4
     a46:	c870      	ldmia	r0!, {r4, r5, r6}
     a48:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a4a:	9a01      	ldr	r2, [sp, #4]
     a4c:	428a      	cmp	r2, r1
     a4e:	d00a      	beq.n	a66 <_sercom_get_sercom_inst_index+0x2a>
     a50:	685a      	ldr	r2, [r3, #4]
     a52:	428a      	cmp	r2, r1
     a54:	d009      	beq.n	a6a <_sercom_get_sercom_inst_index+0x2e>
     a56:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a58:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a5a:	428b      	cmp	r3, r1
     a5c:	d101      	bne.n	a62 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a5e:	3002      	adds	r0, #2
			return i;
     a60:	b2c0      	uxtb	r0, r0
}
     a62:	b004      	add	sp, #16
     a64:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a66:	2000      	movs	r0, #0
     a68:	e7fa      	b.n	a60 <_sercom_get_sercom_inst_index+0x24>
     a6a:	2001      	movs	r0, #1
     a6c:	e7f8      	b.n	a60 <_sercom_get_sercom_inst_index+0x24>
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	00003ba4 	.word	0x00003ba4

00000a74 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a74:	4770      	bx	lr
	...

00000a78 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a78:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     a7a:	4e09      	ldr	r6, [pc, #36]	; (aa0 <_sercom_set_handler+0x28>)
     a7c:	4b09      	ldr	r3, [pc, #36]	; (aa4 <_sercom_set_handler+0x2c>)
     a7e:	7832      	ldrb	r2, [r6, #0]
     a80:	2a00      	cmp	r2, #0
     a82:	d109      	bne.n	a98 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     a84:	4c08      	ldr	r4, [pc, #32]	; (aa8 <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a86:	4d09      	ldr	r5, [pc, #36]	; (aac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a88:	6022      	str	r2, [r4, #0]
     a8a:	6062      	str	r2, [r4, #4]
     a8c:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
     a8e:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a90:	601d      	str	r5, [r3, #0]
     a92:	605d      	str	r5, [r3, #4]
     a94:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
     a96:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a98:	0080      	lsls	r0, r0, #2
     a9a:	5019      	str	r1, [r3, r0]
}
     a9c:	bd70      	pop	{r4, r5, r6, pc}
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	20000043 	.word	0x20000043
     aa4:	20000044 	.word	0x20000044
     aa8:	20000170 	.word	0x20000170
     aac:	00000a75 	.word	0x00000a75

00000ab0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ab0:	2309      	movs	r3, #9
{
     ab2:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ab4:	ac01      	add	r4, sp, #4
     ab6:	7023      	strb	r3, [r4, #0]
     ab8:	3301      	adds	r3, #1
     aba:	7063      	strb	r3, [r4, #1]
     abc:	3301      	adds	r3, #1
     abe:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ac0:	f7ff ffbc 	bl	a3c <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ac4:	5620      	ldrsb	r0, [r4, r0]
}
     ac6:	bd16      	pop	{r1, r2, r4, pc}

00000ac8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ac8:	b510      	push	{r4, lr}
     aca:	4b02      	ldr	r3, [pc, #8]	; (ad4 <SERCOM0_Handler+0xc>)
     acc:	2000      	movs	r0, #0
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	4798      	blx	r3
     ad2:	bd10      	pop	{r4, pc}
     ad4:	20000044 	.word	0x20000044

00000ad8 <SERCOM1_Handler>:
     ad8:	b510      	push	{r4, lr}
     ada:	4b02      	ldr	r3, [pc, #8]	; (ae4 <SERCOM1_Handler+0xc>)
     adc:	2001      	movs	r0, #1
     ade:	685b      	ldr	r3, [r3, #4]
     ae0:	4798      	blx	r3
     ae2:	bd10      	pop	{r4, pc}
     ae4:	20000044 	.word	0x20000044

00000ae8 <SERCOM2_Handler>:
     ae8:	b510      	push	{r4, lr}
     aea:	4b02      	ldr	r3, [pc, #8]	; (af4 <SERCOM2_Handler+0xc>)
     aec:	2002      	movs	r0, #2
     aee:	689b      	ldr	r3, [r3, #8]
     af0:	4798      	blx	r3
     af2:	bd10      	pop	{r4, pc}
     af4:	20000044 	.word	0x20000044

00000af8 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     af8:	2310      	movs	r3, #16
     afa:	4902      	ldr	r1, [pc, #8]	; (b04 <_system_dfll_wait_for_sync+0xc>)
     afc:	68ca      	ldr	r2, [r1, #12]
     afe:	421a      	tst	r2, r3
     b00:	d0fc      	beq.n	afc <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     b02:	4770      	bx	lr
     b04:	40000800 	.word	0x40000800

00000b08 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     b08:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
     b0a:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
     b0c:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     b0e:	4d0a      	ldr	r5, [pc, #40]	; (b38 <system_clock_source_enable.part.0+0x30>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     b10:	4c0a      	ldr	r4, [pc, #40]	; (b3c <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     b12:	682b      	ldr	r3, [r5, #0]
     b14:	4313      	orrs	r3, r2
     b16:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     b18:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     b1a:	f7ff ffed 	bl	af8 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     b1e:	68ab      	ldr	r3, [r5, #8]
     b20:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     b22:	686b      	ldr	r3, [r5, #4]
     b24:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     b26:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     b28:	f7ff ffe6 	bl	af8 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     b2c:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     b2e:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     b30:	b29b      	uxth	r3, r3
     b32:	84a3      	strh	r3, [r4, #36]	; 0x24
}
     b34:	bd70      	pop	{r4, r5, r6, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	20000050 	.word	0x20000050
     b3c:	40000800 	.word	0x40000800

00000b40 <system_clock_source_get_hz>:
{
     b40:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     b42:	2808      	cmp	r0, #8
     b44:	d806      	bhi.n	b54 <system_clock_source_get_hz+0x14>
     b46:	f001 fb07 	bl	2158 <__gnu_thumb1_case_uqi>
     b4a:	0508      	.short	0x0508
     b4c:	12303005 	.word	0x12303005
     b50:	150b      	.short	0x150b
     b52:	28          	.byte	0x28
     b53:	00          	.byte	0x00
		return 0;
     b54:	2400      	movs	r4, #0
}
     b56:	0020      	movs	r0, r4
     b58:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     b5a:	4b16      	ldr	r3, [pc, #88]	; (bb4 <system_clock_source_get_hz+0x74>)
     b5c:	691c      	ldr	r4, [r3, #16]
     b5e:	e7fa      	b.n	b56 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b60:	4b15      	ldr	r3, [pc, #84]	; (bb8 <system_clock_source_get_hz+0x78>)
     b62:	4c16      	ldr	r4, [pc, #88]	; (bbc <system_clock_source_get_hz+0x7c>)
     b64:	6a1b      	ldr	r3, [r3, #32]
     b66:	059b      	lsls	r3, r3, #22
     b68:	0f9b      	lsrs	r3, r3, #30
     b6a:	40dc      	lsrs	r4, r3
     b6c:	e7f3      	b.n	b56 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     b6e:	4b11      	ldr	r3, [pc, #68]	; (bb4 <system_clock_source_get_hz+0x74>)
     b70:	695c      	ldr	r4, [r3, #20]
     b72:	e7f0      	b.n	b56 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b74:	4d0f      	ldr	r5, [pc, #60]	; (bb4 <system_clock_source_get_hz+0x74>)
			return 0;
     b76:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b78:	682b      	ldr	r3, [r5, #0]
     b7a:	079b      	lsls	r3, r3, #30
     b7c:	d5eb      	bpl.n	b56 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     b7e:	f7ff ffbb 	bl	af8 <_system_dfll_wait_for_sync>
		switch(_system_clock_inst.dfll.control &
     b82:	2224      	movs	r2, #36	; 0x24
     b84:	682b      	ldr	r3, [r5, #0]
     b86:	4013      	ands	r3, r2
     b88:	2b04      	cmp	r3, #4
     b8a:	d111      	bne.n	bb0 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b8c:	0020      	movs	r0, r4
     b8e:	f000 fa81 	bl	1094 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
     b92:	68ac      	ldr	r4, [r5, #8]
     b94:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b96:	4344      	muls	r4, r0
     b98:	e7dd      	b.n	b56 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b9a:	4b09      	ldr	r3, [pc, #36]	; (bc0 <system_clock_source_get_hz+0x80>)
			return 0;
     b9c:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b9e:	781b      	ldrb	r3, [r3, #0]
     ba0:	075b      	lsls	r3, r3, #29
     ba2:	d5d8      	bpl.n	b56 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     ba4:	4b03      	ldr	r3, [pc, #12]	; (bb4 <system_clock_source_get_hz+0x74>)
     ba6:	68dc      	ldr	r4, [r3, #12]
     ba8:	e7d5      	b.n	b56 <system_clock_source_get_hz+0x16>
		return 32768UL;
     baa:	2480      	movs	r4, #128	; 0x80
     bac:	0224      	lsls	r4, r4, #8
     bae:	e7d2      	b.n	b56 <system_clock_source_get_hz+0x16>
			return 48000000UL;
     bb0:	4c04      	ldr	r4, [pc, #16]	; (bc4 <system_clock_source_get_hz+0x84>)
     bb2:	e7d0      	b.n	b56 <system_clock_source_get_hz+0x16>
     bb4:	20000050 	.word	0x20000050
     bb8:	40000800 	.word	0x40000800
     bbc:	007a1200 	.word	0x007a1200
     bc0:	40000850 	.word	0x40000850
     bc4:	02dc6c00 	.word	0x02dc6c00

00000bc8 <system_clock_source_osc8m_set_config>:
{
     bc8:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
     bca:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
     bcc:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
     bce:	7845      	ldrb	r5, [r0, #1]
     bd0:	2001      	movs	r0, #1
     bd2:	2640      	movs	r6, #64	; 0x40
     bd4:	4005      	ands	r5, r0
     bd6:	4020      	ands	r0, r4
     bd8:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bda:	4908      	ldr	r1, [pc, #32]	; (bfc <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     bdc:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bde:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     be0:	01c0      	lsls	r0, r0, #7
     be2:	43b3      	bics	r3, r6
     be4:	432b      	orrs	r3, r5
     be6:	43a3      	bics	r3, r4
     be8:	4303      	orrs	r3, r0
     bea:	2003      	movs	r0, #3
     bec:	4002      	ands	r2, r0
     bee:	4804      	ldr	r0, [pc, #16]	; (c00 <system_clock_source_osc8m_set_config+0x38>)
     bf0:	0212      	lsls	r2, r2, #8
     bf2:	4003      	ands	r3, r0
     bf4:	4313      	orrs	r3, r2
     bf6:	620b      	str	r3, [r1, #32]
}
     bf8:	bd70      	pop	{r4, r5, r6, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	40000800 	.word	0x40000800
     c00:	fffffcff 	.word	0xfffffcff

00000c04 <system_clock_source_osc32k_set_config>:
{
     c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     c06:	4f18      	ldr	r7, [pc, #96]	; (c68 <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
     c08:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     c0a:	69bb      	ldr	r3, [r7, #24]
     c0c:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
     c0e:	7803      	ldrb	r3, [r0, #0]
     c10:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
     c12:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
     c14:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
     c16:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     c18:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     c1a:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
     c1c:	2201      	movs	r2, #1
     c1e:	4399      	bics	r1, r3
     c20:	2308      	movs	r3, #8
     c22:	7880      	ldrb	r0, [r0, #2]
     c24:	4016      	ands	r6, r2
     c26:	4010      	ands	r0, r2
     c28:	0080      	lsls	r0, r0, #2
     c2a:	4308      	orrs	r0, r1
     c2c:	4398      	bics	r0, r3
     c2e:	00f6      	lsls	r6, r6, #3
     c30:	4306      	orrs	r6, r0
     c32:	4015      	ands	r5, r2
     c34:	01a8      	lsls	r0, r5, #6
     c36:	0035      	movs	r5, r6
     c38:	3338      	adds	r3, #56	; 0x38
     c3a:	439d      	bics	r5, r3
     c3c:	4305      	orrs	r5, r0
     c3e:	4014      	ands	r4, r2
     c40:	01e3      	lsls	r3, r4, #7
     c42:	2080      	movs	r0, #128	; 0x80
     c44:	002c      	movs	r4, r5
     c46:	4384      	bics	r4, r0
     c48:	431c      	orrs	r4, r3
     c4a:	2307      	movs	r3, #7
     c4c:	9901      	ldr	r1, [sp, #4]
     c4e:	400b      	ands	r3, r1
     c50:	4906      	ldr	r1, [pc, #24]	; (c6c <system_clock_source_osc32k_set_config+0x68>)
     c52:	021b      	lsls	r3, r3, #8
     c54:	4021      	ands	r1, r4
     c56:	4319      	orrs	r1, r3
     c58:	9b00      	ldr	r3, [sp, #0]
     c5a:	401a      	ands	r2, r3
     c5c:	0313      	lsls	r3, r2, #12
     c5e:	4a04      	ldr	r2, [pc, #16]	; (c70 <system_clock_source_osc32k_set_config+0x6c>)
     c60:	400a      	ands	r2, r1
     c62:	431a      	orrs	r2, r3
     c64:	61ba      	str	r2, [r7, #24]
}
     c66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     c68:	40000800 	.word	0x40000800
     c6c:	fffff8ff 	.word	0xfffff8ff
     c70:	ffffefff 	.word	0xffffefff

00000c74 <system_clock_source_dfll_set_config>:
{
     c74:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     c76:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     c78:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     c7a:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     c7c:	059b      	lsls	r3, r3, #22
     c7e:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     c80:	0c12      	lsrs	r2, r2, #16
     c82:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
     c84:	4b17      	ldr	r3, [pc, #92]	; (ce4 <system_clock_source_dfll_set_config+0x70>)
     c86:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
     c88:	79c1      	ldrb	r1, [r0, #7]
     c8a:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
     c8c:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
     c8e:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
     c90:	8841      	ldrh	r1, [r0, #2]
     c92:	4321      	orrs	r1, r4
     c94:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     c96:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     c98:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     c9a:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
     c9c:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
     c9e:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     ca0:	2c04      	cmp	r4, #4
     ca2:	d10d      	bne.n	cc0 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     ca4:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     ca6:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     ca8:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     caa:	430a      	orrs	r2, r1
     cac:	89c1      	ldrh	r1, [r0, #14]
     cae:	480e      	ldr	r0, [pc, #56]	; (ce8 <system_clock_source_dfll_set_config+0x74>)
     cb0:	0409      	lsls	r1, r1, #16
     cb2:	4001      	ands	r1, r0
     cb4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     cb6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     cb8:	681a      	ldr	r2, [r3, #0]
     cba:	4314      	orrs	r4, r2
     cbc:	601c      	str	r4, [r3, #0]
}
     cbe:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     cc0:	2c20      	cmp	r4, #32
     cc2:	d1fc      	bne.n	cbe <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     cc4:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     cc6:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     cc8:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     cca:	430a      	orrs	r2, r1
     ccc:	89c1      	ldrh	r1, [r0, #14]
     cce:	4806      	ldr	r0, [pc, #24]	; (ce8 <system_clock_source_dfll_set_config+0x74>)
     cd0:	0409      	lsls	r1, r1, #16
     cd2:	4001      	ands	r1, r0
     cd4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     cd6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
     cd8:	6819      	ldr	r1, [r3, #0]
     cda:	4a04      	ldr	r2, [pc, #16]	; (cec <system_clock_source_dfll_set_config+0x78>)
     cdc:	430a      	orrs	r2, r1
     cde:	601a      	str	r2, [r3, #0]
}
     ce0:	e7ed      	b.n	cbe <system_clock_source_dfll_set_config+0x4a>
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	20000050 	.word	0x20000050
     ce8:	03ff0000 	.word	0x03ff0000
     cec:	00000424 	.word	0x00000424

00000cf0 <system_clock_source_enable>:
{
     cf0:	b510      	push	{r4, lr}
	switch (clock_source) {
     cf2:	2808      	cmp	r0, #8
     cf4:	d806      	bhi.n	d04 <system_clock_source_enable+0x14>
     cf6:	f001 fa2f 	bl	2158 <__gnu_thumb1_case_uqi>
     cfa:	0514      	.short	0x0514
     cfc:	1a0e0c05 	.word	0x1a0e0c05
     d00:	2007      	.short	0x2007
     d02:	23          	.byte	0x23
     d03:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
     d04:	2017      	movs	r0, #23
}
     d06:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d08:	2302      	movs	r3, #2
     d0a:	4a10      	ldr	r2, [pc, #64]	; (d4c <system_clock_source_enable+0x5c>)
     d0c:	6a11      	ldr	r1, [r2, #32]
     d0e:	430b      	orrs	r3, r1
     d10:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d12:	2000      	movs	r0, #0
     d14:	e7f7      	b.n	d06 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d16:	2302      	movs	r3, #2
     d18:	4a0c      	ldr	r2, [pc, #48]	; (d4c <system_clock_source_enable+0x5c>)
     d1a:	6991      	ldr	r1, [r2, #24]
     d1c:	430b      	orrs	r3, r1
     d1e:	6193      	str	r3, [r2, #24]
     d20:	e7f7      	b.n	d12 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d22:	2302      	movs	r3, #2
     d24:	4a09      	ldr	r2, [pc, #36]	; (d4c <system_clock_source_enable+0x5c>)
     d26:	8a11      	ldrh	r1, [r2, #16]
     d28:	430b      	orrs	r3, r1
     d2a:	8213      	strh	r3, [r2, #16]
     d2c:	e7f1      	b.n	d12 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     d2e:	2302      	movs	r3, #2
     d30:	4a06      	ldr	r2, [pc, #24]	; (d4c <system_clock_source_enable+0x5c>)
     d32:	8a91      	ldrh	r1, [r2, #20]
     d34:	430b      	orrs	r3, r1
     d36:	8293      	strh	r3, [r2, #20]
     d38:	e7eb      	b.n	d12 <system_clock_source_enable+0x22>
     d3a:	f7ff fee5 	bl	b08 <system_clock_source_enable.part.0>
     d3e:	e7e2      	b.n	d06 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     d40:	2302      	movs	r3, #2
     d42:	4a03      	ldr	r2, [pc, #12]	; (d50 <system_clock_source_enable+0x60>)
     d44:	7811      	ldrb	r1, [r2, #0]
     d46:	430b      	orrs	r3, r1
     d48:	7013      	strb	r3, [r2, #0]
     d4a:	e7e2      	b.n	d12 <system_clock_source_enable+0x22>
     d4c:	40000800 	.word	0x40000800
     d50:	40000844 	.word	0x40000844

00000d54 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d54:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     d56:	221e      	movs	r2, #30
{
     d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d5a:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d5c:	4e48      	ldr	r6, [pc, #288]	; (e80 <system_clock_init+0x12c>)
     d5e:	00db      	lsls	r3, r3, #3
     d60:	4948      	ldr	r1, [pc, #288]	; (e84 <system_clock_init+0x130>)
     d62:	60b3      	str	r3, [r6, #8]
     d64:	684b      	ldr	r3, [r1, #4]
{
     d66:	b08d      	sub	sp, #52	; 0x34
     d68:	4393      	bics	r3, r2
     d6a:	3a1c      	subs	r2, #28
     d6c:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     d6e:	ac07      	add	r4, sp, #28
     d70:	604b      	str	r3, [r1, #4]
     d72:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     d74:	b2e8      	uxtb	r0, r5
     d76:	0021      	movs	r1, r4
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d78:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     d7a:	f000 f97f 	bl	107c <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d7e:	2d18      	cmp	r5, #24
     d80:	d1f8      	bne.n	d74 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     d82:	4f41      	ldr	r7, [pc, #260]	; (e88 <system_clock_init+0x134>)
	SYSCTRL->OSC32K.bit.CALIB =
     d84:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     d86:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
     d88:	4940      	ldr	r1, [pc, #256]	; (e8c <system_clock_init+0x138>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     d8a:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     d8c:	0e5b      	lsrs	r3, r3, #25
     d8e:	400a      	ands	r2, r1
     d90:	041b      	lsls	r3, r3, #16
     d92:	4313      	orrs	r3, r2
     d94:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
     d96:	2301      	movs	r3, #1
	config->run_in_standby      = false;
     d98:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
     d9a:	a802      	add	r0, sp, #8
     d9c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     d9e:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
     da0:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     da2:	3306      	adds	r3, #6
     da4:	7003      	strb	r3, [r0, #0]
	config->run_in_standby      = false;
     da6:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
     da8:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     daa:	f7ff ff2b 	bl	c04 <system_clock_source_osc32k_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     dae:	2004      	movs	r0, #4
     db0:	f7ff ff9e 	bl	cf0 <system_clock_source_enable>
	config->fine_value      = 0xff / 4; /* Midpoint */
     db4:	233f      	movs	r3, #63	; 0x3f
     db6:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     db8:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     dba:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     dbc:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     dbe:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     dc0:	71e5      	strb	r5, [r4, #7]
     dc2:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
     dc4:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     dc6:	683b      	ldr	r3, [r7, #0]
     dc8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     dca:	2b3f      	cmp	r3, #63	; 0x3f
     dcc:	d100      	bne.n	dd0 <system_clock_init+0x7c>
		coarse = 0x1f;
     dce:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
     dd0:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     dd2:	23b7      	movs	r3, #183	; 0xb7
     dd4:	00db      	lsls	r3, r3, #3
     dd6:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     dd8:	2307      	movs	r3, #7
     dda:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     ddc:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
     dde:	2500      	movs	r5, #0
	config->on_demand       = true;
     de0:	2701      	movs	r7, #1
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     de2:	0020      	movs	r0, r4
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     de4:	81e3      	strh	r3, [r4, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
     de6:	f7ff ff45 	bl	c74 <system_clock_source_dfll_set_config>
	config->run_in_standby  = false;
     dea:	a801      	add	r0, sp, #4
     dec:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     dee:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     df0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     df2:	f7ff fee9 	bl	bc8 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     df6:	2006      	movs	r0, #6
     df8:	f7ff ff7a 	bl	cf0 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     dfc:	f000 f850 	bl	ea0 <system_gclk_init>

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     e00:	2304      	movs	r3, #4
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e02:	ac04      	add	r4, sp, #16
     e04:	0021      	movs	r1, r4
     e06:	0038      	movs	r0, r7
     e08:	7023      	strb	r3, [r4, #0]
     e0a:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     e0c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     e0e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     e10:	7265      	strb	r5, [r4, #9]
     e12:	f000 f855 	bl	ec0 <system_gclk_gen_set_config>
     e16:	0038      	movs	r0, r7
     e18:	f000 f8a0 	bl	f5c <system_gclk_gen_enable>
     e1c:	2307      	movs	r3, #7
     e1e:	0021      	movs	r1, r4
     e20:	2003      	movs	r0, #3
     e22:	7023      	strb	r3, [r4, #0]
	config->division_factor    = 1;
     e24:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     e26:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     e28:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     e2a:	7265      	strb	r5, [r4, #9]
     e2c:	f000 f848 	bl	ec0 <system_gclk_gen_set_config>
     e30:	2003      	movs	r0, #3
     e32:	f000 f893 	bl	f5c <system_gclk_gen_enable>
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     e36:	0021      	movs	r1, r4
     e38:	0028      	movs	r0, r5
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     e3a:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     e3c:	f000 f91e 	bl	107c <system_gclk_chan_set_config>
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     e40:	0028      	movs	r0, r5
     e42:	f000 f8df 	bl	1004 <system_gclk_chan_enable>
     e46:	f7ff fe5f 	bl	b08 <system_clock_source_enable.part.0>
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     e4a:	22d0      	movs	r2, #208	; 0xd0
     e4c:	68f3      	ldr	r3, [r6, #12]
     e4e:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     e50:	2bd0      	cmp	r3, #208	; 0xd0
     e52:	d1fb      	bne.n	e4c <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
     e54:	2500      	movs	r5, #0
     e56:	4b0e      	ldr	r3, [pc, #56]	; (e90 <system_clock_init+0x13c>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e58:	0021      	movs	r1, r4
     e5a:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e5c:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e5e:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e60:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
     e62:	2301      	movs	r3, #1
     e64:	0028      	movs	r0, r5
     e66:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e68:	3305      	adds	r3, #5
     e6a:	7023      	strb	r3, [r4, #0]
	config->high_when_disabled = false;
     e6c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     e6e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     e70:	7265      	strb	r5, [r4, #9]
     e72:	f000 f825 	bl	ec0 <system_gclk_gen_set_config>
     e76:	0028      	movs	r0, r5
     e78:	f000 f870 	bl	f5c <system_gclk_gen_enable>
#endif
}
     e7c:	b00d      	add	sp, #52	; 0x34
     e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e80:	40000800 	.word	0x40000800
     e84:	41004000 	.word	0x41004000
     e88:	00806024 	.word	0x00806024
     e8c:	ff80ffff 	.word	0xff80ffff
     e90:	40000400 	.word	0x40000400

00000e94 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e94:	4b01      	ldr	r3, [pc, #4]	; (e9c <system_gclk_is_syncing+0x8>)
     e96:	7858      	ldrb	r0, [r3, #1]
     e98:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
     e9a:	4770      	bx	lr
     e9c:	40000c00 	.word	0x40000c00

00000ea0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     ea0:	2308      	movs	r3, #8
     ea2:	4a05      	ldr	r2, [pc, #20]	; (eb8 <system_gclk_init+0x18>)
     ea4:	6991      	ldr	r1, [r2, #24]
     ea6:	430b      	orrs	r3, r1
     ea8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     eaa:	2301      	movs	r3, #1
     eac:	4a03      	ldr	r2, [pc, #12]	; (ebc <system_gclk_init+0x1c>)
     eae:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     eb0:	7811      	ldrb	r1, [r2, #0]
     eb2:	4219      	tst	r1, r3
     eb4:	d1fc      	bne.n	eb0 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     eb6:	4770      	bx	lr
     eb8:	40000400 	.word	0x40000400
     ebc:	40000c00 	.word	0x40000c00

00000ec0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ec0:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ec2:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     ec4:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ec6:	0224      	lsls	r4, r4, #8
{
     ec8:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     eca:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ecc:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
     ece:	2b00      	cmp	r3, #0
     ed0:	d002      	beq.n	ed8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ed2:	2380      	movs	r3, #128	; 0x80
     ed4:	02db      	lsls	r3, r3, #11
     ed6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     ed8:	7a4b      	ldrb	r3, [r1, #9]
     eda:	2b00      	cmp	r3, #0
     edc:	d002      	beq.n	ee4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     ede:	2380      	movs	r3, #128	; 0x80
     ee0:	031b      	lsls	r3, r3, #12
     ee2:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ee4:	684b      	ldr	r3, [r1, #4]
     ee6:	2b01      	cmp	r3, #1
     ee8:	d912      	bls.n	f10 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     eea:	1e5d      	subs	r5, r3, #1
     eec:	401d      	ands	r5, r3
     eee:	2202      	movs	r2, #2
     ef0:	2d00      	cmp	r5, #0
     ef2:	d006      	beq.n	f02 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     ef4:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     ef6:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
     ef8:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     efa:	029b      	lsls	r3, r3, #10
     efc:	e007      	b.n	f0e <system_gclk_gen_set_config+0x4e>
				div2_count++;
     efe:	3501      	adds	r5, #1
						mask <<= 1) {
     f00:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f02:	429a      	cmp	r2, r3
     f04:	d3fb      	bcc.n	efe <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f06:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f08:	022d      	lsls	r5, r5, #8
     f0a:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f0c:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f0e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f10:	7a0b      	ldrb	r3, [r1, #8]
     f12:	2b00      	cmp	r3, #0
     f14:	d002      	beq.n	f1c <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f16:	2380      	movs	r3, #128	; 0x80
     f18:	039b      	lsls	r3, r3, #14
     f1a:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
     f1c:	f7ff ffba 	bl	e94 <system_gclk_is_syncing>
     f20:	2800      	cmp	r0, #0
     f22:	d1fb      	bne.n	f1c <system_gclk_gen_set_config+0x5c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f24:	f7ff f9a6 	bl	274 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f28:	4b0a      	ldr	r3, [pc, #40]	; (f54 <system_gclk_gen_set_config+0x94>)
     f2a:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f2c:	f7ff ffb2 	bl	e94 <system_gclk_is_syncing>
     f30:	2800      	cmp	r0, #0
     f32:	d1fb      	bne.n	f2c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f34:	4b08      	ldr	r3, [pc, #32]	; (f58 <system_gclk_gen_set_config+0x98>)
     f36:	609d      	str	r5, [r3, #8]
     f38:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
     f3a:	f7ff ffab 	bl	e94 <system_gclk_is_syncing>
     f3e:	2800      	cmp	r0, #0
     f40:	d1fb      	bne.n	f3a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f42:	2280      	movs	r2, #128	; 0x80
     f44:	686b      	ldr	r3, [r5, #4]
     f46:	0252      	lsls	r2, r2, #9
     f48:	4013      	ands	r3, r2
     f4a:	431c      	orrs	r4, r3
     f4c:	606c      	str	r4, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f4e:	f7ff f9ab 	bl	2a8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
     f52:	bd70      	pop	{r4, r5, r6, pc}
     f54:	40000c08 	.word	0x40000c08
     f58:	40000c00 	.word	0x40000c00

00000f5c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f5c:	b510      	push	{r4, lr}
     f5e:	0004      	movs	r4, r0
	while (system_gclk_is_syncing()) {
     f60:	f7ff ff98 	bl	e94 <system_gclk_is_syncing>
     f64:	2800      	cmp	r0, #0
     f66:	d1fb      	bne.n	f60 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
     f68:	f7ff f984 	bl	274 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f6c:	4b07      	ldr	r3, [pc, #28]	; (f8c <system_gclk_gen_enable+0x30>)
     f6e:	701c      	strb	r4, [r3, #0]
	while (system_gclk_is_syncing()) {
     f70:	f7ff ff90 	bl	e94 <system_gclk_is_syncing>
     f74:	2800      	cmp	r0, #0
     f76:	d1fb      	bne.n	f70 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     f78:	2380      	movs	r3, #128	; 0x80
     f7a:	4a05      	ldr	r2, [pc, #20]	; (f90 <system_gclk_gen_enable+0x34>)
     f7c:	025b      	lsls	r3, r3, #9
     f7e:	6851      	ldr	r1, [r2, #4]
     f80:	430b      	orrs	r3, r1
     f82:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     f84:	f7ff f990 	bl	2a8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
     f88:	bd10      	pop	{r4, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	40000c04 	.word	0x40000c04
     f90:	40000c00 	.word	0x40000c00

00000f94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f96:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
     f98:	f7ff ff7c 	bl	e94 <system_gclk_is_syncing>
     f9c:	2800      	cmp	r0, #0
     f9e:	d1fb      	bne.n	f98 <system_gclk_gen_get_hz+0x4>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fa0:	4e15      	ldr	r6, [pc, #84]	; (ff8 <system_gclk_gen_get_hz+0x64>)
	cpu_irq_enter_critical();
     fa2:	f7ff f967 	bl	274 <cpu_irq_enter_critical>
     fa6:	7037      	strb	r7, [r6, #0]
	while (system_gclk_is_syncing()) {
     fa8:	f7ff ff74 	bl	e94 <system_gclk_is_syncing>
     fac:	2800      	cmp	r0, #0
     fae:	d1fb      	bne.n	fa8 <system_gclk_gen_get_hz+0x14>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     fb0:	4c12      	ldr	r4, [pc, #72]	; (ffc <system_gclk_gen_get_hz+0x68>)
     fb2:	6860      	ldr	r0, [r4, #4]
     fb4:	04c0      	lsls	r0, r0, #19
     fb6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     fb8:	f7ff fdc2 	bl	b40 <system_clock_source_get_hz>
     fbc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fbe:	7037      	strb	r7, [r6, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     fc0:	6866      	ldr	r6, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fc2:	4b0f      	ldr	r3, [pc, #60]	; (1000 <system_gclk_gen_get_hz+0x6c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     fc4:	02f6      	lsls	r6, r6, #11
     fc6:	0ff6      	lsrs	r6, r6, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fc8:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
     fca:	f7ff ff63 	bl	e94 <system_gclk_is_syncing>
     fce:	2800      	cmp	r0, #0
     fd0:	d1fb      	bne.n	fca <system_gclk_gen_get_hz+0x36>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     fd2:	68a4      	ldr	r4, [r4, #8]
     fd4:	0224      	lsls	r4, r4, #8
     fd6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     fd8:	f7ff f966 	bl	2a8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     fdc:	2e00      	cmp	r6, #0
     fde:	d108      	bne.n	ff2 <system_gclk_gen_get_hz+0x5e>
     fe0:	2c01      	cmp	r4, #1
     fe2:	d904      	bls.n	fee <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
     fe4:	0028      	movs	r0, r5
     fe6:	0021      	movs	r1, r4
     fe8:	f001 f8c0 	bl	216c <__udivsi3>
     fec:	0005      	movs	r5, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
     fee:	0028      	movs	r0, r5
     ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
     ff2:	3401      	adds	r4, #1
     ff4:	40e5      	lsrs	r5, r4
	return gen_input_hz;
     ff6:	e7fa      	b.n	fee <system_gclk_gen_get_hz+0x5a>
     ff8:	40000c04 	.word	0x40000c04
     ffc:	40000c00 	.word	0x40000c00
    1000:	40000c08 	.word	0x40000c08

00001004 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1004:	b510      	push	{r4, lr}
    1006:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1008:	f7ff f934 	bl	274 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    100c:	4b05      	ldr	r3, [pc, #20]	; (1024 <system_gclk_chan_enable+0x20>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    100e:	4a06      	ldr	r2, [pc, #24]	; (1028 <system_gclk_chan_enable+0x24>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1010:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1012:	2380      	movs	r3, #128	; 0x80
    1014:	8851      	ldrh	r1, [r2, #2]
    1016:	01db      	lsls	r3, r3, #7
    1018:	430b      	orrs	r3, r1
    101a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    101c:	f7ff f944 	bl	2a8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1020:	bd10      	pop	{r4, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	40000c02 	.word	0x40000c02
    1028:	40000c00 	.word	0x40000c00

0000102c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    102c:	b510      	push	{r4, lr}
    102e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1030:	f7ff f920 	bl	274 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1034:	4b0d      	ldr	r3, [pc, #52]	; (106c <system_gclk_chan_disable+0x40>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1036:	4a0e      	ldr	r2, [pc, #56]	; (1070 <system_gclk_chan_disable+0x44>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1038:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    103a:	4b0e      	ldr	r3, [pc, #56]	; (1074 <system_gclk_chan_disable+0x48>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    103c:	4c0e      	ldr	r4, [pc, #56]	; (1078 <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    103e:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1040:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1042:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1044:	4011      	ands	r1, r2
    1046:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1048:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    104a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    104c:	4021      	ands	r1, r4
    104e:	8059      	strh	r1, [r3, #2]
    1050:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1052:	2280      	movs	r2, #128	; 0x80
    1054:	01d2      	lsls	r2, r2, #7
    1056:	885c      	ldrh	r4, [r3, #2]
    1058:	4214      	tst	r4, r2
    105a:	d1fc      	bne.n	1056 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    105c:	885a      	ldrh	r2, [r3, #2]
    105e:	0200      	lsls	r0, r0, #8
    1060:	400a      	ands	r2, r1
    1062:	4302      	orrs	r2, r0
    1064:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1066:	f7ff f91f 	bl	2a8 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    106a:	bd10      	pop	{r4, pc}
    106c:	40000c02 	.word	0x40000c02
    1070:	fffff0ff 	.word	0xfffff0ff
    1074:	40000c00 	.word	0x40000c00
    1078:	ffffbfff 	.word	0xffffbfff

0000107c <system_gclk_chan_set_config>:
{
    107c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    107e:	780c      	ldrb	r4, [r1, #0]
    1080:	0224      	lsls	r4, r4, #8
    1082:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1084:	f7ff ffd2 	bl	102c <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1088:	4b01      	ldr	r3, [pc, #4]	; (1090 <system_gclk_chan_set_config+0x14>)
    108a:	b2a4      	uxth	r4, r4
    108c:	805c      	strh	r4, [r3, #2]
}
    108e:	bd10      	pop	{r4, pc}
    1090:	40000c00 	.word	0x40000c00

00001094 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1094:	b510      	push	{r4, lr}
    1096:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1098:	f7ff f8ec 	bl	274 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    109c:	4b05      	ldr	r3, [pc, #20]	; (10b4 <system_gclk_chan_get_hz+0x20>)
    109e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    10a0:	4b05      	ldr	r3, [pc, #20]	; (10b8 <system_gclk_chan_get_hz+0x24>)
    10a2:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    10a4:	f7ff f900 	bl	2a8 <cpu_irq_leave_critical>
    10a8:	0524      	lsls	r4, r4, #20
    10aa:	0f24      	lsrs	r4, r4, #28

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    10ac:	0020      	movs	r0, r4
    10ae:	f7ff ff71 	bl	f94 <system_gclk_gen_get_hz>
}
    10b2:	bd10      	pop	{r4, pc}
    10b4:	40000c02 	.word	0x40000c02
    10b8:	40000c00 	.word	0x40000c00

000010bc <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    10bc:	78d3      	ldrb	r3, [r2, #3]
{
    10be:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    10c0:	2b00      	cmp	r3, #0
    10c2:	d135      	bne.n	1130 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    10c4:	7814      	ldrb	r4, [r2, #0]
    10c6:	2c80      	cmp	r4, #128	; 0x80
    10c8:	d003      	beq.n	10d2 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    10ca:	2380      	movs	r3, #128	; 0x80
    10cc:	0624      	lsls	r4, r4, #24
    10ce:	025b      	lsls	r3, r3, #9
    10d0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    10d2:	2502      	movs	r5, #2
    10d4:	7854      	ldrb	r4, [r2, #1]
    10d6:	43ac      	bics	r4, r5
    10d8:	d106      	bne.n	10e8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    10da:	7894      	ldrb	r4, [r2, #2]
    10dc:	2c00      	cmp	r4, #0
    10de:	d124      	bne.n	112a <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    10e0:	2480      	movs	r4, #128	; 0x80
    10e2:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    10e4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    10e6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10e8:	7854      	ldrb	r4, [r2, #1]
    10ea:	3c01      	subs	r4, #1
    10ec:	2c01      	cmp	r4, #1
    10ee:	d801      	bhi.n	10f4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    10f0:	4c12      	ldr	r4, [pc, #72]	; (113c <_system_pinmux_config+0x80>)
    10f2:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10f4:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    10f6:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10f8:	05e4      	lsls	r4, r4, #23
    10fa:	432c      	orrs	r4, r5
    10fc:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10fe:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1100:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1102:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1104:	0624      	lsls	r4, r4, #24
    1106:	432c      	orrs	r4, r5
    1108:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    110a:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    110c:	78d4      	ldrb	r4, [r2, #3]
    110e:	2c00      	cmp	r4, #0
    1110:	d10a      	bne.n	1128 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1112:	035b      	lsls	r3, r3, #13
    1114:	d503      	bpl.n	111e <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1116:	7893      	ldrb	r3, [r2, #2]
    1118:	2b01      	cmp	r3, #1
    111a:	d10c      	bne.n	1136 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    111c:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    111e:	7853      	ldrb	r3, [r2, #1]
    1120:	3b01      	subs	r3, #1
    1122:	2b01      	cmp	r3, #1
    1124:	d800      	bhi.n	1128 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1126:	6081      	str	r1, [r0, #8]
		}
	}
}
    1128:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    112a:	24c0      	movs	r4, #192	; 0xc0
    112c:	02e4      	lsls	r4, r4, #11
    112e:	e7d9      	b.n	10e4 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1130:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1132:	2300      	movs	r3, #0
    1134:	e7de      	b.n	10f4 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    1136:	6141      	str	r1, [r0, #20]
    1138:	e7f1      	b.n	111e <_system_pinmux_config+0x62>
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	fffbffff 	.word	0xfffbffff

00001140 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1140:	b510      	push	{r4, lr}
    1142:	0003      	movs	r3, r0
    1144:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    1146:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1148:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    114a:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    114c:	4281      	cmp	r1, r0
    114e:	d102      	bne.n	1156 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1150:	4904      	ldr	r1, [pc, #16]	; (1164 <system_pinmux_pin_set_config+0x24>)
    1152:	01e0      	lsls	r0, r4, #7
    1154:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1156:	211f      	movs	r1, #31
    1158:	400b      	ands	r3, r1
    115a:	391e      	subs	r1, #30
    115c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    115e:	f7ff ffad 	bl	10bc <_system_pinmux_config>
}
    1162:	bd10      	pop	{r4, pc}
    1164:	41004400 	.word	0x41004400

00001168 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1168:	4770      	bx	lr

0000116a <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    116a:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    116c:	f7ff fdf2 	bl	d54 <system_clock_init>
	/* Initialize board hardware */
	system_board_init();
    1170:	f7ff f8b2 	bl	2d8 <system_board_init>
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1174:	f7ff fff8 	bl	1168 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    1178:	f7ff fff6 	bl	1168 <_system_dummy_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    117c:	f7ff fff4 	bl	1168 <_system_dummy_init>
}
    1180:	bd10      	pop	{r4, pc}

00001182 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1182:	2000      	movs	r0, #0
    1184:	4770      	bx	lr
	...

00001188 <_tcc_set_compare_value.isra.5>:
 *
 * \retval  STATUS_OK               The compare value was updated successfully
 * \retval  STATUS_ERR_INVALID_ARG  An invalid channel index was supplied or
 *                                  compare value exceed resolution
 */
static enum status_code _tcc_set_compare_value(
    1188:	b530      	push	{r4, r5, lr}
    118a:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    118c:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    118e:	2903      	cmp	r1, #3
    1190:	d813      	bhi.n	11ba <_tcc_set_compare_value.isra.5+0x32>
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
    1192:	4d10      	ldr	r5, [pc, #64]	; (11d4 <_tcc_set_compare_value.isra.5+0x4c>)
    1194:	42aa      	cmp	r2, r5
    1196:	d810      	bhi.n	11ba <_tcc_set_compare_value.isra.5+0x32>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
    1198:	2b00      	cmp	r3, #0
    119a:	d00f      	beq.n	11bc <_tcc_set_compare_value.isra.5+0x34>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
				(TCC_STATUS_CCBV0 << channel_index)) {
    119c:	2380      	movs	r3, #128	; 0x80
    119e:	025b      	lsls	r3, r3, #9
    11a0:	408b      	lsls	r3, r1
		while(tcc_module->STATUS.reg  &
    11a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    11a4:	4203      	tst	r3, r0
    11a6:	d1fc      	bne.n	11a2 <_tcc_set_compare_value.isra.5+0x1a>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    11a8:	2580      	movs	r5, #128	; 0x80
    11aa:	032d      	lsls	r5, r5, #12
    11ac:	408d      	lsls	r5, r1
		while(tcc_module->SYNCBUSY.reg  &
    11ae:	68a0      	ldr	r0, [r4, #8]
    11b0:	4028      	ands	r0, r5
    11b2:	d1fc      	bne.n	11ae <_tcc_set_compare_value.isra.5+0x26>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    11b4:	311c      	adds	r1, #28
    11b6:	0089      	lsls	r1, r1, #2
    11b8:	510a      	str	r2, [r1, r4]
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    11ba:	bd30      	pop	{r4, r5, pc}
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    11bc:	2080      	movs	r0, #128	; 0x80
    11be:	0040      	lsls	r0, r0, #1
    11c0:	4088      	lsls	r0, r1
    11c2:	68a3      	ldr	r3, [r4, #8]
    11c4:	4003      	ands	r3, r0
    11c6:	d1fc      	bne.n	11c2 <_tcc_set_compare_value.isra.5+0x3a>
		tcc_module->CC[channel_index].reg = compare;
    11c8:	3110      	adds	r1, #16
    11ca:	0089      	lsls	r1, r1, #2
    11cc:	1861      	adds	r1, r4, r1
    11ce:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    11d0:	0018      	movs	r0, r3
    11d2:	e7f2      	b.n	11ba <_tcc_set_compare_value.isra.5+0x32>
    11d4:	00ffffff 	.word	0x00ffffff

000011d8 <tcc_get_config_defaults>:
	config->counter.period                 = _tcc_maxs[module_index];
    11d8:	4a37      	ldr	r2, [pc, #220]	; (12b8 <tcc_get_config_defaults+0xe0>)
{
    11da:	b510      	push	{r4, lr}
	config->counter.period                 = _tcc_maxs[module_index];
    11dc:	6042      	str	r2, [r0, #4]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    11de:	0002      	movs	r2, r0
	config->counter.count                  = 0;
    11e0:	2300      	movs	r3, #0
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    11e2:	0004      	movs	r4, r0
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    11e4:	322c      	adds	r2, #44	; 0x2c
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    11e6:	3448      	adds	r4, #72	; 0x48
	config->counter.count                  = 0;
    11e8:	6003      	str	r3, [r0, #0]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    11ea:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    11ec:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    11ee:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    11f0:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    11f2:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    11f4:	61c3      	str	r3, [r0, #28]
    11f6:	6203      	str	r3, [r0, #32]
    11f8:	6243      	str	r3, [r0, #36]	; 0x24
    11fa:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    11fc:	7503      	strb	r3, [r0, #20]
    11fe:	7543      	strb	r3, [r0, #21]
    1200:	7583      	strb	r3, [r0, #22]
    1202:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1204:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1206:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1208:	7403      	strb	r3, [r0, #16]
    120a:	7443      	strb	r3, [r0, #17]
    120c:	7483      	strb	r3, [r0, #18]
    120e:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1210:	7013      	strb	r3, [r2, #0]
    1212:	7053      	strb	r3, [r2, #1]
    1214:	7093      	strb	r3, [r2, #2]
    1216:	70d3      	strb	r3, [r2, #3]
    1218:	7113      	strb	r3, [r2, #4]
    121a:	7153      	strb	r3, [r2, #5]
    121c:	7193      	strb	r3, [r2, #6]
    121e:	71d3      	strb	r3, [r2, #7]
    1220:	7213      	strb	r3, [r2, #8]
    1222:	7253      	strb	r3, [r2, #9]
    1224:	7293      	strb	r3, [r2, #10]
    1226:	72d3      	strb	r3, [r2, #11]
    1228:	320c      	adds	r2, #12
    122a:	7013      	strb	r3, [r2, #0]
    122c:	7053      	strb	r3, [r2, #1]
    122e:	7093      	strb	r3, [r2, #2]
    1230:	70d3      	strb	r3, [r2, #3]
    1232:	7113      	strb	r3, [r2, #4]
    1234:	7153      	strb	r3, [r2, #5]
    1236:	7193      	strb	r3, [r2, #6]
    1238:	71d3      	strb	r3, [r2, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    123a:	7213      	strb	r3, [r2, #8]
    123c:	7253      	strb	r3, [r2, #9]
    123e:	7293      	strb	r3, [r2, #10]
    1240:	72d3      	strb	r3, [r2, #11]
    1242:	7313      	strb	r3, [r2, #12]
    1244:	7353      	strb	r3, [r2, #13]
    1246:	7393      	strb	r3, [r2, #14]
    1248:	73d3      	strb	r3, [r2, #15]
    124a:	1d01      	adds	r1, r0, #4
    124c:	7023      	strb	r3, [r4, #0]
    124e:	7063      	strb	r3, [r4, #1]
    1250:	70a3      	strb	r3, [r4, #2]
    1252:	70e3      	strb	r3, [r4, #3]
    1254:	7123      	strb	r3, [r4, #4]
    1256:	7163      	strb	r3, [r4, #5]
    1258:	71a3      	strb	r3, [r4, #6]
    125a:	71e3      	strb	r3, [r4, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    125c:	7223      	strb	r3, [r4, #8]
    125e:	7263      	strb	r3, [r4, #9]
    1260:	72a3      	strb	r3, [r4, #10]
    1262:	72e3      	strb	r3, [r4, #11]
    1264:	7323      	strb	r3, [r4, #12]
    1266:	7363      	strb	r3, [r4, #13]
    1268:	73a3      	strb	r3, [r4, #14]
    126a:	73e3      	strb	r3, [r4, #15]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    126c:	3450      	adds	r4, #80	; 0x50
    126e:	7023      	strb	r3, [r4, #0]
    1270:	6583      	str	r3, [r0, #88]	; 0x58
    1272:	6783      	str	r3, [r0, #120]	; 0x78
    1274:	7063      	strb	r3, [r4, #1]
    1276:	65c3      	str	r3, [r0, #92]	; 0x5c
    1278:	67c3      	str	r3, [r0, #124]	; 0x7c
    127a:	70a3      	strb	r3, [r4, #2]
    127c:	6603      	str	r3, [r0, #96]	; 0x60
    127e:	67cb      	str	r3, [r1, #124]	; 0x7c
    1280:	3197      	adds	r1, #151	; 0x97
    1282:	700b      	strb	r3, [r1, #0]
	config->double_buffering_enabled  = true;
    1284:	2101      	movs	r1, #1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1286:	3a30      	subs	r2, #48	; 0x30
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1288:	6643      	str	r3, [r0, #100]	; 0x64
    128a:	67d3      	str	r3, [r2, #124]	; 0x7c
    128c:	3294      	adds	r2, #148	; 0x94
    128e:	7013      	strb	r3, [r2, #0]
    1290:	3a14      	subs	r2, #20
    1292:	6683      	str	r3, [r0, #104]	; 0x68
    1294:	6013      	str	r3, [r2, #0]
    1296:	7553      	strb	r3, [r2, #21]
    1298:	3204      	adds	r2, #4
    129a:	66c3      	str	r3, [r0, #108]	; 0x6c
    129c:	6013      	str	r3, [r2, #0]
    129e:	7493      	strb	r3, [r2, #18]
    12a0:	3204      	adds	r2, #4
    12a2:	6703      	str	r3, [r0, #112]	; 0x70
    12a4:	6013      	str	r3, [r2, #0]
    12a6:	73d3      	strb	r3, [r2, #15]
    12a8:	6743      	str	r3, [r0, #116]	; 0x74
    12aa:	3204      	adds	r2, #4
	config->run_in_standby            = false;
    12ac:	30a1      	adds	r0, #161	; 0xa1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    12ae:	6013      	str	r3, [r2, #0]
	config->double_buffering_enabled  = true;
    12b0:	7311      	strb	r1, [r2, #12]
	config->run_in_standby            = false;
    12b2:	7003      	strb	r3, [r0, #0]
}
    12b4:	bd10      	pop	{r4, pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	00ffffff 	.word	0x00ffffff

000012bc <tcc_init>:
{
    12bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12be:	0006      	movs	r6, r0
    12c0:	b08f      	sub	sp, #60	; 0x3c
	uint8_t module_index = _tcc_get_inst_index(hw);
    12c2:	0008      	movs	r0, r1
{
    12c4:	000d      	movs	r5, r1
    12c6:	0014      	movs	r4, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    12c8:	f7ff ff5b 	bl	1182 <_tcc_get_inst_index>
			PM->APBCMASK.reg |= mask;
    12cc:	2320      	movs	r3, #32
    12ce:	4aa3      	ldr	r2, [pc, #652]	; (155c <tcc_init+0x2a0>)
    12d0:	9009      	str	r0, [sp, #36]	; 0x24
    12d2:	6a11      	ldr	r1, [r2, #32]
		return STATUS_ERR_DENIED;
    12d4:	201c      	movs	r0, #28
    12d6:	430b      	orrs	r3, r1
    12d8:	6213      	str	r3, [r2, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    12da:	682b      	ldr	r3, [r5, #0]
    12dc:	079b      	lsls	r3, r3, #30
    12de:	d407      	bmi.n	12f0 <tcc_init+0x34>
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    12e0:	682b      	ldr	r3, [r5, #0]
    12e2:	07db      	lsls	r3, r3, #31
    12e4:	d404      	bmi.n	12f0 <tcc_init+0x34>
    12e6:	4a9e      	ldr	r2, [pc, #632]	; (1560 <tcc_init+0x2a4>)
	if ((config->counter.count > count_max)
    12e8:	6823      	ldr	r3, [r4, #0]
    12ea:	4293      	cmp	r3, r2
    12ec:	d902      	bls.n	12f4 <tcc_init+0x38>
		return STATUS_ERR_INVALID_ARG;
    12ee:	2017      	movs	r0, #23
}
    12f0:	b00f      	add	sp, #60	; 0x3c
    12f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		|| (config->counter.period > count_max)
    12f4:	6863      	ldr	r3, [r4, #4]
    12f6:	4293      	cmp	r3, r2
    12f8:	d8f9      	bhi.n	12ee <tcc_init+0x32>
    12fa:	0023      	movs	r3, r4
    12fc:	0021      	movs	r1, r4
    12fe:	331c      	adds	r3, #28
    1300:	312c      	adds	r1, #44	; 0x2c
		if ((config->compare.match[i] > count_max)
    1302:	6818      	ldr	r0, [r3, #0]
    1304:	4290      	cmp	r0, r2
    1306:	d8f2      	bhi.n	12ee <tcc_init+0x32>
    1308:	3304      	adds	r3, #4
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    130a:	428b      	cmp	r3, r1
    130c:	d1f9      	bne.n	1302 <tcc_init+0x46>
    130e:	2200      	movs	r2, #0
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1310:	2180      	movs	r1, #128	; 0x80
    1312:	9202      	str	r2, [sp, #8]
    1314:	0449      	lsls	r1, r1, #17
		if (config->capture.channel_function[i] ==
    1316:	18a0      	adds	r0, r4, r2
    1318:	7c00      	ldrb	r0, [r0, #16]
    131a:	2801      	cmp	r0, #1
    131c:	d104      	bne.n	1328 <tcc_init+0x6c>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    131e:	0008      	movs	r0, r1
    1320:	4090      	lsls	r0, r2
    1322:	9f02      	ldr	r7, [sp, #8]
    1324:	4307      	orrs	r7, r0
    1326:	9702      	str	r7, [sp, #8]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1328:	3201      	adds	r2, #1
    132a:	2a04      	cmp	r2, #4
    132c:	d1f3      	bne.n	1316 <tcc_init+0x5a>
	if (config->run_in_standby) {
    132e:	0022      	movs	r2, r4
    1330:	32a1      	adds	r2, #161	; 0xa1
    1332:	7812      	ldrb	r2, [r2, #0]
    1334:	2a00      	cmp	r2, #0
    1336:	d004      	beq.n	1342 <tcc_init+0x86>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    1338:	2280      	movs	r2, #128	; 0x80
    133a:	9902      	ldr	r1, [sp, #8]
    133c:	0112      	lsls	r2, r2, #4
    133e:	4311      	orrs	r1, r2
    1340:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    1342:	7a22      	ldrb	r2, [r4, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1344:	1e51      	subs	r1, r2, #1
    1346:	418a      	sbcs	r2, r1
    1348:	0092      	lsls	r2, r2, #2
    134a:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    134c:	7a62      	ldrb	r2, [r4, #9]
    134e:	2a01      	cmp	r2, #1
    1350:	d102      	bne.n	1358 <tcc_init+0x9c>
		ctrlb |= TCC_CTRLBSET_DIR;
    1352:	9903      	ldr	r1, [sp, #12]
    1354:	4311      	orrs	r1, r2
    1356:	9103      	str	r1, [sp, #12]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1358:	7b22      	ldrb	r2, [r4, #12]
    135a:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    135c:	7ae2      	ldrb	r2, [r4, #11]
    135e:	9207      	str	r2, [sp, #28]
    1360:	2200      	movs	r2, #0
    1362:	4694      	mov	ip, r2
		if (cfg->capture_channel >= cc_num) {
    1364:	7a5f      	ldrb	r7, [r3, #9]
    1366:	2f03      	cmp	r7, #3
    1368:	d8c1      	bhi.n	12ee <tcc_init+0x32>
		if (cfg->filter_value > 0xF) {
    136a:	7819      	ldrb	r1, [r3, #0]
    136c:	290f      	cmp	r1, #15
    136e:	d8be      	bhi.n	12ee <tcc_init+0x32>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1370:	20f0      	movs	r0, #240	; 0xf0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1372:	785a      	ldrb	r2, [r3, #1]
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1374:	0500      	lsls	r0, r0, #20
    1376:	0609      	lsls	r1, r1, #24
    1378:	4001      	ands	r1, r0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    137a:	0412      	lsls	r2, r2, #16
    137c:	430a      	orrs	r2, r1
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    137e:	7899      	ldrb	r1, [r3, #2]
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1380:	9201      	str	r2, [sp, #4]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1382:	1e48      	subs	r0, r1, #1
    1384:	4181      	sbcs	r1, r0
    1386:	01c9      	lsls	r1, r1, #7
    1388:	9104      	str	r1, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    138a:	78d9      	ldrb	r1, [r3, #3]
				| TCC_FCTRLA_SRC(cfg->source)
    138c:	2203      	movs	r2, #3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    138e:	1e48      	subs	r0, r1, #1
    1390:	4181      	sbcs	r1, r0
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1392:	7918      	ldrb	r0, [r3, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1394:	00c9      	lsls	r1, r1, #3
    1396:	9105      	str	r1, [sp, #20]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1398:	1e41      	subs	r1, r0, #1
    139a:	4188      	sbcs	r0, r1
    139c:	0101      	lsls	r1, r0, #4
				| TCC_FCTRLA_BLANK(cfg->blanking)
    139e:	2060      	movs	r0, #96	; 0x60
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    13a0:	9108      	str	r1, [sp, #32]
				| TCC_FCTRLA_BLANK(cfg->blanking)
    13a2:	7999      	ldrb	r1, [r3, #6]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    13a4:	02bf      	lsls	r7, r7, #10
				| TCC_FCTRLA_BLANK(cfg->blanking)
    13a6:	0149      	lsls	r1, r1, #5
    13a8:	4001      	ands	r1, r0
				| TCC_FCTRLA_SRC(cfg->source)
    13aa:	7958      	ldrb	r0, [r3, #5]
    13ac:	4010      	ands	r0, r2
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    13ae:	9a01      	ldr	r2, [sp, #4]
    13b0:	4302      	orrs	r2, r0
    13b2:	430a      	orrs	r2, r1
				| TCC_FCTRLA_HALT(cfg->halt_action)
    13b4:	21c0      	movs	r1, #192	; 0xc0
    13b6:	79d8      	ldrb	r0, [r3, #7]
    13b8:	0089      	lsls	r1, r1, #2
    13ba:	0200      	lsls	r0, r0, #8
    13bc:	4001      	ands	r1, r0
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    13be:	20e0      	movs	r0, #224	; 0xe0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    13c0:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    13c2:	7a1a      	ldrb	r2, [r3, #8]
    13c4:	01c0      	lsls	r0, r0, #7
    13c6:	0312      	lsls	r2, r2, #12
    13c8:	4002      	ands	r2, r0
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    13ca:	20c0      	movs	r0, #192	; 0xc0
    13cc:	0100      	lsls	r0, r0, #4
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    13ce:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    13d0:	4007      	ands	r7, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    13d2:	430f      	orrs	r7, r1
		value_buffer[i] = fault;
    13d4:	4661      	mov	r1, ip
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    13d6:	9a04      	ldr	r2, [sp, #16]
    13d8:	330a      	adds	r3, #10
    13da:	4317      	orrs	r7, r2
    13dc:	9a05      	ldr	r2, [sp, #20]
    13de:	4317      	orrs	r7, r2
    13e0:	9a08      	ldr	r2, [sp, #32]
    13e2:	4317      	orrs	r7, r2
		value_buffer[i] = fault;
    13e4:	aa0c      	add	r2, sp, #48	; 0x30
    13e6:	508f      	str	r7, [r1, r2]
    13e8:	2204      	movs	r2, #4
    13ea:	4494      	add	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    13ec:	4662      	mov	r2, ip
    13ee:	2a08      	cmp	r2, #8
    13f0:	d1b8      	bne.n	1364 <tcc_init+0xa8>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13f2:	2280      	movs	r2, #128	; 0x80
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    13f4:	2300      	movs	r3, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13f6:	0252      	lsls	r2, r2, #9
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    13f8:	2002      	movs	r0, #2
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13fa:	4694      	mov	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    13fc:	9301      	str	r3, [sp, #4]
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    13fe:	30ff      	adds	r0, #255	; 0xff
    1400:	18e2      	adds	r2, r4, r3
		if (config->wave_ext.invert[i]) {
    1402:	0017      	movs	r7, r2
    1404:	3750      	adds	r7, #80	; 0x50
    1406:	783f      	ldrb	r7, [r7, #0]
    1408:	2f00      	cmp	r7, #0
    140a:	d004      	beq.n	1416 <tcc_init+0x15a>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    140c:	4667      	mov	r7, ip
    140e:	409f      	lsls	r7, r3
    1410:	9901      	ldr	r1, [sp, #4]
    1412:	4339      	orrs	r1, r7
    1414:	9101      	str	r1, [sp, #4]
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1416:	001f      	movs	r7, r3
    1418:	3741      	adds	r7, #65	; 0x41
    141a:	5dd2      	ldrb	r2, [r2, r7]
    141c:	2a00      	cmp	r2, #0
    141e:	d007      	beq.n	1430 <tcc_init+0x174>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    1420:	2a02      	cmp	r2, #2
    1422:	d000      	beq.n	1426 <tcc_init+0x16a>
    1424:	e098      	b.n	1558 <tcc_init+0x29c>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1426:	0002      	movs	r2, r0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1428:	409a      	lsls	r2, r3
    142a:	9901      	ldr	r1, [sp, #4]
    142c:	4311      	orrs	r1, r2
    142e:	9101      	str	r1, [sp, #4]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1430:	3301      	adds	r3, #1
    1432:	2b08      	cmp	r3, #8
    1434:	d1e4      	bne.n	1400 <tcc_init+0x144>
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1436:	2230      	movs	r2, #48	; 0x30
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1438:	2107      	movs	r1, #7
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    143a:	7e63      	ldrb	r3, [r4, #25]
    143c:	011b      	lsls	r3, r3, #4
    143e:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1440:	7e22      	ldrb	r2, [r4, #24]
    1442:	400a      	ands	r2, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1444:	4313      	orrs	r3, r2
			wave |= (TCC_WAVE_POL0 << n);
    1446:	2280      	movs	r2, #128	; 0x80
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1448:	9304      	str	r3, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    144a:	2300      	movs	r3, #0
			wave |= (TCC_WAVE_POL0 << n);
    144c:	0252      	lsls	r2, r2, #9
		if (wav_cfg->wave_polarity[n]) {
    144e:	18e1      	adds	r1, r4, r3
    1450:	7d09      	ldrb	r1, [r1, #20]
    1452:	2900      	cmp	r1, #0
    1454:	d004      	beq.n	1460 <tcc_init+0x1a4>
			wave |= (TCC_WAVE_POL0 << n);
    1456:	0011      	movs	r1, r2
    1458:	4099      	lsls	r1, r3
    145a:	9804      	ldr	r0, [sp, #16]
    145c:	4308      	orrs	r0, r1
    145e:	9004      	str	r0, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1460:	3301      	adds	r3, #1
    1462:	2b04      	cmp	r3, #4
    1464:	d1f3      	bne.n	144e <tcc_init+0x192>
    1466:	0031      	movs	r1, r6
		module_inst->callback[i] = NULL;
    1468:	2300      	movs	r3, #0
    146a:	1d32      	adds	r2, r6, #4
    146c:	3134      	adds	r1, #52	; 0x34
    146e:	c208      	stmia	r2!, {r3}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1470:	428a      	cmp	r2, r1
    1472:	d1fc      	bne.n	146e <tcc_init+0x1b2>
	module_inst->register_callback_mask = 0;
    1474:	6373      	str	r3, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1476:	63b3      	str	r3, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1478:	9b09      	ldr	r3, [sp, #36]	; 0x24
	gclk_chan_config.source_generator = config->counter.clock_source;
    147a:	aa0a      	add	r2, sp, #40	; 0x28
	_tcc_instances[module_index] = module_inst;
    147c:	0098      	lsls	r0, r3, #2
    147e:	4b39      	ldr	r3, [pc, #228]	; (1564 <tcc_init+0x2a8>)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1480:	0011      	movs	r1, r2
	_tcc_instances[module_index] = module_inst;
    1482:	50c6      	str	r6, [r0, r3]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1484:	0023      	movs	r3, r4
	module_inst->hw = hw;
    1486:	6035      	str	r5, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1488:	33a0      	adds	r3, #160	; 0xa0
    148a:	781b      	ldrb	r3, [r3, #0]
    148c:	363c      	adds	r6, #60	; 0x3c
    148e:	7033      	strb	r3, [r6, #0]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1490:	7aa3      	ldrb	r3, [r4, #10]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1492:	2011      	movs	r0, #17
	gclk_chan_config.source_generator = config->counter.clock_source;
    1494:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1496:	f7ff fdf1 	bl	107c <system_gclk_chan_set_config>
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    149a:	2011      	movs	r0, #17
    149c:	f7ff fdb2 	bl	1004 <system_gclk_chan_enable>
    14a0:	0023      	movs	r3, r4
    14a2:	0027      	movs	r7, r4
    14a4:	0026      	movs	r6, r4
    14a6:	3378      	adds	r3, #120	; 0x78
    14a8:	3798      	adds	r7, #152	; 0x98
    14aa:	3658      	adds	r6, #88	; 0x58
    14ac:	9305      	str	r3, [sp, #20]
		if (!config->pins.enable_wave_out_pin[i]) {
    14ae:	783b      	ldrb	r3, [r7, #0]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d00d      	beq.n	14d0 <tcc_init+0x214>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14b4:	2301      	movs	r3, #1
    14b6:	a90b      	add	r1, sp, #44	; 0x2c
    14b8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    14ba:	2300      	movs	r3, #0
    14bc:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    14be:	3320      	adds	r3, #32
    14c0:	18f3      	adds	r3, r6, r3
    14c2:	781b      	ldrb	r3, [r3, #0]
		system_pinmux_pin_set_config(
    14c4:	7830      	ldrb	r0, [r6, #0]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    14c6:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    14c8:	2301      	movs	r3, #1
    14ca:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    14cc:	f7ff fe38 	bl	1140 <system_pinmux_pin_set_config>
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    14d0:	9b05      	ldr	r3, [sp, #20]
    14d2:	3604      	adds	r6, #4
    14d4:	3701      	adds	r7, #1
    14d6:	42b3      	cmp	r3, r6
    14d8:	d1e9      	bne.n	14ae <tcc_init+0x1f2>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    14da:	9b06      	ldr	r3, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    14dc:	9a07      	ldr	r2, [sp, #28]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    14de:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    14e0:	0212      	lsls	r2, r2, #8
    14e2:	4313      	orrs	r3, r2
    14e4:	9a02      	ldr	r2, [sp, #8]
    14e6:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    14e8:	602b      	str	r3, [r5, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    14ea:	2304      	movs	r3, #4
    14ec:	68aa      	ldr	r2, [r5, #8]
    14ee:	421a      	tst	r2, r3
    14f0:	d1fc      	bne.n	14ec <tcc_init+0x230>
	hw->CTRLBCLR.reg = 0xFF;
    14f2:	23ff      	movs	r3, #255	; 0xff
    14f4:	712b      	strb	r3, [r5, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    14f6:	3bfb      	subs	r3, #251	; 0xfb
    14f8:	68aa      	ldr	r2, [r5, #8]
    14fa:	421a      	tst	r2, r3
    14fc:	d1fc      	bne.n	14f8 <tcc_init+0x23c>
	hw->CTRLBSET.reg = ctrlb;
    14fe:	466b      	mov	r3, sp
    1500:	7b1b      	ldrb	r3, [r3, #12]
    1502:	716b      	strb	r3, [r5, #5]
	hw->FCTRLA.reg = faults[0];
    1504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1506:	60eb      	str	r3, [r5, #12]
	hw->FCTRLB.reg = faults[1];
    1508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    150a:	612b      	str	r3, [r5, #16]
	hw->DRVCTRL.reg = drvctrl;
    150c:	9b01      	ldr	r3, [sp, #4]
    150e:	61ab      	str	r3, [r5, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    1510:	4b15      	ldr	r3, [pc, #84]	; (1568 <tcc_init+0x2ac>)
    1512:	68aa      	ldr	r2, [r5, #8]
    1514:	421a      	tst	r2, r3
    1516:	d1fc      	bne.n	1512 <tcc_init+0x256>
	hw->WAVE.reg = waves[0];
    1518:	9b04      	ldr	r3, [sp, #16]
    151a:	63eb      	str	r3, [r5, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    151c:	2310      	movs	r3, #16
    151e:	68aa      	ldr	r2, [r5, #8]
    1520:	421a      	tst	r2, r3
    1522:	d1fc      	bne.n	151e <tcc_init+0x262>
	hw->COUNT.reg = config->counter.count;
    1524:	6823      	ldr	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1526:	4a11      	ldr	r2, [pc, #68]	; (156c <tcc_init+0x2b0>)
	hw->COUNT.reg = config->counter.count;
    1528:	636b      	str	r3, [r5, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    152a:	68ab      	ldr	r3, [r5, #8]
    152c:	4013      	ands	r3, r2
    152e:	d1fc      	bne.n	152a <tcc_init+0x26e>
	hw->PER.reg = (config->counter.period);
    1530:	6862      	ldr	r2, [r4, #4]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1532:	490f      	ldr	r1, [pc, #60]	; (1570 <tcc_init+0x2b4>)
	hw->PER.reg = (config->counter.period);
    1534:	642a      	str	r2, [r5, #64]	; 0x40
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1536:	000a      	movs	r2, r1
    1538:	409a      	lsls	r2, r3
		while (hw->SYNCBUSY.reg & (
    153a:	68a8      	ldr	r0, [r5, #8]
    153c:	4010      	ands	r0, r2
    153e:	d1fc      	bne.n	153a <tcc_init+0x27e>
		hw->CC[i].reg = (config->compare.match[i]);
    1540:	009a      	lsls	r2, r3, #2
    1542:	18a2      	adds	r2, r4, r2
    1544:	69d6      	ldr	r6, [r2, #28]
    1546:	001a      	movs	r2, r3
    1548:	3210      	adds	r2, #16
    154a:	0092      	lsls	r2, r2, #2
    154c:	18aa      	adds	r2, r5, r2
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    154e:	3301      	adds	r3, #1
		hw->CC[i].reg = (config->compare.match[i]);
    1550:	6056      	str	r6, [r2, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1552:	2b04      	cmp	r3, #4
    1554:	d1ef      	bne.n	1536 <tcc_init+0x27a>
    1556:	e6cb      	b.n	12f0 <tcc_init+0x34>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1558:	2201      	movs	r2, #1
    155a:	e765      	b.n	1428 <tcc_init+0x16c>
    155c:	40000400 	.word	0x40000400
    1560:	00ffffff 	.word	0x00ffffff
    1564:	2000017c 	.word	0x2000017c
    1568:	00020040 	.word	0x00020040
    156c:	00040080 	.word	0x00040080
    1570:	00080100 	.word	0x00080100

00001574 <tcc_set_compare_value>:
		const uint32_t compare)
{
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1574:	0003      	movs	r3, r0
{
    1576:	b510      	push	{r4, lr}
	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1578:	333c      	adds	r3, #60	; 0x3c
    157a:	781b      	ldrb	r3, [r3, #0]
    157c:	6800      	ldr	r0, [r0, #0]
    157e:	f7ff fe03 	bl	1188 <_tcc_set_compare_value.isra.5>
			module_inst->double_buffering_enabled);
}
    1582:	bd10      	pop	{r4, pc}

00001584 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1586:	2500      	movs	r5, #0
	struct tcc_module *module =
    1588:	4b0b      	ldr	r3, [pc, #44]	; (15b8 <_tcc_interrupt_handler+0x34>)
    158a:	0080      	lsls	r0, r0, #2
    158c:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    158e:	6823      	ldr	r3, [r4, #0]
    1590:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1592:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1594:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1596:	4013      	ands	r3, r2
    1598:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    159a:	4b08      	ldr	r3, [pc, #32]	; (15bc <_tcc_interrupt_handler+0x38>)
    159c:	58ef      	ldr	r7, [r5, r3]
    159e:	4237      	tst	r7, r6
    15a0:	d005      	beq.n	15ae <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    15a2:	1963      	adds	r3, r4, r5
    15a4:	685b      	ldr	r3, [r3, #4]
    15a6:	0020      	movs	r0, r4
    15a8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    15aa:	6823      	ldr	r3, [r4, #0]
    15ac:	62df      	str	r7, [r3, #44]	; 0x2c
    15ae:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    15b0:	2d30      	cmp	r5, #48	; 0x30
    15b2:	d1f2      	bne.n	159a <_tcc_interrupt_handler+0x16>
		}
	}
}
    15b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	2000017c 	.word	0x2000017c
    15bc:	00003bb0 	.word	0x00003bb0

000015c0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    15c0:	b510      	push	{r4, lr}
    15c2:	2000      	movs	r0, #0
    15c4:	f7ff ffde 	bl	1584 <_tcc_interrupt_handler>
    15c8:	bd10      	pop	{r4, pc}

000015ca <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    15ca:	1c93      	adds	r3, r2, #2
    15cc:	009b      	lsls	r3, r3, #2
    15ce:	5019      	str	r1, [r3, r0]
    15d0:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    15d2:	2a02      	cmp	r2, #2
    15d4:	d104      	bne.n	15e0 <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    15d6:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    15d8:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    15da:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    15dc:	2000      	movs	r0, #0
    15de:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    15e0:	2a03      	cmp	r2, #3
    15e2:	d101      	bne.n	15e8 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    15e4:	321d      	adds	r2, #29
    15e6:	e7f7      	b.n	15d8 <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    15e8:	2101      	movs	r1, #1
    15ea:	4091      	lsls	r1, r2
    15ec:	430b      	orrs	r3, r1
    15ee:	e7f4      	b.n	15da <tc_register_callback+0x10>

000015f0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    15f0:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    15f2:	2601      	movs	r6, #1
	struct tc_module *module
    15f4:	4b14      	ldr	r3, [pc, #80]	; (1648 <_tc_interrupt_handler+0x58>)
    15f6:	0080      	lsls	r0, r0, #2
    15f8:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    15fa:	6823      	ldr	r3, [r4, #0]
    15fc:	7e22      	ldrb	r2, [r4, #24]
    15fe:	7e65      	ldrb	r5, [r4, #25]
    1600:	7b9b      	ldrb	r3, [r3, #14]
    1602:	4015      	ands	r5, r2
    1604:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1606:	4235      	tst	r5, r6
    1608:	d004      	beq.n	1614 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    160a:	68a3      	ldr	r3, [r4, #8]
    160c:	0020      	movs	r0, r4
    160e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1610:	6823      	ldr	r3, [r4, #0]
    1612:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1614:	2602      	movs	r6, #2
    1616:	4235      	tst	r5, r6
    1618:	d004      	beq.n	1624 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    161a:	68e3      	ldr	r3, [r4, #12]
    161c:	0020      	movs	r0, r4
    161e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1620:	6823      	ldr	r3, [r4, #0]
    1622:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1624:	2610      	movs	r6, #16
    1626:	4235      	tst	r5, r6
    1628:	d004      	beq.n	1634 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    162a:	6923      	ldr	r3, [r4, #16]
    162c:	0020      	movs	r0, r4
    162e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1630:	6823      	ldr	r3, [r4, #0]
    1632:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1634:	2620      	movs	r6, #32
    1636:	4235      	tst	r5, r6
    1638:	d004      	beq.n	1644 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    163a:	6963      	ldr	r3, [r4, #20]
    163c:	0020      	movs	r0, r4
    163e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1640:	6823      	ldr	r3, [r4, #0]
    1642:	739e      	strb	r6, [r3, #14]
	}
}
    1644:	bd70      	pop	{r4, r5, r6, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	20000180 	.word	0x20000180

0000164c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    164c:	b510      	push	{r4, lr}
    164e:	2000      	movs	r0, #0
    1650:	f7ff ffce 	bl	15f0 <_tc_interrupt_handler>
    1654:	bd10      	pop	{r4, pc}

00001656 <TC2_Handler>:
    1656:	b510      	push	{r4, lr}
    1658:	2001      	movs	r0, #1
    165a:	f7ff ffc9 	bl	15f0 <_tc_interrupt_handler>
    165e:	bd10      	pop	{r4, pc}

00001660 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1660:	4b06      	ldr	r3, [pc, #24]	; (167c <_tc_get_inst_index+0x1c>)
    1662:	4298      	cmp	r0, r3
    1664:	d007      	beq.n	1676 <_tc_get_inst_index+0x16>
    1666:	4a06      	ldr	r2, [pc, #24]	; (1680 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1668:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    166a:	4290      	cmp	r0, r2
    166c:	d101      	bne.n	1672 <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    166e:	3301      	adds	r3, #1
			return i;
    1670:	b2db      	uxtb	r3, r3
}
    1672:	0018      	movs	r0, r3
    1674:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1676:	2300      	movs	r3, #0
    1678:	e7fa      	b.n	1670 <_tc_get_inst_index+0x10>
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	42001800 	.word	0x42001800
    1680:	42001c00 	.word	0x42001c00

00001684 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1684:	b5f0      	push	{r4, r5, r6, r7, lr}
    1686:	0005      	movs	r5, r0
    1688:	b085      	sub	sp, #20
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    168a:	0008      	movs	r0, r1
{
    168c:	0014      	movs	r4, r2
    168e:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    1690:	f7ff ffe6 	bl	1660 <_tc_get_inst_index>

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1694:	466a      	mov	r2, sp
    1696:	2312      	movs	r3, #18
    1698:	7113      	strb	r3, [r2, #4]
    169a:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    169c:	332e      	adds	r3, #46	; 0x2e
    169e:	8113      	strh	r3, [r2, #8]
    16a0:	3340      	adds	r3, #64	; 0x40
    16a2:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    16a4:	2300      	movs	r3, #0
    16a6:	60ab      	str	r3, [r5, #8]
    16a8:	60eb      	str	r3, [r5, #12]
    16aa:	612b      	str	r3, [r5, #16]
    16ac:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    16ae:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    16b0:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    16b2:	4b7c      	ldr	r3, [pc, #496]	; (18a4 <tc_init+0x220>)
    16b4:	0082      	lsls	r2, r0, #2
    16b6:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    16b8:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    16ba:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    16bc:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    16be:	2b08      	cmp	r3, #8
    16c0:	d103      	bne.n	16ca <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    16c2:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    16c4:	07fa      	lsls	r2, r7, #31
    16c6:	d500      	bpl.n	16ca <tc_init+0x46>
    16c8:	e0d5      	b.n	1876 <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    16ca:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    16cc:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    16ce:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    16d0:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    16d2:	4213      	tst	r3, r2
    16d4:	d000      	beq.n	16d8 <tc_init+0x54>
    16d6:	e0ce      	b.n	1876 <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    16d8:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    16da:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    16dc:	06db      	lsls	r3, r3, #27
    16de:	d500      	bpl.n	16e2 <tc_init+0x5e>
    16e0:	e0c9      	b.n	1876 <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    16e2:	2102      	movs	r1, #2
    16e4:	8833      	ldrh	r3, [r6, #0]
    16e6:	400b      	ands	r3, r1
    16e8:	d000      	beq.n	16ec <tc_init+0x68>
    16ea:	e0c4      	b.n	1876 <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    16ec:	7c21      	ldrb	r1, [r4, #16]
    16ee:	2900      	cmp	r1, #0
    16f0:	d008      	beq.n	1704 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16f2:	a903      	add	r1, sp, #12
	config->powersave    = false;
    16f4:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    16f6:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    16f8:	7d20      	ldrb	r0, [r4, #20]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16fa:	708a      	strb	r2, [r1, #2]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    16fc:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    16fe:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    1700:	f7ff fd1e 	bl	1140 <system_pinmux_pin_set_config>
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1704:	7f23      	ldrb	r3, [r4, #28]
    1706:	2b00      	cmp	r3, #0
    1708:	d00e      	beq.n	1728 <tc_init+0xa4>
	config->powersave    = false;
    170a:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    170c:	2301      	movs	r3, #1
    170e:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1710:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1712:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1714:	708b      	strb	r3, [r1, #2]
    1716:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1718:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    171a:	331f      	adds	r3, #31
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    171c:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    171e:	18e3      	adds	r3, r4, r3
    1720:	7818      	ldrb	r0, [r3, #0]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1722:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    1724:	f7ff fd0c 	bl	1140 <system_pinmux_pin_set_config>
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1728:	007a      	lsls	r2, r7, #1
    172a:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    172c:	4668      	mov	r0, sp
    172e:	2208      	movs	r2, #8
    1730:	1880      	adds	r0, r0, r2
    1732:	4662      	mov	r2, ip
    1734:	4b5c      	ldr	r3, [pc, #368]	; (18a8 <tc_init+0x224>)
    1736:	5a82      	ldrh	r2, [r0, r2]
    1738:	6a19      	ldr	r1, [r3, #32]
    173a:	430a      	orrs	r2, r1
    173c:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    173e:	78a2      	ldrb	r2, [r4, #2]
    1740:	2a08      	cmp	r2, #8
    1742:	d10a      	bne.n	175a <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1744:	1c79      	adds	r1, r7, #1
    1746:	004a      	lsls	r2, r1, #1
    1748:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    174a:	2108      	movs	r1, #8
    174c:	466a      	mov	r2, sp
    174e:	1852      	adds	r2, r2, r1
    1750:	4661      	mov	r1, ip
    1752:	6a18      	ldr	r0, [r3, #32]
    1754:	5a52      	ldrh	r2, [r2, r1]
    1756:	4302      	orrs	r2, r0
    1758:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    175a:	466a      	mov	r2, sp
    175c:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    175e:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    1760:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1762:	466b      	mov	r3, sp
    1764:	3304      	adds	r3, #4
    1766:	5ddf      	ldrb	r7, [r3, r7]
    1768:	0038      	movs	r0, r7
    176a:	f7ff fc87 	bl	107c <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    176e:	0038      	movs	r0, r7
    1770:	f7ff fc48 	bl	1004 <system_gclk_chan_enable>

	/* Set ctrla register */
	ctrla_tmp =
    1774:	8923      	ldrh	r3, [r4, #8]
    1776:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    1778:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    177a:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    177c:	78a3      	ldrb	r3, [r4, #2]
    177e:	430b      	orrs	r3, r1
	ctrla_tmp =
    1780:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1782:	7862      	ldrb	r2, [r4, #1]
    1784:	2a00      	cmp	r2, #0
    1786:	d002      	beq.n	178e <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1788:	2280      	movs	r2, #128	; 0x80
    178a:	0112      	lsls	r2, r2, #4
    178c:	4313      	orrs	r3, r2
    178e:	6829      	ldr	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1790:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1792:	b252      	sxtb	r2, r2
    1794:	2a00      	cmp	r2, #0
    1796:	dbfb      	blt.n	1790 <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1798:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    179a:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    179c:	1e5a      	subs	r2, r3, #1
    179e:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    17a0:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    17a2:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    17a4:	2a00      	cmp	r2, #0
    17a6:	d001      	beq.n	17ac <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    17a8:	2201      	movs	r2, #1
    17aa:	4313      	orrs	r3, r2
    17ac:	6829      	ldr	r1, [r5, #0]
    17ae:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    17b0:	b252      	sxtb	r2, r2
    17b2:	2a00      	cmp	r2, #0
    17b4:	dbfb      	blt.n	17ae <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    17b6:	22ff      	movs	r2, #255	; 0xff
    17b8:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    17ba:	2b00      	cmp	r3, #0
    17bc:	d005      	beq.n	17ca <tc_init+0x146>
    17be:	6829      	ldr	r1, [r5, #0]
    17c0:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    17c2:	b252      	sxtb	r2, r2
    17c4:	2a00      	cmp	r2, #0
    17c6:	dbfb      	blt.n	17c0 <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    17c8:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    17ca:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    17cc:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    17ce:	2b00      	cmp	r3, #0
    17d0:	d001      	beq.n	17d6 <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    17d2:	2310      	movs	r3, #16
    17d4:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    17d6:	7b23      	ldrb	r3, [r4, #12]
    17d8:	2b00      	cmp	r3, #0
    17da:	d001      	beq.n	17e0 <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    17dc:	2320      	movs	r3, #32
    17de:	431a      	orrs	r2, r3
    17e0:	6829      	ldr	r1, [r5, #0]
    17e2:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    17e4:	b25b      	sxtb	r3, r3
    17e6:	2b00      	cmp	r3, #0
    17e8:	dbfb      	blt.n	17e2 <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    17ea:	71b2      	strb	r2, [r6, #6]
    17ec:	682b      	ldr	r3, [r5, #0]
    17ee:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    17f0:	b252      	sxtb	r2, r2
    17f2:	2a00      	cmp	r2, #0
    17f4:	dbfb      	blt.n	17ee <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    17f6:	792a      	ldrb	r2, [r5, #4]
    17f8:	2a04      	cmp	r2, #4
    17fa:	d019      	beq.n	1830 <tc_init+0x1ac>
    17fc:	2a08      	cmp	r2, #8
    17fe:	d03c      	beq.n	187a <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1800:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1802:	2a00      	cmp	r2, #0
    1804:	d137      	bne.n	1876 <tc_init+0x1f2>
    1806:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1808:	b252      	sxtb	r2, r2
    180a:	2a00      	cmp	r2, #0
    180c:	dbfb      	blt.n	1806 <tc_init+0x182>
				= config->counter_16_bit.value;
    180e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1810:	8233      	strh	r3, [r6, #16]
    1812:	682a      	ldr	r2, [r5, #0]
    1814:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1816:	b25b      	sxtb	r3, r3
    1818:	2b00      	cmp	r3, #0
    181a:	dbfb      	blt.n	1814 <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    181c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    181e:	8333      	strh	r3, [r6, #24]
    1820:	682a      	ldr	r2, [r5, #0]
    1822:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1824:	b25b      	sxtb	r3, r3
    1826:	2b00      	cmp	r3, #0
    1828:	dbfb      	blt.n	1822 <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    182a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    182c:	8373      	strh	r3, [r6, #26]
    182e:	e021      	b.n	1874 <tc_init+0x1f0>
    1830:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1832:	b252      	sxtb	r2, r2
    1834:	2a00      	cmp	r2, #0
    1836:	dbfb      	blt.n	1830 <tc_init+0x1ac>
					config->counter_8_bit.value;
    1838:	0023      	movs	r3, r4
    183a:	3328      	adds	r3, #40	; 0x28
    183c:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    183e:	7433      	strb	r3, [r6, #16]
    1840:	682a      	ldr	r2, [r5, #0]
    1842:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1844:	b25b      	sxtb	r3, r3
    1846:	2b00      	cmp	r3, #0
    1848:	dbfb      	blt.n	1842 <tc_init+0x1be>
					config->counter_8_bit.period;
    184a:	0023      	movs	r3, r4
    184c:	3329      	adds	r3, #41	; 0x29
    184e:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    1850:	7533      	strb	r3, [r6, #20]
    1852:	682a      	ldr	r2, [r5, #0]
    1854:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1856:	b25b      	sxtb	r3, r3
    1858:	2b00      	cmp	r3, #0
    185a:	dbfb      	blt.n	1854 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    185c:	0023      	movs	r3, r4
    185e:	332a      	adds	r3, #42	; 0x2a
    1860:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    1862:	7633      	strb	r3, [r6, #24]
    1864:	682a      	ldr	r2, [r5, #0]
    1866:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1868:	b25b      	sxtb	r3, r3
    186a:	2b00      	cmp	r3, #0
    186c:	dbfb      	blt.n	1866 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    186e:	342b      	adds	r4, #43	; 0x2b
    1870:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    1872:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    1874:	2000      	movs	r0, #0
}
    1876:	b005      	add	sp, #20
    1878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    187a:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    187c:	b252      	sxtb	r2, r2
    187e:	2a00      	cmp	r2, #0
    1880:	dbfb      	blt.n	187a <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1882:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1884:	6133      	str	r3, [r6, #16]
    1886:	682a      	ldr	r2, [r5, #0]
    1888:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    188a:	b25b      	sxtb	r3, r3
    188c:	2b00      	cmp	r3, #0
    188e:	dbfb      	blt.n	1888 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1892:	61b3      	str	r3, [r6, #24]
    1894:	682a      	ldr	r2, [r5, #0]
    1896:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1898:	b25b      	sxtb	r3, r3
    189a:	2b00      	cmp	r3, #0
    189c:	dbfb      	blt.n	1896 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    189e:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    18a0:	61f3      	str	r3, [r6, #28]
    18a2:	e7e7      	b.n	1874 <tc_init+0x1f0>
    18a4:	20000180 	.word	0x20000180
    18a8:	40000400 	.word	0x40000400

000018ac <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    18ac:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    18ae:	6804      	ldr	r4, [r0, #0]
    18b0:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    18b2:	b25b      	sxtb	r3, r3
    18b4:	2b00      	cmp	r3, #0
    18b6:	dbfb      	blt.n	18b0 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    18b8:	7903      	ldrb	r3, [r0, #4]
    18ba:	2b04      	cmp	r3, #4
    18bc:	d00c      	beq.n	18d8 <tc_set_compare_value+0x2c>
    18be:	2b08      	cmp	r3, #8
    18c0:	d012      	beq.n	18e8 <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    18c2:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    18c4:	2b00      	cmp	r3, #0
    18c6:	d10e      	bne.n	18e6 <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    18c8:	2017      	movs	r0, #23
			if (channel_index <
    18ca:	2901      	cmp	r1, #1
    18cc:	d80b      	bhi.n	18e6 <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    18ce:	310c      	adds	r1, #12
						(uint16_t)compare;
    18d0:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    18d2:	0049      	lsls	r1, r1, #1
    18d4:	530a      	strh	r2, [r1, r4]
    18d6:	e005      	b.n	18e4 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    18d8:	2017      	movs	r0, #23
			if (channel_index <
    18da:	2901      	cmp	r1, #1
    18dc:	d803      	bhi.n	18e6 <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    18de:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    18e0:	1861      	adds	r1, r4, r1
    18e2:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    18e4:	2000      	movs	r0, #0
}
    18e6:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    18e8:	2017      	movs	r0, #23
			if (channel_index <
    18ea:	2901      	cmp	r1, #1
    18ec:	d8fb      	bhi.n	18e6 <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    18ee:	3106      	adds	r1, #6
    18f0:	0089      	lsls	r1, r1, #2
    18f2:	510a      	str	r2, [r1, r4]
    18f4:	e7f6      	b.n	18e4 <tc_set_compare_value+0x38>

000018f6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18f6:	e7fe      	b.n	18f6 <Dummy_Handler>

000018f8 <Reset_Handler>:
        if (pSrc != pDest) {
    18f8:	4821      	ldr	r0, [pc, #132]	; (1980 <Reset_Handler+0x88>)
    18fa:	4922      	ldr	r1, [pc, #136]	; (1984 <Reset_Handler+0x8c>)
{
    18fc:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    18fe:	4288      	cmp	r0, r1
    1900:	d004      	beq.n	190c <Reset_Handler+0x14>
    1902:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1904:	4c20      	ldr	r4, [pc, #128]	; (1988 <Reset_Handler+0x90>)
    1906:	18ca      	adds	r2, r1, r3
    1908:	42a2      	cmp	r2, r4
    190a:	d332      	bcc.n	1972 <Reset_Handler+0x7a>
                *pDest++ = 0;
    190c:	2100      	movs	r1, #0
    190e:	4b1f      	ldr	r3, [pc, #124]	; (198c <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1910:	4a1f      	ldr	r2, [pc, #124]	; (1990 <Reset_Handler+0x98>)
    1912:	4293      	cmp	r3, r2
    1914:	d331      	bcc.n	197a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1916:	21ff      	movs	r1, #255	; 0xff
    1918:	4b1e      	ldr	r3, [pc, #120]	; (1994 <Reset_Handler+0x9c>)
    191a:	4a1f      	ldr	r2, [pc, #124]	; (1998 <Reset_Handler+0xa0>)
    191c:	438b      	bics	r3, r1
    191e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1920:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1922:	250c      	movs	r5, #12
    1924:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1926:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1928:	4b1c      	ldr	r3, [pc, #112]	; (199c <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    192a:	481d      	ldr	r0, [pc, #116]	; (19a0 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    192c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    192e:	78c3      	ldrb	r3, [r0, #3]
    1930:	39fc      	subs	r1, #252	; 0xfc
    1932:	438b      	bics	r3, r1
    1934:	4313      	orrs	r3, r2
    1936:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1938:	78c3      	ldrb	r3, [r0, #3]
    193a:	43ab      	bics	r3, r5
    193c:	4323      	orrs	r3, r4
    193e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1940:	4b18      	ldr	r3, [pc, #96]	; (19a4 <Reset_Handler+0xac>)
    1942:	7b98      	ldrb	r0, [r3, #14]
    1944:	43b0      	bics	r0, r6
    1946:	0006      	movs	r6, r0
    1948:	2020      	movs	r0, #32
    194a:	4330      	orrs	r0, r6
    194c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    194e:	7b98      	ldrb	r0, [r3, #14]
    1950:	43a8      	bics	r0, r5
    1952:	4304      	orrs	r4, r0
    1954:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1956:	7b98      	ldrb	r0, [r3, #14]
    1958:	4388      	bics	r0, r1
    195a:	4302      	orrs	r2, r0
    195c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    195e:	2380      	movs	r3, #128	; 0x80
    1960:	4a11      	ldr	r2, [pc, #68]	; (19a8 <Reset_Handler+0xb0>)
    1962:	6851      	ldr	r1, [r2, #4]
    1964:	430b      	orrs	r3, r1
    1966:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1968:	f002 f8f0 	bl	3b4c <__libc_init_array>
        main();
    196c:	f000 fbec 	bl	2148 <main>
    1970:	e7fe      	b.n	1970 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1972:	58c5      	ldr	r5, [r0, r3]
    1974:	3304      	adds	r3, #4
    1976:	6015      	str	r5, [r2, #0]
    1978:	e7c5      	b.n	1906 <Reset_Handler+0xe>
                *pDest++ = 0;
    197a:	c302      	stmia	r3!, {r1}
    197c:	e7c9      	b.n	1912 <Reset_Handler+0x1a>
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	00003c84 	.word	0x00003c84
    1984:	20000000 	.word	0x20000000
    1988:	20000020 	.word	0x20000020
    198c:	20000020 	.word	0x20000020
    1990:	200001e8 	.word	0x200001e8
    1994:	00000000 	.word	0x00000000
    1998:	e000ed00 	.word	0xe000ed00
    199c:	410070fc 	.word	0x410070fc
    19a0:	41005000 	.word	0x41005000
    19a4:	41004800 	.word	0x41004800
    19a8:	41004000 	.word	0x41004000

000019ac <set_color_green>:
static uint8_t buffer_reset_low_routine_flash_period[DATA_LENGTH_PRIMARY]		=	{0x05,0x00};
	
static uint8_t buffer_set_low_routine_trise_tfall[DATA_LENGTH_PRIMARY]			=	{0x02,0x2D};


void set_color_green(void){
    19ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	struct i2c_master_packet packet = {
    19ae:	ac01      	add	r4, sp, #4
    19b0:	220c      	movs	r2, #12
    19b2:	2100      	movs	r1, #0
    19b4:	0020      	movs	r0, r4
    19b6:	f002 f8ed 	bl	3b94 <memset>
    19ba:	2331      	movs	r3, #49	; 0x31
    19bc:	8023      	strh	r3, [r4, #0]
    19be:	3b2f      	subs	r3, #47	; 0x2f
    19c0:	8063      	strh	r3, [r4, #2]
    19c2:	4b04      	ldr	r3, [pc, #16]	; (19d4 <set_color_green+0x28>)
    19c4:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_green,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    19c6:	0021      	movs	r1, r4
    19c8:	4803      	ldr	r0, [pc, #12]	; (19d8 <set_color_green+0x2c>)
    19ca:	f7fe fe99 	bl	700 <i2c_master_write_packet_wait>
    19ce:	2800      	cmp	r0, #0
    19d0:	d1f9      	bne.n	19c6 <set_color_green+0x1a>
	{
	}
	
}
    19d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    19d4:	20000005 	.word	0x20000005
    19d8:	20000188 	.word	0x20000188

000019dc <set_color_red>:

void set_color_red(void){
    19dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    19de:	ac01      	add	r4, sp, #4
    19e0:	220c      	movs	r2, #12
    19e2:	2100      	movs	r1, #0
    19e4:	0020      	movs	r0, r4
    19e6:	f002 f8d5 	bl	3b94 <memset>
    19ea:	2331      	movs	r3, #49	; 0x31
    19ec:	8023      	strh	r3, [r4, #0]
    19ee:	3b2f      	subs	r3, #47	; 0x2f
    19f0:	8063      	strh	r3, [r4, #2]
    19f2:	4b04      	ldr	r3, [pc, #16]	; (1a04 <set_color_red+0x28>)
    19f4:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_red,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    19f6:	0021      	movs	r1, r4
    19f8:	4803      	ldr	r0, [pc, #12]	; (1a08 <set_color_red+0x2c>)
    19fa:	f7fe fe81 	bl	700 <i2c_master_write_packet_wait>
    19fe:	2800      	cmp	r0, #0
    1a00:	d1f9      	bne.n	19f6 <set_color_red+0x1a>
	{
	}
}
    1a02:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1a04:	20000009 	.word	0x20000009
    1a08:	20000188 	.word	0x20000188

00001a0c <set_color_blue>:

void set_color_blue(void){
    1a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_master_packet packet = {
    1a0e:	ac01      	add	r4, sp, #4
    1a10:	220c      	movs	r2, #12
    1a12:	2100      	movs	r1, #0
    1a14:	0020      	movs	r0, r4
    1a16:	f002 f8bd 	bl	3b94 <memset>
    1a1a:	2331      	movs	r3, #49	; 0x31
    1a1c:	8023      	strh	r3, [r4, #0]
    1a1e:	3b2f      	subs	r3, #47	; 0x2f
    1a20:	8063      	strh	r3, [r4, #2]
    1a22:	4b04      	ldr	r3, [pc, #16]	; (1a34 <set_color_blue+0x28>)
    1a24:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_blue,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1a26:	0021      	movs	r1, r4
    1a28:	4803      	ldr	r0, [pc, #12]	; (1a38 <set_color_blue+0x2c>)
    1a2a:	f7fe fe69 	bl	700 <i2c_master_write_packet_wait>
    1a2e:	2800      	cmp	r0, #0
    1a30:	d1f9      	bne.n	1a26 <set_color_blue+0x1a>
	{
	}
}
    1a32:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1a34:	20000001 	.word	0x20000001
    1a38:	20000188 	.word	0x20000188

00001a3c <set_color_yellow>:

void set_color_yellow(void){
    1a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1a3e:	ac01      	add	r4, sp, #4
    1a40:	220c      	movs	r2, #12
    1a42:	2100      	movs	r1, #0
    1a44:	0020      	movs	r0, r4
    1a46:	f002 f8a5 	bl	3b94 <memset>
    1a4a:	2331      	movs	r3, #49	; 0x31
    1a4c:	8023      	strh	r3, [r4, #0]
    1a4e:	3b2f      	subs	r3, #47	; 0x2f
    1a50:	8063      	strh	r3, [r4, #2]
    1a52:	4b04      	ldr	r3, [pc, #16]	; (1a64 <set_color_yellow+0x28>)
    1a54:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_yellow,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1a56:	0021      	movs	r1, r4
    1a58:	4803      	ldr	r0, [pc, #12]	; (1a68 <set_color_yellow+0x2c>)
    1a5a:	f7fe fe51 	bl	700 <i2c_master_write_packet_wait>
    1a5e:	2800      	cmp	r0, #0
    1a60:	d1f9      	bne.n	1a56 <set_color_yellow+0x1a>
	{
	}
}
    1a62:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1a64:	2000000d 	.word	0x2000000d
    1a68:	20000188 	.word	0x20000188

00001a6c <set_color_purple>:

void set_color_purple(void){
    1a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1a6e:	ac01      	add	r4, sp, #4
    1a70:	220c      	movs	r2, #12
    1a72:	2100      	movs	r1, #0
    1a74:	0020      	movs	r0, r4
    1a76:	f002 f88d 	bl	3b94 <memset>
    1a7a:	2331      	movs	r3, #49	; 0x31
    1a7c:	8023      	strh	r3, [r4, #0]
    1a7e:	3b2f      	subs	r3, #47	; 0x2f
    1a80:	8063      	strh	r3, [r4, #2]
    1a82:	4b04      	ldr	r3, [pc, #16]	; (1a94 <set_color_purple+0x28>)
    1a84:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_purple,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1a86:	0021      	movs	r1, r4
    1a88:	4803      	ldr	r0, [pc, #12]	; (1a98 <set_color_purple+0x2c>)
    1a8a:	f7fe fe39 	bl	700 <i2c_master_write_packet_wait>
    1a8e:	2800      	cmp	r0, #0
    1a90:	d1f9      	bne.n	1a86 <set_color_purple+0x1a>
	{
	}
}
    1a92:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1a94:	20000007 	.word	0x20000007
    1a98:	20000188 	.word	0x20000188

00001a9c <set_color_cyan>:

void set_color_cyan(void){
    1a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	struct i2c_master_packet packet = {
    1a9e:	ac01      	add	r4, sp, #4
    1aa0:	220c      	movs	r2, #12
    1aa2:	2100      	movs	r1, #0
    1aa4:	0020      	movs	r0, r4
    1aa6:	f002 f875 	bl	3b94 <memset>
    1aaa:	2331      	movs	r3, #49	; 0x31
    1aac:	8023      	strh	r3, [r4, #0]
    1aae:	3b2f      	subs	r3, #47	; 0x2f
    1ab0:	8063      	strh	r3, [r4, #2]
    1ab2:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <set_color_cyan+0x28>)
    1ab4:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_cyan,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1ab6:	0021      	movs	r1, r4
    1ab8:	4803      	ldr	r0, [pc, #12]	; (1ac8 <set_color_cyan+0x2c>)
    1aba:	f7fe fe21 	bl	700 <i2c_master_write_packet_wait>
    1abe:	2800      	cmp	r0, #0
    1ac0:	d1f9      	bne.n	1ab6 <set_color_cyan+0x1a>
	{
	}
}
    1ac2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1ac4:	20000003 	.word	0x20000003
    1ac8:	20000188 	.word	0x20000188

00001acc <set_color_white>:

void set_color_white(void){
    1acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1ace:	ac01      	add	r4, sp, #4
    1ad0:	220c      	movs	r2, #12
    1ad2:	2100      	movs	r1, #0
    1ad4:	0020      	movs	r0, r4
    1ad6:	f002 f85d 	bl	3b94 <memset>
    1ada:	2331      	movs	r3, #49	; 0x31
    1adc:	8023      	strh	r3, [r4, #0]
    1ade:	3b2f      	subs	r3, #47	; 0x2f
    1ae0:	8063      	strh	r3, [r4, #2]
    1ae2:	4b04      	ldr	r3, [pc, #16]	; (1af4 <set_color_white+0x28>)
    1ae4:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_white,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1ae6:	0021      	movs	r1, r4
    1ae8:	4803      	ldr	r0, [pc, #12]	; (1af8 <set_color_white+0x2c>)
    1aea:	f7fe fe09 	bl	700 <i2c_master_write_packet_wait>
    1aee:	2800      	cmp	r0, #0
    1af0:	d1f9      	bne.n	1ae6 <set_color_white+0x1a>
	{
	}
}
    1af2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1af4:	2000000b 	.word	0x2000000b
    1af8:	20000188 	.word	0x20000188

00001afc <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1afc:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1afe:	2364      	movs	r3, #100	; 0x64
	
}



void i2c_master_setup(void){
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	b08e      	sub	sp, #56	; 0x38
    1b04:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1b06:	0389      	lsls	r1, r1, #14
    1b08:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1b0a:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1b0c:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1b0e:	4b1e      	ldr	r3, [pc, #120]	; (1b88 <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    1b10:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1b12:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1b14:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    1b16:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1b18:	310a      	adds	r1, #10
    1b1a:	4469      	add	r1, sp
    1b1c:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1b1e:	a90c      	add	r1, sp, #48	; 0x30
    1b20:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1b22:	2131      	movs	r1, #49	; 0x31
    1b24:	4469      	add	r1, sp
    1b26:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    1b28:	2132      	movs	r1, #50	; 0x32
    1b2a:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1b2c:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    1b2e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1b30:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1b32:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1b34:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1b36:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    1b38:	700b      	strb	r3, [r1, #0]
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1b3a:	4e14      	ldr	r6, [pc, #80]	; (1b8c <i2c_master_setup+0x90>)
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1b3c:	33d7      	adds	r3, #215	; 0xd7
    1b3e:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c_master.buffer_timeout = 10000;
    1b40:	4b13      	ldr	r3, [pc, #76]	; (1b90 <i2c_master_setup+0x94>)
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1b42:	4914      	ldr	r1, [pc, #80]	; (1b94 <i2c_master_setup+0x98>)
    1b44:	0030      	movs	r0, r6
	config_i2c_master.buffer_timeout = 10000;
    1b46:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1b48:	f7fe fbf2 	bl	330 <i2c_master_init>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1b4c:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b4e:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1b50:	69ec      	ldr	r4, [r5, #28]
    1b52:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    1b54:	d1fc      	bne.n	1b50 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1b56:	2302      	movs	r3, #2
    1b58:	682a      	ldr	r2, [r5, #0]
    1b5a:	4313      	orrs	r3, r2
    1b5c:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1b5e:	6830      	ldr	r0, [r6, #0]
    1b60:	f7fe ffa6 	bl	ab0 <_sercom_get_interrupt_vector>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b64:	231f      	movs	r3, #31
    1b66:	4018      	ands	r0, r3
    1b68:	3b1e      	subs	r3, #30
    1b6a:	4083      	lsls	r3, r0
    1b6c:	4a0a      	ldr	r2, [pc, #40]	; (1b98 <i2c_master_setup+0x9c>)
    1b6e:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1b70:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1b72:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1b74:	8b69      	ldrh	r1, [r5, #26]
    1b76:	4211      	tst	r1, r2
    1b78:	d103      	bne.n	1b82 <i2c_master_setup+0x86>
		timeout_counter++;
    1b7a:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1b7c:	4284      	cmp	r4, r0
    1b7e:	d3f9      	bcc.n	1b74 <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1b80:	836a      	strh	r2, [r5, #26]
	i2c_master_enable(&i2c_master_instance);
	
}
    1b82:	b00e      	add	sp, #56	; 0x38
    1b84:	bd70      	pop	{r4, r5, r6, pc}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	00000d48 	.word	0x00000d48
    1b8c:	20000188 	.word	0x20000188
    1b90:	00002710 	.word	0x00002710
    1b94:	42001000 	.word	0x42001000
    1b98:	e000e100 	.word	0xe000e100

00001b9c <sys_tc_callback>:
	static int tick_count_50ms;
	static int tick_count_100ms;
	static int tick_count_200ms;
	
	
	tick_count_1ms++;
    1b9c:	4916      	ldr	r1, [pc, #88]	; (1bf8 <sys_tc_callback+0x5c>)
    1b9e:	680b      	ldr	r3, [r1, #0]
    1ba0:	1c5a      	adds	r2, r3, #1
    1ba2:	600a      	str	r2, [r1, #0]
    1ba4:	4b15      	ldr	r3, [pc, #84]	; (1bfc <sys_tc_callback+0x60>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
    1ba6:	2a09      	cmp	r2, #9
    1ba8:	dd07      	ble.n	1bba <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
    1baa:	681a      	ldr	r2, [r3, #0]
    1bac:	3201      	adds	r2, #1
    1bae:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
    1bb0:	2200      	movs	r2, #0
    1bb2:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
    1bb4:	2101      	movs	r1, #1
    1bb6:	4a12      	ldr	r2, [pc, #72]	; (1c00 <sys_tc_callback+0x64>)
    1bb8:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
    1bba:	6819      	ldr	r1, [r3, #0]
    1bbc:	4a11      	ldr	r2, [pc, #68]	; (1c04 <sys_tc_callback+0x68>)
    1bbe:	2904      	cmp	r1, #4
    1bc0:	dd04      	ble.n	1bcc <sys_tc_callback+0x30>
	{
		tick_count_50ms++;
    1bc2:	6811      	ldr	r1, [r2, #0]
    1bc4:	3101      	adds	r1, #1
    1bc6:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
    1bc8:	2100      	movs	r1, #0
    1bca:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
    1bcc:	6811      	ldr	r1, [r2, #0]
    1bce:	4b0e      	ldr	r3, [pc, #56]	; (1c08 <sys_tc_callback+0x6c>)
    1bd0:	2901      	cmp	r1, #1
    1bd2:	dd04      	ble.n	1bde <sys_tc_callback+0x42>
	{
		tick_count_100ms++;
    1bd4:	6819      	ldr	r1, [r3, #0]
    1bd6:	3101      	adds	r1, #1
    1bd8:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
    1bda:	2100      	movs	r1, #0
    1bdc:	6011      	str	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
    1bde:	681a      	ldr	r2, [r3, #0]
    1be0:	2a01      	cmp	r2, #1
    1be2:	dd08      	ble.n	1bf6 <sys_tc_callback+0x5a>
	{
		tick_count_200ms++;
    1be4:	4909      	ldr	r1, [pc, #36]	; (1c0c <sys_tc_callback+0x70>)
    1be6:	680a      	ldr	r2, [r1, #0]
    1be8:	3201      	adds	r2, #1
    1bea:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
    1bec:	2200      	movs	r2, #0
    1bee:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
    1bf0:	4b07      	ldr	r3, [pc, #28]	; (1c10 <sys_tc_callback+0x74>)
    1bf2:	3201      	adds	r2, #1
    1bf4:	701a      	strb	r2, [r3, #0]
	}
	
	
	
	
}
    1bf6:	4770      	bx	lr
    1bf8:	20000080 	.word	0x20000080
    1bfc:	2000007c 	.word	0x2000007c
    1c00:	20000071 	.word	0x20000071
    1c04:	20000088 	.word	0x20000088
    1c08:	20000078 	.word	0x20000078
    1c0c:	20000084 	.word	0x20000084
    1c10:	20000072 	.word	0x20000072

00001c14 <configure_port_pins>:
{
    1c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1c16:	2502      	movs	r5, #2
	config->direction  = PORT_PIN_DIR_INPUT;
    1c18:	2700      	movs	r7, #0
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1c1a:	2601      	movs	r6, #1
    1c1c:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1c1e:	0021      	movs	r1, r4
    1c20:	201b      	movs	r0, #27
    1c22:	7027      	strb	r7, [r4, #0]
	config->powersave  = false;
    1c24:	70a7      	strb	r7, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1c26:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1c28:	f7fe fb6e 	bl	308 <port_pin_set_config>
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1c2c:	0021      	movs	r1, r4
    1c2e:	2006      	movs	r0, #6
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1c30:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;						// START AT PULL DOWN.
    1c32:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1c34:	f7fe fb68 	bl	308 <port_pin_set_config>
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
    1c38:	0021      	movs	r1, r4
    1c3a:	2007      	movs	r0, #7
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1c3c:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL UP.
    1c3e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
    1c40:	f7fe fb62 	bl	308 <port_pin_set_config>
	port_pin_set_config(BUTTON_2, &config_port_pin);
    1c44:	0021      	movs	r1, r4
    1c46:	200f      	movs	r0, #15
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1c48:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1c4a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
    1c4c:	f7fe fb5c 	bl	308 <port_pin_set_config>
	port_pin_set_config(CHARGN_ON_PIN, &config_port_pin);
    1c50:	0021      	movs	r1, r4
    1c52:	200b      	movs	r0, #11
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1c54:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1c56:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(CHARGN_ON_PIN, &config_port_pin);
    1c58:	f7fe fb56 	bl	308 <port_pin_set_config>
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
    1c5c:	0021      	movs	r1, r4
    1c5e:	2003      	movs	r0, #3
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1c60:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1c62:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
    1c64:	f7fe fb50 	bl	308 <port_pin_set_config>
}
    1c68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00001c6c <configure_system_tc>:
{
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);
	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1c6c:	21a0      	movs	r1, #160	; 0xa0
{
    1c6e:	b510      	push	{r4, lr}
    1c70:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1c72:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1c74:	00c9      	lsls	r1, r1, #3
    1c76:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
    1c78:	212d      	movs	r1, #45	; 0x2d
    1c7a:	2300      	movs	r3, #0
    1c7c:	206f      	movs	r0, #111	; 0x6f
    1c7e:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    1c80:	8513      	strh	r3, [r2, #40]	; 0x28
    1c82:	7008      	strb	r0, [r1, #0]
	
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1c84:	2101      	movs	r1, #1
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
	
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1c86:	4c12      	ldr	r4, [pc, #72]	; (1cd0 <configure_system_tc+0x64>)
	config->clock_source               = GCLK_GENERATOR_0;
    1c88:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1c8a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1c8c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1c8e:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1c90:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1c92:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1c94:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1c96:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1c98:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1c9a:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1c9c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1c9e:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1ca0:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1ca2:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1ca4:	7411      	strb	r1, [r2, #16]
	config_tc.counter_size = TC_COUNTER_SIZE;
    1ca6:	3304      	adds	r3, #4
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
    1ca8:	310f      	adds	r1, #15
    1caa:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
    1cac:	6193      	str	r3, [r2, #24]
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1cae:	4909      	ldr	r1, [pc, #36]	; (1cd4 <configure_system_tc+0x68>)
    1cb0:	0020      	movs	r0, r4
	config_tc.counter_size = TC_COUNTER_SIZE;
    1cb2:	7093      	strb	r3, [r2, #2]
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1cb4:	f7ff fce6 	bl	1684 <tc_init>
    1cb8:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cba:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1cbc:	b252      	sxtb	r2, r2
    1cbe:	2a00      	cmp	r2, #0
    1cc0:	dbfb      	blt.n	1cba <configure_system_tc+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1cc2:	2202      	movs	r2, #2
    1cc4:	8819      	ldrh	r1, [r3, #0]
    1cc6:	430a      	orrs	r2, r1
    1cc8:	801a      	strh	r2, [r3, #0]
	tc_enable (&system_timer_instance);
}
    1cca:	b00e      	add	sp, #56	; 0x38
    1ccc:	bd10      	pop	{r4, pc}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	200001b0 	.word	0x200001b0
    1cd4:	42001800 	.word	0x42001800

00001cd8 <system_tc_callbacks>:

 void system_tc_callbacks (void)
{
    1cd8:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
    1cda:	4c0c      	ldr	r4, [pc, #48]	; (1d0c <system_tc_callbacks+0x34>)
    1cdc:	2200      	movs	r2, #0
    1cde:	490c      	ldr	r1, [pc, #48]	; (1d10 <system_tc_callbacks+0x38>)
    1ce0:	0020      	movs	r0, r4
    1ce2:	f7ff fc72 	bl	15ca <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1ce6:	6820      	ldr	r0, [r4, #0]
    1ce8:	f7ff fcba 	bl	1660 <_tc_get_inst_index>
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1cec:	4b09      	ldr	r3, [pc, #36]	; (1d14 <system_tc_callbacks+0x3c>)
    1cee:	5c1a      	ldrb	r2, [r3, r0]
    1cf0:	231f      	movs	r3, #31
    1cf2:	401a      	ands	r2, r3
    1cf4:	3b1e      	subs	r3, #30
    1cf6:	0019      	movs	r1, r3
    1cf8:	4091      	lsls	r1, r2
    1cfa:	4a07      	ldr	r2, [pc, #28]	; (1d18 <system_tc_callbacks+0x40>)
    1cfc:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1cfe:	7e62      	ldrb	r2, [r4, #25]
    1d00:	431a      	orrs	r2, r3
    1d02:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1d04:	6822      	ldr	r2, [r4, #0]
    1d06:	7353      	strb	r3, [r2, #13]
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback (&system_timer_instance, TC_CALLBACK_OVERFLOW);
}
    1d08:	bd10      	pop	{r4, pc}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	200001b0 	.word	0x200001b0
    1d10:	00001b9d 	.word	0x00001b9d
    1d14:	00003be0 	.word	0x00003be0
    1d18:	e000e100 	.word	0xe000e100

00001d1c <configure_pwm_generator>:
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);

	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1d1c:	21a0      	movs	r1, #160	; 0xa0
{
    1d1e:	b500      	push	{lr}
    1d20:	b08f      	sub	sp, #60	; 0x3c
	config->clock_source               = GCLK_GENERATOR_0;
    1d22:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1d24:	00c9      	lsls	r1, r1, #3
    1d26:	8091      	strh	r1, [r2, #4]

	config_tc.counter_8_bit.value = 0;
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
    1d28:	212d      	movs	r1, #45	; 0x2d
    1d2a:	2300      	movs	r3, #0
    1d2c:	2055      	movs	r0, #85	; 0x55
    1d2e:	4469      	add	r1, sp
	config->counter_16_bit.value                   = 0x0000;
    1d30:	8513      	strh	r3, [r2, #40]	; 0x28
    1d32:	7008      	strb	r0, [r1, #0]

	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
    1d34:	212e      	movs	r1, #46	; 0x2e
    1d36:	3840      	subs	r0, #64	; 0x40
    1d38:	4469      	add	r1, sp
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1d3a:	8553      	strh	r3, [r2, #42]	; 0x2a
    1d3c:	7008      	strb	r0, [r1, #0]

	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    1d3e:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
    1d40:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1d42:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1d44:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1d46:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1d48:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1d4a:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1d4c:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1d4e:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1d50:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1d52:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1d54:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1d56:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
    1d58:	3304      	adds	r3, #4
    1d5a:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    1d5c:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
    1d5e:	6193      	str	r3, [r2, #24]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
    1d60:	3936      	subs	r1, #54	; 0x36

	config_tc.pwm_channel[0].enabled = true;
    1d62:	3b03      	subs	r3, #3
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
    1d64:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].enabled = true;
    1d66:	7413      	strb	r3, [r2, #16]
	
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
    1d68:	4902      	ldr	r1, [pc, #8]	; (1d74 <configure_pwm_generator+0x58>)
    1d6a:	4803      	ldr	r0, [pc, #12]	; (1d78 <configure_pwm_generator+0x5c>)
    1d6c:	f7ff fc8a 	bl	1684 <tc_init>

	
}
    1d70:	b00f      	add	sp, #60	; 0x3c
    1d72:	bd00      	pop	{pc}
    1d74:	42001c00 	.word	0x42001c00
    1d78:	200001cc 	.word	0x200001cc

00001d7c <is_button_one_pressed>:
	return (port_base->IN.reg & pin_mask);
    1d7c:	4b12      	ldr	r3, [pc, #72]	; (1dc8 <is_button_one_pressed+0x4c>)
    1d7e:	4a13      	ldr	r2, [pc, #76]	; (1dcc <is_button_one_pressed+0x50>)
    1d80:	6a19      	ldr	r1, [r3, #32]
    1d82:	4b13      	ldr	r3, [pc, #76]	; (1dd0 <is_button_one_pressed+0x54>)


 bool is_button_one_pressed (void)
{

	if (!port_pin_get_input_level (BUTTON_1))
    1d84:	0449      	lsls	r1, r1, #17
    1d86:	d416      	bmi.n	1db6 <is_button_one_pressed+0x3a>
	{
		BUTTON_ONE_PRESS_STATUS = true;
		press_B1_delay_count--;
    1d88:	6819      	ldr	r1, [r3, #0]
    1d8a:	3901      	subs	r1, #1
    1d8c:	6019      	str	r1, [r3, #0]
		long_press_B1_delay_count--;
    1d8e:	6811      	ldr	r1, [r2, #0]
    1d90:	3901      	subs	r1, #1
		
	}else
	{
		BUTTON_ONE_PRESS_STATUS = false;
		press_B1_delay_count = DELAY_DEBOUNCE_CN;
		long_press_B1_delay_count = DELAY_PRESS_CN;
    1d92:	6011      	str	r1, [r2, #0]
		
	}
	
	// long press delay logic
	if (long_press_B1_delay_count <= 0){
    1d94:	6811      	ldr	r1, [r2, #0]
    1d96:	2900      	cmp	r1, #0
    1d98:	dc04      	bgt.n	1da4 <is_button_one_pressed+0x28>
		LongPressB1Flag = true;
    1d9a:	2001      	movs	r0, #1
    1d9c:	490d      	ldr	r1, [pc, #52]	; (1dd4 <is_button_one_pressed+0x58>)
    1d9e:	7008      	strb	r0, [r1, #0]
		long_press_B1_delay_count = 0 ;
    1da0:	2100      	movs	r1, #0
    1da2:	6011      	str	r1, [r2, #0]
    1da4:	2000      	movs	r0, #0
	}
	
	// debounce logic
	if (press_B1_delay_count <= 0)
    1da6:	6819      	ldr	r1, [r3, #0]
    1da8:	4a0b      	ldr	r2, [pc, #44]	; (1dd8 <is_button_one_pressed+0x5c>)
    1daa:	4281      	cmp	r1, r0
    1dac:	dc08      	bgt.n	1dc0 <is_button_one_pressed+0x44>
	{
		BUTTON_ONE_RELEASE_STATUS = false;
    1dae:	7010      	strb	r0, [r2, #0]
		press_B1_delay_count = 0;
    1db0:	6018      	str	r0, [r3, #0]
		return true;
    1db2:	3001      	adds	r0, #1
	else
	{
		BUTTON_ONE_RELEASE_STATUS = true;
		return false;
	}
}
    1db4:	4770      	bx	lr
		press_B1_delay_count = DELAY_DEBOUNCE_CN;
    1db6:	2102      	movs	r1, #2
    1db8:	6019      	str	r1, [r3, #0]
		long_press_B1_delay_count = DELAY_PRESS_CN;
    1dba:	318f      	adds	r1, #143	; 0x8f
    1dbc:	31ff      	adds	r1, #255	; 0xff
    1dbe:	e7e8      	b.n	1d92 <is_button_one_pressed+0x16>
		BUTTON_ONE_RELEASE_STATUS = true;
    1dc0:	2301      	movs	r3, #1
    1dc2:	7013      	strb	r3, [r2, #0]
		return false;
    1dc4:	e7f6      	b.n	1db4 <is_button_one_pressed+0x38>
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	41004400 	.word	0x41004400
    1dcc:	20000010 	.word	0x20000010
    1dd0:	20000018 	.word	0x20000018
    1dd4:	2000006c 	.word	0x2000006c
    1dd8:	20000069 	.word	0x20000069

00001ddc <is_button_two_pressed>:
    1ddc:	4b12      	ldr	r3, [pc, #72]	; (1e28 <is_button_two_pressed+0x4c>)
    1dde:	4a13      	ldr	r2, [pc, #76]	; (1e2c <is_button_two_pressed+0x50>)
    1de0:	6a19      	ldr	r1, [r3, #32]
    1de2:	4b13      	ldr	r3, [pc, #76]	; (1e30 <is_button_two_pressed+0x54>)


 bool is_button_two_pressed (void)
{

	if (!port_pin_get_input_level (BUTTON_2))
    1de4:	0409      	lsls	r1, r1, #16
    1de6:	d416      	bmi.n	1e16 <is_button_two_pressed+0x3a>
	{
		BUTTON_TWO_PRESS_STATUS = true;
		press_B2_delay_count--;
    1de8:	6819      	ldr	r1, [r3, #0]
    1dea:	3901      	subs	r1, #1
    1dec:	6019      	str	r1, [r3, #0]
		long_press_B2_delay_count--;
    1dee:	6811      	ldr	r1, [r2, #0]
    1df0:	3901      	subs	r1, #1
		
	}else
	{
		BUTTON_TWO_PRESS_STATUS = false;
		press_B2_delay_count = DELAY_DEBOUNCE_CN;
		long_press_B2_delay_count = DELAY_PRESS_CN;
    1df2:	6011      	str	r1, [r2, #0]
		
	}
	
	// long press delay logic
	if (long_press_B2_delay_count <= 0){
    1df4:	6811      	ldr	r1, [r2, #0]
    1df6:	2900      	cmp	r1, #0
    1df8:	dc04      	bgt.n	1e04 <is_button_two_pressed+0x28>
		LongPressB2Flag = true;
    1dfa:	2001      	movs	r0, #1
    1dfc:	490d      	ldr	r1, [pc, #52]	; (1e34 <is_button_two_pressed+0x58>)
    1dfe:	7008      	strb	r0, [r1, #0]
		long_press_B2_delay_count = 0 ;
    1e00:	2100      	movs	r1, #0
    1e02:	6011      	str	r1, [r2, #0]
    1e04:	2000      	movs	r0, #0
	}
	
	// debounce logic
	if (press_B2_delay_count <= 0)
    1e06:	6819      	ldr	r1, [r3, #0]
    1e08:	4a0b      	ldr	r2, [pc, #44]	; (1e38 <is_button_two_pressed+0x5c>)
    1e0a:	4281      	cmp	r1, r0
    1e0c:	dc08      	bgt.n	1e20 <is_button_two_pressed+0x44>
	{
		BUTTON_TWO_RELEASE_STATUS = false;
    1e0e:	7010      	strb	r0, [r2, #0]
		press_B2_delay_count = 0;
    1e10:	6018      	str	r0, [r3, #0]
		return true;
    1e12:	3001      	adds	r0, #1
	else
	{
		BUTTON_TWO_RELEASE_STATUS = true;
		return false;
	}
}
    1e14:	4770      	bx	lr
		press_B2_delay_count = DELAY_DEBOUNCE_CN;
    1e16:	2102      	movs	r1, #2
    1e18:	6019      	str	r1, [r3, #0]
		long_press_B2_delay_count = DELAY_PRESS_CN;
    1e1a:	318f      	adds	r1, #143	; 0x8f
    1e1c:	31ff      	adds	r1, #255	; 0xff
    1e1e:	e7e8      	b.n	1df2 <is_button_two_pressed+0x16>
		BUTTON_TWO_RELEASE_STATUS = true;
    1e20:	2301      	movs	r3, #1
    1e22:	7013      	strb	r3, [r2, #0]
		return false;
    1e24:	e7f6      	b.n	1e14 <is_button_two_pressed+0x38>
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	41004400 	.word	0x41004400
    1e2c:	20000014 	.word	0x20000014
    1e30:	2000001c 	.word	0x2000001c
    1e34:	2000006d 	.word	0x2000006d
    1e38:	2000006a 	.word	0x2000006a

00001e3c <pwm_motor_cleanup>:


void pwm_motor_cleanup(void){
    1e3c:	b570      	push	{r4, r5, r6, lr}
	PULSATING_MOTOR_ROUTINE = false;
    1e3e:	2400      	movs	r4, #0
    1e40:	4b0d      	ldr	r3, [pc, #52]	; (1e78 <pwm_motor_cleanup+0x3c>)
	motor_toggle_count = 0;
	tc_set_compare_value (&pwm_generator_instance,
    1e42:	4d0e      	ldr	r5, [pc, #56]	; (1e7c <pwm_motor_cleanup+0x40>)
	PULSATING_MOTOR_ROUTINE = false;
    1e44:	701c      	strb	r4, [r3, #0]
	motor_toggle_count = 0;
    1e46:	4b0e      	ldr	r3, [pc, #56]	; (1e80 <pwm_motor_cleanup+0x44>)
	tc_set_compare_value (&pwm_generator_instance,
    1e48:	2215      	movs	r2, #21
    1e4a:	0021      	movs	r1, r4
    1e4c:	0028      	movs	r0, r5
	motor_toggle_count = 0;
    1e4e:	701c      	strb	r4, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,
    1e50:	f7ff fd2c 	bl	18ac <tc_set_compare_value>
	TC_COMPARE_CAPTURE_CHANNEL_0,
	INITIAL_DUTY_CYCLE);
	PWM_RUNNING = false;
    1e54:	4b0b      	ldr	r3, [pc, #44]	; (1e84 <pwm_motor_cleanup+0x48>)
    1e56:	701c      	strb	r4, [r3, #0]
    1e58:	682b      	ldr	r3, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e5a:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1e5c:	b252      	sxtb	r2, r2
    1e5e:	2a00      	cmp	r2, #0
    1e60:	dbfb      	blt.n	1e5a <pwm_motor_cleanup+0x1e>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1e62:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1e64:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1e66:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    1e68:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1e6a:	881a      	ldrh	r2, [r3, #0]
    1e6c:	438a      	bics	r2, r1
    1e6e:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e70:	2240      	movs	r2, #64	; 0x40
    1e72:	4b05      	ldr	r3, [pc, #20]	; (1e88 <pwm_motor_cleanup+0x4c>)
    1e74:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
    1e76:	bd70      	pop	{r4, r5, r6, pc}
    1e78:	2000006f 	.word	0x2000006f
    1e7c:	200001cc 	.word	0x200001cc
    1e80:	20000076 	.word	0x20000076
    1e84:	20000070 	.word	0x20000070
    1e88:	41004400 	.word	0x41004400

00001e8c <cycle_pwm_led>:


void cycle_pwm_led(void) {
    1e8c:	b510      	push	{r4, lr}
	switch (pwm_led_toggle_count) {
    1e8e:	4c19      	ldr	r4, [pc, #100]	; (1ef4 <cycle_pwm_led+0x68>)
    1e90:	7820      	ldrb	r0, [r4, #0]
    1e92:	3801      	subs	r0, #1
    1e94:	2806      	cmp	r0, #6
    1e96:	d828      	bhi.n	1eea <cycle_pwm_led+0x5e>
    1e98:	f000 f95e 	bl	2158 <__gnu_thumb1_case_uqi>
    1e9c:	130e0904 	.word	0x130e0904
    1ea0:	1d18      	.short	0x1d18
    1ea2:	22          	.byte	0x22
    1ea3:	00          	.byte	0x00
		case 1:
		set_pwm_red();
    1ea4:	f7fe f9c2 	bl	22c <set_pwm_red>
		set_color_red();
    1ea8:	f7ff fd98 	bl	19dc <set_color_red>
		case 8:
		turn_off_all();							// Reset to 1 for red
		pwm_led_toggle_count = 0;
		break;
	}
}
    1eac:	bd10      	pop	{r4, pc}
		set_pwm_green();
    1eae:	f7fe f9c2 	bl	236 <set_pwm_green>
		set_color_green();
    1eb2:	f7ff fd7b 	bl	19ac <set_color_green>
		break;
    1eb6:	e7f9      	b.n	1eac <cycle_pwm_led+0x20>
		set_pwm_blue();
    1eb8:	f7fe f9c2 	bl	240 <set_pwm_blue>
		set_color_blue();
    1ebc:	f7ff fda6 	bl	1a0c <set_color_blue>
		break;
    1ec0:	e7f4      	b.n	1eac <cycle_pwm_led+0x20>
		set_pwm_yellow();
    1ec2:	f7fe f9c7 	bl	254 <set_pwm_yellow>
		set_color_yellow();
    1ec6:	f7ff fdb9 	bl	1a3c <set_color_yellow>
		break;
    1eca:	e7ef      	b.n	1eac <cycle_pwm_led+0x20>
		set_pwm_purple();
    1ecc:	f7fe f9c7 	bl	25e <set_pwm_purple>
		set_color_purple();
    1ed0:	f7ff fdcc 	bl	1a6c <set_color_purple>
		break;
    1ed4:	e7ea      	b.n	1eac <cycle_pwm_led+0x20>
		set_pwm_cyan();
    1ed6:	f7fe f9c7 	bl	268 <set_pwm_cyan>
		set_color_cyan();
    1eda:	f7ff fddf 	bl	1a9c <set_color_cyan>
		break;
    1ede:	e7e5      	b.n	1eac <cycle_pwm_led+0x20>
		set_pwm_white();
    1ee0:	f7fe f9b3 	bl	24a <set_pwm_white>
		set_color_white();
    1ee4:	f7ff fdf2 	bl	1acc <set_color_white>
		break;
    1ee8:	e7e0      	b.n	1eac <cycle_pwm_led+0x20>
		turn_off_all();							// Reset to 1 for red
    1eea:	f7fe f91b 	bl	124 <turn_off_all>
		pwm_led_toggle_count = 0;
    1eee:	2300      	movs	r3, #0
    1ef0:	7023      	strb	r3, [r4, #0]
}
    1ef2:	e7db      	b.n	1eac <cycle_pwm_led+0x20>
    1ef4:	20000077 	.word	0x20000077

00001ef8 <cycle_pwm_motor>:


void cycle_pwm_motor (void)
{
    1ef8:	b510      	push	{r4, lr}
	{
		if (PWM_RUNNING)
    1efa:	4b0e      	ldr	r3, [pc, #56]	; (1f34 <cycle_pwm_motor+0x3c>)
    1efc:	781b      	ldrb	r3, [r3, #0]
    1efe:	2b00      	cmp	r3, #0
    1f00:	d00b      	beq.n	1f1a <cycle_pwm_motor+0x22>
		{
			
			if (motor_toggle_count == 2)
    1f02:	4b0d      	ldr	r3, [pc, #52]	; (1f38 <cycle_pwm_motor+0x40>)
			{
				tc_set_compare_value (&pwm_generator_instance,
    1f04:	2222      	movs	r2, #34	; 0x22
			if (motor_toggle_count == 2)
    1f06:	781b      	ldrb	r3, [r3, #0]
    1f08:	2b02      	cmp	r3, #2
    1f0a:	d002      	beq.n	1f12 <cycle_pwm_motor+0x1a>
				TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);


			}
			else if (motor_toggle_count == 3)
    1f0c:	2b03      	cmp	r3, #3
    1f0e:	d105      	bne.n	1f1c <cycle_pwm_motor+0x24>
			{
				tc_set_compare_value (&pwm_generator_instance,
    1f10:	224d      	movs	r2, #77	; 0x4d
    1f12:	2100      	movs	r1, #0
    1f14:	4809      	ldr	r0, [pc, #36]	; (1f3c <cycle_pwm_motor+0x44>)
    1f16:	f7ff fcc9 	bl	18ac <tc_set_compare_value>
				pwm_motor_cleanup();
			}
		}
	}

}
    1f1a:	bd10      	pop	{r4, pc}
			else if (motor_toggle_count == 4)
    1f1c:	2b04      	cmp	r3, #4
    1f1e:	d104      	bne.n	1f2a <cycle_pwm_motor+0x32>
				PULSATING_MOTOR_ROUTINE = true;
    1f20:	2201      	movs	r2, #1
    1f22:	4b07      	ldr	r3, [pc, #28]	; (1f40 <cycle_pwm_motor+0x48>)
    1f24:	701a      	strb	r2, [r3, #0]
				tc_set_compare_value (&pwm_generator_instance,
    1f26:	324c      	adds	r2, #76	; 0x4c
    1f28:	e7f3      	b.n	1f12 <cycle_pwm_motor+0x1a>
			else if (motor_toggle_count > 4)
    1f2a:	2b04      	cmp	r3, #4
    1f2c:	d9f5      	bls.n	1f1a <cycle_pwm_motor+0x22>
				pwm_motor_cleanup();
    1f2e:	f7ff ff85 	bl	1e3c <pwm_motor_cleanup>
}
    1f32:	e7f2      	b.n	1f1a <cycle_pwm_motor+0x22>
    1f34:	20000070 	.word	0x20000070
    1f38:	20000076 	.word	0x20000076
    1f3c:	200001cc 	.word	0x200001cc
    1f40:	2000006f 	.word	0x2000006f

00001f44 <regular_routine>:


void regular_routine(void) {
    1f44:	b510      	push	{r4, lr}
	static bool motor_status_changed = false;
	static bool led_button_status_changed = false;

	//-------------------------------------------------------------

	if (is_button_one_pressed()) {
    1f46:	f7ff ff19 	bl	1d7c <is_button_one_pressed>
    1f4a:	2800      	cmp	r0, #0
    1f4c:	d005      	beq.n	1f5a <regular_routine+0x16>
		if (LongPressB1Flag) {
    1f4e:	4b26      	ldr	r3, [pc, #152]	; (1fe8 <regular_routine+0xa4>)
    1f50:	781b      	ldrb	r3, [r3, #0]
    1f52:	2b00      	cmp	r3, #0
    1f54:	d01a      	beq.n	1f8c <regular_routine+0x48>
			pwm_motor_cleanup();
    1f56:	f7ff ff71 	bl	1e3c <pwm_motor_cleanup>
				}
			}
		}
	}
		
	if (BUTTON_ONE_RELEASE_STATUS) {
    1f5a:	4b24      	ldr	r3, [pc, #144]	; (1fec <regular_routine+0xa8>)
    1f5c:	781b      	ldrb	r3, [r3, #0]
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d002      	beq.n	1f68 <regular_routine+0x24>
		motor_status_changed = false;
    1f62:	2200      	movs	r2, #0
    1f64:	4b22      	ldr	r3, [pc, #136]	; (1ff0 <regular_routine+0xac>)
    1f66:	701a      	strb	r2, [r3, #0]
	}

	//-------------------------------------------------------

	if (is_button_two_pressed()) {
    1f68:	f7ff ff38 	bl	1ddc <is_button_two_pressed>
    1f6c:	2800      	cmp	r0, #0
    1f6e:	d005      	beq.n	1f7c <regular_routine+0x38>
		if (LongPressB2Flag) {
    1f70:	4b20      	ldr	r3, [pc, #128]	; (1ff4 <regular_routine+0xb0>)
    1f72:	781b      	ldrb	r3, [r3, #0]
    1f74:	2b00      	cmp	r3, #0
    1f76:	d029      	beq.n	1fcc <regular_routine+0x88>
			pwm_motor_cleanup();
    1f78:	f7ff ff60 	bl	1e3c <pwm_motor_cleanup>
				led_button_status_changed = true;
				cycle_pwm_led();
			}
		}
	}
	if (BUTTON_TWO_RELEASE_STATUS) {
    1f7c:	4b1e      	ldr	r3, [pc, #120]	; (1ff8 <regular_routine+0xb4>)
    1f7e:	781b      	ldrb	r3, [r3, #0]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d002      	beq.n	1f8a <regular_routine+0x46>
		led_button_status_changed = false;
    1f84:	2200      	movs	r2, #0
    1f86:	4b1d      	ldr	r3, [pc, #116]	; (1ffc <regular_routine+0xb8>)
    1f88:	701a      	strb	r2, [r3, #0]
	}
}
    1f8a:	bd10      	pop	{r4, pc}
			if (!motor_status_changed) {
    1f8c:	4918      	ldr	r1, [pc, #96]	; (1ff0 <regular_routine+0xac>)
    1f8e:	780b      	ldrb	r3, [r1, #0]
    1f90:	2b00      	cmp	r3, #0
    1f92:	d1e2      	bne.n	1f5a <regular_routine+0x16>
				motor_toggle_count++;
    1f94:	4a1a      	ldr	r2, [pc, #104]	; (2000 <regular_routine+0xbc>)
    1f96:	7813      	ldrb	r3, [r2, #0]
    1f98:	3301      	adds	r3, #1
    1f9a:	7013      	strb	r3, [r2, #0]
				motor_status_changed = true;
    1f9c:	2201      	movs	r2, #1
				if (!PWM_RUNNING) {
    1f9e:	4b19      	ldr	r3, [pc, #100]	; (2004 <regular_routine+0xc0>)
				motor_status_changed = true;
    1fa0:	700a      	strb	r2, [r1, #0]
				if (!PWM_RUNNING) {
    1fa2:	7819      	ldrb	r1, [r3, #0]
    1fa4:	2900      	cmp	r1, #0
    1fa6:	d10e      	bne.n	1fc6 <regular_routine+0x82>
					PWM_RUNNING = true;
    1fa8:	701a      	strb	r2, [r3, #0]
    1faa:	4b17      	ldr	r3, [pc, #92]	; (2008 <regular_routine+0xc4>)
    1fac:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1fae:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    1fb0:	b252      	sxtb	r2, r2
    1fb2:	2a00      	cmp	r2, #0
    1fb4:	dbfb      	blt.n	1fae <regular_routine+0x6a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1fb6:	2202      	movs	r2, #2
    1fb8:	8819      	ldrh	r1, [r3, #0]
    1fba:	430a      	orrs	r2, r1
    1fbc:	801a      	strh	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    1fbe:	2240      	movs	r2, #64	; 0x40
    1fc0:	4b12      	ldr	r3, [pc, #72]	; (200c <regular_routine+0xc8>)
    1fc2:	619a      	str	r2, [r3, #24]
    1fc4:	e7c9      	b.n	1f5a <regular_routine+0x16>
					cycle_pwm_motor();
    1fc6:	f7ff ff97 	bl	1ef8 <cycle_pwm_motor>
    1fca:	e7c6      	b.n	1f5a <regular_routine+0x16>
			if (!led_button_status_changed) {
    1fcc:	4a0b      	ldr	r2, [pc, #44]	; (1ffc <regular_routine+0xb8>)
    1fce:	7813      	ldrb	r3, [r2, #0]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d1d3      	bne.n	1f7c <regular_routine+0x38>
				pwm_led_toggle_count++;
    1fd4:	490e      	ldr	r1, [pc, #56]	; (2010 <regular_routine+0xcc>)
    1fd6:	780b      	ldrb	r3, [r1, #0]
    1fd8:	3301      	adds	r3, #1
    1fda:	700b      	strb	r3, [r1, #0]
				led_button_status_changed = true;
    1fdc:	2301      	movs	r3, #1
    1fde:	7013      	strb	r3, [r2, #0]
				cycle_pwm_led();
    1fe0:	f7ff ff54 	bl	1e8c <cycle_pwm_led>
    1fe4:	e7ca      	b.n	1f7c <regular_routine+0x38>
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	2000006c 	.word	0x2000006c
    1fec:	20000069 	.word	0x20000069
    1ff0:	20000075 	.word	0x20000075
    1ff4:	2000006d 	.word	0x2000006d
    1ff8:	2000006a 	.word	0x2000006a
    1ffc:	20000074 	.word	0x20000074
    2000:	20000076 	.word	0x20000076
    2004:	20000070 	.word	0x20000070
    2008:	200001cc 	.word	0x200001cc
    200c:	41004400 	.word	0x41004400
    2010:	20000077 	.word	0x20000077

00002014 <get_vbus_state>:
	return (port_base->IN.reg & pin_mask);
    2014:	4b03      	ldr	r3, [pc, #12]	; (2024 <get_vbus_state+0x10>)


 void get_vbus_state(void);

 void get_vbus_state(void){
	VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
    2016:	4a04      	ldr	r2, [pc, #16]	; (2028 <get_vbus_state+0x14>)
    2018:	6a1b      	ldr	r3, [r3, #32]
    201a:	011b      	lsls	r3, r3, #4
    201c:	0fdb      	lsrs	r3, r3, #31
    201e:	7013      	strb	r3, [r2, #0]
}
    2020:	4770      	bx	lr
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	41004400 	.word	0x41004400
    2028:	20000073 	.word	0x20000073

0000202c <get_charging_on_status_state>:
    202c:	4b03      	ldr	r3, [pc, #12]	; (203c <get_charging_on_status_state+0x10>)


 void get_charging_on_status_state(void);

 void get_charging_on_status_state(void){
	CHARGN_ON_STATE = port_pin_get_input_level(CHARGN_ON_PIN);
    202e:	4a04      	ldr	r2, [pc, #16]	; (2040 <get_charging_on_status_state+0x14>)
    2030:	6a1b      	ldr	r3, [r3, #32]
    2032:	051b      	lsls	r3, r3, #20
    2034:	0fdb      	lsrs	r3, r3, #31
    2036:	7013      	strb	r3, [r2, #0]
}
    2038:	4770      	bx	lr
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	41004400 	.word	0x41004400
    2040:	2000006b 	.word	0x2000006b

00002044 <update_battery_states>:
}


 void update_battery_states(void);

 void update_battery_states(void){
    2044:	b510      	push	{r4, lr}
	
	/*
	Update Global Var based on state (using VBUS & CHRGHN)
	*/
	
	get_vbus_state();
    2046:	f7ff ffe5 	bl	2014 <get_vbus_state>
	get_charging_on_status_state();
    204a:	f7ff ffef 	bl	202c <get_charging_on_status_state>
	
	
	
}
    204e:	bd10      	pop	{r4, pc}

00002050 <display_battery_state>:
/* Indication LED Control                                               */
/************************************************************************/

 void display_battery_state(void);

 void display_battery_state(void){
    2050:	b510      	push	{r4, lr}
		set_battery_low_routine();
	}
	else if (BATTERY_LOW){
		set_color_red();
	}	
	else if (BATTERY_CHARGED){
    2052:	4b03      	ldr	r3, [pc, #12]	; (2060 <display_battery_state+0x10>)
    2054:	781b      	ldrb	r3, [r3, #0]
    2056:	2b00      	cmp	r3, #0
    2058:	d001      	beq.n	205e <display_battery_state+0xe>
		set_color_green();
    205a:	f7ff fca7 	bl	19ac <set_color_green>
	}	
	else if (BATTERY_CHARGING){
		//set_battery_charge_routine();
	}
	
}
    205e:	bd10      	pop	{r4, pc}
    2060:	20000068 	.word	0x20000068

00002064 <toggle_nsleep>:

 void toggle_nsleep(void);

 void toggle_nsleep(void){
	static bool PULSATING_MOTOR = false;
	if (PULSATING_MOTOR_ROUTINE){
    2064:	4b08      	ldr	r3, [pc, #32]	; (2088 <toggle_nsleep+0x24>)
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	2b00      	cmp	r3, #0
    206a:	d008      	beq.n	207e <toggle_nsleep+0x1a>
		if (PULSATING_MOTOR){
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <toggle_nsleep+0x28>)
    206e:	4a08      	ldr	r2, [pc, #32]	; (2090 <toggle_nsleep+0x2c>)
    2070:	7818      	ldrb	r0, [r3, #0]
    2072:	2140      	movs	r1, #64	; 0x40
    2074:	2800      	cmp	r0, #0
    2076:	d003      	beq.n	2080 <toggle_nsleep+0x1c>
		port_base->OUTCLR.reg = pin_mask;
    2078:	6151      	str	r1, [r2, #20]
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			PULSATING_MOTOR = false;
    207a:	2200      	movs	r2, #0
    207c:	701a      	strb	r2, [r3, #0]
			}else{
			PULSATING_MOTOR = true;
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
		}
	}
}
    207e:	4770      	bx	lr
			PULSATING_MOTOR = true;
    2080:	2001      	movs	r0, #1
    2082:	7018      	strb	r0, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    2084:	6191      	str	r1, [r2, #24]
}
    2086:	e7fa      	b.n	207e <toggle_nsleep+0x1a>
    2088:	2000006f 	.word	0x2000006f
    208c:	2000006e 	.word	0x2000006e
    2090:	41004400 	.word	0x41004400

00002094 <system_state>:
/* STATE MACHINE		                                                */
/************************************************************************/

 void system_state(void);

 void system_state(void){
    2094:	b510      	push	{r4, lr}
	update_battery_states();
    2096:	f7ff ffd5 	bl	2044 <update_battery_states>
	display_battery_state();
    209a:	f7ff ffd9 	bl	2050 <display_battery_state>
}
    209e:	bd10      	pop	{r4, pc}

000020a0 <system_logic>:
/* LOGIC MACHINE		                                                */
/************************************************************************/

 void system_logic(void);

 void system_logic(void){
    20a0:	b510      	push	{r4, lr}
	if (!VBUS_STATE){
    20a2:	4b10      	ldr	r3, [pc, #64]	; (20e4 <system_logic+0x44>)
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d112      	bne.n	20d0 <system_logic+0x30>
		configure_pwm_generator();					// Enable Motor PWM
    20aa:	f7ff fe37 	bl	1d1c <configure_pwm_generator>
	//
	//
	
	
	
	if (SYS_TICK_10MS){
    20ae:	4b0e      	ldr	r3, [pc, #56]	; (20e8 <system_logic+0x48>)
    20b0:	781a      	ldrb	r2, [r3, #0]
    20b2:	2a00      	cmp	r2, #0
    20b4:	d003      	beq.n	20be <system_logic+0x1e>
		SYS_TICK_10MS = false;
    20b6:	2200      	movs	r2, #0
    20b8:	701a      	strb	r2, [r3, #0]
		regular_routine();
    20ba:	f7ff ff43 	bl	1f44 <regular_routine>
	}
	
	if (SYS_TICK_200MS){
    20be:	4b0b      	ldr	r3, [pc, #44]	; (20ec <system_logic+0x4c>)
    20c0:	781a      	ldrb	r2, [r3, #0]
    20c2:	2a00      	cmp	r2, #0
    20c4:	d003      	beq.n	20ce <system_logic+0x2e>
		SYS_TICK_200MS = false;
    20c6:	2200      	movs	r2, #0
    20c8:	701a      	strb	r2, [r3, #0]
		toggle_nsleep();
    20ca:	f7ff ffcb 	bl	2064 <toggle_nsleep>
	}



}
    20ce:	bd10      	pop	{r4, pc}
		if (!CHARGN_ON_STATE){
    20d0:	4b07      	ldr	r3, [pc, #28]	; (20f0 <system_logic+0x50>)
    20d2:	781a      	ldrb	r2, [r3, #0]
    20d4:	4b07      	ldr	r3, [pc, #28]	; (20f4 <system_logic+0x54>)
    20d6:	2a00      	cmp	r2, #0
    20d8:	d101      	bne.n	20de <system_logic+0x3e>
			BATTERY_CHARGED = true;
    20da:	701a      	strb	r2, [r3, #0]
    20dc:	e7e7      	b.n	20ae <system_logic+0xe>
    20de:	2201      	movs	r2, #1
    20e0:	e7fb      	b.n	20da <system_logic+0x3a>
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	20000073 	.word	0x20000073
    20e8:	20000071 	.word	0x20000071
    20ec:	20000072 	.word	0x20000072
    20f0:	2000006b 	.word	0x2000006b
    20f4:	20000068 	.word	0x20000068

000020f8 <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
    20f8:	2240      	movs	r2, #64	; 0x40
    20fa:	4b06      	ldr	r3, [pc, #24]	; (2114 <startup_default_pin_state+0x1c>)
    20fc:	615a      	str	r2, [r3, #20]
    20fe:	1892      	adds	r2, r2, r2
    2100:	615a      	str	r2, [r3, #20]
    2102:	2280      	movs	r2, #128	; 0x80
    2104:	0212      	lsls	r2, r2, #8
    2106:	615a      	str	r2, [r3, #20]
    2108:	2280      	movs	r2, #128	; 0x80
    210a:	0112      	lsls	r2, r2, #4
    210c:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    210e:	2208      	movs	r2, #8
    2110:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SWITCH_OFF_PIN,LOW);
	port_pin_set_output_level(BUTTON_2,LOW);
	port_pin_set_output_level(CHARGN_ON_PIN,LOW);
	port_pin_set_output_level(CHARGN_OFF_PIN,HIGH);
	
}
    2112:	4770      	bx	lr
    2114:	41004400 	.word	0x41004400

00002118 <startup_sys_configs>:


void startup_sys_configs(void);


void startup_sys_configs(void){
    2118:	b510      	push	{r4, lr}
	system_init ();									// System Initialize
    211a:	f7ff f826 	bl	116a <system_init>
	cpu_irq_enable();
    211e:	2201      	movs	r2, #1
    2120:	4b08      	ldr	r3, [pc, #32]	; (2144 <startup_sys_configs+0x2c>)
    2122:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2124:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2128:	b662      	cpsie	i
	system_interrupt_enable_global ();				// System Interrupts
	configure_port_pins ();							// System PORTs
    212a:	f7ff fd73 	bl	1c14 <configure_port_pins>
	startup_default_pin_state();
    212e:	f7ff ffe3 	bl	20f8 <startup_default_pin_state>
	configure_system_tc ();							// System Clock
    2132:	f7ff fd9b 	bl	1c6c <configure_system_tc>
	system_tc_callbacks ();							// System Clock Callback
    2136:	f7ff fdcf 	bl	1cd8 <system_tc_callbacks>
	i2c_master_setup();
    213a:	f7ff fcdf 	bl	1afc <i2c_master_setup>
	configure_pwm_tcc();
    213e:	f7fe f833 	bl	1a8 <configure_pwm_tcc>
}
    2142:	bd10      	pop	{r4, pc}
    2144:	20000000 	.word	0x20000000

00002148 <main>:



int main (void)
{
    2148:	b510      	push	{r4, lr}
	startup_sys_configs ();	
    214a:	f7ff ffe5 	bl	2118 <startup_sys_configs>
	while (true)
	{
		system_state();								// Get latest system_state
    214e:	f7ff ffa1 	bl	2094 <system_state>
		system_logic();								// Invoke System Logic
    2152:	f7ff ffa5 	bl	20a0 <system_logic>
    2156:	e7fa      	b.n	214e <main+0x6>

00002158 <__gnu_thumb1_case_uqi>:
    2158:	b402      	push	{r1}
    215a:	4671      	mov	r1, lr
    215c:	0849      	lsrs	r1, r1, #1
    215e:	0049      	lsls	r1, r1, #1
    2160:	5c09      	ldrb	r1, [r1, r0]
    2162:	0049      	lsls	r1, r1, #1
    2164:	448e      	add	lr, r1
    2166:	bc02      	pop	{r1}
    2168:	4770      	bx	lr
    216a:	46c0      	nop			; (mov r8, r8)

0000216c <__udivsi3>:
    216c:	2200      	movs	r2, #0
    216e:	0843      	lsrs	r3, r0, #1
    2170:	428b      	cmp	r3, r1
    2172:	d374      	bcc.n	225e <__udivsi3+0xf2>
    2174:	0903      	lsrs	r3, r0, #4
    2176:	428b      	cmp	r3, r1
    2178:	d35f      	bcc.n	223a <__udivsi3+0xce>
    217a:	0a03      	lsrs	r3, r0, #8
    217c:	428b      	cmp	r3, r1
    217e:	d344      	bcc.n	220a <__udivsi3+0x9e>
    2180:	0b03      	lsrs	r3, r0, #12
    2182:	428b      	cmp	r3, r1
    2184:	d328      	bcc.n	21d8 <__udivsi3+0x6c>
    2186:	0c03      	lsrs	r3, r0, #16
    2188:	428b      	cmp	r3, r1
    218a:	d30d      	bcc.n	21a8 <__udivsi3+0x3c>
    218c:	22ff      	movs	r2, #255	; 0xff
    218e:	0209      	lsls	r1, r1, #8
    2190:	ba12      	rev	r2, r2
    2192:	0c03      	lsrs	r3, r0, #16
    2194:	428b      	cmp	r3, r1
    2196:	d302      	bcc.n	219e <__udivsi3+0x32>
    2198:	1212      	asrs	r2, r2, #8
    219a:	0209      	lsls	r1, r1, #8
    219c:	d065      	beq.n	226a <__udivsi3+0xfe>
    219e:	0b03      	lsrs	r3, r0, #12
    21a0:	428b      	cmp	r3, r1
    21a2:	d319      	bcc.n	21d8 <__udivsi3+0x6c>
    21a4:	e000      	b.n	21a8 <__udivsi3+0x3c>
    21a6:	0a09      	lsrs	r1, r1, #8
    21a8:	0bc3      	lsrs	r3, r0, #15
    21aa:	428b      	cmp	r3, r1
    21ac:	d301      	bcc.n	21b2 <__udivsi3+0x46>
    21ae:	03cb      	lsls	r3, r1, #15
    21b0:	1ac0      	subs	r0, r0, r3
    21b2:	4152      	adcs	r2, r2
    21b4:	0b83      	lsrs	r3, r0, #14
    21b6:	428b      	cmp	r3, r1
    21b8:	d301      	bcc.n	21be <__udivsi3+0x52>
    21ba:	038b      	lsls	r3, r1, #14
    21bc:	1ac0      	subs	r0, r0, r3
    21be:	4152      	adcs	r2, r2
    21c0:	0b43      	lsrs	r3, r0, #13
    21c2:	428b      	cmp	r3, r1
    21c4:	d301      	bcc.n	21ca <__udivsi3+0x5e>
    21c6:	034b      	lsls	r3, r1, #13
    21c8:	1ac0      	subs	r0, r0, r3
    21ca:	4152      	adcs	r2, r2
    21cc:	0b03      	lsrs	r3, r0, #12
    21ce:	428b      	cmp	r3, r1
    21d0:	d301      	bcc.n	21d6 <__udivsi3+0x6a>
    21d2:	030b      	lsls	r3, r1, #12
    21d4:	1ac0      	subs	r0, r0, r3
    21d6:	4152      	adcs	r2, r2
    21d8:	0ac3      	lsrs	r3, r0, #11
    21da:	428b      	cmp	r3, r1
    21dc:	d301      	bcc.n	21e2 <__udivsi3+0x76>
    21de:	02cb      	lsls	r3, r1, #11
    21e0:	1ac0      	subs	r0, r0, r3
    21e2:	4152      	adcs	r2, r2
    21e4:	0a83      	lsrs	r3, r0, #10
    21e6:	428b      	cmp	r3, r1
    21e8:	d301      	bcc.n	21ee <__udivsi3+0x82>
    21ea:	028b      	lsls	r3, r1, #10
    21ec:	1ac0      	subs	r0, r0, r3
    21ee:	4152      	adcs	r2, r2
    21f0:	0a43      	lsrs	r3, r0, #9
    21f2:	428b      	cmp	r3, r1
    21f4:	d301      	bcc.n	21fa <__udivsi3+0x8e>
    21f6:	024b      	lsls	r3, r1, #9
    21f8:	1ac0      	subs	r0, r0, r3
    21fa:	4152      	adcs	r2, r2
    21fc:	0a03      	lsrs	r3, r0, #8
    21fe:	428b      	cmp	r3, r1
    2200:	d301      	bcc.n	2206 <__udivsi3+0x9a>
    2202:	020b      	lsls	r3, r1, #8
    2204:	1ac0      	subs	r0, r0, r3
    2206:	4152      	adcs	r2, r2
    2208:	d2cd      	bcs.n	21a6 <__udivsi3+0x3a>
    220a:	09c3      	lsrs	r3, r0, #7
    220c:	428b      	cmp	r3, r1
    220e:	d301      	bcc.n	2214 <__udivsi3+0xa8>
    2210:	01cb      	lsls	r3, r1, #7
    2212:	1ac0      	subs	r0, r0, r3
    2214:	4152      	adcs	r2, r2
    2216:	0983      	lsrs	r3, r0, #6
    2218:	428b      	cmp	r3, r1
    221a:	d301      	bcc.n	2220 <__udivsi3+0xb4>
    221c:	018b      	lsls	r3, r1, #6
    221e:	1ac0      	subs	r0, r0, r3
    2220:	4152      	adcs	r2, r2
    2222:	0943      	lsrs	r3, r0, #5
    2224:	428b      	cmp	r3, r1
    2226:	d301      	bcc.n	222c <__udivsi3+0xc0>
    2228:	014b      	lsls	r3, r1, #5
    222a:	1ac0      	subs	r0, r0, r3
    222c:	4152      	adcs	r2, r2
    222e:	0903      	lsrs	r3, r0, #4
    2230:	428b      	cmp	r3, r1
    2232:	d301      	bcc.n	2238 <__udivsi3+0xcc>
    2234:	010b      	lsls	r3, r1, #4
    2236:	1ac0      	subs	r0, r0, r3
    2238:	4152      	adcs	r2, r2
    223a:	08c3      	lsrs	r3, r0, #3
    223c:	428b      	cmp	r3, r1
    223e:	d301      	bcc.n	2244 <__udivsi3+0xd8>
    2240:	00cb      	lsls	r3, r1, #3
    2242:	1ac0      	subs	r0, r0, r3
    2244:	4152      	adcs	r2, r2
    2246:	0883      	lsrs	r3, r0, #2
    2248:	428b      	cmp	r3, r1
    224a:	d301      	bcc.n	2250 <__udivsi3+0xe4>
    224c:	008b      	lsls	r3, r1, #2
    224e:	1ac0      	subs	r0, r0, r3
    2250:	4152      	adcs	r2, r2
    2252:	0843      	lsrs	r3, r0, #1
    2254:	428b      	cmp	r3, r1
    2256:	d301      	bcc.n	225c <__udivsi3+0xf0>
    2258:	004b      	lsls	r3, r1, #1
    225a:	1ac0      	subs	r0, r0, r3
    225c:	4152      	adcs	r2, r2
    225e:	1a41      	subs	r1, r0, r1
    2260:	d200      	bcs.n	2264 <__udivsi3+0xf8>
    2262:	4601      	mov	r1, r0
    2264:	4152      	adcs	r2, r2
    2266:	4610      	mov	r0, r2
    2268:	4770      	bx	lr
    226a:	e7ff      	b.n	226c <__udivsi3+0x100>
    226c:	b501      	push	{r0, lr}
    226e:	2000      	movs	r0, #0
    2270:	f000 f806 	bl	2280 <__aeabi_idiv0>
    2274:	bd02      	pop	{r1, pc}
    2276:	46c0      	nop			; (mov r8, r8)

00002278 <__aeabi_uidivmod>:
    2278:	2900      	cmp	r1, #0
    227a:	d0f7      	beq.n	226c <__udivsi3+0x100>
    227c:	e776      	b.n	216c <__udivsi3>
    227e:	4770      	bx	lr

00002280 <__aeabi_idiv0>:
    2280:	4770      	bx	lr
    2282:	46c0      	nop			; (mov r8, r8)

00002284 <__aeabi_dadd>:
    2284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2286:	4645      	mov	r5, r8
    2288:	46de      	mov	lr, fp
    228a:	4657      	mov	r7, sl
    228c:	464e      	mov	r6, r9
    228e:	030c      	lsls	r4, r1, #12
    2290:	b5e0      	push	{r5, r6, r7, lr}
    2292:	004e      	lsls	r6, r1, #1
    2294:	0fc9      	lsrs	r1, r1, #31
    2296:	4688      	mov	r8, r1
    2298:	000d      	movs	r5, r1
    229a:	0a61      	lsrs	r1, r4, #9
    229c:	0f44      	lsrs	r4, r0, #29
    229e:	430c      	orrs	r4, r1
    22a0:	00c7      	lsls	r7, r0, #3
    22a2:	0319      	lsls	r1, r3, #12
    22a4:	0058      	lsls	r0, r3, #1
    22a6:	0fdb      	lsrs	r3, r3, #31
    22a8:	469b      	mov	fp, r3
    22aa:	0a4b      	lsrs	r3, r1, #9
    22ac:	0f51      	lsrs	r1, r2, #29
    22ae:	430b      	orrs	r3, r1
    22b0:	0d76      	lsrs	r6, r6, #21
    22b2:	0d40      	lsrs	r0, r0, #21
    22b4:	0019      	movs	r1, r3
    22b6:	00d2      	lsls	r2, r2, #3
    22b8:	45d8      	cmp	r8, fp
    22ba:	d100      	bne.n	22be <__aeabi_dadd+0x3a>
    22bc:	e0ae      	b.n	241c <__aeabi_dadd+0x198>
    22be:	1a35      	subs	r5, r6, r0
    22c0:	2d00      	cmp	r5, #0
    22c2:	dc00      	bgt.n	22c6 <__aeabi_dadd+0x42>
    22c4:	e0f6      	b.n	24b4 <__aeabi_dadd+0x230>
    22c6:	2800      	cmp	r0, #0
    22c8:	d10f      	bne.n	22ea <__aeabi_dadd+0x66>
    22ca:	4313      	orrs	r3, r2
    22cc:	d100      	bne.n	22d0 <__aeabi_dadd+0x4c>
    22ce:	e0db      	b.n	2488 <__aeabi_dadd+0x204>
    22d0:	1e6b      	subs	r3, r5, #1
    22d2:	2b00      	cmp	r3, #0
    22d4:	d000      	beq.n	22d8 <__aeabi_dadd+0x54>
    22d6:	e137      	b.n	2548 <__aeabi_dadd+0x2c4>
    22d8:	1aba      	subs	r2, r7, r2
    22da:	4297      	cmp	r7, r2
    22dc:	41bf      	sbcs	r7, r7
    22de:	1a64      	subs	r4, r4, r1
    22e0:	427f      	negs	r7, r7
    22e2:	1be4      	subs	r4, r4, r7
    22e4:	2601      	movs	r6, #1
    22e6:	0017      	movs	r7, r2
    22e8:	e024      	b.n	2334 <__aeabi_dadd+0xb0>
    22ea:	4bc6      	ldr	r3, [pc, #792]	; (2604 <__aeabi_dadd+0x380>)
    22ec:	429e      	cmp	r6, r3
    22ee:	d04d      	beq.n	238c <__aeabi_dadd+0x108>
    22f0:	2380      	movs	r3, #128	; 0x80
    22f2:	041b      	lsls	r3, r3, #16
    22f4:	4319      	orrs	r1, r3
    22f6:	2d38      	cmp	r5, #56	; 0x38
    22f8:	dd00      	ble.n	22fc <__aeabi_dadd+0x78>
    22fa:	e107      	b.n	250c <__aeabi_dadd+0x288>
    22fc:	2d1f      	cmp	r5, #31
    22fe:	dd00      	ble.n	2302 <__aeabi_dadd+0x7e>
    2300:	e138      	b.n	2574 <__aeabi_dadd+0x2f0>
    2302:	2020      	movs	r0, #32
    2304:	1b43      	subs	r3, r0, r5
    2306:	469a      	mov	sl, r3
    2308:	000b      	movs	r3, r1
    230a:	4650      	mov	r0, sl
    230c:	4083      	lsls	r3, r0
    230e:	4699      	mov	r9, r3
    2310:	0013      	movs	r3, r2
    2312:	4648      	mov	r0, r9
    2314:	40eb      	lsrs	r3, r5
    2316:	4318      	orrs	r0, r3
    2318:	0003      	movs	r3, r0
    231a:	4650      	mov	r0, sl
    231c:	4082      	lsls	r2, r0
    231e:	1e50      	subs	r0, r2, #1
    2320:	4182      	sbcs	r2, r0
    2322:	40e9      	lsrs	r1, r5
    2324:	431a      	orrs	r2, r3
    2326:	1aba      	subs	r2, r7, r2
    2328:	1a61      	subs	r1, r4, r1
    232a:	4297      	cmp	r7, r2
    232c:	41a4      	sbcs	r4, r4
    232e:	0017      	movs	r7, r2
    2330:	4264      	negs	r4, r4
    2332:	1b0c      	subs	r4, r1, r4
    2334:	0223      	lsls	r3, r4, #8
    2336:	d562      	bpl.n	23fe <__aeabi_dadd+0x17a>
    2338:	0264      	lsls	r4, r4, #9
    233a:	0a65      	lsrs	r5, r4, #9
    233c:	2d00      	cmp	r5, #0
    233e:	d100      	bne.n	2342 <__aeabi_dadd+0xbe>
    2340:	e0df      	b.n	2502 <__aeabi_dadd+0x27e>
    2342:	0028      	movs	r0, r5
    2344:	f001 fbe4 	bl	3b10 <__clzsi2>
    2348:	0003      	movs	r3, r0
    234a:	3b08      	subs	r3, #8
    234c:	2b1f      	cmp	r3, #31
    234e:	dd00      	ble.n	2352 <__aeabi_dadd+0xce>
    2350:	e0d2      	b.n	24f8 <__aeabi_dadd+0x274>
    2352:	2220      	movs	r2, #32
    2354:	003c      	movs	r4, r7
    2356:	1ad2      	subs	r2, r2, r3
    2358:	409d      	lsls	r5, r3
    235a:	40d4      	lsrs	r4, r2
    235c:	409f      	lsls	r7, r3
    235e:	4325      	orrs	r5, r4
    2360:	429e      	cmp	r6, r3
    2362:	dd00      	ble.n	2366 <__aeabi_dadd+0xe2>
    2364:	e0c4      	b.n	24f0 <__aeabi_dadd+0x26c>
    2366:	1b9e      	subs	r6, r3, r6
    2368:	1c73      	adds	r3, r6, #1
    236a:	2b1f      	cmp	r3, #31
    236c:	dd00      	ble.n	2370 <__aeabi_dadd+0xec>
    236e:	e0f1      	b.n	2554 <__aeabi_dadd+0x2d0>
    2370:	2220      	movs	r2, #32
    2372:	0038      	movs	r0, r7
    2374:	0029      	movs	r1, r5
    2376:	1ad2      	subs	r2, r2, r3
    2378:	40d8      	lsrs	r0, r3
    237a:	4091      	lsls	r1, r2
    237c:	4097      	lsls	r7, r2
    237e:	002c      	movs	r4, r5
    2380:	4301      	orrs	r1, r0
    2382:	1e78      	subs	r0, r7, #1
    2384:	4187      	sbcs	r7, r0
    2386:	40dc      	lsrs	r4, r3
    2388:	2600      	movs	r6, #0
    238a:	430f      	orrs	r7, r1
    238c:	077b      	lsls	r3, r7, #29
    238e:	d009      	beq.n	23a4 <__aeabi_dadd+0x120>
    2390:	230f      	movs	r3, #15
    2392:	403b      	ands	r3, r7
    2394:	2b04      	cmp	r3, #4
    2396:	d005      	beq.n	23a4 <__aeabi_dadd+0x120>
    2398:	1d3b      	adds	r3, r7, #4
    239a:	42bb      	cmp	r3, r7
    239c:	41bf      	sbcs	r7, r7
    239e:	427f      	negs	r7, r7
    23a0:	19e4      	adds	r4, r4, r7
    23a2:	001f      	movs	r7, r3
    23a4:	0223      	lsls	r3, r4, #8
    23a6:	d52c      	bpl.n	2402 <__aeabi_dadd+0x17e>
    23a8:	4b96      	ldr	r3, [pc, #600]	; (2604 <__aeabi_dadd+0x380>)
    23aa:	3601      	adds	r6, #1
    23ac:	429e      	cmp	r6, r3
    23ae:	d100      	bne.n	23b2 <__aeabi_dadd+0x12e>
    23b0:	e09a      	b.n	24e8 <__aeabi_dadd+0x264>
    23b2:	4645      	mov	r5, r8
    23b4:	4b94      	ldr	r3, [pc, #592]	; (2608 <__aeabi_dadd+0x384>)
    23b6:	08ff      	lsrs	r7, r7, #3
    23b8:	401c      	ands	r4, r3
    23ba:	0760      	lsls	r0, r4, #29
    23bc:	0576      	lsls	r6, r6, #21
    23be:	0264      	lsls	r4, r4, #9
    23c0:	4307      	orrs	r7, r0
    23c2:	0b24      	lsrs	r4, r4, #12
    23c4:	0d76      	lsrs	r6, r6, #21
    23c6:	2100      	movs	r1, #0
    23c8:	0324      	lsls	r4, r4, #12
    23ca:	0b23      	lsrs	r3, r4, #12
    23cc:	0d0c      	lsrs	r4, r1, #20
    23ce:	4a8f      	ldr	r2, [pc, #572]	; (260c <__aeabi_dadd+0x388>)
    23d0:	0524      	lsls	r4, r4, #20
    23d2:	431c      	orrs	r4, r3
    23d4:	4014      	ands	r4, r2
    23d6:	0533      	lsls	r3, r6, #20
    23d8:	4323      	orrs	r3, r4
    23da:	005b      	lsls	r3, r3, #1
    23dc:	07ed      	lsls	r5, r5, #31
    23de:	085b      	lsrs	r3, r3, #1
    23e0:	432b      	orrs	r3, r5
    23e2:	0038      	movs	r0, r7
    23e4:	0019      	movs	r1, r3
    23e6:	bc3c      	pop	{r2, r3, r4, r5}
    23e8:	4690      	mov	r8, r2
    23ea:	4699      	mov	r9, r3
    23ec:	46a2      	mov	sl, r4
    23ee:	46ab      	mov	fp, r5
    23f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23f2:	4664      	mov	r4, ip
    23f4:	4304      	orrs	r4, r0
    23f6:	d100      	bne.n	23fa <__aeabi_dadd+0x176>
    23f8:	e211      	b.n	281e <__aeabi_dadd+0x59a>
    23fa:	0004      	movs	r4, r0
    23fc:	4667      	mov	r7, ip
    23fe:	077b      	lsls	r3, r7, #29
    2400:	d1c6      	bne.n	2390 <__aeabi_dadd+0x10c>
    2402:	4645      	mov	r5, r8
    2404:	0760      	lsls	r0, r4, #29
    2406:	08ff      	lsrs	r7, r7, #3
    2408:	4307      	orrs	r7, r0
    240a:	08e4      	lsrs	r4, r4, #3
    240c:	4b7d      	ldr	r3, [pc, #500]	; (2604 <__aeabi_dadd+0x380>)
    240e:	429e      	cmp	r6, r3
    2410:	d030      	beq.n	2474 <__aeabi_dadd+0x1f0>
    2412:	0324      	lsls	r4, r4, #12
    2414:	0576      	lsls	r6, r6, #21
    2416:	0b24      	lsrs	r4, r4, #12
    2418:	0d76      	lsrs	r6, r6, #21
    241a:	e7d4      	b.n	23c6 <__aeabi_dadd+0x142>
    241c:	1a33      	subs	r3, r6, r0
    241e:	469a      	mov	sl, r3
    2420:	2b00      	cmp	r3, #0
    2422:	dd78      	ble.n	2516 <__aeabi_dadd+0x292>
    2424:	2800      	cmp	r0, #0
    2426:	d031      	beq.n	248c <__aeabi_dadd+0x208>
    2428:	4876      	ldr	r0, [pc, #472]	; (2604 <__aeabi_dadd+0x380>)
    242a:	4286      	cmp	r6, r0
    242c:	d0ae      	beq.n	238c <__aeabi_dadd+0x108>
    242e:	2080      	movs	r0, #128	; 0x80
    2430:	0400      	lsls	r0, r0, #16
    2432:	4301      	orrs	r1, r0
    2434:	4653      	mov	r3, sl
    2436:	2b38      	cmp	r3, #56	; 0x38
    2438:	dc00      	bgt.n	243c <__aeabi_dadd+0x1b8>
    243a:	e0e9      	b.n	2610 <__aeabi_dadd+0x38c>
    243c:	430a      	orrs	r2, r1
    243e:	1e51      	subs	r1, r2, #1
    2440:	418a      	sbcs	r2, r1
    2442:	2100      	movs	r1, #0
    2444:	19d2      	adds	r2, r2, r7
    2446:	42ba      	cmp	r2, r7
    2448:	41bf      	sbcs	r7, r7
    244a:	1909      	adds	r1, r1, r4
    244c:	427c      	negs	r4, r7
    244e:	0017      	movs	r7, r2
    2450:	190c      	adds	r4, r1, r4
    2452:	0223      	lsls	r3, r4, #8
    2454:	d5d3      	bpl.n	23fe <__aeabi_dadd+0x17a>
    2456:	4b6b      	ldr	r3, [pc, #428]	; (2604 <__aeabi_dadd+0x380>)
    2458:	3601      	adds	r6, #1
    245a:	429e      	cmp	r6, r3
    245c:	d100      	bne.n	2460 <__aeabi_dadd+0x1dc>
    245e:	e13a      	b.n	26d6 <__aeabi_dadd+0x452>
    2460:	2001      	movs	r0, #1
    2462:	4b69      	ldr	r3, [pc, #420]	; (2608 <__aeabi_dadd+0x384>)
    2464:	401c      	ands	r4, r3
    2466:	087b      	lsrs	r3, r7, #1
    2468:	4007      	ands	r7, r0
    246a:	431f      	orrs	r7, r3
    246c:	07e0      	lsls	r0, r4, #31
    246e:	4307      	orrs	r7, r0
    2470:	0864      	lsrs	r4, r4, #1
    2472:	e78b      	b.n	238c <__aeabi_dadd+0x108>
    2474:	0023      	movs	r3, r4
    2476:	433b      	orrs	r3, r7
    2478:	d100      	bne.n	247c <__aeabi_dadd+0x1f8>
    247a:	e1cb      	b.n	2814 <__aeabi_dadd+0x590>
    247c:	2280      	movs	r2, #128	; 0x80
    247e:	0312      	lsls	r2, r2, #12
    2480:	4314      	orrs	r4, r2
    2482:	0324      	lsls	r4, r4, #12
    2484:	0b24      	lsrs	r4, r4, #12
    2486:	e79e      	b.n	23c6 <__aeabi_dadd+0x142>
    2488:	002e      	movs	r6, r5
    248a:	e77f      	b.n	238c <__aeabi_dadd+0x108>
    248c:	0008      	movs	r0, r1
    248e:	4310      	orrs	r0, r2
    2490:	d100      	bne.n	2494 <__aeabi_dadd+0x210>
    2492:	e0b4      	b.n	25fe <__aeabi_dadd+0x37a>
    2494:	1e58      	subs	r0, r3, #1
    2496:	2800      	cmp	r0, #0
    2498:	d000      	beq.n	249c <__aeabi_dadd+0x218>
    249a:	e0de      	b.n	265a <__aeabi_dadd+0x3d6>
    249c:	18ba      	adds	r2, r7, r2
    249e:	42ba      	cmp	r2, r7
    24a0:	419b      	sbcs	r3, r3
    24a2:	1864      	adds	r4, r4, r1
    24a4:	425b      	negs	r3, r3
    24a6:	18e4      	adds	r4, r4, r3
    24a8:	0017      	movs	r7, r2
    24aa:	2601      	movs	r6, #1
    24ac:	0223      	lsls	r3, r4, #8
    24ae:	d5a6      	bpl.n	23fe <__aeabi_dadd+0x17a>
    24b0:	2602      	movs	r6, #2
    24b2:	e7d5      	b.n	2460 <__aeabi_dadd+0x1dc>
    24b4:	2d00      	cmp	r5, #0
    24b6:	d16e      	bne.n	2596 <__aeabi_dadd+0x312>
    24b8:	1c70      	adds	r0, r6, #1
    24ba:	0540      	lsls	r0, r0, #21
    24bc:	0d40      	lsrs	r0, r0, #21
    24be:	2801      	cmp	r0, #1
    24c0:	dc00      	bgt.n	24c4 <__aeabi_dadd+0x240>
    24c2:	e0f9      	b.n	26b8 <__aeabi_dadd+0x434>
    24c4:	1ab8      	subs	r0, r7, r2
    24c6:	4684      	mov	ip, r0
    24c8:	4287      	cmp	r7, r0
    24ca:	4180      	sbcs	r0, r0
    24cc:	1ae5      	subs	r5, r4, r3
    24ce:	4240      	negs	r0, r0
    24d0:	1a2d      	subs	r5, r5, r0
    24d2:	0228      	lsls	r0, r5, #8
    24d4:	d400      	bmi.n	24d8 <__aeabi_dadd+0x254>
    24d6:	e089      	b.n	25ec <__aeabi_dadd+0x368>
    24d8:	1bd7      	subs	r7, r2, r7
    24da:	42ba      	cmp	r2, r7
    24dc:	4192      	sbcs	r2, r2
    24de:	1b1c      	subs	r4, r3, r4
    24e0:	4252      	negs	r2, r2
    24e2:	1aa5      	subs	r5, r4, r2
    24e4:	46d8      	mov	r8, fp
    24e6:	e729      	b.n	233c <__aeabi_dadd+0xb8>
    24e8:	4645      	mov	r5, r8
    24ea:	2400      	movs	r4, #0
    24ec:	2700      	movs	r7, #0
    24ee:	e76a      	b.n	23c6 <__aeabi_dadd+0x142>
    24f0:	4c45      	ldr	r4, [pc, #276]	; (2608 <__aeabi_dadd+0x384>)
    24f2:	1af6      	subs	r6, r6, r3
    24f4:	402c      	ands	r4, r5
    24f6:	e749      	b.n	238c <__aeabi_dadd+0x108>
    24f8:	003d      	movs	r5, r7
    24fa:	3828      	subs	r0, #40	; 0x28
    24fc:	4085      	lsls	r5, r0
    24fe:	2700      	movs	r7, #0
    2500:	e72e      	b.n	2360 <__aeabi_dadd+0xdc>
    2502:	0038      	movs	r0, r7
    2504:	f001 fb04 	bl	3b10 <__clzsi2>
    2508:	3020      	adds	r0, #32
    250a:	e71d      	b.n	2348 <__aeabi_dadd+0xc4>
    250c:	430a      	orrs	r2, r1
    250e:	1e51      	subs	r1, r2, #1
    2510:	418a      	sbcs	r2, r1
    2512:	2100      	movs	r1, #0
    2514:	e707      	b.n	2326 <__aeabi_dadd+0xa2>
    2516:	2b00      	cmp	r3, #0
    2518:	d000      	beq.n	251c <__aeabi_dadd+0x298>
    251a:	e0f3      	b.n	2704 <__aeabi_dadd+0x480>
    251c:	1c70      	adds	r0, r6, #1
    251e:	0543      	lsls	r3, r0, #21
    2520:	0d5b      	lsrs	r3, r3, #21
    2522:	2b01      	cmp	r3, #1
    2524:	dc00      	bgt.n	2528 <__aeabi_dadd+0x2a4>
    2526:	e0ad      	b.n	2684 <__aeabi_dadd+0x400>
    2528:	4b36      	ldr	r3, [pc, #216]	; (2604 <__aeabi_dadd+0x380>)
    252a:	4298      	cmp	r0, r3
    252c:	d100      	bne.n	2530 <__aeabi_dadd+0x2ac>
    252e:	e0d1      	b.n	26d4 <__aeabi_dadd+0x450>
    2530:	18ba      	adds	r2, r7, r2
    2532:	42ba      	cmp	r2, r7
    2534:	41bf      	sbcs	r7, r7
    2536:	1864      	adds	r4, r4, r1
    2538:	427f      	negs	r7, r7
    253a:	19e4      	adds	r4, r4, r7
    253c:	07e7      	lsls	r7, r4, #31
    253e:	0852      	lsrs	r2, r2, #1
    2540:	4317      	orrs	r7, r2
    2542:	0864      	lsrs	r4, r4, #1
    2544:	0006      	movs	r6, r0
    2546:	e721      	b.n	238c <__aeabi_dadd+0x108>
    2548:	482e      	ldr	r0, [pc, #184]	; (2604 <__aeabi_dadd+0x380>)
    254a:	4285      	cmp	r5, r0
    254c:	d100      	bne.n	2550 <__aeabi_dadd+0x2cc>
    254e:	e093      	b.n	2678 <__aeabi_dadd+0x3f4>
    2550:	001d      	movs	r5, r3
    2552:	e6d0      	b.n	22f6 <__aeabi_dadd+0x72>
    2554:	0029      	movs	r1, r5
    2556:	3e1f      	subs	r6, #31
    2558:	40f1      	lsrs	r1, r6
    255a:	2b20      	cmp	r3, #32
    255c:	d100      	bne.n	2560 <__aeabi_dadd+0x2dc>
    255e:	e08d      	b.n	267c <__aeabi_dadd+0x3f8>
    2560:	2240      	movs	r2, #64	; 0x40
    2562:	1ad3      	subs	r3, r2, r3
    2564:	409d      	lsls	r5, r3
    2566:	432f      	orrs	r7, r5
    2568:	1e7d      	subs	r5, r7, #1
    256a:	41af      	sbcs	r7, r5
    256c:	2400      	movs	r4, #0
    256e:	430f      	orrs	r7, r1
    2570:	2600      	movs	r6, #0
    2572:	e744      	b.n	23fe <__aeabi_dadd+0x17a>
    2574:	002b      	movs	r3, r5
    2576:	0008      	movs	r0, r1
    2578:	3b20      	subs	r3, #32
    257a:	40d8      	lsrs	r0, r3
    257c:	0003      	movs	r3, r0
    257e:	2d20      	cmp	r5, #32
    2580:	d100      	bne.n	2584 <__aeabi_dadd+0x300>
    2582:	e07d      	b.n	2680 <__aeabi_dadd+0x3fc>
    2584:	2040      	movs	r0, #64	; 0x40
    2586:	1b45      	subs	r5, r0, r5
    2588:	40a9      	lsls	r1, r5
    258a:	430a      	orrs	r2, r1
    258c:	1e51      	subs	r1, r2, #1
    258e:	418a      	sbcs	r2, r1
    2590:	2100      	movs	r1, #0
    2592:	431a      	orrs	r2, r3
    2594:	e6c7      	b.n	2326 <__aeabi_dadd+0xa2>
    2596:	2e00      	cmp	r6, #0
    2598:	d050      	beq.n	263c <__aeabi_dadd+0x3b8>
    259a:	4e1a      	ldr	r6, [pc, #104]	; (2604 <__aeabi_dadd+0x380>)
    259c:	42b0      	cmp	r0, r6
    259e:	d057      	beq.n	2650 <__aeabi_dadd+0x3cc>
    25a0:	2680      	movs	r6, #128	; 0x80
    25a2:	426b      	negs	r3, r5
    25a4:	4699      	mov	r9, r3
    25a6:	0436      	lsls	r6, r6, #16
    25a8:	4334      	orrs	r4, r6
    25aa:	464b      	mov	r3, r9
    25ac:	2b38      	cmp	r3, #56	; 0x38
    25ae:	dd00      	ble.n	25b2 <__aeabi_dadd+0x32e>
    25b0:	e0d6      	b.n	2760 <__aeabi_dadd+0x4dc>
    25b2:	2b1f      	cmp	r3, #31
    25b4:	dd00      	ble.n	25b8 <__aeabi_dadd+0x334>
    25b6:	e135      	b.n	2824 <__aeabi_dadd+0x5a0>
    25b8:	2620      	movs	r6, #32
    25ba:	1af5      	subs	r5, r6, r3
    25bc:	0026      	movs	r6, r4
    25be:	40ae      	lsls	r6, r5
    25c0:	46b2      	mov	sl, r6
    25c2:	003e      	movs	r6, r7
    25c4:	40de      	lsrs	r6, r3
    25c6:	46ac      	mov	ip, r5
    25c8:	0035      	movs	r5, r6
    25ca:	4656      	mov	r6, sl
    25cc:	432e      	orrs	r6, r5
    25ce:	4665      	mov	r5, ip
    25d0:	40af      	lsls	r7, r5
    25d2:	1e7d      	subs	r5, r7, #1
    25d4:	41af      	sbcs	r7, r5
    25d6:	40dc      	lsrs	r4, r3
    25d8:	4337      	orrs	r7, r6
    25da:	1bd7      	subs	r7, r2, r7
    25dc:	42ba      	cmp	r2, r7
    25de:	4192      	sbcs	r2, r2
    25e0:	1b0c      	subs	r4, r1, r4
    25e2:	4252      	negs	r2, r2
    25e4:	1aa4      	subs	r4, r4, r2
    25e6:	0006      	movs	r6, r0
    25e8:	46d8      	mov	r8, fp
    25ea:	e6a3      	b.n	2334 <__aeabi_dadd+0xb0>
    25ec:	4664      	mov	r4, ip
    25ee:	4667      	mov	r7, ip
    25f0:	432c      	orrs	r4, r5
    25f2:	d000      	beq.n	25f6 <__aeabi_dadd+0x372>
    25f4:	e6a2      	b.n	233c <__aeabi_dadd+0xb8>
    25f6:	2500      	movs	r5, #0
    25f8:	2600      	movs	r6, #0
    25fa:	2700      	movs	r7, #0
    25fc:	e706      	b.n	240c <__aeabi_dadd+0x188>
    25fe:	001e      	movs	r6, r3
    2600:	e6c4      	b.n	238c <__aeabi_dadd+0x108>
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	000007ff 	.word	0x000007ff
    2608:	ff7fffff 	.word	0xff7fffff
    260c:	800fffff 	.word	0x800fffff
    2610:	2b1f      	cmp	r3, #31
    2612:	dc63      	bgt.n	26dc <__aeabi_dadd+0x458>
    2614:	2020      	movs	r0, #32
    2616:	1ac3      	subs	r3, r0, r3
    2618:	0008      	movs	r0, r1
    261a:	4098      	lsls	r0, r3
    261c:	469c      	mov	ip, r3
    261e:	4683      	mov	fp, r0
    2620:	4653      	mov	r3, sl
    2622:	0010      	movs	r0, r2
    2624:	40d8      	lsrs	r0, r3
    2626:	0003      	movs	r3, r0
    2628:	4658      	mov	r0, fp
    262a:	4318      	orrs	r0, r3
    262c:	4663      	mov	r3, ip
    262e:	409a      	lsls	r2, r3
    2630:	1e53      	subs	r3, r2, #1
    2632:	419a      	sbcs	r2, r3
    2634:	4653      	mov	r3, sl
    2636:	4302      	orrs	r2, r0
    2638:	40d9      	lsrs	r1, r3
    263a:	e703      	b.n	2444 <__aeabi_dadd+0x1c0>
    263c:	0026      	movs	r6, r4
    263e:	433e      	orrs	r6, r7
    2640:	d006      	beq.n	2650 <__aeabi_dadd+0x3cc>
    2642:	43eb      	mvns	r3, r5
    2644:	4699      	mov	r9, r3
    2646:	2b00      	cmp	r3, #0
    2648:	d0c7      	beq.n	25da <__aeabi_dadd+0x356>
    264a:	4e94      	ldr	r6, [pc, #592]	; (289c <__aeabi_dadd+0x618>)
    264c:	42b0      	cmp	r0, r6
    264e:	d1ac      	bne.n	25aa <__aeabi_dadd+0x326>
    2650:	000c      	movs	r4, r1
    2652:	0017      	movs	r7, r2
    2654:	0006      	movs	r6, r0
    2656:	46d8      	mov	r8, fp
    2658:	e698      	b.n	238c <__aeabi_dadd+0x108>
    265a:	4b90      	ldr	r3, [pc, #576]	; (289c <__aeabi_dadd+0x618>)
    265c:	459a      	cmp	sl, r3
    265e:	d00b      	beq.n	2678 <__aeabi_dadd+0x3f4>
    2660:	4682      	mov	sl, r0
    2662:	e6e7      	b.n	2434 <__aeabi_dadd+0x1b0>
    2664:	2800      	cmp	r0, #0
    2666:	d000      	beq.n	266a <__aeabi_dadd+0x3e6>
    2668:	e09e      	b.n	27a8 <__aeabi_dadd+0x524>
    266a:	0018      	movs	r0, r3
    266c:	4310      	orrs	r0, r2
    266e:	d100      	bne.n	2672 <__aeabi_dadd+0x3ee>
    2670:	e0e9      	b.n	2846 <__aeabi_dadd+0x5c2>
    2672:	001c      	movs	r4, r3
    2674:	0017      	movs	r7, r2
    2676:	46d8      	mov	r8, fp
    2678:	4e88      	ldr	r6, [pc, #544]	; (289c <__aeabi_dadd+0x618>)
    267a:	e687      	b.n	238c <__aeabi_dadd+0x108>
    267c:	2500      	movs	r5, #0
    267e:	e772      	b.n	2566 <__aeabi_dadd+0x2e2>
    2680:	2100      	movs	r1, #0
    2682:	e782      	b.n	258a <__aeabi_dadd+0x306>
    2684:	0023      	movs	r3, r4
    2686:	433b      	orrs	r3, r7
    2688:	2e00      	cmp	r6, #0
    268a:	d000      	beq.n	268e <__aeabi_dadd+0x40a>
    268c:	e0ab      	b.n	27e6 <__aeabi_dadd+0x562>
    268e:	2b00      	cmp	r3, #0
    2690:	d100      	bne.n	2694 <__aeabi_dadd+0x410>
    2692:	e0e7      	b.n	2864 <__aeabi_dadd+0x5e0>
    2694:	000b      	movs	r3, r1
    2696:	4313      	orrs	r3, r2
    2698:	d100      	bne.n	269c <__aeabi_dadd+0x418>
    269a:	e677      	b.n	238c <__aeabi_dadd+0x108>
    269c:	18ba      	adds	r2, r7, r2
    269e:	42ba      	cmp	r2, r7
    26a0:	41bf      	sbcs	r7, r7
    26a2:	1864      	adds	r4, r4, r1
    26a4:	427f      	negs	r7, r7
    26a6:	19e4      	adds	r4, r4, r7
    26a8:	0223      	lsls	r3, r4, #8
    26aa:	d400      	bmi.n	26ae <__aeabi_dadd+0x42a>
    26ac:	e0f2      	b.n	2894 <__aeabi_dadd+0x610>
    26ae:	4b7c      	ldr	r3, [pc, #496]	; (28a0 <__aeabi_dadd+0x61c>)
    26b0:	0017      	movs	r7, r2
    26b2:	401c      	ands	r4, r3
    26b4:	0006      	movs	r6, r0
    26b6:	e669      	b.n	238c <__aeabi_dadd+0x108>
    26b8:	0020      	movs	r0, r4
    26ba:	4338      	orrs	r0, r7
    26bc:	2e00      	cmp	r6, #0
    26be:	d1d1      	bne.n	2664 <__aeabi_dadd+0x3e0>
    26c0:	2800      	cmp	r0, #0
    26c2:	d15b      	bne.n	277c <__aeabi_dadd+0x4f8>
    26c4:	001c      	movs	r4, r3
    26c6:	4314      	orrs	r4, r2
    26c8:	d100      	bne.n	26cc <__aeabi_dadd+0x448>
    26ca:	e0a8      	b.n	281e <__aeabi_dadd+0x59a>
    26cc:	001c      	movs	r4, r3
    26ce:	0017      	movs	r7, r2
    26d0:	46d8      	mov	r8, fp
    26d2:	e65b      	b.n	238c <__aeabi_dadd+0x108>
    26d4:	0006      	movs	r6, r0
    26d6:	2400      	movs	r4, #0
    26d8:	2700      	movs	r7, #0
    26da:	e697      	b.n	240c <__aeabi_dadd+0x188>
    26dc:	4650      	mov	r0, sl
    26de:	000b      	movs	r3, r1
    26e0:	3820      	subs	r0, #32
    26e2:	40c3      	lsrs	r3, r0
    26e4:	4699      	mov	r9, r3
    26e6:	4653      	mov	r3, sl
    26e8:	2b20      	cmp	r3, #32
    26ea:	d100      	bne.n	26ee <__aeabi_dadd+0x46a>
    26ec:	e095      	b.n	281a <__aeabi_dadd+0x596>
    26ee:	2340      	movs	r3, #64	; 0x40
    26f0:	4650      	mov	r0, sl
    26f2:	1a1b      	subs	r3, r3, r0
    26f4:	4099      	lsls	r1, r3
    26f6:	430a      	orrs	r2, r1
    26f8:	1e51      	subs	r1, r2, #1
    26fa:	418a      	sbcs	r2, r1
    26fc:	464b      	mov	r3, r9
    26fe:	2100      	movs	r1, #0
    2700:	431a      	orrs	r2, r3
    2702:	e69f      	b.n	2444 <__aeabi_dadd+0x1c0>
    2704:	2e00      	cmp	r6, #0
    2706:	d130      	bne.n	276a <__aeabi_dadd+0x4e6>
    2708:	0026      	movs	r6, r4
    270a:	433e      	orrs	r6, r7
    270c:	d067      	beq.n	27de <__aeabi_dadd+0x55a>
    270e:	43db      	mvns	r3, r3
    2710:	469a      	mov	sl, r3
    2712:	2b00      	cmp	r3, #0
    2714:	d01c      	beq.n	2750 <__aeabi_dadd+0x4cc>
    2716:	4e61      	ldr	r6, [pc, #388]	; (289c <__aeabi_dadd+0x618>)
    2718:	42b0      	cmp	r0, r6
    271a:	d060      	beq.n	27de <__aeabi_dadd+0x55a>
    271c:	4653      	mov	r3, sl
    271e:	2b38      	cmp	r3, #56	; 0x38
    2720:	dd00      	ble.n	2724 <__aeabi_dadd+0x4a0>
    2722:	e096      	b.n	2852 <__aeabi_dadd+0x5ce>
    2724:	2b1f      	cmp	r3, #31
    2726:	dd00      	ble.n	272a <__aeabi_dadd+0x4a6>
    2728:	e09f      	b.n	286a <__aeabi_dadd+0x5e6>
    272a:	2620      	movs	r6, #32
    272c:	1af3      	subs	r3, r6, r3
    272e:	0026      	movs	r6, r4
    2730:	409e      	lsls	r6, r3
    2732:	469c      	mov	ip, r3
    2734:	46b3      	mov	fp, r6
    2736:	4653      	mov	r3, sl
    2738:	003e      	movs	r6, r7
    273a:	40de      	lsrs	r6, r3
    273c:	0033      	movs	r3, r6
    273e:	465e      	mov	r6, fp
    2740:	431e      	orrs	r6, r3
    2742:	4663      	mov	r3, ip
    2744:	409f      	lsls	r7, r3
    2746:	1e7b      	subs	r3, r7, #1
    2748:	419f      	sbcs	r7, r3
    274a:	4653      	mov	r3, sl
    274c:	40dc      	lsrs	r4, r3
    274e:	4337      	orrs	r7, r6
    2750:	18bf      	adds	r7, r7, r2
    2752:	4297      	cmp	r7, r2
    2754:	4192      	sbcs	r2, r2
    2756:	1864      	adds	r4, r4, r1
    2758:	4252      	negs	r2, r2
    275a:	18a4      	adds	r4, r4, r2
    275c:	0006      	movs	r6, r0
    275e:	e678      	b.n	2452 <__aeabi_dadd+0x1ce>
    2760:	4327      	orrs	r7, r4
    2762:	1e7c      	subs	r4, r7, #1
    2764:	41a7      	sbcs	r7, r4
    2766:	2400      	movs	r4, #0
    2768:	e737      	b.n	25da <__aeabi_dadd+0x356>
    276a:	4e4c      	ldr	r6, [pc, #304]	; (289c <__aeabi_dadd+0x618>)
    276c:	42b0      	cmp	r0, r6
    276e:	d036      	beq.n	27de <__aeabi_dadd+0x55a>
    2770:	2680      	movs	r6, #128	; 0x80
    2772:	425b      	negs	r3, r3
    2774:	0436      	lsls	r6, r6, #16
    2776:	469a      	mov	sl, r3
    2778:	4334      	orrs	r4, r6
    277a:	e7cf      	b.n	271c <__aeabi_dadd+0x498>
    277c:	0018      	movs	r0, r3
    277e:	4310      	orrs	r0, r2
    2780:	d100      	bne.n	2784 <__aeabi_dadd+0x500>
    2782:	e603      	b.n	238c <__aeabi_dadd+0x108>
    2784:	1ab8      	subs	r0, r7, r2
    2786:	4684      	mov	ip, r0
    2788:	4567      	cmp	r7, ip
    278a:	41ad      	sbcs	r5, r5
    278c:	1ae0      	subs	r0, r4, r3
    278e:	426d      	negs	r5, r5
    2790:	1b40      	subs	r0, r0, r5
    2792:	0205      	lsls	r5, r0, #8
    2794:	d400      	bmi.n	2798 <__aeabi_dadd+0x514>
    2796:	e62c      	b.n	23f2 <__aeabi_dadd+0x16e>
    2798:	1bd7      	subs	r7, r2, r7
    279a:	42ba      	cmp	r2, r7
    279c:	4192      	sbcs	r2, r2
    279e:	1b1c      	subs	r4, r3, r4
    27a0:	4252      	negs	r2, r2
    27a2:	1aa4      	subs	r4, r4, r2
    27a4:	46d8      	mov	r8, fp
    27a6:	e5f1      	b.n	238c <__aeabi_dadd+0x108>
    27a8:	0018      	movs	r0, r3
    27aa:	4310      	orrs	r0, r2
    27ac:	d100      	bne.n	27b0 <__aeabi_dadd+0x52c>
    27ae:	e763      	b.n	2678 <__aeabi_dadd+0x3f4>
    27b0:	08f8      	lsrs	r0, r7, #3
    27b2:	0767      	lsls	r7, r4, #29
    27b4:	4307      	orrs	r7, r0
    27b6:	2080      	movs	r0, #128	; 0x80
    27b8:	08e4      	lsrs	r4, r4, #3
    27ba:	0300      	lsls	r0, r0, #12
    27bc:	4204      	tst	r4, r0
    27be:	d008      	beq.n	27d2 <__aeabi_dadd+0x54e>
    27c0:	08dd      	lsrs	r5, r3, #3
    27c2:	4205      	tst	r5, r0
    27c4:	d105      	bne.n	27d2 <__aeabi_dadd+0x54e>
    27c6:	08d2      	lsrs	r2, r2, #3
    27c8:	0759      	lsls	r1, r3, #29
    27ca:	4311      	orrs	r1, r2
    27cc:	000f      	movs	r7, r1
    27ce:	002c      	movs	r4, r5
    27d0:	46d8      	mov	r8, fp
    27d2:	0f7b      	lsrs	r3, r7, #29
    27d4:	00e4      	lsls	r4, r4, #3
    27d6:	431c      	orrs	r4, r3
    27d8:	00ff      	lsls	r7, r7, #3
    27da:	4e30      	ldr	r6, [pc, #192]	; (289c <__aeabi_dadd+0x618>)
    27dc:	e5d6      	b.n	238c <__aeabi_dadd+0x108>
    27de:	000c      	movs	r4, r1
    27e0:	0017      	movs	r7, r2
    27e2:	0006      	movs	r6, r0
    27e4:	e5d2      	b.n	238c <__aeabi_dadd+0x108>
    27e6:	2b00      	cmp	r3, #0
    27e8:	d038      	beq.n	285c <__aeabi_dadd+0x5d8>
    27ea:	000b      	movs	r3, r1
    27ec:	4313      	orrs	r3, r2
    27ee:	d100      	bne.n	27f2 <__aeabi_dadd+0x56e>
    27f0:	e742      	b.n	2678 <__aeabi_dadd+0x3f4>
    27f2:	08f8      	lsrs	r0, r7, #3
    27f4:	0767      	lsls	r7, r4, #29
    27f6:	4307      	orrs	r7, r0
    27f8:	2080      	movs	r0, #128	; 0x80
    27fa:	08e4      	lsrs	r4, r4, #3
    27fc:	0300      	lsls	r0, r0, #12
    27fe:	4204      	tst	r4, r0
    2800:	d0e7      	beq.n	27d2 <__aeabi_dadd+0x54e>
    2802:	08cb      	lsrs	r3, r1, #3
    2804:	4203      	tst	r3, r0
    2806:	d1e4      	bne.n	27d2 <__aeabi_dadd+0x54e>
    2808:	08d2      	lsrs	r2, r2, #3
    280a:	0749      	lsls	r1, r1, #29
    280c:	4311      	orrs	r1, r2
    280e:	000f      	movs	r7, r1
    2810:	001c      	movs	r4, r3
    2812:	e7de      	b.n	27d2 <__aeabi_dadd+0x54e>
    2814:	2700      	movs	r7, #0
    2816:	2400      	movs	r4, #0
    2818:	e5d5      	b.n	23c6 <__aeabi_dadd+0x142>
    281a:	2100      	movs	r1, #0
    281c:	e76b      	b.n	26f6 <__aeabi_dadd+0x472>
    281e:	2500      	movs	r5, #0
    2820:	2700      	movs	r7, #0
    2822:	e5f3      	b.n	240c <__aeabi_dadd+0x188>
    2824:	464e      	mov	r6, r9
    2826:	0025      	movs	r5, r4
    2828:	3e20      	subs	r6, #32
    282a:	40f5      	lsrs	r5, r6
    282c:	464b      	mov	r3, r9
    282e:	002e      	movs	r6, r5
    2830:	2b20      	cmp	r3, #32
    2832:	d02d      	beq.n	2890 <__aeabi_dadd+0x60c>
    2834:	2540      	movs	r5, #64	; 0x40
    2836:	1aed      	subs	r5, r5, r3
    2838:	40ac      	lsls	r4, r5
    283a:	4327      	orrs	r7, r4
    283c:	1e7c      	subs	r4, r7, #1
    283e:	41a7      	sbcs	r7, r4
    2840:	2400      	movs	r4, #0
    2842:	4337      	orrs	r7, r6
    2844:	e6c9      	b.n	25da <__aeabi_dadd+0x356>
    2846:	2480      	movs	r4, #128	; 0x80
    2848:	2500      	movs	r5, #0
    284a:	0324      	lsls	r4, r4, #12
    284c:	4e13      	ldr	r6, [pc, #76]	; (289c <__aeabi_dadd+0x618>)
    284e:	2700      	movs	r7, #0
    2850:	e5dc      	b.n	240c <__aeabi_dadd+0x188>
    2852:	4327      	orrs	r7, r4
    2854:	1e7c      	subs	r4, r7, #1
    2856:	41a7      	sbcs	r7, r4
    2858:	2400      	movs	r4, #0
    285a:	e779      	b.n	2750 <__aeabi_dadd+0x4cc>
    285c:	000c      	movs	r4, r1
    285e:	0017      	movs	r7, r2
    2860:	4e0e      	ldr	r6, [pc, #56]	; (289c <__aeabi_dadd+0x618>)
    2862:	e593      	b.n	238c <__aeabi_dadd+0x108>
    2864:	000c      	movs	r4, r1
    2866:	0017      	movs	r7, r2
    2868:	e590      	b.n	238c <__aeabi_dadd+0x108>
    286a:	4656      	mov	r6, sl
    286c:	0023      	movs	r3, r4
    286e:	3e20      	subs	r6, #32
    2870:	40f3      	lsrs	r3, r6
    2872:	4699      	mov	r9, r3
    2874:	4653      	mov	r3, sl
    2876:	2b20      	cmp	r3, #32
    2878:	d00e      	beq.n	2898 <__aeabi_dadd+0x614>
    287a:	2340      	movs	r3, #64	; 0x40
    287c:	4656      	mov	r6, sl
    287e:	1b9b      	subs	r3, r3, r6
    2880:	409c      	lsls	r4, r3
    2882:	4327      	orrs	r7, r4
    2884:	1e7c      	subs	r4, r7, #1
    2886:	41a7      	sbcs	r7, r4
    2888:	464b      	mov	r3, r9
    288a:	2400      	movs	r4, #0
    288c:	431f      	orrs	r7, r3
    288e:	e75f      	b.n	2750 <__aeabi_dadd+0x4cc>
    2890:	2400      	movs	r4, #0
    2892:	e7d2      	b.n	283a <__aeabi_dadd+0x5b6>
    2894:	0017      	movs	r7, r2
    2896:	e5b2      	b.n	23fe <__aeabi_dadd+0x17a>
    2898:	2400      	movs	r4, #0
    289a:	e7f2      	b.n	2882 <__aeabi_dadd+0x5fe>
    289c:	000007ff 	.word	0x000007ff
    28a0:	ff7fffff 	.word	0xff7fffff

000028a4 <__aeabi_ddiv>:
    28a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28a6:	4657      	mov	r7, sl
    28a8:	4645      	mov	r5, r8
    28aa:	46de      	mov	lr, fp
    28ac:	464e      	mov	r6, r9
    28ae:	b5e0      	push	{r5, r6, r7, lr}
    28b0:	004c      	lsls	r4, r1, #1
    28b2:	030e      	lsls	r6, r1, #12
    28b4:	b087      	sub	sp, #28
    28b6:	4683      	mov	fp, r0
    28b8:	4692      	mov	sl, r2
    28ba:	001d      	movs	r5, r3
    28bc:	4680      	mov	r8, r0
    28be:	0b36      	lsrs	r6, r6, #12
    28c0:	0d64      	lsrs	r4, r4, #21
    28c2:	0fcf      	lsrs	r7, r1, #31
    28c4:	2c00      	cmp	r4, #0
    28c6:	d04f      	beq.n	2968 <__aeabi_ddiv+0xc4>
    28c8:	4b6f      	ldr	r3, [pc, #444]	; (2a88 <__aeabi_ddiv+0x1e4>)
    28ca:	429c      	cmp	r4, r3
    28cc:	d035      	beq.n	293a <__aeabi_ddiv+0x96>
    28ce:	2380      	movs	r3, #128	; 0x80
    28d0:	0f42      	lsrs	r2, r0, #29
    28d2:	041b      	lsls	r3, r3, #16
    28d4:	00f6      	lsls	r6, r6, #3
    28d6:	4313      	orrs	r3, r2
    28d8:	4333      	orrs	r3, r6
    28da:	4699      	mov	r9, r3
    28dc:	00c3      	lsls	r3, r0, #3
    28de:	4698      	mov	r8, r3
    28e0:	4b6a      	ldr	r3, [pc, #424]	; (2a8c <__aeabi_ddiv+0x1e8>)
    28e2:	2600      	movs	r6, #0
    28e4:	469c      	mov	ip, r3
    28e6:	2300      	movs	r3, #0
    28e8:	4464      	add	r4, ip
    28ea:	9303      	str	r3, [sp, #12]
    28ec:	032b      	lsls	r3, r5, #12
    28ee:	0b1b      	lsrs	r3, r3, #12
    28f0:	469b      	mov	fp, r3
    28f2:	006b      	lsls	r3, r5, #1
    28f4:	0fed      	lsrs	r5, r5, #31
    28f6:	4650      	mov	r0, sl
    28f8:	0d5b      	lsrs	r3, r3, #21
    28fa:	9501      	str	r5, [sp, #4]
    28fc:	d05e      	beq.n	29bc <__aeabi_ddiv+0x118>
    28fe:	4a62      	ldr	r2, [pc, #392]	; (2a88 <__aeabi_ddiv+0x1e4>)
    2900:	4293      	cmp	r3, r2
    2902:	d053      	beq.n	29ac <__aeabi_ddiv+0x108>
    2904:	465a      	mov	r2, fp
    2906:	00d1      	lsls	r1, r2, #3
    2908:	2280      	movs	r2, #128	; 0x80
    290a:	0f40      	lsrs	r0, r0, #29
    290c:	0412      	lsls	r2, r2, #16
    290e:	4302      	orrs	r2, r0
    2910:	430a      	orrs	r2, r1
    2912:	4693      	mov	fp, r2
    2914:	4652      	mov	r2, sl
    2916:	00d1      	lsls	r1, r2, #3
    2918:	4a5c      	ldr	r2, [pc, #368]	; (2a8c <__aeabi_ddiv+0x1e8>)
    291a:	4694      	mov	ip, r2
    291c:	2200      	movs	r2, #0
    291e:	4463      	add	r3, ip
    2920:	0038      	movs	r0, r7
    2922:	4068      	eors	r0, r5
    2924:	4684      	mov	ip, r0
    2926:	9002      	str	r0, [sp, #8]
    2928:	1ae4      	subs	r4, r4, r3
    292a:	4316      	orrs	r6, r2
    292c:	2e0f      	cmp	r6, #15
    292e:	d900      	bls.n	2932 <__aeabi_ddiv+0x8e>
    2930:	e0b4      	b.n	2a9c <__aeabi_ddiv+0x1f8>
    2932:	4b57      	ldr	r3, [pc, #348]	; (2a90 <__aeabi_ddiv+0x1ec>)
    2934:	00b6      	lsls	r6, r6, #2
    2936:	599b      	ldr	r3, [r3, r6]
    2938:	469f      	mov	pc, r3
    293a:	0003      	movs	r3, r0
    293c:	4333      	orrs	r3, r6
    293e:	4699      	mov	r9, r3
    2940:	d16c      	bne.n	2a1c <__aeabi_ddiv+0x178>
    2942:	2300      	movs	r3, #0
    2944:	4698      	mov	r8, r3
    2946:	3302      	adds	r3, #2
    2948:	2608      	movs	r6, #8
    294a:	9303      	str	r3, [sp, #12]
    294c:	e7ce      	b.n	28ec <__aeabi_ddiv+0x48>
    294e:	46cb      	mov	fp, r9
    2950:	4641      	mov	r1, r8
    2952:	9a03      	ldr	r2, [sp, #12]
    2954:	9701      	str	r7, [sp, #4]
    2956:	2a02      	cmp	r2, #2
    2958:	d165      	bne.n	2a26 <__aeabi_ddiv+0x182>
    295a:	9b01      	ldr	r3, [sp, #4]
    295c:	4c4a      	ldr	r4, [pc, #296]	; (2a88 <__aeabi_ddiv+0x1e4>)
    295e:	469c      	mov	ip, r3
    2960:	2300      	movs	r3, #0
    2962:	2200      	movs	r2, #0
    2964:	4698      	mov	r8, r3
    2966:	e06b      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2968:	0003      	movs	r3, r0
    296a:	4333      	orrs	r3, r6
    296c:	4699      	mov	r9, r3
    296e:	d04e      	beq.n	2a0e <__aeabi_ddiv+0x16a>
    2970:	2e00      	cmp	r6, #0
    2972:	d100      	bne.n	2976 <__aeabi_ddiv+0xd2>
    2974:	e1bc      	b.n	2cf0 <__aeabi_ddiv+0x44c>
    2976:	0030      	movs	r0, r6
    2978:	f001 f8ca 	bl	3b10 <__clzsi2>
    297c:	0003      	movs	r3, r0
    297e:	3b0b      	subs	r3, #11
    2980:	2b1c      	cmp	r3, #28
    2982:	dd00      	ble.n	2986 <__aeabi_ddiv+0xe2>
    2984:	e1ac      	b.n	2ce0 <__aeabi_ddiv+0x43c>
    2986:	221d      	movs	r2, #29
    2988:	1ad3      	subs	r3, r2, r3
    298a:	465a      	mov	r2, fp
    298c:	0001      	movs	r1, r0
    298e:	40da      	lsrs	r2, r3
    2990:	3908      	subs	r1, #8
    2992:	408e      	lsls	r6, r1
    2994:	0013      	movs	r3, r2
    2996:	4333      	orrs	r3, r6
    2998:	4699      	mov	r9, r3
    299a:	465b      	mov	r3, fp
    299c:	408b      	lsls	r3, r1
    299e:	4698      	mov	r8, r3
    29a0:	2300      	movs	r3, #0
    29a2:	4c3c      	ldr	r4, [pc, #240]	; (2a94 <__aeabi_ddiv+0x1f0>)
    29a4:	2600      	movs	r6, #0
    29a6:	1a24      	subs	r4, r4, r0
    29a8:	9303      	str	r3, [sp, #12]
    29aa:	e79f      	b.n	28ec <__aeabi_ddiv+0x48>
    29ac:	4651      	mov	r1, sl
    29ae:	465a      	mov	r2, fp
    29b0:	4311      	orrs	r1, r2
    29b2:	d129      	bne.n	2a08 <__aeabi_ddiv+0x164>
    29b4:	2200      	movs	r2, #0
    29b6:	4693      	mov	fp, r2
    29b8:	3202      	adds	r2, #2
    29ba:	e7b1      	b.n	2920 <__aeabi_ddiv+0x7c>
    29bc:	4659      	mov	r1, fp
    29be:	4301      	orrs	r1, r0
    29c0:	d01e      	beq.n	2a00 <__aeabi_ddiv+0x15c>
    29c2:	465b      	mov	r3, fp
    29c4:	2b00      	cmp	r3, #0
    29c6:	d100      	bne.n	29ca <__aeabi_ddiv+0x126>
    29c8:	e19e      	b.n	2d08 <__aeabi_ddiv+0x464>
    29ca:	4658      	mov	r0, fp
    29cc:	f001 f8a0 	bl	3b10 <__clzsi2>
    29d0:	0003      	movs	r3, r0
    29d2:	3b0b      	subs	r3, #11
    29d4:	2b1c      	cmp	r3, #28
    29d6:	dd00      	ble.n	29da <__aeabi_ddiv+0x136>
    29d8:	e18f      	b.n	2cfa <__aeabi_ddiv+0x456>
    29da:	0002      	movs	r2, r0
    29dc:	4659      	mov	r1, fp
    29de:	3a08      	subs	r2, #8
    29e0:	4091      	lsls	r1, r2
    29e2:	468b      	mov	fp, r1
    29e4:	211d      	movs	r1, #29
    29e6:	1acb      	subs	r3, r1, r3
    29e8:	4651      	mov	r1, sl
    29ea:	40d9      	lsrs	r1, r3
    29ec:	000b      	movs	r3, r1
    29ee:	4659      	mov	r1, fp
    29f0:	430b      	orrs	r3, r1
    29f2:	4651      	mov	r1, sl
    29f4:	469b      	mov	fp, r3
    29f6:	4091      	lsls	r1, r2
    29f8:	4b26      	ldr	r3, [pc, #152]	; (2a94 <__aeabi_ddiv+0x1f0>)
    29fa:	2200      	movs	r2, #0
    29fc:	1a1b      	subs	r3, r3, r0
    29fe:	e78f      	b.n	2920 <__aeabi_ddiv+0x7c>
    2a00:	2300      	movs	r3, #0
    2a02:	2201      	movs	r2, #1
    2a04:	469b      	mov	fp, r3
    2a06:	e78b      	b.n	2920 <__aeabi_ddiv+0x7c>
    2a08:	4651      	mov	r1, sl
    2a0a:	2203      	movs	r2, #3
    2a0c:	e788      	b.n	2920 <__aeabi_ddiv+0x7c>
    2a0e:	2300      	movs	r3, #0
    2a10:	4698      	mov	r8, r3
    2a12:	3301      	adds	r3, #1
    2a14:	2604      	movs	r6, #4
    2a16:	2400      	movs	r4, #0
    2a18:	9303      	str	r3, [sp, #12]
    2a1a:	e767      	b.n	28ec <__aeabi_ddiv+0x48>
    2a1c:	2303      	movs	r3, #3
    2a1e:	46b1      	mov	r9, r6
    2a20:	9303      	str	r3, [sp, #12]
    2a22:	260c      	movs	r6, #12
    2a24:	e762      	b.n	28ec <__aeabi_ddiv+0x48>
    2a26:	2a03      	cmp	r2, #3
    2a28:	d100      	bne.n	2a2c <__aeabi_ddiv+0x188>
    2a2a:	e25c      	b.n	2ee6 <__aeabi_ddiv+0x642>
    2a2c:	9b01      	ldr	r3, [sp, #4]
    2a2e:	2a01      	cmp	r2, #1
    2a30:	d000      	beq.n	2a34 <__aeabi_ddiv+0x190>
    2a32:	e1e4      	b.n	2dfe <__aeabi_ddiv+0x55a>
    2a34:	4013      	ands	r3, r2
    2a36:	469c      	mov	ip, r3
    2a38:	2300      	movs	r3, #0
    2a3a:	2400      	movs	r4, #0
    2a3c:	2200      	movs	r2, #0
    2a3e:	4698      	mov	r8, r3
    2a40:	2100      	movs	r1, #0
    2a42:	0312      	lsls	r2, r2, #12
    2a44:	0b13      	lsrs	r3, r2, #12
    2a46:	0d0a      	lsrs	r2, r1, #20
    2a48:	0512      	lsls	r2, r2, #20
    2a4a:	431a      	orrs	r2, r3
    2a4c:	0523      	lsls	r3, r4, #20
    2a4e:	4c12      	ldr	r4, [pc, #72]	; (2a98 <__aeabi_ddiv+0x1f4>)
    2a50:	4640      	mov	r0, r8
    2a52:	4022      	ands	r2, r4
    2a54:	4313      	orrs	r3, r2
    2a56:	4662      	mov	r2, ip
    2a58:	005b      	lsls	r3, r3, #1
    2a5a:	07d2      	lsls	r2, r2, #31
    2a5c:	085b      	lsrs	r3, r3, #1
    2a5e:	4313      	orrs	r3, r2
    2a60:	0019      	movs	r1, r3
    2a62:	b007      	add	sp, #28
    2a64:	bc3c      	pop	{r2, r3, r4, r5}
    2a66:	4690      	mov	r8, r2
    2a68:	4699      	mov	r9, r3
    2a6a:	46a2      	mov	sl, r4
    2a6c:	46ab      	mov	fp, r5
    2a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a70:	2300      	movs	r3, #0
    2a72:	2280      	movs	r2, #128	; 0x80
    2a74:	469c      	mov	ip, r3
    2a76:	0312      	lsls	r2, r2, #12
    2a78:	4698      	mov	r8, r3
    2a7a:	4c03      	ldr	r4, [pc, #12]	; (2a88 <__aeabi_ddiv+0x1e4>)
    2a7c:	e7e0      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2a7e:	2300      	movs	r3, #0
    2a80:	4c01      	ldr	r4, [pc, #4]	; (2a88 <__aeabi_ddiv+0x1e4>)
    2a82:	2200      	movs	r2, #0
    2a84:	4698      	mov	r8, r3
    2a86:	e7db      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2a88:	000007ff 	.word	0x000007ff
    2a8c:	fffffc01 	.word	0xfffffc01
    2a90:	00003be4 	.word	0x00003be4
    2a94:	fffffc0d 	.word	0xfffffc0d
    2a98:	800fffff 	.word	0x800fffff
    2a9c:	45d9      	cmp	r9, fp
    2a9e:	d900      	bls.n	2aa2 <__aeabi_ddiv+0x1fe>
    2aa0:	e139      	b.n	2d16 <__aeabi_ddiv+0x472>
    2aa2:	d100      	bne.n	2aa6 <__aeabi_ddiv+0x202>
    2aa4:	e134      	b.n	2d10 <__aeabi_ddiv+0x46c>
    2aa6:	2300      	movs	r3, #0
    2aa8:	4646      	mov	r6, r8
    2aaa:	464d      	mov	r5, r9
    2aac:	469a      	mov	sl, r3
    2aae:	3c01      	subs	r4, #1
    2ab0:	465b      	mov	r3, fp
    2ab2:	0e0a      	lsrs	r2, r1, #24
    2ab4:	021b      	lsls	r3, r3, #8
    2ab6:	431a      	orrs	r2, r3
    2ab8:	020b      	lsls	r3, r1, #8
    2aba:	0c17      	lsrs	r7, r2, #16
    2abc:	9303      	str	r3, [sp, #12]
    2abe:	0413      	lsls	r3, r2, #16
    2ac0:	0c1b      	lsrs	r3, r3, #16
    2ac2:	0039      	movs	r1, r7
    2ac4:	0028      	movs	r0, r5
    2ac6:	4690      	mov	r8, r2
    2ac8:	9301      	str	r3, [sp, #4]
    2aca:	f7ff fb4f 	bl	216c <__udivsi3>
    2ace:	0002      	movs	r2, r0
    2ad0:	9b01      	ldr	r3, [sp, #4]
    2ad2:	4683      	mov	fp, r0
    2ad4:	435a      	muls	r2, r3
    2ad6:	0028      	movs	r0, r5
    2ad8:	0039      	movs	r1, r7
    2ada:	4691      	mov	r9, r2
    2adc:	f7ff fbcc 	bl	2278 <__aeabi_uidivmod>
    2ae0:	0c35      	lsrs	r5, r6, #16
    2ae2:	0409      	lsls	r1, r1, #16
    2ae4:	430d      	orrs	r5, r1
    2ae6:	45a9      	cmp	r9, r5
    2ae8:	d90d      	bls.n	2b06 <__aeabi_ddiv+0x262>
    2aea:	465b      	mov	r3, fp
    2aec:	4445      	add	r5, r8
    2aee:	3b01      	subs	r3, #1
    2af0:	45a8      	cmp	r8, r5
    2af2:	d900      	bls.n	2af6 <__aeabi_ddiv+0x252>
    2af4:	e13a      	b.n	2d6c <__aeabi_ddiv+0x4c8>
    2af6:	45a9      	cmp	r9, r5
    2af8:	d800      	bhi.n	2afc <__aeabi_ddiv+0x258>
    2afa:	e137      	b.n	2d6c <__aeabi_ddiv+0x4c8>
    2afc:	2302      	movs	r3, #2
    2afe:	425b      	negs	r3, r3
    2b00:	469c      	mov	ip, r3
    2b02:	4445      	add	r5, r8
    2b04:	44e3      	add	fp, ip
    2b06:	464b      	mov	r3, r9
    2b08:	1aeb      	subs	r3, r5, r3
    2b0a:	0039      	movs	r1, r7
    2b0c:	0018      	movs	r0, r3
    2b0e:	9304      	str	r3, [sp, #16]
    2b10:	f7ff fb2c 	bl	216c <__udivsi3>
    2b14:	9b01      	ldr	r3, [sp, #4]
    2b16:	0005      	movs	r5, r0
    2b18:	4343      	muls	r3, r0
    2b1a:	0039      	movs	r1, r7
    2b1c:	9804      	ldr	r0, [sp, #16]
    2b1e:	4699      	mov	r9, r3
    2b20:	f7ff fbaa 	bl	2278 <__aeabi_uidivmod>
    2b24:	0433      	lsls	r3, r6, #16
    2b26:	0409      	lsls	r1, r1, #16
    2b28:	0c1b      	lsrs	r3, r3, #16
    2b2a:	430b      	orrs	r3, r1
    2b2c:	4599      	cmp	r9, r3
    2b2e:	d909      	bls.n	2b44 <__aeabi_ddiv+0x2a0>
    2b30:	4443      	add	r3, r8
    2b32:	1e6a      	subs	r2, r5, #1
    2b34:	4598      	cmp	r8, r3
    2b36:	d900      	bls.n	2b3a <__aeabi_ddiv+0x296>
    2b38:	e11a      	b.n	2d70 <__aeabi_ddiv+0x4cc>
    2b3a:	4599      	cmp	r9, r3
    2b3c:	d800      	bhi.n	2b40 <__aeabi_ddiv+0x29c>
    2b3e:	e117      	b.n	2d70 <__aeabi_ddiv+0x4cc>
    2b40:	3d02      	subs	r5, #2
    2b42:	4443      	add	r3, r8
    2b44:	464a      	mov	r2, r9
    2b46:	1a9b      	subs	r3, r3, r2
    2b48:	465a      	mov	r2, fp
    2b4a:	0412      	lsls	r2, r2, #16
    2b4c:	432a      	orrs	r2, r5
    2b4e:	9903      	ldr	r1, [sp, #12]
    2b50:	4693      	mov	fp, r2
    2b52:	0c10      	lsrs	r0, r2, #16
    2b54:	0c0a      	lsrs	r2, r1, #16
    2b56:	4691      	mov	r9, r2
    2b58:	0409      	lsls	r1, r1, #16
    2b5a:	465a      	mov	r2, fp
    2b5c:	0c09      	lsrs	r1, r1, #16
    2b5e:	464e      	mov	r6, r9
    2b60:	000d      	movs	r5, r1
    2b62:	0412      	lsls	r2, r2, #16
    2b64:	0c12      	lsrs	r2, r2, #16
    2b66:	4345      	muls	r5, r0
    2b68:	9105      	str	r1, [sp, #20]
    2b6a:	4351      	muls	r1, r2
    2b6c:	4372      	muls	r2, r6
    2b6e:	4370      	muls	r0, r6
    2b70:	1952      	adds	r2, r2, r5
    2b72:	0c0e      	lsrs	r6, r1, #16
    2b74:	18b2      	adds	r2, r6, r2
    2b76:	4295      	cmp	r5, r2
    2b78:	d903      	bls.n	2b82 <__aeabi_ddiv+0x2de>
    2b7a:	2580      	movs	r5, #128	; 0x80
    2b7c:	026d      	lsls	r5, r5, #9
    2b7e:	46ac      	mov	ip, r5
    2b80:	4460      	add	r0, ip
    2b82:	0c15      	lsrs	r5, r2, #16
    2b84:	0409      	lsls	r1, r1, #16
    2b86:	0412      	lsls	r2, r2, #16
    2b88:	0c09      	lsrs	r1, r1, #16
    2b8a:	1828      	adds	r0, r5, r0
    2b8c:	1852      	adds	r2, r2, r1
    2b8e:	4283      	cmp	r3, r0
    2b90:	d200      	bcs.n	2b94 <__aeabi_ddiv+0x2f0>
    2b92:	e0ce      	b.n	2d32 <__aeabi_ddiv+0x48e>
    2b94:	d100      	bne.n	2b98 <__aeabi_ddiv+0x2f4>
    2b96:	e0c8      	b.n	2d2a <__aeabi_ddiv+0x486>
    2b98:	1a1d      	subs	r5, r3, r0
    2b9a:	4653      	mov	r3, sl
    2b9c:	1a9e      	subs	r6, r3, r2
    2b9e:	45b2      	cmp	sl, r6
    2ba0:	4192      	sbcs	r2, r2
    2ba2:	4252      	negs	r2, r2
    2ba4:	1aab      	subs	r3, r5, r2
    2ba6:	469a      	mov	sl, r3
    2ba8:	4598      	cmp	r8, r3
    2baa:	d100      	bne.n	2bae <__aeabi_ddiv+0x30a>
    2bac:	e117      	b.n	2dde <__aeabi_ddiv+0x53a>
    2bae:	0039      	movs	r1, r7
    2bb0:	0018      	movs	r0, r3
    2bb2:	f7ff fadb 	bl	216c <__udivsi3>
    2bb6:	9b01      	ldr	r3, [sp, #4]
    2bb8:	0005      	movs	r5, r0
    2bba:	4343      	muls	r3, r0
    2bbc:	0039      	movs	r1, r7
    2bbe:	4650      	mov	r0, sl
    2bc0:	9304      	str	r3, [sp, #16]
    2bc2:	f7ff fb59 	bl	2278 <__aeabi_uidivmod>
    2bc6:	9804      	ldr	r0, [sp, #16]
    2bc8:	040b      	lsls	r3, r1, #16
    2bca:	0c31      	lsrs	r1, r6, #16
    2bcc:	4319      	orrs	r1, r3
    2bce:	4288      	cmp	r0, r1
    2bd0:	d909      	bls.n	2be6 <__aeabi_ddiv+0x342>
    2bd2:	4441      	add	r1, r8
    2bd4:	1e6b      	subs	r3, r5, #1
    2bd6:	4588      	cmp	r8, r1
    2bd8:	d900      	bls.n	2bdc <__aeabi_ddiv+0x338>
    2bda:	e107      	b.n	2dec <__aeabi_ddiv+0x548>
    2bdc:	4288      	cmp	r0, r1
    2bde:	d800      	bhi.n	2be2 <__aeabi_ddiv+0x33e>
    2be0:	e104      	b.n	2dec <__aeabi_ddiv+0x548>
    2be2:	3d02      	subs	r5, #2
    2be4:	4441      	add	r1, r8
    2be6:	9b04      	ldr	r3, [sp, #16]
    2be8:	1acb      	subs	r3, r1, r3
    2bea:	0018      	movs	r0, r3
    2bec:	0039      	movs	r1, r7
    2bee:	9304      	str	r3, [sp, #16]
    2bf0:	f7ff fabc 	bl	216c <__udivsi3>
    2bf4:	9b01      	ldr	r3, [sp, #4]
    2bf6:	4682      	mov	sl, r0
    2bf8:	4343      	muls	r3, r0
    2bfa:	0039      	movs	r1, r7
    2bfc:	9804      	ldr	r0, [sp, #16]
    2bfe:	9301      	str	r3, [sp, #4]
    2c00:	f7ff fb3a 	bl	2278 <__aeabi_uidivmod>
    2c04:	9801      	ldr	r0, [sp, #4]
    2c06:	040b      	lsls	r3, r1, #16
    2c08:	0431      	lsls	r1, r6, #16
    2c0a:	0c09      	lsrs	r1, r1, #16
    2c0c:	4319      	orrs	r1, r3
    2c0e:	4288      	cmp	r0, r1
    2c10:	d90d      	bls.n	2c2e <__aeabi_ddiv+0x38a>
    2c12:	4653      	mov	r3, sl
    2c14:	4441      	add	r1, r8
    2c16:	3b01      	subs	r3, #1
    2c18:	4588      	cmp	r8, r1
    2c1a:	d900      	bls.n	2c1e <__aeabi_ddiv+0x37a>
    2c1c:	e0e8      	b.n	2df0 <__aeabi_ddiv+0x54c>
    2c1e:	4288      	cmp	r0, r1
    2c20:	d800      	bhi.n	2c24 <__aeabi_ddiv+0x380>
    2c22:	e0e5      	b.n	2df0 <__aeabi_ddiv+0x54c>
    2c24:	2302      	movs	r3, #2
    2c26:	425b      	negs	r3, r3
    2c28:	469c      	mov	ip, r3
    2c2a:	4441      	add	r1, r8
    2c2c:	44e2      	add	sl, ip
    2c2e:	9b01      	ldr	r3, [sp, #4]
    2c30:	042d      	lsls	r5, r5, #16
    2c32:	1ace      	subs	r6, r1, r3
    2c34:	4651      	mov	r1, sl
    2c36:	4329      	orrs	r1, r5
    2c38:	9d05      	ldr	r5, [sp, #20]
    2c3a:	464f      	mov	r7, r9
    2c3c:	002a      	movs	r2, r5
    2c3e:	040b      	lsls	r3, r1, #16
    2c40:	0c08      	lsrs	r0, r1, #16
    2c42:	0c1b      	lsrs	r3, r3, #16
    2c44:	435a      	muls	r2, r3
    2c46:	4345      	muls	r5, r0
    2c48:	437b      	muls	r3, r7
    2c4a:	4378      	muls	r0, r7
    2c4c:	195b      	adds	r3, r3, r5
    2c4e:	0c17      	lsrs	r7, r2, #16
    2c50:	18fb      	adds	r3, r7, r3
    2c52:	429d      	cmp	r5, r3
    2c54:	d903      	bls.n	2c5e <__aeabi_ddiv+0x3ba>
    2c56:	2580      	movs	r5, #128	; 0x80
    2c58:	026d      	lsls	r5, r5, #9
    2c5a:	46ac      	mov	ip, r5
    2c5c:	4460      	add	r0, ip
    2c5e:	0c1d      	lsrs	r5, r3, #16
    2c60:	0412      	lsls	r2, r2, #16
    2c62:	041b      	lsls	r3, r3, #16
    2c64:	0c12      	lsrs	r2, r2, #16
    2c66:	1828      	adds	r0, r5, r0
    2c68:	189b      	adds	r3, r3, r2
    2c6a:	4286      	cmp	r6, r0
    2c6c:	d200      	bcs.n	2c70 <__aeabi_ddiv+0x3cc>
    2c6e:	e093      	b.n	2d98 <__aeabi_ddiv+0x4f4>
    2c70:	d100      	bne.n	2c74 <__aeabi_ddiv+0x3d0>
    2c72:	e08e      	b.n	2d92 <__aeabi_ddiv+0x4ee>
    2c74:	2301      	movs	r3, #1
    2c76:	4319      	orrs	r1, r3
    2c78:	4ba0      	ldr	r3, [pc, #640]	; (2efc <__aeabi_ddiv+0x658>)
    2c7a:	18e3      	adds	r3, r4, r3
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	dc00      	bgt.n	2c82 <__aeabi_ddiv+0x3de>
    2c80:	e099      	b.n	2db6 <__aeabi_ddiv+0x512>
    2c82:	074a      	lsls	r2, r1, #29
    2c84:	d000      	beq.n	2c88 <__aeabi_ddiv+0x3e4>
    2c86:	e09e      	b.n	2dc6 <__aeabi_ddiv+0x522>
    2c88:	465a      	mov	r2, fp
    2c8a:	01d2      	lsls	r2, r2, #7
    2c8c:	d506      	bpl.n	2c9c <__aeabi_ddiv+0x3f8>
    2c8e:	465a      	mov	r2, fp
    2c90:	4b9b      	ldr	r3, [pc, #620]	; (2f00 <__aeabi_ddiv+0x65c>)
    2c92:	401a      	ands	r2, r3
    2c94:	2380      	movs	r3, #128	; 0x80
    2c96:	4693      	mov	fp, r2
    2c98:	00db      	lsls	r3, r3, #3
    2c9a:	18e3      	adds	r3, r4, r3
    2c9c:	4a99      	ldr	r2, [pc, #612]	; (2f04 <__aeabi_ddiv+0x660>)
    2c9e:	4293      	cmp	r3, r2
    2ca0:	dd68      	ble.n	2d74 <__aeabi_ddiv+0x4d0>
    2ca2:	2301      	movs	r3, #1
    2ca4:	9a02      	ldr	r2, [sp, #8]
    2ca6:	4c98      	ldr	r4, [pc, #608]	; (2f08 <__aeabi_ddiv+0x664>)
    2ca8:	401a      	ands	r2, r3
    2caa:	2300      	movs	r3, #0
    2cac:	4694      	mov	ip, r2
    2cae:	4698      	mov	r8, r3
    2cb0:	2200      	movs	r2, #0
    2cb2:	e6c5      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2cb4:	2280      	movs	r2, #128	; 0x80
    2cb6:	464b      	mov	r3, r9
    2cb8:	0312      	lsls	r2, r2, #12
    2cba:	4213      	tst	r3, r2
    2cbc:	d00a      	beq.n	2cd4 <__aeabi_ddiv+0x430>
    2cbe:	465b      	mov	r3, fp
    2cc0:	4213      	tst	r3, r2
    2cc2:	d106      	bne.n	2cd2 <__aeabi_ddiv+0x42e>
    2cc4:	431a      	orrs	r2, r3
    2cc6:	0312      	lsls	r2, r2, #12
    2cc8:	0b12      	lsrs	r2, r2, #12
    2cca:	46ac      	mov	ip, r5
    2ccc:	4688      	mov	r8, r1
    2cce:	4c8e      	ldr	r4, [pc, #568]	; (2f08 <__aeabi_ddiv+0x664>)
    2cd0:	e6b6      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2cd2:	464b      	mov	r3, r9
    2cd4:	431a      	orrs	r2, r3
    2cd6:	0312      	lsls	r2, r2, #12
    2cd8:	0b12      	lsrs	r2, r2, #12
    2cda:	46bc      	mov	ip, r7
    2cdc:	4c8a      	ldr	r4, [pc, #552]	; (2f08 <__aeabi_ddiv+0x664>)
    2cde:	e6af      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2ce0:	0003      	movs	r3, r0
    2ce2:	465a      	mov	r2, fp
    2ce4:	3b28      	subs	r3, #40	; 0x28
    2ce6:	409a      	lsls	r2, r3
    2ce8:	2300      	movs	r3, #0
    2cea:	4691      	mov	r9, r2
    2cec:	4698      	mov	r8, r3
    2cee:	e657      	b.n	29a0 <__aeabi_ddiv+0xfc>
    2cf0:	4658      	mov	r0, fp
    2cf2:	f000 ff0d 	bl	3b10 <__clzsi2>
    2cf6:	3020      	adds	r0, #32
    2cf8:	e640      	b.n	297c <__aeabi_ddiv+0xd8>
    2cfa:	0003      	movs	r3, r0
    2cfc:	4652      	mov	r2, sl
    2cfe:	3b28      	subs	r3, #40	; 0x28
    2d00:	409a      	lsls	r2, r3
    2d02:	2100      	movs	r1, #0
    2d04:	4693      	mov	fp, r2
    2d06:	e677      	b.n	29f8 <__aeabi_ddiv+0x154>
    2d08:	f000 ff02 	bl	3b10 <__clzsi2>
    2d0c:	3020      	adds	r0, #32
    2d0e:	e65f      	b.n	29d0 <__aeabi_ddiv+0x12c>
    2d10:	4588      	cmp	r8, r1
    2d12:	d200      	bcs.n	2d16 <__aeabi_ddiv+0x472>
    2d14:	e6c7      	b.n	2aa6 <__aeabi_ddiv+0x202>
    2d16:	464b      	mov	r3, r9
    2d18:	07de      	lsls	r6, r3, #31
    2d1a:	085d      	lsrs	r5, r3, #1
    2d1c:	4643      	mov	r3, r8
    2d1e:	085b      	lsrs	r3, r3, #1
    2d20:	431e      	orrs	r6, r3
    2d22:	4643      	mov	r3, r8
    2d24:	07db      	lsls	r3, r3, #31
    2d26:	469a      	mov	sl, r3
    2d28:	e6c2      	b.n	2ab0 <__aeabi_ddiv+0x20c>
    2d2a:	2500      	movs	r5, #0
    2d2c:	4592      	cmp	sl, r2
    2d2e:	d300      	bcc.n	2d32 <__aeabi_ddiv+0x48e>
    2d30:	e733      	b.n	2b9a <__aeabi_ddiv+0x2f6>
    2d32:	9e03      	ldr	r6, [sp, #12]
    2d34:	4659      	mov	r1, fp
    2d36:	46b4      	mov	ip, r6
    2d38:	44e2      	add	sl, ip
    2d3a:	45b2      	cmp	sl, r6
    2d3c:	41ad      	sbcs	r5, r5
    2d3e:	426d      	negs	r5, r5
    2d40:	4445      	add	r5, r8
    2d42:	18eb      	adds	r3, r5, r3
    2d44:	3901      	subs	r1, #1
    2d46:	4598      	cmp	r8, r3
    2d48:	d207      	bcs.n	2d5a <__aeabi_ddiv+0x4b6>
    2d4a:	4298      	cmp	r0, r3
    2d4c:	d900      	bls.n	2d50 <__aeabi_ddiv+0x4ac>
    2d4e:	e07f      	b.n	2e50 <__aeabi_ddiv+0x5ac>
    2d50:	d100      	bne.n	2d54 <__aeabi_ddiv+0x4b0>
    2d52:	e0bc      	b.n	2ece <__aeabi_ddiv+0x62a>
    2d54:	1a1d      	subs	r5, r3, r0
    2d56:	468b      	mov	fp, r1
    2d58:	e71f      	b.n	2b9a <__aeabi_ddiv+0x2f6>
    2d5a:	4598      	cmp	r8, r3
    2d5c:	d1fa      	bne.n	2d54 <__aeabi_ddiv+0x4b0>
    2d5e:	9d03      	ldr	r5, [sp, #12]
    2d60:	4555      	cmp	r5, sl
    2d62:	d9f2      	bls.n	2d4a <__aeabi_ddiv+0x4a6>
    2d64:	4643      	mov	r3, r8
    2d66:	468b      	mov	fp, r1
    2d68:	1a1d      	subs	r5, r3, r0
    2d6a:	e716      	b.n	2b9a <__aeabi_ddiv+0x2f6>
    2d6c:	469b      	mov	fp, r3
    2d6e:	e6ca      	b.n	2b06 <__aeabi_ddiv+0x262>
    2d70:	0015      	movs	r5, r2
    2d72:	e6e7      	b.n	2b44 <__aeabi_ddiv+0x2a0>
    2d74:	465a      	mov	r2, fp
    2d76:	08c9      	lsrs	r1, r1, #3
    2d78:	0752      	lsls	r2, r2, #29
    2d7a:	430a      	orrs	r2, r1
    2d7c:	055b      	lsls	r3, r3, #21
    2d7e:	4690      	mov	r8, r2
    2d80:	0d5c      	lsrs	r4, r3, #21
    2d82:	465a      	mov	r2, fp
    2d84:	2301      	movs	r3, #1
    2d86:	9902      	ldr	r1, [sp, #8]
    2d88:	0252      	lsls	r2, r2, #9
    2d8a:	4019      	ands	r1, r3
    2d8c:	0b12      	lsrs	r2, r2, #12
    2d8e:	468c      	mov	ip, r1
    2d90:	e656      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2d92:	2b00      	cmp	r3, #0
    2d94:	d100      	bne.n	2d98 <__aeabi_ddiv+0x4f4>
    2d96:	e76f      	b.n	2c78 <__aeabi_ddiv+0x3d4>
    2d98:	4446      	add	r6, r8
    2d9a:	1e4a      	subs	r2, r1, #1
    2d9c:	45b0      	cmp	r8, r6
    2d9e:	d929      	bls.n	2df4 <__aeabi_ddiv+0x550>
    2da0:	0011      	movs	r1, r2
    2da2:	4286      	cmp	r6, r0
    2da4:	d000      	beq.n	2da8 <__aeabi_ddiv+0x504>
    2da6:	e765      	b.n	2c74 <__aeabi_ddiv+0x3d0>
    2da8:	9a03      	ldr	r2, [sp, #12]
    2daa:	4293      	cmp	r3, r2
    2dac:	d000      	beq.n	2db0 <__aeabi_ddiv+0x50c>
    2dae:	e761      	b.n	2c74 <__aeabi_ddiv+0x3d0>
    2db0:	e762      	b.n	2c78 <__aeabi_ddiv+0x3d4>
    2db2:	2101      	movs	r1, #1
    2db4:	4249      	negs	r1, r1
    2db6:	2001      	movs	r0, #1
    2db8:	1ac2      	subs	r2, r0, r3
    2dba:	2a38      	cmp	r2, #56	; 0x38
    2dbc:	dd21      	ble.n	2e02 <__aeabi_ddiv+0x55e>
    2dbe:	9b02      	ldr	r3, [sp, #8]
    2dc0:	4003      	ands	r3, r0
    2dc2:	469c      	mov	ip, r3
    2dc4:	e638      	b.n	2a38 <__aeabi_ddiv+0x194>
    2dc6:	220f      	movs	r2, #15
    2dc8:	400a      	ands	r2, r1
    2dca:	2a04      	cmp	r2, #4
    2dcc:	d100      	bne.n	2dd0 <__aeabi_ddiv+0x52c>
    2dce:	e75b      	b.n	2c88 <__aeabi_ddiv+0x3e4>
    2dd0:	000a      	movs	r2, r1
    2dd2:	1d11      	adds	r1, r2, #4
    2dd4:	4291      	cmp	r1, r2
    2dd6:	4192      	sbcs	r2, r2
    2dd8:	4252      	negs	r2, r2
    2dda:	4493      	add	fp, r2
    2ddc:	e754      	b.n	2c88 <__aeabi_ddiv+0x3e4>
    2dde:	4b47      	ldr	r3, [pc, #284]	; (2efc <__aeabi_ddiv+0x658>)
    2de0:	18e3      	adds	r3, r4, r3
    2de2:	2b00      	cmp	r3, #0
    2de4:	dde5      	ble.n	2db2 <__aeabi_ddiv+0x50e>
    2de6:	2201      	movs	r2, #1
    2de8:	4252      	negs	r2, r2
    2dea:	e7f2      	b.n	2dd2 <__aeabi_ddiv+0x52e>
    2dec:	001d      	movs	r5, r3
    2dee:	e6fa      	b.n	2be6 <__aeabi_ddiv+0x342>
    2df0:	469a      	mov	sl, r3
    2df2:	e71c      	b.n	2c2e <__aeabi_ddiv+0x38a>
    2df4:	42b0      	cmp	r0, r6
    2df6:	d839      	bhi.n	2e6c <__aeabi_ddiv+0x5c8>
    2df8:	d06e      	beq.n	2ed8 <__aeabi_ddiv+0x634>
    2dfa:	0011      	movs	r1, r2
    2dfc:	e73a      	b.n	2c74 <__aeabi_ddiv+0x3d0>
    2dfe:	9302      	str	r3, [sp, #8]
    2e00:	e73a      	b.n	2c78 <__aeabi_ddiv+0x3d4>
    2e02:	2a1f      	cmp	r2, #31
    2e04:	dc3c      	bgt.n	2e80 <__aeabi_ddiv+0x5dc>
    2e06:	2320      	movs	r3, #32
    2e08:	1a9b      	subs	r3, r3, r2
    2e0a:	000c      	movs	r4, r1
    2e0c:	4658      	mov	r0, fp
    2e0e:	4099      	lsls	r1, r3
    2e10:	4098      	lsls	r0, r3
    2e12:	1e4b      	subs	r3, r1, #1
    2e14:	4199      	sbcs	r1, r3
    2e16:	465b      	mov	r3, fp
    2e18:	40d4      	lsrs	r4, r2
    2e1a:	40d3      	lsrs	r3, r2
    2e1c:	4320      	orrs	r0, r4
    2e1e:	4308      	orrs	r0, r1
    2e20:	001a      	movs	r2, r3
    2e22:	0743      	lsls	r3, r0, #29
    2e24:	d009      	beq.n	2e3a <__aeabi_ddiv+0x596>
    2e26:	230f      	movs	r3, #15
    2e28:	4003      	ands	r3, r0
    2e2a:	2b04      	cmp	r3, #4
    2e2c:	d005      	beq.n	2e3a <__aeabi_ddiv+0x596>
    2e2e:	0001      	movs	r1, r0
    2e30:	1d08      	adds	r0, r1, #4
    2e32:	4288      	cmp	r0, r1
    2e34:	419b      	sbcs	r3, r3
    2e36:	425b      	negs	r3, r3
    2e38:	18d2      	adds	r2, r2, r3
    2e3a:	0213      	lsls	r3, r2, #8
    2e3c:	d53a      	bpl.n	2eb4 <__aeabi_ddiv+0x610>
    2e3e:	2301      	movs	r3, #1
    2e40:	9a02      	ldr	r2, [sp, #8]
    2e42:	2401      	movs	r4, #1
    2e44:	401a      	ands	r2, r3
    2e46:	2300      	movs	r3, #0
    2e48:	4694      	mov	ip, r2
    2e4a:	4698      	mov	r8, r3
    2e4c:	2200      	movs	r2, #0
    2e4e:	e5f7      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2e50:	2102      	movs	r1, #2
    2e52:	4249      	negs	r1, r1
    2e54:	468c      	mov	ip, r1
    2e56:	9d03      	ldr	r5, [sp, #12]
    2e58:	44e3      	add	fp, ip
    2e5a:	46ac      	mov	ip, r5
    2e5c:	44e2      	add	sl, ip
    2e5e:	45aa      	cmp	sl, r5
    2e60:	41ad      	sbcs	r5, r5
    2e62:	426d      	negs	r5, r5
    2e64:	4445      	add	r5, r8
    2e66:	18ed      	adds	r5, r5, r3
    2e68:	1a2d      	subs	r5, r5, r0
    2e6a:	e696      	b.n	2b9a <__aeabi_ddiv+0x2f6>
    2e6c:	1e8a      	subs	r2, r1, #2
    2e6e:	9903      	ldr	r1, [sp, #12]
    2e70:	004d      	lsls	r5, r1, #1
    2e72:	428d      	cmp	r5, r1
    2e74:	4189      	sbcs	r1, r1
    2e76:	4249      	negs	r1, r1
    2e78:	4441      	add	r1, r8
    2e7a:	1876      	adds	r6, r6, r1
    2e7c:	9503      	str	r5, [sp, #12]
    2e7e:	e78f      	b.n	2da0 <__aeabi_ddiv+0x4fc>
    2e80:	201f      	movs	r0, #31
    2e82:	4240      	negs	r0, r0
    2e84:	1ac3      	subs	r3, r0, r3
    2e86:	4658      	mov	r0, fp
    2e88:	40d8      	lsrs	r0, r3
    2e8a:	0003      	movs	r3, r0
    2e8c:	2a20      	cmp	r2, #32
    2e8e:	d028      	beq.n	2ee2 <__aeabi_ddiv+0x63e>
    2e90:	2040      	movs	r0, #64	; 0x40
    2e92:	465d      	mov	r5, fp
    2e94:	1a82      	subs	r2, r0, r2
    2e96:	4095      	lsls	r5, r2
    2e98:	4329      	orrs	r1, r5
    2e9a:	1e4a      	subs	r2, r1, #1
    2e9c:	4191      	sbcs	r1, r2
    2e9e:	4319      	orrs	r1, r3
    2ea0:	2307      	movs	r3, #7
    2ea2:	2200      	movs	r2, #0
    2ea4:	400b      	ands	r3, r1
    2ea6:	d009      	beq.n	2ebc <__aeabi_ddiv+0x618>
    2ea8:	230f      	movs	r3, #15
    2eaa:	2200      	movs	r2, #0
    2eac:	400b      	ands	r3, r1
    2eae:	0008      	movs	r0, r1
    2eb0:	2b04      	cmp	r3, #4
    2eb2:	d1bd      	bne.n	2e30 <__aeabi_ddiv+0x58c>
    2eb4:	0001      	movs	r1, r0
    2eb6:	0753      	lsls	r3, r2, #29
    2eb8:	0252      	lsls	r2, r2, #9
    2eba:	0b12      	lsrs	r2, r2, #12
    2ebc:	08c9      	lsrs	r1, r1, #3
    2ebe:	4319      	orrs	r1, r3
    2ec0:	2301      	movs	r3, #1
    2ec2:	4688      	mov	r8, r1
    2ec4:	9902      	ldr	r1, [sp, #8]
    2ec6:	2400      	movs	r4, #0
    2ec8:	4019      	ands	r1, r3
    2eca:	468c      	mov	ip, r1
    2ecc:	e5b8      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2ece:	4552      	cmp	r2, sl
    2ed0:	d8be      	bhi.n	2e50 <__aeabi_ddiv+0x5ac>
    2ed2:	468b      	mov	fp, r1
    2ed4:	2500      	movs	r5, #0
    2ed6:	e660      	b.n	2b9a <__aeabi_ddiv+0x2f6>
    2ed8:	9d03      	ldr	r5, [sp, #12]
    2eda:	429d      	cmp	r5, r3
    2edc:	d3c6      	bcc.n	2e6c <__aeabi_ddiv+0x5c8>
    2ede:	0011      	movs	r1, r2
    2ee0:	e762      	b.n	2da8 <__aeabi_ddiv+0x504>
    2ee2:	2500      	movs	r5, #0
    2ee4:	e7d8      	b.n	2e98 <__aeabi_ddiv+0x5f4>
    2ee6:	2280      	movs	r2, #128	; 0x80
    2ee8:	465b      	mov	r3, fp
    2eea:	0312      	lsls	r2, r2, #12
    2eec:	431a      	orrs	r2, r3
    2eee:	9b01      	ldr	r3, [sp, #4]
    2ef0:	0312      	lsls	r2, r2, #12
    2ef2:	0b12      	lsrs	r2, r2, #12
    2ef4:	469c      	mov	ip, r3
    2ef6:	4688      	mov	r8, r1
    2ef8:	4c03      	ldr	r4, [pc, #12]	; (2f08 <__aeabi_ddiv+0x664>)
    2efa:	e5a1      	b.n	2a40 <__aeabi_ddiv+0x19c>
    2efc:	000003ff 	.word	0x000003ff
    2f00:	feffffff 	.word	0xfeffffff
    2f04:	000007fe 	.word	0x000007fe
    2f08:	000007ff 	.word	0x000007ff

00002f0c <__aeabi_dmul>:
    2f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f0e:	4657      	mov	r7, sl
    2f10:	4645      	mov	r5, r8
    2f12:	46de      	mov	lr, fp
    2f14:	464e      	mov	r6, r9
    2f16:	b5e0      	push	{r5, r6, r7, lr}
    2f18:	030c      	lsls	r4, r1, #12
    2f1a:	4698      	mov	r8, r3
    2f1c:	004e      	lsls	r6, r1, #1
    2f1e:	0b23      	lsrs	r3, r4, #12
    2f20:	b087      	sub	sp, #28
    2f22:	0007      	movs	r7, r0
    2f24:	4692      	mov	sl, r2
    2f26:	469b      	mov	fp, r3
    2f28:	0d76      	lsrs	r6, r6, #21
    2f2a:	0fcd      	lsrs	r5, r1, #31
    2f2c:	2e00      	cmp	r6, #0
    2f2e:	d06b      	beq.n	3008 <__aeabi_dmul+0xfc>
    2f30:	4b6d      	ldr	r3, [pc, #436]	; (30e8 <__aeabi_dmul+0x1dc>)
    2f32:	429e      	cmp	r6, r3
    2f34:	d035      	beq.n	2fa2 <__aeabi_dmul+0x96>
    2f36:	2480      	movs	r4, #128	; 0x80
    2f38:	465b      	mov	r3, fp
    2f3a:	0f42      	lsrs	r2, r0, #29
    2f3c:	0424      	lsls	r4, r4, #16
    2f3e:	00db      	lsls	r3, r3, #3
    2f40:	4314      	orrs	r4, r2
    2f42:	431c      	orrs	r4, r3
    2f44:	00c3      	lsls	r3, r0, #3
    2f46:	4699      	mov	r9, r3
    2f48:	4b68      	ldr	r3, [pc, #416]	; (30ec <__aeabi_dmul+0x1e0>)
    2f4a:	46a3      	mov	fp, r4
    2f4c:	469c      	mov	ip, r3
    2f4e:	2300      	movs	r3, #0
    2f50:	2700      	movs	r7, #0
    2f52:	4466      	add	r6, ip
    2f54:	9302      	str	r3, [sp, #8]
    2f56:	4643      	mov	r3, r8
    2f58:	031c      	lsls	r4, r3, #12
    2f5a:	005a      	lsls	r2, r3, #1
    2f5c:	0fdb      	lsrs	r3, r3, #31
    2f5e:	4650      	mov	r0, sl
    2f60:	0b24      	lsrs	r4, r4, #12
    2f62:	0d52      	lsrs	r2, r2, #21
    2f64:	4698      	mov	r8, r3
    2f66:	d100      	bne.n	2f6a <__aeabi_dmul+0x5e>
    2f68:	e076      	b.n	3058 <__aeabi_dmul+0x14c>
    2f6a:	4b5f      	ldr	r3, [pc, #380]	; (30e8 <__aeabi_dmul+0x1dc>)
    2f6c:	429a      	cmp	r2, r3
    2f6e:	d06d      	beq.n	304c <__aeabi_dmul+0x140>
    2f70:	2380      	movs	r3, #128	; 0x80
    2f72:	0f41      	lsrs	r1, r0, #29
    2f74:	041b      	lsls	r3, r3, #16
    2f76:	430b      	orrs	r3, r1
    2f78:	495c      	ldr	r1, [pc, #368]	; (30ec <__aeabi_dmul+0x1e0>)
    2f7a:	00e4      	lsls	r4, r4, #3
    2f7c:	468c      	mov	ip, r1
    2f7e:	431c      	orrs	r4, r3
    2f80:	00c3      	lsls	r3, r0, #3
    2f82:	2000      	movs	r0, #0
    2f84:	4462      	add	r2, ip
    2f86:	4641      	mov	r1, r8
    2f88:	18b6      	adds	r6, r6, r2
    2f8a:	4069      	eors	r1, r5
    2f8c:	1c72      	adds	r2, r6, #1
    2f8e:	9101      	str	r1, [sp, #4]
    2f90:	4694      	mov	ip, r2
    2f92:	4307      	orrs	r7, r0
    2f94:	2f0f      	cmp	r7, #15
    2f96:	d900      	bls.n	2f9a <__aeabi_dmul+0x8e>
    2f98:	e0b0      	b.n	30fc <__aeabi_dmul+0x1f0>
    2f9a:	4a55      	ldr	r2, [pc, #340]	; (30f0 <__aeabi_dmul+0x1e4>)
    2f9c:	00bf      	lsls	r7, r7, #2
    2f9e:	59d2      	ldr	r2, [r2, r7]
    2fa0:	4697      	mov	pc, r2
    2fa2:	465b      	mov	r3, fp
    2fa4:	4303      	orrs	r3, r0
    2fa6:	4699      	mov	r9, r3
    2fa8:	d000      	beq.n	2fac <__aeabi_dmul+0xa0>
    2faa:	e087      	b.n	30bc <__aeabi_dmul+0x1b0>
    2fac:	2300      	movs	r3, #0
    2fae:	469b      	mov	fp, r3
    2fb0:	3302      	adds	r3, #2
    2fb2:	2708      	movs	r7, #8
    2fb4:	9302      	str	r3, [sp, #8]
    2fb6:	e7ce      	b.n	2f56 <__aeabi_dmul+0x4a>
    2fb8:	4642      	mov	r2, r8
    2fba:	9201      	str	r2, [sp, #4]
    2fbc:	2802      	cmp	r0, #2
    2fbe:	d067      	beq.n	3090 <__aeabi_dmul+0x184>
    2fc0:	2803      	cmp	r0, #3
    2fc2:	d100      	bne.n	2fc6 <__aeabi_dmul+0xba>
    2fc4:	e20e      	b.n	33e4 <__aeabi_dmul+0x4d8>
    2fc6:	2801      	cmp	r0, #1
    2fc8:	d000      	beq.n	2fcc <__aeabi_dmul+0xc0>
    2fca:	e162      	b.n	3292 <__aeabi_dmul+0x386>
    2fcc:	2300      	movs	r3, #0
    2fce:	2400      	movs	r4, #0
    2fd0:	2200      	movs	r2, #0
    2fd2:	4699      	mov	r9, r3
    2fd4:	9901      	ldr	r1, [sp, #4]
    2fd6:	4001      	ands	r1, r0
    2fd8:	b2cd      	uxtb	r5, r1
    2fda:	2100      	movs	r1, #0
    2fdc:	0312      	lsls	r2, r2, #12
    2fde:	0d0b      	lsrs	r3, r1, #20
    2fe0:	0b12      	lsrs	r2, r2, #12
    2fe2:	051b      	lsls	r3, r3, #20
    2fe4:	4313      	orrs	r3, r2
    2fe6:	4a43      	ldr	r2, [pc, #268]	; (30f4 <__aeabi_dmul+0x1e8>)
    2fe8:	0524      	lsls	r4, r4, #20
    2fea:	4013      	ands	r3, r2
    2fec:	431c      	orrs	r4, r3
    2fee:	0064      	lsls	r4, r4, #1
    2ff0:	07ed      	lsls	r5, r5, #31
    2ff2:	0864      	lsrs	r4, r4, #1
    2ff4:	432c      	orrs	r4, r5
    2ff6:	4648      	mov	r0, r9
    2ff8:	0021      	movs	r1, r4
    2ffa:	b007      	add	sp, #28
    2ffc:	bc3c      	pop	{r2, r3, r4, r5}
    2ffe:	4690      	mov	r8, r2
    3000:	4699      	mov	r9, r3
    3002:	46a2      	mov	sl, r4
    3004:	46ab      	mov	fp, r5
    3006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3008:	4303      	orrs	r3, r0
    300a:	4699      	mov	r9, r3
    300c:	d04f      	beq.n	30ae <__aeabi_dmul+0x1a2>
    300e:	465b      	mov	r3, fp
    3010:	2b00      	cmp	r3, #0
    3012:	d100      	bne.n	3016 <__aeabi_dmul+0x10a>
    3014:	e189      	b.n	332a <__aeabi_dmul+0x41e>
    3016:	4658      	mov	r0, fp
    3018:	f000 fd7a 	bl	3b10 <__clzsi2>
    301c:	0003      	movs	r3, r0
    301e:	3b0b      	subs	r3, #11
    3020:	2b1c      	cmp	r3, #28
    3022:	dd00      	ble.n	3026 <__aeabi_dmul+0x11a>
    3024:	e17a      	b.n	331c <__aeabi_dmul+0x410>
    3026:	221d      	movs	r2, #29
    3028:	1ad3      	subs	r3, r2, r3
    302a:	003a      	movs	r2, r7
    302c:	0001      	movs	r1, r0
    302e:	465c      	mov	r4, fp
    3030:	40da      	lsrs	r2, r3
    3032:	3908      	subs	r1, #8
    3034:	408c      	lsls	r4, r1
    3036:	0013      	movs	r3, r2
    3038:	408f      	lsls	r7, r1
    303a:	4323      	orrs	r3, r4
    303c:	469b      	mov	fp, r3
    303e:	46b9      	mov	r9, r7
    3040:	2300      	movs	r3, #0
    3042:	4e2d      	ldr	r6, [pc, #180]	; (30f8 <__aeabi_dmul+0x1ec>)
    3044:	2700      	movs	r7, #0
    3046:	1a36      	subs	r6, r6, r0
    3048:	9302      	str	r3, [sp, #8]
    304a:	e784      	b.n	2f56 <__aeabi_dmul+0x4a>
    304c:	4653      	mov	r3, sl
    304e:	4323      	orrs	r3, r4
    3050:	d12a      	bne.n	30a8 <__aeabi_dmul+0x19c>
    3052:	2400      	movs	r4, #0
    3054:	2002      	movs	r0, #2
    3056:	e796      	b.n	2f86 <__aeabi_dmul+0x7a>
    3058:	4653      	mov	r3, sl
    305a:	4323      	orrs	r3, r4
    305c:	d020      	beq.n	30a0 <__aeabi_dmul+0x194>
    305e:	2c00      	cmp	r4, #0
    3060:	d100      	bne.n	3064 <__aeabi_dmul+0x158>
    3062:	e157      	b.n	3314 <__aeabi_dmul+0x408>
    3064:	0020      	movs	r0, r4
    3066:	f000 fd53 	bl	3b10 <__clzsi2>
    306a:	0003      	movs	r3, r0
    306c:	3b0b      	subs	r3, #11
    306e:	2b1c      	cmp	r3, #28
    3070:	dd00      	ble.n	3074 <__aeabi_dmul+0x168>
    3072:	e149      	b.n	3308 <__aeabi_dmul+0x3fc>
    3074:	211d      	movs	r1, #29
    3076:	1acb      	subs	r3, r1, r3
    3078:	4651      	mov	r1, sl
    307a:	0002      	movs	r2, r0
    307c:	40d9      	lsrs	r1, r3
    307e:	4653      	mov	r3, sl
    3080:	3a08      	subs	r2, #8
    3082:	4094      	lsls	r4, r2
    3084:	4093      	lsls	r3, r2
    3086:	430c      	orrs	r4, r1
    3088:	4a1b      	ldr	r2, [pc, #108]	; (30f8 <__aeabi_dmul+0x1ec>)
    308a:	1a12      	subs	r2, r2, r0
    308c:	2000      	movs	r0, #0
    308e:	e77a      	b.n	2f86 <__aeabi_dmul+0x7a>
    3090:	2501      	movs	r5, #1
    3092:	9b01      	ldr	r3, [sp, #4]
    3094:	4c14      	ldr	r4, [pc, #80]	; (30e8 <__aeabi_dmul+0x1dc>)
    3096:	401d      	ands	r5, r3
    3098:	2300      	movs	r3, #0
    309a:	2200      	movs	r2, #0
    309c:	4699      	mov	r9, r3
    309e:	e79c      	b.n	2fda <__aeabi_dmul+0xce>
    30a0:	2400      	movs	r4, #0
    30a2:	2200      	movs	r2, #0
    30a4:	2001      	movs	r0, #1
    30a6:	e76e      	b.n	2f86 <__aeabi_dmul+0x7a>
    30a8:	4653      	mov	r3, sl
    30aa:	2003      	movs	r0, #3
    30ac:	e76b      	b.n	2f86 <__aeabi_dmul+0x7a>
    30ae:	2300      	movs	r3, #0
    30b0:	469b      	mov	fp, r3
    30b2:	3301      	adds	r3, #1
    30b4:	2704      	movs	r7, #4
    30b6:	2600      	movs	r6, #0
    30b8:	9302      	str	r3, [sp, #8]
    30ba:	e74c      	b.n	2f56 <__aeabi_dmul+0x4a>
    30bc:	2303      	movs	r3, #3
    30be:	4681      	mov	r9, r0
    30c0:	270c      	movs	r7, #12
    30c2:	9302      	str	r3, [sp, #8]
    30c4:	e747      	b.n	2f56 <__aeabi_dmul+0x4a>
    30c6:	2280      	movs	r2, #128	; 0x80
    30c8:	2300      	movs	r3, #0
    30ca:	2500      	movs	r5, #0
    30cc:	0312      	lsls	r2, r2, #12
    30ce:	4699      	mov	r9, r3
    30d0:	4c05      	ldr	r4, [pc, #20]	; (30e8 <__aeabi_dmul+0x1dc>)
    30d2:	e782      	b.n	2fda <__aeabi_dmul+0xce>
    30d4:	465c      	mov	r4, fp
    30d6:	464b      	mov	r3, r9
    30d8:	9802      	ldr	r0, [sp, #8]
    30da:	e76f      	b.n	2fbc <__aeabi_dmul+0xb0>
    30dc:	465c      	mov	r4, fp
    30de:	464b      	mov	r3, r9
    30e0:	9501      	str	r5, [sp, #4]
    30e2:	9802      	ldr	r0, [sp, #8]
    30e4:	e76a      	b.n	2fbc <__aeabi_dmul+0xb0>
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	000007ff 	.word	0x000007ff
    30ec:	fffffc01 	.word	0xfffffc01
    30f0:	00003c24 	.word	0x00003c24
    30f4:	800fffff 	.word	0x800fffff
    30f8:	fffffc0d 	.word	0xfffffc0d
    30fc:	464a      	mov	r2, r9
    30fe:	4649      	mov	r1, r9
    3100:	0c17      	lsrs	r7, r2, #16
    3102:	0c1a      	lsrs	r2, r3, #16
    3104:	041b      	lsls	r3, r3, #16
    3106:	0c1b      	lsrs	r3, r3, #16
    3108:	0408      	lsls	r0, r1, #16
    310a:	0019      	movs	r1, r3
    310c:	0c00      	lsrs	r0, r0, #16
    310e:	4341      	muls	r1, r0
    3110:	0015      	movs	r5, r2
    3112:	4688      	mov	r8, r1
    3114:	0019      	movs	r1, r3
    3116:	437d      	muls	r5, r7
    3118:	4379      	muls	r1, r7
    311a:	9503      	str	r5, [sp, #12]
    311c:	4689      	mov	r9, r1
    311e:	0029      	movs	r1, r5
    3120:	0015      	movs	r5, r2
    3122:	4345      	muls	r5, r0
    3124:	444d      	add	r5, r9
    3126:	9502      	str	r5, [sp, #8]
    3128:	4645      	mov	r5, r8
    312a:	0c2d      	lsrs	r5, r5, #16
    312c:	46aa      	mov	sl, r5
    312e:	9d02      	ldr	r5, [sp, #8]
    3130:	4455      	add	r5, sl
    3132:	45a9      	cmp	r9, r5
    3134:	d906      	bls.n	3144 <__aeabi_dmul+0x238>
    3136:	468a      	mov	sl, r1
    3138:	2180      	movs	r1, #128	; 0x80
    313a:	0249      	lsls	r1, r1, #9
    313c:	4689      	mov	r9, r1
    313e:	44ca      	add	sl, r9
    3140:	4651      	mov	r1, sl
    3142:	9103      	str	r1, [sp, #12]
    3144:	0c29      	lsrs	r1, r5, #16
    3146:	9104      	str	r1, [sp, #16]
    3148:	4641      	mov	r1, r8
    314a:	0409      	lsls	r1, r1, #16
    314c:	042d      	lsls	r5, r5, #16
    314e:	0c09      	lsrs	r1, r1, #16
    3150:	4688      	mov	r8, r1
    3152:	0029      	movs	r1, r5
    3154:	0c25      	lsrs	r5, r4, #16
    3156:	0424      	lsls	r4, r4, #16
    3158:	4441      	add	r1, r8
    315a:	0c24      	lsrs	r4, r4, #16
    315c:	9105      	str	r1, [sp, #20]
    315e:	0021      	movs	r1, r4
    3160:	4341      	muls	r1, r0
    3162:	4688      	mov	r8, r1
    3164:	0021      	movs	r1, r4
    3166:	4379      	muls	r1, r7
    3168:	468a      	mov	sl, r1
    316a:	4368      	muls	r0, r5
    316c:	4641      	mov	r1, r8
    316e:	4450      	add	r0, sl
    3170:	4681      	mov	r9, r0
    3172:	0c08      	lsrs	r0, r1, #16
    3174:	4448      	add	r0, r9
    3176:	436f      	muls	r7, r5
    3178:	4582      	cmp	sl, r0
    317a:	d903      	bls.n	3184 <__aeabi_dmul+0x278>
    317c:	2180      	movs	r1, #128	; 0x80
    317e:	0249      	lsls	r1, r1, #9
    3180:	4689      	mov	r9, r1
    3182:	444f      	add	r7, r9
    3184:	0c01      	lsrs	r1, r0, #16
    3186:	4689      	mov	r9, r1
    3188:	0039      	movs	r1, r7
    318a:	4449      	add	r1, r9
    318c:	9102      	str	r1, [sp, #8]
    318e:	4641      	mov	r1, r8
    3190:	040f      	lsls	r7, r1, #16
    3192:	9904      	ldr	r1, [sp, #16]
    3194:	0c3f      	lsrs	r7, r7, #16
    3196:	4688      	mov	r8, r1
    3198:	0400      	lsls	r0, r0, #16
    319a:	19c0      	adds	r0, r0, r7
    319c:	4480      	add	r8, r0
    319e:	4641      	mov	r1, r8
    31a0:	9104      	str	r1, [sp, #16]
    31a2:	4659      	mov	r1, fp
    31a4:	0c0f      	lsrs	r7, r1, #16
    31a6:	0409      	lsls	r1, r1, #16
    31a8:	0c09      	lsrs	r1, r1, #16
    31aa:	4688      	mov	r8, r1
    31ac:	4359      	muls	r1, r3
    31ae:	468a      	mov	sl, r1
    31b0:	0039      	movs	r1, r7
    31b2:	4351      	muls	r1, r2
    31b4:	4689      	mov	r9, r1
    31b6:	4641      	mov	r1, r8
    31b8:	434a      	muls	r2, r1
    31ba:	4651      	mov	r1, sl
    31bc:	0c09      	lsrs	r1, r1, #16
    31be:	468b      	mov	fp, r1
    31c0:	437b      	muls	r3, r7
    31c2:	18d2      	adds	r2, r2, r3
    31c4:	445a      	add	r2, fp
    31c6:	4293      	cmp	r3, r2
    31c8:	d903      	bls.n	31d2 <__aeabi_dmul+0x2c6>
    31ca:	2380      	movs	r3, #128	; 0x80
    31cc:	025b      	lsls	r3, r3, #9
    31ce:	469b      	mov	fp, r3
    31d0:	44d9      	add	r9, fp
    31d2:	4651      	mov	r1, sl
    31d4:	0409      	lsls	r1, r1, #16
    31d6:	0c09      	lsrs	r1, r1, #16
    31d8:	468a      	mov	sl, r1
    31da:	4641      	mov	r1, r8
    31dc:	4361      	muls	r1, r4
    31de:	437c      	muls	r4, r7
    31e0:	0c13      	lsrs	r3, r2, #16
    31e2:	0412      	lsls	r2, r2, #16
    31e4:	444b      	add	r3, r9
    31e6:	4452      	add	r2, sl
    31e8:	46a1      	mov	r9, r4
    31ea:	468a      	mov	sl, r1
    31ec:	003c      	movs	r4, r7
    31ee:	4641      	mov	r1, r8
    31f0:	436c      	muls	r4, r5
    31f2:	434d      	muls	r5, r1
    31f4:	4651      	mov	r1, sl
    31f6:	444d      	add	r5, r9
    31f8:	0c0f      	lsrs	r7, r1, #16
    31fa:	197d      	adds	r5, r7, r5
    31fc:	45a9      	cmp	r9, r5
    31fe:	d903      	bls.n	3208 <__aeabi_dmul+0x2fc>
    3200:	2180      	movs	r1, #128	; 0x80
    3202:	0249      	lsls	r1, r1, #9
    3204:	4688      	mov	r8, r1
    3206:	4444      	add	r4, r8
    3208:	9f04      	ldr	r7, [sp, #16]
    320a:	9903      	ldr	r1, [sp, #12]
    320c:	46b8      	mov	r8, r7
    320e:	4441      	add	r1, r8
    3210:	468b      	mov	fp, r1
    3212:	4583      	cmp	fp, r0
    3214:	4180      	sbcs	r0, r0
    3216:	4241      	negs	r1, r0
    3218:	4688      	mov	r8, r1
    321a:	4651      	mov	r1, sl
    321c:	0408      	lsls	r0, r1, #16
    321e:	042f      	lsls	r7, r5, #16
    3220:	0c00      	lsrs	r0, r0, #16
    3222:	183f      	adds	r7, r7, r0
    3224:	4658      	mov	r0, fp
    3226:	9902      	ldr	r1, [sp, #8]
    3228:	1810      	adds	r0, r2, r0
    322a:	4689      	mov	r9, r1
    322c:	4290      	cmp	r0, r2
    322e:	4192      	sbcs	r2, r2
    3230:	444f      	add	r7, r9
    3232:	46ba      	mov	sl, r7
    3234:	4252      	negs	r2, r2
    3236:	4699      	mov	r9, r3
    3238:	4693      	mov	fp, r2
    323a:	44c2      	add	sl, r8
    323c:	44d1      	add	r9, sl
    323e:	44cb      	add	fp, r9
    3240:	428f      	cmp	r7, r1
    3242:	41bf      	sbcs	r7, r7
    3244:	45c2      	cmp	sl, r8
    3246:	4189      	sbcs	r1, r1
    3248:	4599      	cmp	r9, r3
    324a:	419b      	sbcs	r3, r3
    324c:	4593      	cmp	fp, r2
    324e:	4192      	sbcs	r2, r2
    3250:	427f      	negs	r7, r7
    3252:	4249      	negs	r1, r1
    3254:	0c2d      	lsrs	r5, r5, #16
    3256:	4252      	negs	r2, r2
    3258:	430f      	orrs	r7, r1
    325a:	425b      	negs	r3, r3
    325c:	4313      	orrs	r3, r2
    325e:	197f      	adds	r7, r7, r5
    3260:	18ff      	adds	r7, r7, r3
    3262:	465b      	mov	r3, fp
    3264:	193c      	adds	r4, r7, r4
    3266:	0ddb      	lsrs	r3, r3, #23
    3268:	9a05      	ldr	r2, [sp, #20]
    326a:	0264      	lsls	r4, r4, #9
    326c:	431c      	orrs	r4, r3
    326e:	0243      	lsls	r3, r0, #9
    3270:	4313      	orrs	r3, r2
    3272:	1e5d      	subs	r5, r3, #1
    3274:	41ab      	sbcs	r3, r5
    3276:	465a      	mov	r2, fp
    3278:	0dc0      	lsrs	r0, r0, #23
    327a:	4303      	orrs	r3, r0
    327c:	0252      	lsls	r2, r2, #9
    327e:	4313      	orrs	r3, r2
    3280:	01e2      	lsls	r2, r4, #7
    3282:	d556      	bpl.n	3332 <__aeabi_dmul+0x426>
    3284:	2001      	movs	r0, #1
    3286:	085a      	lsrs	r2, r3, #1
    3288:	4003      	ands	r3, r0
    328a:	4313      	orrs	r3, r2
    328c:	07e2      	lsls	r2, r4, #31
    328e:	4313      	orrs	r3, r2
    3290:	0864      	lsrs	r4, r4, #1
    3292:	485a      	ldr	r0, [pc, #360]	; (33fc <__aeabi_dmul+0x4f0>)
    3294:	4460      	add	r0, ip
    3296:	2800      	cmp	r0, #0
    3298:	dd4d      	ble.n	3336 <__aeabi_dmul+0x42a>
    329a:	075a      	lsls	r2, r3, #29
    329c:	d009      	beq.n	32b2 <__aeabi_dmul+0x3a6>
    329e:	220f      	movs	r2, #15
    32a0:	401a      	ands	r2, r3
    32a2:	2a04      	cmp	r2, #4
    32a4:	d005      	beq.n	32b2 <__aeabi_dmul+0x3a6>
    32a6:	1d1a      	adds	r2, r3, #4
    32a8:	429a      	cmp	r2, r3
    32aa:	419b      	sbcs	r3, r3
    32ac:	425b      	negs	r3, r3
    32ae:	18e4      	adds	r4, r4, r3
    32b0:	0013      	movs	r3, r2
    32b2:	01e2      	lsls	r2, r4, #7
    32b4:	d504      	bpl.n	32c0 <__aeabi_dmul+0x3b4>
    32b6:	2080      	movs	r0, #128	; 0x80
    32b8:	4a51      	ldr	r2, [pc, #324]	; (3400 <__aeabi_dmul+0x4f4>)
    32ba:	00c0      	lsls	r0, r0, #3
    32bc:	4014      	ands	r4, r2
    32be:	4460      	add	r0, ip
    32c0:	4a50      	ldr	r2, [pc, #320]	; (3404 <__aeabi_dmul+0x4f8>)
    32c2:	4290      	cmp	r0, r2
    32c4:	dd00      	ble.n	32c8 <__aeabi_dmul+0x3bc>
    32c6:	e6e3      	b.n	3090 <__aeabi_dmul+0x184>
    32c8:	2501      	movs	r5, #1
    32ca:	08db      	lsrs	r3, r3, #3
    32cc:	0762      	lsls	r2, r4, #29
    32ce:	431a      	orrs	r2, r3
    32d0:	0264      	lsls	r4, r4, #9
    32d2:	9b01      	ldr	r3, [sp, #4]
    32d4:	4691      	mov	r9, r2
    32d6:	0b22      	lsrs	r2, r4, #12
    32d8:	0544      	lsls	r4, r0, #21
    32da:	0d64      	lsrs	r4, r4, #21
    32dc:	401d      	ands	r5, r3
    32de:	e67c      	b.n	2fda <__aeabi_dmul+0xce>
    32e0:	2280      	movs	r2, #128	; 0x80
    32e2:	4659      	mov	r1, fp
    32e4:	0312      	lsls	r2, r2, #12
    32e6:	4211      	tst	r1, r2
    32e8:	d008      	beq.n	32fc <__aeabi_dmul+0x3f0>
    32ea:	4214      	tst	r4, r2
    32ec:	d106      	bne.n	32fc <__aeabi_dmul+0x3f0>
    32ee:	4322      	orrs	r2, r4
    32f0:	0312      	lsls	r2, r2, #12
    32f2:	0b12      	lsrs	r2, r2, #12
    32f4:	4645      	mov	r5, r8
    32f6:	4699      	mov	r9, r3
    32f8:	4c43      	ldr	r4, [pc, #268]	; (3408 <__aeabi_dmul+0x4fc>)
    32fa:	e66e      	b.n	2fda <__aeabi_dmul+0xce>
    32fc:	465b      	mov	r3, fp
    32fe:	431a      	orrs	r2, r3
    3300:	0312      	lsls	r2, r2, #12
    3302:	0b12      	lsrs	r2, r2, #12
    3304:	4c40      	ldr	r4, [pc, #256]	; (3408 <__aeabi_dmul+0x4fc>)
    3306:	e668      	b.n	2fda <__aeabi_dmul+0xce>
    3308:	0003      	movs	r3, r0
    330a:	4654      	mov	r4, sl
    330c:	3b28      	subs	r3, #40	; 0x28
    330e:	409c      	lsls	r4, r3
    3310:	2300      	movs	r3, #0
    3312:	e6b9      	b.n	3088 <__aeabi_dmul+0x17c>
    3314:	f000 fbfc 	bl	3b10 <__clzsi2>
    3318:	3020      	adds	r0, #32
    331a:	e6a6      	b.n	306a <__aeabi_dmul+0x15e>
    331c:	0003      	movs	r3, r0
    331e:	3b28      	subs	r3, #40	; 0x28
    3320:	409f      	lsls	r7, r3
    3322:	2300      	movs	r3, #0
    3324:	46bb      	mov	fp, r7
    3326:	4699      	mov	r9, r3
    3328:	e68a      	b.n	3040 <__aeabi_dmul+0x134>
    332a:	f000 fbf1 	bl	3b10 <__clzsi2>
    332e:	3020      	adds	r0, #32
    3330:	e674      	b.n	301c <__aeabi_dmul+0x110>
    3332:	46b4      	mov	ip, r6
    3334:	e7ad      	b.n	3292 <__aeabi_dmul+0x386>
    3336:	2501      	movs	r5, #1
    3338:	1a2a      	subs	r2, r5, r0
    333a:	2a38      	cmp	r2, #56	; 0x38
    333c:	dd06      	ble.n	334c <__aeabi_dmul+0x440>
    333e:	9b01      	ldr	r3, [sp, #4]
    3340:	2400      	movs	r4, #0
    3342:	401d      	ands	r5, r3
    3344:	2300      	movs	r3, #0
    3346:	2200      	movs	r2, #0
    3348:	4699      	mov	r9, r3
    334a:	e646      	b.n	2fda <__aeabi_dmul+0xce>
    334c:	2a1f      	cmp	r2, #31
    334e:	dc21      	bgt.n	3394 <__aeabi_dmul+0x488>
    3350:	2520      	movs	r5, #32
    3352:	0020      	movs	r0, r4
    3354:	1aad      	subs	r5, r5, r2
    3356:	001e      	movs	r6, r3
    3358:	40ab      	lsls	r3, r5
    335a:	40a8      	lsls	r0, r5
    335c:	40d6      	lsrs	r6, r2
    335e:	1e5d      	subs	r5, r3, #1
    3360:	41ab      	sbcs	r3, r5
    3362:	4330      	orrs	r0, r6
    3364:	4318      	orrs	r0, r3
    3366:	40d4      	lsrs	r4, r2
    3368:	0743      	lsls	r3, r0, #29
    336a:	d009      	beq.n	3380 <__aeabi_dmul+0x474>
    336c:	230f      	movs	r3, #15
    336e:	4003      	ands	r3, r0
    3370:	2b04      	cmp	r3, #4
    3372:	d005      	beq.n	3380 <__aeabi_dmul+0x474>
    3374:	0003      	movs	r3, r0
    3376:	1d18      	adds	r0, r3, #4
    3378:	4298      	cmp	r0, r3
    337a:	419b      	sbcs	r3, r3
    337c:	425b      	negs	r3, r3
    337e:	18e4      	adds	r4, r4, r3
    3380:	0223      	lsls	r3, r4, #8
    3382:	d521      	bpl.n	33c8 <__aeabi_dmul+0x4bc>
    3384:	2501      	movs	r5, #1
    3386:	9b01      	ldr	r3, [sp, #4]
    3388:	2401      	movs	r4, #1
    338a:	401d      	ands	r5, r3
    338c:	2300      	movs	r3, #0
    338e:	2200      	movs	r2, #0
    3390:	4699      	mov	r9, r3
    3392:	e622      	b.n	2fda <__aeabi_dmul+0xce>
    3394:	251f      	movs	r5, #31
    3396:	0021      	movs	r1, r4
    3398:	426d      	negs	r5, r5
    339a:	1a28      	subs	r0, r5, r0
    339c:	40c1      	lsrs	r1, r0
    339e:	0008      	movs	r0, r1
    33a0:	2a20      	cmp	r2, #32
    33a2:	d01d      	beq.n	33e0 <__aeabi_dmul+0x4d4>
    33a4:	355f      	adds	r5, #95	; 0x5f
    33a6:	1aaa      	subs	r2, r5, r2
    33a8:	4094      	lsls	r4, r2
    33aa:	4323      	orrs	r3, r4
    33ac:	1e5c      	subs	r4, r3, #1
    33ae:	41a3      	sbcs	r3, r4
    33b0:	2507      	movs	r5, #7
    33b2:	4303      	orrs	r3, r0
    33b4:	401d      	ands	r5, r3
    33b6:	2200      	movs	r2, #0
    33b8:	2d00      	cmp	r5, #0
    33ba:	d009      	beq.n	33d0 <__aeabi_dmul+0x4c4>
    33bc:	220f      	movs	r2, #15
    33be:	2400      	movs	r4, #0
    33c0:	401a      	ands	r2, r3
    33c2:	0018      	movs	r0, r3
    33c4:	2a04      	cmp	r2, #4
    33c6:	d1d6      	bne.n	3376 <__aeabi_dmul+0x46a>
    33c8:	0003      	movs	r3, r0
    33ca:	0765      	lsls	r5, r4, #29
    33cc:	0264      	lsls	r4, r4, #9
    33ce:	0b22      	lsrs	r2, r4, #12
    33d0:	08db      	lsrs	r3, r3, #3
    33d2:	432b      	orrs	r3, r5
    33d4:	2501      	movs	r5, #1
    33d6:	4699      	mov	r9, r3
    33d8:	9b01      	ldr	r3, [sp, #4]
    33da:	2400      	movs	r4, #0
    33dc:	401d      	ands	r5, r3
    33de:	e5fc      	b.n	2fda <__aeabi_dmul+0xce>
    33e0:	2400      	movs	r4, #0
    33e2:	e7e2      	b.n	33aa <__aeabi_dmul+0x49e>
    33e4:	2280      	movs	r2, #128	; 0x80
    33e6:	2501      	movs	r5, #1
    33e8:	0312      	lsls	r2, r2, #12
    33ea:	4322      	orrs	r2, r4
    33ec:	9901      	ldr	r1, [sp, #4]
    33ee:	0312      	lsls	r2, r2, #12
    33f0:	0b12      	lsrs	r2, r2, #12
    33f2:	400d      	ands	r5, r1
    33f4:	4699      	mov	r9, r3
    33f6:	4c04      	ldr	r4, [pc, #16]	; (3408 <__aeabi_dmul+0x4fc>)
    33f8:	e5ef      	b.n	2fda <__aeabi_dmul+0xce>
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	000003ff 	.word	0x000003ff
    3400:	feffffff 	.word	0xfeffffff
    3404:	000007fe 	.word	0x000007fe
    3408:	000007ff 	.word	0x000007ff

0000340c <__aeabi_dsub>:
    340c:	b5f0      	push	{r4, r5, r6, r7, lr}
    340e:	4646      	mov	r6, r8
    3410:	46d6      	mov	lr, sl
    3412:	464f      	mov	r7, r9
    3414:	030c      	lsls	r4, r1, #12
    3416:	b5c0      	push	{r6, r7, lr}
    3418:	0fcd      	lsrs	r5, r1, #31
    341a:	004e      	lsls	r6, r1, #1
    341c:	0a61      	lsrs	r1, r4, #9
    341e:	0f44      	lsrs	r4, r0, #29
    3420:	430c      	orrs	r4, r1
    3422:	00c1      	lsls	r1, r0, #3
    3424:	0058      	lsls	r0, r3, #1
    3426:	0d40      	lsrs	r0, r0, #21
    3428:	4684      	mov	ip, r0
    342a:	468a      	mov	sl, r1
    342c:	000f      	movs	r7, r1
    342e:	0319      	lsls	r1, r3, #12
    3430:	0f50      	lsrs	r0, r2, #29
    3432:	0a49      	lsrs	r1, r1, #9
    3434:	4301      	orrs	r1, r0
    3436:	48c6      	ldr	r0, [pc, #792]	; (3750 <__aeabi_dsub+0x344>)
    3438:	0d76      	lsrs	r6, r6, #21
    343a:	46a8      	mov	r8, r5
    343c:	0fdb      	lsrs	r3, r3, #31
    343e:	00d2      	lsls	r2, r2, #3
    3440:	4584      	cmp	ip, r0
    3442:	d100      	bne.n	3446 <__aeabi_dsub+0x3a>
    3444:	e0d8      	b.n	35f8 <__aeabi_dsub+0x1ec>
    3446:	2001      	movs	r0, #1
    3448:	4043      	eors	r3, r0
    344a:	42ab      	cmp	r3, r5
    344c:	d100      	bne.n	3450 <__aeabi_dsub+0x44>
    344e:	e0a6      	b.n	359e <__aeabi_dsub+0x192>
    3450:	4660      	mov	r0, ip
    3452:	1a35      	subs	r5, r6, r0
    3454:	2d00      	cmp	r5, #0
    3456:	dc00      	bgt.n	345a <__aeabi_dsub+0x4e>
    3458:	e105      	b.n	3666 <__aeabi_dsub+0x25a>
    345a:	2800      	cmp	r0, #0
    345c:	d110      	bne.n	3480 <__aeabi_dsub+0x74>
    345e:	000b      	movs	r3, r1
    3460:	4313      	orrs	r3, r2
    3462:	d100      	bne.n	3466 <__aeabi_dsub+0x5a>
    3464:	e0d7      	b.n	3616 <__aeabi_dsub+0x20a>
    3466:	1e6b      	subs	r3, r5, #1
    3468:	2b00      	cmp	r3, #0
    346a:	d000      	beq.n	346e <__aeabi_dsub+0x62>
    346c:	e14b      	b.n	3706 <__aeabi_dsub+0x2fa>
    346e:	4653      	mov	r3, sl
    3470:	1a9f      	subs	r7, r3, r2
    3472:	45ba      	cmp	sl, r7
    3474:	4180      	sbcs	r0, r0
    3476:	1a64      	subs	r4, r4, r1
    3478:	4240      	negs	r0, r0
    347a:	1a24      	subs	r4, r4, r0
    347c:	2601      	movs	r6, #1
    347e:	e01e      	b.n	34be <__aeabi_dsub+0xb2>
    3480:	4bb3      	ldr	r3, [pc, #716]	; (3750 <__aeabi_dsub+0x344>)
    3482:	429e      	cmp	r6, r3
    3484:	d048      	beq.n	3518 <__aeabi_dsub+0x10c>
    3486:	2380      	movs	r3, #128	; 0x80
    3488:	041b      	lsls	r3, r3, #16
    348a:	4319      	orrs	r1, r3
    348c:	2d38      	cmp	r5, #56	; 0x38
    348e:	dd00      	ble.n	3492 <__aeabi_dsub+0x86>
    3490:	e119      	b.n	36c6 <__aeabi_dsub+0x2ba>
    3492:	2d1f      	cmp	r5, #31
    3494:	dd00      	ble.n	3498 <__aeabi_dsub+0x8c>
    3496:	e14c      	b.n	3732 <__aeabi_dsub+0x326>
    3498:	2320      	movs	r3, #32
    349a:	000f      	movs	r7, r1
    349c:	1b5b      	subs	r3, r3, r5
    349e:	0010      	movs	r0, r2
    34a0:	409a      	lsls	r2, r3
    34a2:	409f      	lsls	r7, r3
    34a4:	40e8      	lsrs	r0, r5
    34a6:	1e53      	subs	r3, r2, #1
    34a8:	419a      	sbcs	r2, r3
    34aa:	40e9      	lsrs	r1, r5
    34ac:	4307      	orrs	r7, r0
    34ae:	4317      	orrs	r7, r2
    34b0:	4653      	mov	r3, sl
    34b2:	1bdf      	subs	r7, r3, r7
    34b4:	1a61      	subs	r1, r4, r1
    34b6:	45ba      	cmp	sl, r7
    34b8:	41a4      	sbcs	r4, r4
    34ba:	4264      	negs	r4, r4
    34bc:	1b0c      	subs	r4, r1, r4
    34be:	0223      	lsls	r3, r4, #8
    34c0:	d400      	bmi.n	34c4 <__aeabi_dsub+0xb8>
    34c2:	e0c5      	b.n	3650 <__aeabi_dsub+0x244>
    34c4:	0264      	lsls	r4, r4, #9
    34c6:	0a65      	lsrs	r5, r4, #9
    34c8:	2d00      	cmp	r5, #0
    34ca:	d100      	bne.n	34ce <__aeabi_dsub+0xc2>
    34cc:	e0f6      	b.n	36bc <__aeabi_dsub+0x2b0>
    34ce:	0028      	movs	r0, r5
    34d0:	f000 fb1e 	bl	3b10 <__clzsi2>
    34d4:	0003      	movs	r3, r0
    34d6:	3b08      	subs	r3, #8
    34d8:	2b1f      	cmp	r3, #31
    34da:	dd00      	ble.n	34de <__aeabi_dsub+0xd2>
    34dc:	e0e9      	b.n	36b2 <__aeabi_dsub+0x2a6>
    34de:	2220      	movs	r2, #32
    34e0:	003c      	movs	r4, r7
    34e2:	1ad2      	subs	r2, r2, r3
    34e4:	409d      	lsls	r5, r3
    34e6:	40d4      	lsrs	r4, r2
    34e8:	409f      	lsls	r7, r3
    34ea:	4325      	orrs	r5, r4
    34ec:	429e      	cmp	r6, r3
    34ee:	dd00      	ble.n	34f2 <__aeabi_dsub+0xe6>
    34f0:	e0db      	b.n	36aa <__aeabi_dsub+0x29e>
    34f2:	1b9e      	subs	r6, r3, r6
    34f4:	1c73      	adds	r3, r6, #1
    34f6:	2b1f      	cmp	r3, #31
    34f8:	dd00      	ble.n	34fc <__aeabi_dsub+0xf0>
    34fa:	e10a      	b.n	3712 <__aeabi_dsub+0x306>
    34fc:	2220      	movs	r2, #32
    34fe:	0038      	movs	r0, r7
    3500:	1ad2      	subs	r2, r2, r3
    3502:	0029      	movs	r1, r5
    3504:	4097      	lsls	r7, r2
    3506:	002c      	movs	r4, r5
    3508:	4091      	lsls	r1, r2
    350a:	40d8      	lsrs	r0, r3
    350c:	1e7a      	subs	r2, r7, #1
    350e:	4197      	sbcs	r7, r2
    3510:	40dc      	lsrs	r4, r3
    3512:	2600      	movs	r6, #0
    3514:	4301      	orrs	r1, r0
    3516:	430f      	orrs	r7, r1
    3518:	077b      	lsls	r3, r7, #29
    351a:	d009      	beq.n	3530 <__aeabi_dsub+0x124>
    351c:	230f      	movs	r3, #15
    351e:	403b      	ands	r3, r7
    3520:	2b04      	cmp	r3, #4
    3522:	d005      	beq.n	3530 <__aeabi_dsub+0x124>
    3524:	1d3b      	adds	r3, r7, #4
    3526:	42bb      	cmp	r3, r7
    3528:	41bf      	sbcs	r7, r7
    352a:	427f      	negs	r7, r7
    352c:	19e4      	adds	r4, r4, r7
    352e:	001f      	movs	r7, r3
    3530:	0223      	lsls	r3, r4, #8
    3532:	d525      	bpl.n	3580 <__aeabi_dsub+0x174>
    3534:	4b86      	ldr	r3, [pc, #536]	; (3750 <__aeabi_dsub+0x344>)
    3536:	3601      	adds	r6, #1
    3538:	429e      	cmp	r6, r3
    353a:	d100      	bne.n	353e <__aeabi_dsub+0x132>
    353c:	e0af      	b.n	369e <__aeabi_dsub+0x292>
    353e:	4b85      	ldr	r3, [pc, #532]	; (3754 <__aeabi_dsub+0x348>)
    3540:	2501      	movs	r5, #1
    3542:	401c      	ands	r4, r3
    3544:	4643      	mov	r3, r8
    3546:	0762      	lsls	r2, r4, #29
    3548:	08ff      	lsrs	r7, r7, #3
    354a:	0264      	lsls	r4, r4, #9
    354c:	0576      	lsls	r6, r6, #21
    354e:	4317      	orrs	r7, r2
    3550:	0b24      	lsrs	r4, r4, #12
    3552:	0d76      	lsrs	r6, r6, #21
    3554:	401d      	ands	r5, r3
    3556:	2100      	movs	r1, #0
    3558:	0324      	lsls	r4, r4, #12
    355a:	0b23      	lsrs	r3, r4, #12
    355c:	0d0c      	lsrs	r4, r1, #20
    355e:	4a7e      	ldr	r2, [pc, #504]	; (3758 <__aeabi_dsub+0x34c>)
    3560:	0524      	lsls	r4, r4, #20
    3562:	431c      	orrs	r4, r3
    3564:	4014      	ands	r4, r2
    3566:	0533      	lsls	r3, r6, #20
    3568:	4323      	orrs	r3, r4
    356a:	005b      	lsls	r3, r3, #1
    356c:	07ed      	lsls	r5, r5, #31
    356e:	085b      	lsrs	r3, r3, #1
    3570:	432b      	orrs	r3, r5
    3572:	0038      	movs	r0, r7
    3574:	0019      	movs	r1, r3
    3576:	bc1c      	pop	{r2, r3, r4}
    3578:	4690      	mov	r8, r2
    357a:	4699      	mov	r9, r3
    357c:	46a2      	mov	sl, r4
    357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3580:	2501      	movs	r5, #1
    3582:	4643      	mov	r3, r8
    3584:	0762      	lsls	r2, r4, #29
    3586:	08ff      	lsrs	r7, r7, #3
    3588:	4317      	orrs	r7, r2
    358a:	08e4      	lsrs	r4, r4, #3
    358c:	401d      	ands	r5, r3
    358e:	4b70      	ldr	r3, [pc, #448]	; (3750 <__aeabi_dsub+0x344>)
    3590:	429e      	cmp	r6, r3
    3592:	d036      	beq.n	3602 <__aeabi_dsub+0x1f6>
    3594:	0324      	lsls	r4, r4, #12
    3596:	0576      	lsls	r6, r6, #21
    3598:	0b24      	lsrs	r4, r4, #12
    359a:	0d76      	lsrs	r6, r6, #21
    359c:	e7db      	b.n	3556 <__aeabi_dsub+0x14a>
    359e:	4663      	mov	r3, ip
    35a0:	1af3      	subs	r3, r6, r3
    35a2:	2b00      	cmp	r3, #0
    35a4:	dc00      	bgt.n	35a8 <__aeabi_dsub+0x19c>
    35a6:	e094      	b.n	36d2 <__aeabi_dsub+0x2c6>
    35a8:	4660      	mov	r0, ip
    35aa:	2800      	cmp	r0, #0
    35ac:	d035      	beq.n	361a <__aeabi_dsub+0x20e>
    35ae:	4868      	ldr	r0, [pc, #416]	; (3750 <__aeabi_dsub+0x344>)
    35b0:	4286      	cmp	r6, r0
    35b2:	d0b1      	beq.n	3518 <__aeabi_dsub+0x10c>
    35b4:	2780      	movs	r7, #128	; 0x80
    35b6:	043f      	lsls	r7, r7, #16
    35b8:	4339      	orrs	r1, r7
    35ba:	2b38      	cmp	r3, #56	; 0x38
    35bc:	dc00      	bgt.n	35c0 <__aeabi_dsub+0x1b4>
    35be:	e0fd      	b.n	37bc <__aeabi_dsub+0x3b0>
    35c0:	430a      	orrs	r2, r1
    35c2:	0017      	movs	r7, r2
    35c4:	2100      	movs	r1, #0
    35c6:	1e7a      	subs	r2, r7, #1
    35c8:	4197      	sbcs	r7, r2
    35ca:	4457      	add	r7, sl
    35cc:	4557      	cmp	r7, sl
    35ce:	4180      	sbcs	r0, r0
    35d0:	1909      	adds	r1, r1, r4
    35d2:	4244      	negs	r4, r0
    35d4:	190c      	adds	r4, r1, r4
    35d6:	0223      	lsls	r3, r4, #8
    35d8:	d53a      	bpl.n	3650 <__aeabi_dsub+0x244>
    35da:	4b5d      	ldr	r3, [pc, #372]	; (3750 <__aeabi_dsub+0x344>)
    35dc:	3601      	adds	r6, #1
    35de:	429e      	cmp	r6, r3
    35e0:	d100      	bne.n	35e4 <__aeabi_dsub+0x1d8>
    35e2:	e14b      	b.n	387c <__aeabi_dsub+0x470>
    35e4:	2201      	movs	r2, #1
    35e6:	4b5b      	ldr	r3, [pc, #364]	; (3754 <__aeabi_dsub+0x348>)
    35e8:	401c      	ands	r4, r3
    35ea:	087b      	lsrs	r3, r7, #1
    35ec:	4017      	ands	r7, r2
    35ee:	431f      	orrs	r7, r3
    35f0:	07e2      	lsls	r2, r4, #31
    35f2:	4317      	orrs	r7, r2
    35f4:	0864      	lsrs	r4, r4, #1
    35f6:	e78f      	b.n	3518 <__aeabi_dsub+0x10c>
    35f8:	0008      	movs	r0, r1
    35fa:	4310      	orrs	r0, r2
    35fc:	d000      	beq.n	3600 <__aeabi_dsub+0x1f4>
    35fe:	e724      	b.n	344a <__aeabi_dsub+0x3e>
    3600:	e721      	b.n	3446 <__aeabi_dsub+0x3a>
    3602:	0023      	movs	r3, r4
    3604:	433b      	orrs	r3, r7
    3606:	d100      	bne.n	360a <__aeabi_dsub+0x1fe>
    3608:	e1b9      	b.n	397e <__aeabi_dsub+0x572>
    360a:	2280      	movs	r2, #128	; 0x80
    360c:	0312      	lsls	r2, r2, #12
    360e:	4314      	orrs	r4, r2
    3610:	0324      	lsls	r4, r4, #12
    3612:	0b24      	lsrs	r4, r4, #12
    3614:	e79f      	b.n	3556 <__aeabi_dsub+0x14a>
    3616:	002e      	movs	r6, r5
    3618:	e77e      	b.n	3518 <__aeabi_dsub+0x10c>
    361a:	0008      	movs	r0, r1
    361c:	4310      	orrs	r0, r2
    361e:	d100      	bne.n	3622 <__aeabi_dsub+0x216>
    3620:	e0ca      	b.n	37b8 <__aeabi_dsub+0x3ac>
    3622:	1e58      	subs	r0, r3, #1
    3624:	4684      	mov	ip, r0
    3626:	2800      	cmp	r0, #0
    3628:	d000      	beq.n	362c <__aeabi_dsub+0x220>
    362a:	e0e7      	b.n	37fc <__aeabi_dsub+0x3f0>
    362c:	4452      	add	r2, sl
    362e:	4552      	cmp	r2, sl
    3630:	4180      	sbcs	r0, r0
    3632:	1864      	adds	r4, r4, r1
    3634:	4240      	negs	r0, r0
    3636:	1824      	adds	r4, r4, r0
    3638:	0017      	movs	r7, r2
    363a:	2601      	movs	r6, #1
    363c:	0223      	lsls	r3, r4, #8
    363e:	d507      	bpl.n	3650 <__aeabi_dsub+0x244>
    3640:	2602      	movs	r6, #2
    3642:	e7cf      	b.n	35e4 <__aeabi_dsub+0x1d8>
    3644:	4664      	mov	r4, ip
    3646:	432c      	orrs	r4, r5
    3648:	d100      	bne.n	364c <__aeabi_dsub+0x240>
    364a:	e1b3      	b.n	39b4 <__aeabi_dsub+0x5a8>
    364c:	002c      	movs	r4, r5
    364e:	4667      	mov	r7, ip
    3650:	077b      	lsls	r3, r7, #29
    3652:	d000      	beq.n	3656 <__aeabi_dsub+0x24a>
    3654:	e762      	b.n	351c <__aeabi_dsub+0x110>
    3656:	0763      	lsls	r3, r4, #29
    3658:	08ff      	lsrs	r7, r7, #3
    365a:	431f      	orrs	r7, r3
    365c:	2501      	movs	r5, #1
    365e:	4643      	mov	r3, r8
    3660:	08e4      	lsrs	r4, r4, #3
    3662:	401d      	ands	r5, r3
    3664:	e793      	b.n	358e <__aeabi_dsub+0x182>
    3666:	2d00      	cmp	r5, #0
    3668:	d178      	bne.n	375c <__aeabi_dsub+0x350>
    366a:	1c75      	adds	r5, r6, #1
    366c:	056d      	lsls	r5, r5, #21
    366e:	0d6d      	lsrs	r5, r5, #21
    3670:	2d01      	cmp	r5, #1
    3672:	dc00      	bgt.n	3676 <__aeabi_dsub+0x26a>
    3674:	e0f2      	b.n	385c <__aeabi_dsub+0x450>
    3676:	4650      	mov	r0, sl
    3678:	1a80      	subs	r0, r0, r2
    367a:	4582      	cmp	sl, r0
    367c:	41bf      	sbcs	r7, r7
    367e:	1a65      	subs	r5, r4, r1
    3680:	427f      	negs	r7, r7
    3682:	1bed      	subs	r5, r5, r7
    3684:	4684      	mov	ip, r0
    3686:	0228      	lsls	r0, r5, #8
    3688:	d400      	bmi.n	368c <__aeabi_dsub+0x280>
    368a:	e08c      	b.n	37a6 <__aeabi_dsub+0x39a>
    368c:	4650      	mov	r0, sl
    368e:	1a17      	subs	r7, r2, r0
    3690:	42ba      	cmp	r2, r7
    3692:	4192      	sbcs	r2, r2
    3694:	1b0c      	subs	r4, r1, r4
    3696:	4255      	negs	r5, r2
    3698:	1b65      	subs	r5, r4, r5
    369a:	4698      	mov	r8, r3
    369c:	e714      	b.n	34c8 <__aeabi_dsub+0xbc>
    369e:	2501      	movs	r5, #1
    36a0:	4643      	mov	r3, r8
    36a2:	2400      	movs	r4, #0
    36a4:	401d      	ands	r5, r3
    36a6:	2700      	movs	r7, #0
    36a8:	e755      	b.n	3556 <__aeabi_dsub+0x14a>
    36aa:	4c2a      	ldr	r4, [pc, #168]	; (3754 <__aeabi_dsub+0x348>)
    36ac:	1af6      	subs	r6, r6, r3
    36ae:	402c      	ands	r4, r5
    36b0:	e732      	b.n	3518 <__aeabi_dsub+0x10c>
    36b2:	003d      	movs	r5, r7
    36b4:	3828      	subs	r0, #40	; 0x28
    36b6:	4085      	lsls	r5, r0
    36b8:	2700      	movs	r7, #0
    36ba:	e717      	b.n	34ec <__aeabi_dsub+0xe0>
    36bc:	0038      	movs	r0, r7
    36be:	f000 fa27 	bl	3b10 <__clzsi2>
    36c2:	3020      	adds	r0, #32
    36c4:	e706      	b.n	34d4 <__aeabi_dsub+0xc8>
    36c6:	430a      	orrs	r2, r1
    36c8:	0017      	movs	r7, r2
    36ca:	2100      	movs	r1, #0
    36cc:	1e7a      	subs	r2, r7, #1
    36ce:	4197      	sbcs	r7, r2
    36d0:	e6ee      	b.n	34b0 <__aeabi_dsub+0xa4>
    36d2:	2b00      	cmp	r3, #0
    36d4:	d000      	beq.n	36d8 <__aeabi_dsub+0x2cc>
    36d6:	e0e5      	b.n	38a4 <__aeabi_dsub+0x498>
    36d8:	1c73      	adds	r3, r6, #1
    36da:	469c      	mov	ip, r3
    36dc:	055b      	lsls	r3, r3, #21
    36de:	0d5b      	lsrs	r3, r3, #21
    36e0:	2b01      	cmp	r3, #1
    36e2:	dc00      	bgt.n	36e6 <__aeabi_dsub+0x2da>
    36e4:	e09f      	b.n	3826 <__aeabi_dsub+0x41a>
    36e6:	4b1a      	ldr	r3, [pc, #104]	; (3750 <__aeabi_dsub+0x344>)
    36e8:	459c      	cmp	ip, r3
    36ea:	d100      	bne.n	36ee <__aeabi_dsub+0x2e2>
    36ec:	e0c5      	b.n	387a <__aeabi_dsub+0x46e>
    36ee:	4452      	add	r2, sl
    36f0:	4552      	cmp	r2, sl
    36f2:	4180      	sbcs	r0, r0
    36f4:	1864      	adds	r4, r4, r1
    36f6:	4240      	negs	r0, r0
    36f8:	1824      	adds	r4, r4, r0
    36fa:	07e7      	lsls	r7, r4, #31
    36fc:	0852      	lsrs	r2, r2, #1
    36fe:	4317      	orrs	r7, r2
    3700:	0864      	lsrs	r4, r4, #1
    3702:	4666      	mov	r6, ip
    3704:	e708      	b.n	3518 <__aeabi_dsub+0x10c>
    3706:	4812      	ldr	r0, [pc, #72]	; (3750 <__aeabi_dsub+0x344>)
    3708:	4285      	cmp	r5, r0
    370a:	d100      	bne.n	370e <__aeabi_dsub+0x302>
    370c:	e085      	b.n	381a <__aeabi_dsub+0x40e>
    370e:	001d      	movs	r5, r3
    3710:	e6bc      	b.n	348c <__aeabi_dsub+0x80>
    3712:	0029      	movs	r1, r5
    3714:	3e1f      	subs	r6, #31
    3716:	40f1      	lsrs	r1, r6
    3718:	2b20      	cmp	r3, #32
    371a:	d100      	bne.n	371e <__aeabi_dsub+0x312>
    371c:	e07f      	b.n	381e <__aeabi_dsub+0x412>
    371e:	2240      	movs	r2, #64	; 0x40
    3720:	1ad3      	subs	r3, r2, r3
    3722:	409d      	lsls	r5, r3
    3724:	432f      	orrs	r7, r5
    3726:	1e7d      	subs	r5, r7, #1
    3728:	41af      	sbcs	r7, r5
    372a:	2400      	movs	r4, #0
    372c:	430f      	orrs	r7, r1
    372e:	2600      	movs	r6, #0
    3730:	e78e      	b.n	3650 <__aeabi_dsub+0x244>
    3732:	002b      	movs	r3, r5
    3734:	000f      	movs	r7, r1
    3736:	3b20      	subs	r3, #32
    3738:	40df      	lsrs	r7, r3
    373a:	2d20      	cmp	r5, #32
    373c:	d071      	beq.n	3822 <__aeabi_dsub+0x416>
    373e:	2340      	movs	r3, #64	; 0x40
    3740:	1b5d      	subs	r5, r3, r5
    3742:	40a9      	lsls	r1, r5
    3744:	430a      	orrs	r2, r1
    3746:	1e51      	subs	r1, r2, #1
    3748:	418a      	sbcs	r2, r1
    374a:	2100      	movs	r1, #0
    374c:	4317      	orrs	r7, r2
    374e:	e6af      	b.n	34b0 <__aeabi_dsub+0xa4>
    3750:	000007ff 	.word	0x000007ff
    3754:	ff7fffff 	.word	0xff7fffff
    3758:	800fffff 	.word	0x800fffff
    375c:	2e00      	cmp	r6, #0
    375e:	d03e      	beq.n	37de <__aeabi_dsub+0x3d2>
    3760:	4eb3      	ldr	r6, [pc, #716]	; (3a30 <__aeabi_dsub+0x624>)
    3762:	45b4      	cmp	ip, r6
    3764:	d045      	beq.n	37f2 <__aeabi_dsub+0x3e6>
    3766:	2680      	movs	r6, #128	; 0x80
    3768:	0436      	lsls	r6, r6, #16
    376a:	426d      	negs	r5, r5
    376c:	4334      	orrs	r4, r6
    376e:	2d38      	cmp	r5, #56	; 0x38
    3770:	dd00      	ble.n	3774 <__aeabi_dsub+0x368>
    3772:	e0a8      	b.n	38c6 <__aeabi_dsub+0x4ba>
    3774:	2d1f      	cmp	r5, #31
    3776:	dd00      	ble.n	377a <__aeabi_dsub+0x36e>
    3778:	e11f      	b.n	39ba <__aeabi_dsub+0x5ae>
    377a:	2620      	movs	r6, #32
    377c:	0027      	movs	r7, r4
    377e:	4650      	mov	r0, sl
    3780:	1b76      	subs	r6, r6, r5
    3782:	40b7      	lsls	r7, r6
    3784:	40e8      	lsrs	r0, r5
    3786:	4307      	orrs	r7, r0
    3788:	4650      	mov	r0, sl
    378a:	40b0      	lsls	r0, r6
    378c:	1e46      	subs	r6, r0, #1
    378e:	41b0      	sbcs	r0, r6
    3790:	40ec      	lsrs	r4, r5
    3792:	4338      	orrs	r0, r7
    3794:	1a17      	subs	r7, r2, r0
    3796:	42ba      	cmp	r2, r7
    3798:	4192      	sbcs	r2, r2
    379a:	1b0c      	subs	r4, r1, r4
    379c:	4252      	negs	r2, r2
    379e:	1aa4      	subs	r4, r4, r2
    37a0:	4666      	mov	r6, ip
    37a2:	4698      	mov	r8, r3
    37a4:	e68b      	b.n	34be <__aeabi_dsub+0xb2>
    37a6:	4664      	mov	r4, ip
    37a8:	4667      	mov	r7, ip
    37aa:	432c      	orrs	r4, r5
    37ac:	d000      	beq.n	37b0 <__aeabi_dsub+0x3a4>
    37ae:	e68b      	b.n	34c8 <__aeabi_dsub+0xbc>
    37b0:	2500      	movs	r5, #0
    37b2:	2600      	movs	r6, #0
    37b4:	2700      	movs	r7, #0
    37b6:	e6ea      	b.n	358e <__aeabi_dsub+0x182>
    37b8:	001e      	movs	r6, r3
    37ba:	e6ad      	b.n	3518 <__aeabi_dsub+0x10c>
    37bc:	2b1f      	cmp	r3, #31
    37be:	dc60      	bgt.n	3882 <__aeabi_dsub+0x476>
    37c0:	2720      	movs	r7, #32
    37c2:	1af8      	subs	r0, r7, r3
    37c4:	000f      	movs	r7, r1
    37c6:	4684      	mov	ip, r0
    37c8:	4087      	lsls	r7, r0
    37ca:	0010      	movs	r0, r2
    37cc:	40d8      	lsrs	r0, r3
    37ce:	4307      	orrs	r7, r0
    37d0:	4660      	mov	r0, ip
    37d2:	4082      	lsls	r2, r0
    37d4:	1e50      	subs	r0, r2, #1
    37d6:	4182      	sbcs	r2, r0
    37d8:	40d9      	lsrs	r1, r3
    37da:	4317      	orrs	r7, r2
    37dc:	e6f5      	b.n	35ca <__aeabi_dsub+0x1be>
    37de:	0026      	movs	r6, r4
    37e0:	4650      	mov	r0, sl
    37e2:	4306      	orrs	r6, r0
    37e4:	d005      	beq.n	37f2 <__aeabi_dsub+0x3e6>
    37e6:	43ed      	mvns	r5, r5
    37e8:	2d00      	cmp	r5, #0
    37ea:	d0d3      	beq.n	3794 <__aeabi_dsub+0x388>
    37ec:	4e90      	ldr	r6, [pc, #576]	; (3a30 <__aeabi_dsub+0x624>)
    37ee:	45b4      	cmp	ip, r6
    37f0:	d1bd      	bne.n	376e <__aeabi_dsub+0x362>
    37f2:	000c      	movs	r4, r1
    37f4:	0017      	movs	r7, r2
    37f6:	4666      	mov	r6, ip
    37f8:	4698      	mov	r8, r3
    37fa:	e68d      	b.n	3518 <__aeabi_dsub+0x10c>
    37fc:	488c      	ldr	r0, [pc, #560]	; (3a30 <__aeabi_dsub+0x624>)
    37fe:	4283      	cmp	r3, r0
    3800:	d00b      	beq.n	381a <__aeabi_dsub+0x40e>
    3802:	4663      	mov	r3, ip
    3804:	e6d9      	b.n	35ba <__aeabi_dsub+0x1ae>
    3806:	2d00      	cmp	r5, #0
    3808:	d000      	beq.n	380c <__aeabi_dsub+0x400>
    380a:	e096      	b.n	393a <__aeabi_dsub+0x52e>
    380c:	0008      	movs	r0, r1
    380e:	4310      	orrs	r0, r2
    3810:	d100      	bne.n	3814 <__aeabi_dsub+0x408>
    3812:	e0e2      	b.n	39da <__aeabi_dsub+0x5ce>
    3814:	000c      	movs	r4, r1
    3816:	0017      	movs	r7, r2
    3818:	4698      	mov	r8, r3
    381a:	4e85      	ldr	r6, [pc, #532]	; (3a30 <__aeabi_dsub+0x624>)
    381c:	e67c      	b.n	3518 <__aeabi_dsub+0x10c>
    381e:	2500      	movs	r5, #0
    3820:	e780      	b.n	3724 <__aeabi_dsub+0x318>
    3822:	2100      	movs	r1, #0
    3824:	e78e      	b.n	3744 <__aeabi_dsub+0x338>
    3826:	0023      	movs	r3, r4
    3828:	4650      	mov	r0, sl
    382a:	4303      	orrs	r3, r0
    382c:	2e00      	cmp	r6, #0
    382e:	d000      	beq.n	3832 <__aeabi_dsub+0x426>
    3830:	e0a8      	b.n	3984 <__aeabi_dsub+0x578>
    3832:	2b00      	cmp	r3, #0
    3834:	d100      	bne.n	3838 <__aeabi_dsub+0x42c>
    3836:	e0de      	b.n	39f6 <__aeabi_dsub+0x5ea>
    3838:	000b      	movs	r3, r1
    383a:	4313      	orrs	r3, r2
    383c:	d100      	bne.n	3840 <__aeabi_dsub+0x434>
    383e:	e66b      	b.n	3518 <__aeabi_dsub+0x10c>
    3840:	4452      	add	r2, sl
    3842:	4552      	cmp	r2, sl
    3844:	4180      	sbcs	r0, r0
    3846:	1864      	adds	r4, r4, r1
    3848:	4240      	negs	r0, r0
    384a:	1824      	adds	r4, r4, r0
    384c:	0017      	movs	r7, r2
    384e:	0223      	lsls	r3, r4, #8
    3850:	d400      	bmi.n	3854 <__aeabi_dsub+0x448>
    3852:	e6fd      	b.n	3650 <__aeabi_dsub+0x244>
    3854:	4b77      	ldr	r3, [pc, #476]	; (3a34 <__aeabi_dsub+0x628>)
    3856:	4666      	mov	r6, ip
    3858:	401c      	ands	r4, r3
    385a:	e65d      	b.n	3518 <__aeabi_dsub+0x10c>
    385c:	0025      	movs	r5, r4
    385e:	4650      	mov	r0, sl
    3860:	4305      	orrs	r5, r0
    3862:	2e00      	cmp	r6, #0
    3864:	d1cf      	bne.n	3806 <__aeabi_dsub+0x3fa>
    3866:	2d00      	cmp	r5, #0
    3868:	d14f      	bne.n	390a <__aeabi_dsub+0x4fe>
    386a:	000c      	movs	r4, r1
    386c:	4314      	orrs	r4, r2
    386e:	d100      	bne.n	3872 <__aeabi_dsub+0x466>
    3870:	e0a0      	b.n	39b4 <__aeabi_dsub+0x5a8>
    3872:	000c      	movs	r4, r1
    3874:	0017      	movs	r7, r2
    3876:	4698      	mov	r8, r3
    3878:	e64e      	b.n	3518 <__aeabi_dsub+0x10c>
    387a:	4666      	mov	r6, ip
    387c:	2400      	movs	r4, #0
    387e:	2700      	movs	r7, #0
    3880:	e685      	b.n	358e <__aeabi_dsub+0x182>
    3882:	001f      	movs	r7, r3
    3884:	0008      	movs	r0, r1
    3886:	3f20      	subs	r7, #32
    3888:	40f8      	lsrs	r0, r7
    388a:	0007      	movs	r7, r0
    388c:	2b20      	cmp	r3, #32
    388e:	d100      	bne.n	3892 <__aeabi_dsub+0x486>
    3890:	e08e      	b.n	39b0 <__aeabi_dsub+0x5a4>
    3892:	2040      	movs	r0, #64	; 0x40
    3894:	1ac3      	subs	r3, r0, r3
    3896:	4099      	lsls	r1, r3
    3898:	430a      	orrs	r2, r1
    389a:	1e51      	subs	r1, r2, #1
    389c:	418a      	sbcs	r2, r1
    389e:	2100      	movs	r1, #0
    38a0:	4317      	orrs	r7, r2
    38a2:	e692      	b.n	35ca <__aeabi_dsub+0x1be>
    38a4:	2e00      	cmp	r6, #0
    38a6:	d114      	bne.n	38d2 <__aeabi_dsub+0x4c6>
    38a8:	0026      	movs	r6, r4
    38aa:	4650      	mov	r0, sl
    38ac:	4306      	orrs	r6, r0
    38ae:	d062      	beq.n	3976 <__aeabi_dsub+0x56a>
    38b0:	43db      	mvns	r3, r3
    38b2:	2b00      	cmp	r3, #0
    38b4:	d15c      	bne.n	3970 <__aeabi_dsub+0x564>
    38b6:	1887      	adds	r7, r0, r2
    38b8:	4297      	cmp	r7, r2
    38ba:	4192      	sbcs	r2, r2
    38bc:	1864      	adds	r4, r4, r1
    38be:	4252      	negs	r2, r2
    38c0:	18a4      	adds	r4, r4, r2
    38c2:	4666      	mov	r6, ip
    38c4:	e687      	b.n	35d6 <__aeabi_dsub+0x1ca>
    38c6:	4650      	mov	r0, sl
    38c8:	4320      	orrs	r0, r4
    38ca:	1e44      	subs	r4, r0, #1
    38cc:	41a0      	sbcs	r0, r4
    38ce:	2400      	movs	r4, #0
    38d0:	e760      	b.n	3794 <__aeabi_dsub+0x388>
    38d2:	4e57      	ldr	r6, [pc, #348]	; (3a30 <__aeabi_dsub+0x624>)
    38d4:	45b4      	cmp	ip, r6
    38d6:	d04e      	beq.n	3976 <__aeabi_dsub+0x56a>
    38d8:	2680      	movs	r6, #128	; 0x80
    38da:	0436      	lsls	r6, r6, #16
    38dc:	425b      	negs	r3, r3
    38de:	4334      	orrs	r4, r6
    38e0:	2b38      	cmp	r3, #56	; 0x38
    38e2:	dd00      	ble.n	38e6 <__aeabi_dsub+0x4da>
    38e4:	e07f      	b.n	39e6 <__aeabi_dsub+0x5da>
    38e6:	2b1f      	cmp	r3, #31
    38e8:	dd00      	ble.n	38ec <__aeabi_dsub+0x4e0>
    38ea:	e08b      	b.n	3a04 <__aeabi_dsub+0x5f8>
    38ec:	2620      	movs	r6, #32
    38ee:	0027      	movs	r7, r4
    38f0:	4650      	mov	r0, sl
    38f2:	1af6      	subs	r6, r6, r3
    38f4:	40b7      	lsls	r7, r6
    38f6:	40d8      	lsrs	r0, r3
    38f8:	4307      	orrs	r7, r0
    38fa:	4650      	mov	r0, sl
    38fc:	40b0      	lsls	r0, r6
    38fe:	1e46      	subs	r6, r0, #1
    3900:	41b0      	sbcs	r0, r6
    3902:	4307      	orrs	r7, r0
    3904:	40dc      	lsrs	r4, r3
    3906:	18bf      	adds	r7, r7, r2
    3908:	e7d6      	b.n	38b8 <__aeabi_dsub+0x4ac>
    390a:	000d      	movs	r5, r1
    390c:	4315      	orrs	r5, r2
    390e:	d100      	bne.n	3912 <__aeabi_dsub+0x506>
    3910:	e602      	b.n	3518 <__aeabi_dsub+0x10c>
    3912:	4650      	mov	r0, sl
    3914:	1a80      	subs	r0, r0, r2
    3916:	4582      	cmp	sl, r0
    3918:	41bf      	sbcs	r7, r7
    391a:	1a65      	subs	r5, r4, r1
    391c:	427f      	negs	r7, r7
    391e:	1bed      	subs	r5, r5, r7
    3920:	4684      	mov	ip, r0
    3922:	0228      	lsls	r0, r5, #8
    3924:	d400      	bmi.n	3928 <__aeabi_dsub+0x51c>
    3926:	e68d      	b.n	3644 <__aeabi_dsub+0x238>
    3928:	4650      	mov	r0, sl
    392a:	1a17      	subs	r7, r2, r0
    392c:	42ba      	cmp	r2, r7
    392e:	4192      	sbcs	r2, r2
    3930:	1b0c      	subs	r4, r1, r4
    3932:	4252      	negs	r2, r2
    3934:	1aa4      	subs	r4, r4, r2
    3936:	4698      	mov	r8, r3
    3938:	e5ee      	b.n	3518 <__aeabi_dsub+0x10c>
    393a:	000d      	movs	r5, r1
    393c:	4315      	orrs	r5, r2
    393e:	d100      	bne.n	3942 <__aeabi_dsub+0x536>
    3940:	e76b      	b.n	381a <__aeabi_dsub+0x40e>
    3942:	4650      	mov	r0, sl
    3944:	0767      	lsls	r7, r4, #29
    3946:	08c0      	lsrs	r0, r0, #3
    3948:	4307      	orrs	r7, r0
    394a:	2080      	movs	r0, #128	; 0x80
    394c:	08e4      	lsrs	r4, r4, #3
    394e:	0300      	lsls	r0, r0, #12
    3950:	4204      	tst	r4, r0
    3952:	d007      	beq.n	3964 <__aeabi_dsub+0x558>
    3954:	08cd      	lsrs	r5, r1, #3
    3956:	4205      	tst	r5, r0
    3958:	d104      	bne.n	3964 <__aeabi_dsub+0x558>
    395a:	002c      	movs	r4, r5
    395c:	4698      	mov	r8, r3
    395e:	08d7      	lsrs	r7, r2, #3
    3960:	0749      	lsls	r1, r1, #29
    3962:	430f      	orrs	r7, r1
    3964:	0f7b      	lsrs	r3, r7, #29
    3966:	00e4      	lsls	r4, r4, #3
    3968:	431c      	orrs	r4, r3
    396a:	00ff      	lsls	r7, r7, #3
    396c:	4e30      	ldr	r6, [pc, #192]	; (3a30 <__aeabi_dsub+0x624>)
    396e:	e5d3      	b.n	3518 <__aeabi_dsub+0x10c>
    3970:	4e2f      	ldr	r6, [pc, #188]	; (3a30 <__aeabi_dsub+0x624>)
    3972:	45b4      	cmp	ip, r6
    3974:	d1b4      	bne.n	38e0 <__aeabi_dsub+0x4d4>
    3976:	000c      	movs	r4, r1
    3978:	0017      	movs	r7, r2
    397a:	4666      	mov	r6, ip
    397c:	e5cc      	b.n	3518 <__aeabi_dsub+0x10c>
    397e:	2700      	movs	r7, #0
    3980:	2400      	movs	r4, #0
    3982:	e5e8      	b.n	3556 <__aeabi_dsub+0x14a>
    3984:	2b00      	cmp	r3, #0
    3986:	d039      	beq.n	39fc <__aeabi_dsub+0x5f0>
    3988:	000b      	movs	r3, r1
    398a:	4313      	orrs	r3, r2
    398c:	d100      	bne.n	3990 <__aeabi_dsub+0x584>
    398e:	e744      	b.n	381a <__aeabi_dsub+0x40e>
    3990:	08c0      	lsrs	r0, r0, #3
    3992:	0767      	lsls	r7, r4, #29
    3994:	4307      	orrs	r7, r0
    3996:	2080      	movs	r0, #128	; 0x80
    3998:	08e4      	lsrs	r4, r4, #3
    399a:	0300      	lsls	r0, r0, #12
    399c:	4204      	tst	r4, r0
    399e:	d0e1      	beq.n	3964 <__aeabi_dsub+0x558>
    39a0:	08cb      	lsrs	r3, r1, #3
    39a2:	4203      	tst	r3, r0
    39a4:	d1de      	bne.n	3964 <__aeabi_dsub+0x558>
    39a6:	08d7      	lsrs	r7, r2, #3
    39a8:	0749      	lsls	r1, r1, #29
    39aa:	430f      	orrs	r7, r1
    39ac:	001c      	movs	r4, r3
    39ae:	e7d9      	b.n	3964 <__aeabi_dsub+0x558>
    39b0:	2100      	movs	r1, #0
    39b2:	e771      	b.n	3898 <__aeabi_dsub+0x48c>
    39b4:	2500      	movs	r5, #0
    39b6:	2700      	movs	r7, #0
    39b8:	e5e9      	b.n	358e <__aeabi_dsub+0x182>
    39ba:	002e      	movs	r6, r5
    39bc:	0027      	movs	r7, r4
    39be:	3e20      	subs	r6, #32
    39c0:	40f7      	lsrs	r7, r6
    39c2:	2d20      	cmp	r5, #32
    39c4:	d02f      	beq.n	3a26 <__aeabi_dsub+0x61a>
    39c6:	2640      	movs	r6, #64	; 0x40
    39c8:	1b75      	subs	r5, r6, r5
    39ca:	40ac      	lsls	r4, r5
    39cc:	4650      	mov	r0, sl
    39ce:	4320      	orrs	r0, r4
    39d0:	1e44      	subs	r4, r0, #1
    39d2:	41a0      	sbcs	r0, r4
    39d4:	2400      	movs	r4, #0
    39d6:	4338      	orrs	r0, r7
    39d8:	e6dc      	b.n	3794 <__aeabi_dsub+0x388>
    39da:	2480      	movs	r4, #128	; 0x80
    39dc:	2500      	movs	r5, #0
    39de:	0324      	lsls	r4, r4, #12
    39e0:	4e13      	ldr	r6, [pc, #76]	; (3a30 <__aeabi_dsub+0x624>)
    39e2:	2700      	movs	r7, #0
    39e4:	e5d3      	b.n	358e <__aeabi_dsub+0x182>
    39e6:	4650      	mov	r0, sl
    39e8:	4320      	orrs	r0, r4
    39ea:	0007      	movs	r7, r0
    39ec:	1e78      	subs	r0, r7, #1
    39ee:	4187      	sbcs	r7, r0
    39f0:	2400      	movs	r4, #0
    39f2:	18bf      	adds	r7, r7, r2
    39f4:	e760      	b.n	38b8 <__aeabi_dsub+0x4ac>
    39f6:	000c      	movs	r4, r1
    39f8:	0017      	movs	r7, r2
    39fa:	e58d      	b.n	3518 <__aeabi_dsub+0x10c>
    39fc:	000c      	movs	r4, r1
    39fe:	0017      	movs	r7, r2
    3a00:	4e0b      	ldr	r6, [pc, #44]	; (3a30 <__aeabi_dsub+0x624>)
    3a02:	e589      	b.n	3518 <__aeabi_dsub+0x10c>
    3a04:	001e      	movs	r6, r3
    3a06:	0027      	movs	r7, r4
    3a08:	3e20      	subs	r6, #32
    3a0a:	40f7      	lsrs	r7, r6
    3a0c:	2b20      	cmp	r3, #32
    3a0e:	d00c      	beq.n	3a2a <__aeabi_dsub+0x61e>
    3a10:	2640      	movs	r6, #64	; 0x40
    3a12:	1af3      	subs	r3, r6, r3
    3a14:	409c      	lsls	r4, r3
    3a16:	4650      	mov	r0, sl
    3a18:	4320      	orrs	r0, r4
    3a1a:	1e44      	subs	r4, r0, #1
    3a1c:	41a0      	sbcs	r0, r4
    3a1e:	4307      	orrs	r7, r0
    3a20:	2400      	movs	r4, #0
    3a22:	18bf      	adds	r7, r7, r2
    3a24:	e748      	b.n	38b8 <__aeabi_dsub+0x4ac>
    3a26:	2400      	movs	r4, #0
    3a28:	e7d0      	b.n	39cc <__aeabi_dsub+0x5c0>
    3a2a:	2400      	movs	r4, #0
    3a2c:	e7f3      	b.n	3a16 <__aeabi_dsub+0x60a>
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	000007ff 	.word	0x000007ff
    3a34:	ff7fffff 	.word	0xff7fffff

00003a38 <__aeabi_d2iz>:
    3a38:	b530      	push	{r4, r5, lr}
    3a3a:	4d13      	ldr	r5, [pc, #76]	; (3a88 <__aeabi_d2iz+0x50>)
    3a3c:	030a      	lsls	r2, r1, #12
    3a3e:	004b      	lsls	r3, r1, #1
    3a40:	0b12      	lsrs	r2, r2, #12
    3a42:	0d5b      	lsrs	r3, r3, #21
    3a44:	0fc9      	lsrs	r1, r1, #31
    3a46:	2400      	movs	r4, #0
    3a48:	42ab      	cmp	r3, r5
    3a4a:	dd10      	ble.n	3a6e <__aeabi_d2iz+0x36>
    3a4c:	4c0f      	ldr	r4, [pc, #60]	; (3a8c <__aeabi_d2iz+0x54>)
    3a4e:	42a3      	cmp	r3, r4
    3a50:	dc0f      	bgt.n	3a72 <__aeabi_d2iz+0x3a>
    3a52:	2480      	movs	r4, #128	; 0x80
    3a54:	4d0e      	ldr	r5, [pc, #56]	; (3a90 <__aeabi_d2iz+0x58>)
    3a56:	0364      	lsls	r4, r4, #13
    3a58:	4322      	orrs	r2, r4
    3a5a:	1aed      	subs	r5, r5, r3
    3a5c:	2d1f      	cmp	r5, #31
    3a5e:	dd0b      	ble.n	3a78 <__aeabi_d2iz+0x40>
    3a60:	480c      	ldr	r0, [pc, #48]	; (3a94 <__aeabi_d2iz+0x5c>)
    3a62:	1ac3      	subs	r3, r0, r3
    3a64:	40da      	lsrs	r2, r3
    3a66:	4254      	negs	r4, r2
    3a68:	2900      	cmp	r1, #0
    3a6a:	d100      	bne.n	3a6e <__aeabi_d2iz+0x36>
    3a6c:	0014      	movs	r4, r2
    3a6e:	0020      	movs	r0, r4
    3a70:	bd30      	pop	{r4, r5, pc}
    3a72:	4b09      	ldr	r3, [pc, #36]	; (3a98 <__aeabi_d2iz+0x60>)
    3a74:	18cc      	adds	r4, r1, r3
    3a76:	e7fa      	b.n	3a6e <__aeabi_d2iz+0x36>
    3a78:	4c08      	ldr	r4, [pc, #32]	; (3a9c <__aeabi_d2iz+0x64>)
    3a7a:	40e8      	lsrs	r0, r5
    3a7c:	46a4      	mov	ip, r4
    3a7e:	4463      	add	r3, ip
    3a80:	409a      	lsls	r2, r3
    3a82:	4302      	orrs	r2, r0
    3a84:	e7ef      	b.n	3a66 <__aeabi_d2iz+0x2e>
    3a86:	46c0      	nop			; (mov r8, r8)
    3a88:	000003fe 	.word	0x000003fe
    3a8c:	0000041d 	.word	0x0000041d
    3a90:	00000433 	.word	0x00000433
    3a94:	00000413 	.word	0x00000413
    3a98:	7fffffff 	.word	0x7fffffff
    3a9c:	fffffbed 	.word	0xfffffbed

00003aa0 <__aeabi_ui2d>:
    3aa0:	b510      	push	{r4, lr}
    3aa2:	1e04      	subs	r4, r0, #0
    3aa4:	d028      	beq.n	3af8 <__aeabi_ui2d+0x58>
    3aa6:	f000 f833 	bl	3b10 <__clzsi2>
    3aaa:	4b15      	ldr	r3, [pc, #84]	; (3b00 <__aeabi_ui2d+0x60>)
    3aac:	4a15      	ldr	r2, [pc, #84]	; (3b04 <__aeabi_ui2d+0x64>)
    3aae:	1a1b      	subs	r3, r3, r0
    3ab0:	1ad2      	subs	r2, r2, r3
    3ab2:	2a1f      	cmp	r2, #31
    3ab4:	dd15      	ble.n	3ae2 <__aeabi_ui2d+0x42>
    3ab6:	4a14      	ldr	r2, [pc, #80]	; (3b08 <__aeabi_ui2d+0x68>)
    3ab8:	1ad2      	subs	r2, r2, r3
    3aba:	4094      	lsls	r4, r2
    3abc:	2200      	movs	r2, #0
    3abe:	0324      	lsls	r4, r4, #12
    3ac0:	055b      	lsls	r3, r3, #21
    3ac2:	0b24      	lsrs	r4, r4, #12
    3ac4:	0d5b      	lsrs	r3, r3, #21
    3ac6:	2100      	movs	r1, #0
    3ac8:	0010      	movs	r0, r2
    3aca:	0324      	lsls	r4, r4, #12
    3acc:	0d0a      	lsrs	r2, r1, #20
    3ace:	0b24      	lsrs	r4, r4, #12
    3ad0:	0512      	lsls	r2, r2, #20
    3ad2:	4322      	orrs	r2, r4
    3ad4:	4c0d      	ldr	r4, [pc, #52]	; (3b0c <__aeabi_ui2d+0x6c>)
    3ad6:	051b      	lsls	r3, r3, #20
    3ad8:	4022      	ands	r2, r4
    3ada:	4313      	orrs	r3, r2
    3adc:	005b      	lsls	r3, r3, #1
    3ade:	0859      	lsrs	r1, r3, #1
    3ae0:	bd10      	pop	{r4, pc}
    3ae2:	0021      	movs	r1, r4
    3ae4:	4091      	lsls	r1, r2
    3ae6:	000a      	movs	r2, r1
    3ae8:	210b      	movs	r1, #11
    3aea:	1a08      	subs	r0, r1, r0
    3aec:	40c4      	lsrs	r4, r0
    3aee:	055b      	lsls	r3, r3, #21
    3af0:	0324      	lsls	r4, r4, #12
    3af2:	0b24      	lsrs	r4, r4, #12
    3af4:	0d5b      	lsrs	r3, r3, #21
    3af6:	e7e6      	b.n	3ac6 <__aeabi_ui2d+0x26>
    3af8:	2300      	movs	r3, #0
    3afa:	2400      	movs	r4, #0
    3afc:	2200      	movs	r2, #0
    3afe:	e7e2      	b.n	3ac6 <__aeabi_ui2d+0x26>
    3b00:	0000041e 	.word	0x0000041e
    3b04:	00000433 	.word	0x00000433
    3b08:	00000413 	.word	0x00000413
    3b0c:	800fffff 	.word	0x800fffff

00003b10 <__clzsi2>:
    3b10:	211c      	movs	r1, #28
    3b12:	2301      	movs	r3, #1
    3b14:	041b      	lsls	r3, r3, #16
    3b16:	4298      	cmp	r0, r3
    3b18:	d301      	bcc.n	3b1e <__clzsi2+0xe>
    3b1a:	0c00      	lsrs	r0, r0, #16
    3b1c:	3910      	subs	r1, #16
    3b1e:	0a1b      	lsrs	r3, r3, #8
    3b20:	4298      	cmp	r0, r3
    3b22:	d301      	bcc.n	3b28 <__clzsi2+0x18>
    3b24:	0a00      	lsrs	r0, r0, #8
    3b26:	3908      	subs	r1, #8
    3b28:	091b      	lsrs	r3, r3, #4
    3b2a:	4298      	cmp	r0, r3
    3b2c:	d301      	bcc.n	3b32 <__clzsi2+0x22>
    3b2e:	0900      	lsrs	r0, r0, #4
    3b30:	3904      	subs	r1, #4
    3b32:	a202      	add	r2, pc, #8	; (adr r2, 3b3c <__clzsi2+0x2c>)
    3b34:	5c10      	ldrb	r0, [r2, r0]
    3b36:	1840      	adds	r0, r0, r1
    3b38:	4770      	bx	lr
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	02020304 	.word	0x02020304
    3b40:	01010101 	.word	0x01010101
	...

00003b4c <__libc_init_array>:
    3b4c:	b570      	push	{r4, r5, r6, lr}
    3b4e:	2600      	movs	r6, #0
    3b50:	4d0c      	ldr	r5, [pc, #48]	; (3b84 <__libc_init_array+0x38>)
    3b52:	4c0d      	ldr	r4, [pc, #52]	; (3b88 <__libc_init_array+0x3c>)
    3b54:	1b64      	subs	r4, r4, r5
    3b56:	10a4      	asrs	r4, r4, #2
    3b58:	42a6      	cmp	r6, r4
    3b5a:	d109      	bne.n	3b70 <__libc_init_array+0x24>
    3b5c:	2600      	movs	r6, #0
    3b5e:	f000 f881 	bl	3c64 <_init>
    3b62:	4d0a      	ldr	r5, [pc, #40]	; (3b8c <__libc_init_array+0x40>)
    3b64:	4c0a      	ldr	r4, [pc, #40]	; (3b90 <__libc_init_array+0x44>)
    3b66:	1b64      	subs	r4, r4, r5
    3b68:	10a4      	asrs	r4, r4, #2
    3b6a:	42a6      	cmp	r6, r4
    3b6c:	d105      	bne.n	3b7a <__libc_init_array+0x2e>
    3b6e:	bd70      	pop	{r4, r5, r6, pc}
    3b70:	00b3      	lsls	r3, r6, #2
    3b72:	58eb      	ldr	r3, [r5, r3]
    3b74:	4798      	blx	r3
    3b76:	3601      	adds	r6, #1
    3b78:	e7ee      	b.n	3b58 <__libc_init_array+0xc>
    3b7a:	00b3      	lsls	r3, r6, #2
    3b7c:	58eb      	ldr	r3, [r5, r3]
    3b7e:	4798      	blx	r3
    3b80:	3601      	adds	r6, #1
    3b82:	e7f2      	b.n	3b6a <__libc_init_array+0x1e>
    3b84:	00003c70 	.word	0x00003c70
    3b88:	00003c70 	.word	0x00003c70
    3b8c:	00003c70 	.word	0x00003c70
    3b90:	00003c74 	.word	0x00003c74

00003b94 <memset>:
    3b94:	0003      	movs	r3, r0
    3b96:	1882      	adds	r2, r0, r2
    3b98:	4293      	cmp	r3, r2
    3b9a:	d100      	bne.n	3b9e <memset+0xa>
    3b9c:	4770      	bx	lr
    3b9e:	7019      	strb	r1, [r3, #0]
    3ba0:	3301      	adds	r3, #1
    3ba2:	e7f9      	b.n	3b98 <memset+0x4>
    3ba4:	42000800 	.word	0x42000800
    3ba8:	42000c00 	.word	0x42000c00
    3bac:	42001000 	.word	0x42001000

00003bb0 <_tcc_intflag>:
    3bb0:	00000001 00000002 00000004 00000008     ................
    3bc0:	00001000 00002000 00004000 00008000     ..... ...@......
    3bd0:	00010000 00020000 00040000 00080000     ................

00003be0 <tc_interrupt_vectors.12207>:
    3be0:	00000e0d 00002a9c 00002a7e 00002a38     .....*..~*..8*..
    3bf0:	00002956 00002a38 00002a70 00002a38     V)..8*..p*..8*..
    3c00:	00002956 00002a7e 00002a7e 00002a70     V)..~*..~*..p*..
    3c10:	00002956 0000294e 0000294e 0000294e     V)..N)..N)..N)..
    3c20:	00002cb4 000030fc 00002fbc 00002fbc     .,...0.../.../..
    3c30:	00002fb8 000030d4 000030d4 000030c6     ./...0...0...0..
    3c40:	00002fb8 000030d4 000030c6 000030d4     ./...0...0...0..
    3c50:	00002fb8 000030dc 000030dc 000030dc     ./...0...0...0..
    3c60:	000032e0                                .2..

00003c64 <_init>:
    3c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c66:	46c0      	nop			; (mov r8, r8)
    3c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c6a:	bc08      	pop	{r3}
    3c6c:	469e      	mov	lr, r3
    3c6e:	4770      	bx	lr

00003c70 <__init_array_start>:
    3c70:	000000b5 	.word	0x000000b5

00003c74 <_fini>:
    3c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c7a:	bc08      	pop	{r3}
    3c7c:	469e      	mov	lr, r3
    3c7e:	4770      	bx	lr

00003c80 <__fini_array_start>:
    3c80:	0000008d 	.word	0x0000008d
