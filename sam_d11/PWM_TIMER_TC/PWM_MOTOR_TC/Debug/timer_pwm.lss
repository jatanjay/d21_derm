
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f88  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000028  20000000  00003f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001cc  20000028  00003fb0  00020028  2**2
                  ALLOC
  3 .stack        00000404  200001f4  0000417c  00020028  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
  6 .debug_info   00033faa  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000441e  00000000  00000000  00054055  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000060e8  00000000  00000000  00058473  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000708  00000000  00000000  0005e55b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bb0  00000000  00000000  0005ec63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017e7d  00000000  00000000  0005f813  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e1ef  00000000  00000000  00077690  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007b4cb  00000000  00000000  0008587f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001330  00000000  00000000  00100d4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 05 00 20 3d 1a 00 00 3b 1a 00 00 3b 1a 00 00     ... =...;...;...
	...
      2c:	3b 1a 00 00 00 00 00 00 00 00 00 00 3b 1a 00 00     ;...........;...
      3c:	3b 1a 00 00 3b 1a 00 00 3b 1a 00 00 3b 1a 00 00     ;...;...;...;...
      4c:	3b 1a 00 00 3b 1a 00 00 3b 1a 00 00 3b 1a 00 00     ;...;...;...;...
      5c:	3b 1a 00 00 3b 1a 00 00 41 0b 00 00 51 0b 00 00     ;...;...A...Q...
      6c:	61 0b 00 00 e1 16 00 00 75 17 00 00 85 17 00 00     a.......u.......
      7c:	3b 1a 00 00 3b 1a 00 00 3b 1a 00 00 3b 1a 00 00     ;...;...;...;...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000028 	.word	0x20000028
      ac:	00000000 	.word	0x00000000
      b0:	00003f88 	.word	0x00003f88

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	2000002c 	.word	0x2000002c
      e0:	00003f88 	.word	0x00003f88
      e4:	00003f88 	.word	0x00003f88
      e8:	00000000 	.word	0x00000000

000000ec <set_pwm_color_channel>:
 *  Author: jatan
 */ 

#include "pwm_led.h"

void set_pwm_color_channel(uint8_t channel, bool enable) {
      ec:	b510      	push	{r4, lr}
      ee:	1e0a      	subs	r2, r1, #0
      f0:	4c0a      	ldr	r4, [pc, #40]	; (11c <set_pwm_color_channel+0x30>)
      f2:	4b0b      	ldr	r3, [pc, #44]	; (120 <set_pwm_color_channel+0x34>)
	//
	//tcc_set_compare_value(&tcc_instance,
	//WHITE_CHANNEL,
	//ZERO_DUTY_CYCLE);
	
	if (enable){
      f4:	d000      	beq.n	f8 <set_pwm_color_channel+0xc>
		tcc_set_compare_value(&tcc_instance,
      f6:	4a0b      	ldr	r2, [pc, #44]	; (124 <set_pwm_color_channel+0x38>)
		channel,
		0x2FF);
	}else{
		tcc_set_compare_value(&tcc_instance,
      f8:	0001      	movs	r1, r0
      fa:	0020      	movs	r0, r4
      fc:	4798      	blx	r3
	Tcc *const tcc_module = module_inst->hw;
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
      fe:	2104      	movs	r1, #4
     100:	201f      	movs	r0, #31
     102:	6822      	ldr	r2, [r4, #0]
     104:	6893      	ldr	r3, [r2, #8]
     106:	420b      	tst	r3, r1
     108:	d1fc      	bne.n	104 <set_pwm_color_channel+0x18>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     10a:	7953      	ldrb	r3, [r2, #5]
     10c:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     10e:	d002      	beq.n	116 <set_pwm_color_channel+0x2a>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     110:	2b60      	cmp	r3, #96	; 0x60
     112:	d1f7      	bne.n	104 <set_pwm_color_channel+0x18>
	tcc_force_double_buffer_update(&tcc_instance);
	
	//config_tcc.pins.enable_wave_out_pin[channel] = enable;
	//tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
	//tcc_enable(&tcc_instance);
}
     114:	bd10      	pop	{r4, pc}
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     116:	2360      	movs	r3, #96	; 0x60
     118:	7153      	strb	r3, [r2, #5]
     11a:	e7fb      	b.n	114 <set_pwm_color_channel+0x28>
     11c:	20000098 	.word	0x20000098
     120:	00001691 	.word	0x00001691
     124:	000002ff 	.word	0x000002ff

00000128 <set_pwm_color>:


void set_pwm_color(int color) {
	//turn_off_all();  // Turn off all channels
	
	set_pwm_color_channel(RED_CHANNEL, false);
     128:	2100      	movs	r1, #0
void set_pwm_color(int color) {
     12a:	b570      	push	{r4, r5, r6, lr}
	set_pwm_color_channel(RED_CHANNEL, false);
     12c:	4c13      	ldr	r4, [pc, #76]	; (17c <set_pwm_color+0x54>)
void set_pwm_color(int color) {
     12e:	0005      	movs	r5, r0
	set_pwm_color_channel(RED_CHANNEL, false);
     130:	0008      	movs	r0, r1
     132:	47a0      	blx	r4
	set_pwm_color_channel(BLUE_CHANNEL, false);
     134:	2100      	movs	r1, #0
     136:	2002      	movs	r0, #2
     138:	47a0      	blx	r4
	set_pwm_color_channel(GREEN_CHANNEL, false);
     13a:	2100      	movs	r1, #0
     13c:	2001      	movs	r0, #1
     13e:	47a0      	blx	r4
	set_pwm_color_channel(WHITE_CHANNEL, false);
     140:	2100      	movs	r1, #0
     142:	2003      	movs	r0, #3
     144:	47a0      	blx	r4
		
	
	switch (color) {
     146:	2d06      	cmp	r5, #6
     148:	d809      	bhi.n	15e <set_pwm_color+0x36>
     14a:	0028      	movs	r0, r5
		case 5:  // Purple (Red + Blue)
		set_pwm_color_channel(RED_CHANNEL, true);
		set_pwm_color_channel(BLUE_CHANNEL, true);
		break;
		case 6:  // Cyan (Blue + Green)
		set_pwm_color_channel(BLUE_CHANNEL, true);
     14c:	2101      	movs	r1, #1
	switch (color) {
     14e:	f002 f985 	bl	245c <__gnu_thumb1_case_uqi>
     152:	0c04      	.short	0x0c04
     154:	0e090711 	.word	0x0e090711
     158:	13          	.byte	0x13
     159:	00          	.byte	0x00
		set_pwm_color_channel(RED_CHANNEL, true);
     15a:	2000      	movs	r0, #0
		set_pwm_color_channel(GREEN_CHANNEL, true);
     15c:	47a0      	blx	r4
		break;
		default:
		break;
	}
}
     15e:	bd70      	pop	{r4, r5, r6, pc}
		set_pwm_color_channel(WHITE_CHANNEL, true);
     160:	2003      	movs	r0, #3
     162:	e7fb      	b.n	15c <set_pwm_color+0x34>
		set_pwm_color_channel(RED_CHANNEL, true);
     164:	2000      	movs	r0, #0
		set_pwm_color_channel(BLUE_CHANNEL, true);
     166:	47a0      	blx	r4
		set_pwm_color_channel(GREEN_CHANNEL, true);
     168:	2101      	movs	r1, #1
     16a:	0008      	movs	r0, r1
     16c:	e7f6      	b.n	15c <set_pwm_color+0x34>
		set_pwm_color_channel(RED_CHANNEL, true);
     16e:	2000      	movs	r0, #0
     170:	47a0      	blx	r4
		set_pwm_color_channel(BLUE_CHANNEL, true);
     172:	2101      	movs	r1, #1
     174:	2002      	movs	r0, #2
     176:	e7f1      	b.n	15c <set_pwm_color+0x34>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     178:	2002      	movs	r0, #2
     17a:	e7f4      	b.n	166 <set_pwm_color+0x3e>
     17c:	000000ed 	.word	0x000000ed

00000180 <configure_pwm_tcc>:


void configure_pwm_tcc(void)
{
     180:	b570      	push	{r4, r5, r6, lr}
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     182:	4c1c      	ldr	r4, [pc, #112]	; (1f4 <configure_pwm_tcc+0x74>)
     184:	491c      	ldr	r1, [pc, #112]	; (1f8 <configure_pwm_tcc+0x78>)
     186:	0020      	movs	r0, r4
     188:	4b1c      	ldr	r3, [pc, #112]	; (1fc <configure_pwm_tcc+0x7c>)
     18a:	4798      	blx	r3
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
	
	config_tcc.compare.match[RED_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     18c:	2300      	movs	r3, #0

	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
	
	
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
     18e:	2105      	movs	r1, #5
	config_tcc.compare.match[RED_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     190:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.match[BLUE_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     192:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.compare.match[GREEN_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     194:	6223      	str	r3, [r4, #32]
	config_tcc.compare.match[WHITE_CHANNEL]								= CONF_DEFAULT_MATCH_COMPARE;
     196:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     198:	4b19      	ldr	r3, [pc, #100]	; (200 <configure_pwm_tcc+0x80>)
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
     19a:	67a1      	str	r1, [r4, #120]	; 0x78
	config_tcc.compare.match[RED_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
	
	config_tcc.pins.wave_out_pin[GREEN_CHANNEL]							= PIN_PA05F_TCC0_WO1;		// GREEN
     19c:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL]						= MUX_PA05F_TCC0_WO1;
     19e:	67e1      	str	r1, [r4, #124]	; 0x7c
	config_tcc.compare.match[GREEN_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     1a0:	0021      	movs	r1, r4
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     1a2:	6063      	str	r3, [r4, #4]
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     1a4:	2301      	movs	r3, #1
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     1a6:	3199      	adds	r1, #153	; 0x99
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     1a8:	2204      	movs	r2, #4
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     1aa:	700b      	strb	r3, [r1, #0]

	config_tcc.pins.wave_out_pin[BLUE_CHANNEL]							= PIN_PA08E_TCC0_WO2;		// BLUE
     1ac:	2108      	movs	r1, #8
     1ae:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL]						= MUX_PA08E_TCC0_WO2;
     1b0:	18a1      	adds	r1, r4, r2
     1b2:	67ca      	str	r2, [r1, #124]	; 0x7c
	config_tcc.compare.match[BLUE_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[BLUE_CHANNEL] = true;
     1b4:	0021      	movs	r1, r4
     1b6:	319a      	adds	r1, #154	; 0x9a
     1b8:	700b      	strb	r3, [r1, #0]

	config_tcc.pins.wave_out_pin[WHITE_CHANNEL]							= PIN_PA09E_TCC0_WO3;		// WHITE
     1ba:	2109      	movs	r1, #9
     1bc:	6661      	str	r1, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]						= MUX_PA09E_TCC0_WO3;
     1be:	0021      	movs	r1, r4
     1c0:	3108      	adds	r1, #8
     1c2:	67ca      	str	r2, [r1, #124]	; 0x7c
	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     1c4:	65a2      	str	r2, [r4, #88]	; 0x58
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     1c6:	0020      	movs	r0, r4
	config_tcc.compare.match[WHITE_CHANNEL]								= ZERO_DUTY_CYCLE;
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     1c8:	0022      	movs	r2, r4
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     1ca:	2502      	movs	r5, #2
	
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     1cc:	4e0d      	ldr	r6, [pc, #52]	; (204 <configure_pwm_tcc+0x84>)
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     1ce:	3098      	adds	r0, #152	; 0x98
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     1d0:	329b      	adds	r2, #155	; 0x9b
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] =					true;
     1d2:	7003      	strb	r3, [r0, #0]
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     1d4:	7013      	strb	r3, [r2, #0]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     1d6:	4908      	ldr	r1, [pc, #32]	; (1f8 <configure_pwm_tcc+0x78>)
     1d8:	4b0b      	ldr	r3, [pc, #44]	; (208 <configure_pwm_tcc+0x88>)
     1da:	0022      	movs	r2, r4
     1dc:	0030      	movs	r0, r6
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     1de:	7625      	strb	r5, [r4, #24]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     1e0:	4798      	blx	r3
     1e2:	6833      	ldr	r3, [r6, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     1e4:	689a      	ldr	r2, [r3, #8]
     1e6:	422a      	tst	r2, r5
     1e8:	d1fc      	bne.n	1e4 <configure_pwm_tcc+0x64>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     1ea:	681a      	ldr	r2, [r3, #0]
     1ec:	4315      	orrs	r5, r2
     1ee:	601d      	str	r5, [r3, #0]
	tcc_enable(&tcc_instance);
	
}
     1f0:	bd70      	pop	{r4, r5, r6, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	200000d8 	.word	0x200000d8
     1f8:	42001400 	.word	0x42001400
     1fc:	000012e5 	.word	0x000012e5
     200:	00000fff 	.word	0x00000fff
     204:	20000098 	.word	0x20000098
     208:	000013c9 	.word	0x000013c9

0000020c <set_pwm_red>:
5	p	(r + b)
6	c	(b + g)
*/
	

void set_pwm_red(void){
     20c:	b510      	push	{r4, lr}
	set_pwm_color(0);
     20e:	2000      	movs	r0, #0
     210:	4b01      	ldr	r3, [pc, #4]	; (218 <set_pwm_red+0xc>)
     212:	4798      	blx	r3
}
     214:	bd10      	pop	{r4, pc}
     216:	46c0      	nop			; (mov r8, r8)
     218:	00000129 	.word	0x00000129

0000021c <set_pwm_green>:

void set_pwm_green(void){
     21c:	b510      	push	{r4, lr}
	set_pwm_color(1);
     21e:	2001      	movs	r0, #1
     220:	4b01      	ldr	r3, [pc, #4]	; (228 <set_pwm_green+0xc>)
     222:	4798      	blx	r3
	
}
     224:	bd10      	pop	{r4, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	00000129 	.word	0x00000129

0000022c <set_pwm_blue>:

void set_pwm_blue(void){
     22c:	b510      	push	{r4, lr}
	set_pwm_color(2);
     22e:	2002      	movs	r0, #2
     230:	4b01      	ldr	r3, [pc, #4]	; (238 <set_pwm_blue+0xc>)
     232:	4798      	blx	r3
}
     234:	bd10      	pop	{r4, pc}
     236:	46c0      	nop			; (mov r8, r8)
     238:	00000129 	.word	0x00000129

0000023c <set_pwm_white>:

void set_pwm_white(void){
     23c:	b510      	push	{r4, lr}
	set_pwm_color(3);
     23e:	2003      	movs	r0, #3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <set_pwm_white+0xc>)
     242:	4798      	blx	r3
}
     244:	bd10      	pop	{r4, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	00000129 	.word	0x00000129

0000024c <set_pwm_yellow>:


void set_pwm_yellow(void){
     24c:	b510      	push	{r4, lr}
	set_pwm_color(4);
     24e:	2004      	movs	r0, #4
     250:	4b01      	ldr	r3, [pc, #4]	; (258 <set_pwm_yellow+0xc>)
     252:	4798      	blx	r3
	
}
     254:	bd10      	pop	{r4, pc}
     256:	46c0      	nop			; (mov r8, r8)
     258:	00000129 	.word	0x00000129

0000025c <set_pwm_purple>:

void set_pwm_purple(void){
     25c:	b510      	push	{r4, lr}
	set_pwm_color(5);
     25e:	2005      	movs	r0, #5
     260:	4b01      	ldr	r3, [pc, #4]	; (268 <set_pwm_purple+0xc>)
     262:	4798      	blx	r3
	
}
     264:	bd10      	pop	{r4, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	00000129 	.word	0x00000129

0000026c <set_pwm_cyan>:

void set_pwm_cyan(void){
     26c:	b510      	push	{r4, lr}
	set_pwm_color(6);
     26e:	2006      	movs	r0, #6
     270:	4b01      	ldr	r3, [pc, #4]	; (278 <set_pwm_cyan+0xc>)
     272:	4798      	blx	r3
	
}
     274:	bd10      	pop	{r4, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	00000129 	.word	0x00000129

0000027c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     27c:	4b09      	ldr	r3, [pc, #36]	; (2a4 <cpu_irq_enter_critical+0x28>)
     27e:	6819      	ldr	r1, [r3, #0]
     280:	2900      	cmp	r1, #0
     282:	d10b      	bne.n	29c <cpu_irq_enter_critical+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     284:	f3ef 8010 	mrs	r0, PRIMASK
     288:	4a07      	ldr	r2, [pc, #28]	; (2a8 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     28a:	2800      	cmp	r0, #0
     28c:	d105      	bne.n	29a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     28e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     290:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     294:	4905      	ldr	r1, [pc, #20]	; (2ac <cpu_irq_enter_critical+0x30>)
     296:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     298:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     29a:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     29c:	681a      	ldr	r2, [r3, #0]
     29e:	3201      	adds	r2, #1
     2a0:	601a      	str	r2, [r3, #0]
}
     2a2:	4770      	bx	lr
     2a4:	20000044 	.word	0x20000044
     2a8:	20000048 	.word	0x20000048
     2ac:	20000000 	.word	0x20000000

000002b0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     2b0:	4b08      	ldr	r3, [pc, #32]	; (2d4 <cpu_irq_leave_critical+0x24>)
     2b2:	681a      	ldr	r2, [r3, #0]
     2b4:	3a01      	subs	r2, #1
     2b6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     2b8:	681b      	ldr	r3, [r3, #0]
     2ba:	2b00      	cmp	r3, #0
     2bc:	d109      	bne.n	2d2 <cpu_irq_leave_critical+0x22>
     2be:	4b06      	ldr	r3, [pc, #24]	; (2d8 <cpu_irq_leave_critical+0x28>)
     2c0:	781b      	ldrb	r3, [r3, #0]
     2c2:	2b00      	cmp	r3, #0
     2c4:	d005      	beq.n	2d2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     2c6:	2201      	movs	r2, #1
     2c8:	4b04      	ldr	r3, [pc, #16]	; (2dc <cpu_irq_leave_critical+0x2c>)
     2ca:	701a      	strb	r2, [r3, #0]
     2cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     2d0:	b662      	cpsie	i
	}
}
     2d2:	4770      	bx	lr
     2d4:	20000044 	.word	0x20000044
     2d8:	20000048 	.word	0x20000048
     2dc:	20000000 	.word	0x20000000

000002e0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2e2:	2501      	movs	r5, #1
	config->powersave  = false;
     2e4:	2700      	movs	r7, #0
	config->input_pull = PORT_PIN_PULL_UP;
     2e6:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2e8:	4e08      	ldr	r6, [pc, #32]	; (30c <system_board_init+0x2c>)
     2ea:	0021      	movs	r1, r4
     2ec:	2010      	movs	r0, #16
     2ee:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     2f0:	70a7      	strb	r7, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2f2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2f4:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2f6:	2280      	movs	r2, #128	; 0x80
     2f8:	4b05      	ldr	r3, [pc, #20]	; (310 <system_board_init+0x30>)
     2fa:	0252      	lsls	r2, r2, #9
     2fc:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2fe:	0021      	movs	r1, r4
     300:	200e      	movs	r0, #14
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     302:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     304:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     306:	47b0      	blx	r6
}
     308:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	00000315 	.word	0x00000315
     310:	41004400 	.word	0x41004400

00000314 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     314:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     316:	2280      	movs	r2, #128	; 0x80
     318:	ab01      	add	r3, sp, #4
     31a:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     31c:	780a      	ldrb	r2, [r1, #0]
     31e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     320:	784a      	ldrb	r2, [r1, #1]
     322:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     324:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     326:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     328:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     32a:	4b01      	ldr	r3, [pc, #4]	; (330 <port_pin_set_config+0x1c>)
     32c:	4798      	blx	r3
}
     32e:	bd07      	pop	{r0, r1, r2, pc}
     330:	00001235 	.word	0x00001235

00000334 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     334:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     336:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     338:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     33a:	421a      	tst	r2, r3
     33c:	d1fc      	bne.n	338 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     33e:	4770      	bx	lr

00000340 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     340:	b5f0      	push	{r4, r5, r6, r7, lr}
     342:	0007      	movs	r7, r0
     344:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     346:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     348:	0008      	movs	r0, r1
     34a:	4b9b      	ldr	r3, [pc, #620]	; (5b8 <STACK_SIZE+0x1b8>)
{
     34c:	0014      	movs	r4, r2
     34e:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     350:	4798      	blx	r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     352:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     354:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     356:	409d      	lsls	r5, r3
     358:	002b      	movs	r3, r5
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     35a:	4a98      	ldr	r2, [pc, #608]	; (5bc <STACK_SIZE+0x1bc>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     35c:	300e      	adds	r0, #14
     35e:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     360:	b2c5      	uxtb	r5, r0
     362:	430b      	orrs	r3, r1
     364:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     366:	7b23      	ldrb	r3, [r4, #12]
     368:	aa08      	add	r2, sp, #32
     36a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     36c:	0011      	movs	r1, r2
     36e:	0028      	movs	r0, r5
     370:	4b93      	ldr	r3, [pc, #588]	; (5c0 <STACK_SIZE+0x1c0>)
     372:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     374:	0028      	movs	r0, r5
     376:	4b93      	ldr	r3, [pc, #588]	; (5c4 <STACK_SIZE+0x1c4>)
     378:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     37a:	4b93      	ldr	r3, [pc, #588]	; (5c8 <STACK_SIZE+0x1c8>)
     37c:	7b20      	ldrb	r0, [r4, #12]
     37e:	2100      	movs	r1, #0
     380:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     382:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     384:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     386:	079b      	lsls	r3, r3, #30
     388:	d500      	bpl.n	38c <i2c_master_init+0x4c>
     38a:	e109      	b.n	5a0 <STACK_SIZE+0x1a0>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     38c:	2301      	movs	r3, #1
     38e:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     390:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     392:	401d      	ands	r5, r3
     394:	d000      	beq.n	398 <i2c_master_init+0x58>
     396:	e103      	b.n	5a0 <STACK_SIZE+0x1a0>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     398:	4b87      	ldr	r3, [pc, #540]	; (5b8 <STACK_SIZE+0x1b8>)
     39a:	6838      	ldr	r0, [r7, #0]
     39c:	4798      	blx	r3
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     39e:	498b      	ldr	r1, [pc, #556]	; (5cc <STACK_SIZE+0x1cc>)
     3a0:	4b8b      	ldr	r3, [pc, #556]	; (5d0 <STACK_SIZE+0x1d0>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     3a2:	9004      	str	r0, [sp, #16]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     3a4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     3a6:	9b04      	ldr	r3, [sp, #16]

	/* Initialize values in module. */
	module->registered_callback = 0;
     3a8:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     3aa:	009a      	lsls	r2, r3, #2
     3ac:	4b89      	ldr	r3, [pc, #548]	; (5d4 <STACK_SIZE+0x1d4>)
	module->enabled_callback = 0;
     3ae:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     3b0:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     3b2:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     3b4:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     3b6:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     3b8:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     3ba:	2314      	movs	r3, #20
	module->buffer = NULL;
     3bc:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     3be:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3c0:	683b      	ldr	r3, [r7, #0]
     3c2:	ae09      	add	r6, sp, #36	; 0x24
     3c4:	9304      	str	r3, [sp, #16]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     3c6:	0018      	movs	r0, r3
     3c8:	4b7b      	ldr	r3, [pc, #492]	; (5b8 <STACK_SIZE+0x1b8>)
     3ca:	4798      	blx	r3
     3cc:	2380      	movs	r3, #128	; 0x80
     3ce:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
     3d0:	69e0      	ldr	r0, [r4, #28]
     3d2:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3d4:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3d6:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     3d8:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3da:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     3dc:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     3de:	2800      	cmp	r0, #0
     3e0:	d103      	bne.n	3ea <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3e2:	0001      	movs	r1, r0
     3e4:	4b7c      	ldr	r3, [pc, #496]	; (5d8 <STACK_SIZE+0x1d8>)
     3e6:	9804      	ldr	r0, [sp, #16]
     3e8:	4798      	blx	r3
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3ea:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     3ec:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     3ee:	0c00      	lsrs	r0, r0, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3f0:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     3f2:	b2c0      	uxtb	r0, r0
     3f4:	0031      	movs	r1, r6
     3f6:	4b79      	ldr	r3, [pc, #484]	; (5dc <STACK_SIZE+0x1dc>)
     3f8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     3fa:	2d00      	cmp	r5, #0
     3fc:	d104      	bne.n	408 <STACK_SIZE+0x8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3fe:	2101      	movs	r1, #1
     400:	9804      	ldr	r0, [sp, #16]
     402:	4b75      	ldr	r3, [pc, #468]	; (5d8 <STACK_SIZE+0x1d8>)
     404:	4798      	blx	r3
     406:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     408:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     40a:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     40c:	0c2d      	lsrs	r5, r5, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     40e:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     410:	b2e8      	uxtb	r0, r5
     412:	4b72      	ldr	r3, [pc, #456]	; (5dc <STACK_SIZE+0x1dc>)
     414:	0031      	movs	r1, r6
     416:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     418:	8aa3      	ldrh	r3, [r4, #20]
     41a:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     41c:	8ae3      	ldrh	r3, [r4, #22]
     41e:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     420:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     422:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     424:	2a00      	cmp	r2, #0
     426:	d106      	bne.n	436 <STACK_SIZE+0x36>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     428:	4b6d      	ldr	r3, [pc, #436]	; (5e0 <STACK_SIZE+0x1e0>)
     42a:	3202      	adds	r2, #2
     42c:	789b      	ldrb	r3, [r3, #2]
     42e:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     430:	1e5f      	subs	r7, r3, #1
     432:	41bb      	sbcs	r3, r7
     434:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     436:	68a2      	ldr	r2, [r4, #8]
     438:	6927      	ldr	r7, [r4, #16]
     43a:	4317      	orrs	r7, r2
     43c:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     43e:	1d63      	adds	r3, r4, #5
     440:	7fdb      	ldrb	r3, [r3, #31]
     442:	2b00      	cmp	r3, #0
     444:	d002      	beq.n	44c <STACK_SIZE+0x4c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     446:	2380      	movs	r3, #128	; 0x80
     448:	05db      	lsls	r3, r3, #23
     44a:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     44c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     44e:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     450:	0023      	movs	r3, r4
     452:	332c      	adds	r3, #44	; 0x2c
     454:	781b      	ldrb	r3, [r3, #0]
     456:	2b00      	cmp	r3, #0
     458:	d103      	bne.n	462 <STACK_SIZE+0x62>
     45a:	2380      	movs	r3, #128	; 0x80
     45c:	049b      	lsls	r3, r3, #18
     45e:	429a      	cmp	r2, r3
     460:	d102      	bne.n	468 <STACK_SIZE+0x68>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     462:	2380      	movs	r3, #128	; 0x80
     464:	051b      	lsls	r3, r3, #20
     466:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     468:	0023      	movs	r3, r4
     46a:	332d      	adds	r3, #45	; 0x2d
     46c:	781b      	ldrb	r3, [r3, #0]
     46e:	2b00      	cmp	r3, #0
     470:	d002      	beq.n	478 <STACK_SIZE+0x78>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     472:	2380      	movs	r3, #128	; 0x80
     474:	041b      	lsls	r3, r3, #16
     476:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     478:	0023      	movs	r3, r4
     47a:	332e      	adds	r3, #46	; 0x2e
     47c:	781b      	ldrb	r3, [r3, #0]
     47e:	2b00      	cmp	r3, #0
     480:	d002      	beq.n	488 <STACK_SIZE+0x88>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     482:	2380      	movs	r3, #128	; 0x80
     484:	03db      	lsls	r3, r3, #15
     486:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     488:	9b04      	ldr	r3, [sp, #16]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     48a:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     48c:	681b      	ldr	r3, [r3, #0]
	uint32_t fscl        = 1000 * config->baud_rate;
     48e:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     490:	431f      	orrs	r7, r3
     492:	9b04      	ldr	r3, [sp, #16]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     494:	9a04      	ldr	r2, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     496:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     498:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     49a:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     49c:	005b      	lsls	r3, r3, #1
     49e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     4a0:	b2c0      	uxtb	r0, r0
     4a2:	4b50      	ldr	r3, [pc, #320]	; (5e4 <STACK_SIZE+0x1e4>)
     4a4:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
     4a6:	6823      	ldr	r3, [r4, #0]
     4a8:	00ad      	lsls	r5, r5, #2
     4aa:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     4ac:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     4ae:	0007      	movs	r7, r0
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     4b0:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     4b2:	4b4d      	ldr	r3, [pc, #308]	; (5e8 <STACK_SIZE+0x1e8>)
     4b4:	4798      	blx	r3
     4b6:	4b4c      	ldr	r3, [pc, #304]	; (5e8 <STACK_SIZE+0x1e8>)
     4b8:	9000      	str	r0, [sp, #0]
     4ba:	9101      	str	r1, [sp, #4]
     4bc:	0068      	lsls	r0, r5, #1
     4be:	4798      	blx	r3
     4c0:	9002      	str	r0, [sp, #8]
     4c2:	9103      	str	r1, [sp, #12]
     4c4:	4b48      	ldr	r3, [pc, #288]	; (5e8 <STACK_SIZE+0x1e8>)
     4c6:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     4c8:	4798      	blx	r3
     4ca:	4e48      	ldr	r6, [pc, #288]	; (5ec <STACK_SIZE+0x1ec>)
     4cc:	9006      	str	r0, [sp, #24]
     4ce:	9107      	str	r1, [sp, #28]
     4d0:	9800      	ldr	r0, [sp, #0]
     4d2:	9901      	ldr	r1, [sp, #4]
     4d4:	4a46      	ldr	r2, [pc, #280]	; (5f0 <STACK_SIZE+0x1f0>)
     4d6:	4b47      	ldr	r3, [pc, #284]	; (5f4 <STACK_SIZE+0x1f4>)
     4d8:	47b0      	blx	r6
     4da:	0002      	movs	r2, r0
     4dc:	000b      	movs	r3, r1
     4de:	9806      	ldr	r0, [sp, #24]
     4e0:	9907      	ldr	r1, [sp, #28]
     4e2:	47b0      	blx	r6
     4e4:	4e44      	ldr	r6, [pc, #272]	; (5f8 <STACK_SIZE+0x1f8>)
     4e6:	2200      	movs	r2, #0
     4e8:	4b44      	ldr	r3, [pc, #272]	; (5fc <STACK_SIZE+0x1fc>)
     4ea:	47b0      	blx	r6
     4ec:	4b3e      	ldr	r3, [pc, #248]	; (5e8 <STACK_SIZE+0x1e8>)
     4ee:	9006      	str	r0, [sp, #24]
     4f0:	9107      	str	r1, [sp, #28]
     4f2:	0028      	movs	r0, r5
     4f4:	4798      	blx	r3
     4f6:	4d3d      	ldr	r5, [pc, #244]	; (5ec <STACK_SIZE+0x1ec>)
     4f8:	0002      	movs	r2, r0
     4fa:	000b      	movs	r3, r1
     4fc:	9806      	ldr	r0, [sp, #24]
     4fe:	9907      	ldr	r1, [sp, #28]
     500:	47a8      	blx	r5
     502:	4d3f      	ldr	r5, [pc, #252]	; (600 <STACK_SIZE+0x200>)
     504:	0002      	movs	r2, r0
     506:	000b      	movs	r3, r1
     508:	9800      	ldr	r0, [sp, #0]
     50a:	9901      	ldr	r1, [sp, #4]
     50c:	47a8      	blx	r5
     50e:	9a02      	ldr	r2, [sp, #8]
     510:	9b03      	ldr	r3, [sp, #12]
     512:	47b0      	blx	r6
     514:	2200      	movs	r2, #0
     516:	4b3b      	ldr	r3, [pc, #236]	; (604 <STACK_SIZE+0x204>)
     518:	47a8      	blx	r5
     51a:	9a02      	ldr	r2, [sp, #8]
     51c:	9b03      	ldr	r3, [sp, #12]
     51e:	4e3a      	ldr	r6, [pc, #232]	; (608 <STACK_SIZE+0x208>)
     520:	47b0      	blx	r6
     522:	4b3a      	ldr	r3, [pc, #232]	; (60c <STACK_SIZE+0x20c>)
     524:	4798      	blx	r3
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     526:	2380      	movs	r3, #128	; 0x80
	tmp_baud = (int32_t)(div_ceil(
     528:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     52a:	68a2      	ldr	r2, [r4, #8]
     52c:	049b      	lsls	r3, r3, #18
     52e:	429a      	cmp	r2, r3
     530:	d13e      	bne.n	5b0 <STACK_SIZE+0x1b0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     532:	23fa      	movs	r3, #250	; 0xfa
     534:	9c05      	ldr	r4, [sp, #20]
     536:	009b      	lsls	r3, r3, #2
     538:	435c      	muls	r4, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     53a:	9a00      	ldr	r2, [sp, #0]
     53c:	9b01      	ldr	r3, [sp, #4]
     53e:	4e2e      	ldr	r6, [pc, #184]	; (5f8 <STACK_SIZE+0x1f8>)
     540:	0010      	movs	r0, r2
     542:	0019      	movs	r1, r3
     544:	47b0      	blx	r6
     546:	4b28      	ldr	r3, [pc, #160]	; (5e8 <STACK_SIZE+0x1e8>)
     548:	9000      	str	r0, [sp, #0]
     54a:	9101      	str	r1, [sp, #4]
     54c:	0020      	movs	r0, r4
     54e:	4798      	blx	r3
     550:	2200      	movs	r2, #0
     552:	4b2f      	ldr	r3, [pc, #188]	; (610 <STACK_SIZE+0x210>)
     554:	4e25      	ldr	r6, [pc, #148]	; (5ec <STACK_SIZE+0x1ec>)
     556:	47b0      	blx	r6
     558:	4e2b      	ldr	r6, [pc, #172]	; (608 <STACK_SIZE+0x208>)
     55a:	0002      	movs	r2, r0
     55c:	000b      	movs	r3, r1
     55e:	9800      	ldr	r0, [sp, #0]
     560:	9901      	ldr	r1, [sp, #4]
     562:	47b0      	blx	r6
     564:	2200      	movs	r2, #0
     566:	4b27      	ldr	r3, [pc, #156]	; (604 <STACK_SIZE+0x204>)
     568:	47a8      	blx	r5
     56a:	4b28      	ldr	r3, [pc, #160]	; (60c <STACK_SIZE+0x20c>)
     56c:	4798      	blx	r3
     56e:	4b29      	ldr	r3, [pc, #164]	; (614 <STACK_SIZE+0x214>)
     570:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     572:	d017      	beq.n	5a4 <STACK_SIZE+0x1a4>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     574:	0021      	movs	r1, r4
     576:	0038      	movs	r0, r7
     578:	4798      	blx	r3
     57a:	3802      	subs	r0, #2
     57c:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     57e:	9a02      	ldr	r2, [sp, #8]
     580:	2040      	movs	r0, #64	; 0x40
     582:	2aff      	cmp	r2, #255	; 0xff
     584:	d80c      	bhi.n	5a0 <STACK_SIZE+0x1a0>
     586:	2bff      	cmp	r3, #255	; 0xff
     588:	d80a      	bhi.n	5a0 <STACK_SIZE+0x1a0>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     58a:	20ff      	movs	r0, #255	; 0xff
     58c:	0015      	movs	r5, r2
     58e:	0400      	lsls	r0, r0, #16
     590:	041b      	lsls	r3, r3, #16
     592:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     594:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     596:	0636      	lsls	r6, r6, #24
     598:	4335      	orrs	r5, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     59a:	9a04      	ldr	r2, [sp, #16]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     59c:	432b      	orrs	r3, r5
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     59e:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     5a0:	b00b      	add	sp, #44	; 0x2c
     5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     5a4:	0061      	lsls	r1, r4, #1
     5a6:	1e48      	subs	r0, r1, #1
     5a8:	19c0      	adds	r0, r0, r7
     5aa:	4798      	blx	r3
     5ac:	1e43      	subs	r3, r0, #1
     5ae:	e7e6      	b.n	57e <STACK_SIZE+0x17e>
	int32_t tmp_baudlow_hs = 0;
     5b0:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     5b2:	0033      	movs	r3, r6
     5b4:	e7e3      	b.n	57e <STACK_SIZE+0x17e>
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	00000ab1 	.word	0x00000ab1
     5bc:	40000400 	.word	0x40000400
     5c0:	00001161 	.word	0x00001161
     5c4:	000010d9 	.word	0x000010d9
     5c8:	000009b9 	.word	0x000009b9
     5cc:	0000082d 	.word	0x0000082d
     5d0:	00000aed 	.word	0x00000aed
     5d4:	2000017c 	.word	0x2000017c
     5d8:	000009fd 	.word	0x000009fd
     5dc:	00001235 	.word	0x00001235
     5e0:	41002000 	.word	0x41002000
     5e4:	0000117d 	.word	0x0000117d
     5e8:	00003da5 	.word	0x00003da5
     5ec:	00003211 	.word	0x00003211
     5f0:	e826d695 	.word	0xe826d695
     5f4:	3e112e0b 	.word	0x3e112e0b
     5f8:	00002589 	.word	0x00002589
     5fc:	40240000 	.word	0x40240000
     600:	00003711 	.word	0x00003711
     604:	3ff00000 	.word	0x3ff00000
     608:	00002ba9 	.word	0x00002ba9
     60c:	00003d3d 	.word	0x00003d3d
     610:	40080000 	.word	0x40080000
     614:	00002471 	.word	0x00002471

00000618 <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     618:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     61a:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     61c:	7e19      	ldrb	r1, [r3, #24]
     61e:	4211      	tst	r1, r2
     620:	d006      	beq.n	630 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     622:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     624:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     626:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     628:	4213      	tst	r3, r2
     62a:	d10a      	bne.n	642 <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     62c:	2000      	movs	r0, #0
     62e:	e008      	b.n	642 <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     630:	8b5a      	ldrh	r2, [r3, #26]
     632:	0752      	lsls	r2, r2, #29
     634:	d5fa      	bpl.n	62c <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     636:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
     638:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     63a:	6859      	ldr	r1, [r3, #4]
     63c:	0292      	lsls	r2, r2, #10
     63e:	430a      	orrs	r2, r1
     640:	605a      	str	r2, [r3, #4]
}
     642:	4770      	bx	lr

00000644 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     644:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     646:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     648:	2601      	movs	r6, #1
     64a:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     64c:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     64e:	7e0b      	ldrb	r3, [r1, #24]
     650:	4033      	ands	r3, r6
     652:	d102      	bne.n	65a <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     654:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     656:	4225      	tst	r5, r4
     658:	d001      	beq.n	65e <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     65a:	2000      	movs	r0, #0
     65c:	e005      	b.n	66a <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
     65e:	3201      	adds	r2, #1
     660:	8903      	ldrh	r3, [r0, #8]
     662:	b292      	uxth	r2, r2
     664:	4293      	cmp	r3, r2
     666:	d8f2      	bhi.n	64e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     668:	2012      	movs	r0, #18
}
     66a:	bd70      	pop	{r4, r5, r6, pc}

0000066c <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     66c:	2380      	movs	r3, #128	; 0x80
{
     66e:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     670:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     672:	02db      	lsls	r3, r3, #11
     674:	6862      	ldr	r2, [r4, #4]
     676:	4313      	orrs	r3, r2
     678:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     67a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     67c:	4b02      	ldr	r3, [pc, #8]	; (688 <_i2c_master_send_hs_master_code+0x1c>)
     67e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     680:	2301      	movs	r3, #1
     682:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     684:	bd10      	pop	{r4, pc}
     686:	46c0      	nop			; (mov r8, r8)
     688:	00000645 	.word	0x00000645

0000068c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     68c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     68e:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     690:	884b      	ldrh	r3, [r1, #2]
{
     692:	0005      	movs	r5, r0
	uint16_t tmp_data_length = packet->data_length;
     694:	9301      	str	r3, [sp, #4]

	_i2c_master_wait_for_sync(module);
     696:	4b2a      	ldr	r3, [pc, #168]	; (740 <_i2c_master_write_packet+0xb4>)
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     698:	6804      	ldr	r4, [r0, #0]
	_i2c_master_wait_for_sync(module);
     69a:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     69c:	7a7b      	ldrb	r3, [r7, #9]
     69e:	2b00      	cmp	r3, #0
     6a0:	d003      	beq.n	6aa <_i2c_master_write_packet+0x1e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6a2:	7ab9      	ldrb	r1, [r7, #10]
     6a4:	0028      	movs	r0, r5
     6a6:	4b27      	ldr	r3, [pc, #156]	; (744 <_i2c_master_write_packet+0xb8>)
     6a8:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6aa:	6863      	ldr	r3, [r4, #4]
     6ac:	4a26      	ldr	r2, [pc, #152]	; (748 <_i2c_master_write_packet+0xbc>)
     6ae:	4013      	ands	r3, r2
     6b0:	6063      	str	r3, [r4, #4]
     6b2:	7a7a      	ldrb	r2, [r7, #9]
     6b4:	883b      	ldrh	r3, [r7, #0]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     6b6:	7a39      	ldrb	r1, [r7, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6b8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6ba:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6bc:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
     6be:	2900      	cmp	r1, #0
     6c0:	d002      	beq.n	6c8 <_i2c_master_write_packet+0x3c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6c2:	2280      	movs	r2, #128	; 0x80
     6c4:	0212      	lsls	r2, r2, #8
     6c6:	4313      	orrs	r3, r2
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6c8:	6263      	str	r3, [r4, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6ca:	0028      	movs	r0, r5
     6cc:	4b1f      	ldr	r3, [pc, #124]	; (74c <_i2c_master_write_packet+0xc0>)
     6ce:	4798      	blx	r3
     6d0:	1e06      	subs	r6, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     6d2:	d115      	bne.n	700 <_i2c_master_write_packet+0x74>
		tmp_status = _i2c_master_address_response(module);
     6d4:	0028      	movs	r0, r5
     6d6:	4b1e      	ldr	r3, [pc, #120]	; (750 <_i2c_master_write_packet+0xc4>)
     6d8:	4798      	blx	r3
     6da:	1e06      	subs	r6, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     6dc:	d110      	bne.n	700 <_i2c_master_write_packet+0x74>
     6de:	9000      	str	r0, [sp, #0]
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     6e0:	9b00      	ldr	r3, [sp, #0]
     6e2:	9a01      	ldr	r2, [sp, #4]
     6e4:	4293      	cmp	r3, r2
     6e6:	d10d      	bne.n	704 <_i2c_master_write_packet+0x78>
     6e8:	2600      	movs	r6, #0
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     6ea:	7aab      	ldrb	r3, [r5, #10]
     6ec:	2b00      	cmp	r3, #0
     6ee:	d007      	beq.n	700 <_i2c_master_write_packet+0x74>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     6f0:	4b13      	ldr	r3, [pc, #76]	; (740 <_i2c_master_write_packet+0xb4>)
     6f2:	0028      	movs	r0, r5
     6f4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6f6:	23c0      	movs	r3, #192	; 0xc0
     6f8:	6862      	ldr	r2, [r4, #4]
     6fa:	029b      	lsls	r3, r3, #10
     6fc:	4313      	orrs	r3, r2
     6fe:	6063      	str	r3, [r4, #4]
		}
	}

	return tmp_status;
}
     700:	0030      	movs	r0, r6
     702:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     704:	2220      	movs	r2, #32
     706:	8b63      	ldrh	r3, [r4, #26]
     708:	4213      	tst	r3, r2
     70a:	d016      	beq.n	73a <_i2c_master_write_packet+0xae>
			_i2c_master_wait_for_sync(module);
     70c:	0028      	movs	r0, r5
     70e:	4b0c      	ldr	r3, [pc, #48]	; (740 <_i2c_master_write_packet+0xb4>)
     710:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     712:	687b      	ldr	r3, [r7, #4]
     714:	9a00      	ldr	r2, [sp, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     716:	0028      	movs	r0, r5
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     718:	5c9a      	ldrb	r2, [r3, r2]
     71a:	0023      	movs	r3, r4
     71c:	3328      	adds	r3, #40	; 0x28
     71e:	701a      	strb	r2, [r3, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
     720:	4b0a      	ldr	r3, [pc, #40]	; (74c <_i2c_master_write_packet+0xc0>)
     722:	4798      	blx	r3
     724:	1e06      	subs	r6, r0, #0
			if (tmp_status != STATUS_OK) {
     726:	d1e0      	bne.n	6ea <_i2c_master_write_packet+0x5e>
     728:	9a00      	ldr	r2, [sp, #0]
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     72a:	8b63      	ldrh	r3, [r4, #26]
     72c:	3201      	adds	r2, #1
     72e:	9200      	str	r2, [sp, #0]
     730:	2204      	movs	r2, #4
     732:	4213      	tst	r3, r2
     734:	d0d4      	beq.n	6e0 <_i2c_master_write_packet+0x54>
				tmp_status = STATUS_ERR_OVERFLOW;
     736:	261e      	movs	r6, #30
     738:	e7d7      	b.n	6ea <_i2c_master_write_packet+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
     73a:	2641      	movs	r6, #65	; 0x41
     73c:	e7e0      	b.n	700 <_i2c_master_write_packet+0x74>
     73e:	46c0      	nop			; (mov r8, r8)
     740:	00000335 	.word	0x00000335
     744:	0000066d 	.word	0x0000066d
     748:	fffbffff 	.word	0xfffbffff
     74c:	00000645 	.word	0x00000645
     750:	00000619 	.word	0x00000619

00000754 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     754:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     756:	8b82      	ldrh	r2, [r0, #28]
{
     758:	0003      	movs	r3, r0
		return STATUS_BUSY;
     75a:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
     75c:	2a00      	cmp	r2, #0
     75e:	d105      	bne.n	76c <i2c_master_write_packet_wait+0x18>
	}
#endif

	module->send_stop = true;
     760:	3201      	adds	r2, #1
     762:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     764:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
     766:	0018      	movs	r0, r3
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <i2c_master_write_packet_wait+0x1c>)
     76a:	4798      	blx	r3
}
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	0000068d 	.word	0x0000068d

00000774 <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     774:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     776:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     778:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     77a:	421a      	tst	r2, r3
     77c:	d1fc      	bne.n	778 <_i2c_master_wait_for_sync+0x4>
}
     77e:	4770      	bx	lr

00000780 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     782:	6805      	ldr	r5, [r0, #0]
{
     784:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     786:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     788:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     78a:	8b83      	ldrh	r3, [r0, #28]
     78c:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
     78e:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     790:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     792:	3b01      	subs	r3, #1
     794:	b29b      	uxth	r3, r3
     796:	8383      	strh	r3, [r0, #28]
     798:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
     79a:	0112      	lsls	r2, r2, #4
     79c:	d50a      	bpl.n	7b4 <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
     79e:	2b00      	cmp	r3, #0
     7a0:	d00d      	beq.n	7be <_i2c_master_read+0x3e>
     7a2:	8b83      	ldrh	r3, [r0, #28]
     7a4:	2b01      	cmp	r3, #1
     7a6:	d10a      	bne.n	7be <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7a8:	2380      	movs	r3, #128	; 0x80
     7aa:	686a      	ldr	r2, [r5, #4]
     7ac:	02db      	lsls	r3, r3, #11
     7ae:	4313      	orrs	r3, r2
     7b0:	606b      	str	r3, [r5, #4]
     7b2:	e004      	b.n	7be <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
     7b4:	2b00      	cmp	r3, #0
     7b6:	d002      	beq.n	7be <_i2c_master_read+0x3e>
     7b8:	8b83      	ldrh	r3, [r0, #28]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d0f4      	beq.n	7a8 <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
     7be:	8ba3      	ldrh	r3, [r4, #28]
     7c0:	4f0a      	ldr	r7, [pc, #40]	; (7ec <_i2c_master_read+0x6c>)
     7c2:	2b00      	cmp	r3, #0
     7c4:	d109      	bne.n	7da <_i2c_master_read+0x5a>
		if (module->send_stop) {
     7c6:	7aa3      	ldrb	r3, [r4, #10]
     7c8:	2b00      	cmp	r3, #0
     7ca:	d006      	beq.n	7da <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     7cc:	0020      	movs	r0, r4
     7ce:	47b8      	blx	r7
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7d0:	23c0      	movs	r3, #192	; 0xc0
     7d2:	686a      	ldr	r2, [r5, #4]
     7d4:	029b      	lsls	r3, r3, #10
     7d6:	4313      	orrs	r3, r2
     7d8:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     7da:	0020      	movs	r0, r4
     7dc:	47b8      	blx	r7
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     7de:	6a23      	ldr	r3, [r4, #32]
     7e0:	3528      	adds	r5, #40	; 0x28
     7e2:	199e      	adds	r6, r3, r6
     7e4:	782b      	ldrb	r3, [r5, #0]
     7e6:	b2db      	uxtb	r3, r3
     7e8:	7033      	strb	r3, [r6, #0]
}
     7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7ec:	00000775 	.word	0x00000775

000007f0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     7f0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7f2:	6806      	ldr	r6, [r0, #0]
{
     7f4:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     7f6:	8b73      	ldrh	r3, [r6, #26]
     7f8:	075b      	lsls	r3, r3, #29
     7fa:	d503      	bpl.n	804 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     7fc:	231e      	movs	r3, #30
     7fe:	3406      	adds	r4, #6
     800:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     802:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     804:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     806:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
     808:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
     80a:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
     80c:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     80e:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
     810:	3b01      	subs	r3, #1
     812:	b29b      	uxth	r3, r3
     814:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     816:	4b04      	ldr	r3, [pc, #16]	; (828 <_i2c_master_write+0x38>)
     818:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     81a:	6a23      	ldr	r3, [r4, #32]
     81c:	195d      	adds	r5, r3, r5
     81e:	782b      	ldrb	r3, [r5, #0]
     820:	b2db      	uxtb	r3, r3
     822:	7033      	strb	r3, [r6, #0]
     824:	e7ed      	b.n	802 <_i2c_master_write+0x12>
     826:	46c0      	nop			; (mov r8, r8)
     828:	00000775 	.word	0x00000775

0000082c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     82e:	4b5e      	ldr	r3, [pc, #376]	; (9a8 <_i2c_master_interrupt_handler+0x17c>)
     830:	0080      	lsls	r0, r0, #2
     832:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     834:	6825      	ldr	r5, [r4, #0]
     836:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     838:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     83a:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
     83c:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     83e:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
     840:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     842:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     844:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     846:	2a00      	cmp	r2, #0
     848:	d12e      	bne.n	8a8 <_i2c_master_interrupt_handler+0x7c>
     84a:	8ba2      	ldrh	r2, [r4, #28]
     84c:	2a00      	cmp	r2, #0
     84e:	d02b      	beq.n	8a8 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     850:	2301      	movs	r3, #1
     852:	7e2a      	ldrb	r2, [r5, #24]
     854:	421a      	tst	r2, r3
     856:	d006      	beq.n	866 <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     858:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     85a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     85c:	8b6b      	ldrh	r3, [r5, #26]
     85e:	4013      	ands	r3, r2
     860:	d010      	beq.n	884 <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
     862:	2341      	movs	r3, #65	; 0x41
     864:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
     866:	8ba3      	ldrh	r3, [r4, #28]
     868:	b29b      	uxth	r3, r3
     86a:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     86c:	7ff3      	ldrb	r3, [r6, #31]
     86e:	2b05      	cmp	r3, #5
     870:	d13c      	bne.n	8ec <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     872:	1d63      	adds	r3, r4, #5
     874:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
     876:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     878:	2b00      	cmp	r3, #0
     87a:	d000      	beq.n	87e <_i2c_master_interrupt_handler+0x52>
     87c:	e08a      	b.n	994 <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
     87e:	4b4b      	ldr	r3, [pc, #300]	; (9ac <_i2c_master_interrupt_handler+0x180>)
		} else {
			_i2c_master_read(module);
     880:	4798      	blx	r3
     882:	e033      	b.n	8ec <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     884:	8b6a      	ldrh	r2, [r5, #26]
     886:	0752      	lsls	r2, r2, #29
     888:	d5ed      	bpl.n	866 <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     88a:	2218      	movs	r2, #24
     88c:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
     88e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     890:	7aa3      	ldrb	r3, [r4, #10]
     892:	2b00      	cmp	r3, #0
     894:	d0e7      	beq.n	866 <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
     896:	4b46      	ldr	r3, [pc, #280]	; (9b0 <_i2c_master_interrupt_handler+0x184>)
     898:	0020      	movs	r0, r4
     89a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     89c:	23c0      	movs	r3, #192	; 0xc0
     89e:	686a      	ldr	r2, [r5, #4]
     8a0:	029b      	lsls	r3, r3, #10
     8a2:	4313      	orrs	r3, r2
     8a4:	606b      	str	r3, [r5, #4]
     8a6:	e7de      	b.n	866 <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8a8:	8b62      	ldrh	r2, [r4, #26]
     8aa:	2a00      	cmp	r2, #0
     8ac:	d05f      	beq.n	96e <_i2c_master_interrupt_handler+0x142>
     8ae:	8ba2      	ldrh	r2, [r4, #28]
     8b0:	2a00      	cmp	r2, #0
     8b2:	d15c      	bne.n	96e <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
     8b4:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8b6:	2a05      	cmp	r2, #5
     8b8:	d159      	bne.n	96e <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8ba:	1d62      	adds	r2, r4, #5
     8bc:	7fd2      	ldrb	r2, [r2, #31]
     8be:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
     8c0:	2a00      	cmp	r2, #0
     8c2:	d154      	bne.n	96e <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
     8c4:	2303      	movs	r3, #3
     8c6:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     8c8:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     8ca:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
     8cc:	7aa3      	ldrb	r3, [r4, #10]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d04a      	beq.n	968 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
     8d2:	4b37      	ldr	r3, [pc, #220]	; (9b0 <_i2c_master_interrupt_handler+0x184>)
     8d4:	0020      	movs	r0, r4
     8d6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8d8:	23c0      	movs	r3, #192	; 0xc0
     8da:	686a      	ldr	r2, [r5, #4]
     8dc:	029b      	lsls	r3, r3, #10
     8de:	4313      	orrs	r3, r2
     8e0:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     8e2:	07fb      	lsls	r3, r7, #31
     8e4:	d502      	bpl.n	8ec <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     8e6:	68e3      	ldr	r3, [r4, #12]
     8e8:	0020      	movs	r0, r4
     8ea:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8ec:	8b63      	ldrh	r3, [r4, #26]
     8ee:	2b00      	cmp	r3, #0
     8f0:	d01b      	beq.n	92a <_i2c_master_interrupt_handler+0xfe>
     8f2:	8ba3      	ldrh	r3, [r4, #28]
     8f4:	2b00      	cmp	r3, #0
     8f6:	d118      	bne.n	92a <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
     8f8:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8fa:	2b05      	cmp	r3, #5
     8fc:	d115      	bne.n	92a <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     8fe:	1d63      	adds	r3, r4, #5
     900:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
     902:	2a01      	cmp	r2, #1
     904:	d111      	bne.n	92a <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     906:	7e29      	ldrb	r1, [r5, #24]
     908:	3201      	adds	r2, #1
     90a:	4211      	tst	r1, r2
     90c:	d000      	beq.n	910 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     90e:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     910:	2203      	movs	r2, #3
     912:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     914:	2200      	movs	r2, #0
     916:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     918:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     91a:	07ba      	lsls	r2, r7, #30
     91c:	d53c      	bpl.n	998 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     91e:	7fda      	ldrb	r2, [r3, #31]
     920:	2a01      	cmp	r2, #1
     922:	d139      	bne.n	998 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     924:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     926:	0020      	movs	r0, r4
     928:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     92a:	7ff3      	ldrb	r3, [r6, #31]
     92c:	2b05      	cmp	r3, #5
     92e:	d01a      	beq.n	966 <_i2c_master_interrupt_handler+0x13a>
     930:	7ff3      	ldrb	r3, [r6, #31]
     932:	2b00      	cmp	r3, #0
     934:	d017      	beq.n	966 <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     936:	2303      	movs	r3, #3
     938:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     93a:	2300      	movs	r3, #0
     93c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     93e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     940:	7ff3      	ldrb	r3, [r6, #31]
     942:	2b41      	cmp	r3, #65	; 0x41
     944:	d00a      	beq.n	95c <_i2c_master_interrupt_handler+0x130>
     946:	7aa3      	ldrb	r3, [r4, #10]
     948:	2b00      	cmp	r3, #0
     94a:	d007      	beq.n	95c <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     94c:	4b18      	ldr	r3, [pc, #96]	; (9b0 <_i2c_master_interrupt_handler+0x184>)
     94e:	0020      	movs	r0, r4
     950:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     952:	23e0      	movs	r3, #224	; 0xe0
     954:	686a      	ldr	r2, [r5, #4]
     956:	02db      	lsls	r3, r3, #11
     958:	4313      	orrs	r3, r2
     95a:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     95c:	077b      	lsls	r3, r7, #29
     95e:	d502      	bpl.n	966 <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     960:	6963      	ldr	r3, [r4, #20]
     962:	0020      	movs	r0, r4
     964:	4798      	blx	r3
		}
	}
}
     966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     968:	2301      	movs	r3, #1
     96a:	762b      	strb	r3, [r5, #24]
     96c:	e7b9      	b.n	8e2 <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     96e:	8b62      	ldrh	r2, [r4, #26]
     970:	2a00      	cmp	r2, #0
     972:	d0bb      	beq.n	8ec <_i2c_master_interrupt_handler+0xc0>
     974:	8ba2      	ldrh	r2, [r4, #28]
     976:	2a00      	cmp	r2, #0
     978:	d0b8      	beq.n	8ec <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     97a:	8b6a      	ldrh	r2, [r5, #26]
     97c:	0692      	lsls	r2, r2, #26
     97e:	d500      	bpl.n	982 <_i2c_master_interrupt_handler+0x156>
     980:	e777      	b.n	872 <_i2c_master_interrupt_handler+0x46>
     982:	2b00      	cmp	r3, #0
     984:	d003      	beq.n	98e <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     986:	8ba3      	ldrh	r3, [r4, #28]
     988:	2b01      	cmp	r3, #1
     98a:	d100      	bne.n	98e <_i2c_master_interrupt_handler+0x162>
     98c:	e771      	b.n	872 <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
     98e:	2341      	movs	r3, #65	; 0x41
     990:	77f3      	strb	r3, [r6, #31]
     992:	e7ab      	b.n	8ec <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
     994:	4b07      	ldr	r3, [pc, #28]	; (9b4 <_i2c_master_interrupt_handler+0x188>)
     996:	e773      	b.n	880 <_i2c_master_interrupt_handler+0x54>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     998:	07fa      	lsls	r2, r7, #31
     99a:	d5c6      	bpl.n	92a <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     99c:	7fdb      	ldrb	r3, [r3, #31]
     99e:	2b00      	cmp	r3, #0
     9a0:	d1c3      	bne.n	92a <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9a2:	68e3      	ldr	r3, [r4, #12]
     9a4:	e7bf      	b.n	926 <_i2c_master_interrupt_handler+0xfa>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	2000017c 	.word	0x2000017c
     9ac:	000007f1 	.word	0x000007f1
     9b0:	00000775 	.word	0x00000775
     9b4:	00000781 	.word	0x00000781

000009b8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9ba:	4c0d      	ldr	r4, [pc, #52]	; (9f0 <sercom_set_gclk_generator+0x38>)
{
     9bc:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     9be:	7823      	ldrb	r3, [r4, #0]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d001      	beq.n	9c8 <sercom_set_gclk_generator+0x10>
     9c4:	2900      	cmp	r1, #0
     9c6:	d00c      	beq.n	9e2 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     9c8:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     9ca:	200d      	movs	r0, #13
     9cc:	4b09      	ldr	r3, [pc, #36]	; (9f4 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     9ce:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     9d0:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     9d2:	200d      	movs	r0, #13
     9d4:	4b08      	ldr	r3, [pc, #32]	; (9f8 <sercom_set_gclk_generator+0x40>)
     9d6:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     9d8:	2301      	movs	r3, #1

		return STATUS_OK;
     9da:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     9dc:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     9de:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     9e0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     9e2:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     9e4:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     9e6:	42ab      	cmp	r3, r5
     9e8:	d0fa      	beq.n	9e0 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     9ea:	201d      	movs	r0, #29
     9ec:	e7f8      	b.n	9e0 <sercom_set_gclk_generator+0x28>
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	20000049 	.word	0x20000049
     9f4:	00001161 	.word	0x00001161
     9f8:	000010d9 	.word	0x000010d9

000009fc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     9fc:	4a1d      	ldr	r2, [pc, #116]	; (a74 <_sercom_get_default_pad+0x78>)
{
     9fe:	0003      	movs	r3, r0
     a00:	b500      	push	{lr}
     a02:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     a04:	4293      	cmp	r3, r2
     a06:	d013      	beq.n	a30 <_sercom_get_default_pad+0x34>
     a08:	4a1b      	ldr	r2, [pc, #108]	; (a78 <_sercom_get_default_pad+0x7c>)
     a0a:	4293      	cmp	r3, r2
     a0c:	d01d      	beq.n	a4a <_sercom_get_default_pad+0x4e>
     a0e:	4a1b      	ldr	r2, [pc, #108]	; (a7c <_sercom_get_default_pad+0x80>)
     a10:	4293      	cmp	r3, r2
     a12:	d127      	bne.n	a64 <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     a14:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a16:	2903      	cmp	r1, #3
     a18:	d804      	bhi.n	a24 <_sercom_get_default_pad+0x28>
     a1a:	f001 fd1f 	bl	245c <__gnu_thumb1_case_uqi>
     a1e:	0225      	.short	0x0225
     a20:	0705      	.short	0x0705
     a22:	4b17      	ldr	r3, [pc, #92]	; (a80 <_sercom_get_default_pad+0x84>)
}
     a24:	0018      	movs	r0, r3
     a26:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a28:	4b16      	ldr	r3, [pc, #88]	; (a84 <_sercom_get_default_pad+0x88>)
     a2a:	e7fb      	b.n	a24 <_sercom_get_default_pad+0x28>
     a2c:	4b16      	ldr	r3, [pc, #88]	; (a88 <_sercom_get_default_pad+0x8c>)
     a2e:	e7f9      	b.n	a24 <_sercom_get_default_pad+0x28>
	return 0;
     a30:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a32:	2903      	cmp	r1, #3
     a34:	d8f6      	bhi.n	a24 <_sercom_get_default_pad+0x28>
     a36:	f001 fd11 	bl	245c <__gnu_thumb1_case_uqi>
     a3a:	0219      	.short	0x0219
     a3c:	0604      	.short	0x0604
     a3e:	4b13      	ldr	r3, [pc, #76]	; (a8c <_sercom_get_default_pad+0x90>)
     a40:	e7f0      	b.n	a24 <_sercom_get_default_pad+0x28>
     a42:	4b13      	ldr	r3, [pc, #76]	; (a90 <_sercom_get_default_pad+0x94>)
     a44:	e7ee      	b.n	a24 <_sercom_get_default_pad+0x28>
     a46:	4b13      	ldr	r3, [pc, #76]	; (a94 <_sercom_get_default_pad+0x98>)
     a48:	e7ec      	b.n	a24 <_sercom_get_default_pad+0x28>
	return 0;
     a4a:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a4c:	2903      	cmp	r1, #3
     a4e:	d8e9      	bhi.n	a24 <_sercom_get_default_pad+0x28>
     a50:	f001 fd04 	bl	245c <__gnu_thumb1_case_uqi>
     a54:	0604020e 	.word	0x0604020e
     a58:	4b0f      	ldr	r3, [pc, #60]	; (a98 <_sercom_get_default_pad+0x9c>)
     a5a:	e7e3      	b.n	a24 <_sercom_get_default_pad+0x28>
     a5c:	4b0f      	ldr	r3, [pc, #60]	; (a9c <_sercom_get_default_pad+0xa0>)
     a5e:	e7e1      	b.n	a24 <_sercom_get_default_pad+0x28>
     a60:	4b0f      	ldr	r3, [pc, #60]	; (aa0 <_sercom_get_default_pad+0xa4>)
     a62:	e7df      	b.n	a24 <_sercom_get_default_pad+0x28>
	return 0;
     a64:	2300      	movs	r3, #0
     a66:	e7dd      	b.n	a24 <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a68:	4b0e      	ldr	r3, [pc, #56]	; (aa4 <_sercom_get_default_pad+0xa8>)
     a6a:	e7db      	b.n	a24 <_sercom_get_default_pad+0x28>
     a6c:	4b0e      	ldr	r3, [pc, #56]	; (aa8 <_sercom_get_default_pad+0xac>)
     a6e:	e7d9      	b.n	a24 <_sercom_get_default_pad+0x28>
     a70:	4b0e      	ldr	r3, [pc, #56]	; (aac <_sercom_get_default_pad+0xb0>)
     a72:	e7d7      	b.n	a24 <_sercom_get_default_pad+0x28>
     a74:	42000c00 	.word	0x42000c00
     a78:	42001000 	.word	0x42001000
     a7c:	42000800 	.word	0x42000800
     a80:	00050003 	.word	0x00050003
     a84:	00060003 	.word	0x00060003
     a88:	00070003 	.word	0x00070003
     a8c:	00170002 	.word	0x00170002
     a90:	001e0003 	.word	0x001e0003
     a94:	001f0003 	.word	0x001f0003
     a98:	00170003 	.word	0x00170003
     a9c:	00100003 	.word	0x00100003
     aa0:	00190003 	.word	0x00190003
     aa4:	00040003 	.word	0x00040003
     aa8:	00160002 	.word	0x00160002
     aac:	00160003 	.word	0x00160003

00000ab0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ab2:	4b0c      	ldr	r3, [pc, #48]	; (ae4 <_sercom_get_sercom_inst_index+0x34>)
{
     ab4:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ab6:	0018      	movs	r0, r3
     ab8:	aa01      	add	r2, sp, #4
     aba:	c870      	ldmia	r0!, {r4, r5, r6}
     abc:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     abe:	9a01      	ldr	r2, [sp, #4]
     ac0:	428a      	cmp	r2, r1
     ac2:	d00a      	beq.n	ada <_sercom_get_sercom_inst_index+0x2a>
     ac4:	685a      	ldr	r2, [r3, #4]
     ac6:	428a      	cmp	r2, r1
     ac8:	d009      	beq.n	ade <_sercom_get_sercom_inst_index+0x2e>
     aca:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     acc:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ace:	428b      	cmp	r3, r1
     ad0:	d101      	bne.n	ad6 <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ad2:	3002      	adds	r0, #2
			return i;
     ad4:	b2c0      	uxtb	r0, r0
}
     ad6:	b004      	add	sp, #16
     ad8:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ada:	2000      	movs	r0, #0
     adc:	e7fa      	b.n	ad4 <_sercom_get_sercom_inst_index+0x24>
     ade:	2001      	movs	r0, #1
     ae0:	e7f8      	b.n	ad4 <_sercom_get_sercom_inst_index+0x24>
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	00003ea8 	.word	0x00003ea8

00000ae8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     ae8:	4770      	bx	lr
	...

00000aec <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     aec:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     aee:	4e09      	ldr	r6, [pc, #36]	; (b14 <_sercom_set_handler+0x28>)
     af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <_sercom_set_handler+0x2c>)
     af2:	7832      	ldrb	r2, [r6, #0]
     af4:	2a00      	cmp	r2, #0
     af6:	d109      	bne.n	b0c <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     af8:	4c08      	ldr	r4, [pc, #32]	; (b1c <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     afa:	4d09      	ldr	r5, [pc, #36]	; (b20 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     afc:	6022      	str	r2, [r4, #0]
     afe:	6062      	str	r2, [r4, #4]
     b00:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
     b02:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b04:	601d      	str	r5, [r3, #0]
     b06:	605d      	str	r5, [r3, #4]
     b08:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
     b0a:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b0c:	0080      	lsls	r0, r0, #2
     b0e:	5019      	str	r1, [r3, r0]
}
     b10:	bd70      	pop	{r4, r5, r6, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	2000004b 	.word	0x2000004b
     b18:	2000004c 	.word	0x2000004c
     b1c:	2000017c 	.word	0x2000017c
     b20:	00000ae9 	.word	0x00000ae9

00000b24 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b24:	2309      	movs	r3, #9
{
     b26:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b28:	ac01      	add	r4, sp, #4
     b2a:	7023      	strb	r3, [r4, #0]
     b2c:	3301      	adds	r3, #1
     b2e:	7063      	strb	r3, [r4, #1]
     b30:	3301      	adds	r3, #1
     b32:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b34:	4b01      	ldr	r3, [pc, #4]	; (b3c <_sercom_get_interrupt_vector+0x18>)
     b36:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b38:	5620      	ldrsb	r0, [r4, r0]
}
     b3a:	bd16      	pop	{r1, r2, r4, pc}
     b3c:	00000ab1 	.word	0x00000ab1

00000b40 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b40:	b510      	push	{r4, lr}
     b42:	4b02      	ldr	r3, [pc, #8]	; (b4c <SERCOM0_Handler+0xc>)
     b44:	2000      	movs	r0, #0
     b46:	681b      	ldr	r3, [r3, #0]
     b48:	4798      	blx	r3
     b4a:	bd10      	pop	{r4, pc}
     b4c:	2000004c 	.word	0x2000004c

00000b50 <SERCOM1_Handler>:
     b50:	b510      	push	{r4, lr}
     b52:	4b02      	ldr	r3, [pc, #8]	; (b5c <SERCOM1_Handler+0xc>)
     b54:	2001      	movs	r0, #1
     b56:	685b      	ldr	r3, [r3, #4]
     b58:	4798      	blx	r3
     b5a:	bd10      	pop	{r4, pc}
     b5c:	2000004c 	.word	0x2000004c

00000b60 <SERCOM2_Handler>:
     b60:	b510      	push	{r4, lr}
     b62:	4b02      	ldr	r3, [pc, #8]	; (b6c <SERCOM2_Handler+0xc>)
     b64:	2002      	movs	r0, #2
     b66:	689b      	ldr	r3, [r3, #8]
     b68:	4798      	blx	r3
     b6a:	bd10      	pop	{r4, pc}
     b6c:	2000004c 	.word	0x2000004c

00000b70 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b70:	2310      	movs	r3, #16
     b72:	4902      	ldr	r1, [pc, #8]	; (b7c <_system_dfll_wait_for_sync+0xc>)
     b74:	68ca      	ldr	r2, [r1, #12]
     b76:	421a      	tst	r2, r3
     b78:	d0fc      	beq.n	b74 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     b7a:	4770      	bx	lr
     b7c:	40000800 	.word	0x40000800

00000b80 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     b80:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
     b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
     b84:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     b86:	4d09      	ldr	r5, [pc, #36]	; (bac <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     b88:	4c09      	ldr	r4, [pc, #36]	; (bb0 <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     b8a:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
     b8c:	4f09      	ldr	r7, [pc, #36]	; (bb4 <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     b8e:	4313      	orrs	r3, r2
     b90:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     b92:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     b94:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     b96:	68ab      	ldr	r3, [r5, #8]
     b98:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     b9a:	686b      	ldr	r3, [r5, #4]
     b9c:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     b9e:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     ba0:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     ba2:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     ba4:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     ba6:	b29b      	uxth	r3, r3
     ba8:	84a3      	strh	r3, [r4, #36]	; 0x24
}
     baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bac:	20000058 	.word	0x20000058
     bb0:	40000800 	.word	0x40000800
     bb4:	00000b71 	.word	0x00000b71

00000bb8 <system_clock_source_get_hz>:
{
     bb8:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     bba:	2808      	cmp	r0, #8
     bbc:	d806      	bhi.n	bcc <system_clock_source_get_hz+0x14>
     bbe:	f001 fc4d 	bl	245c <__gnu_thumb1_case_uqi>
     bc2:	0508      	.short	0x0508
     bc4:	12303005 	.word	0x12303005
     bc8:	150b      	.short	0x150b
     bca:	28          	.byte	0x28
     bcb:	00          	.byte	0x00
		return 0;
     bcc:	2400      	movs	r4, #0
}
     bce:	0020      	movs	r0, r4
     bd0:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     bd2:	4b16      	ldr	r3, [pc, #88]	; (c2c <system_clock_source_get_hz+0x74>)
     bd4:	691c      	ldr	r4, [r3, #16]
     bd6:	e7fa      	b.n	bce <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     bd8:	4b15      	ldr	r3, [pc, #84]	; (c30 <system_clock_source_get_hz+0x78>)
     bda:	4c16      	ldr	r4, [pc, #88]	; (c34 <system_clock_source_get_hz+0x7c>)
     bdc:	6a1b      	ldr	r3, [r3, #32]
     bde:	059b      	lsls	r3, r3, #22
     be0:	0f9b      	lsrs	r3, r3, #30
     be2:	40dc      	lsrs	r4, r3
     be4:	e7f3      	b.n	bce <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     be6:	4b11      	ldr	r3, [pc, #68]	; (c2c <system_clock_source_get_hz+0x74>)
     be8:	695c      	ldr	r4, [r3, #20]
     bea:	e7f0      	b.n	bce <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     bec:	4d0f      	ldr	r5, [pc, #60]	; (c2c <system_clock_source_get_hz+0x74>)
			return 0;
     bee:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     bf0:	682b      	ldr	r3, [r5, #0]
     bf2:	079b      	lsls	r3, r3, #30
     bf4:	d5eb      	bpl.n	bce <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     bf6:	4b10      	ldr	r3, [pc, #64]	; (c38 <system_clock_source_get_hz+0x80>)
     bf8:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
     bfa:	2224      	movs	r2, #36	; 0x24
     bfc:	682b      	ldr	r3, [r5, #0]
     bfe:	4013      	ands	r3, r2
     c00:	2b04      	cmp	r3, #4
     c02:	d111      	bne.n	c28 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c04:	0020      	movs	r0, r4
     c06:	4b0d      	ldr	r3, [pc, #52]	; (c3c <system_clock_source_get_hz+0x84>)
     c08:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     c0a:	68ac      	ldr	r4, [r5, #8]
     c0c:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c0e:	4344      	muls	r4, r0
     c10:	e7dd      	b.n	bce <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     c12:	4b0b      	ldr	r3, [pc, #44]	; (c40 <system_clock_source_get_hz+0x88>)
			return 0;
     c14:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     c16:	781b      	ldrb	r3, [r3, #0]
     c18:	075b      	lsls	r3, r3, #29
     c1a:	d5d8      	bpl.n	bce <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     c1c:	4b03      	ldr	r3, [pc, #12]	; (c2c <system_clock_source_get_hz+0x74>)
     c1e:	68dc      	ldr	r4, [r3, #12]
     c20:	e7d5      	b.n	bce <system_clock_source_get_hz+0x16>
		return 32768UL;
     c22:	2480      	movs	r4, #128	; 0x80
     c24:	0224      	lsls	r4, r4, #8
     c26:	e7d2      	b.n	bce <system_clock_source_get_hz+0x16>
			return 48000000UL;
     c28:	4c06      	ldr	r4, [pc, #24]	; (c44 <system_clock_source_get_hz+0x8c>)
     c2a:	e7d0      	b.n	bce <system_clock_source_get_hz+0x16>
     c2c:	20000058 	.word	0x20000058
     c30:	40000800 	.word	0x40000800
     c34:	007a1200 	.word	0x007a1200
     c38:	00000b71 	.word	0x00000b71
     c3c:	0000117d 	.word	0x0000117d
     c40:	40000850 	.word	0x40000850
     c44:	02dc6c00 	.word	0x02dc6c00

00000c48 <system_clock_source_osc8m_set_config>:
{
     c48:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
     c4a:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
     c4c:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
     c4e:	7845      	ldrb	r5, [r0, #1]
     c50:	2001      	movs	r0, #1
     c52:	2640      	movs	r6, #64	; 0x40
     c54:	4005      	ands	r5, r0
     c56:	4020      	ands	r0, r4
     c58:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     c5a:	4908      	ldr	r1, [pc, #32]	; (c7c <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     c5c:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     c5e:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     c60:	01c0      	lsls	r0, r0, #7
     c62:	43b3      	bics	r3, r6
     c64:	432b      	orrs	r3, r5
     c66:	43a3      	bics	r3, r4
     c68:	4303      	orrs	r3, r0
     c6a:	2003      	movs	r0, #3
     c6c:	4002      	ands	r2, r0
     c6e:	4804      	ldr	r0, [pc, #16]	; (c80 <system_clock_source_osc8m_set_config+0x38>)
     c70:	0212      	lsls	r2, r2, #8
     c72:	4003      	ands	r3, r0
     c74:	4313      	orrs	r3, r2
     c76:	620b      	str	r3, [r1, #32]
}
     c78:	bd70      	pop	{r4, r5, r6, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	40000800 	.word	0x40000800
     c80:	fffffcff 	.word	0xfffffcff

00000c84 <system_clock_source_osc32k_set_config>:
{
     c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     c86:	4f18      	ldr	r7, [pc, #96]	; (ce8 <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
     c88:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     c8a:	69bb      	ldr	r3, [r7, #24]
     c8c:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
     c8e:	7803      	ldrb	r3, [r0, #0]
     c90:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
     c92:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
     c94:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
     c96:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     c98:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     c9a:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
     c9c:	2201      	movs	r2, #1
     c9e:	4399      	bics	r1, r3
     ca0:	2308      	movs	r3, #8
     ca2:	7880      	ldrb	r0, [r0, #2]
     ca4:	4016      	ands	r6, r2
     ca6:	4010      	ands	r0, r2
     ca8:	0080      	lsls	r0, r0, #2
     caa:	4308      	orrs	r0, r1
     cac:	4398      	bics	r0, r3
     cae:	00f6      	lsls	r6, r6, #3
     cb0:	4306      	orrs	r6, r0
     cb2:	4015      	ands	r5, r2
     cb4:	01a8      	lsls	r0, r5, #6
     cb6:	0035      	movs	r5, r6
     cb8:	3338      	adds	r3, #56	; 0x38
     cba:	439d      	bics	r5, r3
     cbc:	4305      	orrs	r5, r0
     cbe:	4014      	ands	r4, r2
     cc0:	01e3      	lsls	r3, r4, #7
     cc2:	2080      	movs	r0, #128	; 0x80
     cc4:	002c      	movs	r4, r5
     cc6:	4384      	bics	r4, r0
     cc8:	431c      	orrs	r4, r3
     cca:	2307      	movs	r3, #7
     ccc:	9901      	ldr	r1, [sp, #4]
     cce:	400b      	ands	r3, r1
     cd0:	4906      	ldr	r1, [pc, #24]	; (cec <system_clock_source_osc32k_set_config+0x68>)
     cd2:	021b      	lsls	r3, r3, #8
     cd4:	4021      	ands	r1, r4
     cd6:	4319      	orrs	r1, r3
     cd8:	9b00      	ldr	r3, [sp, #0]
     cda:	401a      	ands	r2, r3
     cdc:	0313      	lsls	r3, r2, #12
     cde:	4a04      	ldr	r2, [pc, #16]	; (cf0 <system_clock_source_osc32k_set_config+0x6c>)
     ce0:	400a      	ands	r2, r1
     ce2:	431a      	orrs	r2, r3
     ce4:	61ba      	str	r2, [r7, #24]
}
     ce6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     ce8:	40000800 	.word	0x40000800
     cec:	fffff8ff 	.word	0xfffff8ff
     cf0:	ffffefff 	.word	0xffffefff

00000cf4 <system_clock_source_dfll_set_config>:
{
     cf4:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     cf6:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     cf8:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     cfa:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     cfc:	059b      	lsls	r3, r3, #22
     cfe:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     d00:	0c12      	lsrs	r2, r2, #16
     d02:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
     d04:	4b17      	ldr	r3, [pc, #92]	; (d64 <system_clock_source_dfll_set_config+0x70>)
     d06:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
     d08:	79c1      	ldrb	r1, [r0, #7]
     d0a:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
     d0c:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
     d0e:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
     d10:	8841      	ldrh	r1, [r0, #2]
     d12:	4321      	orrs	r1, r4
     d14:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     d16:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     d18:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     d1a:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
     d1c:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
     d1e:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     d20:	2c04      	cmp	r4, #4
     d22:	d10d      	bne.n	d40 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     d24:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     d26:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     d28:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     d2a:	430a      	orrs	r2, r1
     d2c:	89c1      	ldrh	r1, [r0, #14]
     d2e:	480e      	ldr	r0, [pc, #56]	; (d68 <system_clock_source_dfll_set_config+0x74>)
     d30:	0409      	lsls	r1, r1, #16
     d32:	4001      	ands	r1, r0
     d34:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     d36:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     d38:	681a      	ldr	r2, [r3, #0]
     d3a:	4314      	orrs	r4, r2
     d3c:	601c      	str	r4, [r3, #0]
}
     d3e:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     d40:	2c20      	cmp	r4, #32
     d42:	d1fc      	bne.n	d3e <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     d44:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     d46:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     d48:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     d4a:	430a      	orrs	r2, r1
     d4c:	89c1      	ldrh	r1, [r0, #14]
     d4e:	4806      	ldr	r0, [pc, #24]	; (d68 <system_clock_source_dfll_set_config+0x74>)
     d50:	0409      	lsls	r1, r1, #16
     d52:	4001      	ands	r1, r0
     d54:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     d56:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
     d58:	6819      	ldr	r1, [r3, #0]
     d5a:	4a04      	ldr	r2, [pc, #16]	; (d6c <system_clock_source_dfll_set_config+0x78>)
     d5c:	430a      	orrs	r2, r1
     d5e:	601a      	str	r2, [r3, #0]
}
     d60:	e7ed      	b.n	d3e <system_clock_source_dfll_set_config+0x4a>
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	20000058 	.word	0x20000058
     d68:	03ff0000 	.word	0x03ff0000
     d6c:	00000424 	.word	0x00000424

00000d70 <system_clock_source_enable>:
{
     d70:	b510      	push	{r4, lr}
	switch (clock_source) {
     d72:	2808      	cmp	r0, #8
     d74:	d806      	bhi.n	d84 <system_clock_source_enable+0x14>
     d76:	f001 fb71 	bl	245c <__gnu_thumb1_case_uqi>
     d7a:	0514      	.short	0x0514
     d7c:	1a0e0c05 	.word	0x1a0e0c05
     d80:	2007      	.short	0x2007
     d82:	23          	.byte	0x23
     d83:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
     d84:	2017      	movs	r0, #23
}
     d86:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d88:	2302      	movs	r3, #2
     d8a:	4a10      	ldr	r2, [pc, #64]	; (dcc <system_clock_source_enable+0x5c>)
     d8c:	6a11      	ldr	r1, [r2, #32]
     d8e:	430b      	orrs	r3, r1
     d90:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d92:	2000      	movs	r0, #0
     d94:	e7f7      	b.n	d86 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d96:	2302      	movs	r3, #2
     d98:	4a0c      	ldr	r2, [pc, #48]	; (dcc <system_clock_source_enable+0x5c>)
     d9a:	6991      	ldr	r1, [r2, #24]
     d9c:	430b      	orrs	r3, r1
     d9e:	6193      	str	r3, [r2, #24]
     da0:	e7f7      	b.n	d92 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     da2:	2302      	movs	r3, #2
     da4:	4a09      	ldr	r2, [pc, #36]	; (dcc <system_clock_source_enable+0x5c>)
     da6:	8a11      	ldrh	r1, [r2, #16]
     da8:	430b      	orrs	r3, r1
     daa:	8213      	strh	r3, [r2, #16]
     dac:	e7f1      	b.n	d92 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     dae:	2302      	movs	r3, #2
     db0:	4a06      	ldr	r2, [pc, #24]	; (dcc <system_clock_source_enable+0x5c>)
     db2:	8a91      	ldrh	r1, [r2, #20]
     db4:	430b      	orrs	r3, r1
     db6:	8293      	strh	r3, [r2, #20]
     db8:	e7eb      	b.n	d92 <system_clock_source_enable+0x22>
     dba:	4b05      	ldr	r3, [pc, #20]	; (dd0 <system_clock_source_enable+0x60>)
     dbc:	4798      	blx	r3
     dbe:	e7e2      	b.n	d86 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     dc0:	2302      	movs	r3, #2
     dc2:	4a04      	ldr	r2, [pc, #16]	; (dd4 <system_clock_source_enable+0x64>)
     dc4:	7811      	ldrb	r1, [r2, #0]
     dc6:	430b      	orrs	r3, r1
     dc8:	7013      	strb	r3, [r2, #0]
     dca:	e7e2      	b.n	d92 <system_clock_source_enable+0x22>
     dcc:	40000800 	.word	0x40000800
     dd0:	00000b81 	.word	0x00000b81
     dd4:	40000844 	.word	0x40000844

00000dd8 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dd8:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     dda:	221e      	movs	r2, #30
{
     ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     dde:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     de0:	4e48      	ldr	r6, [pc, #288]	; (f04 <system_clock_init+0x12c>)
     de2:	00db      	lsls	r3, r3, #3
     de4:	4948      	ldr	r1, [pc, #288]	; (f08 <system_clock_init+0x130>)
     de6:	60b3      	str	r3, [r6, #8]
     de8:	684b      	ldr	r3, [r1, #4]
{
     dea:	b08d      	sub	sp, #52	; 0x34
     dec:	4393      	bics	r3, r2
     dee:	3a1c      	subs	r2, #28
     df0:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     df2:	ac07      	add	r4, sp, #28
     df4:	604b      	str	r3, [r1, #4]
     df6:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     df8:	b2e8      	uxtb	r0, r5
     dfa:	0021      	movs	r1, r4
     dfc:	4b43      	ldr	r3, [pc, #268]	; (f0c <system_clock_init+0x134>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     dfe:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e00:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e02:	2d18      	cmp	r5, #24
     e04:	d1f8      	bne.n	df8 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     e06:	4f42      	ldr	r7, [pc, #264]	; (f10 <system_clock_init+0x138>)
	SYSCTRL->OSC32K.bit.CALIB =
     e08:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     e0a:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
     e0c:	4941      	ldr	r1, [pc, #260]	; (f14 <system_clock_init+0x13c>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     e0e:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     e10:	0e5b      	lsrs	r3, r3, #25
     e12:	400a      	ands	r2, r1
     e14:	041b      	lsls	r3, r3, #16
     e16:	4313      	orrs	r3, r2
     e18:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
     e1a:	2301      	movs	r3, #1
	config->run_in_standby      = false;
     e1c:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
     e1e:	a802      	add	r0, sp, #8
     e20:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     e22:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
     e24:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     e26:	3306      	adds	r3, #6
     e28:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     e2a:	4b3b      	ldr	r3, [pc, #236]	; (f18 <system_clock_init+0x140>)
	config->run_in_standby      = false;
     e2c:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
     e2e:	7145      	strb	r5, [r0, #5]
     e30:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     e32:	4b3a      	ldr	r3, [pc, #232]	; (f1c <system_clock_init+0x144>)
     e34:	2004      	movs	r0, #4
     e36:	4798      	blx	r3
	config->fine_value      = 0xff / 4; /* Midpoint */
     e38:	233f      	movs	r3, #63	; 0x3f
     e3a:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     e3c:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     e3e:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     e40:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     e42:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     e44:	71e5      	strb	r5, [r4, #7]
     e46:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
     e48:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e4a:	683b      	ldr	r3, [r7, #0]
     e4c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     e4e:	2b3f      	cmp	r3, #63	; 0x3f
     e50:	d100      	bne.n	e54 <system_clock_init+0x7c>
		coarse = 0x1f;
     e52:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
     e54:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     e56:	23b7      	movs	r3, #183	; 0xb7
     e58:	00db      	lsls	r3, r3, #3
     e5a:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     e5c:	2307      	movs	r3, #7
     e5e:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     e60:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
     e62:	2500      	movs	r5, #0
	config->on_demand       = true;
     e64:	2701      	movs	r7, #1
     e66:	81e3      	strh	r3, [r4, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     e68:	0020      	movs	r0, r4
     e6a:	4b2d      	ldr	r3, [pc, #180]	; (f20 <system_clock_init+0x148>)
     e6c:	4798      	blx	r3
	config->run_in_standby  = false;
     e6e:	a801      	add	r0, sp, #4

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e70:	4b2c      	ldr	r3, [pc, #176]	; (f24 <system_clock_init+0x14c>)
     e72:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     e74:	7087      	strb	r7, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e76:	7005      	strb	r5, [r0, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
     e78:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e7a:	4b28      	ldr	r3, [pc, #160]	; (f1c <system_clock_init+0x144>)
     e7c:	2006      	movs	r0, #6
     e7e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e80:	4b29      	ldr	r3, [pc, #164]	; (f28 <system_clock_init+0x150>)
     e82:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     e84:	2304      	movs	r3, #4
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e86:	ac04      	add	r4, sp, #16
     e88:	0021      	movs	r1, r4
     e8a:	7023      	strb	r3, [r4, #0]
     e8c:	0038      	movs	r0, r7
     e8e:	4b27      	ldr	r3, [pc, #156]	; (f2c <system_clock_init+0x154>)
     e90:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     e92:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     e94:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     e96:	7265      	strb	r5, [r4, #9]
     e98:	4798      	blx	r3
     e9a:	0038      	movs	r0, r7
     e9c:	4b24      	ldr	r3, [pc, #144]	; (f30 <system_clock_init+0x158>)
     e9e:	4798      	blx	r3
     ea0:	2307      	movs	r3, #7
     ea2:	0021      	movs	r1, r4
     ea4:	7023      	strb	r3, [r4, #0]
     ea6:	2003      	movs	r0, #3
     ea8:	4b20      	ldr	r3, [pc, #128]	; (f2c <system_clock_init+0x154>)
	config->division_factor    = 1;
     eaa:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     eac:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     eae:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     eb0:	7265      	strb	r5, [r4, #9]
     eb2:	4798      	blx	r3
     eb4:	2003      	movs	r0, #3
     eb6:	4b1e      	ldr	r3, [pc, #120]	; (f30 <system_clock_init+0x158>)
     eb8:	4798      	blx	r3
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     eba:	0021      	movs	r1, r4
     ebc:	0028      	movs	r0, r5
     ebe:	4b13      	ldr	r3, [pc, #76]	; (f0c <system_clock_init+0x134>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     ec0:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     ec2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     ec4:	0028      	movs	r0, r5
     ec6:	4b1b      	ldr	r3, [pc, #108]	; (f34 <system_clock_init+0x15c>)
     ec8:	4798      	blx	r3
     eca:	4b1b      	ldr	r3, [pc, #108]	; (f38 <system_clock_init+0x160>)
     ecc:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     ece:	22d0      	movs	r2, #208	; 0xd0
     ed0:	68f3      	ldr	r3, [r6, #12]
     ed2:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     ed4:	2bd0      	cmp	r3, #208	; 0xd0
     ed6:	d1fb      	bne.n	ed0 <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
     ed8:	2500      	movs	r5, #0
     eda:	4b18      	ldr	r3, [pc, #96]	; (f3c <system_clock_init+0x164>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     edc:	0021      	movs	r1, r4
     ede:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     ee0:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     ee2:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     ee4:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
     ee6:	2301      	movs	r3, #1
     ee8:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     eea:	3305      	adds	r3, #5
     eec:	7023      	strb	r3, [r4, #0]
     eee:	0028      	movs	r0, r5
     ef0:	4b0e      	ldr	r3, [pc, #56]	; (f2c <system_clock_init+0x154>)
	config->high_when_disabled = false;
     ef2:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     ef4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     ef6:	7265      	strb	r5, [r4, #9]
     ef8:	4798      	blx	r3
     efa:	0028      	movs	r0, r5
     efc:	4b0c      	ldr	r3, [pc, #48]	; (f30 <system_clock_init+0x158>)
     efe:	4798      	blx	r3
#endif
}
     f00:	b00d      	add	sp, #52	; 0x34
     f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f04:	40000800 	.word	0x40000800
     f08:	41004000 	.word	0x41004000
     f0c:	00001161 	.word	0x00001161
     f10:	00806024 	.word	0x00806024
     f14:	ff80ffff 	.word	0xff80ffff
     f18:	00000c85 	.word	0x00000c85
     f1c:	00000d71 	.word	0x00000d71
     f20:	00000cf5 	.word	0x00000cf5
     f24:	00000c49 	.word	0x00000c49
     f28:	00000f4d 	.word	0x00000f4d
     f2c:	00000f6d 	.word	0x00000f6d
     f30:	00001011 	.word	0x00001011
     f34:	000010d9 	.word	0x000010d9
     f38:	00000b81 	.word	0x00000b81
     f3c:	40000400 	.word	0x40000400

00000f40 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f40:	4b01      	ldr	r3, [pc, #4]	; (f48 <system_gclk_is_syncing+0x8>)
     f42:	7858      	ldrb	r0, [r3, #1]
     f44:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
     f46:	4770      	bx	lr
     f48:	40000c00 	.word	0x40000c00

00000f4c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     f4c:	2308      	movs	r3, #8
     f4e:	4a05      	ldr	r2, [pc, #20]	; (f64 <system_gclk_init+0x18>)
     f50:	6991      	ldr	r1, [r2, #24]
     f52:	430b      	orrs	r3, r1
     f54:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f56:	2301      	movs	r3, #1
     f58:	4a03      	ldr	r2, [pc, #12]	; (f68 <system_gclk_init+0x1c>)
     f5a:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     f5c:	7811      	ldrb	r1, [r2, #0]
     f5e:	4219      	tst	r1, r3
     f60:	d1fc      	bne.n	f5c <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     f62:	4770      	bx	lr
     f64:	40000400 	.word	0x40000400
     f68:	40000c00 	.word	0x40000c00

00000f6c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f6e:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     f70:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f72:	0224      	lsls	r4, r4, #8
{
     f74:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     f76:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f78:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
     f7a:	2b00      	cmp	r3, #0
     f7c:	d002      	beq.n	f84 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     f7e:	2380      	movs	r3, #128	; 0x80
     f80:	02db      	lsls	r3, r3, #11
     f82:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     f84:	7a4b      	ldrb	r3, [r1, #9]
     f86:	2b00      	cmp	r3, #0
     f88:	d002      	beq.n	f90 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     f8a:	2380      	movs	r3, #128	; 0x80
     f8c:	031b      	lsls	r3, r3, #12
     f8e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     f90:	684b      	ldr	r3, [r1, #4]
     f92:	2b01      	cmp	r3, #1
     f94:	d912      	bls.n	fbc <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f96:	1e5d      	subs	r5, r3, #1
     f98:	401d      	ands	r5, r3
     f9a:	2202      	movs	r2, #2
     f9c:	2d00      	cmp	r5, #0
     f9e:	d006      	beq.n	fae <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     fa0:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     fa2:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
     fa4:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     fa6:	029b      	lsls	r3, r3, #10
     fa8:	e007      	b.n	fba <system_gclk_gen_set_config+0x4e>
				div2_count++;
     faa:	3501      	adds	r5, #1
						mask <<= 1) {
     fac:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     fae:	429a      	cmp	r2, r3
     fb0:	d3fb      	bcc.n	faa <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     fb2:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     fb4:	022d      	lsls	r5, r5, #8
     fb6:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     fb8:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     fba:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     fbc:	7a0b      	ldrb	r3, [r1, #8]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d002      	beq.n	fc8 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     fc2:	2380      	movs	r3, #128	; 0x80
     fc4:	039b      	lsls	r3, r3, #14
     fc6:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
     fc8:	4f0c      	ldr	r7, [pc, #48]	; (ffc <system_gclk_gen_set_config+0x90>)
     fca:	47b8      	blx	r7
     fcc:	2800      	cmp	r0, #0
     fce:	d1fb      	bne.n	fc8 <system_gclk_gen_set_config+0x5c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     fd0:	4b0b      	ldr	r3, [pc, #44]	; (1000 <system_gclk_gen_set_config+0x94>)
     fd2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fd4:	4b0b      	ldr	r3, [pc, #44]	; (1004 <system_gclk_gen_set_config+0x98>)
     fd6:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     fd8:	47b8      	blx	r7
     fda:	2800      	cmp	r0, #0
     fdc:	d1fc      	bne.n	fd8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     fde:	4b0a      	ldr	r3, [pc, #40]	; (1008 <system_gclk_gen_set_config+0x9c>)
     fe0:	609d      	str	r5, [r3, #8]
     fe2:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
     fe4:	47b8      	blx	r7
     fe6:	2800      	cmp	r0, #0
     fe8:	d1fc      	bne.n	fe4 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     fea:	2280      	movs	r2, #128	; 0x80
     fec:	686b      	ldr	r3, [r5, #4]
     fee:	0252      	lsls	r2, r2, #9
     ff0:	4013      	ands	r3, r2
     ff2:	431c      	orrs	r4, r3
     ff4:	606c      	str	r4, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ff6:	4b05      	ldr	r3, [pc, #20]	; (100c <system_gclk_gen_set_config+0xa0>)
     ff8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ffc:	00000f41 	.word	0x00000f41
    1000:	0000027d 	.word	0x0000027d
    1004:	40000c08 	.word	0x40000c08
    1008:	40000c00 	.word	0x40000c00
    100c:	000002b1 	.word	0x000002b1

00001010 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1010:	b570      	push	{r4, r5, r6, lr}
    1012:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    1014:	4c09      	ldr	r4, [pc, #36]	; (103c <system_gclk_gen_enable+0x2c>)
    1016:	47a0      	blx	r4
    1018:	2800      	cmp	r0, #0
    101a:	d1fb      	bne.n	1014 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    101c:	4b08      	ldr	r3, [pc, #32]	; (1040 <system_gclk_gen_enable+0x30>)
    101e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1020:	4b08      	ldr	r3, [pc, #32]	; (1044 <system_gclk_gen_enable+0x34>)
    1022:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    1024:	47a0      	blx	r4
    1026:	2800      	cmp	r0, #0
    1028:	d1fc      	bne.n	1024 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    102a:	2380      	movs	r3, #128	; 0x80
    102c:	4a06      	ldr	r2, [pc, #24]	; (1048 <system_gclk_gen_enable+0x38>)
    102e:	025b      	lsls	r3, r3, #9
    1030:	6851      	ldr	r1, [r2, #4]
    1032:	430b      	orrs	r3, r1
    1034:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1036:	4b05      	ldr	r3, [pc, #20]	; (104c <system_gclk_gen_enable+0x3c>)
    1038:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    103a:	bd70      	pop	{r4, r5, r6, pc}
    103c:	00000f41 	.word	0x00000f41
    1040:	0000027d 	.word	0x0000027d
    1044:	40000c04 	.word	0x40000c04
    1048:	40000c00 	.word	0x40000c00
    104c:	000002b1 	.word	0x000002b1

00001050 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1052:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    1054:	4e18      	ldr	r6, [pc, #96]	; (10b8 <system_gclk_gen_get_hz+0x68>)
    1056:	47b0      	blx	r6
    1058:	2800      	cmp	r0, #0
    105a:	d1fb      	bne.n	1054 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    105c:	4b17      	ldr	r3, [pc, #92]	; (10bc <system_gclk_gen_get_hz+0x6c>)
    105e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1060:	4b17      	ldr	r3, [pc, #92]	; (10c0 <system_gclk_gen_get_hz+0x70>)
    1062:	701f      	strb	r7, [r3, #0]
    1064:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    1066:	47b0      	blx	r6
    1068:	2800      	cmp	r0, #0
    106a:	d1fc      	bne.n	1066 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    106c:	4d15      	ldr	r5, [pc, #84]	; (10c4 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    106e:	4b16      	ldr	r3, [pc, #88]	; (10c8 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1070:	6868      	ldr	r0, [r5, #4]
    1072:	04c0      	lsls	r0, r0, #19
    1074:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1076:	4798      	blx	r3
    1078:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    107a:	9b01      	ldr	r3, [sp, #4]
    107c:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    107e:	686b      	ldr	r3, [r5, #4]
    1080:	02db      	lsls	r3, r3, #11
    1082:	0fdb      	lsrs	r3, r3, #31
    1084:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1086:	4b11      	ldr	r3, [pc, #68]	; (10cc <system_gclk_gen_get_hz+0x7c>)
    1088:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    108a:	47b0      	blx	r6
    108c:	2800      	cmp	r0, #0
    108e:	d1fc      	bne.n	108a <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1090:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    1092:	4b0f      	ldr	r3, [pc, #60]	; (10d0 <system_gclk_gen_get_hz+0x80>)
    1094:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1096:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1098:	022d      	lsls	r5, r5, #8
    109a:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    109c:	2b00      	cmp	r3, #0
    109e:	d108      	bne.n	10b2 <system_gclk_gen_get_hz+0x62>
    10a0:	2d01      	cmp	r5, #1
    10a2:	d904      	bls.n	10ae <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    10a4:	0020      	movs	r0, r4
    10a6:	0029      	movs	r1, r5
    10a8:	4b0a      	ldr	r3, [pc, #40]	; (10d4 <system_gclk_gen_get_hz+0x84>)
    10aa:	4798      	blx	r3
    10ac:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    10ae:	0020      	movs	r0, r4
    10b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    10b2:	3501      	adds	r5, #1
    10b4:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    10b6:	e7fa      	b.n	10ae <system_gclk_gen_get_hz+0x5e>
    10b8:	00000f41 	.word	0x00000f41
    10bc:	0000027d 	.word	0x0000027d
    10c0:	40000c04 	.word	0x40000c04
    10c4:	40000c00 	.word	0x40000c00
    10c8:	00000bb9 	.word	0x00000bb9
    10cc:	40000c08 	.word	0x40000c08
    10d0:	000002b1 	.word	0x000002b1
    10d4:	00002471 	.word	0x00002471

000010d8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    10d8:	b510      	push	{r4, lr}
    10da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10dc:	4b06      	ldr	r3, [pc, #24]	; (10f8 <system_gclk_chan_enable+0x20>)
    10de:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10e0:	4b06      	ldr	r3, [pc, #24]	; (10fc <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    10e2:	4a07      	ldr	r2, [pc, #28]	; (1100 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10e4:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    10e6:	2380      	movs	r3, #128	; 0x80
    10e8:	8851      	ldrh	r1, [r2, #2]
    10ea:	01db      	lsls	r3, r3, #7
    10ec:	430b      	orrs	r3, r1
    10ee:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    10f0:	4b04      	ldr	r3, [pc, #16]	; (1104 <system_gclk_chan_enable+0x2c>)
    10f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10f4:	bd10      	pop	{r4, pc}
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	0000027d 	.word	0x0000027d
    10fc:	40000c02 	.word	0x40000c02
    1100:	40000c00 	.word	0x40000c00
    1104:	000002b1 	.word	0x000002b1

00001108 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1108:	b510      	push	{r4, lr}
    110a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    110c:	4b0e      	ldr	r3, [pc, #56]	; (1148 <system_gclk_chan_disable+0x40>)
    110e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1110:	4b0e      	ldr	r3, [pc, #56]	; (114c <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1112:	4a0f      	ldr	r2, [pc, #60]	; (1150 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1114:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1116:	4b0f      	ldr	r3, [pc, #60]	; (1154 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1118:	4c0f      	ldr	r4, [pc, #60]	; (1158 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    111a:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    111c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    111e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1120:	4011      	ands	r1, r2
    1122:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1124:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1126:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1128:	4021      	ands	r1, r4
    112a:	8059      	strh	r1, [r3, #2]
    112c:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    112e:	2280      	movs	r2, #128	; 0x80
    1130:	01d2      	lsls	r2, r2, #7
    1132:	885c      	ldrh	r4, [r3, #2]
    1134:	4214      	tst	r4, r2
    1136:	d1fc      	bne.n	1132 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1138:	885a      	ldrh	r2, [r3, #2]
    113a:	0200      	lsls	r0, r0, #8
    113c:	400a      	ands	r2, r1
    113e:	4302      	orrs	r2, r0
    1140:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1142:	4b06      	ldr	r3, [pc, #24]	; (115c <system_gclk_chan_disable+0x54>)
    1144:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1146:	bd10      	pop	{r4, pc}
    1148:	0000027d 	.word	0x0000027d
    114c:	40000c02 	.word	0x40000c02
    1150:	fffff0ff 	.word	0xfffff0ff
    1154:	40000c00 	.word	0x40000c00
    1158:	ffffbfff 	.word	0xffffbfff
    115c:	000002b1 	.word	0x000002b1

00001160 <system_gclk_chan_set_config>:
{
    1160:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1162:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    1164:	4b03      	ldr	r3, [pc, #12]	; (1174 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1166:	0224      	lsls	r4, r4, #8
    1168:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    116a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    116c:	4b02      	ldr	r3, [pc, #8]	; (1178 <system_gclk_chan_set_config+0x18>)
    116e:	b2a4      	uxth	r4, r4
    1170:	805c      	strh	r4, [r3, #2]
}
    1172:	bd10      	pop	{r4, pc}
    1174:	00001109 	.word	0x00001109
    1178:	40000c00 	.word	0x40000c00

0000117c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    117c:	b510      	push	{r4, lr}
    117e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1180:	4b06      	ldr	r3, [pc, #24]	; (119c <system_gclk_chan_get_hz+0x20>)
    1182:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1184:	4b06      	ldr	r3, [pc, #24]	; (11a0 <system_gclk_chan_get_hz+0x24>)
    1186:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1188:	4b06      	ldr	r3, [pc, #24]	; (11a4 <system_gclk_chan_get_hz+0x28>)
    118a:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    118c:	4b06      	ldr	r3, [pc, #24]	; (11a8 <system_gclk_chan_get_hz+0x2c>)
    118e:	0524      	lsls	r4, r4, #20
    1190:	0f24      	lsrs	r4, r4, #28
    1192:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1194:	0020      	movs	r0, r4
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <system_gclk_chan_get_hz+0x30>)
    1198:	4798      	blx	r3
}
    119a:	bd10      	pop	{r4, pc}
    119c:	0000027d 	.word	0x0000027d
    11a0:	40000c02 	.word	0x40000c02
    11a4:	40000c00 	.word	0x40000c00
    11a8:	000002b1 	.word	0x000002b1
    11ac:	00001051 	.word	0x00001051

000011b0 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11b0:	78d3      	ldrb	r3, [r2, #3]
{
    11b2:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    11b4:	2b00      	cmp	r3, #0
    11b6:	d135      	bne.n	1224 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    11b8:	7814      	ldrb	r4, [r2, #0]
    11ba:	2c80      	cmp	r4, #128	; 0x80
    11bc:	d003      	beq.n	11c6 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    11be:	2380      	movs	r3, #128	; 0x80
    11c0:	0624      	lsls	r4, r4, #24
    11c2:	025b      	lsls	r3, r3, #9
    11c4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    11c6:	2502      	movs	r5, #2
    11c8:	7854      	ldrb	r4, [r2, #1]
    11ca:	43ac      	bics	r4, r5
    11cc:	d106      	bne.n	11dc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    11ce:	7894      	ldrb	r4, [r2, #2]
    11d0:	2c00      	cmp	r4, #0
    11d2:	d124      	bne.n	121e <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    11d4:	2480      	movs	r4, #128	; 0x80
    11d6:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    11d8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    11da:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11dc:	7854      	ldrb	r4, [r2, #1]
    11de:	3c01      	subs	r4, #1
    11e0:	2c01      	cmp	r4, #1
    11e2:	d801      	bhi.n	11e8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    11e4:	4c12      	ldr	r4, [pc, #72]	; (1230 <_system_pinmux_config+0x80>)
    11e6:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11e8:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    11ea:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11ec:	05e4      	lsls	r4, r4, #23
    11ee:	432c      	orrs	r4, r5
    11f0:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11f2:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11f4:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    11f6:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11f8:	0624      	lsls	r4, r4, #24
    11fa:	432c      	orrs	r4, r5
    11fc:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11fe:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1200:	78d4      	ldrb	r4, [r2, #3]
    1202:	2c00      	cmp	r4, #0
    1204:	d10a      	bne.n	121c <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1206:	035b      	lsls	r3, r3, #13
    1208:	d503      	bpl.n	1212 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    120a:	7893      	ldrb	r3, [r2, #2]
    120c:	2b01      	cmp	r3, #1
    120e:	d10c      	bne.n	122a <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1210:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1212:	7853      	ldrb	r3, [r2, #1]
    1214:	3b01      	subs	r3, #1
    1216:	2b01      	cmp	r3, #1
    1218:	d800      	bhi.n	121c <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    121a:	6081      	str	r1, [r0, #8]
		}
	}
}
    121c:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    121e:	24c0      	movs	r4, #192	; 0xc0
    1220:	02e4      	lsls	r4, r4, #11
    1222:	e7d9      	b.n	11d8 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1224:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1226:	2300      	movs	r3, #0
    1228:	e7de      	b.n	11e8 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    122a:	6141      	str	r1, [r0, #20]
    122c:	e7f1      	b.n	1212 <_system_pinmux_config+0x62>
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	fffbffff 	.word	0xfffbffff

00001234 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1234:	b510      	push	{r4, lr}
    1236:	0003      	movs	r3, r0
    1238:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    123a:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    123c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    123e:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1240:	4281      	cmp	r1, r0
    1242:	d102      	bne.n	124a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1244:	4904      	ldr	r1, [pc, #16]	; (1258 <system_pinmux_pin_set_config+0x24>)
    1246:	01e0      	lsls	r0, r4, #7
    1248:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    124a:	211f      	movs	r1, #31
    124c:	400b      	ands	r3, r1
    124e:	391e      	subs	r1, #30
    1250:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1252:	4b02      	ldr	r3, [pc, #8]	; (125c <system_pinmux_pin_set_config+0x28>)
    1254:	4798      	blx	r3
}
    1256:	bd10      	pop	{r4, pc}
    1258:	41004400 	.word	0x41004400
    125c:	000011b1 	.word	0x000011b1

00001260 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1260:	4770      	bx	lr
	...

00001264 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1264:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1266:	4b05      	ldr	r3, [pc, #20]	; (127c <system_init+0x18>)
    1268:	4798      	blx	r3
	/* Initialize board hardware */
	system_board_init();
    126a:	4b05      	ldr	r3, [pc, #20]	; (1280 <system_init+0x1c>)
    126c:	4798      	blx	r3
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    126e:	4b05      	ldr	r3, [pc, #20]	; (1284 <system_init+0x20>)
    1270:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <system_init+0x24>)
    1274:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1276:	4b05      	ldr	r3, [pc, #20]	; (128c <system_init+0x28>)
    1278:	4798      	blx	r3
}
    127a:	bd10      	pop	{r4, pc}
    127c:	00000dd9 	.word	0x00000dd9
    1280:	000002e1 	.word	0x000002e1
    1284:	00001261 	.word	0x00001261
    1288:	00001261 	.word	0x00001261
    128c:	00001261 	.word	0x00001261

00001290 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1290:	2000      	movs	r0, #0
    1292:	4770      	bx	lr

00001294 <_tcc_set_compare_value.isra.5>:
 *
 * \retval  STATUS_OK               The compare value was updated successfully
 * \retval  STATUS_ERR_INVALID_ARG  An invalid channel index was supplied or
 *                                  compare value exceed resolution
 */
static enum status_code _tcc_set_compare_value(
    1294:	b530      	push	{r4, r5, lr}
    1296:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1298:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    129a:	2903      	cmp	r1, #3
    129c:	d813      	bhi.n	12c6 <_tcc_set_compare_value.isra.5+0x32>
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
    129e:	4d10      	ldr	r5, [pc, #64]	; (12e0 <_tcc_set_compare_value.isra.5+0x4c>)
    12a0:	42aa      	cmp	r2, r5
    12a2:	d810      	bhi.n	12c6 <_tcc_set_compare_value.isra.5+0x32>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
    12a4:	2b00      	cmp	r3, #0
    12a6:	d00f      	beq.n	12c8 <_tcc_set_compare_value.isra.5+0x34>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
				(TCC_STATUS_CCBV0 << channel_index)) {
    12a8:	2380      	movs	r3, #128	; 0x80
    12aa:	025b      	lsls	r3, r3, #9
    12ac:	408b      	lsls	r3, r1
		while(tcc_module->STATUS.reg  &
    12ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    12b0:	4203      	tst	r3, r0
    12b2:	d1fc      	bne.n	12ae <_tcc_set_compare_value.isra.5+0x1a>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    12b4:	2580      	movs	r5, #128	; 0x80
    12b6:	032d      	lsls	r5, r5, #12
    12b8:	408d      	lsls	r5, r1
		while(tcc_module->SYNCBUSY.reg  &
    12ba:	68a0      	ldr	r0, [r4, #8]
    12bc:	4028      	ands	r0, r5
    12be:	d1fc      	bne.n	12ba <_tcc_set_compare_value.isra.5+0x26>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    12c0:	311c      	adds	r1, #28
    12c2:	0089      	lsls	r1, r1, #2
    12c4:	510a      	str	r2, [r1, r4]
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    12c6:	bd30      	pop	{r4, r5, pc}
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    12c8:	2080      	movs	r0, #128	; 0x80
    12ca:	0040      	lsls	r0, r0, #1
    12cc:	4088      	lsls	r0, r1
    12ce:	68a3      	ldr	r3, [r4, #8]
    12d0:	4003      	ands	r3, r0
    12d2:	d1fc      	bne.n	12ce <_tcc_set_compare_value.isra.5+0x3a>
		tcc_module->CC[channel_index].reg = compare;
    12d4:	3110      	adds	r1, #16
    12d6:	0089      	lsls	r1, r1, #2
    12d8:	1861      	adds	r1, r4, r1
    12da:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    12dc:	0018      	movs	r0, r3
    12de:	e7f2      	b.n	12c6 <_tcc_set_compare_value.isra.5+0x32>
    12e0:	00ffffff 	.word	0x00ffffff

000012e4 <tcc_get_config_defaults>:
	config->counter.period                 = _tcc_maxs[module_index];
    12e4:	4a37      	ldr	r2, [pc, #220]	; (13c4 <tcc_get_config_defaults+0xe0>)
{
    12e6:	b510      	push	{r4, lr}
	config->counter.period                 = _tcc_maxs[module_index];
    12e8:	6042      	str	r2, [r0, #4]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    12ea:	0002      	movs	r2, r0
	config->counter.count                  = 0;
    12ec:	2300      	movs	r3, #0
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    12ee:	0004      	movs	r4, r0
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    12f0:	322c      	adds	r2, #44	; 0x2c
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    12f2:	3448      	adds	r4, #72	; 0x48
	config->counter.count                  = 0;
    12f4:	6003      	str	r3, [r0, #0]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    12f6:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    12f8:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    12fa:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    12fc:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    12fe:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    1300:	61c3      	str	r3, [r0, #28]
    1302:	6203      	str	r3, [r0, #32]
    1304:	6243      	str	r3, [r0, #36]	; 0x24
    1306:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1308:	7503      	strb	r3, [r0, #20]
    130a:	7543      	strb	r3, [r0, #21]
    130c:	7583      	strb	r3, [r0, #22]
    130e:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1310:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1312:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1314:	7403      	strb	r3, [r0, #16]
    1316:	7443      	strb	r3, [r0, #17]
    1318:	7483      	strb	r3, [r0, #18]
    131a:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    131c:	7013      	strb	r3, [r2, #0]
    131e:	7053      	strb	r3, [r2, #1]
    1320:	7093      	strb	r3, [r2, #2]
    1322:	70d3      	strb	r3, [r2, #3]
    1324:	7113      	strb	r3, [r2, #4]
    1326:	7153      	strb	r3, [r2, #5]
    1328:	7193      	strb	r3, [r2, #6]
    132a:	71d3      	strb	r3, [r2, #7]
    132c:	7213      	strb	r3, [r2, #8]
    132e:	7253      	strb	r3, [r2, #9]
    1330:	7293      	strb	r3, [r2, #10]
    1332:	72d3      	strb	r3, [r2, #11]
    1334:	320c      	adds	r2, #12
    1336:	7013      	strb	r3, [r2, #0]
    1338:	7053      	strb	r3, [r2, #1]
    133a:	7093      	strb	r3, [r2, #2]
    133c:	70d3      	strb	r3, [r2, #3]
    133e:	7113      	strb	r3, [r2, #4]
    1340:	7153      	strb	r3, [r2, #5]
    1342:	7193      	strb	r3, [r2, #6]
    1344:	71d3      	strb	r3, [r2, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1346:	7213      	strb	r3, [r2, #8]
    1348:	7253      	strb	r3, [r2, #9]
    134a:	7293      	strb	r3, [r2, #10]
    134c:	72d3      	strb	r3, [r2, #11]
    134e:	7313      	strb	r3, [r2, #12]
    1350:	7353      	strb	r3, [r2, #13]
    1352:	7393      	strb	r3, [r2, #14]
    1354:	73d3      	strb	r3, [r2, #15]
    1356:	1d01      	adds	r1, r0, #4
    1358:	7023      	strb	r3, [r4, #0]
    135a:	7063      	strb	r3, [r4, #1]
    135c:	70a3      	strb	r3, [r4, #2]
    135e:	70e3      	strb	r3, [r4, #3]
    1360:	7123      	strb	r3, [r4, #4]
    1362:	7163      	strb	r3, [r4, #5]
    1364:	71a3      	strb	r3, [r4, #6]
    1366:	71e3      	strb	r3, [r4, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1368:	7223      	strb	r3, [r4, #8]
    136a:	7263      	strb	r3, [r4, #9]
    136c:	72a3      	strb	r3, [r4, #10]
    136e:	72e3      	strb	r3, [r4, #11]
    1370:	7323      	strb	r3, [r4, #12]
    1372:	7363      	strb	r3, [r4, #13]
    1374:	73a3      	strb	r3, [r4, #14]
    1376:	73e3      	strb	r3, [r4, #15]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1378:	3450      	adds	r4, #80	; 0x50
    137a:	7023      	strb	r3, [r4, #0]
    137c:	6583      	str	r3, [r0, #88]	; 0x58
    137e:	6783      	str	r3, [r0, #120]	; 0x78
    1380:	7063      	strb	r3, [r4, #1]
    1382:	65c3      	str	r3, [r0, #92]	; 0x5c
    1384:	67c3      	str	r3, [r0, #124]	; 0x7c
    1386:	70a3      	strb	r3, [r4, #2]
    1388:	6603      	str	r3, [r0, #96]	; 0x60
    138a:	67cb      	str	r3, [r1, #124]	; 0x7c
    138c:	3197      	adds	r1, #151	; 0x97
    138e:	700b      	strb	r3, [r1, #0]
	config->double_buffering_enabled  = true;
    1390:	2101      	movs	r1, #1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1392:	3a30      	subs	r2, #48	; 0x30
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1394:	6643      	str	r3, [r0, #100]	; 0x64
    1396:	67d3      	str	r3, [r2, #124]	; 0x7c
    1398:	3294      	adds	r2, #148	; 0x94
    139a:	7013      	strb	r3, [r2, #0]
    139c:	3a14      	subs	r2, #20
    139e:	6683      	str	r3, [r0, #104]	; 0x68
    13a0:	6013      	str	r3, [r2, #0]
    13a2:	7553      	strb	r3, [r2, #21]
    13a4:	3204      	adds	r2, #4
    13a6:	66c3      	str	r3, [r0, #108]	; 0x6c
    13a8:	6013      	str	r3, [r2, #0]
    13aa:	7493      	strb	r3, [r2, #18]
    13ac:	3204      	adds	r2, #4
    13ae:	6703      	str	r3, [r0, #112]	; 0x70
    13b0:	6013      	str	r3, [r2, #0]
    13b2:	73d3      	strb	r3, [r2, #15]
    13b4:	6743      	str	r3, [r0, #116]	; 0x74
    13b6:	3204      	adds	r2, #4
	config->run_in_standby            = false;
    13b8:	30a1      	adds	r0, #161	; 0xa1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    13ba:	6013      	str	r3, [r2, #0]
	config->double_buffering_enabled  = true;
    13bc:	7311      	strb	r1, [r2, #12]
	config->run_in_standby            = false;
    13be:	7003      	strb	r3, [r0, #0]
}
    13c0:	bd10      	pop	{r4, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	00ffffff 	.word	0x00ffffff

000013c8 <tcc_init>:
{
    13c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t module_index = _tcc_get_inst_index(hw);
    13ca:	4ba7      	ldr	r3, [pc, #668]	; (1668 <tcc_init+0x2a0>)
{
    13cc:	b08f      	sub	sp, #60	; 0x3c
    13ce:	0006      	movs	r6, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    13d0:	0008      	movs	r0, r1
{
    13d2:	000d      	movs	r5, r1
    13d4:	0014      	movs	r4, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    13d6:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    13d8:	2320      	movs	r3, #32
    13da:	4aa4      	ldr	r2, [pc, #656]	; (166c <tcc_init+0x2a4>)
    13dc:	9009      	str	r0, [sp, #36]	; 0x24
    13de:	6a11      	ldr	r1, [r2, #32]
		return STATUS_ERR_DENIED;
    13e0:	201c      	movs	r0, #28
    13e2:	430b      	orrs	r3, r1
    13e4:	6213      	str	r3, [r2, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    13e6:	682b      	ldr	r3, [r5, #0]
    13e8:	079b      	lsls	r3, r3, #30
    13ea:	d407      	bmi.n	13fc <tcc_init+0x34>
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    13ec:	682b      	ldr	r3, [r5, #0]
    13ee:	07db      	lsls	r3, r3, #31
    13f0:	d404      	bmi.n	13fc <tcc_init+0x34>
    13f2:	4a9f      	ldr	r2, [pc, #636]	; (1670 <tcc_init+0x2a8>)
	if ((config->counter.count > count_max)
    13f4:	6823      	ldr	r3, [r4, #0]
    13f6:	4293      	cmp	r3, r2
    13f8:	d902      	bls.n	1400 <tcc_init+0x38>
		return STATUS_ERR_INVALID_ARG;
    13fa:	2017      	movs	r0, #23
}
    13fc:	b00f      	add	sp, #60	; 0x3c
    13fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		|| (config->counter.period > count_max)
    1400:	6863      	ldr	r3, [r4, #4]
    1402:	4293      	cmp	r3, r2
    1404:	d8f9      	bhi.n	13fa <tcc_init+0x32>
    1406:	0023      	movs	r3, r4
    1408:	0021      	movs	r1, r4
    140a:	331c      	adds	r3, #28
    140c:	312c      	adds	r1, #44	; 0x2c
		if ((config->compare.match[i] > count_max)
    140e:	6818      	ldr	r0, [r3, #0]
    1410:	4290      	cmp	r0, r2
    1412:	d8f2      	bhi.n	13fa <tcc_init+0x32>
    1414:	3304      	adds	r3, #4
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1416:	428b      	cmp	r3, r1
    1418:	d1f9      	bne.n	140e <tcc_init+0x46>
    141a:	2200      	movs	r2, #0
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    141c:	2180      	movs	r1, #128	; 0x80
    141e:	9202      	str	r2, [sp, #8]
    1420:	0449      	lsls	r1, r1, #17
		if (config->capture.channel_function[i] ==
    1422:	18a0      	adds	r0, r4, r2
    1424:	7c00      	ldrb	r0, [r0, #16]
    1426:	2801      	cmp	r0, #1
    1428:	d104      	bne.n	1434 <tcc_init+0x6c>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    142a:	0008      	movs	r0, r1
    142c:	4090      	lsls	r0, r2
    142e:	9f02      	ldr	r7, [sp, #8]
    1430:	4307      	orrs	r7, r0
    1432:	9702      	str	r7, [sp, #8]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1434:	3201      	adds	r2, #1
    1436:	2a04      	cmp	r2, #4
    1438:	d1f3      	bne.n	1422 <tcc_init+0x5a>
	if (config->run_in_standby) {
    143a:	0022      	movs	r2, r4
    143c:	32a1      	adds	r2, #161	; 0xa1
    143e:	7812      	ldrb	r2, [r2, #0]
    1440:	2a00      	cmp	r2, #0
    1442:	d004      	beq.n	144e <tcc_init+0x86>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    1444:	2280      	movs	r2, #128	; 0x80
    1446:	9902      	ldr	r1, [sp, #8]
    1448:	0112      	lsls	r2, r2, #4
    144a:	4311      	orrs	r1, r2
    144c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    144e:	7a22      	ldrb	r2, [r4, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1450:	1e51      	subs	r1, r2, #1
    1452:	418a      	sbcs	r2, r1
    1454:	0092      	lsls	r2, r2, #2
    1456:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    1458:	7a62      	ldrb	r2, [r4, #9]
    145a:	2a01      	cmp	r2, #1
    145c:	d102      	bne.n	1464 <tcc_init+0x9c>
		ctrlb |= TCC_CTRLBSET_DIR;
    145e:	9903      	ldr	r1, [sp, #12]
    1460:	4311      	orrs	r1, r2
    1462:	9103      	str	r1, [sp, #12]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1464:	7b22      	ldrb	r2, [r4, #12]
    1466:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1468:	7ae2      	ldrb	r2, [r4, #11]
    146a:	9207      	str	r2, [sp, #28]
    146c:	2200      	movs	r2, #0
    146e:	4694      	mov	ip, r2
		if (cfg->capture_channel >= cc_num) {
    1470:	7a5f      	ldrb	r7, [r3, #9]
    1472:	2f03      	cmp	r7, #3
    1474:	d8c1      	bhi.n	13fa <tcc_init+0x32>
		if (cfg->filter_value > 0xF) {
    1476:	7819      	ldrb	r1, [r3, #0]
    1478:	290f      	cmp	r1, #15
    147a:	d8be      	bhi.n	13fa <tcc_init+0x32>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    147c:	20f0      	movs	r0, #240	; 0xf0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    147e:	785a      	ldrb	r2, [r3, #1]
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1480:	0500      	lsls	r0, r0, #20
    1482:	0609      	lsls	r1, r1, #24
    1484:	4001      	ands	r1, r0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1486:	0412      	lsls	r2, r2, #16
    1488:	430a      	orrs	r2, r1
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    148a:	7899      	ldrb	r1, [r3, #2]
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    148c:	9201      	str	r2, [sp, #4]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    148e:	1e48      	subs	r0, r1, #1
    1490:	4181      	sbcs	r1, r0
    1492:	01c9      	lsls	r1, r1, #7
    1494:	9104      	str	r1, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1496:	78d9      	ldrb	r1, [r3, #3]
				| TCC_FCTRLA_SRC(cfg->source)
    1498:	2203      	movs	r2, #3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    149a:	1e48      	subs	r0, r1, #1
    149c:	4181      	sbcs	r1, r0
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    149e:	7918      	ldrb	r0, [r3, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    14a0:	00c9      	lsls	r1, r1, #3
    14a2:	9105      	str	r1, [sp, #20]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    14a4:	1e41      	subs	r1, r0, #1
    14a6:	4188      	sbcs	r0, r1
    14a8:	0101      	lsls	r1, r0, #4
				| TCC_FCTRLA_BLANK(cfg->blanking)
    14aa:	2060      	movs	r0, #96	; 0x60
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    14ac:	9108      	str	r1, [sp, #32]
				| TCC_FCTRLA_BLANK(cfg->blanking)
    14ae:	7999      	ldrb	r1, [r3, #6]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    14b0:	02bf      	lsls	r7, r7, #10
				| TCC_FCTRLA_BLANK(cfg->blanking)
    14b2:	0149      	lsls	r1, r1, #5
    14b4:	4001      	ands	r1, r0
				| TCC_FCTRLA_SRC(cfg->source)
    14b6:	7958      	ldrb	r0, [r3, #5]
    14b8:	4010      	ands	r0, r2
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    14ba:	9a01      	ldr	r2, [sp, #4]
    14bc:	4302      	orrs	r2, r0
    14be:	430a      	orrs	r2, r1
				| TCC_FCTRLA_HALT(cfg->halt_action)
    14c0:	21c0      	movs	r1, #192	; 0xc0
    14c2:	79d8      	ldrb	r0, [r3, #7]
    14c4:	0089      	lsls	r1, r1, #2
    14c6:	0200      	lsls	r0, r0, #8
    14c8:	4001      	ands	r1, r0
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    14ca:	20e0      	movs	r0, #224	; 0xe0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    14cc:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    14ce:	7a1a      	ldrb	r2, [r3, #8]
    14d0:	01c0      	lsls	r0, r0, #7
    14d2:	0312      	lsls	r2, r2, #12
    14d4:	4002      	ands	r2, r0
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    14d6:	20c0      	movs	r0, #192	; 0xc0
    14d8:	0100      	lsls	r0, r0, #4
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    14da:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    14dc:	4007      	ands	r7, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    14de:	430f      	orrs	r7, r1
		value_buffer[i] = fault;
    14e0:	4661      	mov	r1, ip
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    14e2:	9a04      	ldr	r2, [sp, #16]
    14e4:	330a      	adds	r3, #10
    14e6:	4317      	orrs	r7, r2
    14e8:	9a05      	ldr	r2, [sp, #20]
    14ea:	4317      	orrs	r7, r2
    14ec:	9a08      	ldr	r2, [sp, #32]
    14ee:	4317      	orrs	r7, r2
		value_buffer[i] = fault;
    14f0:	aa0c      	add	r2, sp, #48	; 0x30
    14f2:	508f      	str	r7, [r1, r2]
    14f4:	2204      	movs	r2, #4
    14f6:	4494      	add	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    14f8:	4662      	mov	r2, ip
    14fa:	2a08      	cmp	r2, #8
    14fc:	d1b8      	bne.n	1470 <tcc_init+0xa8>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    14fe:	2280      	movs	r2, #128	; 0x80
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1500:	2300      	movs	r3, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1502:	0252      	lsls	r2, r2, #9
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1504:	2002      	movs	r0, #2
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1506:	4694      	mov	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1508:	9301      	str	r3, [sp, #4]
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    150a:	30ff      	adds	r0, #255	; 0xff
    150c:	18e2      	adds	r2, r4, r3
		if (config->wave_ext.invert[i]) {
    150e:	0017      	movs	r7, r2
    1510:	3750      	adds	r7, #80	; 0x50
    1512:	783f      	ldrb	r7, [r7, #0]
    1514:	2f00      	cmp	r7, #0
    1516:	d004      	beq.n	1522 <tcc_init+0x15a>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1518:	4667      	mov	r7, ip
    151a:	409f      	lsls	r7, r3
    151c:	9901      	ldr	r1, [sp, #4]
    151e:	4339      	orrs	r1, r7
    1520:	9101      	str	r1, [sp, #4]
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1522:	001f      	movs	r7, r3
    1524:	3741      	adds	r7, #65	; 0x41
    1526:	5dd2      	ldrb	r2, [r2, r7]
    1528:	2a00      	cmp	r2, #0
    152a:	d007      	beq.n	153c <tcc_init+0x174>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    152c:	2a02      	cmp	r2, #2
    152e:	d000      	beq.n	1532 <tcc_init+0x16a>
    1530:	e098      	b.n	1664 <tcc_init+0x29c>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1532:	0002      	movs	r2, r0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1534:	409a      	lsls	r2, r3
    1536:	9901      	ldr	r1, [sp, #4]
    1538:	4311      	orrs	r1, r2
    153a:	9101      	str	r1, [sp, #4]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    153c:	3301      	adds	r3, #1
    153e:	2b08      	cmp	r3, #8
    1540:	d1e4      	bne.n	150c <tcc_init+0x144>
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1542:	2230      	movs	r2, #48	; 0x30
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1544:	2107      	movs	r1, #7
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1546:	7e63      	ldrb	r3, [r4, #25]
    1548:	011b      	lsls	r3, r3, #4
    154a:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    154c:	7e22      	ldrb	r2, [r4, #24]
    154e:	400a      	ands	r2, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1550:	4313      	orrs	r3, r2
			wave |= (TCC_WAVE_POL0 << n);
    1552:	2280      	movs	r2, #128	; 0x80
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1554:	9304      	str	r3, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1556:	2300      	movs	r3, #0
			wave |= (TCC_WAVE_POL0 << n);
    1558:	0252      	lsls	r2, r2, #9
		if (wav_cfg->wave_polarity[n]) {
    155a:	18e1      	adds	r1, r4, r3
    155c:	7d09      	ldrb	r1, [r1, #20]
    155e:	2900      	cmp	r1, #0
    1560:	d004      	beq.n	156c <tcc_init+0x1a4>
			wave |= (TCC_WAVE_POL0 << n);
    1562:	0011      	movs	r1, r2
    1564:	4099      	lsls	r1, r3
    1566:	9804      	ldr	r0, [sp, #16]
    1568:	4308      	orrs	r0, r1
    156a:	9004      	str	r0, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    156c:	3301      	adds	r3, #1
    156e:	2b04      	cmp	r3, #4
    1570:	d1f3      	bne.n	155a <tcc_init+0x192>
    1572:	0031      	movs	r1, r6
		module_inst->callback[i] = NULL;
    1574:	2300      	movs	r3, #0
    1576:	1d32      	adds	r2, r6, #4
    1578:	3134      	adds	r1, #52	; 0x34
    157a:	c208      	stmia	r2!, {r3}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    157c:	428a      	cmp	r2, r1
    157e:	d1fc      	bne.n	157a <tcc_init+0x1b2>
	module_inst->register_callback_mask = 0;
    1580:	6373      	str	r3, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1582:	63b3      	str	r3, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1584:	9b09      	ldr	r3, [sp, #36]	; 0x24
	gclk_chan_config.source_generator = config->counter.clock_source;
    1586:	aa0a      	add	r2, sp, #40	; 0x28
	_tcc_instances[module_index] = module_inst;
    1588:	0098      	lsls	r0, r3, #2
    158a:	4b3a      	ldr	r3, [pc, #232]	; (1674 <tcc_init+0x2ac>)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    158c:	0011      	movs	r1, r2
	_tcc_instances[module_index] = module_inst;
    158e:	50c6      	str	r6, [r0, r3]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1590:	0023      	movs	r3, r4
	module_inst->hw = hw;
    1592:	6035      	str	r5, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1594:	33a0      	adds	r3, #160	; 0xa0
    1596:	781b      	ldrb	r3, [r3, #0]
    1598:	363c      	adds	r6, #60	; 0x3c
    159a:	7033      	strb	r3, [r6, #0]
	gclk_chan_config.source_generator = config->counter.clock_source;
    159c:	7aa3      	ldrb	r3, [r4, #10]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    159e:	2011      	movs	r0, #17
	gclk_chan_config.source_generator = config->counter.clock_source;
    15a0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    15a2:	4b35      	ldr	r3, [pc, #212]	; (1678 <tcc_init+0x2b0>)
    15a4:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    15a6:	4b35      	ldr	r3, [pc, #212]	; (167c <tcc_init+0x2b4>)
    15a8:	2011      	movs	r0, #17
    15aa:	4798      	blx	r3
    15ac:	0023      	movs	r3, r4
    15ae:	0027      	movs	r7, r4
    15b0:	0026      	movs	r6, r4
    15b2:	3378      	adds	r3, #120	; 0x78
    15b4:	3798      	adds	r7, #152	; 0x98
    15b6:	3658      	adds	r6, #88	; 0x58
    15b8:	9305      	str	r3, [sp, #20]
		if (!config->pins.enable_wave_out_pin[i]) {
    15ba:	783b      	ldrb	r3, [r7, #0]
    15bc:	2b00      	cmp	r3, #0
    15be:	d00d      	beq.n	15dc <tcc_init+0x214>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    15c0:	2301      	movs	r3, #1
    15c2:	a90b      	add	r1, sp, #44	; 0x2c
    15c4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    15c6:	2300      	movs	r3, #0
    15c8:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    15ca:	3320      	adds	r3, #32
    15cc:	18f3      	adds	r3, r6, r3
    15ce:	781b      	ldrb	r3, [r3, #0]
		system_pinmux_pin_set_config(
    15d0:	7830      	ldrb	r0, [r6, #0]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    15d2:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    15d4:	2301      	movs	r3, #1
    15d6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    15d8:	4b29      	ldr	r3, [pc, #164]	; (1680 <tcc_init+0x2b8>)
    15da:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    15dc:	9b05      	ldr	r3, [sp, #20]
    15de:	3604      	adds	r6, #4
    15e0:	3701      	adds	r7, #1
    15e2:	42b3      	cmp	r3, r6
    15e4:	d1e9      	bne.n	15ba <tcc_init+0x1f2>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    15e6:	9b06      	ldr	r3, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    15e8:	9a07      	ldr	r2, [sp, #28]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    15ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    15ec:	0212      	lsls	r2, r2, #8
    15ee:	4313      	orrs	r3, r2
    15f0:	9a02      	ldr	r2, [sp, #8]
    15f2:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    15f4:	602b      	str	r3, [r5, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    15f6:	2304      	movs	r3, #4
    15f8:	68aa      	ldr	r2, [r5, #8]
    15fa:	421a      	tst	r2, r3
    15fc:	d1fc      	bne.n	15f8 <tcc_init+0x230>
	hw->CTRLBCLR.reg = 0xFF;
    15fe:	23ff      	movs	r3, #255	; 0xff
    1600:	712b      	strb	r3, [r5, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1602:	3bfb      	subs	r3, #251	; 0xfb
    1604:	68aa      	ldr	r2, [r5, #8]
    1606:	421a      	tst	r2, r3
    1608:	d1fc      	bne.n	1604 <tcc_init+0x23c>
	hw->CTRLBSET.reg = ctrlb;
    160a:	466b      	mov	r3, sp
    160c:	7b1b      	ldrb	r3, [r3, #12]
    160e:	716b      	strb	r3, [r5, #5]
	hw->FCTRLA.reg = faults[0];
    1610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1612:	60eb      	str	r3, [r5, #12]
	hw->FCTRLB.reg = faults[1];
    1614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1616:	612b      	str	r3, [r5, #16]
	hw->DRVCTRL.reg = drvctrl;
    1618:	9b01      	ldr	r3, [sp, #4]
    161a:	61ab      	str	r3, [r5, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    161c:	4b19      	ldr	r3, [pc, #100]	; (1684 <tcc_init+0x2bc>)
    161e:	68aa      	ldr	r2, [r5, #8]
    1620:	421a      	tst	r2, r3
    1622:	d1fc      	bne.n	161e <tcc_init+0x256>
	hw->WAVE.reg = waves[0];
    1624:	9b04      	ldr	r3, [sp, #16]
    1626:	63eb      	str	r3, [r5, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1628:	2310      	movs	r3, #16
    162a:	68aa      	ldr	r2, [r5, #8]
    162c:	421a      	tst	r2, r3
    162e:	d1fc      	bne.n	162a <tcc_init+0x262>
	hw->COUNT.reg = config->counter.count;
    1630:	6823      	ldr	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1632:	4a15      	ldr	r2, [pc, #84]	; (1688 <tcc_init+0x2c0>)
	hw->COUNT.reg = config->counter.count;
    1634:	636b      	str	r3, [r5, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1636:	68ab      	ldr	r3, [r5, #8]
    1638:	4013      	ands	r3, r2
    163a:	d1fc      	bne.n	1636 <tcc_init+0x26e>
	hw->PER.reg = (config->counter.period);
    163c:	6862      	ldr	r2, [r4, #4]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    163e:	4913      	ldr	r1, [pc, #76]	; (168c <tcc_init+0x2c4>)
	hw->PER.reg = (config->counter.period);
    1640:	642a      	str	r2, [r5, #64]	; 0x40
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1642:	000a      	movs	r2, r1
    1644:	409a      	lsls	r2, r3
		while (hw->SYNCBUSY.reg & (
    1646:	68a8      	ldr	r0, [r5, #8]
    1648:	4010      	ands	r0, r2
    164a:	d1fc      	bne.n	1646 <tcc_init+0x27e>
		hw->CC[i].reg = (config->compare.match[i]);
    164c:	009a      	lsls	r2, r3, #2
    164e:	18a2      	adds	r2, r4, r2
    1650:	69d6      	ldr	r6, [r2, #28]
    1652:	001a      	movs	r2, r3
    1654:	3210      	adds	r2, #16
    1656:	0092      	lsls	r2, r2, #2
    1658:	18aa      	adds	r2, r5, r2
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    165a:	3301      	adds	r3, #1
		hw->CC[i].reg = (config->compare.match[i]);
    165c:	6056      	str	r6, [r2, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    165e:	2b04      	cmp	r3, #4
    1660:	d1ef      	bne.n	1642 <tcc_init+0x27a>
    1662:	e6cb      	b.n	13fc <tcc_init+0x34>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1664:	2201      	movs	r2, #1
    1666:	e765      	b.n	1534 <tcc_init+0x16c>
    1668:	00001291 	.word	0x00001291
    166c:	40000400 	.word	0x40000400
    1670:	00ffffff 	.word	0x00ffffff
    1674:	20000188 	.word	0x20000188
    1678:	00001161 	.word	0x00001161
    167c:	000010d9 	.word	0x000010d9
    1680:	00001235 	.word	0x00001235
    1684:	00020040 	.word	0x00020040
    1688:	00040080 	.word	0x00040080
    168c:	00080100 	.word	0x00080100

00001690 <tcc_set_compare_value>:
		const uint32_t compare)
{
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1690:	0003      	movs	r3, r0
{
    1692:	b510      	push	{r4, lr}
	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1694:	333c      	adds	r3, #60	; 0x3c
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	4c01      	ldr	r4, [pc, #4]	; (16a0 <tcc_set_compare_value+0x10>)
    169a:	6800      	ldr	r0, [r0, #0]
    169c:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    169e:	bd10      	pop	{r4, pc}
    16a0:	00001295 	.word	0x00001295

000016a4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    16a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    16a6:	2500      	movs	r5, #0
	struct tcc_module *module =
    16a8:	4b0b      	ldr	r3, [pc, #44]	; (16d8 <_tcc_interrupt_handler+0x34>)
    16aa:	0080      	lsls	r0, r0, #2
    16ac:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    16ae:	6823      	ldr	r3, [r4, #0]
    16b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    16b2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    16b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    16b6:	4013      	ands	r3, r2
    16b8:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    16ba:	4b08      	ldr	r3, [pc, #32]	; (16dc <_tcc_interrupt_handler+0x38>)
    16bc:	58ef      	ldr	r7, [r5, r3]
    16be:	4237      	tst	r7, r6
    16c0:	d005      	beq.n	16ce <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    16c2:	1963      	adds	r3, r4, r5
    16c4:	685b      	ldr	r3, [r3, #4]
    16c6:	0020      	movs	r0, r4
    16c8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    16ca:	6823      	ldr	r3, [r4, #0]
    16cc:	62df      	str	r7, [r3, #44]	; 0x2c
    16ce:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    16d0:	2d30      	cmp	r5, #48	; 0x30
    16d2:	d1f2      	bne.n	16ba <_tcc_interrupt_handler+0x16>
		}
	}
}
    16d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	20000188 	.word	0x20000188
    16dc:	00003eb4 	.word	0x00003eb4

000016e0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    16e0:	b510      	push	{r4, lr}
    16e2:	2000      	movs	r0, #0
    16e4:	4b01      	ldr	r3, [pc, #4]	; (16ec <TCC0_Handler+0xc>)
    16e6:	4798      	blx	r3
    16e8:	bd10      	pop	{r4, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	000016a5 	.word	0x000016a5

000016f0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    16f0:	1c93      	adds	r3, r2, #2
    16f2:	009b      	lsls	r3, r3, #2
    16f4:	5019      	str	r1, [r3, r0]
    16f6:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    16f8:	2a02      	cmp	r2, #2
    16fa:	d104      	bne.n	1706 <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    16fc:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    16fe:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1700:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1702:	2000      	movs	r0, #0
    1704:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1706:	2a03      	cmp	r2, #3
    1708:	d101      	bne.n	170e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    170a:	321d      	adds	r2, #29
    170c:	e7f7      	b.n	16fe <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    170e:	2101      	movs	r1, #1
    1710:	4091      	lsls	r1, r2
    1712:	430b      	orrs	r3, r1
    1714:	e7f4      	b.n	1700 <tc_register_callback+0x10>
	...

00001718 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1718:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    171a:	2601      	movs	r6, #1
	struct tc_module *module
    171c:	4b14      	ldr	r3, [pc, #80]	; (1770 <_tc_interrupt_handler+0x58>)
    171e:	0080      	lsls	r0, r0, #2
    1720:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1722:	6823      	ldr	r3, [r4, #0]
    1724:	7e22      	ldrb	r2, [r4, #24]
    1726:	7e65      	ldrb	r5, [r4, #25]
    1728:	7b9b      	ldrb	r3, [r3, #14]
    172a:	4015      	ands	r5, r2
    172c:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    172e:	4235      	tst	r5, r6
    1730:	d004      	beq.n	173c <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1732:	68a3      	ldr	r3, [r4, #8]
    1734:	0020      	movs	r0, r4
    1736:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1738:	6823      	ldr	r3, [r4, #0]
    173a:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    173c:	2602      	movs	r6, #2
    173e:	4235      	tst	r5, r6
    1740:	d004      	beq.n	174c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1742:	68e3      	ldr	r3, [r4, #12]
    1744:	0020      	movs	r0, r4
    1746:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1748:	6823      	ldr	r3, [r4, #0]
    174a:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    174c:	2610      	movs	r6, #16
    174e:	4235      	tst	r5, r6
    1750:	d004      	beq.n	175c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1752:	6923      	ldr	r3, [r4, #16]
    1754:	0020      	movs	r0, r4
    1756:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1758:	6823      	ldr	r3, [r4, #0]
    175a:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    175c:	2620      	movs	r6, #32
    175e:	4235      	tst	r5, r6
    1760:	d004      	beq.n	176c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1762:	6963      	ldr	r3, [r4, #20]
    1764:	0020      	movs	r0, r4
    1766:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1768:	6823      	ldr	r3, [r4, #0]
    176a:	739e      	strb	r6, [r3, #14]
	}
}
    176c:	bd70      	pop	{r4, r5, r6, pc}
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	2000018c 	.word	0x2000018c

00001774 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1774:	b510      	push	{r4, lr}
    1776:	2000      	movs	r0, #0
    1778:	4b01      	ldr	r3, [pc, #4]	; (1780 <TC1_Handler+0xc>)
    177a:	4798      	blx	r3
    177c:	bd10      	pop	{r4, pc}
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	00001719 	.word	0x00001719

00001784 <TC2_Handler>:
    1784:	b510      	push	{r4, lr}
    1786:	2001      	movs	r0, #1
    1788:	4b01      	ldr	r3, [pc, #4]	; (1790 <TC2_Handler+0xc>)
    178a:	4798      	blx	r3
    178c:	bd10      	pop	{r4, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	00001719 	.word	0x00001719

00001794 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1794:	4b06      	ldr	r3, [pc, #24]	; (17b0 <_tc_get_inst_index+0x1c>)
    1796:	4298      	cmp	r0, r3
    1798:	d007      	beq.n	17aa <_tc_get_inst_index+0x16>
    179a:	4a06      	ldr	r2, [pc, #24]	; (17b4 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    179c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    179e:	4290      	cmp	r0, r2
    17a0:	d101      	bne.n	17a6 <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    17a2:	3301      	adds	r3, #1
			return i;
    17a4:	b2db      	uxtb	r3, r3
}
    17a6:	0018      	movs	r0, r3
    17a8:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    17aa:	2300      	movs	r3, #0
    17ac:	e7fa      	b.n	17a4 <_tc_get_inst_index+0x10>
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	42001800 	.word	0x42001800
    17b4:	42001c00 	.word	0x42001c00

000017b8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    17b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    17ba:	4b87      	ldr	r3, [pc, #540]	; (19d8 <tc_init+0x220>)
{
    17bc:	0005      	movs	r5, r0
    17be:	b085      	sub	sp, #20
	uint8_t instance = _tc_get_inst_index(hw);
    17c0:	0008      	movs	r0, r1
{
    17c2:	0014      	movs	r4, r2
    17c4:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    17c6:	4798      	blx	r3

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    17c8:	466a      	mov	r2, sp
    17ca:	2312      	movs	r3, #18
    17cc:	7113      	strb	r3, [r2, #4]
    17ce:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    17d0:	332e      	adds	r3, #46	; 0x2e
    17d2:	8113      	strh	r3, [r2, #8]
    17d4:	3340      	adds	r3, #64	; 0x40
    17d6:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    17d8:	2300      	movs	r3, #0
    17da:	60ab      	str	r3, [r5, #8]
    17dc:	60eb      	str	r3, [r5, #12]
    17de:	612b      	str	r3, [r5, #16]
    17e0:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    17e2:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    17e4:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    17e6:	4b7d      	ldr	r3, [pc, #500]	; (19dc <tc_init+0x224>)
    17e8:	0082      	lsls	r2, r0, #2
    17ea:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    17ec:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    17ee:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    17f0:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    17f2:	2b08      	cmp	r3, #8
    17f4:	d103      	bne.n	17fe <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    17f6:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    17f8:	07fa      	lsls	r2, r7, #31
    17fa:	d500      	bpl.n	17fe <tc_init+0x46>
    17fc:	e0d5      	b.n	19aa <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    17fe:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    1800:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1802:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1804:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1806:	4213      	tst	r3, r2
    1808:	d000      	beq.n	180c <tc_init+0x54>
    180a:	e0ce      	b.n	19aa <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    180c:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    180e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1810:	06db      	lsls	r3, r3, #27
    1812:	d500      	bpl.n	1816 <tc_init+0x5e>
    1814:	e0c9      	b.n	19aa <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1816:	2102      	movs	r1, #2
    1818:	8833      	ldrh	r3, [r6, #0]
    181a:	400b      	ands	r3, r1
    181c:	d000      	beq.n	1820 <tc_init+0x68>
    181e:	e0c4      	b.n	19aa <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1820:	7c21      	ldrb	r1, [r4, #16]
    1822:	2900      	cmp	r1, #0
    1824:	d008      	beq.n	1838 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1826:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1828:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    182a:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    182c:	7d20      	ldrb	r0, [r4, #20]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    182e:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(
    1830:	4b6b      	ldr	r3, [pc, #428]	; (19e0 <tc_init+0x228>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1832:	708a      	strb	r2, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1834:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    1836:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1838:	7f23      	ldrb	r3, [r4, #28]
    183a:	2b00      	cmp	r3, #0
    183c:	d00e      	beq.n	185c <tc_init+0xa4>
	config->powersave    = false;
    183e:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1840:	2301      	movs	r3, #1
    1842:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1844:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1846:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1848:	708b      	strb	r3, [r1, #2]
    184a:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    184c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    184e:	331f      	adds	r3, #31
    1850:	18e3      	adds	r3, r4, r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1852:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    1854:	7818      	ldrb	r0, [r3, #0]
    1856:	4b62      	ldr	r3, [pc, #392]	; (19e0 <tc_init+0x228>)
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1858:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    185a:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    185c:	007a      	lsls	r2, r7, #1
    185e:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1860:	4668      	mov	r0, sp
    1862:	2208      	movs	r2, #8
    1864:	1880      	adds	r0, r0, r2
    1866:	4662      	mov	r2, ip
    1868:	4b5e      	ldr	r3, [pc, #376]	; (19e4 <tc_init+0x22c>)
    186a:	5a82      	ldrh	r2, [r0, r2]
    186c:	6a19      	ldr	r1, [r3, #32]
    186e:	430a      	orrs	r2, r1
    1870:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1872:	78a2      	ldrb	r2, [r4, #2]
    1874:	2a08      	cmp	r2, #8
    1876:	d10a      	bne.n	188e <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1878:	1c79      	adds	r1, r7, #1
    187a:	004a      	lsls	r2, r1, #1
    187c:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    187e:	2108      	movs	r1, #8
    1880:	466a      	mov	r2, sp
    1882:	1852      	adds	r2, r2, r1
    1884:	4661      	mov	r1, ip
    1886:	6a18      	ldr	r0, [r3, #32]
    1888:	5a52      	ldrh	r2, [r2, r1]
    188a:	4302      	orrs	r2, r0
    188c:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    188e:	466a      	mov	r2, sp
    1890:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1892:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    1894:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1896:	466b      	mov	r3, sp
    1898:	3304      	adds	r3, #4
    189a:	5ddf      	ldrb	r7, [r3, r7]
    189c:	4b52      	ldr	r3, [pc, #328]	; (19e8 <tc_init+0x230>)
    189e:	0038      	movs	r0, r7
    18a0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    18a2:	4b52      	ldr	r3, [pc, #328]	; (19ec <tc_init+0x234>)
    18a4:	0038      	movs	r0, r7
    18a6:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    18a8:	8923      	ldrh	r3, [r4, #8]
    18aa:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    18ac:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    18ae:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    18b0:	78a3      	ldrb	r3, [r4, #2]
    18b2:	430b      	orrs	r3, r1
	ctrla_tmp =
    18b4:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    18b6:	7862      	ldrb	r2, [r4, #1]
    18b8:	2a00      	cmp	r2, #0
    18ba:	d002      	beq.n	18c2 <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    18bc:	2280      	movs	r2, #128	; 0x80
    18be:	0112      	lsls	r2, r2, #4
    18c0:	4313      	orrs	r3, r2
    18c2:	6829      	ldr	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    18c4:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    18c6:	b252      	sxtb	r2, r2
    18c8:	2a00      	cmp	r2, #0
    18ca:	dbfb      	blt.n	18c4 <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    18cc:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    18ce:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    18d0:	1e5a      	subs	r2, r3, #1
    18d2:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    18d4:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    18d6:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    18d8:	2a00      	cmp	r2, #0
    18da:	d001      	beq.n	18e0 <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    18dc:	2201      	movs	r2, #1
    18de:	4313      	orrs	r3, r2
    18e0:	6829      	ldr	r1, [r5, #0]
    18e2:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    18e4:	b252      	sxtb	r2, r2
    18e6:	2a00      	cmp	r2, #0
    18e8:	dbfb      	blt.n	18e2 <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    18ea:	22ff      	movs	r2, #255	; 0xff
    18ec:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    18ee:	2b00      	cmp	r3, #0
    18f0:	d005      	beq.n	18fe <tc_init+0x146>
    18f2:	6829      	ldr	r1, [r5, #0]
    18f4:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    18f6:	b252      	sxtb	r2, r2
    18f8:	2a00      	cmp	r2, #0
    18fa:	dbfb      	blt.n	18f4 <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    18fc:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    18fe:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    1900:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1902:	2b00      	cmp	r3, #0
    1904:	d001      	beq.n	190a <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1906:	2310      	movs	r3, #16
    1908:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    190a:	7b23      	ldrb	r3, [r4, #12]
    190c:	2b00      	cmp	r3, #0
    190e:	d001      	beq.n	1914 <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1910:	2320      	movs	r3, #32
    1912:	431a      	orrs	r2, r3
    1914:	6829      	ldr	r1, [r5, #0]
    1916:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1918:	b25b      	sxtb	r3, r3
    191a:	2b00      	cmp	r3, #0
    191c:	dbfb      	blt.n	1916 <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    191e:	71b2      	strb	r2, [r6, #6]
    1920:	682b      	ldr	r3, [r5, #0]
    1922:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1924:	b252      	sxtb	r2, r2
    1926:	2a00      	cmp	r2, #0
    1928:	dbfb      	blt.n	1922 <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    192a:	792a      	ldrb	r2, [r5, #4]
    192c:	2a04      	cmp	r2, #4
    192e:	d019      	beq.n	1964 <tc_init+0x1ac>
    1930:	2a08      	cmp	r2, #8
    1932:	d03c      	beq.n	19ae <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1934:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1936:	2a00      	cmp	r2, #0
    1938:	d137      	bne.n	19aa <tc_init+0x1f2>
    193a:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    193c:	b252      	sxtb	r2, r2
    193e:	2a00      	cmp	r2, #0
    1940:	dbfb      	blt.n	193a <tc_init+0x182>
				= config->counter_16_bit.value;
    1942:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1944:	8233      	strh	r3, [r6, #16]
    1946:	682a      	ldr	r2, [r5, #0]
    1948:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    194a:	b25b      	sxtb	r3, r3
    194c:	2b00      	cmp	r3, #0
    194e:	dbfb      	blt.n	1948 <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    1950:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1952:	8333      	strh	r3, [r6, #24]
    1954:	682a      	ldr	r2, [r5, #0]
    1956:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1958:	b25b      	sxtb	r3, r3
    195a:	2b00      	cmp	r3, #0
    195c:	dbfb      	blt.n	1956 <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    195e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1960:	8373      	strh	r3, [r6, #26]
    1962:	e021      	b.n	19a8 <tc_init+0x1f0>
    1964:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1966:	b252      	sxtb	r2, r2
    1968:	2a00      	cmp	r2, #0
    196a:	dbfb      	blt.n	1964 <tc_init+0x1ac>
					config->counter_8_bit.value;
    196c:	0023      	movs	r3, r4
    196e:	3328      	adds	r3, #40	; 0x28
    1970:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    1972:	7433      	strb	r3, [r6, #16]
    1974:	682a      	ldr	r2, [r5, #0]
    1976:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1978:	b25b      	sxtb	r3, r3
    197a:	2b00      	cmp	r3, #0
    197c:	dbfb      	blt.n	1976 <tc_init+0x1be>
					config->counter_8_bit.period;
    197e:	0023      	movs	r3, r4
    1980:	3329      	adds	r3, #41	; 0x29
    1982:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    1984:	7533      	strb	r3, [r6, #20]
    1986:	682a      	ldr	r2, [r5, #0]
    1988:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    198a:	b25b      	sxtb	r3, r3
    198c:	2b00      	cmp	r3, #0
    198e:	dbfb      	blt.n	1988 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    1990:	0023      	movs	r3, r4
    1992:	332a      	adds	r3, #42	; 0x2a
    1994:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    1996:	7633      	strb	r3, [r6, #24]
    1998:	682a      	ldr	r2, [r5, #0]
    199a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    199c:	b25b      	sxtb	r3, r3
    199e:	2b00      	cmp	r3, #0
    19a0:	dbfb      	blt.n	199a <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    19a2:	342b      	adds	r4, #43	; 0x2b
    19a4:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    19a6:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    19a8:	2000      	movs	r0, #0
}
    19aa:	b005      	add	sp, #20
    19ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ae:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    19b0:	b252      	sxtb	r2, r2
    19b2:	2a00      	cmp	r2, #0
    19b4:	dbfb      	blt.n	19ae <tc_init+0x1f6>
				= config->counter_32_bit.value;
    19b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19b8:	6133      	str	r3, [r6, #16]
    19ba:	682a      	ldr	r2, [r5, #0]
    19bc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    19be:	b25b      	sxtb	r3, r3
    19c0:	2b00      	cmp	r3, #0
    19c2:	dbfb      	blt.n	19bc <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    19c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    19c6:	61b3      	str	r3, [r6, #24]
    19c8:	682a      	ldr	r2, [r5, #0]
    19ca:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    19cc:	b25b      	sxtb	r3, r3
    19ce:	2b00      	cmp	r3, #0
    19d0:	dbfb      	blt.n	19ca <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    19d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    19d4:	61f3      	str	r3, [r6, #28]
    19d6:	e7e7      	b.n	19a8 <tc_init+0x1f0>
    19d8:	00001795 	.word	0x00001795
    19dc:	2000018c 	.word	0x2000018c
    19e0:	00001235 	.word	0x00001235
    19e4:	40000400 	.word	0x40000400
    19e8:	00001161 	.word	0x00001161
    19ec:	000010d9 	.word	0x000010d9

000019f0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    19f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    19f2:	6804      	ldr	r4, [r0, #0]
    19f4:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    19f6:	b25b      	sxtb	r3, r3
    19f8:	2b00      	cmp	r3, #0
    19fa:	dbfb      	blt.n	19f4 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    19fc:	7903      	ldrb	r3, [r0, #4]
    19fe:	2b04      	cmp	r3, #4
    1a00:	d00c      	beq.n	1a1c <tc_set_compare_value+0x2c>
    1a02:	2b08      	cmp	r3, #8
    1a04:	d012      	beq.n	1a2c <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1a06:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d10e      	bne.n	1a2a <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    1a0c:	2017      	movs	r0, #23
			if (channel_index <
    1a0e:	2901      	cmp	r1, #1
    1a10:	d80b      	bhi.n	1a2a <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    1a12:	310c      	adds	r1, #12
						(uint16_t)compare;
    1a14:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1a16:	0049      	lsls	r1, r1, #1
    1a18:	530a      	strh	r2, [r1, r4]
    1a1a:	e005      	b.n	1a28 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    1a1c:	2017      	movs	r0, #23
			if (channel_index <
    1a1e:	2901      	cmp	r1, #1
    1a20:	d803      	bhi.n	1a2a <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    1a22:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1a24:	1861      	adds	r1, r4, r1
    1a26:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1a28:	2000      	movs	r0, #0
}
    1a2a:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1a2c:	2017      	movs	r0, #23
			if (channel_index <
    1a2e:	2901      	cmp	r1, #1
    1a30:	d8fb      	bhi.n	1a2a <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    1a32:	3106      	adds	r1, #6
    1a34:	0089      	lsls	r1, r1, #2
    1a36:	510a      	str	r2, [r1, r4]
    1a38:	e7f6      	b.n	1a28 <tc_set_compare_value+0x38>

00001a3a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1a3a:	e7fe      	b.n	1a3a <Dummy_Handler>

00001a3c <Reset_Handler>:
        if (pSrc != pDest) {
    1a3c:	4821      	ldr	r0, [pc, #132]	; (1ac4 <Reset_Handler+0x88>)
    1a3e:	4922      	ldr	r1, [pc, #136]	; (1ac8 <Reset_Handler+0x8c>)
{
    1a40:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1a42:	4288      	cmp	r0, r1
    1a44:	d004      	beq.n	1a50 <Reset_Handler+0x14>
    1a46:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1a48:	4c20      	ldr	r4, [pc, #128]	; (1acc <Reset_Handler+0x90>)
    1a4a:	18ca      	adds	r2, r1, r3
    1a4c:	42a2      	cmp	r2, r4
    1a4e:	d332      	bcc.n	1ab6 <Reset_Handler+0x7a>
                *pDest++ = 0;
    1a50:	2100      	movs	r1, #0
    1a52:	4b1f      	ldr	r3, [pc, #124]	; (1ad0 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1a54:	4a1f      	ldr	r2, [pc, #124]	; (1ad4 <Reset_Handler+0x98>)
    1a56:	4293      	cmp	r3, r2
    1a58:	d331      	bcc.n	1abe <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1a5a:	21ff      	movs	r1, #255	; 0xff
    1a5c:	4b1e      	ldr	r3, [pc, #120]	; (1ad8 <Reset_Handler+0x9c>)
    1a5e:	4a1f      	ldr	r2, [pc, #124]	; (1adc <Reset_Handler+0xa0>)
    1a60:	438b      	bics	r3, r1
    1a62:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1a64:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1a66:	250c      	movs	r5, #12
    1a68:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1a6a:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1a6c:	4b1c      	ldr	r3, [pc, #112]	; (1ae0 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1a6e:	481d      	ldr	r0, [pc, #116]	; (1ae4 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1a70:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1a72:	78c3      	ldrb	r3, [r0, #3]
    1a74:	39fc      	subs	r1, #252	; 0xfc
    1a76:	438b      	bics	r3, r1
    1a78:	4313      	orrs	r3, r2
    1a7a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1a7c:	78c3      	ldrb	r3, [r0, #3]
    1a7e:	43ab      	bics	r3, r5
    1a80:	4323      	orrs	r3, r4
    1a82:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1a84:	4b18      	ldr	r3, [pc, #96]	; (1ae8 <Reset_Handler+0xac>)
    1a86:	7b98      	ldrb	r0, [r3, #14]
    1a88:	43b0      	bics	r0, r6
    1a8a:	0006      	movs	r6, r0
    1a8c:	2020      	movs	r0, #32
    1a8e:	4330      	orrs	r0, r6
    1a90:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1a92:	7b98      	ldrb	r0, [r3, #14]
    1a94:	43a8      	bics	r0, r5
    1a96:	4304      	orrs	r4, r0
    1a98:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1a9a:	7b98      	ldrb	r0, [r3, #14]
    1a9c:	4388      	bics	r0, r1
    1a9e:	4302      	orrs	r2, r0
    1aa0:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1aa2:	2380      	movs	r3, #128	; 0x80
    1aa4:	4a11      	ldr	r2, [pc, #68]	; (1aec <Reset_Handler+0xb0>)
    1aa6:	6851      	ldr	r1, [r2, #4]
    1aa8:	430b      	orrs	r3, r1
    1aaa:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1aac:	4b10      	ldr	r3, [pc, #64]	; (1af0 <Reset_Handler+0xb4>)
    1aae:	4798      	blx	r3
        main();
    1ab0:	4b10      	ldr	r3, [pc, #64]	; (1af4 <Reset_Handler+0xb8>)
    1ab2:	4798      	blx	r3
    1ab4:	e7fe      	b.n	1ab4 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1ab6:	58c5      	ldr	r5, [r0, r3]
    1ab8:	3304      	adds	r3, #4
    1aba:	6015      	str	r5, [r2, #0]
    1abc:	e7c5      	b.n	1a4a <Reset_Handler+0xe>
                *pDest++ = 0;
    1abe:	c302      	stmia	r3!, {r1}
    1ac0:	e7c9      	b.n	1a56 <Reset_Handler+0x1a>
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	00003f88 	.word	0x00003f88
    1ac8:	20000000 	.word	0x20000000
    1acc:	20000028 	.word	0x20000028
    1ad0:	20000028 	.word	0x20000028
    1ad4:	200001f4 	.word	0x200001f4
    1ad8:	00000000 	.word	0x00000000
    1adc:	e000ed00 	.word	0xe000ed00
    1ae0:	410070fc 	.word	0x410070fc
    1ae4:	41005000 	.word	0x41005000
    1ae8:	41004800 	.word	0x41004800
    1aec:	41004000 	.word	0x41004000
    1af0:	00003e51 	.word	0x00003e51
    1af4:	00002441 	.word	0x00002441

00001af8 <set_color_green>:
static uint8_t buffer_reset_low_routine_flash_period[DATA_LENGTH_PRIMARY]		=	{0x05,0x00};
	
static uint8_t buffer_set_low_routine_trise_tfall[DATA_LENGTH_PRIMARY]		=	{0x02,0x2D};


void set_color_green(void){
    1af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	

	struct i2c_master_packet packet = {
    1afa:	ac01      	add	r4, sp, #4
    1afc:	4b08      	ldr	r3, [pc, #32]	; (1b20 <set_color_green+0x28>)
    1afe:	220c      	movs	r2, #12
    1b00:	2100      	movs	r1, #0
    1b02:	0020      	movs	r0, r4
    1b04:	4798      	blx	r3
    1b06:	2331      	movs	r3, #49	; 0x31
    1b08:	8023      	strh	r3, [r4, #0]
    1b0a:	3b2f      	subs	r3, #47	; 0x2f
    1b0c:	8063      	strh	r3, [r4, #2]
    1b0e:	4b05      	ldr	r3, [pc, #20]	; (1b24 <set_color_green+0x2c>)
    1b10:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_green,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1b12:	0021      	movs	r1, r4
    1b14:	4804      	ldr	r0, [pc, #16]	; (1b28 <set_color_green+0x30>)
    1b16:	4b05      	ldr	r3, [pc, #20]	; (1b2c <set_color_green+0x34>)
    1b18:	4798      	blx	r3
    1b1a:	2800      	cmp	r0, #0
    1b1c:	d1f9      	bne.n	1b12 <set_color_green+0x1a>
	{
	}
	
}
    1b1e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1b20:	00003e99 	.word	0x00003e99
    1b24:	20000009 	.word	0x20000009
    1b28:	20000194 	.word	0x20000194
    1b2c:	00000755 	.word	0x00000755

00001b30 <set_color_red>:

void set_color_red(void){
    1b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1b32:	ac01      	add	r4, sp, #4
    1b34:	4b08      	ldr	r3, [pc, #32]	; (1b58 <set_color_red+0x28>)
    1b36:	220c      	movs	r2, #12
    1b38:	2100      	movs	r1, #0
    1b3a:	0020      	movs	r0, r4
    1b3c:	4798      	blx	r3
    1b3e:	2331      	movs	r3, #49	; 0x31
    1b40:	8023      	strh	r3, [r4, #0]
    1b42:	3b2f      	subs	r3, #47	; 0x2f
    1b44:	8063      	strh	r3, [r4, #2]
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <set_color_red+0x2c>)
    1b48:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_red,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1b4a:	0021      	movs	r1, r4
    1b4c:	4804      	ldr	r0, [pc, #16]	; (1b60 <set_color_red+0x30>)
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <set_color_red+0x34>)
    1b50:	4798      	blx	r3
    1b52:	2800      	cmp	r0, #0
    1b54:	d1f9      	bne.n	1b4a <set_color_red+0x1a>
	{
	}
}
    1b56:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1b58:	00003e99 	.word	0x00003e99
    1b5c:	2000000f 	.word	0x2000000f
    1b60:	20000194 	.word	0x20000194
    1b64:	00000755 	.word	0x00000755

00001b68 <set_color_blue>:

void set_color_blue(void){
    1b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_master_packet packet = {
    1b6a:	ac01      	add	r4, sp, #4
    1b6c:	4b08      	ldr	r3, [pc, #32]	; (1b90 <set_color_blue+0x28>)
    1b6e:	220c      	movs	r2, #12
    1b70:	2100      	movs	r1, #0
    1b72:	0020      	movs	r0, r4
    1b74:	4798      	blx	r3
    1b76:	2331      	movs	r3, #49	; 0x31
    1b78:	8023      	strh	r3, [r4, #0]
    1b7a:	3b2f      	subs	r3, #47	; 0x2f
    1b7c:	8063      	strh	r3, [r4, #2]
    1b7e:	4b05      	ldr	r3, [pc, #20]	; (1b94 <set_color_blue+0x2c>)
    1b80:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_blue,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1b82:	0021      	movs	r1, r4
    1b84:	4804      	ldr	r0, [pc, #16]	; (1b98 <set_color_blue+0x30>)
    1b86:	4b05      	ldr	r3, [pc, #20]	; (1b9c <set_color_blue+0x34>)
    1b88:	4798      	blx	r3
    1b8a:	2800      	cmp	r0, #0
    1b8c:	d1f9      	bne.n	1b82 <set_color_blue+0x1a>
	{
	}
}
    1b8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1b90:	00003e99 	.word	0x00003e99
    1b94:	20000005 	.word	0x20000005
    1b98:	20000194 	.word	0x20000194
    1b9c:	00000755 	.word	0x00000755

00001ba0 <set_color_yellow>:

void set_color_yellow(void){
    1ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1ba2:	ac01      	add	r4, sp, #4
    1ba4:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <set_color_yellow+0x28>)
    1ba6:	220c      	movs	r2, #12
    1ba8:	2100      	movs	r1, #0
    1baa:	0020      	movs	r0, r4
    1bac:	4798      	blx	r3
    1bae:	2331      	movs	r3, #49	; 0x31
    1bb0:	8023      	strh	r3, [r4, #0]
    1bb2:	3b2f      	subs	r3, #47	; 0x2f
    1bb4:	8063      	strh	r3, [r4, #2]
    1bb6:	4b05      	ldr	r3, [pc, #20]	; (1bcc <set_color_yellow+0x2c>)
    1bb8:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_yellow,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1bba:	0021      	movs	r1, r4
    1bbc:	4804      	ldr	r0, [pc, #16]	; (1bd0 <set_color_yellow+0x30>)
    1bbe:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <set_color_yellow+0x34>)
    1bc0:	4798      	blx	r3
    1bc2:	2800      	cmp	r0, #0
    1bc4:	d1f9      	bne.n	1bba <set_color_yellow+0x1a>
	{
	}
}
    1bc6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1bc8:	00003e99 	.word	0x00003e99
    1bcc:	20000013 	.word	0x20000013
    1bd0:	20000194 	.word	0x20000194
    1bd4:	00000755 	.word	0x00000755

00001bd8 <set_color_purple>:

void set_color_purple(void){
    1bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1bda:	ac01      	add	r4, sp, #4
    1bdc:	4b08      	ldr	r3, [pc, #32]	; (1c00 <set_color_purple+0x28>)
    1bde:	220c      	movs	r2, #12
    1be0:	2100      	movs	r1, #0
    1be2:	0020      	movs	r0, r4
    1be4:	4798      	blx	r3
    1be6:	2331      	movs	r3, #49	; 0x31
    1be8:	8023      	strh	r3, [r4, #0]
    1bea:	3b2f      	subs	r3, #47	; 0x2f
    1bec:	8063      	strh	r3, [r4, #2]
    1bee:	4b05      	ldr	r3, [pc, #20]	; (1c04 <set_color_purple+0x2c>)
    1bf0:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_purple,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1bf2:	0021      	movs	r1, r4
    1bf4:	4804      	ldr	r0, [pc, #16]	; (1c08 <set_color_purple+0x30>)
    1bf6:	4b05      	ldr	r3, [pc, #20]	; (1c0c <set_color_purple+0x34>)
    1bf8:	4798      	blx	r3
    1bfa:	2800      	cmp	r0, #0
    1bfc:	d1f9      	bne.n	1bf2 <set_color_purple+0x1a>
	{
	}
}
    1bfe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1c00:	00003e99 	.word	0x00003e99
    1c04:	2000000d 	.word	0x2000000d
    1c08:	20000194 	.word	0x20000194
    1c0c:	00000755 	.word	0x00000755

00001c10 <set_color_cyan>:

void set_color_cyan(void){
    1c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1c12:	ac01      	add	r4, sp, #4
    1c14:	4b08      	ldr	r3, [pc, #32]	; (1c38 <set_color_cyan+0x28>)
    1c16:	220c      	movs	r2, #12
    1c18:	2100      	movs	r1, #0
    1c1a:	0020      	movs	r0, r4
    1c1c:	4798      	blx	r3
    1c1e:	2331      	movs	r3, #49	; 0x31
    1c20:	8023      	strh	r3, [r4, #0]
    1c22:	3b2f      	subs	r3, #47	; 0x2f
    1c24:	8063      	strh	r3, [r4, #2]
    1c26:	4b05      	ldr	r3, [pc, #20]	; (1c3c <set_color_cyan+0x2c>)
    1c28:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_cyan,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1c2a:	0021      	movs	r1, r4
    1c2c:	4804      	ldr	r0, [pc, #16]	; (1c40 <set_color_cyan+0x30>)
    1c2e:	4b05      	ldr	r3, [pc, #20]	; (1c44 <set_color_cyan+0x34>)
    1c30:	4798      	blx	r3
    1c32:	2800      	cmp	r0, #0
    1c34:	d1f9      	bne.n	1c2a <set_color_cyan+0x1a>
	{
	}
}
    1c36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1c38:	00003e99 	.word	0x00003e99
    1c3c:	20000007 	.word	0x20000007
    1c40:	20000194 	.word	0x20000194
    1c44:	00000755 	.word	0x00000755

00001c48 <set_color_white>:

void set_color_white(void){
    1c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct i2c_master_packet packet = {
    1c4a:	ac01      	add	r4, sp, #4
    1c4c:	4b08      	ldr	r3, [pc, #32]	; (1c70 <set_color_white+0x28>)
    1c4e:	220c      	movs	r2, #12
    1c50:	2100      	movs	r1, #0
    1c52:	0020      	movs	r0, r4
    1c54:	4798      	blx	r3
    1c56:	2331      	movs	r3, #49	; 0x31
    1c58:	8023      	strh	r3, [r4, #0]
    1c5a:	3b2f      	subs	r3, #47	; 0x2f
    1c5c:	8063      	strh	r3, [r4, #2]
    1c5e:	4b05      	ldr	r3, [pc, #20]	; (1c74 <set_color_white+0x2c>)
    1c60:	6063      	str	r3, [r4, #4]
		.address = KTD2026_DEVICE_ADDRESS,
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_white,
	};
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1c62:	0021      	movs	r1, r4
    1c64:	4804      	ldr	r0, [pc, #16]	; (1c78 <set_color_white+0x30>)
    1c66:	4b05      	ldr	r3, [pc, #20]	; (1c7c <set_color_white+0x34>)
    1c68:	4798      	blx	r3
    1c6a:	2800      	cmp	r0, #0
    1c6c:	d1f9      	bne.n	1c62 <set_color_white+0x1a>
	{
	}
}
    1c6e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1c70:	00003e99 	.word	0x00003e99
    1c74:	20000011 	.word	0x20000011
    1c78:	20000194 	.word	0x20000194
    1c7c:	00000755 	.word	0x00000755

00001c80 <set_battery_charge_routine>:
	{
	}
}


void set_battery_charge_routine(void){
    1c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c82:	b08b      	sub	sp, #44	; 0x2c

	// Enable PWM GREEN
	struct i2c_master_packet packet = {
    1c84:	ad01      	add	r5, sp, #4
    1c86:	4e19      	ldr	r6, [pc, #100]	; (1cec <set_battery_charge_routine+0x6c>)
    1c88:	220c      	movs	r2, #12
    1c8a:	2100      	movs	r1, #0
    1c8c:	0028      	movs	r0, r5
    1c8e:	47b0      	blx	r6
    1c90:	2302      	movs	r3, #2
    1c92:	2731      	movs	r7, #49	; 0x31
    1c94:	806b      	strh	r3, [r5, #2]
    1c96:	4b16      	ldr	r3, [pc, #88]	; (1cf0 <set_battery_charge_routine+0x70>)
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_color_green_PWM,
	};
	
	// Enable Ramp (flash)
	struct i2c_master_packet set_ramp = {
    1c98:	220c      	movs	r2, #12
    1c9a:	2100      	movs	r1, #0
    1c9c:	a804      	add	r0, sp, #16
	struct i2c_master_packet packet = {
    1c9e:	606b      	str	r3, [r5, #4]
    1ca0:	802f      	strh	r7, [r5, #0]
	struct i2c_master_packet set_ramp = {
    1ca2:	47b0      	blx	r6
    1ca4:	466b      	mov	r3, sp
    1ca6:	2202      	movs	r2, #2
		.data = buffer_set_charge_routine_flash_period,
	};
	

	// Enable Pulse
	struct i2c_master_packet set_trise_tfall = {
    1ca8:	ac07      	add	r4, sp, #28
	struct i2c_master_packet set_ramp = {
    1caa:	825a      	strh	r2, [r3, #18]
    1cac:	821f      	strh	r7, [r3, #16]
    1cae:	4b11      	ldr	r3, [pc, #68]	; (1cf4 <set_battery_charge_routine+0x74>)
	struct i2c_master_packet set_trise_tfall = {
    1cb0:	220c      	movs	r2, #12
    1cb2:	2100      	movs	r1, #0
    1cb4:	0020      	movs	r0, r4
	struct i2c_master_packet set_ramp = {
    1cb6:	9305      	str	r3, [sp, #20]
	struct i2c_master_packet set_trise_tfall = {
    1cb8:	47b0      	blx	r6
    1cba:	2302      	movs	r3, #2
    1cbc:	8063      	strh	r3, [r4, #2]
    1cbe:	4b0e      	ldr	r3, [pc, #56]	; (1cf8 <set_battery_charge_routine+0x78>)
    1cc0:	8027      	strh	r7, [r4, #0]
    1cc2:	6063      	str	r3, [r4, #4]
		.data_length = DATA_LENGTH_PRIMARY,
		.data = buffer_set_charge_routine_trise_tfall,
	};


	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) != STATUS_OK)
    1cc4:	4f0d      	ldr	r7, [pc, #52]	; (1cfc <set_battery_charge_routine+0x7c>)
    1cc6:	0029      	movs	r1, r5
    1cc8:	0038      	movs	r0, r7
    1cca:	4e0d      	ldr	r6, [pc, #52]	; (1d00 <set_battery_charge_routine+0x80>)
    1ccc:	47b0      	blx	r6
    1cce:	2800      	cmp	r0, #0
    1cd0:	d1f8      	bne.n	1cc4 <set_battery_charge_routine+0x44>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_ramp)) != STATUS_OK)
    1cd2:	a904      	add	r1, sp, #16
    1cd4:	0038      	movs	r0, r7
    1cd6:	47b0      	blx	r6
    1cd8:	2800      	cmp	r0, #0
    1cda:	d1fa      	bne.n	1cd2 <set_battery_charge_routine+0x52>
	{
	}
	
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &set_trise_tfall)) != STATUS_OK)
    1cdc:	0021      	movs	r1, r4
    1cde:	0038      	movs	r0, r7
    1ce0:	47b0      	blx	r6
    1ce2:	2800      	cmp	r0, #0
    1ce4:	d1fa      	bne.n	1cdc <set_battery_charge_routine+0x5c>
	{
	}
	
}
    1ce6:	b00b      	add	sp, #44	; 0x2c
    1ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	00003e99 	.word	0x00003e99
    1cf0:	2000000b 	.word	0x2000000b
    1cf4:	20000001 	.word	0x20000001
    1cf8:	20000003 	.word	0x20000003
    1cfc:	20000194 	.word	0x20000194
    1d00:	00000755 	.word	0x00000755

00001d04 <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1d04:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1d06:	2364      	movs	r3, #100	; 0x64
	
}



void i2c_master_setup(void){
    1d08:	b570      	push	{r4, r5, r6, lr}
    1d0a:	b08e      	sub	sp, #56	; 0x38
    1d0c:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1d0e:	0389      	lsls	r1, r1, #14
    1d10:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1d12:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1d14:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1d16:	4b1e      	ldr	r3, [pc, #120]	; (1d90 <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    1d18:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1d1a:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1d1c:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    1d1e:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1d20:	310a      	adds	r1, #10
    1d22:	4469      	add	r1, sp
    1d24:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1d26:	a90c      	add	r1, sp, #48	; 0x30
    1d28:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1d2a:	2131      	movs	r1, #49	; 0x31
    1d2c:	4469      	add	r1, sp
    1d2e:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    1d30:	2132      	movs	r1, #50	; 0x32
    1d32:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1d34:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    1d36:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1d38:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1d3a:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1d3c:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1d3e:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    1d40:	700b      	strb	r3, [r1, #0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1d42:	33d7      	adds	r3, #215	; 0xd7
    1d44:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1d46:	4e13      	ldr	r6, [pc, #76]	; (1d94 <i2c_master_setup+0x90>)
	config_i2c_master.buffer_timeout = 10000;
    1d48:	4b13      	ldr	r3, [pc, #76]	; (1d98 <i2c_master_setup+0x94>)
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1d4a:	4914      	ldr	r1, [pc, #80]	; (1d9c <i2c_master_setup+0x98>)
	config_i2c_master.buffer_timeout = 10000;
    1d4c:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1d4e:	0030      	movs	r0, r6
    1d50:	4b13      	ldr	r3, [pc, #76]	; (1da0 <i2c_master_setup+0x9c>)
    1d52:	4798      	blx	r3
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1d54:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1d56:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1d58:	69ec      	ldr	r4, [r5, #28]
    1d5a:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    1d5c:	d1fc      	bne.n	1d58 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1d5e:	2302      	movs	r3, #2
    1d60:	682a      	ldr	r2, [r5, #0]
    1d62:	4313      	orrs	r3, r2
    1d64:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d66:	6830      	ldr	r0, [r6, #0]
    1d68:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <i2c_master_setup+0xa0>)
    1d6a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1d6c:	231f      	movs	r3, #31
    1d6e:	4018      	ands	r0, r3
    1d70:	3b1e      	subs	r3, #30
    1d72:	4083      	lsls	r3, r0
    1d74:	4a0c      	ldr	r2, [pc, #48]	; (1da8 <i2c_master_setup+0xa4>)
    1d76:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1d78:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1d7a:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1d7c:	8b69      	ldrh	r1, [r5, #26]
    1d7e:	4211      	tst	r1, r2
    1d80:	d103      	bne.n	1d8a <i2c_master_setup+0x86>
		timeout_counter++;
    1d82:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1d84:	4284      	cmp	r4, r0
    1d86:	d3f9      	bcc.n	1d7c <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1d88:	836a      	strh	r2, [r5, #26]
	i2c_master_enable(&i2c_master_instance);
	
}
    1d8a:	b00e      	add	sp, #56	; 0x38
    1d8c:	bd70      	pop	{r4, r5, r6, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	00000d48 	.word	0x00000d48
    1d94:	20000194 	.word	0x20000194
    1d98:	00002710 	.word	0x00002710
    1d9c:	42001000 	.word	0x42001000
    1da0:	00000341 	.word	0x00000341
    1da4:	00000b25 	.word	0x00000b25
    1da8:	e000e100 	.word	0xe000e100

00001dac <sys_tc_callback>:
	static int tick_count_50ms;
	static int tick_count_100ms;
	static int tick_count_200ms;
	
	
	tick_count_1ms++;
    1dac:	4916      	ldr	r1, [pc, #88]	; (1e08 <sys_tc_callback+0x5c>)
    1dae:	680b      	ldr	r3, [r1, #0]
    1db0:	1c5a      	adds	r2, r3, #1
    1db2:	600a      	str	r2, [r1, #0]
    1db4:	4b15      	ldr	r3, [pc, #84]	; (1e0c <sys_tc_callback+0x60>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
    1db6:	2a09      	cmp	r2, #9
    1db8:	dd07      	ble.n	1dca <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
    1dba:	681a      	ldr	r2, [r3, #0]
    1dbc:	3201      	adds	r2, #1
    1dbe:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
    1dc0:	2200      	movs	r2, #0
    1dc2:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
    1dc4:	2101      	movs	r1, #1
    1dc6:	4a12      	ldr	r2, [pc, #72]	; (1e10 <sys_tc_callback+0x64>)
    1dc8:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
    1dca:	6819      	ldr	r1, [r3, #0]
    1dcc:	4a11      	ldr	r2, [pc, #68]	; (1e14 <sys_tc_callback+0x68>)
    1dce:	2904      	cmp	r1, #4
    1dd0:	dd04      	ble.n	1ddc <sys_tc_callback+0x30>
	{
		tick_count_50ms++;
    1dd2:	6811      	ldr	r1, [r2, #0]
    1dd4:	3101      	adds	r1, #1
    1dd6:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
    1dd8:	2100      	movs	r1, #0
    1dda:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
    1ddc:	6811      	ldr	r1, [r2, #0]
    1dde:	4b0e      	ldr	r3, [pc, #56]	; (1e18 <sys_tc_callback+0x6c>)
    1de0:	2901      	cmp	r1, #1
    1de2:	dd04      	ble.n	1dee <sys_tc_callback+0x42>
	{
		tick_count_100ms++;
    1de4:	6819      	ldr	r1, [r3, #0]
    1de6:	3101      	adds	r1, #1
    1de8:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
    1dea:	2100      	movs	r1, #0
    1dec:	6011      	str	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
    1dee:	681a      	ldr	r2, [r3, #0]
    1df0:	2a01      	cmp	r2, #1
    1df2:	dd08      	ble.n	1e06 <sys_tc_callback+0x5a>
	{
		tick_count_200ms++;
    1df4:	4909      	ldr	r1, [pc, #36]	; (1e1c <sys_tc_callback+0x70>)
    1df6:	680a      	ldr	r2, [r1, #0]
    1df8:	3201      	adds	r2, #1
    1dfa:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
    1dfc:	2200      	movs	r2, #0
    1dfe:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
    1e00:	4b07      	ldr	r3, [pc, #28]	; (1e20 <sys_tc_callback+0x74>)
    1e02:	3201      	adds	r2, #1
    1e04:	701a      	strb	r2, [r3, #0]
	}
	
	
	
	
}
    1e06:	4770      	bx	lr
    1e08:	2000008c 	.word	0x2000008c
    1e0c:	20000088 	.word	0x20000088
    1e10:	2000007a 	.word	0x2000007a
    1e14:	20000094 	.word	0x20000094
    1e18:	20000084 	.word	0x20000084
    1e1c:	20000090 	.word	0x20000090
    1e20:	2000007b 	.word	0x2000007b

00001e24 <configure_port_pins>:
{
    1e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1e26:	2602      	movs	r6, #2
	config->direction  = PORT_PIN_DIR_INPUT;
    1e28:	2700      	movs	r7, #0
    1e2a:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1e2c:	4d12      	ldr	r5, [pc, #72]	; (1e78 <configure_port_pins+0x54>)
    1e2e:	0021      	movs	r1, r4
    1e30:	201b      	movs	r0, #27
    1e32:	7027      	strb	r7, [r4, #0]
	config->powersave  = false;
    1e34:	70a7      	strb	r7, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1e36:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1e38:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1e3a:	2301      	movs	r3, #1
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1e3c:	0021      	movs	r1, r4
    1e3e:	2006      	movs	r0, #6
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1e40:	7023      	strb	r3, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;						// START AT PULL DOWN.
    1e42:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1e44:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1e46:	2301      	movs	r3, #1
    1e48:	7023      	strb	r3, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL UP.
    1e4a:	2301      	movs	r3, #1
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
    1e4c:	0021      	movs	r1, r4
    1e4e:	2007      	movs	r0, #7
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL UP.
    1e50:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
    1e52:	47a8      	blx	r5
	port_pin_set_config(BUTTON_2, &config_port_pin);
    1e54:	0021      	movs	r1, r4
    1e56:	200f      	movs	r0, #15
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1e58:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1e5a:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
    1e5c:	47a8      	blx	r5
	port_pin_set_config(CHARGN_ON_PIN, &config_port_pin);
    1e5e:	0021      	movs	r1, r4
    1e60:	200b      	movs	r0, #11
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1e62:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1e64:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CHARGN_ON_PIN, &config_port_pin);
    1e66:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1e68:	2301      	movs	r3, #1
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
    1e6a:	0021      	movs	r1, r4
    1e6c:	2003      	movs	r0, #3
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
    1e6e:	7066      	strb	r6, [r4, #1]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1e70:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
    1e72:	47a8      	blx	r5
}
    1e74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	00000315 	.word	0x00000315

00001e7c <configure_system_tc>:
{
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);
	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1e7c:	21a0      	movs	r1, #160	; 0xa0
{
    1e7e:	b510      	push	{r4, lr}
    1e80:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1e82:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1e84:	00c9      	lsls	r1, r1, #3
    1e86:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
    1e88:	212d      	movs	r1, #45	; 0x2d
    1e8a:	2300      	movs	r3, #0
    1e8c:	206f      	movs	r0, #111	; 0x6f
    1e8e:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    1e90:	8513      	strh	r3, [r2, #40]	; 0x28
    1e92:	7008      	strb	r0, [r1, #0]
	
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1e94:	2101      	movs	r1, #1
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
	
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1e96:	4c12      	ldr	r4, [pc, #72]	; (1ee0 <configure_system_tc+0x64>)
	config->clock_source               = GCLK_GENERATOR_0;
    1e98:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1e9a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1e9c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1e9e:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1ea0:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1ea2:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1ea4:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1ea6:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1ea8:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1eaa:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1eac:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1eae:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1eb0:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1eb2:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1eb4:	7411      	strb	r1, [r2, #16]
	config_tc.counter_size = TC_COUNTER_SIZE;
    1eb6:	3304      	adds	r3, #4
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
    1eb8:	310f      	adds	r1, #15
	config_tc.counter_size = TC_COUNTER_SIZE;
    1eba:	7093      	strb	r3, [r2, #2]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
    1ebc:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA16E_TC1_WO0; // PA15 FOR TESTING ; OG PA16 (LED)
    1ebe:	6193      	str	r3, [r2, #24]
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1ec0:	4908      	ldr	r1, [pc, #32]	; (1ee4 <configure_system_tc+0x68>)
    1ec2:	4b09      	ldr	r3, [pc, #36]	; (1ee8 <configure_system_tc+0x6c>)
    1ec4:	0020      	movs	r0, r4
    1ec6:	4798      	blx	r3
    1ec8:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1eca:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1ecc:	b252      	sxtb	r2, r2
    1ece:	2a00      	cmp	r2, #0
    1ed0:	dbfb      	blt.n	1eca <configure_system_tc+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1ed2:	2202      	movs	r2, #2
    1ed4:	8819      	ldrh	r1, [r3, #0]
    1ed6:	430a      	orrs	r2, r1
    1ed8:	801a      	strh	r2, [r3, #0]
	tc_enable (&system_timer_instance);
}
    1eda:	b00e      	add	sp, #56	; 0x38
    1edc:	bd10      	pop	{r4, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	200001bc 	.word	0x200001bc
    1ee4:	42001800 	.word	0x42001800
    1ee8:	000017b9 	.word	0x000017b9

00001eec <system_tc_callbacks>:

void system_tc_callbacks (void)
{
    1eec:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
    1eee:	4c0c      	ldr	r4, [pc, #48]	; (1f20 <system_tc_callbacks+0x34>)
    1ef0:	2200      	movs	r2, #0
    1ef2:	490c      	ldr	r1, [pc, #48]	; (1f24 <system_tc_callbacks+0x38>)
    1ef4:	0020      	movs	r0, r4
    1ef6:	4b0c      	ldr	r3, [pc, #48]	; (1f28 <system_tc_callbacks+0x3c>)
    1ef8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1efa:	6820      	ldr	r0, [r4, #0]
    1efc:	4b0b      	ldr	r3, [pc, #44]	; (1f2c <system_tc_callbacks+0x40>)
    1efe:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1f00:	4b0b      	ldr	r3, [pc, #44]	; (1f30 <system_tc_callbacks+0x44>)
    1f02:	5c1a      	ldrb	r2, [r3, r0]
    1f04:	231f      	movs	r3, #31
    1f06:	401a      	ands	r2, r3
    1f08:	3b1e      	subs	r3, #30
    1f0a:	0019      	movs	r1, r3
    1f0c:	4091      	lsls	r1, r2
    1f0e:	4a09      	ldr	r2, [pc, #36]	; (1f34 <system_tc_callbacks+0x48>)
    1f10:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1f12:	7e62      	ldrb	r2, [r4, #25]
    1f14:	431a      	orrs	r2, r3
    1f16:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1f18:	6822      	ldr	r2, [r4, #0]
    1f1a:	7353      	strb	r3, [r2, #13]
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback (&system_timer_instance, TC_CALLBACK_OVERFLOW);
}
    1f1c:	bd10      	pop	{r4, pc}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	200001bc 	.word	0x200001bc
    1f24:	00001dad 	.word	0x00001dad
    1f28:	000016f1 	.word	0x000016f1
    1f2c:	00001795 	.word	0x00001795
    1f30:	00003ee4 	.word	0x00003ee4
    1f34:	e000e100 	.word	0xe000e100

00001f38 <is_button_one_pressed>:
	return (port_base->IN.reg & pin_mask);
    1f38:	4b12      	ldr	r3, [pc, #72]	; (1f84 <is_button_one_pressed+0x4c>)
    1f3a:	4a13      	ldr	r2, [pc, #76]	; (1f88 <is_button_one_pressed+0x50>)
    1f3c:	6a19      	ldr	r1, [r3, #32]
    1f3e:	4b13      	ldr	r3, [pc, #76]	; (1f8c <is_button_one_pressed+0x54>)


bool is_button_one_pressed (void)
{

	if (!port_pin_get_input_level (BUTTON_1))
    1f40:	0449      	lsls	r1, r1, #17
    1f42:	d416      	bmi.n	1f72 <is_button_one_pressed+0x3a>
	{
		BUTTON_ONE_PRESS_STATUS = true;
		press_B1_delay_count--;
    1f44:	6819      	ldr	r1, [r3, #0]
    1f46:	3901      	subs	r1, #1
    1f48:	6019      	str	r1, [r3, #0]
		long_press_B1_delay_count--;
    1f4a:	6811      	ldr	r1, [r2, #0]
    1f4c:	3901      	subs	r1, #1
		
	}else
	{
		BUTTON_ONE_PRESS_STATUS = false;
		press_B1_delay_count = DELAY_DEBOUNCE_CN;
		long_press_B1_delay_count = DELAY_PRESS_CN;
    1f4e:	6011      	str	r1, [r2, #0]
		
	}
	
	// long press delay logic
	if (long_press_B1_delay_count <= 0){
    1f50:	6811      	ldr	r1, [r2, #0]
    1f52:	2900      	cmp	r1, #0
    1f54:	dc04      	bgt.n	1f60 <is_button_one_pressed+0x28>
		LongPressB1Flag = true;
    1f56:	2001      	movs	r0, #1
    1f58:	490d      	ldr	r1, [pc, #52]	; (1f90 <is_button_one_pressed+0x58>)
    1f5a:	7008      	strb	r0, [r1, #0]
		long_press_B1_delay_count = 0 ;
    1f5c:	2100      	movs	r1, #0
    1f5e:	6011      	str	r1, [r2, #0]
    1f60:	2000      	movs	r0, #0
	}
	
	// debounce logic
	if (press_B1_delay_count <= 0)
    1f62:	6819      	ldr	r1, [r3, #0]
    1f64:	4a0b      	ldr	r2, [pc, #44]	; (1f94 <is_button_one_pressed+0x5c>)
    1f66:	4281      	cmp	r1, r0
    1f68:	dc08      	bgt.n	1f7c <is_button_one_pressed+0x44>
	{
		BUTTON_ONE_RELEASE_STATUS = false;
    1f6a:	7010      	strb	r0, [r2, #0]
		press_B1_delay_count = 0;
    1f6c:	6018      	str	r0, [r3, #0]
		return true;
    1f6e:	3001      	adds	r0, #1
	else
	{
		BUTTON_ONE_RELEASE_STATUS = true;
		return false;
	}
}
    1f70:	4770      	bx	lr
		press_B1_delay_count = DELAY_DEBOUNCE_CN;
    1f72:	2102      	movs	r1, #2
    1f74:	6019      	str	r1, [r3, #0]
		long_press_B1_delay_count = DELAY_PRESS_CN;
    1f76:	318f      	adds	r1, #143	; 0x8f
    1f78:	31ff      	adds	r1, #255	; 0xff
    1f7a:	e7e8      	b.n	1f4e <is_button_one_pressed+0x16>
		BUTTON_ONE_RELEASE_STATUS = true;
    1f7c:	2301      	movs	r3, #1
    1f7e:	7013      	strb	r3, [r2, #0]
		return false;
    1f80:	e7f6      	b.n	1f70 <is_button_one_pressed+0x38>
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	41004400 	.word	0x41004400
    1f88:	20000018 	.word	0x20000018
    1f8c:	20000020 	.word	0x20000020
    1f90:	20000075 	.word	0x20000075
    1f94:	20000072 	.word	0x20000072

00001f98 <is_button_two_pressed>:
    1f98:	4b12      	ldr	r3, [pc, #72]	; (1fe4 <is_button_two_pressed+0x4c>)
    1f9a:	4a13      	ldr	r2, [pc, #76]	; (1fe8 <is_button_two_pressed+0x50>)
    1f9c:	6a19      	ldr	r1, [r3, #32]
    1f9e:	4b13      	ldr	r3, [pc, #76]	; (1fec <is_button_two_pressed+0x54>)


bool is_button_two_pressed (void)
{

	if (!port_pin_get_input_level (BUTTON_2))
    1fa0:	0409      	lsls	r1, r1, #16
    1fa2:	d416      	bmi.n	1fd2 <is_button_two_pressed+0x3a>
	{
		BUTTON_TWO_PRESS_STATUS = true;
		press_B2_delay_count--;
    1fa4:	6819      	ldr	r1, [r3, #0]
    1fa6:	3901      	subs	r1, #1
    1fa8:	6019      	str	r1, [r3, #0]
		long_press_B2_delay_count--;
    1faa:	6811      	ldr	r1, [r2, #0]
    1fac:	3901      	subs	r1, #1
		
	}else
	{
		BUTTON_TWO_PRESS_STATUS = false;
		press_B2_delay_count = DELAY_DEBOUNCE_CN;
		long_press_B2_delay_count = DELAY_PRESS_CN;
    1fae:	6011      	str	r1, [r2, #0]
		
	}
	
	// long press delay logic
	if (long_press_B2_delay_count <= 0){
    1fb0:	6811      	ldr	r1, [r2, #0]
    1fb2:	2900      	cmp	r1, #0
    1fb4:	dc04      	bgt.n	1fc0 <is_button_two_pressed+0x28>
		LongPressB2Flag = true;
    1fb6:	2001      	movs	r0, #1
    1fb8:	490d      	ldr	r1, [pc, #52]	; (1ff0 <is_button_two_pressed+0x58>)
    1fba:	7008      	strb	r0, [r1, #0]
		long_press_B2_delay_count = 0 ;
    1fbc:	2100      	movs	r1, #0
    1fbe:	6011      	str	r1, [r2, #0]
    1fc0:	2000      	movs	r0, #0
	}
	
	// debounce logic
	if (press_B2_delay_count <= 0)
    1fc2:	6819      	ldr	r1, [r3, #0]
    1fc4:	4a0b      	ldr	r2, [pc, #44]	; (1ff4 <is_button_two_pressed+0x5c>)
    1fc6:	4281      	cmp	r1, r0
    1fc8:	dc08      	bgt.n	1fdc <is_button_two_pressed+0x44>
	{
		BUTTON_TWO_RELEASE_STATUS = false;
    1fca:	7010      	strb	r0, [r2, #0]
		press_B2_delay_count = 0;
    1fcc:	6018      	str	r0, [r3, #0]
		return true;
    1fce:	3001      	adds	r0, #1
	else
	{
		BUTTON_TWO_RELEASE_STATUS = true;
		return false;
	}
}
    1fd0:	4770      	bx	lr
		press_B2_delay_count = DELAY_DEBOUNCE_CN;
    1fd2:	2102      	movs	r1, #2
    1fd4:	6019      	str	r1, [r3, #0]
		long_press_B2_delay_count = DELAY_PRESS_CN;
    1fd6:	318f      	adds	r1, #143	; 0x8f
    1fd8:	31ff      	adds	r1, #255	; 0xff
    1fda:	e7e8      	b.n	1fae <is_button_two_pressed+0x16>
		BUTTON_TWO_RELEASE_STATUS = true;
    1fdc:	2301      	movs	r3, #1
    1fde:	7013      	strb	r3, [r2, #0]
		return false;
    1fe0:	e7f6      	b.n	1fd0 <is_button_two_pressed+0x38>
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	41004400 	.word	0x41004400
    1fe8:	2000001c 	.word	0x2000001c
    1fec:	20000024 	.word	0x20000024
    1ff0:	20000076 	.word	0x20000076
    1ff4:	20000073 	.word	0x20000073

00001ff8 <pwm_motor_cleanup>:


void pwm_motor_cleanup(void){
    1ff8:	b570      	push	{r4, r5, r6, lr}
	PULSATING_MOTOR_ROUTINE = false;
    1ffa:	2400      	movs	r4, #0
    1ffc:	4b0d      	ldr	r3, [pc, #52]	; (2034 <pwm_motor_cleanup+0x3c>)
	motor_toggle_count = 0;
	tc_set_compare_value (&pwm_generator_instance,
    1ffe:	4d0e      	ldr	r5, [pc, #56]	; (2038 <pwm_motor_cleanup+0x40>)
	PULSATING_MOTOR_ROUTINE = false;
    2000:	701c      	strb	r4, [r3, #0]
	motor_toggle_count = 0;
    2002:	4b0e      	ldr	r3, [pc, #56]	; (203c <pwm_motor_cleanup+0x44>)
	tc_set_compare_value (&pwm_generator_instance,
    2004:	2215      	movs	r2, #21
	motor_toggle_count = 0;
    2006:	701c      	strb	r4, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,
    2008:	0021      	movs	r1, r4
    200a:	4b0d      	ldr	r3, [pc, #52]	; (2040 <pwm_motor_cleanup+0x48>)
    200c:	0028      	movs	r0, r5
    200e:	4798      	blx	r3
	TC_COMPARE_CAPTURE_CHANNEL_0,
	INITIAL_DUTY_CYCLE);
	PWM_RUNNING = false;
    2010:	4b0c      	ldr	r3, [pc, #48]	; (2044 <pwm_motor_cleanup+0x4c>)
    2012:	701c      	strb	r4, [r3, #0]
    2014:	682b      	ldr	r3, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2016:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2018:	b252      	sxtb	r2, r2
    201a:	2a00      	cmp	r2, #0
    201c:	dbfb      	blt.n	2016 <pwm_motor_cleanup+0x1e>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    201e:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    2020:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    2022:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    2024:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    2026:	881a      	ldrh	r2, [r3, #0]
    2028:	438a      	bics	r2, r1
    202a:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    202c:	2240      	movs	r2, #64	; 0x40
    202e:	4b06      	ldr	r3, [pc, #24]	; (2048 <pwm_motor_cleanup+0x50>)
    2030:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
    2032:	bd70      	pop	{r4, r5, r6, pc}
    2034:	20000078 	.word	0x20000078
    2038:	200001d8 	.word	0x200001d8
    203c:	2000007f 	.word	0x2000007f
    2040:	000019f1 	.word	0x000019f1
    2044:	20000079 	.word	0x20000079
    2048:	41004400 	.word	0x41004400

0000204c <cycle_pwm_led>:


void cycle_pwm_led(void) {
    204c:	b510      	push	{r4, lr}
	switch (pwm_led_toggle_count) {
    204e:	4b15      	ldr	r3, [pc, #84]	; (20a4 <cycle_pwm_led+0x58>)
    2050:	7818      	ldrb	r0, [r3, #0]
    2052:	3801      	subs	r0, #1
    2054:	2806      	cmp	r0, #6
    2056:	d822      	bhi.n	209e <cycle_pwm_led+0x52>
    2058:	f000 fa00 	bl	245c <__gnu_thumb1_case_uqi>
    205c:	110d0904 	.word	0x110d0904
    2060:	1915      	.short	0x1915
    2062:	1d          	.byte	0x1d
    2063:	00          	.byte	0x00
		case 1:
		set_pwm_red();
    2064:	4b10      	ldr	r3, [pc, #64]	; (20a8 <cycle_pwm_led+0x5c>)
    2066:	4798      	blx	r3
		set_color_red();
    2068:	4b10      	ldr	r3, [pc, #64]	; (20ac <cycle_pwm_led+0x60>)
		set_pwm_cyan();
		set_color_cyan();
		break;
		case 7:
		set_pwm_white();
		set_color_white();
    206a:	4798      	blx	r3
		break;
		default:
		pwm_led_toggle_count = 0; // Reset to 1 for red
		break;
	}
}
    206c:	bd10      	pop	{r4, pc}
		set_pwm_green();
    206e:	4b10      	ldr	r3, [pc, #64]	; (20b0 <cycle_pwm_led+0x64>)
    2070:	4798      	blx	r3
		set_color_green();
    2072:	4b10      	ldr	r3, [pc, #64]	; (20b4 <cycle_pwm_led+0x68>)
    2074:	e7f9      	b.n	206a <cycle_pwm_led+0x1e>
		set_pwm_blue();
    2076:	4b10      	ldr	r3, [pc, #64]	; (20b8 <cycle_pwm_led+0x6c>)
    2078:	4798      	blx	r3
		set_color_blue();
    207a:	4b10      	ldr	r3, [pc, #64]	; (20bc <cycle_pwm_led+0x70>)
    207c:	e7f5      	b.n	206a <cycle_pwm_led+0x1e>
		set_pwm_yellow();
    207e:	4b10      	ldr	r3, [pc, #64]	; (20c0 <cycle_pwm_led+0x74>)
    2080:	4798      	blx	r3
		set_color_yellow();
    2082:	4b10      	ldr	r3, [pc, #64]	; (20c4 <cycle_pwm_led+0x78>)
    2084:	e7f1      	b.n	206a <cycle_pwm_led+0x1e>
		set_pwm_purple();
    2086:	4b10      	ldr	r3, [pc, #64]	; (20c8 <cycle_pwm_led+0x7c>)
    2088:	4798      	blx	r3
		set_color_purple();
    208a:	4b10      	ldr	r3, [pc, #64]	; (20cc <cycle_pwm_led+0x80>)
    208c:	e7ed      	b.n	206a <cycle_pwm_led+0x1e>
		set_pwm_cyan();
    208e:	4b10      	ldr	r3, [pc, #64]	; (20d0 <cycle_pwm_led+0x84>)
    2090:	4798      	blx	r3
		set_color_cyan();
    2092:	4b10      	ldr	r3, [pc, #64]	; (20d4 <cycle_pwm_led+0x88>)
    2094:	e7e9      	b.n	206a <cycle_pwm_led+0x1e>
		set_pwm_white();
    2096:	4b10      	ldr	r3, [pc, #64]	; (20d8 <cycle_pwm_led+0x8c>)
    2098:	4798      	blx	r3
		set_color_white();
    209a:	4b10      	ldr	r3, [pc, #64]	; (20dc <cycle_pwm_led+0x90>)
    209c:	e7e5      	b.n	206a <cycle_pwm_led+0x1e>
		pwm_led_toggle_count = 0; // Reset to 1 for red
    209e:	2200      	movs	r2, #0
    20a0:	701a      	strb	r2, [r3, #0]
}
    20a2:	e7e3      	b.n	206c <cycle_pwm_led+0x20>
    20a4:	20000080 	.word	0x20000080
    20a8:	0000020d 	.word	0x0000020d
    20ac:	00001b31 	.word	0x00001b31
    20b0:	0000021d 	.word	0x0000021d
    20b4:	00001af9 	.word	0x00001af9
    20b8:	0000022d 	.word	0x0000022d
    20bc:	00001b69 	.word	0x00001b69
    20c0:	0000024d 	.word	0x0000024d
    20c4:	00001ba1 	.word	0x00001ba1
    20c8:	0000025d 	.word	0x0000025d
    20cc:	00001bd9 	.word	0x00001bd9
    20d0:	0000026d 	.word	0x0000026d
    20d4:	00001c11 	.word	0x00001c11
    20d8:	0000023d 	.word	0x0000023d
    20dc:	00001c49 	.word	0x00001c49

000020e0 <cycle_pwm_motor>:


void cycle_pwm_motor (void)
{
    20e0:	b510      	push	{r4, lr}
	{
		if (PWM_RUNNING)
    20e2:	4b15      	ldr	r3, [pc, #84]	; (2138 <cycle_pwm_motor+0x58>)
    20e4:	781b      	ldrb	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d00a      	beq.n	2100 <cycle_pwm_motor+0x20>
		{
			
			if (motor_toggle_count == 2)
    20ea:	4b14      	ldr	r3, [pc, #80]	; (213c <cycle_pwm_motor+0x5c>)
    20ec:	781b      	ldrb	r3, [r3, #0]
    20ee:	2b02      	cmp	r3, #2
    20f0:	d107      	bne.n	2102 <cycle_pwm_motor+0x22>
			{
				tc_set_compare_value (&pwm_generator_instance,
    20f2:	4b13      	ldr	r3, [pc, #76]	; (2140 <cycle_pwm_motor+0x60>)
    20f4:	2222      	movs	r2, #34	; 0x22
    20f6:	2100      	movs	r1, #0
    20f8:	4812      	ldr	r0, [pc, #72]	; (2144 <cycle_pwm_motor+0x64>)
    20fa:	4798      	blx	r3
				TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
				set_color_red();
    20fc:	4b12      	ldr	r3, [pc, #72]	; (2148 <cycle_pwm_motor+0x68>)
			else if (motor_toggle_count == 3)
			{
				tc_set_compare_value (&pwm_generator_instance,
				TC_COMPARE_CAPTURE_CHANNEL_0,
				SECOND_DUTY_CYCLE);
				set_color_cyan();
    20fe:	4798      	blx	r3
				pwm_motor_cleanup();
			}
		}
	}

}
    2100:	bd10      	pop	{r4, pc}
			else if (motor_toggle_count == 3)
    2102:	2b03      	cmp	r3, #3
    2104:	d106      	bne.n	2114 <cycle_pwm_motor+0x34>
				tc_set_compare_value (&pwm_generator_instance,
    2106:	4b0e      	ldr	r3, [pc, #56]	; (2140 <cycle_pwm_motor+0x60>)
    2108:	224d      	movs	r2, #77	; 0x4d
    210a:	2100      	movs	r1, #0
    210c:	480d      	ldr	r0, [pc, #52]	; (2144 <cycle_pwm_motor+0x64>)
    210e:	4798      	blx	r3
				set_color_cyan();
    2110:	4b0e      	ldr	r3, [pc, #56]	; (214c <cycle_pwm_motor+0x6c>)
    2112:	e7f4      	b.n	20fe <cycle_pwm_motor+0x1e>
			else if (motor_toggle_count == 4)
    2114:	2b04      	cmp	r3, #4
    2116:	d10a      	bne.n	212e <cycle_pwm_motor+0x4e>
				set_color_purple();
    2118:	4b0d      	ldr	r3, [pc, #52]	; (2150 <cycle_pwm_motor+0x70>)
    211a:	4798      	blx	r3
				PULSATING_MOTOR_ROUTINE = true;
    211c:	2201      	movs	r2, #1
    211e:	4b0d      	ldr	r3, [pc, #52]	; (2154 <cycle_pwm_motor+0x74>)
				tc_set_compare_value (&pwm_generator_instance,
    2120:	2100      	movs	r1, #0
				PULSATING_MOTOR_ROUTINE = true;
    2122:	701a      	strb	r2, [r3, #0]
				tc_set_compare_value (&pwm_generator_instance,
    2124:	4807      	ldr	r0, [pc, #28]	; (2144 <cycle_pwm_motor+0x64>)
    2126:	324c      	adds	r2, #76	; 0x4c
    2128:	4b05      	ldr	r3, [pc, #20]	; (2140 <cycle_pwm_motor+0x60>)
    212a:	4798      	blx	r3
    212c:	e7e8      	b.n	2100 <cycle_pwm_motor+0x20>
			else if (motor_toggle_count > 4)
    212e:	2b04      	cmp	r3, #4
    2130:	d9e6      	bls.n	2100 <cycle_pwm_motor+0x20>
				pwm_motor_cleanup();
    2132:	4b09      	ldr	r3, [pc, #36]	; (2158 <cycle_pwm_motor+0x78>)
    2134:	4798      	blx	r3
}
    2136:	e7e3      	b.n	2100 <cycle_pwm_motor+0x20>
    2138:	20000079 	.word	0x20000079
    213c:	2000007f 	.word	0x2000007f
    2140:	000019f1 	.word	0x000019f1
    2144:	200001d8 	.word	0x200001d8
    2148:	00001b31 	.word	0x00001b31
    214c:	00001c11 	.word	0x00001c11
    2150:	00001bd9 	.word	0x00001bd9
    2154:	20000078 	.word	0x20000078
    2158:	00001ff9 	.word	0x00001ff9

0000215c <regular_routine>:


void regular_routine(void) {
    215c:	b510      	push	{r4, lr}
	static bool motor_status_changed = false;
	static bool led_button_status_changed = false;

	//-------------------------------------------------------------

	if (is_button_one_pressed()) {
    215e:	4b2b      	ldr	r3, [pc, #172]	; (220c <regular_routine+0xb0>)
    2160:	4798      	blx	r3
    2162:	2800      	cmp	r0, #0
    2164:	d026      	beq.n	21b4 <regular_routine+0x58>
		if (LongPressB1Flag) {
    2166:	4b2a      	ldr	r3, [pc, #168]	; (2210 <regular_routine+0xb4>)
    2168:	781b      	ldrb	r3, [r3, #0]
    216a:	2b00      	cmp	r3, #0
    216c:	d006      	beq.n	217c <regular_routine+0x20>
    216e:	2280      	movs	r2, #128	; 0x80
    2170:	4b28      	ldr	r3, [pc, #160]	; (2214 <regular_routine+0xb8>)
    2172:	0252      	lsls	r2, r2, #9
    2174:	615a      	str	r2, [r3, #20]
			LED_On(LED0_PIN);
			pwm_motor_cleanup();
    2176:	4b28      	ldr	r3, [pc, #160]	; (2218 <regular_routine+0xbc>)
				if (!PWM_RUNNING) {
					PWM_RUNNING = true;
					tc_enable( & pwm_generator_instance);
					port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
					} else {
					cycle_pwm_motor();
    2178:	4798      	blx	r3
    217a:	e01b      	b.n	21b4 <regular_routine+0x58>
			if (!motor_status_changed) {
    217c:	4927      	ldr	r1, [pc, #156]	; (221c <regular_routine+0xc0>)
    217e:	780b      	ldrb	r3, [r1, #0]
    2180:	2b00      	cmp	r3, #0
    2182:	d117      	bne.n	21b4 <regular_routine+0x58>
				motor_toggle_count++;
    2184:	4a26      	ldr	r2, [pc, #152]	; (2220 <regular_routine+0xc4>)
    2186:	7813      	ldrb	r3, [r2, #0]
    2188:	3301      	adds	r3, #1
    218a:	7013      	strb	r3, [r2, #0]
				motor_status_changed = true;
    218c:	2201      	movs	r2, #1
				if (!PWM_RUNNING) {
    218e:	4b25      	ldr	r3, [pc, #148]	; (2224 <regular_routine+0xc8>)
				motor_status_changed = true;
    2190:	700a      	strb	r2, [r1, #0]
				if (!PWM_RUNNING) {
    2192:	7819      	ldrb	r1, [r3, #0]
    2194:	2900      	cmp	r1, #0
    2196:	d12a      	bne.n	21ee <regular_routine+0x92>
					PWM_RUNNING = true;
    2198:	701a      	strb	r2, [r3, #0]
    219a:	4b23      	ldr	r3, [pc, #140]	; (2228 <regular_routine+0xcc>)
    219c:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    219e:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    21a0:	b252      	sxtb	r2, r2
    21a2:	2a00      	cmp	r2, #0
    21a4:	dbfb      	blt.n	219e <regular_routine+0x42>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    21a6:	2202      	movs	r2, #2
    21a8:	8819      	ldrh	r1, [r3, #0]
    21aa:	430a      	orrs	r2, r1
    21ac:	801a      	strh	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    21ae:	2240      	movs	r2, #64	; 0x40
    21b0:	4b18      	ldr	r3, [pc, #96]	; (2214 <regular_routine+0xb8>)
    21b2:	619a      	str	r2, [r3, #24]
				}
			}
		}
	}
		
	if (BUTTON_ONE_RELEASE_STATUS) {
    21b4:	4b1d      	ldr	r3, [pc, #116]	; (222c <regular_routine+0xd0>)
    21b6:	781b      	ldrb	r3, [r3, #0]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d002      	beq.n	21c2 <regular_routine+0x66>
		motor_status_changed = false;
    21bc:	2200      	movs	r2, #0
    21be:	4b17      	ldr	r3, [pc, #92]	; (221c <regular_routine+0xc0>)
    21c0:	701a      	strb	r2, [r3, #0]
	}

	//-------------------------------------------------------

	if (is_button_two_pressed()) {
    21c2:	4b1b      	ldr	r3, [pc, #108]	; (2230 <regular_routine+0xd4>)
    21c4:	4798      	blx	r3
    21c6:	2800      	cmp	r0, #0
    21c8:	d009      	beq.n	21de <regular_routine+0x82>
		if (LongPressB2Flag) {
    21ca:	4b1a      	ldr	r3, [pc, #104]	; (2234 <regular_routine+0xd8>)
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	2b00      	cmp	r3, #0
    21d0:	d00f      	beq.n	21f2 <regular_routine+0x96>
		port_base->OUTCLR.reg = pin_mask;
    21d2:	2280      	movs	r2, #128	; 0x80
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <regular_routine+0xb8>)
    21d6:	0252      	lsls	r2, r2, #9
    21d8:	615a      	str	r2, [r3, #20]
			LED_On(LED0_PIN);
			pwm_motor_cleanup();
    21da:	4b0f      	ldr	r3, [pc, #60]	; (2218 <regular_routine+0xbc>)
			} else {
			if (!led_button_status_changed) {
				pwm_led_toggle_count++;
				led_button_status_changed = true;
				cycle_pwm_led();
    21dc:	4798      	blx	r3
			}
		}
	}
	if (BUTTON_TWO_RELEASE_STATUS) {
    21de:	4b16      	ldr	r3, [pc, #88]	; (2238 <regular_routine+0xdc>)
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d002      	beq.n	21ec <regular_routine+0x90>
		led_button_status_changed = false;
    21e6:	2200      	movs	r2, #0
    21e8:	4b14      	ldr	r3, [pc, #80]	; (223c <regular_routine+0xe0>)
    21ea:	701a      	strb	r2, [r3, #0]
	}
}
    21ec:	bd10      	pop	{r4, pc}
					cycle_pwm_motor();
    21ee:	4b14      	ldr	r3, [pc, #80]	; (2240 <regular_routine+0xe4>)
    21f0:	e7c2      	b.n	2178 <regular_routine+0x1c>
			if (!led_button_status_changed) {
    21f2:	4a12      	ldr	r2, [pc, #72]	; (223c <regular_routine+0xe0>)
    21f4:	7813      	ldrb	r3, [r2, #0]
    21f6:	2b00      	cmp	r3, #0
    21f8:	d1f1      	bne.n	21de <regular_routine+0x82>
				pwm_led_toggle_count++;
    21fa:	4912      	ldr	r1, [pc, #72]	; (2244 <regular_routine+0xe8>)
    21fc:	780b      	ldrb	r3, [r1, #0]
    21fe:	3301      	adds	r3, #1
    2200:	700b      	strb	r3, [r1, #0]
				led_button_status_changed = true;
    2202:	2301      	movs	r3, #1
    2204:	7013      	strb	r3, [r2, #0]
				cycle_pwm_led();
    2206:	4b10      	ldr	r3, [pc, #64]	; (2248 <regular_routine+0xec>)
    2208:	e7e8      	b.n	21dc <regular_routine+0x80>
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	00001f39 	.word	0x00001f39
    2210:	20000075 	.word	0x20000075
    2214:	41004400 	.word	0x41004400
    2218:	00001ff9 	.word	0x00001ff9
    221c:	2000007e 	.word	0x2000007e
    2220:	2000007f 	.word	0x2000007f
    2224:	20000079 	.word	0x20000079
    2228:	200001d8 	.word	0x200001d8
    222c:	20000072 	.word	0x20000072
    2230:	00001f99 	.word	0x00001f99
    2234:	20000076 	.word	0x20000076
    2238:	20000073 	.word	0x20000073
    223c:	2000007d 	.word	0x2000007d
    2240:	000020e1 	.word	0x000020e1
    2244:	20000080 	.word	0x20000080
    2248:	0000204d 	.word	0x0000204d

0000224c <get_vbus_state>:
	return (port_base->IN.reg & pin_mask);
    224c:	4b03      	ldr	r3, [pc, #12]	; (225c <get_vbus_state+0x10>)


void get_vbus_state(void);

void get_vbus_state(void){
	VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
    224e:	4a04      	ldr	r2, [pc, #16]	; (2260 <get_vbus_state+0x14>)
    2250:	6a1b      	ldr	r3, [r3, #32]
    2252:	011b      	lsls	r3, r3, #4
    2254:	0fdb      	lsrs	r3, r3, #31
    2256:	7013      	strb	r3, [r2, #0]
}
    2258:	4770      	bx	lr
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	41004400 	.word	0x41004400
    2260:	2000007c 	.word	0x2000007c

00002264 <get_charging_on_status_state>:
    2264:	4b03      	ldr	r3, [pc, #12]	; (2274 <get_charging_on_status_state+0x10>)


void get_charging_on_status_state(void);

void get_charging_on_status_state(void){
	CHARGN_ON_STATE = port_pin_get_input_level(CHARGN_ON_PIN);
    2266:	4a04      	ldr	r2, [pc, #16]	; (2278 <get_charging_on_status_state+0x14>)
    2268:	6a1b      	ldr	r3, [r3, #32]
    226a:	051b      	lsls	r3, r3, #20
    226c:	0fdb      	lsrs	r3, r3, #31
    226e:	7013      	strb	r3, [r2, #0]
}
    2270:	4770      	bx	lr
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	41004400 	.word	0x41004400
    2278:	20000074 	.word	0x20000074

0000227c <update_battery_states>:
}


void update_battery_states(void);

void update_battery_states(void){
    227c:	b510      	push	{r4, lr}
	
	/*
	Update Global Var based on state (using VBUS & CHRGHN)
	*/
	
	get_vbus_state();
    227e:	4b02      	ldr	r3, [pc, #8]	; (2288 <update_battery_states+0xc>)
    2280:	4798      	blx	r3
	get_charging_on_status_state();
    2282:	4b02      	ldr	r3, [pc, #8]	; (228c <update_battery_states+0x10>)
    2284:	4798      	blx	r3
	
	
	
}
    2286:	bd10      	pop	{r4, pc}
    2288:	0000224d 	.word	0x0000224d
    228c:	00002265 	.word	0x00002265

00002290 <display_battery_state>:
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void);

void display_battery_state(void){
    2290:	b510      	push	{r4, lr}
		set_battery_low_routine();
	}
	else if (BATTERY_LOW){
		set_color_red();
	}	
	else if (BATTERY_CHARGED){
    2292:	4b06      	ldr	r3, [pc, #24]	; (22ac <display_battery_state+0x1c>)
    2294:	781b      	ldrb	r3, [r3, #0]
    2296:	2b00      	cmp	r3, #0
    2298:	d002      	beq.n	22a0 <display_battery_state+0x10>
		set_color_green();
    229a:	4b05      	ldr	r3, [pc, #20]	; (22b0 <display_battery_state+0x20>)
	}	
	else if (BATTERY_CHARGING){
		set_battery_charge_routine();
    229c:	4798      	blx	r3
	}
	
}
    229e:	bd10      	pop	{r4, pc}
	else if (BATTERY_CHARGING){
    22a0:	4b04      	ldr	r3, [pc, #16]	; (22b4 <display_battery_state+0x24>)
    22a2:	781b      	ldrb	r3, [r3, #0]
    22a4:	2b00      	cmp	r3, #0
    22a6:	d0fa      	beq.n	229e <display_battery_state+0xe>
		set_battery_charge_routine();
    22a8:	4b03      	ldr	r3, [pc, #12]	; (22b8 <display_battery_state+0x28>)
    22aa:	e7f7      	b.n	229c <display_battery_state+0xc>
    22ac:	20000070 	.word	0x20000070
    22b0:	00001af9 	.word	0x00001af9
    22b4:	20000071 	.word	0x20000071
    22b8:	00001c81 	.word	0x00001c81

000022bc <toggle_nsleep>:


void toggle_nsleep(void);

void toggle_nsleep(void){
    22bc:	b510      	push	{r4, lr}
	static bool PULSATING_MOTOR = false;
	if (PULSATING_MOTOR_ROUTINE){
    22be:	4b0b      	ldr	r3, [pc, #44]	; (22ec <toggle_nsleep+0x30>)
    22c0:	781b      	ldrb	r3, [r3, #0]
    22c2:	2b00      	cmp	r3, #0
    22c4:	d00b      	beq.n	22de <toggle_nsleep+0x22>
    22c6:	2180      	movs	r1, #128	; 0x80
		if (PULSATING_MOTOR){
    22c8:	4a09      	ldr	r2, [pc, #36]	; (22f0 <toggle_nsleep+0x34>)
    22ca:	4b0a      	ldr	r3, [pc, #40]	; (22f4 <toggle_nsleep+0x38>)
    22cc:	7814      	ldrb	r4, [r2, #0]
    22ce:	2040      	movs	r0, #64	; 0x40
    22d0:	0249      	lsls	r1, r1, #9
    22d2:	2c00      	cmp	r4, #0
    22d4:	d004      	beq.n	22e0 <toggle_nsleep+0x24>
		port_base->OUTCLR.reg = pin_mask;
    22d6:	6158      	str	r0, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    22d8:	6199      	str	r1, [r3, #24]
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			LED_Off(LED0_PIN);
			PULSATING_MOTOR = false;
    22da:	2300      	movs	r3, #0
    22dc:	7013      	strb	r3, [r2, #0]
			PULSATING_MOTOR = true;
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
			LED_On(LED0_PIN);
		}
	}
}
    22de:	bd10      	pop	{r4, pc}
			PULSATING_MOTOR = true;
    22e0:	2401      	movs	r4, #1
    22e2:	7014      	strb	r4, [r2, #0]
    22e4:	6198      	str	r0, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    22e6:	6159      	str	r1, [r3, #20]
}
    22e8:	e7f9      	b.n	22de <toggle_nsleep+0x22>
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	20000078 	.word	0x20000078
    22f0:	20000077 	.word	0x20000077
    22f4:	41004400 	.word	0x41004400

000022f8 <system_state>:
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void);

void system_state(void){
    22f8:	b510      	push	{r4, lr}
	update_battery_states();
    22fa:	4b02      	ldr	r3, [pc, #8]	; (2304 <system_state+0xc>)
    22fc:	4798      	blx	r3
	sample_battery_states();
	display_battery_state();
    22fe:	4b02      	ldr	r3, [pc, #8]	; (2308 <system_state+0x10>)
    2300:	4798      	blx	r3
}
    2302:	bd10      	pop	{r4, pc}
    2304:	0000227d 	.word	0x0000227d
    2308:	00002291 	.word	0x00002291

0000230c <system_logic>:
/* LOGIC MACHINE		                                                */
/************************************************************************/

void system_logic(void);

void system_logic(void){
    230c:	b500      	push	{lr}
	if (!VBUS_STATE){
    230e:	4b26      	ldr	r3, [pc, #152]	; (23a8 <system_logic+0x9c>)
void system_logic(void){
    2310:	b08f      	sub	sp, #60	; 0x3c
	if (!VBUS_STATE){
    2312:	781b      	ldrb	r3, [r3, #0]
    2314:	2b00      	cmp	r3, #0
    2316:	d138      	bne.n	238a <system_logic+0x7e>
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    2318:	21a0      	movs	r1, #160	; 0xa0
	config->clock_source               = GCLK_GENERATOR_0;
    231a:	aa01      	add	r2, sp, #4
    231c:	00c9      	lsls	r1, r1, #3
    231e:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
    2320:	212d      	movs	r1, #45	; 0x2d
    2322:	2055      	movs	r0, #85	; 0x55
    2324:	4469      	add	r1, sp
	config->counter_16_bit.value                   = 0x0000;
    2326:	8513      	strh	r3, [r2, #40]	; 0x28
    2328:	7008      	strb	r0, [r1, #0]
	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
    232a:	212e      	movs	r1, #46	; 0x2e
    232c:	3840      	subs	r0, #64	; 0x40
    232e:	4469      	add	r1, sp
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2330:	8553      	strh	r3, [r2, #42]	; 0x2a
    2332:	7008      	strb	r0, [r1, #0]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    2334:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
    2336:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2338:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    233a:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    233c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    233e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2340:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2342:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    2344:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2346:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2348:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    234a:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    234c:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
    234e:	3304      	adds	r3, #4
    2350:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    2352:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
    2354:	6193      	str	r3, [r2, #24]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
    2356:	3936      	subs	r1, #54	; 0x36
	config_tc.pwm_channel[0].enabled = true;
    2358:	3b03      	subs	r3, #3
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
    235a:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].enabled = true;
    235c:	7413      	strb	r3, [r2, #16]
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
    235e:	4913      	ldr	r1, [pc, #76]	; (23ac <system_logic+0xa0>)
    2360:	4813      	ldr	r0, [pc, #76]	; (23b0 <system_logic+0xa4>)
    2362:	4b14      	ldr	r3, [pc, #80]	; (23b4 <system_logic+0xa8>)
    2364:	4798      	blx	r3
	//
	//
	
	
	
	if (SYS_TICK_10MS){
    2366:	4b14      	ldr	r3, [pc, #80]	; (23b8 <system_logic+0xac>)
    2368:	781a      	ldrb	r2, [r3, #0]
    236a:	2a00      	cmp	r2, #0
    236c:	d003      	beq.n	2376 <system_logic+0x6a>
		SYS_TICK_10MS = false;
    236e:	2200      	movs	r2, #0
    2370:	701a      	strb	r2, [r3, #0]
		regular_routine();
    2372:	4b12      	ldr	r3, [pc, #72]	; (23bc <system_logic+0xb0>)
    2374:	4798      	blx	r3
	}
	
	if (SYS_TICK_200MS){
    2376:	4b12      	ldr	r3, [pc, #72]	; (23c0 <system_logic+0xb4>)
    2378:	781a      	ldrb	r2, [r3, #0]
    237a:	2a00      	cmp	r2, #0
    237c:	d003      	beq.n	2386 <system_logic+0x7a>
		SYS_TICK_200MS = false;
    237e:	2200      	movs	r2, #0
    2380:	701a      	strb	r2, [r3, #0]
		toggle_nsleep();
    2382:	4b10      	ldr	r3, [pc, #64]	; (23c4 <system_logic+0xb8>)
    2384:	4798      	blx	r3
	}


}
    2386:	b00f      	add	sp, #60	; 0x3c
    2388:	bd00      	pop	{pc}
		if (!CHARGN_ON_STATE){
    238a:	4b0f      	ldr	r3, [pc, #60]	; (23c8 <system_logic+0xbc>)
    238c:	4a0f      	ldr	r2, [pc, #60]	; (23cc <system_logic+0xc0>)
    238e:	7819      	ldrb	r1, [r3, #0]
    2390:	4b0f      	ldr	r3, [pc, #60]	; (23d0 <system_logic+0xc4>)
    2392:	2900      	cmp	r1, #0
    2394:	d103      	bne.n	239e <system_logic+0x92>
			BATTERY_CHARGING = true;
    2396:	2001      	movs	r0, #1
			BATTERY_CHARGED = false;			
    2398:	7019      	strb	r1, [r3, #0]
			BATTERY_CHARGING = true;
    239a:	7010      	strb	r0, [r2, #0]
    239c:	e7e3      	b.n	2366 <system_logic+0x5a>
			BATTERY_CHARGING = false;
    239e:	2100      	movs	r1, #0
    23a0:	7011      	strb	r1, [r2, #0]
			BATTERY_CHARGED = true;
    23a2:	2201      	movs	r2, #1
    23a4:	701a      	strb	r2, [r3, #0]
    23a6:	e7de      	b.n	2366 <system_logic+0x5a>
    23a8:	2000007c 	.word	0x2000007c
    23ac:	42001c00 	.word	0x42001c00
    23b0:	200001d8 	.word	0x200001d8
    23b4:	000017b9 	.word	0x000017b9
    23b8:	2000007a 	.word	0x2000007a
    23bc:	0000215d 	.word	0x0000215d
    23c0:	2000007b 	.word	0x2000007b
    23c4:	000022bd 	.word	0x000022bd
    23c8:	20000074 	.word	0x20000074
    23cc:	20000071 	.word	0x20000071
    23d0:	20000070 	.word	0x20000070

000023d4 <startup_default_pin_state>:
    23d4:	2240      	movs	r2, #64	; 0x40
    23d6:	4b06      	ldr	r3, [pc, #24]	; (23f0 <startup_default_pin_state+0x1c>)
    23d8:	615a      	str	r2, [r3, #20]
    23da:	1892      	adds	r2, r2, r2
    23dc:	615a      	str	r2, [r3, #20]
    23de:	2280      	movs	r2, #128	; 0x80
    23e0:	0212      	lsls	r2, r2, #8
    23e2:	615a      	str	r2, [r3, #20]
    23e4:	2280      	movs	r2, #128	; 0x80
    23e6:	0112      	lsls	r2, r2, #4
    23e8:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    23ea:	2208      	movs	r2, #8
    23ec:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SWITCH_OFF_PIN,LOW);
	port_pin_set_output_level(BUTTON_2,LOW);
	port_pin_set_output_level(CHARGN_ON_PIN,LOW);
	port_pin_set_output_level(CHARGN_OFF_PIN,HIGH);
	
}
    23ee:	4770      	bx	lr
    23f0:	41004400 	.word	0x41004400

000023f4 <startup_sys_configs>:


void startup_sys_configs(void);


void startup_sys_configs(void){
    23f4:	b510      	push	{r4, lr}
	system_init ();									// System Initialize
    23f6:	4b0a      	ldr	r3, [pc, #40]	; (2420 <startup_sys_configs+0x2c>)
    23f8:	4798      	blx	r3
	cpu_irq_enable();
    23fa:	2201      	movs	r2, #1
    23fc:	4b09      	ldr	r3, [pc, #36]	; (2424 <startup_sys_configs+0x30>)
    23fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2400:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2404:	b662      	cpsie	i
	system_interrupt_enable_global ();				// System Interrupts
	configure_port_pins ();							// System PORTs
    2406:	4b08      	ldr	r3, [pc, #32]	; (2428 <startup_sys_configs+0x34>)
    2408:	4798      	blx	r3
	startup_default_pin_state();
    240a:	4b08      	ldr	r3, [pc, #32]	; (242c <startup_sys_configs+0x38>)
    240c:	4798      	blx	r3
	configure_system_tc ();							// System Clock
    240e:	4b08      	ldr	r3, [pc, #32]	; (2430 <startup_sys_configs+0x3c>)
    2410:	4798      	blx	r3
	system_tc_callbacks ();							// System Clock Callback
    2412:	4b08      	ldr	r3, [pc, #32]	; (2434 <startup_sys_configs+0x40>)
    2414:	4798      	blx	r3
	i2c_master_setup();
    2416:	4b08      	ldr	r3, [pc, #32]	; (2438 <startup_sys_configs+0x44>)
    2418:	4798      	blx	r3
	configure_pwm_tcc();
    241a:	4b08      	ldr	r3, [pc, #32]	; (243c <startup_sys_configs+0x48>)
    241c:	4798      	blx	r3
}
    241e:	bd10      	pop	{r4, pc}
    2420:	00001265 	.word	0x00001265
    2424:	20000000 	.word	0x20000000
    2428:	00001e25 	.word	0x00001e25
    242c:	000023d5 	.word	0x000023d5
    2430:	00001e7d 	.word	0x00001e7d
    2434:	00001eed 	.word	0x00001eed
    2438:	00001d05 	.word	0x00001d05
    243c:	00000181 	.word	0x00000181

00002440 <main>:



int main (void)
{
    2440:	b510      	push	{r4, lr}
	startup_sys_configs ();
    2442:	4b03      	ldr	r3, [pc, #12]	; (2450 <main+0x10>)
    2444:	4798      	blx	r3
			
			
	while (true)
	{
		
		system_state();								// Get latest system_state
    2446:	4b03      	ldr	r3, [pc, #12]	; (2454 <main+0x14>)
    2448:	4798      	blx	r3
		system_logic();								// Invoke System Logic
    244a:	4b03      	ldr	r3, [pc, #12]	; (2458 <main+0x18>)
    244c:	e7fa      	b.n	2444 <main+0x4>
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	000023f5 	.word	0x000023f5
    2454:	000022f9 	.word	0x000022f9
    2458:	0000230d 	.word	0x0000230d

0000245c <__gnu_thumb1_case_uqi>:
    245c:	b402      	push	{r1}
    245e:	4671      	mov	r1, lr
    2460:	0849      	lsrs	r1, r1, #1
    2462:	0049      	lsls	r1, r1, #1
    2464:	5c09      	ldrb	r1, [r1, r0]
    2466:	0049      	lsls	r1, r1, #1
    2468:	448e      	add	lr, r1
    246a:	bc02      	pop	{r1}
    246c:	4770      	bx	lr
    246e:	46c0      	nop			; (mov r8, r8)

00002470 <__udivsi3>:
    2470:	2200      	movs	r2, #0
    2472:	0843      	lsrs	r3, r0, #1
    2474:	428b      	cmp	r3, r1
    2476:	d374      	bcc.n	2562 <__udivsi3+0xf2>
    2478:	0903      	lsrs	r3, r0, #4
    247a:	428b      	cmp	r3, r1
    247c:	d35f      	bcc.n	253e <__udivsi3+0xce>
    247e:	0a03      	lsrs	r3, r0, #8
    2480:	428b      	cmp	r3, r1
    2482:	d344      	bcc.n	250e <__udivsi3+0x9e>
    2484:	0b03      	lsrs	r3, r0, #12
    2486:	428b      	cmp	r3, r1
    2488:	d328      	bcc.n	24dc <__udivsi3+0x6c>
    248a:	0c03      	lsrs	r3, r0, #16
    248c:	428b      	cmp	r3, r1
    248e:	d30d      	bcc.n	24ac <__udivsi3+0x3c>
    2490:	22ff      	movs	r2, #255	; 0xff
    2492:	0209      	lsls	r1, r1, #8
    2494:	ba12      	rev	r2, r2
    2496:	0c03      	lsrs	r3, r0, #16
    2498:	428b      	cmp	r3, r1
    249a:	d302      	bcc.n	24a2 <__udivsi3+0x32>
    249c:	1212      	asrs	r2, r2, #8
    249e:	0209      	lsls	r1, r1, #8
    24a0:	d065      	beq.n	256e <__udivsi3+0xfe>
    24a2:	0b03      	lsrs	r3, r0, #12
    24a4:	428b      	cmp	r3, r1
    24a6:	d319      	bcc.n	24dc <__udivsi3+0x6c>
    24a8:	e000      	b.n	24ac <__udivsi3+0x3c>
    24aa:	0a09      	lsrs	r1, r1, #8
    24ac:	0bc3      	lsrs	r3, r0, #15
    24ae:	428b      	cmp	r3, r1
    24b0:	d301      	bcc.n	24b6 <__udivsi3+0x46>
    24b2:	03cb      	lsls	r3, r1, #15
    24b4:	1ac0      	subs	r0, r0, r3
    24b6:	4152      	adcs	r2, r2
    24b8:	0b83      	lsrs	r3, r0, #14
    24ba:	428b      	cmp	r3, r1
    24bc:	d301      	bcc.n	24c2 <__udivsi3+0x52>
    24be:	038b      	lsls	r3, r1, #14
    24c0:	1ac0      	subs	r0, r0, r3
    24c2:	4152      	adcs	r2, r2
    24c4:	0b43      	lsrs	r3, r0, #13
    24c6:	428b      	cmp	r3, r1
    24c8:	d301      	bcc.n	24ce <__udivsi3+0x5e>
    24ca:	034b      	lsls	r3, r1, #13
    24cc:	1ac0      	subs	r0, r0, r3
    24ce:	4152      	adcs	r2, r2
    24d0:	0b03      	lsrs	r3, r0, #12
    24d2:	428b      	cmp	r3, r1
    24d4:	d301      	bcc.n	24da <__udivsi3+0x6a>
    24d6:	030b      	lsls	r3, r1, #12
    24d8:	1ac0      	subs	r0, r0, r3
    24da:	4152      	adcs	r2, r2
    24dc:	0ac3      	lsrs	r3, r0, #11
    24de:	428b      	cmp	r3, r1
    24e0:	d301      	bcc.n	24e6 <__udivsi3+0x76>
    24e2:	02cb      	lsls	r3, r1, #11
    24e4:	1ac0      	subs	r0, r0, r3
    24e6:	4152      	adcs	r2, r2
    24e8:	0a83      	lsrs	r3, r0, #10
    24ea:	428b      	cmp	r3, r1
    24ec:	d301      	bcc.n	24f2 <__udivsi3+0x82>
    24ee:	028b      	lsls	r3, r1, #10
    24f0:	1ac0      	subs	r0, r0, r3
    24f2:	4152      	adcs	r2, r2
    24f4:	0a43      	lsrs	r3, r0, #9
    24f6:	428b      	cmp	r3, r1
    24f8:	d301      	bcc.n	24fe <__udivsi3+0x8e>
    24fa:	024b      	lsls	r3, r1, #9
    24fc:	1ac0      	subs	r0, r0, r3
    24fe:	4152      	adcs	r2, r2
    2500:	0a03      	lsrs	r3, r0, #8
    2502:	428b      	cmp	r3, r1
    2504:	d301      	bcc.n	250a <__udivsi3+0x9a>
    2506:	020b      	lsls	r3, r1, #8
    2508:	1ac0      	subs	r0, r0, r3
    250a:	4152      	adcs	r2, r2
    250c:	d2cd      	bcs.n	24aa <__udivsi3+0x3a>
    250e:	09c3      	lsrs	r3, r0, #7
    2510:	428b      	cmp	r3, r1
    2512:	d301      	bcc.n	2518 <__udivsi3+0xa8>
    2514:	01cb      	lsls	r3, r1, #7
    2516:	1ac0      	subs	r0, r0, r3
    2518:	4152      	adcs	r2, r2
    251a:	0983      	lsrs	r3, r0, #6
    251c:	428b      	cmp	r3, r1
    251e:	d301      	bcc.n	2524 <__udivsi3+0xb4>
    2520:	018b      	lsls	r3, r1, #6
    2522:	1ac0      	subs	r0, r0, r3
    2524:	4152      	adcs	r2, r2
    2526:	0943      	lsrs	r3, r0, #5
    2528:	428b      	cmp	r3, r1
    252a:	d301      	bcc.n	2530 <__udivsi3+0xc0>
    252c:	014b      	lsls	r3, r1, #5
    252e:	1ac0      	subs	r0, r0, r3
    2530:	4152      	adcs	r2, r2
    2532:	0903      	lsrs	r3, r0, #4
    2534:	428b      	cmp	r3, r1
    2536:	d301      	bcc.n	253c <__udivsi3+0xcc>
    2538:	010b      	lsls	r3, r1, #4
    253a:	1ac0      	subs	r0, r0, r3
    253c:	4152      	adcs	r2, r2
    253e:	08c3      	lsrs	r3, r0, #3
    2540:	428b      	cmp	r3, r1
    2542:	d301      	bcc.n	2548 <__udivsi3+0xd8>
    2544:	00cb      	lsls	r3, r1, #3
    2546:	1ac0      	subs	r0, r0, r3
    2548:	4152      	adcs	r2, r2
    254a:	0883      	lsrs	r3, r0, #2
    254c:	428b      	cmp	r3, r1
    254e:	d301      	bcc.n	2554 <__udivsi3+0xe4>
    2550:	008b      	lsls	r3, r1, #2
    2552:	1ac0      	subs	r0, r0, r3
    2554:	4152      	adcs	r2, r2
    2556:	0843      	lsrs	r3, r0, #1
    2558:	428b      	cmp	r3, r1
    255a:	d301      	bcc.n	2560 <__udivsi3+0xf0>
    255c:	004b      	lsls	r3, r1, #1
    255e:	1ac0      	subs	r0, r0, r3
    2560:	4152      	adcs	r2, r2
    2562:	1a41      	subs	r1, r0, r1
    2564:	d200      	bcs.n	2568 <__udivsi3+0xf8>
    2566:	4601      	mov	r1, r0
    2568:	4152      	adcs	r2, r2
    256a:	4610      	mov	r0, r2
    256c:	4770      	bx	lr
    256e:	e7ff      	b.n	2570 <__udivsi3+0x100>
    2570:	b501      	push	{r0, lr}
    2572:	2000      	movs	r0, #0
    2574:	f000 f806 	bl	2584 <__aeabi_idiv0>
    2578:	bd02      	pop	{r1, pc}
    257a:	46c0      	nop			; (mov r8, r8)

0000257c <__aeabi_uidivmod>:
    257c:	2900      	cmp	r1, #0
    257e:	d0f7      	beq.n	2570 <__udivsi3+0x100>
    2580:	e776      	b.n	2470 <__udivsi3>
    2582:	4770      	bx	lr

00002584 <__aeabi_idiv0>:
    2584:	4770      	bx	lr
    2586:	46c0      	nop			; (mov r8, r8)

00002588 <__aeabi_dadd>:
    2588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    258a:	4645      	mov	r5, r8
    258c:	46de      	mov	lr, fp
    258e:	4657      	mov	r7, sl
    2590:	464e      	mov	r6, r9
    2592:	030c      	lsls	r4, r1, #12
    2594:	b5e0      	push	{r5, r6, r7, lr}
    2596:	004e      	lsls	r6, r1, #1
    2598:	0fc9      	lsrs	r1, r1, #31
    259a:	4688      	mov	r8, r1
    259c:	000d      	movs	r5, r1
    259e:	0a61      	lsrs	r1, r4, #9
    25a0:	0f44      	lsrs	r4, r0, #29
    25a2:	430c      	orrs	r4, r1
    25a4:	00c7      	lsls	r7, r0, #3
    25a6:	0319      	lsls	r1, r3, #12
    25a8:	0058      	lsls	r0, r3, #1
    25aa:	0fdb      	lsrs	r3, r3, #31
    25ac:	469b      	mov	fp, r3
    25ae:	0a4b      	lsrs	r3, r1, #9
    25b0:	0f51      	lsrs	r1, r2, #29
    25b2:	430b      	orrs	r3, r1
    25b4:	0d76      	lsrs	r6, r6, #21
    25b6:	0d40      	lsrs	r0, r0, #21
    25b8:	0019      	movs	r1, r3
    25ba:	00d2      	lsls	r2, r2, #3
    25bc:	45d8      	cmp	r8, fp
    25be:	d100      	bne.n	25c2 <__aeabi_dadd+0x3a>
    25c0:	e0ae      	b.n	2720 <__aeabi_dadd+0x198>
    25c2:	1a35      	subs	r5, r6, r0
    25c4:	2d00      	cmp	r5, #0
    25c6:	dc00      	bgt.n	25ca <__aeabi_dadd+0x42>
    25c8:	e0f6      	b.n	27b8 <__aeabi_dadd+0x230>
    25ca:	2800      	cmp	r0, #0
    25cc:	d10f      	bne.n	25ee <__aeabi_dadd+0x66>
    25ce:	4313      	orrs	r3, r2
    25d0:	d100      	bne.n	25d4 <__aeabi_dadd+0x4c>
    25d2:	e0db      	b.n	278c <__aeabi_dadd+0x204>
    25d4:	1e6b      	subs	r3, r5, #1
    25d6:	2b00      	cmp	r3, #0
    25d8:	d000      	beq.n	25dc <__aeabi_dadd+0x54>
    25da:	e137      	b.n	284c <__aeabi_dadd+0x2c4>
    25dc:	1aba      	subs	r2, r7, r2
    25de:	4297      	cmp	r7, r2
    25e0:	41bf      	sbcs	r7, r7
    25e2:	1a64      	subs	r4, r4, r1
    25e4:	427f      	negs	r7, r7
    25e6:	1be4      	subs	r4, r4, r7
    25e8:	2601      	movs	r6, #1
    25ea:	0017      	movs	r7, r2
    25ec:	e024      	b.n	2638 <__aeabi_dadd+0xb0>
    25ee:	4bc6      	ldr	r3, [pc, #792]	; (2908 <__aeabi_dadd+0x380>)
    25f0:	429e      	cmp	r6, r3
    25f2:	d04d      	beq.n	2690 <__aeabi_dadd+0x108>
    25f4:	2380      	movs	r3, #128	; 0x80
    25f6:	041b      	lsls	r3, r3, #16
    25f8:	4319      	orrs	r1, r3
    25fa:	2d38      	cmp	r5, #56	; 0x38
    25fc:	dd00      	ble.n	2600 <__aeabi_dadd+0x78>
    25fe:	e107      	b.n	2810 <__aeabi_dadd+0x288>
    2600:	2d1f      	cmp	r5, #31
    2602:	dd00      	ble.n	2606 <__aeabi_dadd+0x7e>
    2604:	e138      	b.n	2878 <__aeabi_dadd+0x2f0>
    2606:	2020      	movs	r0, #32
    2608:	1b43      	subs	r3, r0, r5
    260a:	469a      	mov	sl, r3
    260c:	000b      	movs	r3, r1
    260e:	4650      	mov	r0, sl
    2610:	4083      	lsls	r3, r0
    2612:	4699      	mov	r9, r3
    2614:	0013      	movs	r3, r2
    2616:	4648      	mov	r0, r9
    2618:	40eb      	lsrs	r3, r5
    261a:	4318      	orrs	r0, r3
    261c:	0003      	movs	r3, r0
    261e:	4650      	mov	r0, sl
    2620:	4082      	lsls	r2, r0
    2622:	1e50      	subs	r0, r2, #1
    2624:	4182      	sbcs	r2, r0
    2626:	40e9      	lsrs	r1, r5
    2628:	431a      	orrs	r2, r3
    262a:	1aba      	subs	r2, r7, r2
    262c:	1a61      	subs	r1, r4, r1
    262e:	4297      	cmp	r7, r2
    2630:	41a4      	sbcs	r4, r4
    2632:	0017      	movs	r7, r2
    2634:	4264      	negs	r4, r4
    2636:	1b0c      	subs	r4, r1, r4
    2638:	0223      	lsls	r3, r4, #8
    263a:	d562      	bpl.n	2702 <__aeabi_dadd+0x17a>
    263c:	0264      	lsls	r4, r4, #9
    263e:	0a65      	lsrs	r5, r4, #9
    2640:	2d00      	cmp	r5, #0
    2642:	d100      	bne.n	2646 <__aeabi_dadd+0xbe>
    2644:	e0df      	b.n	2806 <__aeabi_dadd+0x27e>
    2646:	0028      	movs	r0, r5
    2648:	f001 fbe4 	bl	3e14 <__clzsi2>
    264c:	0003      	movs	r3, r0
    264e:	3b08      	subs	r3, #8
    2650:	2b1f      	cmp	r3, #31
    2652:	dd00      	ble.n	2656 <__aeabi_dadd+0xce>
    2654:	e0d2      	b.n	27fc <__aeabi_dadd+0x274>
    2656:	2220      	movs	r2, #32
    2658:	003c      	movs	r4, r7
    265a:	1ad2      	subs	r2, r2, r3
    265c:	409d      	lsls	r5, r3
    265e:	40d4      	lsrs	r4, r2
    2660:	409f      	lsls	r7, r3
    2662:	4325      	orrs	r5, r4
    2664:	429e      	cmp	r6, r3
    2666:	dd00      	ble.n	266a <__aeabi_dadd+0xe2>
    2668:	e0c4      	b.n	27f4 <__aeabi_dadd+0x26c>
    266a:	1b9e      	subs	r6, r3, r6
    266c:	1c73      	adds	r3, r6, #1
    266e:	2b1f      	cmp	r3, #31
    2670:	dd00      	ble.n	2674 <__aeabi_dadd+0xec>
    2672:	e0f1      	b.n	2858 <__aeabi_dadd+0x2d0>
    2674:	2220      	movs	r2, #32
    2676:	0038      	movs	r0, r7
    2678:	0029      	movs	r1, r5
    267a:	1ad2      	subs	r2, r2, r3
    267c:	40d8      	lsrs	r0, r3
    267e:	4091      	lsls	r1, r2
    2680:	4097      	lsls	r7, r2
    2682:	002c      	movs	r4, r5
    2684:	4301      	orrs	r1, r0
    2686:	1e78      	subs	r0, r7, #1
    2688:	4187      	sbcs	r7, r0
    268a:	40dc      	lsrs	r4, r3
    268c:	2600      	movs	r6, #0
    268e:	430f      	orrs	r7, r1
    2690:	077b      	lsls	r3, r7, #29
    2692:	d009      	beq.n	26a8 <__aeabi_dadd+0x120>
    2694:	230f      	movs	r3, #15
    2696:	403b      	ands	r3, r7
    2698:	2b04      	cmp	r3, #4
    269a:	d005      	beq.n	26a8 <__aeabi_dadd+0x120>
    269c:	1d3b      	adds	r3, r7, #4
    269e:	42bb      	cmp	r3, r7
    26a0:	41bf      	sbcs	r7, r7
    26a2:	427f      	negs	r7, r7
    26a4:	19e4      	adds	r4, r4, r7
    26a6:	001f      	movs	r7, r3
    26a8:	0223      	lsls	r3, r4, #8
    26aa:	d52c      	bpl.n	2706 <__aeabi_dadd+0x17e>
    26ac:	4b96      	ldr	r3, [pc, #600]	; (2908 <__aeabi_dadd+0x380>)
    26ae:	3601      	adds	r6, #1
    26b0:	429e      	cmp	r6, r3
    26b2:	d100      	bne.n	26b6 <__aeabi_dadd+0x12e>
    26b4:	e09a      	b.n	27ec <__aeabi_dadd+0x264>
    26b6:	4645      	mov	r5, r8
    26b8:	4b94      	ldr	r3, [pc, #592]	; (290c <__aeabi_dadd+0x384>)
    26ba:	08ff      	lsrs	r7, r7, #3
    26bc:	401c      	ands	r4, r3
    26be:	0760      	lsls	r0, r4, #29
    26c0:	0576      	lsls	r6, r6, #21
    26c2:	0264      	lsls	r4, r4, #9
    26c4:	4307      	orrs	r7, r0
    26c6:	0b24      	lsrs	r4, r4, #12
    26c8:	0d76      	lsrs	r6, r6, #21
    26ca:	2100      	movs	r1, #0
    26cc:	0324      	lsls	r4, r4, #12
    26ce:	0b23      	lsrs	r3, r4, #12
    26d0:	0d0c      	lsrs	r4, r1, #20
    26d2:	4a8f      	ldr	r2, [pc, #572]	; (2910 <__aeabi_dadd+0x388>)
    26d4:	0524      	lsls	r4, r4, #20
    26d6:	431c      	orrs	r4, r3
    26d8:	4014      	ands	r4, r2
    26da:	0533      	lsls	r3, r6, #20
    26dc:	4323      	orrs	r3, r4
    26de:	005b      	lsls	r3, r3, #1
    26e0:	07ed      	lsls	r5, r5, #31
    26e2:	085b      	lsrs	r3, r3, #1
    26e4:	432b      	orrs	r3, r5
    26e6:	0038      	movs	r0, r7
    26e8:	0019      	movs	r1, r3
    26ea:	bc3c      	pop	{r2, r3, r4, r5}
    26ec:	4690      	mov	r8, r2
    26ee:	4699      	mov	r9, r3
    26f0:	46a2      	mov	sl, r4
    26f2:	46ab      	mov	fp, r5
    26f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26f6:	4664      	mov	r4, ip
    26f8:	4304      	orrs	r4, r0
    26fa:	d100      	bne.n	26fe <__aeabi_dadd+0x176>
    26fc:	e211      	b.n	2b22 <__aeabi_dadd+0x59a>
    26fe:	0004      	movs	r4, r0
    2700:	4667      	mov	r7, ip
    2702:	077b      	lsls	r3, r7, #29
    2704:	d1c6      	bne.n	2694 <__aeabi_dadd+0x10c>
    2706:	4645      	mov	r5, r8
    2708:	0760      	lsls	r0, r4, #29
    270a:	08ff      	lsrs	r7, r7, #3
    270c:	4307      	orrs	r7, r0
    270e:	08e4      	lsrs	r4, r4, #3
    2710:	4b7d      	ldr	r3, [pc, #500]	; (2908 <__aeabi_dadd+0x380>)
    2712:	429e      	cmp	r6, r3
    2714:	d030      	beq.n	2778 <__aeabi_dadd+0x1f0>
    2716:	0324      	lsls	r4, r4, #12
    2718:	0576      	lsls	r6, r6, #21
    271a:	0b24      	lsrs	r4, r4, #12
    271c:	0d76      	lsrs	r6, r6, #21
    271e:	e7d4      	b.n	26ca <__aeabi_dadd+0x142>
    2720:	1a33      	subs	r3, r6, r0
    2722:	469a      	mov	sl, r3
    2724:	2b00      	cmp	r3, #0
    2726:	dd78      	ble.n	281a <__aeabi_dadd+0x292>
    2728:	2800      	cmp	r0, #0
    272a:	d031      	beq.n	2790 <__aeabi_dadd+0x208>
    272c:	4876      	ldr	r0, [pc, #472]	; (2908 <__aeabi_dadd+0x380>)
    272e:	4286      	cmp	r6, r0
    2730:	d0ae      	beq.n	2690 <__aeabi_dadd+0x108>
    2732:	2080      	movs	r0, #128	; 0x80
    2734:	0400      	lsls	r0, r0, #16
    2736:	4301      	orrs	r1, r0
    2738:	4653      	mov	r3, sl
    273a:	2b38      	cmp	r3, #56	; 0x38
    273c:	dc00      	bgt.n	2740 <__aeabi_dadd+0x1b8>
    273e:	e0e9      	b.n	2914 <__aeabi_dadd+0x38c>
    2740:	430a      	orrs	r2, r1
    2742:	1e51      	subs	r1, r2, #1
    2744:	418a      	sbcs	r2, r1
    2746:	2100      	movs	r1, #0
    2748:	19d2      	adds	r2, r2, r7
    274a:	42ba      	cmp	r2, r7
    274c:	41bf      	sbcs	r7, r7
    274e:	1909      	adds	r1, r1, r4
    2750:	427c      	negs	r4, r7
    2752:	0017      	movs	r7, r2
    2754:	190c      	adds	r4, r1, r4
    2756:	0223      	lsls	r3, r4, #8
    2758:	d5d3      	bpl.n	2702 <__aeabi_dadd+0x17a>
    275a:	4b6b      	ldr	r3, [pc, #428]	; (2908 <__aeabi_dadd+0x380>)
    275c:	3601      	adds	r6, #1
    275e:	429e      	cmp	r6, r3
    2760:	d100      	bne.n	2764 <__aeabi_dadd+0x1dc>
    2762:	e13a      	b.n	29da <__aeabi_dadd+0x452>
    2764:	2001      	movs	r0, #1
    2766:	4b69      	ldr	r3, [pc, #420]	; (290c <__aeabi_dadd+0x384>)
    2768:	401c      	ands	r4, r3
    276a:	087b      	lsrs	r3, r7, #1
    276c:	4007      	ands	r7, r0
    276e:	431f      	orrs	r7, r3
    2770:	07e0      	lsls	r0, r4, #31
    2772:	4307      	orrs	r7, r0
    2774:	0864      	lsrs	r4, r4, #1
    2776:	e78b      	b.n	2690 <__aeabi_dadd+0x108>
    2778:	0023      	movs	r3, r4
    277a:	433b      	orrs	r3, r7
    277c:	d100      	bne.n	2780 <__aeabi_dadd+0x1f8>
    277e:	e1cb      	b.n	2b18 <__aeabi_dadd+0x590>
    2780:	2280      	movs	r2, #128	; 0x80
    2782:	0312      	lsls	r2, r2, #12
    2784:	4314      	orrs	r4, r2
    2786:	0324      	lsls	r4, r4, #12
    2788:	0b24      	lsrs	r4, r4, #12
    278a:	e79e      	b.n	26ca <__aeabi_dadd+0x142>
    278c:	002e      	movs	r6, r5
    278e:	e77f      	b.n	2690 <__aeabi_dadd+0x108>
    2790:	0008      	movs	r0, r1
    2792:	4310      	orrs	r0, r2
    2794:	d100      	bne.n	2798 <__aeabi_dadd+0x210>
    2796:	e0b4      	b.n	2902 <__aeabi_dadd+0x37a>
    2798:	1e58      	subs	r0, r3, #1
    279a:	2800      	cmp	r0, #0
    279c:	d000      	beq.n	27a0 <__aeabi_dadd+0x218>
    279e:	e0de      	b.n	295e <__aeabi_dadd+0x3d6>
    27a0:	18ba      	adds	r2, r7, r2
    27a2:	42ba      	cmp	r2, r7
    27a4:	419b      	sbcs	r3, r3
    27a6:	1864      	adds	r4, r4, r1
    27a8:	425b      	negs	r3, r3
    27aa:	18e4      	adds	r4, r4, r3
    27ac:	0017      	movs	r7, r2
    27ae:	2601      	movs	r6, #1
    27b0:	0223      	lsls	r3, r4, #8
    27b2:	d5a6      	bpl.n	2702 <__aeabi_dadd+0x17a>
    27b4:	2602      	movs	r6, #2
    27b6:	e7d5      	b.n	2764 <__aeabi_dadd+0x1dc>
    27b8:	2d00      	cmp	r5, #0
    27ba:	d16e      	bne.n	289a <__aeabi_dadd+0x312>
    27bc:	1c70      	adds	r0, r6, #1
    27be:	0540      	lsls	r0, r0, #21
    27c0:	0d40      	lsrs	r0, r0, #21
    27c2:	2801      	cmp	r0, #1
    27c4:	dc00      	bgt.n	27c8 <__aeabi_dadd+0x240>
    27c6:	e0f9      	b.n	29bc <__aeabi_dadd+0x434>
    27c8:	1ab8      	subs	r0, r7, r2
    27ca:	4684      	mov	ip, r0
    27cc:	4287      	cmp	r7, r0
    27ce:	4180      	sbcs	r0, r0
    27d0:	1ae5      	subs	r5, r4, r3
    27d2:	4240      	negs	r0, r0
    27d4:	1a2d      	subs	r5, r5, r0
    27d6:	0228      	lsls	r0, r5, #8
    27d8:	d400      	bmi.n	27dc <__aeabi_dadd+0x254>
    27da:	e089      	b.n	28f0 <__aeabi_dadd+0x368>
    27dc:	1bd7      	subs	r7, r2, r7
    27de:	42ba      	cmp	r2, r7
    27e0:	4192      	sbcs	r2, r2
    27e2:	1b1c      	subs	r4, r3, r4
    27e4:	4252      	negs	r2, r2
    27e6:	1aa5      	subs	r5, r4, r2
    27e8:	46d8      	mov	r8, fp
    27ea:	e729      	b.n	2640 <__aeabi_dadd+0xb8>
    27ec:	4645      	mov	r5, r8
    27ee:	2400      	movs	r4, #0
    27f0:	2700      	movs	r7, #0
    27f2:	e76a      	b.n	26ca <__aeabi_dadd+0x142>
    27f4:	4c45      	ldr	r4, [pc, #276]	; (290c <__aeabi_dadd+0x384>)
    27f6:	1af6      	subs	r6, r6, r3
    27f8:	402c      	ands	r4, r5
    27fa:	e749      	b.n	2690 <__aeabi_dadd+0x108>
    27fc:	003d      	movs	r5, r7
    27fe:	3828      	subs	r0, #40	; 0x28
    2800:	4085      	lsls	r5, r0
    2802:	2700      	movs	r7, #0
    2804:	e72e      	b.n	2664 <__aeabi_dadd+0xdc>
    2806:	0038      	movs	r0, r7
    2808:	f001 fb04 	bl	3e14 <__clzsi2>
    280c:	3020      	adds	r0, #32
    280e:	e71d      	b.n	264c <__aeabi_dadd+0xc4>
    2810:	430a      	orrs	r2, r1
    2812:	1e51      	subs	r1, r2, #1
    2814:	418a      	sbcs	r2, r1
    2816:	2100      	movs	r1, #0
    2818:	e707      	b.n	262a <__aeabi_dadd+0xa2>
    281a:	2b00      	cmp	r3, #0
    281c:	d000      	beq.n	2820 <__aeabi_dadd+0x298>
    281e:	e0f3      	b.n	2a08 <__aeabi_dadd+0x480>
    2820:	1c70      	adds	r0, r6, #1
    2822:	0543      	lsls	r3, r0, #21
    2824:	0d5b      	lsrs	r3, r3, #21
    2826:	2b01      	cmp	r3, #1
    2828:	dc00      	bgt.n	282c <__aeabi_dadd+0x2a4>
    282a:	e0ad      	b.n	2988 <__aeabi_dadd+0x400>
    282c:	4b36      	ldr	r3, [pc, #216]	; (2908 <__aeabi_dadd+0x380>)
    282e:	4298      	cmp	r0, r3
    2830:	d100      	bne.n	2834 <__aeabi_dadd+0x2ac>
    2832:	e0d1      	b.n	29d8 <__aeabi_dadd+0x450>
    2834:	18ba      	adds	r2, r7, r2
    2836:	42ba      	cmp	r2, r7
    2838:	41bf      	sbcs	r7, r7
    283a:	1864      	adds	r4, r4, r1
    283c:	427f      	negs	r7, r7
    283e:	19e4      	adds	r4, r4, r7
    2840:	07e7      	lsls	r7, r4, #31
    2842:	0852      	lsrs	r2, r2, #1
    2844:	4317      	orrs	r7, r2
    2846:	0864      	lsrs	r4, r4, #1
    2848:	0006      	movs	r6, r0
    284a:	e721      	b.n	2690 <__aeabi_dadd+0x108>
    284c:	482e      	ldr	r0, [pc, #184]	; (2908 <__aeabi_dadd+0x380>)
    284e:	4285      	cmp	r5, r0
    2850:	d100      	bne.n	2854 <__aeabi_dadd+0x2cc>
    2852:	e093      	b.n	297c <__aeabi_dadd+0x3f4>
    2854:	001d      	movs	r5, r3
    2856:	e6d0      	b.n	25fa <__aeabi_dadd+0x72>
    2858:	0029      	movs	r1, r5
    285a:	3e1f      	subs	r6, #31
    285c:	40f1      	lsrs	r1, r6
    285e:	2b20      	cmp	r3, #32
    2860:	d100      	bne.n	2864 <__aeabi_dadd+0x2dc>
    2862:	e08d      	b.n	2980 <__aeabi_dadd+0x3f8>
    2864:	2240      	movs	r2, #64	; 0x40
    2866:	1ad3      	subs	r3, r2, r3
    2868:	409d      	lsls	r5, r3
    286a:	432f      	orrs	r7, r5
    286c:	1e7d      	subs	r5, r7, #1
    286e:	41af      	sbcs	r7, r5
    2870:	2400      	movs	r4, #0
    2872:	430f      	orrs	r7, r1
    2874:	2600      	movs	r6, #0
    2876:	e744      	b.n	2702 <__aeabi_dadd+0x17a>
    2878:	002b      	movs	r3, r5
    287a:	0008      	movs	r0, r1
    287c:	3b20      	subs	r3, #32
    287e:	40d8      	lsrs	r0, r3
    2880:	0003      	movs	r3, r0
    2882:	2d20      	cmp	r5, #32
    2884:	d100      	bne.n	2888 <__aeabi_dadd+0x300>
    2886:	e07d      	b.n	2984 <__aeabi_dadd+0x3fc>
    2888:	2040      	movs	r0, #64	; 0x40
    288a:	1b45      	subs	r5, r0, r5
    288c:	40a9      	lsls	r1, r5
    288e:	430a      	orrs	r2, r1
    2890:	1e51      	subs	r1, r2, #1
    2892:	418a      	sbcs	r2, r1
    2894:	2100      	movs	r1, #0
    2896:	431a      	orrs	r2, r3
    2898:	e6c7      	b.n	262a <__aeabi_dadd+0xa2>
    289a:	2e00      	cmp	r6, #0
    289c:	d050      	beq.n	2940 <__aeabi_dadd+0x3b8>
    289e:	4e1a      	ldr	r6, [pc, #104]	; (2908 <__aeabi_dadd+0x380>)
    28a0:	42b0      	cmp	r0, r6
    28a2:	d057      	beq.n	2954 <__aeabi_dadd+0x3cc>
    28a4:	2680      	movs	r6, #128	; 0x80
    28a6:	426b      	negs	r3, r5
    28a8:	4699      	mov	r9, r3
    28aa:	0436      	lsls	r6, r6, #16
    28ac:	4334      	orrs	r4, r6
    28ae:	464b      	mov	r3, r9
    28b0:	2b38      	cmp	r3, #56	; 0x38
    28b2:	dd00      	ble.n	28b6 <__aeabi_dadd+0x32e>
    28b4:	e0d6      	b.n	2a64 <__aeabi_dadd+0x4dc>
    28b6:	2b1f      	cmp	r3, #31
    28b8:	dd00      	ble.n	28bc <__aeabi_dadd+0x334>
    28ba:	e135      	b.n	2b28 <__aeabi_dadd+0x5a0>
    28bc:	2620      	movs	r6, #32
    28be:	1af5      	subs	r5, r6, r3
    28c0:	0026      	movs	r6, r4
    28c2:	40ae      	lsls	r6, r5
    28c4:	46b2      	mov	sl, r6
    28c6:	003e      	movs	r6, r7
    28c8:	40de      	lsrs	r6, r3
    28ca:	46ac      	mov	ip, r5
    28cc:	0035      	movs	r5, r6
    28ce:	4656      	mov	r6, sl
    28d0:	432e      	orrs	r6, r5
    28d2:	4665      	mov	r5, ip
    28d4:	40af      	lsls	r7, r5
    28d6:	1e7d      	subs	r5, r7, #1
    28d8:	41af      	sbcs	r7, r5
    28da:	40dc      	lsrs	r4, r3
    28dc:	4337      	orrs	r7, r6
    28de:	1bd7      	subs	r7, r2, r7
    28e0:	42ba      	cmp	r2, r7
    28e2:	4192      	sbcs	r2, r2
    28e4:	1b0c      	subs	r4, r1, r4
    28e6:	4252      	negs	r2, r2
    28e8:	1aa4      	subs	r4, r4, r2
    28ea:	0006      	movs	r6, r0
    28ec:	46d8      	mov	r8, fp
    28ee:	e6a3      	b.n	2638 <__aeabi_dadd+0xb0>
    28f0:	4664      	mov	r4, ip
    28f2:	4667      	mov	r7, ip
    28f4:	432c      	orrs	r4, r5
    28f6:	d000      	beq.n	28fa <__aeabi_dadd+0x372>
    28f8:	e6a2      	b.n	2640 <__aeabi_dadd+0xb8>
    28fa:	2500      	movs	r5, #0
    28fc:	2600      	movs	r6, #0
    28fe:	2700      	movs	r7, #0
    2900:	e706      	b.n	2710 <__aeabi_dadd+0x188>
    2902:	001e      	movs	r6, r3
    2904:	e6c4      	b.n	2690 <__aeabi_dadd+0x108>
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	000007ff 	.word	0x000007ff
    290c:	ff7fffff 	.word	0xff7fffff
    2910:	800fffff 	.word	0x800fffff
    2914:	2b1f      	cmp	r3, #31
    2916:	dc63      	bgt.n	29e0 <__aeabi_dadd+0x458>
    2918:	2020      	movs	r0, #32
    291a:	1ac3      	subs	r3, r0, r3
    291c:	0008      	movs	r0, r1
    291e:	4098      	lsls	r0, r3
    2920:	469c      	mov	ip, r3
    2922:	4683      	mov	fp, r0
    2924:	4653      	mov	r3, sl
    2926:	0010      	movs	r0, r2
    2928:	40d8      	lsrs	r0, r3
    292a:	0003      	movs	r3, r0
    292c:	4658      	mov	r0, fp
    292e:	4318      	orrs	r0, r3
    2930:	4663      	mov	r3, ip
    2932:	409a      	lsls	r2, r3
    2934:	1e53      	subs	r3, r2, #1
    2936:	419a      	sbcs	r2, r3
    2938:	4653      	mov	r3, sl
    293a:	4302      	orrs	r2, r0
    293c:	40d9      	lsrs	r1, r3
    293e:	e703      	b.n	2748 <__aeabi_dadd+0x1c0>
    2940:	0026      	movs	r6, r4
    2942:	433e      	orrs	r6, r7
    2944:	d006      	beq.n	2954 <__aeabi_dadd+0x3cc>
    2946:	43eb      	mvns	r3, r5
    2948:	4699      	mov	r9, r3
    294a:	2b00      	cmp	r3, #0
    294c:	d0c7      	beq.n	28de <__aeabi_dadd+0x356>
    294e:	4e94      	ldr	r6, [pc, #592]	; (2ba0 <__aeabi_dadd+0x618>)
    2950:	42b0      	cmp	r0, r6
    2952:	d1ac      	bne.n	28ae <__aeabi_dadd+0x326>
    2954:	000c      	movs	r4, r1
    2956:	0017      	movs	r7, r2
    2958:	0006      	movs	r6, r0
    295a:	46d8      	mov	r8, fp
    295c:	e698      	b.n	2690 <__aeabi_dadd+0x108>
    295e:	4b90      	ldr	r3, [pc, #576]	; (2ba0 <__aeabi_dadd+0x618>)
    2960:	459a      	cmp	sl, r3
    2962:	d00b      	beq.n	297c <__aeabi_dadd+0x3f4>
    2964:	4682      	mov	sl, r0
    2966:	e6e7      	b.n	2738 <__aeabi_dadd+0x1b0>
    2968:	2800      	cmp	r0, #0
    296a:	d000      	beq.n	296e <__aeabi_dadd+0x3e6>
    296c:	e09e      	b.n	2aac <__aeabi_dadd+0x524>
    296e:	0018      	movs	r0, r3
    2970:	4310      	orrs	r0, r2
    2972:	d100      	bne.n	2976 <__aeabi_dadd+0x3ee>
    2974:	e0e9      	b.n	2b4a <__aeabi_dadd+0x5c2>
    2976:	001c      	movs	r4, r3
    2978:	0017      	movs	r7, r2
    297a:	46d8      	mov	r8, fp
    297c:	4e88      	ldr	r6, [pc, #544]	; (2ba0 <__aeabi_dadd+0x618>)
    297e:	e687      	b.n	2690 <__aeabi_dadd+0x108>
    2980:	2500      	movs	r5, #0
    2982:	e772      	b.n	286a <__aeabi_dadd+0x2e2>
    2984:	2100      	movs	r1, #0
    2986:	e782      	b.n	288e <__aeabi_dadd+0x306>
    2988:	0023      	movs	r3, r4
    298a:	433b      	orrs	r3, r7
    298c:	2e00      	cmp	r6, #0
    298e:	d000      	beq.n	2992 <__aeabi_dadd+0x40a>
    2990:	e0ab      	b.n	2aea <__aeabi_dadd+0x562>
    2992:	2b00      	cmp	r3, #0
    2994:	d100      	bne.n	2998 <__aeabi_dadd+0x410>
    2996:	e0e7      	b.n	2b68 <__aeabi_dadd+0x5e0>
    2998:	000b      	movs	r3, r1
    299a:	4313      	orrs	r3, r2
    299c:	d100      	bne.n	29a0 <__aeabi_dadd+0x418>
    299e:	e677      	b.n	2690 <__aeabi_dadd+0x108>
    29a0:	18ba      	adds	r2, r7, r2
    29a2:	42ba      	cmp	r2, r7
    29a4:	41bf      	sbcs	r7, r7
    29a6:	1864      	adds	r4, r4, r1
    29a8:	427f      	negs	r7, r7
    29aa:	19e4      	adds	r4, r4, r7
    29ac:	0223      	lsls	r3, r4, #8
    29ae:	d400      	bmi.n	29b2 <__aeabi_dadd+0x42a>
    29b0:	e0f2      	b.n	2b98 <__aeabi_dadd+0x610>
    29b2:	4b7c      	ldr	r3, [pc, #496]	; (2ba4 <__aeabi_dadd+0x61c>)
    29b4:	0017      	movs	r7, r2
    29b6:	401c      	ands	r4, r3
    29b8:	0006      	movs	r6, r0
    29ba:	e669      	b.n	2690 <__aeabi_dadd+0x108>
    29bc:	0020      	movs	r0, r4
    29be:	4338      	orrs	r0, r7
    29c0:	2e00      	cmp	r6, #0
    29c2:	d1d1      	bne.n	2968 <__aeabi_dadd+0x3e0>
    29c4:	2800      	cmp	r0, #0
    29c6:	d15b      	bne.n	2a80 <__aeabi_dadd+0x4f8>
    29c8:	001c      	movs	r4, r3
    29ca:	4314      	orrs	r4, r2
    29cc:	d100      	bne.n	29d0 <__aeabi_dadd+0x448>
    29ce:	e0a8      	b.n	2b22 <__aeabi_dadd+0x59a>
    29d0:	001c      	movs	r4, r3
    29d2:	0017      	movs	r7, r2
    29d4:	46d8      	mov	r8, fp
    29d6:	e65b      	b.n	2690 <__aeabi_dadd+0x108>
    29d8:	0006      	movs	r6, r0
    29da:	2400      	movs	r4, #0
    29dc:	2700      	movs	r7, #0
    29de:	e697      	b.n	2710 <__aeabi_dadd+0x188>
    29e0:	4650      	mov	r0, sl
    29e2:	000b      	movs	r3, r1
    29e4:	3820      	subs	r0, #32
    29e6:	40c3      	lsrs	r3, r0
    29e8:	4699      	mov	r9, r3
    29ea:	4653      	mov	r3, sl
    29ec:	2b20      	cmp	r3, #32
    29ee:	d100      	bne.n	29f2 <__aeabi_dadd+0x46a>
    29f0:	e095      	b.n	2b1e <__aeabi_dadd+0x596>
    29f2:	2340      	movs	r3, #64	; 0x40
    29f4:	4650      	mov	r0, sl
    29f6:	1a1b      	subs	r3, r3, r0
    29f8:	4099      	lsls	r1, r3
    29fa:	430a      	orrs	r2, r1
    29fc:	1e51      	subs	r1, r2, #1
    29fe:	418a      	sbcs	r2, r1
    2a00:	464b      	mov	r3, r9
    2a02:	2100      	movs	r1, #0
    2a04:	431a      	orrs	r2, r3
    2a06:	e69f      	b.n	2748 <__aeabi_dadd+0x1c0>
    2a08:	2e00      	cmp	r6, #0
    2a0a:	d130      	bne.n	2a6e <__aeabi_dadd+0x4e6>
    2a0c:	0026      	movs	r6, r4
    2a0e:	433e      	orrs	r6, r7
    2a10:	d067      	beq.n	2ae2 <__aeabi_dadd+0x55a>
    2a12:	43db      	mvns	r3, r3
    2a14:	469a      	mov	sl, r3
    2a16:	2b00      	cmp	r3, #0
    2a18:	d01c      	beq.n	2a54 <__aeabi_dadd+0x4cc>
    2a1a:	4e61      	ldr	r6, [pc, #388]	; (2ba0 <__aeabi_dadd+0x618>)
    2a1c:	42b0      	cmp	r0, r6
    2a1e:	d060      	beq.n	2ae2 <__aeabi_dadd+0x55a>
    2a20:	4653      	mov	r3, sl
    2a22:	2b38      	cmp	r3, #56	; 0x38
    2a24:	dd00      	ble.n	2a28 <__aeabi_dadd+0x4a0>
    2a26:	e096      	b.n	2b56 <__aeabi_dadd+0x5ce>
    2a28:	2b1f      	cmp	r3, #31
    2a2a:	dd00      	ble.n	2a2e <__aeabi_dadd+0x4a6>
    2a2c:	e09f      	b.n	2b6e <__aeabi_dadd+0x5e6>
    2a2e:	2620      	movs	r6, #32
    2a30:	1af3      	subs	r3, r6, r3
    2a32:	0026      	movs	r6, r4
    2a34:	409e      	lsls	r6, r3
    2a36:	469c      	mov	ip, r3
    2a38:	46b3      	mov	fp, r6
    2a3a:	4653      	mov	r3, sl
    2a3c:	003e      	movs	r6, r7
    2a3e:	40de      	lsrs	r6, r3
    2a40:	0033      	movs	r3, r6
    2a42:	465e      	mov	r6, fp
    2a44:	431e      	orrs	r6, r3
    2a46:	4663      	mov	r3, ip
    2a48:	409f      	lsls	r7, r3
    2a4a:	1e7b      	subs	r3, r7, #1
    2a4c:	419f      	sbcs	r7, r3
    2a4e:	4653      	mov	r3, sl
    2a50:	40dc      	lsrs	r4, r3
    2a52:	4337      	orrs	r7, r6
    2a54:	18bf      	adds	r7, r7, r2
    2a56:	4297      	cmp	r7, r2
    2a58:	4192      	sbcs	r2, r2
    2a5a:	1864      	adds	r4, r4, r1
    2a5c:	4252      	negs	r2, r2
    2a5e:	18a4      	adds	r4, r4, r2
    2a60:	0006      	movs	r6, r0
    2a62:	e678      	b.n	2756 <__aeabi_dadd+0x1ce>
    2a64:	4327      	orrs	r7, r4
    2a66:	1e7c      	subs	r4, r7, #1
    2a68:	41a7      	sbcs	r7, r4
    2a6a:	2400      	movs	r4, #0
    2a6c:	e737      	b.n	28de <__aeabi_dadd+0x356>
    2a6e:	4e4c      	ldr	r6, [pc, #304]	; (2ba0 <__aeabi_dadd+0x618>)
    2a70:	42b0      	cmp	r0, r6
    2a72:	d036      	beq.n	2ae2 <__aeabi_dadd+0x55a>
    2a74:	2680      	movs	r6, #128	; 0x80
    2a76:	425b      	negs	r3, r3
    2a78:	0436      	lsls	r6, r6, #16
    2a7a:	469a      	mov	sl, r3
    2a7c:	4334      	orrs	r4, r6
    2a7e:	e7cf      	b.n	2a20 <__aeabi_dadd+0x498>
    2a80:	0018      	movs	r0, r3
    2a82:	4310      	orrs	r0, r2
    2a84:	d100      	bne.n	2a88 <__aeabi_dadd+0x500>
    2a86:	e603      	b.n	2690 <__aeabi_dadd+0x108>
    2a88:	1ab8      	subs	r0, r7, r2
    2a8a:	4684      	mov	ip, r0
    2a8c:	4567      	cmp	r7, ip
    2a8e:	41ad      	sbcs	r5, r5
    2a90:	1ae0      	subs	r0, r4, r3
    2a92:	426d      	negs	r5, r5
    2a94:	1b40      	subs	r0, r0, r5
    2a96:	0205      	lsls	r5, r0, #8
    2a98:	d400      	bmi.n	2a9c <__aeabi_dadd+0x514>
    2a9a:	e62c      	b.n	26f6 <__aeabi_dadd+0x16e>
    2a9c:	1bd7      	subs	r7, r2, r7
    2a9e:	42ba      	cmp	r2, r7
    2aa0:	4192      	sbcs	r2, r2
    2aa2:	1b1c      	subs	r4, r3, r4
    2aa4:	4252      	negs	r2, r2
    2aa6:	1aa4      	subs	r4, r4, r2
    2aa8:	46d8      	mov	r8, fp
    2aaa:	e5f1      	b.n	2690 <__aeabi_dadd+0x108>
    2aac:	0018      	movs	r0, r3
    2aae:	4310      	orrs	r0, r2
    2ab0:	d100      	bne.n	2ab4 <__aeabi_dadd+0x52c>
    2ab2:	e763      	b.n	297c <__aeabi_dadd+0x3f4>
    2ab4:	08f8      	lsrs	r0, r7, #3
    2ab6:	0767      	lsls	r7, r4, #29
    2ab8:	4307      	orrs	r7, r0
    2aba:	2080      	movs	r0, #128	; 0x80
    2abc:	08e4      	lsrs	r4, r4, #3
    2abe:	0300      	lsls	r0, r0, #12
    2ac0:	4204      	tst	r4, r0
    2ac2:	d008      	beq.n	2ad6 <__aeabi_dadd+0x54e>
    2ac4:	08dd      	lsrs	r5, r3, #3
    2ac6:	4205      	tst	r5, r0
    2ac8:	d105      	bne.n	2ad6 <__aeabi_dadd+0x54e>
    2aca:	08d2      	lsrs	r2, r2, #3
    2acc:	0759      	lsls	r1, r3, #29
    2ace:	4311      	orrs	r1, r2
    2ad0:	000f      	movs	r7, r1
    2ad2:	002c      	movs	r4, r5
    2ad4:	46d8      	mov	r8, fp
    2ad6:	0f7b      	lsrs	r3, r7, #29
    2ad8:	00e4      	lsls	r4, r4, #3
    2ada:	431c      	orrs	r4, r3
    2adc:	00ff      	lsls	r7, r7, #3
    2ade:	4e30      	ldr	r6, [pc, #192]	; (2ba0 <__aeabi_dadd+0x618>)
    2ae0:	e5d6      	b.n	2690 <__aeabi_dadd+0x108>
    2ae2:	000c      	movs	r4, r1
    2ae4:	0017      	movs	r7, r2
    2ae6:	0006      	movs	r6, r0
    2ae8:	e5d2      	b.n	2690 <__aeabi_dadd+0x108>
    2aea:	2b00      	cmp	r3, #0
    2aec:	d038      	beq.n	2b60 <__aeabi_dadd+0x5d8>
    2aee:	000b      	movs	r3, r1
    2af0:	4313      	orrs	r3, r2
    2af2:	d100      	bne.n	2af6 <__aeabi_dadd+0x56e>
    2af4:	e742      	b.n	297c <__aeabi_dadd+0x3f4>
    2af6:	08f8      	lsrs	r0, r7, #3
    2af8:	0767      	lsls	r7, r4, #29
    2afa:	4307      	orrs	r7, r0
    2afc:	2080      	movs	r0, #128	; 0x80
    2afe:	08e4      	lsrs	r4, r4, #3
    2b00:	0300      	lsls	r0, r0, #12
    2b02:	4204      	tst	r4, r0
    2b04:	d0e7      	beq.n	2ad6 <__aeabi_dadd+0x54e>
    2b06:	08cb      	lsrs	r3, r1, #3
    2b08:	4203      	tst	r3, r0
    2b0a:	d1e4      	bne.n	2ad6 <__aeabi_dadd+0x54e>
    2b0c:	08d2      	lsrs	r2, r2, #3
    2b0e:	0749      	lsls	r1, r1, #29
    2b10:	4311      	orrs	r1, r2
    2b12:	000f      	movs	r7, r1
    2b14:	001c      	movs	r4, r3
    2b16:	e7de      	b.n	2ad6 <__aeabi_dadd+0x54e>
    2b18:	2700      	movs	r7, #0
    2b1a:	2400      	movs	r4, #0
    2b1c:	e5d5      	b.n	26ca <__aeabi_dadd+0x142>
    2b1e:	2100      	movs	r1, #0
    2b20:	e76b      	b.n	29fa <__aeabi_dadd+0x472>
    2b22:	2500      	movs	r5, #0
    2b24:	2700      	movs	r7, #0
    2b26:	e5f3      	b.n	2710 <__aeabi_dadd+0x188>
    2b28:	464e      	mov	r6, r9
    2b2a:	0025      	movs	r5, r4
    2b2c:	3e20      	subs	r6, #32
    2b2e:	40f5      	lsrs	r5, r6
    2b30:	464b      	mov	r3, r9
    2b32:	002e      	movs	r6, r5
    2b34:	2b20      	cmp	r3, #32
    2b36:	d02d      	beq.n	2b94 <__aeabi_dadd+0x60c>
    2b38:	2540      	movs	r5, #64	; 0x40
    2b3a:	1aed      	subs	r5, r5, r3
    2b3c:	40ac      	lsls	r4, r5
    2b3e:	4327      	orrs	r7, r4
    2b40:	1e7c      	subs	r4, r7, #1
    2b42:	41a7      	sbcs	r7, r4
    2b44:	2400      	movs	r4, #0
    2b46:	4337      	orrs	r7, r6
    2b48:	e6c9      	b.n	28de <__aeabi_dadd+0x356>
    2b4a:	2480      	movs	r4, #128	; 0x80
    2b4c:	2500      	movs	r5, #0
    2b4e:	0324      	lsls	r4, r4, #12
    2b50:	4e13      	ldr	r6, [pc, #76]	; (2ba0 <__aeabi_dadd+0x618>)
    2b52:	2700      	movs	r7, #0
    2b54:	e5dc      	b.n	2710 <__aeabi_dadd+0x188>
    2b56:	4327      	orrs	r7, r4
    2b58:	1e7c      	subs	r4, r7, #1
    2b5a:	41a7      	sbcs	r7, r4
    2b5c:	2400      	movs	r4, #0
    2b5e:	e779      	b.n	2a54 <__aeabi_dadd+0x4cc>
    2b60:	000c      	movs	r4, r1
    2b62:	0017      	movs	r7, r2
    2b64:	4e0e      	ldr	r6, [pc, #56]	; (2ba0 <__aeabi_dadd+0x618>)
    2b66:	e593      	b.n	2690 <__aeabi_dadd+0x108>
    2b68:	000c      	movs	r4, r1
    2b6a:	0017      	movs	r7, r2
    2b6c:	e590      	b.n	2690 <__aeabi_dadd+0x108>
    2b6e:	4656      	mov	r6, sl
    2b70:	0023      	movs	r3, r4
    2b72:	3e20      	subs	r6, #32
    2b74:	40f3      	lsrs	r3, r6
    2b76:	4699      	mov	r9, r3
    2b78:	4653      	mov	r3, sl
    2b7a:	2b20      	cmp	r3, #32
    2b7c:	d00e      	beq.n	2b9c <__aeabi_dadd+0x614>
    2b7e:	2340      	movs	r3, #64	; 0x40
    2b80:	4656      	mov	r6, sl
    2b82:	1b9b      	subs	r3, r3, r6
    2b84:	409c      	lsls	r4, r3
    2b86:	4327      	orrs	r7, r4
    2b88:	1e7c      	subs	r4, r7, #1
    2b8a:	41a7      	sbcs	r7, r4
    2b8c:	464b      	mov	r3, r9
    2b8e:	2400      	movs	r4, #0
    2b90:	431f      	orrs	r7, r3
    2b92:	e75f      	b.n	2a54 <__aeabi_dadd+0x4cc>
    2b94:	2400      	movs	r4, #0
    2b96:	e7d2      	b.n	2b3e <__aeabi_dadd+0x5b6>
    2b98:	0017      	movs	r7, r2
    2b9a:	e5b2      	b.n	2702 <__aeabi_dadd+0x17a>
    2b9c:	2400      	movs	r4, #0
    2b9e:	e7f2      	b.n	2b86 <__aeabi_dadd+0x5fe>
    2ba0:	000007ff 	.word	0x000007ff
    2ba4:	ff7fffff 	.word	0xff7fffff

00002ba8 <__aeabi_ddiv>:
    2ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2baa:	4657      	mov	r7, sl
    2bac:	4645      	mov	r5, r8
    2bae:	46de      	mov	lr, fp
    2bb0:	464e      	mov	r6, r9
    2bb2:	b5e0      	push	{r5, r6, r7, lr}
    2bb4:	004c      	lsls	r4, r1, #1
    2bb6:	030e      	lsls	r6, r1, #12
    2bb8:	b087      	sub	sp, #28
    2bba:	4683      	mov	fp, r0
    2bbc:	4692      	mov	sl, r2
    2bbe:	001d      	movs	r5, r3
    2bc0:	4680      	mov	r8, r0
    2bc2:	0b36      	lsrs	r6, r6, #12
    2bc4:	0d64      	lsrs	r4, r4, #21
    2bc6:	0fcf      	lsrs	r7, r1, #31
    2bc8:	2c00      	cmp	r4, #0
    2bca:	d04f      	beq.n	2c6c <__aeabi_ddiv+0xc4>
    2bcc:	4b6f      	ldr	r3, [pc, #444]	; (2d8c <__aeabi_ddiv+0x1e4>)
    2bce:	429c      	cmp	r4, r3
    2bd0:	d035      	beq.n	2c3e <__aeabi_ddiv+0x96>
    2bd2:	2380      	movs	r3, #128	; 0x80
    2bd4:	0f42      	lsrs	r2, r0, #29
    2bd6:	041b      	lsls	r3, r3, #16
    2bd8:	00f6      	lsls	r6, r6, #3
    2bda:	4313      	orrs	r3, r2
    2bdc:	4333      	orrs	r3, r6
    2bde:	4699      	mov	r9, r3
    2be0:	00c3      	lsls	r3, r0, #3
    2be2:	4698      	mov	r8, r3
    2be4:	4b6a      	ldr	r3, [pc, #424]	; (2d90 <__aeabi_ddiv+0x1e8>)
    2be6:	2600      	movs	r6, #0
    2be8:	469c      	mov	ip, r3
    2bea:	2300      	movs	r3, #0
    2bec:	4464      	add	r4, ip
    2bee:	9303      	str	r3, [sp, #12]
    2bf0:	032b      	lsls	r3, r5, #12
    2bf2:	0b1b      	lsrs	r3, r3, #12
    2bf4:	469b      	mov	fp, r3
    2bf6:	006b      	lsls	r3, r5, #1
    2bf8:	0fed      	lsrs	r5, r5, #31
    2bfa:	4650      	mov	r0, sl
    2bfc:	0d5b      	lsrs	r3, r3, #21
    2bfe:	9501      	str	r5, [sp, #4]
    2c00:	d05e      	beq.n	2cc0 <__aeabi_ddiv+0x118>
    2c02:	4a62      	ldr	r2, [pc, #392]	; (2d8c <__aeabi_ddiv+0x1e4>)
    2c04:	4293      	cmp	r3, r2
    2c06:	d053      	beq.n	2cb0 <__aeabi_ddiv+0x108>
    2c08:	465a      	mov	r2, fp
    2c0a:	00d1      	lsls	r1, r2, #3
    2c0c:	2280      	movs	r2, #128	; 0x80
    2c0e:	0f40      	lsrs	r0, r0, #29
    2c10:	0412      	lsls	r2, r2, #16
    2c12:	4302      	orrs	r2, r0
    2c14:	430a      	orrs	r2, r1
    2c16:	4693      	mov	fp, r2
    2c18:	4652      	mov	r2, sl
    2c1a:	00d1      	lsls	r1, r2, #3
    2c1c:	4a5c      	ldr	r2, [pc, #368]	; (2d90 <__aeabi_ddiv+0x1e8>)
    2c1e:	4694      	mov	ip, r2
    2c20:	2200      	movs	r2, #0
    2c22:	4463      	add	r3, ip
    2c24:	0038      	movs	r0, r7
    2c26:	4068      	eors	r0, r5
    2c28:	4684      	mov	ip, r0
    2c2a:	9002      	str	r0, [sp, #8]
    2c2c:	1ae4      	subs	r4, r4, r3
    2c2e:	4316      	orrs	r6, r2
    2c30:	2e0f      	cmp	r6, #15
    2c32:	d900      	bls.n	2c36 <__aeabi_ddiv+0x8e>
    2c34:	e0b4      	b.n	2da0 <__aeabi_ddiv+0x1f8>
    2c36:	4b57      	ldr	r3, [pc, #348]	; (2d94 <__aeabi_ddiv+0x1ec>)
    2c38:	00b6      	lsls	r6, r6, #2
    2c3a:	599b      	ldr	r3, [r3, r6]
    2c3c:	469f      	mov	pc, r3
    2c3e:	0003      	movs	r3, r0
    2c40:	4333      	orrs	r3, r6
    2c42:	4699      	mov	r9, r3
    2c44:	d16c      	bne.n	2d20 <__aeabi_ddiv+0x178>
    2c46:	2300      	movs	r3, #0
    2c48:	4698      	mov	r8, r3
    2c4a:	3302      	adds	r3, #2
    2c4c:	2608      	movs	r6, #8
    2c4e:	9303      	str	r3, [sp, #12]
    2c50:	e7ce      	b.n	2bf0 <__aeabi_ddiv+0x48>
    2c52:	46cb      	mov	fp, r9
    2c54:	4641      	mov	r1, r8
    2c56:	9a03      	ldr	r2, [sp, #12]
    2c58:	9701      	str	r7, [sp, #4]
    2c5a:	2a02      	cmp	r2, #2
    2c5c:	d165      	bne.n	2d2a <__aeabi_ddiv+0x182>
    2c5e:	9b01      	ldr	r3, [sp, #4]
    2c60:	4c4a      	ldr	r4, [pc, #296]	; (2d8c <__aeabi_ddiv+0x1e4>)
    2c62:	469c      	mov	ip, r3
    2c64:	2300      	movs	r3, #0
    2c66:	2200      	movs	r2, #0
    2c68:	4698      	mov	r8, r3
    2c6a:	e06b      	b.n	2d44 <__aeabi_ddiv+0x19c>
    2c6c:	0003      	movs	r3, r0
    2c6e:	4333      	orrs	r3, r6
    2c70:	4699      	mov	r9, r3
    2c72:	d04e      	beq.n	2d12 <__aeabi_ddiv+0x16a>
    2c74:	2e00      	cmp	r6, #0
    2c76:	d100      	bne.n	2c7a <__aeabi_ddiv+0xd2>
    2c78:	e1bc      	b.n	2ff4 <__aeabi_ddiv+0x44c>
    2c7a:	0030      	movs	r0, r6
    2c7c:	f001 f8ca 	bl	3e14 <__clzsi2>
    2c80:	0003      	movs	r3, r0
    2c82:	3b0b      	subs	r3, #11
    2c84:	2b1c      	cmp	r3, #28
    2c86:	dd00      	ble.n	2c8a <__aeabi_ddiv+0xe2>
    2c88:	e1ac      	b.n	2fe4 <__aeabi_ddiv+0x43c>
    2c8a:	221d      	movs	r2, #29
    2c8c:	1ad3      	subs	r3, r2, r3
    2c8e:	465a      	mov	r2, fp
    2c90:	0001      	movs	r1, r0
    2c92:	40da      	lsrs	r2, r3
    2c94:	3908      	subs	r1, #8
    2c96:	408e      	lsls	r6, r1
    2c98:	0013      	movs	r3, r2
    2c9a:	4333      	orrs	r3, r6
    2c9c:	4699      	mov	r9, r3
    2c9e:	465b      	mov	r3, fp
    2ca0:	408b      	lsls	r3, r1
    2ca2:	4698      	mov	r8, r3
    2ca4:	2300      	movs	r3, #0
    2ca6:	4c3c      	ldr	r4, [pc, #240]	; (2d98 <__aeabi_ddiv+0x1f0>)
    2ca8:	2600      	movs	r6, #0
    2caa:	1a24      	subs	r4, r4, r0
    2cac:	9303      	str	r3, [sp, #12]
    2cae:	e79f      	b.n	2bf0 <__aeabi_ddiv+0x48>
    2cb0:	4651      	mov	r1, sl
    2cb2:	465a      	mov	r2, fp
    2cb4:	4311      	orrs	r1, r2
    2cb6:	d129      	bne.n	2d0c <__aeabi_ddiv+0x164>
    2cb8:	2200      	movs	r2, #0
    2cba:	4693      	mov	fp, r2
    2cbc:	3202      	adds	r2, #2
    2cbe:	e7b1      	b.n	2c24 <__aeabi_ddiv+0x7c>
    2cc0:	4659      	mov	r1, fp
    2cc2:	4301      	orrs	r1, r0
    2cc4:	d01e      	beq.n	2d04 <__aeabi_ddiv+0x15c>
    2cc6:	465b      	mov	r3, fp
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d100      	bne.n	2cce <__aeabi_ddiv+0x126>
    2ccc:	e19e      	b.n	300c <__aeabi_ddiv+0x464>
    2cce:	4658      	mov	r0, fp
    2cd0:	f001 f8a0 	bl	3e14 <__clzsi2>
    2cd4:	0003      	movs	r3, r0
    2cd6:	3b0b      	subs	r3, #11
    2cd8:	2b1c      	cmp	r3, #28
    2cda:	dd00      	ble.n	2cde <__aeabi_ddiv+0x136>
    2cdc:	e18f      	b.n	2ffe <__aeabi_ddiv+0x456>
    2cde:	0002      	movs	r2, r0
    2ce0:	4659      	mov	r1, fp
    2ce2:	3a08      	subs	r2, #8
    2ce4:	4091      	lsls	r1, r2
    2ce6:	468b      	mov	fp, r1
    2ce8:	211d      	movs	r1, #29
    2cea:	1acb      	subs	r3, r1, r3
    2cec:	4651      	mov	r1, sl
    2cee:	40d9      	lsrs	r1, r3
    2cf0:	000b      	movs	r3, r1
    2cf2:	4659      	mov	r1, fp
    2cf4:	430b      	orrs	r3, r1
    2cf6:	4651      	mov	r1, sl
    2cf8:	469b      	mov	fp, r3
    2cfa:	4091      	lsls	r1, r2
    2cfc:	4b26      	ldr	r3, [pc, #152]	; (2d98 <__aeabi_ddiv+0x1f0>)
    2cfe:	2200      	movs	r2, #0
    2d00:	1a1b      	subs	r3, r3, r0
    2d02:	e78f      	b.n	2c24 <__aeabi_ddiv+0x7c>
    2d04:	2300      	movs	r3, #0
    2d06:	2201      	movs	r2, #1
    2d08:	469b      	mov	fp, r3
    2d0a:	e78b      	b.n	2c24 <__aeabi_ddiv+0x7c>
    2d0c:	4651      	mov	r1, sl
    2d0e:	2203      	movs	r2, #3
    2d10:	e788      	b.n	2c24 <__aeabi_ddiv+0x7c>
    2d12:	2300      	movs	r3, #0
    2d14:	4698      	mov	r8, r3
    2d16:	3301      	adds	r3, #1
    2d18:	2604      	movs	r6, #4
    2d1a:	2400      	movs	r4, #0
    2d1c:	9303      	str	r3, [sp, #12]
    2d1e:	e767      	b.n	2bf0 <__aeabi_ddiv+0x48>
    2d20:	2303      	movs	r3, #3
    2d22:	46b1      	mov	r9, r6
    2d24:	9303      	str	r3, [sp, #12]
    2d26:	260c      	movs	r6, #12
    2d28:	e762      	b.n	2bf0 <__aeabi_ddiv+0x48>
    2d2a:	2a03      	cmp	r2, #3
    2d2c:	d100      	bne.n	2d30 <__aeabi_ddiv+0x188>
    2d2e:	e25c      	b.n	31ea <__aeabi_ddiv+0x642>
    2d30:	9b01      	ldr	r3, [sp, #4]
    2d32:	2a01      	cmp	r2, #1
    2d34:	d000      	beq.n	2d38 <__aeabi_ddiv+0x190>
    2d36:	e1e4      	b.n	3102 <__aeabi_ddiv+0x55a>
    2d38:	4013      	ands	r3, r2
    2d3a:	469c      	mov	ip, r3
    2d3c:	2300      	movs	r3, #0
    2d3e:	2400      	movs	r4, #0
    2d40:	2200      	movs	r2, #0
    2d42:	4698      	mov	r8, r3
    2d44:	2100      	movs	r1, #0
    2d46:	0312      	lsls	r2, r2, #12
    2d48:	0b13      	lsrs	r3, r2, #12
    2d4a:	0d0a      	lsrs	r2, r1, #20
    2d4c:	0512      	lsls	r2, r2, #20
    2d4e:	431a      	orrs	r2, r3
    2d50:	0523      	lsls	r3, r4, #20
    2d52:	4c12      	ldr	r4, [pc, #72]	; (2d9c <__aeabi_ddiv+0x1f4>)
    2d54:	4640      	mov	r0, r8
    2d56:	4022      	ands	r2, r4
    2d58:	4313      	orrs	r3, r2
    2d5a:	4662      	mov	r2, ip
    2d5c:	005b      	lsls	r3, r3, #1
    2d5e:	07d2      	lsls	r2, r2, #31
    2d60:	085b      	lsrs	r3, r3, #1
    2d62:	4313      	orrs	r3, r2
    2d64:	0019      	movs	r1, r3
    2d66:	b007      	add	sp, #28
    2d68:	bc3c      	pop	{r2, r3, r4, r5}
    2d6a:	4690      	mov	r8, r2
    2d6c:	4699      	mov	r9, r3
    2d6e:	46a2      	mov	sl, r4
    2d70:	46ab      	mov	fp, r5
    2d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d74:	2300      	movs	r3, #0
    2d76:	2280      	movs	r2, #128	; 0x80
    2d78:	469c      	mov	ip, r3
    2d7a:	0312      	lsls	r2, r2, #12
    2d7c:	4698      	mov	r8, r3
    2d7e:	4c03      	ldr	r4, [pc, #12]	; (2d8c <__aeabi_ddiv+0x1e4>)
    2d80:	e7e0      	b.n	2d44 <__aeabi_ddiv+0x19c>
    2d82:	2300      	movs	r3, #0
    2d84:	4c01      	ldr	r4, [pc, #4]	; (2d8c <__aeabi_ddiv+0x1e4>)
    2d86:	2200      	movs	r2, #0
    2d88:	4698      	mov	r8, r3
    2d8a:	e7db      	b.n	2d44 <__aeabi_ddiv+0x19c>
    2d8c:	000007ff 	.word	0x000007ff
    2d90:	fffffc01 	.word	0xfffffc01
    2d94:	00003ee8 	.word	0x00003ee8
    2d98:	fffffc0d 	.word	0xfffffc0d
    2d9c:	800fffff 	.word	0x800fffff
    2da0:	45d9      	cmp	r9, fp
    2da2:	d900      	bls.n	2da6 <__aeabi_ddiv+0x1fe>
    2da4:	e139      	b.n	301a <__aeabi_ddiv+0x472>
    2da6:	d100      	bne.n	2daa <__aeabi_ddiv+0x202>
    2da8:	e134      	b.n	3014 <__aeabi_ddiv+0x46c>
    2daa:	2300      	movs	r3, #0
    2dac:	4646      	mov	r6, r8
    2dae:	464d      	mov	r5, r9
    2db0:	469a      	mov	sl, r3
    2db2:	3c01      	subs	r4, #1
    2db4:	465b      	mov	r3, fp
    2db6:	0e0a      	lsrs	r2, r1, #24
    2db8:	021b      	lsls	r3, r3, #8
    2dba:	431a      	orrs	r2, r3
    2dbc:	020b      	lsls	r3, r1, #8
    2dbe:	0c17      	lsrs	r7, r2, #16
    2dc0:	9303      	str	r3, [sp, #12]
    2dc2:	0413      	lsls	r3, r2, #16
    2dc4:	0c1b      	lsrs	r3, r3, #16
    2dc6:	0039      	movs	r1, r7
    2dc8:	0028      	movs	r0, r5
    2dca:	4690      	mov	r8, r2
    2dcc:	9301      	str	r3, [sp, #4]
    2dce:	f7ff fb4f 	bl	2470 <__udivsi3>
    2dd2:	0002      	movs	r2, r0
    2dd4:	9b01      	ldr	r3, [sp, #4]
    2dd6:	4683      	mov	fp, r0
    2dd8:	435a      	muls	r2, r3
    2dda:	0028      	movs	r0, r5
    2ddc:	0039      	movs	r1, r7
    2dde:	4691      	mov	r9, r2
    2de0:	f7ff fbcc 	bl	257c <__aeabi_uidivmod>
    2de4:	0c35      	lsrs	r5, r6, #16
    2de6:	0409      	lsls	r1, r1, #16
    2de8:	430d      	orrs	r5, r1
    2dea:	45a9      	cmp	r9, r5
    2dec:	d90d      	bls.n	2e0a <__aeabi_ddiv+0x262>
    2dee:	465b      	mov	r3, fp
    2df0:	4445      	add	r5, r8
    2df2:	3b01      	subs	r3, #1
    2df4:	45a8      	cmp	r8, r5
    2df6:	d900      	bls.n	2dfa <__aeabi_ddiv+0x252>
    2df8:	e13a      	b.n	3070 <__aeabi_ddiv+0x4c8>
    2dfa:	45a9      	cmp	r9, r5
    2dfc:	d800      	bhi.n	2e00 <__aeabi_ddiv+0x258>
    2dfe:	e137      	b.n	3070 <__aeabi_ddiv+0x4c8>
    2e00:	2302      	movs	r3, #2
    2e02:	425b      	negs	r3, r3
    2e04:	469c      	mov	ip, r3
    2e06:	4445      	add	r5, r8
    2e08:	44e3      	add	fp, ip
    2e0a:	464b      	mov	r3, r9
    2e0c:	1aeb      	subs	r3, r5, r3
    2e0e:	0039      	movs	r1, r7
    2e10:	0018      	movs	r0, r3
    2e12:	9304      	str	r3, [sp, #16]
    2e14:	f7ff fb2c 	bl	2470 <__udivsi3>
    2e18:	9b01      	ldr	r3, [sp, #4]
    2e1a:	0005      	movs	r5, r0
    2e1c:	4343      	muls	r3, r0
    2e1e:	0039      	movs	r1, r7
    2e20:	9804      	ldr	r0, [sp, #16]
    2e22:	4699      	mov	r9, r3
    2e24:	f7ff fbaa 	bl	257c <__aeabi_uidivmod>
    2e28:	0433      	lsls	r3, r6, #16
    2e2a:	0409      	lsls	r1, r1, #16
    2e2c:	0c1b      	lsrs	r3, r3, #16
    2e2e:	430b      	orrs	r3, r1
    2e30:	4599      	cmp	r9, r3
    2e32:	d909      	bls.n	2e48 <__aeabi_ddiv+0x2a0>
    2e34:	4443      	add	r3, r8
    2e36:	1e6a      	subs	r2, r5, #1
    2e38:	4598      	cmp	r8, r3
    2e3a:	d900      	bls.n	2e3e <__aeabi_ddiv+0x296>
    2e3c:	e11a      	b.n	3074 <__aeabi_ddiv+0x4cc>
    2e3e:	4599      	cmp	r9, r3
    2e40:	d800      	bhi.n	2e44 <__aeabi_ddiv+0x29c>
    2e42:	e117      	b.n	3074 <__aeabi_ddiv+0x4cc>
    2e44:	3d02      	subs	r5, #2
    2e46:	4443      	add	r3, r8
    2e48:	464a      	mov	r2, r9
    2e4a:	1a9b      	subs	r3, r3, r2
    2e4c:	465a      	mov	r2, fp
    2e4e:	0412      	lsls	r2, r2, #16
    2e50:	432a      	orrs	r2, r5
    2e52:	9903      	ldr	r1, [sp, #12]
    2e54:	4693      	mov	fp, r2
    2e56:	0c10      	lsrs	r0, r2, #16
    2e58:	0c0a      	lsrs	r2, r1, #16
    2e5a:	4691      	mov	r9, r2
    2e5c:	0409      	lsls	r1, r1, #16
    2e5e:	465a      	mov	r2, fp
    2e60:	0c09      	lsrs	r1, r1, #16
    2e62:	464e      	mov	r6, r9
    2e64:	000d      	movs	r5, r1
    2e66:	0412      	lsls	r2, r2, #16
    2e68:	0c12      	lsrs	r2, r2, #16
    2e6a:	4345      	muls	r5, r0
    2e6c:	9105      	str	r1, [sp, #20]
    2e6e:	4351      	muls	r1, r2
    2e70:	4372      	muls	r2, r6
    2e72:	4370      	muls	r0, r6
    2e74:	1952      	adds	r2, r2, r5
    2e76:	0c0e      	lsrs	r6, r1, #16
    2e78:	18b2      	adds	r2, r6, r2
    2e7a:	4295      	cmp	r5, r2
    2e7c:	d903      	bls.n	2e86 <__aeabi_ddiv+0x2de>
    2e7e:	2580      	movs	r5, #128	; 0x80
    2e80:	026d      	lsls	r5, r5, #9
    2e82:	46ac      	mov	ip, r5
    2e84:	4460      	add	r0, ip
    2e86:	0c15      	lsrs	r5, r2, #16
    2e88:	0409      	lsls	r1, r1, #16
    2e8a:	0412      	lsls	r2, r2, #16
    2e8c:	0c09      	lsrs	r1, r1, #16
    2e8e:	1828      	adds	r0, r5, r0
    2e90:	1852      	adds	r2, r2, r1
    2e92:	4283      	cmp	r3, r0
    2e94:	d200      	bcs.n	2e98 <__aeabi_ddiv+0x2f0>
    2e96:	e0ce      	b.n	3036 <__aeabi_ddiv+0x48e>
    2e98:	d100      	bne.n	2e9c <__aeabi_ddiv+0x2f4>
    2e9a:	e0c8      	b.n	302e <__aeabi_ddiv+0x486>
    2e9c:	1a1d      	subs	r5, r3, r0
    2e9e:	4653      	mov	r3, sl
    2ea0:	1a9e      	subs	r6, r3, r2
    2ea2:	45b2      	cmp	sl, r6
    2ea4:	4192      	sbcs	r2, r2
    2ea6:	4252      	negs	r2, r2
    2ea8:	1aab      	subs	r3, r5, r2
    2eaa:	469a      	mov	sl, r3
    2eac:	4598      	cmp	r8, r3
    2eae:	d100      	bne.n	2eb2 <__aeabi_ddiv+0x30a>
    2eb0:	e117      	b.n	30e2 <__aeabi_ddiv+0x53a>
    2eb2:	0039      	movs	r1, r7
    2eb4:	0018      	movs	r0, r3
    2eb6:	f7ff fadb 	bl	2470 <__udivsi3>
    2eba:	9b01      	ldr	r3, [sp, #4]
    2ebc:	0005      	movs	r5, r0
    2ebe:	4343      	muls	r3, r0
    2ec0:	0039      	movs	r1, r7
    2ec2:	4650      	mov	r0, sl
    2ec4:	9304      	str	r3, [sp, #16]
    2ec6:	f7ff fb59 	bl	257c <__aeabi_uidivmod>
    2eca:	9804      	ldr	r0, [sp, #16]
    2ecc:	040b      	lsls	r3, r1, #16
    2ece:	0c31      	lsrs	r1, r6, #16
    2ed0:	4319      	orrs	r1, r3
    2ed2:	4288      	cmp	r0, r1
    2ed4:	d909      	bls.n	2eea <__aeabi_ddiv+0x342>
    2ed6:	4441      	add	r1, r8
    2ed8:	1e6b      	subs	r3, r5, #1
    2eda:	4588      	cmp	r8, r1
    2edc:	d900      	bls.n	2ee0 <__aeabi_ddiv+0x338>
    2ede:	e107      	b.n	30f0 <__aeabi_ddiv+0x548>
    2ee0:	4288      	cmp	r0, r1
    2ee2:	d800      	bhi.n	2ee6 <__aeabi_ddiv+0x33e>
    2ee4:	e104      	b.n	30f0 <__aeabi_ddiv+0x548>
    2ee6:	3d02      	subs	r5, #2
    2ee8:	4441      	add	r1, r8
    2eea:	9b04      	ldr	r3, [sp, #16]
    2eec:	1acb      	subs	r3, r1, r3
    2eee:	0018      	movs	r0, r3
    2ef0:	0039      	movs	r1, r7
    2ef2:	9304      	str	r3, [sp, #16]
    2ef4:	f7ff fabc 	bl	2470 <__udivsi3>
    2ef8:	9b01      	ldr	r3, [sp, #4]
    2efa:	4682      	mov	sl, r0
    2efc:	4343      	muls	r3, r0
    2efe:	0039      	movs	r1, r7
    2f00:	9804      	ldr	r0, [sp, #16]
    2f02:	9301      	str	r3, [sp, #4]
    2f04:	f7ff fb3a 	bl	257c <__aeabi_uidivmod>
    2f08:	9801      	ldr	r0, [sp, #4]
    2f0a:	040b      	lsls	r3, r1, #16
    2f0c:	0431      	lsls	r1, r6, #16
    2f0e:	0c09      	lsrs	r1, r1, #16
    2f10:	4319      	orrs	r1, r3
    2f12:	4288      	cmp	r0, r1
    2f14:	d90d      	bls.n	2f32 <__aeabi_ddiv+0x38a>
    2f16:	4653      	mov	r3, sl
    2f18:	4441      	add	r1, r8
    2f1a:	3b01      	subs	r3, #1
    2f1c:	4588      	cmp	r8, r1
    2f1e:	d900      	bls.n	2f22 <__aeabi_ddiv+0x37a>
    2f20:	e0e8      	b.n	30f4 <__aeabi_ddiv+0x54c>
    2f22:	4288      	cmp	r0, r1
    2f24:	d800      	bhi.n	2f28 <__aeabi_ddiv+0x380>
    2f26:	e0e5      	b.n	30f4 <__aeabi_ddiv+0x54c>
    2f28:	2302      	movs	r3, #2
    2f2a:	425b      	negs	r3, r3
    2f2c:	469c      	mov	ip, r3
    2f2e:	4441      	add	r1, r8
    2f30:	44e2      	add	sl, ip
    2f32:	9b01      	ldr	r3, [sp, #4]
    2f34:	042d      	lsls	r5, r5, #16
    2f36:	1ace      	subs	r6, r1, r3
    2f38:	4651      	mov	r1, sl
    2f3a:	4329      	orrs	r1, r5
    2f3c:	9d05      	ldr	r5, [sp, #20]
    2f3e:	464f      	mov	r7, r9
    2f40:	002a      	movs	r2, r5
    2f42:	040b      	lsls	r3, r1, #16
    2f44:	0c08      	lsrs	r0, r1, #16
    2f46:	0c1b      	lsrs	r3, r3, #16
    2f48:	435a      	muls	r2, r3
    2f4a:	4345      	muls	r5, r0
    2f4c:	437b      	muls	r3, r7
    2f4e:	4378      	muls	r0, r7
    2f50:	195b      	adds	r3, r3, r5
    2f52:	0c17      	lsrs	r7, r2, #16
    2f54:	18fb      	adds	r3, r7, r3
    2f56:	429d      	cmp	r5, r3
    2f58:	d903      	bls.n	2f62 <__aeabi_ddiv+0x3ba>
    2f5a:	2580      	movs	r5, #128	; 0x80
    2f5c:	026d      	lsls	r5, r5, #9
    2f5e:	46ac      	mov	ip, r5
    2f60:	4460      	add	r0, ip
    2f62:	0c1d      	lsrs	r5, r3, #16
    2f64:	0412      	lsls	r2, r2, #16
    2f66:	041b      	lsls	r3, r3, #16
    2f68:	0c12      	lsrs	r2, r2, #16
    2f6a:	1828      	adds	r0, r5, r0
    2f6c:	189b      	adds	r3, r3, r2
    2f6e:	4286      	cmp	r6, r0
    2f70:	d200      	bcs.n	2f74 <__aeabi_ddiv+0x3cc>
    2f72:	e093      	b.n	309c <__aeabi_ddiv+0x4f4>
    2f74:	d100      	bne.n	2f78 <__aeabi_ddiv+0x3d0>
    2f76:	e08e      	b.n	3096 <__aeabi_ddiv+0x4ee>
    2f78:	2301      	movs	r3, #1
    2f7a:	4319      	orrs	r1, r3
    2f7c:	4ba0      	ldr	r3, [pc, #640]	; (3200 <__aeabi_ddiv+0x658>)
    2f7e:	18e3      	adds	r3, r4, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	dc00      	bgt.n	2f86 <__aeabi_ddiv+0x3de>
    2f84:	e099      	b.n	30ba <__aeabi_ddiv+0x512>
    2f86:	074a      	lsls	r2, r1, #29
    2f88:	d000      	beq.n	2f8c <__aeabi_ddiv+0x3e4>
    2f8a:	e09e      	b.n	30ca <__aeabi_ddiv+0x522>
    2f8c:	465a      	mov	r2, fp
    2f8e:	01d2      	lsls	r2, r2, #7
    2f90:	d506      	bpl.n	2fa0 <__aeabi_ddiv+0x3f8>
    2f92:	465a      	mov	r2, fp
    2f94:	4b9b      	ldr	r3, [pc, #620]	; (3204 <__aeabi_ddiv+0x65c>)
    2f96:	401a      	ands	r2, r3
    2f98:	2380      	movs	r3, #128	; 0x80
    2f9a:	4693      	mov	fp, r2
    2f9c:	00db      	lsls	r3, r3, #3
    2f9e:	18e3      	adds	r3, r4, r3
    2fa0:	4a99      	ldr	r2, [pc, #612]	; (3208 <__aeabi_ddiv+0x660>)
    2fa2:	4293      	cmp	r3, r2
    2fa4:	dd68      	ble.n	3078 <__aeabi_ddiv+0x4d0>
    2fa6:	2301      	movs	r3, #1
    2fa8:	9a02      	ldr	r2, [sp, #8]
    2faa:	4c98      	ldr	r4, [pc, #608]	; (320c <__aeabi_ddiv+0x664>)
    2fac:	401a      	ands	r2, r3
    2fae:	2300      	movs	r3, #0
    2fb0:	4694      	mov	ip, r2
    2fb2:	4698      	mov	r8, r3
    2fb4:	2200      	movs	r2, #0
    2fb6:	e6c5      	b.n	2d44 <__aeabi_ddiv+0x19c>
    2fb8:	2280      	movs	r2, #128	; 0x80
    2fba:	464b      	mov	r3, r9
    2fbc:	0312      	lsls	r2, r2, #12
    2fbe:	4213      	tst	r3, r2
    2fc0:	d00a      	beq.n	2fd8 <__aeabi_ddiv+0x430>
    2fc2:	465b      	mov	r3, fp
    2fc4:	4213      	tst	r3, r2
    2fc6:	d106      	bne.n	2fd6 <__aeabi_ddiv+0x42e>
    2fc8:	431a      	orrs	r2, r3
    2fca:	0312      	lsls	r2, r2, #12
    2fcc:	0b12      	lsrs	r2, r2, #12
    2fce:	46ac      	mov	ip, r5
    2fd0:	4688      	mov	r8, r1
    2fd2:	4c8e      	ldr	r4, [pc, #568]	; (320c <__aeabi_ddiv+0x664>)
    2fd4:	e6b6      	b.n	2d44 <__aeabi_ddiv+0x19c>
    2fd6:	464b      	mov	r3, r9
    2fd8:	431a      	orrs	r2, r3
    2fda:	0312      	lsls	r2, r2, #12
    2fdc:	0b12      	lsrs	r2, r2, #12
    2fde:	46bc      	mov	ip, r7
    2fe0:	4c8a      	ldr	r4, [pc, #552]	; (320c <__aeabi_ddiv+0x664>)
    2fe2:	e6af      	b.n	2d44 <__aeabi_ddiv+0x19c>
    2fe4:	0003      	movs	r3, r0
    2fe6:	465a      	mov	r2, fp
    2fe8:	3b28      	subs	r3, #40	; 0x28
    2fea:	409a      	lsls	r2, r3
    2fec:	2300      	movs	r3, #0
    2fee:	4691      	mov	r9, r2
    2ff0:	4698      	mov	r8, r3
    2ff2:	e657      	b.n	2ca4 <__aeabi_ddiv+0xfc>
    2ff4:	4658      	mov	r0, fp
    2ff6:	f000 ff0d 	bl	3e14 <__clzsi2>
    2ffa:	3020      	adds	r0, #32
    2ffc:	e640      	b.n	2c80 <__aeabi_ddiv+0xd8>
    2ffe:	0003      	movs	r3, r0
    3000:	4652      	mov	r2, sl
    3002:	3b28      	subs	r3, #40	; 0x28
    3004:	409a      	lsls	r2, r3
    3006:	2100      	movs	r1, #0
    3008:	4693      	mov	fp, r2
    300a:	e677      	b.n	2cfc <__aeabi_ddiv+0x154>
    300c:	f000 ff02 	bl	3e14 <__clzsi2>
    3010:	3020      	adds	r0, #32
    3012:	e65f      	b.n	2cd4 <__aeabi_ddiv+0x12c>
    3014:	4588      	cmp	r8, r1
    3016:	d200      	bcs.n	301a <__aeabi_ddiv+0x472>
    3018:	e6c7      	b.n	2daa <__aeabi_ddiv+0x202>
    301a:	464b      	mov	r3, r9
    301c:	07de      	lsls	r6, r3, #31
    301e:	085d      	lsrs	r5, r3, #1
    3020:	4643      	mov	r3, r8
    3022:	085b      	lsrs	r3, r3, #1
    3024:	431e      	orrs	r6, r3
    3026:	4643      	mov	r3, r8
    3028:	07db      	lsls	r3, r3, #31
    302a:	469a      	mov	sl, r3
    302c:	e6c2      	b.n	2db4 <__aeabi_ddiv+0x20c>
    302e:	2500      	movs	r5, #0
    3030:	4592      	cmp	sl, r2
    3032:	d300      	bcc.n	3036 <__aeabi_ddiv+0x48e>
    3034:	e733      	b.n	2e9e <__aeabi_ddiv+0x2f6>
    3036:	9e03      	ldr	r6, [sp, #12]
    3038:	4659      	mov	r1, fp
    303a:	46b4      	mov	ip, r6
    303c:	44e2      	add	sl, ip
    303e:	45b2      	cmp	sl, r6
    3040:	41ad      	sbcs	r5, r5
    3042:	426d      	negs	r5, r5
    3044:	4445      	add	r5, r8
    3046:	18eb      	adds	r3, r5, r3
    3048:	3901      	subs	r1, #1
    304a:	4598      	cmp	r8, r3
    304c:	d207      	bcs.n	305e <__aeabi_ddiv+0x4b6>
    304e:	4298      	cmp	r0, r3
    3050:	d900      	bls.n	3054 <__aeabi_ddiv+0x4ac>
    3052:	e07f      	b.n	3154 <__aeabi_ddiv+0x5ac>
    3054:	d100      	bne.n	3058 <__aeabi_ddiv+0x4b0>
    3056:	e0bc      	b.n	31d2 <__aeabi_ddiv+0x62a>
    3058:	1a1d      	subs	r5, r3, r0
    305a:	468b      	mov	fp, r1
    305c:	e71f      	b.n	2e9e <__aeabi_ddiv+0x2f6>
    305e:	4598      	cmp	r8, r3
    3060:	d1fa      	bne.n	3058 <__aeabi_ddiv+0x4b0>
    3062:	9d03      	ldr	r5, [sp, #12]
    3064:	4555      	cmp	r5, sl
    3066:	d9f2      	bls.n	304e <__aeabi_ddiv+0x4a6>
    3068:	4643      	mov	r3, r8
    306a:	468b      	mov	fp, r1
    306c:	1a1d      	subs	r5, r3, r0
    306e:	e716      	b.n	2e9e <__aeabi_ddiv+0x2f6>
    3070:	469b      	mov	fp, r3
    3072:	e6ca      	b.n	2e0a <__aeabi_ddiv+0x262>
    3074:	0015      	movs	r5, r2
    3076:	e6e7      	b.n	2e48 <__aeabi_ddiv+0x2a0>
    3078:	465a      	mov	r2, fp
    307a:	08c9      	lsrs	r1, r1, #3
    307c:	0752      	lsls	r2, r2, #29
    307e:	430a      	orrs	r2, r1
    3080:	055b      	lsls	r3, r3, #21
    3082:	4690      	mov	r8, r2
    3084:	0d5c      	lsrs	r4, r3, #21
    3086:	465a      	mov	r2, fp
    3088:	2301      	movs	r3, #1
    308a:	9902      	ldr	r1, [sp, #8]
    308c:	0252      	lsls	r2, r2, #9
    308e:	4019      	ands	r1, r3
    3090:	0b12      	lsrs	r2, r2, #12
    3092:	468c      	mov	ip, r1
    3094:	e656      	b.n	2d44 <__aeabi_ddiv+0x19c>
    3096:	2b00      	cmp	r3, #0
    3098:	d100      	bne.n	309c <__aeabi_ddiv+0x4f4>
    309a:	e76f      	b.n	2f7c <__aeabi_ddiv+0x3d4>
    309c:	4446      	add	r6, r8
    309e:	1e4a      	subs	r2, r1, #1
    30a0:	45b0      	cmp	r8, r6
    30a2:	d929      	bls.n	30f8 <__aeabi_ddiv+0x550>
    30a4:	0011      	movs	r1, r2
    30a6:	4286      	cmp	r6, r0
    30a8:	d000      	beq.n	30ac <__aeabi_ddiv+0x504>
    30aa:	e765      	b.n	2f78 <__aeabi_ddiv+0x3d0>
    30ac:	9a03      	ldr	r2, [sp, #12]
    30ae:	4293      	cmp	r3, r2
    30b0:	d000      	beq.n	30b4 <__aeabi_ddiv+0x50c>
    30b2:	e761      	b.n	2f78 <__aeabi_ddiv+0x3d0>
    30b4:	e762      	b.n	2f7c <__aeabi_ddiv+0x3d4>
    30b6:	2101      	movs	r1, #1
    30b8:	4249      	negs	r1, r1
    30ba:	2001      	movs	r0, #1
    30bc:	1ac2      	subs	r2, r0, r3
    30be:	2a38      	cmp	r2, #56	; 0x38
    30c0:	dd21      	ble.n	3106 <__aeabi_ddiv+0x55e>
    30c2:	9b02      	ldr	r3, [sp, #8]
    30c4:	4003      	ands	r3, r0
    30c6:	469c      	mov	ip, r3
    30c8:	e638      	b.n	2d3c <__aeabi_ddiv+0x194>
    30ca:	220f      	movs	r2, #15
    30cc:	400a      	ands	r2, r1
    30ce:	2a04      	cmp	r2, #4
    30d0:	d100      	bne.n	30d4 <__aeabi_ddiv+0x52c>
    30d2:	e75b      	b.n	2f8c <__aeabi_ddiv+0x3e4>
    30d4:	000a      	movs	r2, r1
    30d6:	1d11      	adds	r1, r2, #4
    30d8:	4291      	cmp	r1, r2
    30da:	4192      	sbcs	r2, r2
    30dc:	4252      	negs	r2, r2
    30de:	4493      	add	fp, r2
    30e0:	e754      	b.n	2f8c <__aeabi_ddiv+0x3e4>
    30e2:	4b47      	ldr	r3, [pc, #284]	; (3200 <__aeabi_ddiv+0x658>)
    30e4:	18e3      	adds	r3, r4, r3
    30e6:	2b00      	cmp	r3, #0
    30e8:	dde5      	ble.n	30b6 <__aeabi_ddiv+0x50e>
    30ea:	2201      	movs	r2, #1
    30ec:	4252      	negs	r2, r2
    30ee:	e7f2      	b.n	30d6 <__aeabi_ddiv+0x52e>
    30f0:	001d      	movs	r5, r3
    30f2:	e6fa      	b.n	2eea <__aeabi_ddiv+0x342>
    30f4:	469a      	mov	sl, r3
    30f6:	e71c      	b.n	2f32 <__aeabi_ddiv+0x38a>
    30f8:	42b0      	cmp	r0, r6
    30fa:	d839      	bhi.n	3170 <__aeabi_ddiv+0x5c8>
    30fc:	d06e      	beq.n	31dc <__aeabi_ddiv+0x634>
    30fe:	0011      	movs	r1, r2
    3100:	e73a      	b.n	2f78 <__aeabi_ddiv+0x3d0>
    3102:	9302      	str	r3, [sp, #8]
    3104:	e73a      	b.n	2f7c <__aeabi_ddiv+0x3d4>
    3106:	2a1f      	cmp	r2, #31
    3108:	dc3c      	bgt.n	3184 <__aeabi_ddiv+0x5dc>
    310a:	2320      	movs	r3, #32
    310c:	1a9b      	subs	r3, r3, r2
    310e:	000c      	movs	r4, r1
    3110:	4658      	mov	r0, fp
    3112:	4099      	lsls	r1, r3
    3114:	4098      	lsls	r0, r3
    3116:	1e4b      	subs	r3, r1, #1
    3118:	4199      	sbcs	r1, r3
    311a:	465b      	mov	r3, fp
    311c:	40d4      	lsrs	r4, r2
    311e:	40d3      	lsrs	r3, r2
    3120:	4320      	orrs	r0, r4
    3122:	4308      	orrs	r0, r1
    3124:	001a      	movs	r2, r3
    3126:	0743      	lsls	r3, r0, #29
    3128:	d009      	beq.n	313e <__aeabi_ddiv+0x596>
    312a:	230f      	movs	r3, #15
    312c:	4003      	ands	r3, r0
    312e:	2b04      	cmp	r3, #4
    3130:	d005      	beq.n	313e <__aeabi_ddiv+0x596>
    3132:	0001      	movs	r1, r0
    3134:	1d08      	adds	r0, r1, #4
    3136:	4288      	cmp	r0, r1
    3138:	419b      	sbcs	r3, r3
    313a:	425b      	negs	r3, r3
    313c:	18d2      	adds	r2, r2, r3
    313e:	0213      	lsls	r3, r2, #8
    3140:	d53a      	bpl.n	31b8 <__aeabi_ddiv+0x610>
    3142:	2301      	movs	r3, #1
    3144:	9a02      	ldr	r2, [sp, #8]
    3146:	2401      	movs	r4, #1
    3148:	401a      	ands	r2, r3
    314a:	2300      	movs	r3, #0
    314c:	4694      	mov	ip, r2
    314e:	4698      	mov	r8, r3
    3150:	2200      	movs	r2, #0
    3152:	e5f7      	b.n	2d44 <__aeabi_ddiv+0x19c>
    3154:	2102      	movs	r1, #2
    3156:	4249      	negs	r1, r1
    3158:	468c      	mov	ip, r1
    315a:	9d03      	ldr	r5, [sp, #12]
    315c:	44e3      	add	fp, ip
    315e:	46ac      	mov	ip, r5
    3160:	44e2      	add	sl, ip
    3162:	45aa      	cmp	sl, r5
    3164:	41ad      	sbcs	r5, r5
    3166:	426d      	negs	r5, r5
    3168:	4445      	add	r5, r8
    316a:	18ed      	adds	r5, r5, r3
    316c:	1a2d      	subs	r5, r5, r0
    316e:	e696      	b.n	2e9e <__aeabi_ddiv+0x2f6>
    3170:	1e8a      	subs	r2, r1, #2
    3172:	9903      	ldr	r1, [sp, #12]
    3174:	004d      	lsls	r5, r1, #1
    3176:	428d      	cmp	r5, r1
    3178:	4189      	sbcs	r1, r1
    317a:	4249      	negs	r1, r1
    317c:	4441      	add	r1, r8
    317e:	1876      	adds	r6, r6, r1
    3180:	9503      	str	r5, [sp, #12]
    3182:	e78f      	b.n	30a4 <__aeabi_ddiv+0x4fc>
    3184:	201f      	movs	r0, #31
    3186:	4240      	negs	r0, r0
    3188:	1ac3      	subs	r3, r0, r3
    318a:	4658      	mov	r0, fp
    318c:	40d8      	lsrs	r0, r3
    318e:	0003      	movs	r3, r0
    3190:	2a20      	cmp	r2, #32
    3192:	d028      	beq.n	31e6 <__aeabi_ddiv+0x63e>
    3194:	2040      	movs	r0, #64	; 0x40
    3196:	465d      	mov	r5, fp
    3198:	1a82      	subs	r2, r0, r2
    319a:	4095      	lsls	r5, r2
    319c:	4329      	orrs	r1, r5
    319e:	1e4a      	subs	r2, r1, #1
    31a0:	4191      	sbcs	r1, r2
    31a2:	4319      	orrs	r1, r3
    31a4:	2307      	movs	r3, #7
    31a6:	2200      	movs	r2, #0
    31a8:	400b      	ands	r3, r1
    31aa:	d009      	beq.n	31c0 <__aeabi_ddiv+0x618>
    31ac:	230f      	movs	r3, #15
    31ae:	2200      	movs	r2, #0
    31b0:	400b      	ands	r3, r1
    31b2:	0008      	movs	r0, r1
    31b4:	2b04      	cmp	r3, #4
    31b6:	d1bd      	bne.n	3134 <__aeabi_ddiv+0x58c>
    31b8:	0001      	movs	r1, r0
    31ba:	0753      	lsls	r3, r2, #29
    31bc:	0252      	lsls	r2, r2, #9
    31be:	0b12      	lsrs	r2, r2, #12
    31c0:	08c9      	lsrs	r1, r1, #3
    31c2:	4319      	orrs	r1, r3
    31c4:	2301      	movs	r3, #1
    31c6:	4688      	mov	r8, r1
    31c8:	9902      	ldr	r1, [sp, #8]
    31ca:	2400      	movs	r4, #0
    31cc:	4019      	ands	r1, r3
    31ce:	468c      	mov	ip, r1
    31d0:	e5b8      	b.n	2d44 <__aeabi_ddiv+0x19c>
    31d2:	4552      	cmp	r2, sl
    31d4:	d8be      	bhi.n	3154 <__aeabi_ddiv+0x5ac>
    31d6:	468b      	mov	fp, r1
    31d8:	2500      	movs	r5, #0
    31da:	e660      	b.n	2e9e <__aeabi_ddiv+0x2f6>
    31dc:	9d03      	ldr	r5, [sp, #12]
    31de:	429d      	cmp	r5, r3
    31e0:	d3c6      	bcc.n	3170 <__aeabi_ddiv+0x5c8>
    31e2:	0011      	movs	r1, r2
    31e4:	e762      	b.n	30ac <__aeabi_ddiv+0x504>
    31e6:	2500      	movs	r5, #0
    31e8:	e7d8      	b.n	319c <__aeabi_ddiv+0x5f4>
    31ea:	2280      	movs	r2, #128	; 0x80
    31ec:	465b      	mov	r3, fp
    31ee:	0312      	lsls	r2, r2, #12
    31f0:	431a      	orrs	r2, r3
    31f2:	9b01      	ldr	r3, [sp, #4]
    31f4:	0312      	lsls	r2, r2, #12
    31f6:	0b12      	lsrs	r2, r2, #12
    31f8:	469c      	mov	ip, r3
    31fa:	4688      	mov	r8, r1
    31fc:	4c03      	ldr	r4, [pc, #12]	; (320c <__aeabi_ddiv+0x664>)
    31fe:	e5a1      	b.n	2d44 <__aeabi_ddiv+0x19c>
    3200:	000003ff 	.word	0x000003ff
    3204:	feffffff 	.word	0xfeffffff
    3208:	000007fe 	.word	0x000007fe
    320c:	000007ff 	.word	0x000007ff

00003210 <__aeabi_dmul>:
    3210:	b5f0      	push	{r4, r5, r6, r7, lr}
    3212:	4657      	mov	r7, sl
    3214:	4645      	mov	r5, r8
    3216:	46de      	mov	lr, fp
    3218:	464e      	mov	r6, r9
    321a:	b5e0      	push	{r5, r6, r7, lr}
    321c:	030c      	lsls	r4, r1, #12
    321e:	4698      	mov	r8, r3
    3220:	004e      	lsls	r6, r1, #1
    3222:	0b23      	lsrs	r3, r4, #12
    3224:	b087      	sub	sp, #28
    3226:	0007      	movs	r7, r0
    3228:	4692      	mov	sl, r2
    322a:	469b      	mov	fp, r3
    322c:	0d76      	lsrs	r6, r6, #21
    322e:	0fcd      	lsrs	r5, r1, #31
    3230:	2e00      	cmp	r6, #0
    3232:	d06b      	beq.n	330c <__aeabi_dmul+0xfc>
    3234:	4b6d      	ldr	r3, [pc, #436]	; (33ec <__aeabi_dmul+0x1dc>)
    3236:	429e      	cmp	r6, r3
    3238:	d035      	beq.n	32a6 <__aeabi_dmul+0x96>
    323a:	2480      	movs	r4, #128	; 0x80
    323c:	465b      	mov	r3, fp
    323e:	0f42      	lsrs	r2, r0, #29
    3240:	0424      	lsls	r4, r4, #16
    3242:	00db      	lsls	r3, r3, #3
    3244:	4314      	orrs	r4, r2
    3246:	431c      	orrs	r4, r3
    3248:	00c3      	lsls	r3, r0, #3
    324a:	4699      	mov	r9, r3
    324c:	4b68      	ldr	r3, [pc, #416]	; (33f0 <__aeabi_dmul+0x1e0>)
    324e:	46a3      	mov	fp, r4
    3250:	469c      	mov	ip, r3
    3252:	2300      	movs	r3, #0
    3254:	2700      	movs	r7, #0
    3256:	4466      	add	r6, ip
    3258:	9302      	str	r3, [sp, #8]
    325a:	4643      	mov	r3, r8
    325c:	031c      	lsls	r4, r3, #12
    325e:	005a      	lsls	r2, r3, #1
    3260:	0fdb      	lsrs	r3, r3, #31
    3262:	4650      	mov	r0, sl
    3264:	0b24      	lsrs	r4, r4, #12
    3266:	0d52      	lsrs	r2, r2, #21
    3268:	4698      	mov	r8, r3
    326a:	d100      	bne.n	326e <__aeabi_dmul+0x5e>
    326c:	e076      	b.n	335c <__aeabi_dmul+0x14c>
    326e:	4b5f      	ldr	r3, [pc, #380]	; (33ec <__aeabi_dmul+0x1dc>)
    3270:	429a      	cmp	r2, r3
    3272:	d06d      	beq.n	3350 <__aeabi_dmul+0x140>
    3274:	2380      	movs	r3, #128	; 0x80
    3276:	0f41      	lsrs	r1, r0, #29
    3278:	041b      	lsls	r3, r3, #16
    327a:	430b      	orrs	r3, r1
    327c:	495c      	ldr	r1, [pc, #368]	; (33f0 <__aeabi_dmul+0x1e0>)
    327e:	00e4      	lsls	r4, r4, #3
    3280:	468c      	mov	ip, r1
    3282:	431c      	orrs	r4, r3
    3284:	00c3      	lsls	r3, r0, #3
    3286:	2000      	movs	r0, #0
    3288:	4462      	add	r2, ip
    328a:	4641      	mov	r1, r8
    328c:	18b6      	adds	r6, r6, r2
    328e:	4069      	eors	r1, r5
    3290:	1c72      	adds	r2, r6, #1
    3292:	9101      	str	r1, [sp, #4]
    3294:	4694      	mov	ip, r2
    3296:	4307      	orrs	r7, r0
    3298:	2f0f      	cmp	r7, #15
    329a:	d900      	bls.n	329e <__aeabi_dmul+0x8e>
    329c:	e0b0      	b.n	3400 <__aeabi_dmul+0x1f0>
    329e:	4a55      	ldr	r2, [pc, #340]	; (33f4 <__aeabi_dmul+0x1e4>)
    32a0:	00bf      	lsls	r7, r7, #2
    32a2:	59d2      	ldr	r2, [r2, r7]
    32a4:	4697      	mov	pc, r2
    32a6:	465b      	mov	r3, fp
    32a8:	4303      	orrs	r3, r0
    32aa:	4699      	mov	r9, r3
    32ac:	d000      	beq.n	32b0 <__aeabi_dmul+0xa0>
    32ae:	e087      	b.n	33c0 <__aeabi_dmul+0x1b0>
    32b0:	2300      	movs	r3, #0
    32b2:	469b      	mov	fp, r3
    32b4:	3302      	adds	r3, #2
    32b6:	2708      	movs	r7, #8
    32b8:	9302      	str	r3, [sp, #8]
    32ba:	e7ce      	b.n	325a <__aeabi_dmul+0x4a>
    32bc:	4642      	mov	r2, r8
    32be:	9201      	str	r2, [sp, #4]
    32c0:	2802      	cmp	r0, #2
    32c2:	d067      	beq.n	3394 <__aeabi_dmul+0x184>
    32c4:	2803      	cmp	r0, #3
    32c6:	d100      	bne.n	32ca <__aeabi_dmul+0xba>
    32c8:	e20e      	b.n	36e8 <__aeabi_dmul+0x4d8>
    32ca:	2801      	cmp	r0, #1
    32cc:	d000      	beq.n	32d0 <__aeabi_dmul+0xc0>
    32ce:	e162      	b.n	3596 <__aeabi_dmul+0x386>
    32d0:	2300      	movs	r3, #0
    32d2:	2400      	movs	r4, #0
    32d4:	2200      	movs	r2, #0
    32d6:	4699      	mov	r9, r3
    32d8:	9901      	ldr	r1, [sp, #4]
    32da:	4001      	ands	r1, r0
    32dc:	b2cd      	uxtb	r5, r1
    32de:	2100      	movs	r1, #0
    32e0:	0312      	lsls	r2, r2, #12
    32e2:	0d0b      	lsrs	r3, r1, #20
    32e4:	0b12      	lsrs	r2, r2, #12
    32e6:	051b      	lsls	r3, r3, #20
    32e8:	4313      	orrs	r3, r2
    32ea:	4a43      	ldr	r2, [pc, #268]	; (33f8 <__aeabi_dmul+0x1e8>)
    32ec:	0524      	lsls	r4, r4, #20
    32ee:	4013      	ands	r3, r2
    32f0:	431c      	orrs	r4, r3
    32f2:	0064      	lsls	r4, r4, #1
    32f4:	07ed      	lsls	r5, r5, #31
    32f6:	0864      	lsrs	r4, r4, #1
    32f8:	432c      	orrs	r4, r5
    32fa:	4648      	mov	r0, r9
    32fc:	0021      	movs	r1, r4
    32fe:	b007      	add	sp, #28
    3300:	bc3c      	pop	{r2, r3, r4, r5}
    3302:	4690      	mov	r8, r2
    3304:	4699      	mov	r9, r3
    3306:	46a2      	mov	sl, r4
    3308:	46ab      	mov	fp, r5
    330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    330c:	4303      	orrs	r3, r0
    330e:	4699      	mov	r9, r3
    3310:	d04f      	beq.n	33b2 <__aeabi_dmul+0x1a2>
    3312:	465b      	mov	r3, fp
    3314:	2b00      	cmp	r3, #0
    3316:	d100      	bne.n	331a <__aeabi_dmul+0x10a>
    3318:	e189      	b.n	362e <__aeabi_dmul+0x41e>
    331a:	4658      	mov	r0, fp
    331c:	f000 fd7a 	bl	3e14 <__clzsi2>
    3320:	0003      	movs	r3, r0
    3322:	3b0b      	subs	r3, #11
    3324:	2b1c      	cmp	r3, #28
    3326:	dd00      	ble.n	332a <__aeabi_dmul+0x11a>
    3328:	e17a      	b.n	3620 <__aeabi_dmul+0x410>
    332a:	221d      	movs	r2, #29
    332c:	1ad3      	subs	r3, r2, r3
    332e:	003a      	movs	r2, r7
    3330:	0001      	movs	r1, r0
    3332:	465c      	mov	r4, fp
    3334:	40da      	lsrs	r2, r3
    3336:	3908      	subs	r1, #8
    3338:	408c      	lsls	r4, r1
    333a:	0013      	movs	r3, r2
    333c:	408f      	lsls	r7, r1
    333e:	4323      	orrs	r3, r4
    3340:	469b      	mov	fp, r3
    3342:	46b9      	mov	r9, r7
    3344:	2300      	movs	r3, #0
    3346:	4e2d      	ldr	r6, [pc, #180]	; (33fc <__aeabi_dmul+0x1ec>)
    3348:	2700      	movs	r7, #0
    334a:	1a36      	subs	r6, r6, r0
    334c:	9302      	str	r3, [sp, #8]
    334e:	e784      	b.n	325a <__aeabi_dmul+0x4a>
    3350:	4653      	mov	r3, sl
    3352:	4323      	orrs	r3, r4
    3354:	d12a      	bne.n	33ac <__aeabi_dmul+0x19c>
    3356:	2400      	movs	r4, #0
    3358:	2002      	movs	r0, #2
    335a:	e796      	b.n	328a <__aeabi_dmul+0x7a>
    335c:	4653      	mov	r3, sl
    335e:	4323      	orrs	r3, r4
    3360:	d020      	beq.n	33a4 <__aeabi_dmul+0x194>
    3362:	2c00      	cmp	r4, #0
    3364:	d100      	bne.n	3368 <__aeabi_dmul+0x158>
    3366:	e157      	b.n	3618 <__aeabi_dmul+0x408>
    3368:	0020      	movs	r0, r4
    336a:	f000 fd53 	bl	3e14 <__clzsi2>
    336e:	0003      	movs	r3, r0
    3370:	3b0b      	subs	r3, #11
    3372:	2b1c      	cmp	r3, #28
    3374:	dd00      	ble.n	3378 <__aeabi_dmul+0x168>
    3376:	e149      	b.n	360c <__aeabi_dmul+0x3fc>
    3378:	211d      	movs	r1, #29
    337a:	1acb      	subs	r3, r1, r3
    337c:	4651      	mov	r1, sl
    337e:	0002      	movs	r2, r0
    3380:	40d9      	lsrs	r1, r3
    3382:	4653      	mov	r3, sl
    3384:	3a08      	subs	r2, #8
    3386:	4094      	lsls	r4, r2
    3388:	4093      	lsls	r3, r2
    338a:	430c      	orrs	r4, r1
    338c:	4a1b      	ldr	r2, [pc, #108]	; (33fc <__aeabi_dmul+0x1ec>)
    338e:	1a12      	subs	r2, r2, r0
    3390:	2000      	movs	r0, #0
    3392:	e77a      	b.n	328a <__aeabi_dmul+0x7a>
    3394:	2501      	movs	r5, #1
    3396:	9b01      	ldr	r3, [sp, #4]
    3398:	4c14      	ldr	r4, [pc, #80]	; (33ec <__aeabi_dmul+0x1dc>)
    339a:	401d      	ands	r5, r3
    339c:	2300      	movs	r3, #0
    339e:	2200      	movs	r2, #0
    33a0:	4699      	mov	r9, r3
    33a2:	e79c      	b.n	32de <__aeabi_dmul+0xce>
    33a4:	2400      	movs	r4, #0
    33a6:	2200      	movs	r2, #0
    33a8:	2001      	movs	r0, #1
    33aa:	e76e      	b.n	328a <__aeabi_dmul+0x7a>
    33ac:	4653      	mov	r3, sl
    33ae:	2003      	movs	r0, #3
    33b0:	e76b      	b.n	328a <__aeabi_dmul+0x7a>
    33b2:	2300      	movs	r3, #0
    33b4:	469b      	mov	fp, r3
    33b6:	3301      	adds	r3, #1
    33b8:	2704      	movs	r7, #4
    33ba:	2600      	movs	r6, #0
    33bc:	9302      	str	r3, [sp, #8]
    33be:	e74c      	b.n	325a <__aeabi_dmul+0x4a>
    33c0:	2303      	movs	r3, #3
    33c2:	4681      	mov	r9, r0
    33c4:	270c      	movs	r7, #12
    33c6:	9302      	str	r3, [sp, #8]
    33c8:	e747      	b.n	325a <__aeabi_dmul+0x4a>
    33ca:	2280      	movs	r2, #128	; 0x80
    33cc:	2300      	movs	r3, #0
    33ce:	2500      	movs	r5, #0
    33d0:	0312      	lsls	r2, r2, #12
    33d2:	4699      	mov	r9, r3
    33d4:	4c05      	ldr	r4, [pc, #20]	; (33ec <__aeabi_dmul+0x1dc>)
    33d6:	e782      	b.n	32de <__aeabi_dmul+0xce>
    33d8:	465c      	mov	r4, fp
    33da:	464b      	mov	r3, r9
    33dc:	9802      	ldr	r0, [sp, #8]
    33de:	e76f      	b.n	32c0 <__aeabi_dmul+0xb0>
    33e0:	465c      	mov	r4, fp
    33e2:	464b      	mov	r3, r9
    33e4:	9501      	str	r5, [sp, #4]
    33e6:	9802      	ldr	r0, [sp, #8]
    33e8:	e76a      	b.n	32c0 <__aeabi_dmul+0xb0>
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	000007ff 	.word	0x000007ff
    33f0:	fffffc01 	.word	0xfffffc01
    33f4:	00003f28 	.word	0x00003f28
    33f8:	800fffff 	.word	0x800fffff
    33fc:	fffffc0d 	.word	0xfffffc0d
    3400:	464a      	mov	r2, r9
    3402:	4649      	mov	r1, r9
    3404:	0c17      	lsrs	r7, r2, #16
    3406:	0c1a      	lsrs	r2, r3, #16
    3408:	041b      	lsls	r3, r3, #16
    340a:	0c1b      	lsrs	r3, r3, #16
    340c:	0408      	lsls	r0, r1, #16
    340e:	0019      	movs	r1, r3
    3410:	0c00      	lsrs	r0, r0, #16
    3412:	4341      	muls	r1, r0
    3414:	0015      	movs	r5, r2
    3416:	4688      	mov	r8, r1
    3418:	0019      	movs	r1, r3
    341a:	437d      	muls	r5, r7
    341c:	4379      	muls	r1, r7
    341e:	9503      	str	r5, [sp, #12]
    3420:	4689      	mov	r9, r1
    3422:	0029      	movs	r1, r5
    3424:	0015      	movs	r5, r2
    3426:	4345      	muls	r5, r0
    3428:	444d      	add	r5, r9
    342a:	9502      	str	r5, [sp, #8]
    342c:	4645      	mov	r5, r8
    342e:	0c2d      	lsrs	r5, r5, #16
    3430:	46aa      	mov	sl, r5
    3432:	9d02      	ldr	r5, [sp, #8]
    3434:	4455      	add	r5, sl
    3436:	45a9      	cmp	r9, r5
    3438:	d906      	bls.n	3448 <__aeabi_dmul+0x238>
    343a:	468a      	mov	sl, r1
    343c:	2180      	movs	r1, #128	; 0x80
    343e:	0249      	lsls	r1, r1, #9
    3440:	4689      	mov	r9, r1
    3442:	44ca      	add	sl, r9
    3444:	4651      	mov	r1, sl
    3446:	9103      	str	r1, [sp, #12]
    3448:	0c29      	lsrs	r1, r5, #16
    344a:	9104      	str	r1, [sp, #16]
    344c:	4641      	mov	r1, r8
    344e:	0409      	lsls	r1, r1, #16
    3450:	042d      	lsls	r5, r5, #16
    3452:	0c09      	lsrs	r1, r1, #16
    3454:	4688      	mov	r8, r1
    3456:	0029      	movs	r1, r5
    3458:	0c25      	lsrs	r5, r4, #16
    345a:	0424      	lsls	r4, r4, #16
    345c:	4441      	add	r1, r8
    345e:	0c24      	lsrs	r4, r4, #16
    3460:	9105      	str	r1, [sp, #20]
    3462:	0021      	movs	r1, r4
    3464:	4341      	muls	r1, r0
    3466:	4688      	mov	r8, r1
    3468:	0021      	movs	r1, r4
    346a:	4379      	muls	r1, r7
    346c:	468a      	mov	sl, r1
    346e:	4368      	muls	r0, r5
    3470:	4641      	mov	r1, r8
    3472:	4450      	add	r0, sl
    3474:	4681      	mov	r9, r0
    3476:	0c08      	lsrs	r0, r1, #16
    3478:	4448      	add	r0, r9
    347a:	436f      	muls	r7, r5
    347c:	4582      	cmp	sl, r0
    347e:	d903      	bls.n	3488 <__aeabi_dmul+0x278>
    3480:	2180      	movs	r1, #128	; 0x80
    3482:	0249      	lsls	r1, r1, #9
    3484:	4689      	mov	r9, r1
    3486:	444f      	add	r7, r9
    3488:	0c01      	lsrs	r1, r0, #16
    348a:	4689      	mov	r9, r1
    348c:	0039      	movs	r1, r7
    348e:	4449      	add	r1, r9
    3490:	9102      	str	r1, [sp, #8]
    3492:	4641      	mov	r1, r8
    3494:	040f      	lsls	r7, r1, #16
    3496:	9904      	ldr	r1, [sp, #16]
    3498:	0c3f      	lsrs	r7, r7, #16
    349a:	4688      	mov	r8, r1
    349c:	0400      	lsls	r0, r0, #16
    349e:	19c0      	adds	r0, r0, r7
    34a0:	4480      	add	r8, r0
    34a2:	4641      	mov	r1, r8
    34a4:	9104      	str	r1, [sp, #16]
    34a6:	4659      	mov	r1, fp
    34a8:	0c0f      	lsrs	r7, r1, #16
    34aa:	0409      	lsls	r1, r1, #16
    34ac:	0c09      	lsrs	r1, r1, #16
    34ae:	4688      	mov	r8, r1
    34b0:	4359      	muls	r1, r3
    34b2:	468a      	mov	sl, r1
    34b4:	0039      	movs	r1, r7
    34b6:	4351      	muls	r1, r2
    34b8:	4689      	mov	r9, r1
    34ba:	4641      	mov	r1, r8
    34bc:	434a      	muls	r2, r1
    34be:	4651      	mov	r1, sl
    34c0:	0c09      	lsrs	r1, r1, #16
    34c2:	468b      	mov	fp, r1
    34c4:	437b      	muls	r3, r7
    34c6:	18d2      	adds	r2, r2, r3
    34c8:	445a      	add	r2, fp
    34ca:	4293      	cmp	r3, r2
    34cc:	d903      	bls.n	34d6 <__aeabi_dmul+0x2c6>
    34ce:	2380      	movs	r3, #128	; 0x80
    34d0:	025b      	lsls	r3, r3, #9
    34d2:	469b      	mov	fp, r3
    34d4:	44d9      	add	r9, fp
    34d6:	4651      	mov	r1, sl
    34d8:	0409      	lsls	r1, r1, #16
    34da:	0c09      	lsrs	r1, r1, #16
    34dc:	468a      	mov	sl, r1
    34de:	4641      	mov	r1, r8
    34e0:	4361      	muls	r1, r4
    34e2:	437c      	muls	r4, r7
    34e4:	0c13      	lsrs	r3, r2, #16
    34e6:	0412      	lsls	r2, r2, #16
    34e8:	444b      	add	r3, r9
    34ea:	4452      	add	r2, sl
    34ec:	46a1      	mov	r9, r4
    34ee:	468a      	mov	sl, r1
    34f0:	003c      	movs	r4, r7
    34f2:	4641      	mov	r1, r8
    34f4:	436c      	muls	r4, r5
    34f6:	434d      	muls	r5, r1
    34f8:	4651      	mov	r1, sl
    34fa:	444d      	add	r5, r9
    34fc:	0c0f      	lsrs	r7, r1, #16
    34fe:	197d      	adds	r5, r7, r5
    3500:	45a9      	cmp	r9, r5
    3502:	d903      	bls.n	350c <__aeabi_dmul+0x2fc>
    3504:	2180      	movs	r1, #128	; 0x80
    3506:	0249      	lsls	r1, r1, #9
    3508:	4688      	mov	r8, r1
    350a:	4444      	add	r4, r8
    350c:	9f04      	ldr	r7, [sp, #16]
    350e:	9903      	ldr	r1, [sp, #12]
    3510:	46b8      	mov	r8, r7
    3512:	4441      	add	r1, r8
    3514:	468b      	mov	fp, r1
    3516:	4583      	cmp	fp, r0
    3518:	4180      	sbcs	r0, r0
    351a:	4241      	negs	r1, r0
    351c:	4688      	mov	r8, r1
    351e:	4651      	mov	r1, sl
    3520:	0408      	lsls	r0, r1, #16
    3522:	042f      	lsls	r7, r5, #16
    3524:	0c00      	lsrs	r0, r0, #16
    3526:	183f      	adds	r7, r7, r0
    3528:	4658      	mov	r0, fp
    352a:	9902      	ldr	r1, [sp, #8]
    352c:	1810      	adds	r0, r2, r0
    352e:	4689      	mov	r9, r1
    3530:	4290      	cmp	r0, r2
    3532:	4192      	sbcs	r2, r2
    3534:	444f      	add	r7, r9
    3536:	46ba      	mov	sl, r7
    3538:	4252      	negs	r2, r2
    353a:	4699      	mov	r9, r3
    353c:	4693      	mov	fp, r2
    353e:	44c2      	add	sl, r8
    3540:	44d1      	add	r9, sl
    3542:	44cb      	add	fp, r9
    3544:	428f      	cmp	r7, r1
    3546:	41bf      	sbcs	r7, r7
    3548:	45c2      	cmp	sl, r8
    354a:	4189      	sbcs	r1, r1
    354c:	4599      	cmp	r9, r3
    354e:	419b      	sbcs	r3, r3
    3550:	4593      	cmp	fp, r2
    3552:	4192      	sbcs	r2, r2
    3554:	427f      	negs	r7, r7
    3556:	4249      	negs	r1, r1
    3558:	0c2d      	lsrs	r5, r5, #16
    355a:	4252      	negs	r2, r2
    355c:	430f      	orrs	r7, r1
    355e:	425b      	negs	r3, r3
    3560:	4313      	orrs	r3, r2
    3562:	197f      	adds	r7, r7, r5
    3564:	18ff      	adds	r7, r7, r3
    3566:	465b      	mov	r3, fp
    3568:	193c      	adds	r4, r7, r4
    356a:	0ddb      	lsrs	r3, r3, #23
    356c:	9a05      	ldr	r2, [sp, #20]
    356e:	0264      	lsls	r4, r4, #9
    3570:	431c      	orrs	r4, r3
    3572:	0243      	lsls	r3, r0, #9
    3574:	4313      	orrs	r3, r2
    3576:	1e5d      	subs	r5, r3, #1
    3578:	41ab      	sbcs	r3, r5
    357a:	465a      	mov	r2, fp
    357c:	0dc0      	lsrs	r0, r0, #23
    357e:	4303      	orrs	r3, r0
    3580:	0252      	lsls	r2, r2, #9
    3582:	4313      	orrs	r3, r2
    3584:	01e2      	lsls	r2, r4, #7
    3586:	d556      	bpl.n	3636 <__aeabi_dmul+0x426>
    3588:	2001      	movs	r0, #1
    358a:	085a      	lsrs	r2, r3, #1
    358c:	4003      	ands	r3, r0
    358e:	4313      	orrs	r3, r2
    3590:	07e2      	lsls	r2, r4, #31
    3592:	4313      	orrs	r3, r2
    3594:	0864      	lsrs	r4, r4, #1
    3596:	485a      	ldr	r0, [pc, #360]	; (3700 <__aeabi_dmul+0x4f0>)
    3598:	4460      	add	r0, ip
    359a:	2800      	cmp	r0, #0
    359c:	dd4d      	ble.n	363a <__aeabi_dmul+0x42a>
    359e:	075a      	lsls	r2, r3, #29
    35a0:	d009      	beq.n	35b6 <__aeabi_dmul+0x3a6>
    35a2:	220f      	movs	r2, #15
    35a4:	401a      	ands	r2, r3
    35a6:	2a04      	cmp	r2, #4
    35a8:	d005      	beq.n	35b6 <__aeabi_dmul+0x3a6>
    35aa:	1d1a      	adds	r2, r3, #4
    35ac:	429a      	cmp	r2, r3
    35ae:	419b      	sbcs	r3, r3
    35b0:	425b      	negs	r3, r3
    35b2:	18e4      	adds	r4, r4, r3
    35b4:	0013      	movs	r3, r2
    35b6:	01e2      	lsls	r2, r4, #7
    35b8:	d504      	bpl.n	35c4 <__aeabi_dmul+0x3b4>
    35ba:	2080      	movs	r0, #128	; 0x80
    35bc:	4a51      	ldr	r2, [pc, #324]	; (3704 <__aeabi_dmul+0x4f4>)
    35be:	00c0      	lsls	r0, r0, #3
    35c0:	4014      	ands	r4, r2
    35c2:	4460      	add	r0, ip
    35c4:	4a50      	ldr	r2, [pc, #320]	; (3708 <__aeabi_dmul+0x4f8>)
    35c6:	4290      	cmp	r0, r2
    35c8:	dd00      	ble.n	35cc <__aeabi_dmul+0x3bc>
    35ca:	e6e3      	b.n	3394 <__aeabi_dmul+0x184>
    35cc:	2501      	movs	r5, #1
    35ce:	08db      	lsrs	r3, r3, #3
    35d0:	0762      	lsls	r2, r4, #29
    35d2:	431a      	orrs	r2, r3
    35d4:	0264      	lsls	r4, r4, #9
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	4691      	mov	r9, r2
    35da:	0b22      	lsrs	r2, r4, #12
    35dc:	0544      	lsls	r4, r0, #21
    35de:	0d64      	lsrs	r4, r4, #21
    35e0:	401d      	ands	r5, r3
    35e2:	e67c      	b.n	32de <__aeabi_dmul+0xce>
    35e4:	2280      	movs	r2, #128	; 0x80
    35e6:	4659      	mov	r1, fp
    35e8:	0312      	lsls	r2, r2, #12
    35ea:	4211      	tst	r1, r2
    35ec:	d008      	beq.n	3600 <__aeabi_dmul+0x3f0>
    35ee:	4214      	tst	r4, r2
    35f0:	d106      	bne.n	3600 <__aeabi_dmul+0x3f0>
    35f2:	4322      	orrs	r2, r4
    35f4:	0312      	lsls	r2, r2, #12
    35f6:	0b12      	lsrs	r2, r2, #12
    35f8:	4645      	mov	r5, r8
    35fa:	4699      	mov	r9, r3
    35fc:	4c43      	ldr	r4, [pc, #268]	; (370c <__aeabi_dmul+0x4fc>)
    35fe:	e66e      	b.n	32de <__aeabi_dmul+0xce>
    3600:	465b      	mov	r3, fp
    3602:	431a      	orrs	r2, r3
    3604:	0312      	lsls	r2, r2, #12
    3606:	0b12      	lsrs	r2, r2, #12
    3608:	4c40      	ldr	r4, [pc, #256]	; (370c <__aeabi_dmul+0x4fc>)
    360a:	e668      	b.n	32de <__aeabi_dmul+0xce>
    360c:	0003      	movs	r3, r0
    360e:	4654      	mov	r4, sl
    3610:	3b28      	subs	r3, #40	; 0x28
    3612:	409c      	lsls	r4, r3
    3614:	2300      	movs	r3, #0
    3616:	e6b9      	b.n	338c <__aeabi_dmul+0x17c>
    3618:	f000 fbfc 	bl	3e14 <__clzsi2>
    361c:	3020      	adds	r0, #32
    361e:	e6a6      	b.n	336e <__aeabi_dmul+0x15e>
    3620:	0003      	movs	r3, r0
    3622:	3b28      	subs	r3, #40	; 0x28
    3624:	409f      	lsls	r7, r3
    3626:	2300      	movs	r3, #0
    3628:	46bb      	mov	fp, r7
    362a:	4699      	mov	r9, r3
    362c:	e68a      	b.n	3344 <__aeabi_dmul+0x134>
    362e:	f000 fbf1 	bl	3e14 <__clzsi2>
    3632:	3020      	adds	r0, #32
    3634:	e674      	b.n	3320 <__aeabi_dmul+0x110>
    3636:	46b4      	mov	ip, r6
    3638:	e7ad      	b.n	3596 <__aeabi_dmul+0x386>
    363a:	2501      	movs	r5, #1
    363c:	1a2a      	subs	r2, r5, r0
    363e:	2a38      	cmp	r2, #56	; 0x38
    3640:	dd06      	ble.n	3650 <__aeabi_dmul+0x440>
    3642:	9b01      	ldr	r3, [sp, #4]
    3644:	2400      	movs	r4, #0
    3646:	401d      	ands	r5, r3
    3648:	2300      	movs	r3, #0
    364a:	2200      	movs	r2, #0
    364c:	4699      	mov	r9, r3
    364e:	e646      	b.n	32de <__aeabi_dmul+0xce>
    3650:	2a1f      	cmp	r2, #31
    3652:	dc21      	bgt.n	3698 <__aeabi_dmul+0x488>
    3654:	2520      	movs	r5, #32
    3656:	0020      	movs	r0, r4
    3658:	1aad      	subs	r5, r5, r2
    365a:	001e      	movs	r6, r3
    365c:	40ab      	lsls	r3, r5
    365e:	40a8      	lsls	r0, r5
    3660:	40d6      	lsrs	r6, r2
    3662:	1e5d      	subs	r5, r3, #1
    3664:	41ab      	sbcs	r3, r5
    3666:	4330      	orrs	r0, r6
    3668:	4318      	orrs	r0, r3
    366a:	40d4      	lsrs	r4, r2
    366c:	0743      	lsls	r3, r0, #29
    366e:	d009      	beq.n	3684 <__aeabi_dmul+0x474>
    3670:	230f      	movs	r3, #15
    3672:	4003      	ands	r3, r0
    3674:	2b04      	cmp	r3, #4
    3676:	d005      	beq.n	3684 <__aeabi_dmul+0x474>
    3678:	0003      	movs	r3, r0
    367a:	1d18      	adds	r0, r3, #4
    367c:	4298      	cmp	r0, r3
    367e:	419b      	sbcs	r3, r3
    3680:	425b      	negs	r3, r3
    3682:	18e4      	adds	r4, r4, r3
    3684:	0223      	lsls	r3, r4, #8
    3686:	d521      	bpl.n	36cc <__aeabi_dmul+0x4bc>
    3688:	2501      	movs	r5, #1
    368a:	9b01      	ldr	r3, [sp, #4]
    368c:	2401      	movs	r4, #1
    368e:	401d      	ands	r5, r3
    3690:	2300      	movs	r3, #0
    3692:	2200      	movs	r2, #0
    3694:	4699      	mov	r9, r3
    3696:	e622      	b.n	32de <__aeabi_dmul+0xce>
    3698:	251f      	movs	r5, #31
    369a:	0021      	movs	r1, r4
    369c:	426d      	negs	r5, r5
    369e:	1a28      	subs	r0, r5, r0
    36a0:	40c1      	lsrs	r1, r0
    36a2:	0008      	movs	r0, r1
    36a4:	2a20      	cmp	r2, #32
    36a6:	d01d      	beq.n	36e4 <__aeabi_dmul+0x4d4>
    36a8:	355f      	adds	r5, #95	; 0x5f
    36aa:	1aaa      	subs	r2, r5, r2
    36ac:	4094      	lsls	r4, r2
    36ae:	4323      	orrs	r3, r4
    36b0:	1e5c      	subs	r4, r3, #1
    36b2:	41a3      	sbcs	r3, r4
    36b4:	2507      	movs	r5, #7
    36b6:	4303      	orrs	r3, r0
    36b8:	401d      	ands	r5, r3
    36ba:	2200      	movs	r2, #0
    36bc:	2d00      	cmp	r5, #0
    36be:	d009      	beq.n	36d4 <__aeabi_dmul+0x4c4>
    36c0:	220f      	movs	r2, #15
    36c2:	2400      	movs	r4, #0
    36c4:	401a      	ands	r2, r3
    36c6:	0018      	movs	r0, r3
    36c8:	2a04      	cmp	r2, #4
    36ca:	d1d6      	bne.n	367a <__aeabi_dmul+0x46a>
    36cc:	0003      	movs	r3, r0
    36ce:	0765      	lsls	r5, r4, #29
    36d0:	0264      	lsls	r4, r4, #9
    36d2:	0b22      	lsrs	r2, r4, #12
    36d4:	08db      	lsrs	r3, r3, #3
    36d6:	432b      	orrs	r3, r5
    36d8:	2501      	movs	r5, #1
    36da:	4699      	mov	r9, r3
    36dc:	9b01      	ldr	r3, [sp, #4]
    36de:	2400      	movs	r4, #0
    36e0:	401d      	ands	r5, r3
    36e2:	e5fc      	b.n	32de <__aeabi_dmul+0xce>
    36e4:	2400      	movs	r4, #0
    36e6:	e7e2      	b.n	36ae <__aeabi_dmul+0x49e>
    36e8:	2280      	movs	r2, #128	; 0x80
    36ea:	2501      	movs	r5, #1
    36ec:	0312      	lsls	r2, r2, #12
    36ee:	4322      	orrs	r2, r4
    36f0:	9901      	ldr	r1, [sp, #4]
    36f2:	0312      	lsls	r2, r2, #12
    36f4:	0b12      	lsrs	r2, r2, #12
    36f6:	400d      	ands	r5, r1
    36f8:	4699      	mov	r9, r3
    36fa:	4c04      	ldr	r4, [pc, #16]	; (370c <__aeabi_dmul+0x4fc>)
    36fc:	e5ef      	b.n	32de <__aeabi_dmul+0xce>
    36fe:	46c0      	nop			; (mov r8, r8)
    3700:	000003ff 	.word	0x000003ff
    3704:	feffffff 	.word	0xfeffffff
    3708:	000007fe 	.word	0x000007fe
    370c:	000007ff 	.word	0x000007ff

00003710 <__aeabi_dsub>:
    3710:	b5f0      	push	{r4, r5, r6, r7, lr}
    3712:	4646      	mov	r6, r8
    3714:	46d6      	mov	lr, sl
    3716:	464f      	mov	r7, r9
    3718:	030c      	lsls	r4, r1, #12
    371a:	b5c0      	push	{r6, r7, lr}
    371c:	0fcd      	lsrs	r5, r1, #31
    371e:	004e      	lsls	r6, r1, #1
    3720:	0a61      	lsrs	r1, r4, #9
    3722:	0f44      	lsrs	r4, r0, #29
    3724:	430c      	orrs	r4, r1
    3726:	00c1      	lsls	r1, r0, #3
    3728:	0058      	lsls	r0, r3, #1
    372a:	0d40      	lsrs	r0, r0, #21
    372c:	4684      	mov	ip, r0
    372e:	468a      	mov	sl, r1
    3730:	000f      	movs	r7, r1
    3732:	0319      	lsls	r1, r3, #12
    3734:	0f50      	lsrs	r0, r2, #29
    3736:	0a49      	lsrs	r1, r1, #9
    3738:	4301      	orrs	r1, r0
    373a:	48c6      	ldr	r0, [pc, #792]	; (3a54 <__aeabi_dsub+0x344>)
    373c:	0d76      	lsrs	r6, r6, #21
    373e:	46a8      	mov	r8, r5
    3740:	0fdb      	lsrs	r3, r3, #31
    3742:	00d2      	lsls	r2, r2, #3
    3744:	4584      	cmp	ip, r0
    3746:	d100      	bne.n	374a <__aeabi_dsub+0x3a>
    3748:	e0d8      	b.n	38fc <__aeabi_dsub+0x1ec>
    374a:	2001      	movs	r0, #1
    374c:	4043      	eors	r3, r0
    374e:	42ab      	cmp	r3, r5
    3750:	d100      	bne.n	3754 <__aeabi_dsub+0x44>
    3752:	e0a6      	b.n	38a2 <__aeabi_dsub+0x192>
    3754:	4660      	mov	r0, ip
    3756:	1a35      	subs	r5, r6, r0
    3758:	2d00      	cmp	r5, #0
    375a:	dc00      	bgt.n	375e <__aeabi_dsub+0x4e>
    375c:	e105      	b.n	396a <__aeabi_dsub+0x25a>
    375e:	2800      	cmp	r0, #0
    3760:	d110      	bne.n	3784 <__aeabi_dsub+0x74>
    3762:	000b      	movs	r3, r1
    3764:	4313      	orrs	r3, r2
    3766:	d100      	bne.n	376a <__aeabi_dsub+0x5a>
    3768:	e0d7      	b.n	391a <__aeabi_dsub+0x20a>
    376a:	1e6b      	subs	r3, r5, #1
    376c:	2b00      	cmp	r3, #0
    376e:	d000      	beq.n	3772 <__aeabi_dsub+0x62>
    3770:	e14b      	b.n	3a0a <__aeabi_dsub+0x2fa>
    3772:	4653      	mov	r3, sl
    3774:	1a9f      	subs	r7, r3, r2
    3776:	45ba      	cmp	sl, r7
    3778:	4180      	sbcs	r0, r0
    377a:	1a64      	subs	r4, r4, r1
    377c:	4240      	negs	r0, r0
    377e:	1a24      	subs	r4, r4, r0
    3780:	2601      	movs	r6, #1
    3782:	e01e      	b.n	37c2 <__aeabi_dsub+0xb2>
    3784:	4bb3      	ldr	r3, [pc, #716]	; (3a54 <__aeabi_dsub+0x344>)
    3786:	429e      	cmp	r6, r3
    3788:	d048      	beq.n	381c <__aeabi_dsub+0x10c>
    378a:	2380      	movs	r3, #128	; 0x80
    378c:	041b      	lsls	r3, r3, #16
    378e:	4319      	orrs	r1, r3
    3790:	2d38      	cmp	r5, #56	; 0x38
    3792:	dd00      	ble.n	3796 <__aeabi_dsub+0x86>
    3794:	e119      	b.n	39ca <__aeabi_dsub+0x2ba>
    3796:	2d1f      	cmp	r5, #31
    3798:	dd00      	ble.n	379c <__aeabi_dsub+0x8c>
    379a:	e14c      	b.n	3a36 <__aeabi_dsub+0x326>
    379c:	2320      	movs	r3, #32
    379e:	000f      	movs	r7, r1
    37a0:	1b5b      	subs	r3, r3, r5
    37a2:	0010      	movs	r0, r2
    37a4:	409a      	lsls	r2, r3
    37a6:	409f      	lsls	r7, r3
    37a8:	40e8      	lsrs	r0, r5
    37aa:	1e53      	subs	r3, r2, #1
    37ac:	419a      	sbcs	r2, r3
    37ae:	40e9      	lsrs	r1, r5
    37b0:	4307      	orrs	r7, r0
    37b2:	4317      	orrs	r7, r2
    37b4:	4653      	mov	r3, sl
    37b6:	1bdf      	subs	r7, r3, r7
    37b8:	1a61      	subs	r1, r4, r1
    37ba:	45ba      	cmp	sl, r7
    37bc:	41a4      	sbcs	r4, r4
    37be:	4264      	negs	r4, r4
    37c0:	1b0c      	subs	r4, r1, r4
    37c2:	0223      	lsls	r3, r4, #8
    37c4:	d400      	bmi.n	37c8 <__aeabi_dsub+0xb8>
    37c6:	e0c5      	b.n	3954 <__aeabi_dsub+0x244>
    37c8:	0264      	lsls	r4, r4, #9
    37ca:	0a65      	lsrs	r5, r4, #9
    37cc:	2d00      	cmp	r5, #0
    37ce:	d100      	bne.n	37d2 <__aeabi_dsub+0xc2>
    37d0:	e0f6      	b.n	39c0 <__aeabi_dsub+0x2b0>
    37d2:	0028      	movs	r0, r5
    37d4:	f000 fb1e 	bl	3e14 <__clzsi2>
    37d8:	0003      	movs	r3, r0
    37da:	3b08      	subs	r3, #8
    37dc:	2b1f      	cmp	r3, #31
    37de:	dd00      	ble.n	37e2 <__aeabi_dsub+0xd2>
    37e0:	e0e9      	b.n	39b6 <__aeabi_dsub+0x2a6>
    37e2:	2220      	movs	r2, #32
    37e4:	003c      	movs	r4, r7
    37e6:	1ad2      	subs	r2, r2, r3
    37e8:	409d      	lsls	r5, r3
    37ea:	40d4      	lsrs	r4, r2
    37ec:	409f      	lsls	r7, r3
    37ee:	4325      	orrs	r5, r4
    37f0:	429e      	cmp	r6, r3
    37f2:	dd00      	ble.n	37f6 <__aeabi_dsub+0xe6>
    37f4:	e0db      	b.n	39ae <__aeabi_dsub+0x29e>
    37f6:	1b9e      	subs	r6, r3, r6
    37f8:	1c73      	adds	r3, r6, #1
    37fa:	2b1f      	cmp	r3, #31
    37fc:	dd00      	ble.n	3800 <__aeabi_dsub+0xf0>
    37fe:	e10a      	b.n	3a16 <__aeabi_dsub+0x306>
    3800:	2220      	movs	r2, #32
    3802:	0038      	movs	r0, r7
    3804:	1ad2      	subs	r2, r2, r3
    3806:	0029      	movs	r1, r5
    3808:	4097      	lsls	r7, r2
    380a:	002c      	movs	r4, r5
    380c:	4091      	lsls	r1, r2
    380e:	40d8      	lsrs	r0, r3
    3810:	1e7a      	subs	r2, r7, #1
    3812:	4197      	sbcs	r7, r2
    3814:	40dc      	lsrs	r4, r3
    3816:	2600      	movs	r6, #0
    3818:	4301      	orrs	r1, r0
    381a:	430f      	orrs	r7, r1
    381c:	077b      	lsls	r3, r7, #29
    381e:	d009      	beq.n	3834 <__aeabi_dsub+0x124>
    3820:	230f      	movs	r3, #15
    3822:	403b      	ands	r3, r7
    3824:	2b04      	cmp	r3, #4
    3826:	d005      	beq.n	3834 <__aeabi_dsub+0x124>
    3828:	1d3b      	adds	r3, r7, #4
    382a:	42bb      	cmp	r3, r7
    382c:	41bf      	sbcs	r7, r7
    382e:	427f      	negs	r7, r7
    3830:	19e4      	adds	r4, r4, r7
    3832:	001f      	movs	r7, r3
    3834:	0223      	lsls	r3, r4, #8
    3836:	d525      	bpl.n	3884 <__aeabi_dsub+0x174>
    3838:	4b86      	ldr	r3, [pc, #536]	; (3a54 <__aeabi_dsub+0x344>)
    383a:	3601      	adds	r6, #1
    383c:	429e      	cmp	r6, r3
    383e:	d100      	bne.n	3842 <__aeabi_dsub+0x132>
    3840:	e0af      	b.n	39a2 <__aeabi_dsub+0x292>
    3842:	4b85      	ldr	r3, [pc, #532]	; (3a58 <__aeabi_dsub+0x348>)
    3844:	2501      	movs	r5, #1
    3846:	401c      	ands	r4, r3
    3848:	4643      	mov	r3, r8
    384a:	0762      	lsls	r2, r4, #29
    384c:	08ff      	lsrs	r7, r7, #3
    384e:	0264      	lsls	r4, r4, #9
    3850:	0576      	lsls	r6, r6, #21
    3852:	4317      	orrs	r7, r2
    3854:	0b24      	lsrs	r4, r4, #12
    3856:	0d76      	lsrs	r6, r6, #21
    3858:	401d      	ands	r5, r3
    385a:	2100      	movs	r1, #0
    385c:	0324      	lsls	r4, r4, #12
    385e:	0b23      	lsrs	r3, r4, #12
    3860:	0d0c      	lsrs	r4, r1, #20
    3862:	4a7e      	ldr	r2, [pc, #504]	; (3a5c <__aeabi_dsub+0x34c>)
    3864:	0524      	lsls	r4, r4, #20
    3866:	431c      	orrs	r4, r3
    3868:	4014      	ands	r4, r2
    386a:	0533      	lsls	r3, r6, #20
    386c:	4323      	orrs	r3, r4
    386e:	005b      	lsls	r3, r3, #1
    3870:	07ed      	lsls	r5, r5, #31
    3872:	085b      	lsrs	r3, r3, #1
    3874:	432b      	orrs	r3, r5
    3876:	0038      	movs	r0, r7
    3878:	0019      	movs	r1, r3
    387a:	bc1c      	pop	{r2, r3, r4}
    387c:	4690      	mov	r8, r2
    387e:	4699      	mov	r9, r3
    3880:	46a2      	mov	sl, r4
    3882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3884:	2501      	movs	r5, #1
    3886:	4643      	mov	r3, r8
    3888:	0762      	lsls	r2, r4, #29
    388a:	08ff      	lsrs	r7, r7, #3
    388c:	4317      	orrs	r7, r2
    388e:	08e4      	lsrs	r4, r4, #3
    3890:	401d      	ands	r5, r3
    3892:	4b70      	ldr	r3, [pc, #448]	; (3a54 <__aeabi_dsub+0x344>)
    3894:	429e      	cmp	r6, r3
    3896:	d036      	beq.n	3906 <__aeabi_dsub+0x1f6>
    3898:	0324      	lsls	r4, r4, #12
    389a:	0576      	lsls	r6, r6, #21
    389c:	0b24      	lsrs	r4, r4, #12
    389e:	0d76      	lsrs	r6, r6, #21
    38a0:	e7db      	b.n	385a <__aeabi_dsub+0x14a>
    38a2:	4663      	mov	r3, ip
    38a4:	1af3      	subs	r3, r6, r3
    38a6:	2b00      	cmp	r3, #0
    38a8:	dc00      	bgt.n	38ac <__aeabi_dsub+0x19c>
    38aa:	e094      	b.n	39d6 <__aeabi_dsub+0x2c6>
    38ac:	4660      	mov	r0, ip
    38ae:	2800      	cmp	r0, #0
    38b0:	d035      	beq.n	391e <__aeabi_dsub+0x20e>
    38b2:	4868      	ldr	r0, [pc, #416]	; (3a54 <__aeabi_dsub+0x344>)
    38b4:	4286      	cmp	r6, r0
    38b6:	d0b1      	beq.n	381c <__aeabi_dsub+0x10c>
    38b8:	2780      	movs	r7, #128	; 0x80
    38ba:	043f      	lsls	r7, r7, #16
    38bc:	4339      	orrs	r1, r7
    38be:	2b38      	cmp	r3, #56	; 0x38
    38c0:	dc00      	bgt.n	38c4 <__aeabi_dsub+0x1b4>
    38c2:	e0fd      	b.n	3ac0 <__aeabi_dsub+0x3b0>
    38c4:	430a      	orrs	r2, r1
    38c6:	0017      	movs	r7, r2
    38c8:	2100      	movs	r1, #0
    38ca:	1e7a      	subs	r2, r7, #1
    38cc:	4197      	sbcs	r7, r2
    38ce:	4457      	add	r7, sl
    38d0:	4557      	cmp	r7, sl
    38d2:	4180      	sbcs	r0, r0
    38d4:	1909      	adds	r1, r1, r4
    38d6:	4244      	negs	r4, r0
    38d8:	190c      	adds	r4, r1, r4
    38da:	0223      	lsls	r3, r4, #8
    38dc:	d53a      	bpl.n	3954 <__aeabi_dsub+0x244>
    38de:	4b5d      	ldr	r3, [pc, #372]	; (3a54 <__aeabi_dsub+0x344>)
    38e0:	3601      	adds	r6, #1
    38e2:	429e      	cmp	r6, r3
    38e4:	d100      	bne.n	38e8 <__aeabi_dsub+0x1d8>
    38e6:	e14b      	b.n	3b80 <__aeabi_dsub+0x470>
    38e8:	2201      	movs	r2, #1
    38ea:	4b5b      	ldr	r3, [pc, #364]	; (3a58 <__aeabi_dsub+0x348>)
    38ec:	401c      	ands	r4, r3
    38ee:	087b      	lsrs	r3, r7, #1
    38f0:	4017      	ands	r7, r2
    38f2:	431f      	orrs	r7, r3
    38f4:	07e2      	lsls	r2, r4, #31
    38f6:	4317      	orrs	r7, r2
    38f8:	0864      	lsrs	r4, r4, #1
    38fa:	e78f      	b.n	381c <__aeabi_dsub+0x10c>
    38fc:	0008      	movs	r0, r1
    38fe:	4310      	orrs	r0, r2
    3900:	d000      	beq.n	3904 <__aeabi_dsub+0x1f4>
    3902:	e724      	b.n	374e <__aeabi_dsub+0x3e>
    3904:	e721      	b.n	374a <__aeabi_dsub+0x3a>
    3906:	0023      	movs	r3, r4
    3908:	433b      	orrs	r3, r7
    390a:	d100      	bne.n	390e <__aeabi_dsub+0x1fe>
    390c:	e1b9      	b.n	3c82 <__aeabi_dsub+0x572>
    390e:	2280      	movs	r2, #128	; 0x80
    3910:	0312      	lsls	r2, r2, #12
    3912:	4314      	orrs	r4, r2
    3914:	0324      	lsls	r4, r4, #12
    3916:	0b24      	lsrs	r4, r4, #12
    3918:	e79f      	b.n	385a <__aeabi_dsub+0x14a>
    391a:	002e      	movs	r6, r5
    391c:	e77e      	b.n	381c <__aeabi_dsub+0x10c>
    391e:	0008      	movs	r0, r1
    3920:	4310      	orrs	r0, r2
    3922:	d100      	bne.n	3926 <__aeabi_dsub+0x216>
    3924:	e0ca      	b.n	3abc <__aeabi_dsub+0x3ac>
    3926:	1e58      	subs	r0, r3, #1
    3928:	4684      	mov	ip, r0
    392a:	2800      	cmp	r0, #0
    392c:	d000      	beq.n	3930 <__aeabi_dsub+0x220>
    392e:	e0e7      	b.n	3b00 <__aeabi_dsub+0x3f0>
    3930:	4452      	add	r2, sl
    3932:	4552      	cmp	r2, sl
    3934:	4180      	sbcs	r0, r0
    3936:	1864      	adds	r4, r4, r1
    3938:	4240      	negs	r0, r0
    393a:	1824      	adds	r4, r4, r0
    393c:	0017      	movs	r7, r2
    393e:	2601      	movs	r6, #1
    3940:	0223      	lsls	r3, r4, #8
    3942:	d507      	bpl.n	3954 <__aeabi_dsub+0x244>
    3944:	2602      	movs	r6, #2
    3946:	e7cf      	b.n	38e8 <__aeabi_dsub+0x1d8>
    3948:	4664      	mov	r4, ip
    394a:	432c      	orrs	r4, r5
    394c:	d100      	bne.n	3950 <__aeabi_dsub+0x240>
    394e:	e1b3      	b.n	3cb8 <__aeabi_dsub+0x5a8>
    3950:	002c      	movs	r4, r5
    3952:	4667      	mov	r7, ip
    3954:	077b      	lsls	r3, r7, #29
    3956:	d000      	beq.n	395a <__aeabi_dsub+0x24a>
    3958:	e762      	b.n	3820 <__aeabi_dsub+0x110>
    395a:	0763      	lsls	r3, r4, #29
    395c:	08ff      	lsrs	r7, r7, #3
    395e:	431f      	orrs	r7, r3
    3960:	2501      	movs	r5, #1
    3962:	4643      	mov	r3, r8
    3964:	08e4      	lsrs	r4, r4, #3
    3966:	401d      	ands	r5, r3
    3968:	e793      	b.n	3892 <__aeabi_dsub+0x182>
    396a:	2d00      	cmp	r5, #0
    396c:	d178      	bne.n	3a60 <__aeabi_dsub+0x350>
    396e:	1c75      	adds	r5, r6, #1
    3970:	056d      	lsls	r5, r5, #21
    3972:	0d6d      	lsrs	r5, r5, #21
    3974:	2d01      	cmp	r5, #1
    3976:	dc00      	bgt.n	397a <__aeabi_dsub+0x26a>
    3978:	e0f2      	b.n	3b60 <__aeabi_dsub+0x450>
    397a:	4650      	mov	r0, sl
    397c:	1a80      	subs	r0, r0, r2
    397e:	4582      	cmp	sl, r0
    3980:	41bf      	sbcs	r7, r7
    3982:	1a65      	subs	r5, r4, r1
    3984:	427f      	negs	r7, r7
    3986:	1bed      	subs	r5, r5, r7
    3988:	4684      	mov	ip, r0
    398a:	0228      	lsls	r0, r5, #8
    398c:	d400      	bmi.n	3990 <__aeabi_dsub+0x280>
    398e:	e08c      	b.n	3aaa <__aeabi_dsub+0x39a>
    3990:	4650      	mov	r0, sl
    3992:	1a17      	subs	r7, r2, r0
    3994:	42ba      	cmp	r2, r7
    3996:	4192      	sbcs	r2, r2
    3998:	1b0c      	subs	r4, r1, r4
    399a:	4255      	negs	r5, r2
    399c:	1b65      	subs	r5, r4, r5
    399e:	4698      	mov	r8, r3
    39a0:	e714      	b.n	37cc <__aeabi_dsub+0xbc>
    39a2:	2501      	movs	r5, #1
    39a4:	4643      	mov	r3, r8
    39a6:	2400      	movs	r4, #0
    39a8:	401d      	ands	r5, r3
    39aa:	2700      	movs	r7, #0
    39ac:	e755      	b.n	385a <__aeabi_dsub+0x14a>
    39ae:	4c2a      	ldr	r4, [pc, #168]	; (3a58 <__aeabi_dsub+0x348>)
    39b0:	1af6      	subs	r6, r6, r3
    39b2:	402c      	ands	r4, r5
    39b4:	e732      	b.n	381c <__aeabi_dsub+0x10c>
    39b6:	003d      	movs	r5, r7
    39b8:	3828      	subs	r0, #40	; 0x28
    39ba:	4085      	lsls	r5, r0
    39bc:	2700      	movs	r7, #0
    39be:	e717      	b.n	37f0 <__aeabi_dsub+0xe0>
    39c0:	0038      	movs	r0, r7
    39c2:	f000 fa27 	bl	3e14 <__clzsi2>
    39c6:	3020      	adds	r0, #32
    39c8:	e706      	b.n	37d8 <__aeabi_dsub+0xc8>
    39ca:	430a      	orrs	r2, r1
    39cc:	0017      	movs	r7, r2
    39ce:	2100      	movs	r1, #0
    39d0:	1e7a      	subs	r2, r7, #1
    39d2:	4197      	sbcs	r7, r2
    39d4:	e6ee      	b.n	37b4 <__aeabi_dsub+0xa4>
    39d6:	2b00      	cmp	r3, #0
    39d8:	d000      	beq.n	39dc <__aeabi_dsub+0x2cc>
    39da:	e0e5      	b.n	3ba8 <__aeabi_dsub+0x498>
    39dc:	1c73      	adds	r3, r6, #1
    39de:	469c      	mov	ip, r3
    39e0:	055b      	lsls	r3, r3, #21
    39e2:	0d5b      	lsrs	r3, r3, #21
    39e4:	2b01      	cmp	r3, #1
    39e6:	dc00      	bgt.n	39ea <__aeabi_dsub+0x2da>
    39e8:	e09f      	b.n	3b2a <__aeabi_dsub+0x41a>
    39ea:	4b1a      	ldr	r3, [pc, #104]	; (3a54 <__aeabi_dsub+0x344>)
    39ec:	459c      	cmp	ip, r3
    39ee:	d100      	bne.n	39f2 <__aeabi_dsub+0x2e2>
    39f0:	e0c5      	b.n	3b7e <__aeabi_dsub+0x46e>
    39f2:	4452      	add	r2, sl
    39f4:	4552      	cmp	r2, sl
    39f6:	4180      	sbcs	r0, r0
    39f8:	1864      	adds	r4, r4, r1
    39fa:	4240      	negs	r0, r0
    39fc:	1824      	adds	r4, r4, r0
    39fe:	07e7      	lsls	r7, r4, #31
    3a00:	0852      	lsrs	r2, r2, #1
    3a02:	4317      	orrs	r7, r2
    3a04:	0864      	lsrs	r4, r4, #1
    3a06:	4666      	mov	r6, ip
    3a08:	e708      	b.n	381c <__aeabi_dsub+0x10c>
    3a0a:	4812      	ldr	r0, [pc, #72]	; (3a54 <__aeabi_dsub+0x344>)
    3a0c:	4285      	cmp	r5, r0
    3a0e:	d100      	bne.n	3a12 <__aeabi_dsub+0x302>
    3a10:	e085      	b.n	3b1e <__aeabi_dsub+0x40e>
    3a12:	001d      	movs	r5, r3
    3a14:	e6bc      	b.n	3790 <__aeabi_dsub+0x80>
    3a16:	0029      	movs	r1, r5
    3a18:	3e1f      	subs	r6, #31
    3a1a:	40f1      	lsrs	r1, r6
    3a1c:	2b20      	cmp	r3, #32
    3a1e:	d100      	bne.n	3a22 <__aeabi_dsub+0x312>
    3a20:	e07f      	b.n	3b22 <__aeabi_dsub+0x412>
    3a22:	2240      	movs	r2, #64	; 0x40
    3a24:	1ad3      	subs	r3, r2, r3
    3a26:	409d      	lsls	r5, r3
    3a28:	432f      	orrs	r7, r5
    3a2a:	1e7d      	subs	r5, r7, #1
    3a2c:	41af      	sbcs	r7, r5
    3a2e:	2400      	movs	r4, #0
    3a30:	430f      	orrs	r7, r1
    3a32:	2600      	movs	r6, #0
    3a34:	e78e      	b.n	3954 <__aeabi_dsub+0x244>
    3a36:	002b      	movs	r3, r5
    3a38:	000f      	movs	r7, r1
    3a3a:	3b20      	subs	r3, #32
    3a3c:	40df      	lsrs	r7, r3
    3a3e:	2d20      	cmp	r5, #32
    3a40:	d071      	beq.n	3b26 <__aeabi_dsub+0x416>
    3a42:	2340      	movs	r3, #64	; 0x40
    3a44:	1b5d      	subs	r5, r3, r5
    3a46:	40a9      	lsls	r1, r5
    3a48:	430a      	orrs	r2, r1
    3a4a:	1e51      	subs	r1, r2, #1
    3a4c:	418a      	sbcs	r2, r1
    3a4e:	2100      	movs	r1, #0
    3a50:	4317      	orrs	r7, r2
    3a52:	e6af      	b.n	37b4 <__aeabi_dsub+0xa4>
    3a54:	000007ff 	.word	0x000007ff
    3a58:	ff7fffff 	.word	0xff7fffff
    3a5c:	800fffff 	.word	0x800fffff
    3a60:	2e00      	cmp	r6, #0
    3a62:	d03e      	beq.n	3ae2 <__aeabi_dsub+0x3d2>
    3a64:	4eb3      	ldr	r6, [pc, #716]	; (3d34 <__aeabi_dsub+0x624>)
    3a66:	45b4      	cmp	ip, r6
    3a68:	d045      	beq.n	3af6 <__aeabi_dsub+0x3e6>
    3a6a:	2680      	movs	r6, #128	; 0x80
    3a6c:	0436      	lsls	r6, r6, #16
    3a6e:	426d      	negs	r5, r5
    3a70:	4334      	orrs	r4, r6
    3a72:	2d38      	cmp	r5, #56	; 0x38
    3a74:	dd00      	ble.n	3a78 <__aeabi_dsub+0x368>
    3a76:	e0a8      	b.n	3bca <__aeabi_dsub+0x4ba>
    3a78:	2d1f      	cmp	r5, #31
    3a7a:	dd00      	ble.n	3a7e <__aeabi_dsub+0x36e>
    3a7c:	e11f      	b.n	3cbe <__aeabi_dsub+0x5ae>
    3a7e:	2620      	movs	r6, #32
    3a80:	0027      	movs	r7, r4
    3a82:	4650      	mov	r0, sl
    3a84:	1b76      	subs	r6, r6, r5
    3a86:	40b7      	lsls	r7, r6
    3a88:	40e8      	lsrs	r0, r5
    3a8a:	4307      	orrs	r7, r0
    3a8c:	4650      	mov	r0, sl
    3a8e:	40b0      	lsls	r0, r6
    3a90:	1e46      	subs	r6, r0, #1
    3a92:	41b0      	sbcs	r0, r6
    3a94:	40ec      	lsrs	r4, r5
    3a96:	4338      	orrs	r0, r7
    3a98:	1a17      	subs	r7, r2, r0
    3a9a:	42ba      	cmp	r2, r7
    3a9c:	4192      	sbcs	r2, r2
    3a9e:	1b0c      	subs	r4, r1, r4
    3aa0:	4252      	negs	r2, r2
    3aa2:	1aa4      	subs	r4, r4, r2
    3aa4:	4666      	mov	r6, ip
    3aa6:	4698      	mov	r8, r3
    3aa8:	e68b      	b.n	37c2 <__aeabi_dsub+0xb2>
    3aaa:	4664      	mov	r4, ip
    3aac:	4667      	mov	r7, ip
    3aae:	432c      	orrs	r4, r5
    3ab0:	d000      	beq.n	3ab4 <__aeabi_dsub+0x3a4>
    3ab2:	e68b      	b.n	37cc <__aeabi_dsub+0xbc>
    3ab4:	2500      	movs	r5, #0
    3ab6:	2600      	movs	r6, #0
    3ab8:	2700      	movs	r7, #0
    3aba:	e6ea      	b.n	3892 <__aeabi_dsub+0x182>
    3abc:	001e      	movs	r6, r3
    3abe:	e6ad      	b.n	381c <__aeabi_dsub+0x10c>
    3ac0:	2b1f      	cmp	r3, #31
    3ac2:	dc60      	bgt.n	3b86 <__aeabi_dsub+0x476>
    3ac4:	2720      	movs	r7, #32
    3ac6:	1af8      	subs	r0, r7, r3
    3ac8:	000f      	movs	r7, r1
    3aca:	4684      	mov	ip, r0
    3acc:	4087      	lsls	r7, r0
    3ace:	0010      	movs	r0, r2
    3ad0:	40d8      	lsrs	r0, r3
    3ad2:	4307      	orrs	r7, r0
    3ad4:	4660      	mov	r0, ip
    3ad6:	4082      	lsls	r2, r0
    3ad8:	1e50      	subs	r0, r2, #1
    3ada:	4182      	sbcs	r2, r0
    3adc:	40d9      	lsrs	r1, r3
    3ade:	4317      	orrs	r7, r2
    3ae0:	e6f5      	b.n	38ce <__aeabi_dsub+0x1be>
    3ae2:	0026      	movs	r6, r4
    3ae4:	4650      	mov	r0, sl
    3ae6:	4306      	orrs	r6, r0
    3ae8:	d005      	beq.n	3af6 <__aeabi_dsub+0x3e6>
    3aea:	43ed      	mvns	r5, r5
    3aec:	2d00      	cmp	r5, #0
    3aee:	d0d3      	beq.n	3a98 <__aeabi_dsub+0x388>
    3af0:	4e90      	ldr	r6, [pc, #576]	; (3d34 <__aeabi_dsub+0x624>)
    3af2:	45b4      	cmp	ip, r6
    3af4:	d1bd      	bne.n	3a72 <__aeabi_dsub+0x362>
    3af6:	000c      	movs	r4, r1
    3af8:	0017      	movs	r7, r2
    3afa:	4666      	mov	r6, ip
    3afc:	4698      	mov	r8, r3
    3afe:	e68d      	b.n	381c <__aeabi_dsub+0x10c>
    3b00:	488c      	ldr	r0, [pc, #560]	; (3d34 <__aeabi_dsub+0x624>)
    3b02:	4283      	cmp	r3, r0
    3b04:	d00b      	beq.n	3b1e <__aeabi_dsub+0x40e>
    3b06:	4663      	mov	r3, ip
    3b08:	e6d9      	b.n	38be <__aeabi_dsub+0x1ae>
    3b0a:	2d00      	cmp	r5, #0
    3b0c:	d000      	beq.n	3b10 <__aeabi_dsub+0x400>
    3b0e:	e096      	b.n	3c3e <__aeabi_dsub+0x52e>
    3b10:	0008      	movs	r0, r1
    3b12:	4310      	orrs	r0, r2
    3b14:	d100      	bne.n	3b18 <__aeabi_dsub+0x408>
    3b16:	e0e2      	b.n	3cde <__aeabi_dsub+0x5ce>
    3b18:	000c      	movs	r4, r1
    3b1a:	0017      	movs	r7, r2
    3b1c:	4698      	mov	r8, r3
    3b1e:	4e85      	ldr	r6, [pc, #532]	; (3d34 <__aeabi_dsub+0x624>)
    3b20:	e67c      	b.n	381c <__aeabi_dsub+0x10c>
    3b22:	2500      	movs	r5, #0
    3b24:	e780      	b.n	3a28 <__aeabi_dsub+0x318>
    3b26:	2100      	movs	r1, #0
    3b28:	e78e      	b.n	3a48 <__aeabi_dsub+0x338>
    3b2a:	0023      	movs	r3, r4
    3b2c:	4650      	mov	r0, sl
    3b2e:	4303      	orrs	r3, r0
    3b30:	2e00      	cmp	r6, #0
    3b32:	d000      	beq.n	3b36 <__aeabi_dsub+0x426>
    3b34:	e0a8      	b.n	3c88 <__aeabi_dsub+0x578>
    3b36:	2b00      	cmp	r3, #0
    3b38:	d100      	bne.n	3b3c <__aeabi_dsub+0x42c>
    3b3a:	e0de      	b.n	3cfa <__aeabi_dsub+0x5ea>
    3b3c:	000b      	movs	r3, r1
    3b3e:	4313      	orrs	r3, r2
    3b40:	d100      	bne.n	3b44 <__aeabi_dsub+0x434>
    3b42:	e66b      	b.n	381c <__aeabi_dsub+0x10c>
    3b44:	4452      	add	r2, sl
    3b46:	4552      	cmp	r2, sl
    3b48:	4180      	sbcs	r0, r0
    3b4a:	1864      	adds	r4, r4, r1
    3b4c:	4240      	negs	r0, r0
    3b4e:	1824      	adds	r4, r4, r0
    3b50:	0017      	movs	r7, r2
    3b52:	0223      	lsls	r3, r4, #8
    3b54:	d400      	bmi.n	3b58 <__aeabi_dsub+0x448>
    3b56:	e6fd      	b.n	3954 <__aeabi_dsub+0x244>
    3b58:	4b77      	ldr	r3, [pc, #476]	; (3d38 <__aeabi_dsub+0x628>)
    3b5a:	4666      	mov	r6, ip
    3b5c:	401c      	ands	r4, r3
    3b5e:	e65d      	b.n	381c <__aeabi_dsub+0x10c>
    3b60:	0025      	movs	r5, r4
    3b62:	4650      	mov	r0, sl
    3b64:	4305      	orrs	r5, r0
    3b66:	2e00      	cmp	r6, #0
    3b68:	d1cf      	bne.n	3b0a <__aeabi_dsub+0x3fa>
    3b6a:	2d00      	cmp	r5, #0
    3b6c:	d14f      	bne.n	3c0e <__aeabi_dsub+0x4fe>
    3b6e:	000c      	movs	r4, r1
    3b70:	4314      	orrs	r4, r2
    3b72:	d100      	bne.n	3b76 <__aeabi_dsub+0x466>
    3b74:	e0a0      	b.n	3cb8 <__aeabi_dsub+0x5a8>
    3b76:	000c      	movs	r4, r1
    3b78:	0017      	movs	r7, r2
    3b7a:	4698      	mov	r8, r3
    3b7c:	e64e      	b.n	381c <__aeabi_dsub+0x10c>
    3b7e:	4666      	mov	r6, ip
    3b80:	2400      	movs	r4, #0
    3b82:	2700      	movs	r7, #0
    3b84:	e685      	b.n	3892 <__aeabi_dsub+0x182>
    3b86:	001f      	movs	r7, r3
    3b88:	0008      	movs	r0, r1
    3b8a:	3f20      	subs	r7, #32
    3b8c:	40f8      	lsrs	r0, r7
    3b8e:	0007      	movs	r7, r0
    3b90:	2b20      	cmp	r3, #32
    3b92:	d100      	bne.n	3b96 <__aeabi_dsub+0x486>
    3b94:	e08e      	b.n	3cb4 <__aeabi_dsub+0x5a4>
    3b96:	2040      	movs	r0, #64	; 0x40
    3b98:	1ac3      	subs	r3, r0, r3
    3b9a:	4099      	lsls	r1, r3
    3b9c:	430a      	orrs	r2, r1
    3b9e:	1e51      	subs	r1, r2, #1
    3ba0:	418a      	sbcs	r2, r1
    3ba2:	2100      	movs	r1, #0
    3ba4:	4317      	orrs	r7, r2
    3ba6:	e692      	b.n	38ce <__aeabi_dsub+0x1be>
    3ba8:	2e00      	cmp	r6, #0
    3baa:	d114      	bne.n	3bd6 <__aeabi_dsub+0x4c6>
    3bac:	0026      	movs	r6, r4
    3bae:	4650      	mov	r0, sl
    3bb0:	4306      	orrs	r6, r0
    3bb2:	d062      	beq.n	3c7a <__aeabi_dsub+0x56a>
    3bb4:	43db      	mvns	r3, r3
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d15c      	bne.n	3c74 <__aeabi_dsub+0x564>
    3bba:	1887      	adds	r7, r0, r2
    3bbc:	4297      	cmp	r7, r2
    3bbe:	4192      	sbcs	r2, r2
    3bc0:	1864      	adds	r4, r4, r1
    3bc2:	4252      	negs	r2, r2
    3bc4:	18a4      	adds	r4, r4, r2
    3bc6:	4666      	mov	r6, ip
    3bc8:	e687      	b.n	38da <__aeabi_dsub+0x1ca>
    3bca:	4650      	mov	r0, sl
    3bcc:	4320      	orrs	r0, r4
    3bce:	1e44      	subs	r4, r0, #1
    3bd0:	41a0      	sbcs	r0, r4
    3bd2:	2400      	movs	r4, #0
    3bd4:	e760      	b.n	3a98 <__aeabi_dsub+0x388>
    3bd6:	4e57      	ldr	r6, [pc, #348]	; (3d34 <__aeabi_dsub+0x624>)
    3bd8:	45b4      	cmp	ip, r6
    3bda:	d04e      	beq.n	3c7a <__aeabi_dsub+0x56a>
    3bdc:	2680      	movs	r6, #128	; 0x80
    3bde:	0436      	lsls	r6, r6, #16
    3be0:	425b      	negs	r3, r3
    3be2:	4334      	orrs	r4, r6
    3be4:	2b38      	cmp	r3, #56	; 0x38
    3be6:	dd00      	ble.n	3bea <__aeabi_dsub+0x4da>
    3be8:	e07f      	b.n	3cea <__aeabi_dsub+0x5da>
    3bea:	2b1f      	cmp	r3, #31
    3bec:	dd00      	ble.n	3bf0 <__aeabi_dsub+0x4e0>
    3bee:	e08b      	b.n	3d08 <__aeabi_dsub+0x5f8>
    3bf0:	2620      	movs	r6, #32
    3bf2:	0027      	movs	r7, r4
    3bf4:	4650      	mov	r0, sl
    3bf6:	1af6      	subs	r6, r6, r3
    3bf8:	40b7      	lsls	r7, r6
    3bfa:	40d8      	lsrs	r0, r3
    3bfc:	4307      	orrs	r7, r0
    3bfe:	4650      	mov	r0, sl
    3c00:	40b0      	lsls	r0, r6
    3c02:	1e46      	subs	r6, r0, #1
    3c04:	41b0      	sbcs	r0, r6
    3c06:	4307      	orrs	r7, r0
    3c08:	40dc      	lsrs	r4, r3
    3c0a:	18bf      	adds	r7, r7, r2
    3c0c:	e7d6      	b.n	3bbc <__aeabi_dsub+0x4ac>
    3c0e:	000d      	movs	r5, r1
    3c10:	4315      	orrs	r5, r2
    3c12:	d100      	bne.n	3c16 <__aeabi_dsub+0x506>
    3c14:	e602      	b.n	381c <__aeabi_dsub+0x10c>
    3c16:	4650      	mov	r0, sl
    3c18:	1a80      	subs	r0, r0, r2
    3c1a:	4582      	cmp	sl, r0
    3c1c:	41bf      	sbcs	r7, r7
    3c1e:	1a65      	subs	r5, r4, r1
    3c20:	427f      	negs	r7, r7
    3c22:	1bed      	subs	r5, r5, r7
    3c24:	4684      	mov	ip, r0
    3c26:	0228      	lsls	r0, r5, #8
    3c28:	d400      	bmi.n	3c2c <__aeabi_dsub+0x51c>
    3c2a:	e68d      	b.n	3948 <__aeabi_dsub+0x238>
    3c2c:	4650      	mov	r0, sl
    3c2e:	1a17      	subs	r7, r2, r0
    3c30:	42ba      	cmp	r2, r7
    3c32:	4192      	sbcs	r2, r2
    3c34:	1b0c      	subs	r4, r1, r4
    3c36:	4252      	negs	r2, r2
    3c38:	1aa4      	subs	r4, r4, r2
    3c3a:	4698      	mov	r8, r3
    3c3c:	e5ee      	b.n	381c <__aeabi_dsub+0x10c>
    3c3e:	000d      	movs	r5, r1
    3c40:	4315      	orrs	r5, r2
    3c42:	d100      	bne.n	3c46 <__aeabi_dsub+0x536>
    3c44:	e76b      	b.n	3b1e <__aeabi_dsub+0x40e>
    3c46:	4650      	mov	r0, sl
    3c48:	0767      	lsls	r7, r4, #29
    3c4a:	08c0      	lsrs	r0, r0, #3
    3c4c:	4307      	orrs	r7, r0
    3c4e:	2080      	movs	r0, #128	; 0x80
    3c50:	08e4      	lsrs	r4, r4, #3
    3c52:	0300      	lsls	r0, r0, #12
    3c54:	4204      	tst	r4, r0
    3c56:	d007      	beq.n	3c68 <__aeabi_dsub+0x558>
    3c58:	08cd      	lsrs	r5, r1, #3
    3c5a:	4205      	tst	r5, r0
    3c5c:	d104      	bne.n	3c68 <__aeabi_dsub+0x558>
    3c5e:	002c      	movs	r4, r5
    3c60:	4698      	mov	r8, r3
    3c62:	08d7      	lsrs	r7, r2, #3
    3c64:	0749      	lsls	r1, r1, #29
    3c66:	430f      	orrs	r7, r1
    3c68:	0f7b      	lsrs	r3, r7, #29
    3c6a:	00e4      	lsls	r4, r4, #3
    3c6c:	431c      	orrs	r4, r3
    3c6e:	00ff      	lsls	r7, r7, #3
    3c70:	4e30      	ldr	r6, [pc, #192]	; (3d34 <__aeabi_dsub+0x624>)
    3c72:	e5d3      	b.n	381c <__aeabi_dsub+0x10c>
    3c74:	4e2f      	ldr	r6, [pc, #188]	; (3d34 <__aeabi_dsub+0x624>)
    3c76:	45b4      	cmp	ip, r6
    3c78:	d1b4      	bne.n	3be4 <__aeabi_dsub+0x4d4>
    3c7a:	000c      	movs	r4, r1
    3c7c:	0017      	movs	r7, r2
    3c7e:	4666      	mov	r6, ip
    3c80:	e5cc      	b.n	381c <__aeabi_dsub+0x10c>
    3c82:	2700      	movs	r7, #0
    3c84:	2400      	movs	r4, #0
    3c86:	e5e8      	b.n	385a <__aeabi_dsub+0x14a>
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d039      	beq.n	3d00 <__aeabi_dsub+0x5f0>
    3c8c:	000b      	movs	r3, r1
    3c8e:	4313      	orrs	r3, r2
    3c90:	d100      	bne.n	3c94 <__aeabi_dsub+0x584>
    3c92:	e744      	b.n	3b1e <__aeabi_dsub+0x40e>
    3c94:	08c0      	lsrs	r0, r0, #3
    3c96:	0767      	lsls	r7, r4, #29
    3c98:	4307      	orrs	r7, r0
    3c9a:	2080      	movs	r0, #128	; 0x80
    3c9c:	08e4      	lsrs	r4, r4, #3
    3c9e:	0300      	lsls	r0, r0, #12
    3ca0:	4204      	tst	r4, r0
    3ca2:	d0e1      	beq.n	3c68 <__aeabi_dsub+0x558>
    3ca4:	08cb      	lsrs	r3, r1, #3
    3ca6:	4203      	tst	r3, r0
    3ca8:	d1de      	bne.n	3c68 <__aeabi_dsub+0x558>
    3caa:	08d7      	lsrs	r7, r2, #3
    3cac:	0749      	lsls	r1, r1, #29
    3cae:	430f      	orrs	r7, r1
    3cb0:	001c      	movs	r4, r3
    3cb2:	e7d9      	b.n	3c68 <__aeabi_dsub+0x558>
    3cb4:	2100      	movs	r1, #0
    3cb6:	e771      	b.n	3b9c <__aeabi_dsub+0x48c>
    3cb8:	2500      	movs	r5, #0
    3cba:	2700      	movs	r7, #0
    3cbc:	e5e9      	b.n	3892 <__aeabi_dsub+0x182>
    3cbe:	002e      	movs	r6, r5
    3cc0:	0027      	movs	r7, r4
    3cc2:	3e20      	subs	r6, #32
    3cc4:	40f7      	lsrs	r7, r6
    3cc6:	2d20      	cmp	r5, #32
    3cc8:	d02f      	beq.n	3d2a <__aeabi_dsub+0x61a>
    3cca:	2640      	movs	r6, #64	; 0x40
    3ccc:	1b75      	subs	r5, r6, r5
    3cce:	40ac      	lsls	r4, r5
    3cd0:	4650      	mov	r0, sl
    3cd2:	4320      	orrs	r0, r4
    3cd4:	1e44      	subs	r4, r0, #1
    3cd6:	41a0      	sbcs	r0, r4
    3cd8:	2400      	movs	r4, #0
    3cda:	4338      	orrs	r0, r7
    3cdc:	e6dc      	b.n	3a98 <__aeabi_dsub+0x388>
    3cde:	2480      	movs	r4, #128	; 0x80
    3ce0:	2500      	movs	r5, #0
    3ce2:	0324      	lsls	r4, r4, #12
    3ce4:	4e13      	ldr	r6, [pc, #76]	; (3d34 <__aeabi_dsub+0x624>)
    3ce6:	2700      	movs	r7, #0
    3ce8:	e5d3      	b.n	3892 <__aeabi_dsub+0x182>
    3cea:	4650      	mov	r0, sl
    3cec:	4320      	orrs	r0, r4
    3cee:	0007      	movs	r7, r0
    3cf0:	1e78      	subs	r0, r7, #1
    3cf2:	4187      	sbcs	r7, r0
    3cf4:	2400      	movs	r4, #0
    3cf6:	18bf      	adds	r7, r7, r2
    3cf8:	e760      	b.n	3bbc <__aeabi_dsub+0x4ac>
    3cfa:	000c      	movs	r4, r1
    3cfc:	0017      	movs	r7, r2
    3cfe:	e58d      	b.n	381c <__aeabi_dsub+0x10c>
    3d00:	000c      	movs	r4, r1
    3d02:	0017      	movs	r7, r2
    3d04:	4e0b      	ldr	r6, [pc, #44]	; (3d34 <__aeabi_dsub+0x624>)
    3d06:	e589      	b.n	381c <__aeabi_dsub+0x10c>
    3d08:	001e      	movs	r6, r3
    3d0a:	0027      	movs	r7, r4
    3d0c:	3e20      	subs	r6, #32
    3d0e:	40f7      	lsrs	r7, r6
    3d10:	2b20      	cmp	r3, #32
    3d12:	d00c      	beq.n	3d2e <__aeabi_dsub+0x61e>
    3d14:	2640      	movs	r6, #64	; 0x40
    3d16:	1af3      	subs	r3, r6, r3
    3d18:	409c      	lsls	r4, r3
    3d1a:	4650      	mov	r0, sl
    3d1c:	4320      	orrs	r0, r4
    3d1e:	1e44      	subs	r4, r0, #1
    3d20:	41a0      	sbcs	r0, r4
    3d22:	4307      	orrs	r7, r0
    3d24:	2400      	movs	r4, #0
    3d26:	18bf      	adds	r7, r7, r2
    3d28:	e748      	b.n	3bbc <__aeabi_dsub+0x4ac>
    3d2a:	2400      	movs	r4, #0
    3d2c:	e7d0      	b.n	3cd0 <__aeabi_dsub+0x5c0>
    3d2e:	2400      	movs	r4, #0
    3d30:	e7f3      	b.n	3d1a <__aeabi_dsub+0x60a>
    3d32:	46c0      	nop			; (mov r8, r8)
    3d34:	000007ff 	.word	0x000007ff
    3d38:	ff7fffff 	.word	0xff7fffff

00003d3c <__aeabi_d2iz>:
    3d3c:	b530      	push	{r4, r5, lr}
    3d3e:	4d13      	ldr	r5, [pc, #76]	; (3d8c <__aeabi_d2iz+0x50>)
    3d40:	030a      	lsls	r2, r1, #12
    3d42:	004b      	lsls	r3, r1, #1
    3d44:	0b12      	lsrs	r2, r2, #12
    3d46:	0d5b      	lsrs	r3, r3, #21
    3d48:	0fc9      	lsrs	r1, r1, #31
    3d4a:	2400      	movs	r4, #0
    3d4c:	42ab      	cmp	r3, r5
    3d4e:	dd10      	ble.n	3d72 <__aeabi_d2iz+0x36>
    3d50:	4c0f      	ldr	r4, [pc, #60]	; (3d90 <__aeabi_d2iz+0x54>)
    3d52:	42a3      	cmp	r3, r4
    3d54:	dc0f      	bgt.n	3d76 <__aeabi_d2iz+0x3a>
    3d56:	2480      	movs	r4, #128	; 0x80
    3d58:	4d0e      	ldr	r5, [pc, #56]	; (3d94 <__aeabi_d2iz+0x58>)
    3d5a:	0364      	lsls	r4, r4, #13
    3d5c:	4322      	orrs	r2, r4
    3d5e:	1aed      	subs	r5, r5, r3
    3d60:	2d1f      	cmp	r5, #31
    3d62:	dd0b      	ble.n	3d7c <__aeabi_d2iz+0x40>
    3d64:	480c      	ldr	r0, [pc, #48]	; (3d98 <__aeabi_d2iz+0x5c>)
    3d66:	1ac3      	subs	r3, r0, r3
    3d68:	40da      	lsrs	r2, r3
    3d6a:	4254      	negs	r4, r2
    3d6c:	2900      	cmp	r1, #0
    3d6e:	d100      	bne.n	3d72 <__aeabi_d2iz+0x36>
    3d70:	0014      	movs	r4, r2
    3d72:	0020      	movs	r0, r4
    3d74:	bd30      	pop	{r4, r5, pc}
    3d76:	4b09      	ldr	r3, [pc, #36]	; (3d9c <__aeabi_d2iz+0x60>)
    3d78:	18cc      	adds	r4, r1, r3
    3d7a:	e7fa      	b.n	3d72 <__aeabi_d2iz+0x36>
    3d7c:	4c08      	ldr	r4, [pc, #32]	; (3da0 <__aeabi_d2iz+0x64>)
    3d7e:	40e8      	lsrs	r0, r5
    3d80:	46a4      	mov	ip, r4
    3d82:	4463      	add	r3, ip
    3d84:	409a      	lsls	r2, r3
    3d86:	4302      	orrs	r2, r0
    3d88:	e7ef      	b.n	3d6a <__aeabi_d2iz+0x2e>
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	000003fe 	.word	0x000003fe
    3d90:	0000041d 	.word	0x0000041d
    3d94:	00000433 	.word	0x00000433
    3d98:	00000413 	.word	0x00000413
    3d9c:	7fffffff 	.word	0x7fffffff
    3da0:	fffffbed 	.word	0xfffffbed

00003da4 <__aeabi_ui2d>:
    3da4:	b510      	push	{r4, lr}
    3da6:	1e04      	subs	r4, r0, #0
    3da8:	d028      	beq.n	3dfc <__aeabi_ui2d+0x58>
    3daa:	f000 f833 	bl	3e14 <__clzsi2>
    3dae:	4b15      	ldr	r3, [pc, #84]	; (3e04 <__aeabi_ui2d+0x60>)
    3db0:	4a15      	ldr	r2, [pc, #84]	; (3e08 <__aeabi_ui2d+0x64>)
    3db2:	1a1b      	subs	r3, r3, r0
    3db4:	1ad2      	subs	r2, r2, r3
    3db6:	2a1f      	cmp	r2, #31
    3db8:	dd15      	ble.n	3de6 <__aeabi_ui2d+0x42>
    3dba:	4a14      	ldr	r2, [pc, #80]	; (3e0c <__aeabi_ui2d+0x68>)
    3dbc:	1ad2      	subs	r2, r2, r3
    3dbe:	4094      	lsls	r4, r2
    3dc0:	2200      	movs	r2, #0
    3dc2:	0324      	lsls	r4, r4, #12
    3dc4:	055b      	lsls	r3, r3, #21
    3dc6:	0b24      	lsrs	r4, r4, #12
    3dc8:	0d5b      	lsrs	r3, r3, #21
    3dca:	2100      	movs	r1, #0
    3dcc:	0010      	movs	r0, r2
    3dce:	0324      	lsls	r4, r4, #12
    3dd0:	0d0a      	lsrs	r2, r1, #20
    3dd2:	0b24      	lsrs	r4, r4, #12
    3dd4:	0512      	lsls	r2, r2, #20
    3dd6:	4322      	orrs	r2, r4
    3dd8:	4c0d      	ldr	r4, [pc, #52]	; (3e10 <__aeabi_ui2d+0x6c>)
    3dda:	051b      	lsls	r3, r3, #20
    3ddc:	4022      	ands	r2, r4
    3dde:	4313      	orrs	r3, r2
    3de0:	005b      	lsls	r3, r3, #1
    3de2:	0859      	lsrs	r1, r3, #1
    3de4:	bd10      	pop	{r4, pc}
    3de6:	0021      	movs	r1, r4
    3de8:	4091      	lsls	r1, r2
    3dea:	000a      	movs	r2, r1
    3dec:	210b      	movs	r1, #11
    3dee:	1a08      	subs	r0, r1, r0
    3df0:	40c4      	lsrs	r4, r0
    3df2:	055b      	lsls	r3, r3, #21
    3df4:	0324      	lsls	r4, r4, #12
    3df6:	0b24      	lsrs	r4, r4, #12
    3df8:	0d5b      	lsrs	r3, r3, #21
    3dfa:	e7e6      	b.n	3dca <__aeabi_ui2d+0x26>
    3dfc:	2300      	movs	r3, #0
    3dfe:	2400      	movs	r4, #0
    3e00:	2200      	movs	r2, #0
    3e02:	e7e2      	b.n	3dca <__aeabi_ui2d+0x26>
    3e04:	0000041e 	.word	0x0000041e
    3e08:	00000433 	.word	0x00000433
    3e0c:	00000413 	.word	0x00000413
    3e10:	800fffff 	.word	0x800fffff

00003e14 <__clzsi2>:
    3e14:	211c      	movs	r1, #28
    3e16:	2301      	movs	r3, #1
    3e18:	041b      	lsls	r3, r3, #16
    3e1a:	4298      	cmp	r0, r3
    3e1c:	d301      	bcc.n	3e22 <__clzsi2+0xe>
    3e1e:	0c00      	lsrs	r0, r0, #16
    3e20:	3910      	subs	r1, #16
    3e22:	0a1b      	lsrs	r3, r3, #8
    3e24:	4298      	cmp	r0, r3
    3e26:	d301      	bcc.n	3e2c <__clzsi2+0x18>
    3e28:	0a00      	lsrs	r0, r0, #8
    3e2a:	3908      	subs	r1, #8
    3e2c:	091b      	lsrs	r3, r3, #4
    3e2e:	4298      	cmp	r0, r3
    3e30:	d301      	bcc.n	3e36 <__clzsi2+0x22>
    3e32:	0900      	lsrs	r0, r0, #4
    3e34:	3904      	subs	r1, #4
    3e36:	a202      	add	r2, pc, #8	; (adr r2, 3e40 <__clzsi2+0x2c>)
    3e38:	5c10      	ldrb	r0, [r2, r0]
    3e3a:	1840      	adds	r0, r0, r1
    3e3c:	4770      	bx	lr
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	02020304 	.word	0x02020304
    3e44:	01010101 	.word	0x01010101
	...

00003e50 <__libc_init_array>:
    3e50:	b570      	push	{r4, r5, r6, lr}
    3e52:	2600      	movs	r6, #0
    3e54:	4d0c      	ldr	r5, [pc, #48]	; (3e88 <__libc_init_array+0x38>)
    3e56:	4c0d      	ldr	r4, [pc, #52]	; (3e8c <__libc_init_array+0x3c>)
    3e58:	1b64      	subs	r4, r4, r5
    3e5a:	10a4      	asrs	r4, r4, #2
    3e5c:	42a6      	cmp	r6, r4
    3e5e:	d109      	bne.n	3e74 <__libc_init_array+0x24>
    3e60:	2600      	movs	r6, #0
    3e62:	f000 f881 	bl	3f68 <_init>
    3e66:	4d0a      	ldr	r5, [pc, #40]	; (3e90 <__libc_init_array+0x40>)
    3e68:	4c0a      	ldr	r4, [pc, #40]	; (3e94 <__libc_init_array+0x44>)
    3e6a:	1b64      	subs	r4, r4, r5
    3e6c:	10a4      	asrs	r4, r4, #2
    3e6e:	42a6      	cmp	r6, r4
    3e70:	d105      	bne.n	3e7e <__libc_init_array+0x2e>
    3e72:	bd70      	pop	{r4, r5, r6, pc}
    3e74:	00b3      	lsls	r3, r6, #2
    3e76:	58eb      	ldr	r3, [r5, r3]
    3e78:	4798      	blx	r3
    3e7a:	3601      	adds	r6, #1
    3e7c:	e7ee      	b.n	3e5c <__libc_init_array+0xc>
    3e7e:	00b3      	lsls	r3, r6, #2
    3e80:	58eb      	ldr	r3, [r5, r3]
    3e82:	4798      	blx	r3
    3e84:	3601      	adds	r6, #1
    3e86:	e7f2      	b.n	3e6e <__libc_init_array+0x1e>
    3e88:	00003f74 	.word	0x00003f74
    3e8c:	00003f74 	.word	0x00003f74
    3e90:	00003f74 	.word	0x00003f74
    3e94:	00003f78 	.word	0x00003f78

00003e98 <memset>:
    3e98:	0003      	movs	r3, r0
    3e9a:	1882      	adds	r2, r0, r2
    3e9c:	4293      	cmp	r3, r2
    3e9e:	d100      	bne.n	3ea2 <memset+0xa>
    3ea0:	4770      	bx	lr
    3ea2:	7019      	strb	r1, [r3, #0]
    3ea4:	3301      	adds	r3, #1
    3ea6:	e7f9      	b.n	3e9c <memset+0x4>
    3ea8:	42000800 	.word	0x42000800
    3eac:	42000c00 	.word	0x42000c00
    3eb0:	42001000 	.word	0x42001000

00003eb4 <_tcc_intflag>:
    3eb4:	00000001 00000002 00000004 00000008     ................
    3ec4:	00001000 00002000 00004000 00008000     ..... ...@......
    3ed4:	00010000 00020000 00040000 00080000     ................

00003ee4 <tc_interrupt_vectors.12207>:
    3ee4:	00000e0d 00002da0 00002d82 00002d3c     .....-...-..<-..
    3ef4:	00002c5a 00002d3c 00002d74 00002d3c     Z,..<-..t-..<-..
    3f04:	00002c5a 00002d82 00002d82 00002d74     Z,...-...-..t-..
    3f14:	00002c5a 00002c52 00002c52 00002c52     Z,..R,..R,..R,..
    3f24:	00002fb8 00003400 000032c0 000032c0     ./...4...2...2..
    3f34:	000032bc 000033d8 000033d8 000033ca     .2...3...3...3..
    3f44:	000032bc 000033d8 000033ca 000033d8     .2...3...3...3..
    3f54:	000032bc 000033e0 000033e0 000033e0     .2...3...3...3..
    3f64:	000035e4                                .5..

00003f68 <_init>:
    3f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f6e:	bc08      	pop	{r3}
    3f70:	469e      	mov	lr, r3
    3f72:	4770      	bx	lr

00003f74 <__init_array_start>:
    3f74:	000000b5 	.word	0x000000b5

00003f78 <_fini>:
    3f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f7e:	bc08      	pop	{r3}
    3f80:	469e      	mov	lr, r3
    3f82:	4770      	bx	lr

00003f84 <__fini_array_start>:
    3f84:	0000008d 	.word	0x0000008d
