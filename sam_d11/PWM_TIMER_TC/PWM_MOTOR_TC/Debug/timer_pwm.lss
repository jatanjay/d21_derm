
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013b8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  000013b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  2000001c  000013d4  0002001c  2**2
                  ALLOC
  3 .stack        00000400  20000100  000014b8  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   00022054  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039c4  00000000  00000000  000420f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000560  00000000  00000000  00045ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000768  00000000  00000000  00046015  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00006444  00000000  00000000  0004677d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b6fa  00000000  00000000  0004cbc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0007920b  00000000  00000000  000582bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000c24  00000000  00000000  000d14c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000395c  00000000  00000000  000d20ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 05 00 20 e1 0d 00 00 df 0d 00 00 df 0d 00 00     ... ............
	...
      2c:	df 0d 00 00 00 00 00 00 00 00 00 00 df 0d 00 00     ................
      3c:	df 0d 00 00 df 0d 00 00 df 0d 00 00 df 0d 00 00     ................
      4c:	df 0d 00 00 f5 01 00 00 df 0d 00 00 df 0d 00 00     ................
      5c:	df 0d 00 00 95 01 00 00 35 03 00 00 45 03 00 00     ........5...E...
      6c:	55 03 00 00 4d 0a 00 00 f5 0a 00 00 05 0b 00 00     U...M...........
      7c:	df 0d 00 00 df 0d 00 00 df 0d 00 00 df 0d 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000001c 	.word	0x2000001c
      ac:	00000000 	.word	0x00000000
      b0:	000013b8 	.word	0x000013b8

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000020 	.word	0x20000020
      e0:	000013b8 	.word	0x000013b8
      e4:	000013b8 	.word	0x000013b8
      e8:	00000000 	.word	0x00000000

000000ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
      ec:	4b0c      	ldr	r3, [pc, #48]	; (120 <cpu_irq_enter_critical+0x34>)
      ee:	681b      	ldr	r3, [r3, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d106      	bne.n	102 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
      f8:	2b00      	cmp	r3, #0
      fa:	d007      	beq.n	10c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      fc:	2200      	movs	r2, #0
      fe:	4b09      	ldr	r3, [pc, #36]	; (124 <cpu_irq_enter_critical+0x38>)
     100:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     102:	4a07      	ldr	r2, [pc, #28]	; (120 <cpu_irq_enter_critical+0x34>)
     104:	6813      	ldr	r3, [r2, #0]
     106:	3301      	adds	r3, #1
     108:	6013      	str	r3, [r2, #0]
}
     10a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     10c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     10e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     112:	2200      	movs	r2, #0
     114:	4b04      	ldr	r3, [pc, #16]	; (128 <cpu_irq_enter_critical+0x3c>)
     116:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     118:	3201      	adds	r2, #1
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <cpu_irq_enter_critical+0x38>)
     11c:	701a      	strb	r2, [r3, #0]
     11e:	e7f0      	b.n	102 <cpu_irq_enter_critical+0x16>
     120:	20000038 	.word	0x20000038
     124:	2000003c 	.word	0x2000003c
     128:	20000000 	.word	0x20000000

0000012c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     12c:	4b08      	ldr	r3, [pc, #32]	; (150 <cpu_irq_leave_critical+0x24>)
     12e:	681a      	ldr	r2, [r3, #0]
     130:	3a01      	subs	r2, #1
     132:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     134:	681b      	ldr	r3, [r3, #0]
     136:	2b00      	cmp	r3, #0
     138:	d109      	bne.n	14e <cpu_irq_leave_critical+0x22>
     13a:	4b06      	ldr	r3, [pc, #24]	; (154 <cpu_irq_leave_critical+0x28>)
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b00      	cmp	r3, #0
     140:	d005      	beq.n	14e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     142:	2201      	movs	r2, #1
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_leave_critical+0x2c>)
     146:	701a      	strb	r2, [r3, #0]
     148:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     14c:	b662      	cpsie	i
	}
}
     14e:	4770      	bx	lr
     150:	20000038 	.word	0x20000038
     154:	2000003c 	.word	0x2000003c
     158:	20000000 	.word	0x20000000

0000015c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     160:	ac01      	add	r4, sp, #4
     162:	2501      	movs	r5, #1
     164:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     166:	2700      	movs	r7, #0
     168:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     16a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     16c:	0021      	movs	r1, r4
     16e:	2010      	movs	r0, #16
     170:	4e06      	ldr	r6, [pc, #24]	; (18c <system_board_init+0x30>)
     172:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     174:	2280      	movs	r2, #128	; 0x80
     176:	0252      	lsls	r2, r2, #9
     178:	4b05      	ldr	r3, [pc, #20]	; (190 <system_board_init+0x34>)
     17a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     17c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     17e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     180:	0021      	movs	r1, r4
     182:	200e      	movs	r0, #14
     184:	47b0      	blx	r6
}
     186:	b003      	add	sp, #12
     188:	bdf0      	pop	{r4, r5, r6, r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00000311 	.word	0x00000311
     190:	41004400 	.word	0x41004400

00000194 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     194:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     196:	4b0b      	ldr	r3, [pc, #44]	; (1c4 <EVSYS_Handler+0x30>)
     198:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     19a:	490b      	ldr	r1, [pc, #44]	; (1c8 <EVSYS_Handler+0x34>)
     19c:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     19e:	6898      	ldr	r0, [r3, #8]
     1a0:	4302      	orrs	r2, r0
     1a2:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     1a4:	4b09      	ldr	r3, [pc, #36]	; (1cc <EVSYS_Handler+0x38>)
     1a6:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     1a8:	e003      	b.n	1b2 <EVSYS_Handler+0x1e>
		current_hook->hook_func(current_hook->resource);
     1aa:	6820      	ldr	r0, [r4, #0]
     1ac:	6863      	ldr	r3, [r4, #4]
     1ae:	4798      	blx	r3
		current_hook = current_hook->next;
     1b0:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     1b2:	2c00      	cmp	r4, #0
     1b4:	d1f9      	bne.n	1aa <EVSYS_Handler+0x16>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     1b6:	4b03      	ldr	r3, [pc, #12]	; (1c4 <EVSYS_Handler+0x30>)
     1b8:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     1ba:	689a      	ldr	r2, [r3, #8]
     1bc:	438a      	bics	r2, r1
     1be:	609a      	str	r2, [r3, #8]
}
     1c0:	bd10      	pop	{r4, pc}
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	20000004 	.word	0x20000004
     1c8:	42000400 	.word	0x42000400
     1cc:	0f0fffff 	.word	0x0f0fffff

000001d0 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1d0:	4a06      	ldr	r2, [pc, #24]	; (1ec <_system_events_init+0x1c>)
     1d2:	6a13      	ldr	r3, [r2, #32]
     1d4:	2102      	movs	r1, #2
     1d6:	430b      	orrs	r3, r1
     1d8:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     1da:	2201      	movs	r2, #1
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <_system_events_init+0x20>)
     1de:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     1e0:	4b03      	ldr	r3, [pc, #12]	; (1f0 <_system_events_init+0x20>)
     1e2:	781b      	ldrb	r3, [r3, #0]
     1e4:	07db      	lsls	r3, r3, #31
     1e6:	d4fb      	bmi.n	1e0 <_system_events_init+0x10>
	}
}
     1e8:	4770      	bx	lr
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	40000400 	.word	0x40000400
     1f0:	42000400 	.word	0x42000400

000001f4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     1f4:	b510      	push	{r4, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1f6:	2200      	movs	r2, #0
     1f8:	4b0f      	ldr	r3, [pc, #60]	; (238 <EIC_Handler+0x44>)
     1fa:	701a      	strb	r2, [r3, #0]
     1fc:	e005      	b.n	20a <EIC_Handler+0x16>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     1fe:	480f      	ldr	r0, [pc, #60]	; (23c <EIC_Handler+0x48>)
     200:	e00a      	b.n	218 <EIC_Handler+0x24>
     202:	4a0d      	ldr	r2, [pc, #52]	; (238 <EIC_Handler+0x44>)
     204:	7813      	ldrb	r3, [r2, #0]
     206:	3301      	adds	r3, #1
     208:	7013      	strb	r3, [r2, #0]
     20a:	4b0b      	ldr	r3, [pc, #44]	; (238 <EIC_Handler+0x44>)
     20c:	781b      	ldrb	r3, [r3, #0]
     20e:	2b0f      	cmp	r3, #15
     210:	d811      	bhi.n	236 <EIC_Handler+0x42>
	if (eic_index < EIC_INST_NUM) {
     212:	2b1f      	cmp	r3, #31
     214:	d9f3      	bls.n	1fe <EIC_Handler+0xa>
	} else {
		Assert(false);
		return NULL;
     216:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     218:	211f      	movs	r1, #31
     21a:	4019      	ands	r1, r3
     21c:	2201      	movs	r2, #1
     21e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     220:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
     222:	4211      	tst	r1, r2
     224:	d0ed      	beq.n	202 <EIC_Handler+0xe>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     226:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     228:	009b      	lsls	r3, r3, #2
     22a:	4a05      	ldr	r2, [pc, #20]	; (240 <EIC_Handler+0x4c>)
     22c:	589b      	ldr	r3, [r3, r2]
     22e:	2b00      	cmp	r3, #0
     230:	d0e7      	beq.n	202 <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     232:	4798      	blx	r3
     234:	e7e5      	b.n	202 <EIC_Handler+0xe>
			}
		}
	}
}
     236:	bd10      	pop	{r4, pc}
     238:	20000072 	.word	0x20000072
     23c:	40001800 	.word	0x40001800
     240:	20000074 	.word	0x20000074

00000244 <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     244:	2200      	movs	r2, #0
     246:	2a00      	cmp	r2, #0
     248:	d006      	beq.n	258 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     24a:	2300      	movs	r3, #0
     24c:	2b00      	cmp	r3, #0
     24e:	d00b      	beq.n	268 <_extint_enable+0x24>
	return false;
     250:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     252:	2b00      	cmp	r3, #0
     254:	d1f9      	bne.n	24a <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     256:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     258:	4908      	ldr	r1, [pc, #32]	; (27c <_extint_enable+0x38>)
     25a:	780b      	ldrb	r3, [r1, #0]
     25c:	2002      	movs	r0, #2
     25e:	4303      	orrs	r3, r0
     260:	b2db      	uxtb	r3, r3
     262:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     264:	3201      	adds	r2, #1
     266:	e7ee      	b.n	246 <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     268:	4a04      	ldr	r2, [pc, #16]	; (27c <_extint_enable+0x38>)
     26a:	7852      	ldrb	r2, [r2, #1]
     26c:	b252      	sxtb	r2, r2
     26e:	2a00      	cmp	r2, #0
     270:	db01      	blt.n	276 <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     272:	3301      	adds	r3, #1
     274:	e7ea      	b.n	24c <_extint_enable+0x8>
			return true;
     276:	2301      	movs	r3, #1
     278:	e7eb      	b.n	252 <_extint_enable+0xe>
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	40001800 	.word	0x40001800

00000280 <_system_extint_init>:
{
     280:	b500      	push	{lr}
     282:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     284:	4a1b      	ldr	r2, [pc, #108]	; (2f4 <_system_extint_init+0x74>)
     286:	6993      	ldr	r3, [r2, #24]
     288:	2140      	movs	r1, #64	; 0x40
     28a:	430b      	orrs	r3, r1
     28c:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     28e:	a901      	add	r1, sp, #4
     290:	2301      	movs	r3, #1
     292:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     294:	2005      	movs	r0, #5
     296:	4b18      	ldr	r3, [pc, #96]	; (2f8 <_system_extint_init+0x78>)
     298:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     29a:	2005      	movs	r0, #5
     29c:	4b17      	ldr	r3, [pc, #92]	; (2fc <_system_extint_init+0x7c>)
     29e:	4798      	blx	r3
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a0:	2200      	movs	r2, #0
     2a2:	2a00      	cmp	r2, #0
     2a4:	d006      	beq.n	2b4 <_system_extint_init+0x34>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a6:	2300      	movs	r3, #0
     2a8:	2b00      	cmp	r3, #0
     2aa:	d00b      	beq.n	2c4 <_system_extint_init+0x44>
	return false;
     2ac:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
     2ae:	2b00      	cmp	r3, #0
     2b0:	d1f9      	bne.n	2a6 <_system_extint_init+0x26>
     2b2:	e016      	b.n	2e2 <_system_extint_init+0x62>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2b4:	4912      	ldr	r1, [pc, #72]	; (300 <_system_extint_init+0x80>)
     2b6:	780b      	ldrb	r3, [r1, #0]
     2b8:	2001      	movs	r0, #1
     2ba:	4303      	orrs	r3, r0
     2bc:	b2db      	uxtb	r3, r3
     2be:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2c0:	3201      	adds	r2, #1
     2c2:	e7ee      	b.n	2a2 <_system_extint_init+0x22>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     2c4:	4a0e      	ldr	r2, [pc, #56]	; (300 <_system_extint_init+0x80>)
     2c6:	7852      	ldrb	r2, [r2, #1]
     2c8:	b252      	sxtb	r2, r2
     2ca:	2a00      	cmp	r2, #0
     2cc:	db01      	blt.n	2d2 <_system_extint_init+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2ce:	3301      	adds	r3, #1
     2d0:	e7ea      	b.n	2a8 <_system_extint_init+0x28>
			return true;
     2d2:	2301      	movs	r3, #1
     2d4:	e7eb      	b.n	2ae <_system_extint_init+0x2e>
		_extint_dev.callbacks[j] = NULL;
     2d6:	0099      	lsls	r1, r3, #2
     2d8:	2000      	movs	r0, #0
     2da:	4a0a      	ldr	r2, [pc, #40]	; (304 <_system_extint_init+0x84>)
     2dc:	5088      	str	r0, [r1, r2]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2de:	3301      	adds	r3, #1
     2e0:	b2db      	uxtb	r3, r3
     2e2:	2b0f      	cmp	r3, #15
     2e4:	d9f7      	bls.n	2d6 <_system_extint_init+0x56>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2e6:	2210      	movs	r2, #16
     2e8:	4b07      	ldr	r3, [pc, #28]	; (308 <_system_extint_init+0x88>)
     2ea:	601a      	str	r2, [r3, #0]
	_extint_enable();
     2ec:	4b07      	ldr	r3, [pc, #28]	; (30c <_system_extint_init+0x8c>)
     2ee:	4798      	blx	r3
}
     2f0:	b003      	add	sp, #12
     2f2:	bd00      	pop	{pc}
     2f4:	40000400 	.word	0x40000400
     2f8:	000008fd 	.word	0x000008fd
     2fc:	00000875 	.word	0x00000875
     300:	40001800 	.word	0x40001800
     304:	20000074 	.word	0x20000074
     308:	e000e100 	.word	0xe000e100
     30c:	00000245 	.word	0x00000245

00000310 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     310:	b500      	push	{lr}
     312:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     314:	ab01      	add	r3, sp, #4
     316:	2280      	movs	r2, #128	; 0x80
     318:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     31a:	780a      	ldrb	r2, [r1, #0]
     31c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     31e:	784a      	ldrb	r2, [r1, #1]
     320:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     322:	788a      	ldrb	r2, [r1, #2]
     324:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     326:	0019      	movs	r1, r3
     328:	4b01      	ldr	r3, [pc, #4]	; (330 <port_pin_set_config+0x20>)
     32a:	4798      	blx	r3
}
     32c:	b003      	add	sp, #12
     32e:	bd00      	pop	{pc}
     330:	000009ad 	.word	0x000009ad

00000334 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     334:	b510      	push	{r4, lr}
     336:	4b02      	ldr	r3, [pc, #8]	; (340 <SERCOM0_Handler+0xc>)
     338:	681b      	ldr	r3, [r3, #0]
     33a:	2000      	movs	r0, #0
     33c:	4798      	blx	r3
     33e:	bd10      	pop	{r4, pc}
     340:	20000040 	.word	0x20000040

00000344 <SERCOM1_Handler>:
     344:	b510      	push	{r4, lr}
     346:	4b02      	ldr	r3, [pc, #8]	; (350 <SERCOM1_Handler+0xc>)
     348:	685b      	ldr	r3, [r3, #4]
     34a:	2001      	movs	r0, #1
     34c:	4798      	blx	r3
     34e:	bd10      	pop	{r4, pc}
     350:	20000040 	.word	0x20000040

00000354 <SERCOM2_Handler>:
     354:	b510      	push	{r4, lr}
     356:	4b02      	ldr	r3, [pc, #8]	; (360 <SERCOM2_Handler+0xc>)
     358:	689b      	ldr	r3, [r3, #8]
     35a:	2002      	movs	r0, #2
     35c:	4798      	blx	r3
     35e:	bd10      	pop	{r4, pc}
     360:	20000040 	.word	0x20000040

00000364 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
     364:	b510      	push	{r4, lr}
     366:	b082      	sub	sp, #8
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     368:	2202      	movs	r2, #2
     36a:	ab01      	add	r3, sp, #4
     36c:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     36e:	2400      	movs	r4, #0
     370:	e004      	b.n	37c <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     372:	b2e0      	uxtb	r0, r4
     374:	a901      	add	r1, sp, #4
     376:	4b03      	ldr	r3, [pc, #12]	; (384 <_switch_peripheral_gclk+0x20>)
     378:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     37a:	3401      	adds	r4, #1
     37c:	2c17      	cmp	r4, #23
     37e:	d9f8      	bls.n	372 <_switch_peripheral_gclk+0xe>
	}
}
     380:	b002      	add	sp, #8
     382:	bd10      	pop	{r4, pc}
     384:	000008fd 	.word	0x000008fd

00000388 <system_clock_source_osc8m_set_config>:
{
     388:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     38a:	4d0c      	ldr	r5, [pc, #48]	; (3bc <system_clock_source_osc8m_set_config+0x34>)
     38c:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
     38e:	7802      	ldrb	r2, [r0, #0]
     390:	2103      	movs	r1, #3
     392:	400a      	ands	r2, r1
     394:	0212      	lsls	r2, r2, #8
     396:	490a      	ldr	r1, [pc, #40]	; (3c0 <system_clock_source_osc8m_set_config+0x38>)
     398:	4031      	ands	r1, r6
     39a:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
     39c:	7882      	ldrb	r2, [r0, #2]
     39e:	2401      	movs	r4, #1
     3a0:	4022      	ands	r2, r4
     3a2:	01d2      	lsls	r2, r2, #7
     3a4:	2380      	movs	r3, #128	; 0x80
     3a6:	4399      	bics	r1, r3
     3a8:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
     3aa:	7843      	ldrb	r3, [r0, #1]
     3ac:	4023      	ands	r3, r4
     3ae:	019b      	lsls	r3, r3, #6
     3b0:	2140      	movs	r1, #64	; 0x40
     3b2:	438a      	bics	r2, r1
     3b4:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
     3b6:	622b      	str	r3, [r5, #32]
}
     3b8:	bd70      	pop	{r4, r5, r6, pc}
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	40000800 	.word	0x40000800
     3c0:	fffffcff 	.word	0xfffffcff

000003c4 <system_clock_source_osc32k_set_config>:
{
     3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     3c6:	4f15      	ldr	r7, [pc, #84]	; (41c <STACK_SIZE+0x1c>)
     3c8:	69be      	ldr	r6, [r7, #24]
	temp.bit.EN1K     = config->enable_1khz_output;
     3ca:	7842      	ldrb	r2, [r0, #1]
     3cc:	2301      	movs	r3, #1
     3ce:	401a      	ands	r2, r3
     3d0:	00d2      	lsls	r2, r2, #3
     3d2:	2108      	movs	r1, #8
     3d4:	438e      	bics	r6, r1
     3d6:	4332      	orrs	r2, r6
	temp.bit.EN32K    = config->enable_32khz_output;
     3d8:	7885      	ldrb	r5, [r0, #2]
     3da:	401d      	ands	r5, r3
     3dc:	00ad      	lsls	r5, r5, #2
     3de:	3904      	subs	r1, #4
     3e0:	438a      	bics	r2, r1
     3e2:	4315      	orrs	r5, r2
	temp.bit.STARTUP  = config->startup_time;
     3e4:	7801      	ldrb	r1, [r0, #0]
     3e6:	2407      	movs	r4, #7
     3e8:	400c      	ands	r4, r1
     3ea:	0224      	lsls	r4, r4, #8
     3ec:	490c      	ldr	r1, [pc, #48]	; (420 <STACK_SIZE+0x20>)
     3ee:	400d      	ands	r5, r1
     3f0:	432c      	orrs	r4, r5
	temp.bit.ONDEMAND = config->on_demand;
     3f2:	7901      	ldrb	r1, [r0, #4]
     3f4:	4019      	ands	r1, r3
     3f6:	01c9      	lsls	r1, r1, #7
     3f8:	2280      	movs	r2, #128	; 0x80
     3fa:	4394      	bics	r4, r2
     3fc:	4321      	orrs	r1, r4
	temp.bit.RUNSTDBY = config->run_in_standby;
     3fe:	78c2      	ldrb	r2, [r0, #3]
     400:	401a      	ands	r2, r3
     402:	0192      	lsls	r2, r2, #6
     404:	2440      	movs	r4, #64	; 0x40
     406:	43a1      	bics	r1, r4
     408:	430a      	orrs	r2, r1
	temp.bit.WRTLOCK  = config->write_once;
     40a:	7941      	ldrb	r1, [r0, #5]
     40c:	400b      	ands	r3, r1
     40e:	031b      	lsls	r3, r3, #12
     410:	4904      	ldr	r1, [pc, #16]	; (424 <STACK_SIZE+0x24>)
     412:	400a      	ands	r2, r1
     414:	4313      	orrs	r3, r2
	SYSCTRL->OSC32K  = temp;
     416:	61bb      	str	r3, [r7, #24]
}
     418:	bdf0      	pop	{r4, r5, r6, r7, pc}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	40000800 	.word	0x40000800
     420:	fffff8ff 	.word	0xfffff8ff
     424:	ffffefff 	.word	0xffffefff

00000428 <system_clock_source_dfll_set_config>:
{
     428:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     42a:	7a03      	ldrb	r3, [r0, #8]
     42c:	069b      	lsls	r3, r3, #26
     42e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     430:	8942      	ldrh	r2, [r0, #10]
     432:	0592      	lsls	r2, r2, #22
     434:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     436:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     438:	491c      	ldr	r1, [pc, #112]	; (4ac <system_clock_source_dfll_set_config+0x84>)
     43a:	604b      	str	r3, [r1, #4]
			(uint32_t)config->wakeup_lock     |
     43c:	7983      	ldrb	r3, [r0, #6]
			(uint32_t)config->stable_tracking |
     43e:	79c2      	ldrb	r2, [r0, #7]
			(uint32_t)config->wakeup_lock     |
     440:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
     442:	8842      	ldrh	r2, [r0, #2]
			(uint32_t)config->stable_tracking |
     444:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
     446:	8882      	ldrh	r2, [r0, #4]
			(uint32_t)config->quick_lock      |
     448:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     44a:	7842      	ldrb	r2, [r0, #1]
     44c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     44e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     450:	600b      	str	r3, [r1, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     452:	7803      	ldrb	r3, [r0, #0]
     454:	2b04      	cmp	r3, #4
     456:	d003      	beq.n	460 <system_clock_source_dfll_set_config+0x38>
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     458:	7803      	ldrb	r3, [r0, #0]
     45a:	2b20      	cmp	r3, #32
     45c:	d010      	beq.n	480 <system_clock_source_dfll_set_config+0x58>
}
     45e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     460:	7b03      	ldrb	r3, [r0, #12]
     462:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     464:	89c2      	ldrh	r2, [r0, #14]
     466:	0412      	lsls	r2, r2, #16
     468:	4911      	ldr	r1, [pc, #68]	; (4b0 <system_clock_source_dfll_set_config+0x88>)
     46a:	400a      	ands	r2, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     46c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     46e:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     470:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     472:	4a0e      	ldr	r2, [pc, #56]	; (4ac <system_clock_source_dfll_set_config+0x84>)
     474:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     476:	6813      	ldr	r3, [r2, #0]
     478:	7801      	ldrb	r1, [r0, #0]
     47a:	430b      	orrs	r3, r1
     47c:	6013      	str	r3, [r2, #0]
     47e:	e7eb      	b.n	458 <system_clock_source_dfll_set_config+0x30>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     480:	7b03      	ldrb	r3, [r0, #12]
     482:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     484:	89c2      	ldrh	r2, [r0, #14]
     486:	0412      	lsls	r2, r2, #16
     488:	4909      	ldr	r1, [pc, #36]	; (4b0 <system_clock_source_dfll_set_config+0x88>)
     48a:	400a      	ands	r2, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     48c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     48e:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     490:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     492:	4906      	ldr	r1, [pc, #24]	; (4ac <system_clock_source_dfll_set_config+0x84>)
     494:	608b      	str	r3, [r1, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
     496:	680c      	ldr	r4, [r1, #0]
     498:	7802      	ldrb	r2, [r0, #0]
     49a:	2304      	movs	r3, #4
     49c:	431a      	orrs	r2, r3
     49e:	b2d2      	uxtb	r2, r2
     4a0:	4314      	orrs	r4, r2
     4a2:	2380      	movs	r3, #128	; 0x80
     4a4:	00db      	lsls	r3, r3, #3
     4a6:	4323      	orrs	r3, r4
     4a8:	600b      	str	r3, [r1, #0]
}
     4aa:	e7d8      	b.n	45e <system_clock_source_dfll_set_config+0x36>
     4ac:	2000004c 	.word	0x2000004c
     4b0:	03ff0000 	.word	0x03ff0000

000004b4 <system_clock_source_enable>:
	switch (clock_source) {
     4b4:	2808      	cmp	r0, #8
     4b6:	d84a      	bhi.n	54e <system_clock_source_enable+0x9a>
     4b8:	0080      	lsls	r0, r0, #2
     4ba:	4b26      	ldr	r3, [pc, #152]	; (554 <system_clock_source_enable+0xa0>)
     4bc:	581b      	ldr	r3, [r3, r0]
     4be:	469f      	mov	pc, r3
		return STATUS_OK;
     4c0:	2000      	movs	r0, #0
}
     4c2:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     4c4:	4a24      	ldr	r2, [pc, #144]	; (558 <system_clock_source_enable+0xa4>)
     4c6:	6a13      	ldr	r3, [r2, #32]
     4c8:	2102      	movs	r1, #2
     4ca:	430b      	orrs	r3, r1
     4cc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     4ce:	2000      	movs	r0, #0
     4d0:	e7f7      	b.n	4c2 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     4d2:	4a21      	ldr	r2, [pc, #132]	; (558 <system_clock_source_enable+0xa4>)
     4d4:	6993      	ldr	r3, [r2, #24]
     4d6:	2102      	movs	r1, #2
     4d8:	430b      	orrs	r3, r1
     4da:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
     4dc:	2000      	movs	r0, #0
		break;
     4de:	e7f0      	b.n	4c2 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     4e0:	4a1d      	ldr	r2, [pc, #116]	; (558 <system_clock_source_enable+0xa4>)
     4e2:	8a13      	ldrh	r3, [r2, #16]
     4e4:	2102      	movs	r1, #2
     4e6:	430b      	orrs	r3, r1
     4e8:	b29b      	uxth	r3, r3
     4ea:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     4ec:	2000      	movs	r0, #0
		break;
     4ee:	e7e8      	b.n	4c2 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     4f0:	4a19      	ldr	r2, [pc, #100]	; (558 <system_clock_source_enable+0xa4>)
     4f2:	8a93      	ldrh	r3, [r2, #20]
     4f4:	2102      	movs	r1, #2
     4f6:	430b      	orrs	r3, r1
     4f8:	b29b      	uxth	r3, r3
     4fa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     4fc:	2000      	movs	r0, #0
		break;
     4fe:	e7e0      	b.n	4c2 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     500:	4916      	ldr	r1, [pc, #88]	; (55c <system_clock_source_enable+0xa8>)
     502:	680b      	ldr	r3, [r1, #0]
     504:	2202      	movs	r2, #2
     506:	4313      	orrs	r3, r2
     508:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     50a:	4b13      	ldr	r3, [pc, #76]	; (558 <system_clock_source_enable+0xa4>)
     50c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     50e:	4b12      	ldr	r3, [pc, #72]	; (558 <system_clock_source_enable+0xa4>)
     510:	68db      	ldr	r3, [r3, #12]
     512:	06db      	lsls	r3, r3, #27
     514:	d5fb      	bpl.n	50e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     516:	4a11      	ldr	r2, [pc, #68]	; (55c <system_clock_source_enable+0xa8>)
     518:	6891      	ldr	r1, [r2, #8]
     51a:	4b0f      	ldr	r3, [pc, #60]	; (558 <system_clock_source_enable+0xa4>)
     51c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     51e:	6852      	ldr	r2, [r2, #4]
     520:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     522:	2200      	movs	r2, #0
     524:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     526:	4b0c      	ldr	r3, [pc, #48]	; (558 <system_clock_source_enable+0xa4>)
     528:	68db      	ldr	r3, [r3, #12]
     52a:	06db      	lsls	r3, r3, #27
     52c:	d5fb      	bpl.n	526 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     52e:	4b0b      	ldr	r3, [pc, #44]	; (55c <system_clock_source_enable+0xa8>)
     530:	681b      	ldr	r3, [r3, #0]
     532:	b29b      	uxth	r3, r3
     534:	4a08      	ldr	r2, [pc, #32]	; (558 <system_clock_source_enable+0xa4>)
     536:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     538:	2000      	movs	r0, #0
     53a:	e7c2      	b.n	4c2 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     53c:	4906      	ldr	r1, [pc, #24]	; (558 <system_clock_source_enable+0xa4>)
     53e:	2244      	movs	r2, #68	; 0x44
     540:	5c8b      	ldrb	r3, [r1, r2]
     542:	2002      	movs	r0, #2
     544:	4303      	orrs	r3, r0
     546:	b2db      	uxtb	r3, r3
     548:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     54a:	2000      	movs	r0, #0
		break;
     54c:	e7b9      	b.n	4c2 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
     54e:	2017      	movs	r0, #23
     550:	e7b7      	b.n	4c2 <system_clock_source_enable+0xe>
     552:	46c0      	nop			; (mov r8, r8)
     554:	000012fc 	.word	0x000012fc
     558:	40000800 	.word	0x40000800
     55c:	2000004c 	.word	0x2000004c

00000560 <system_clock_source_is_ready>:
	switch (clock_source) {
     560:	2808      	cmp	r0, #8
     562:	d81f      	bhi.n	5a4 <system_clock_source_is_ready+0x44>
     564:	0080      	lsls	r0, r0, #2
     566:	4b10      	ldr	r3, [pc, #64]	; (5a8 <system_clock_source_is_ready+0x48>)
     568:	581b      	ldr	r3, [r3, r0]
     56a:	469f      	mov	pc, r3
		return true;
     56c:	2001      	movs	r0, #1
     56e:	e018      	b.n	5a2 <system_clock_source_is_ready+0x42>
		mask = SYSCTRL_PCLKSR_XOSCRDY;
     570:	2001      	movs	r0, #1
		break;
     572:	e010      	b.n	596 <system_clock_source_is_ready+0x36>
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
     574:	2002      	movs	r0, #2
		break;
     576:	e00e      	b.n	596 <system_clock_source_is_ready+0x36>
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
     578:	20d0      	movs	r0, #208	; 0xd0
		break;
     57a:	e00c      	b.n	596 <system_clock_source_is_ready+0x36>
		return ((SYSCTRL->DPLLSTATUS.reg &
     57c:	2350      	movs	r3, #80	; 0x50
     57e:	4a0b      	ldr	r2, [pc, #44]	; (5ac <system_clock_source_is_ready+0x4c>)
     580:	5cd0      	ldrb	r0, [r2, r3]
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
     582:	3b4d      	subs	r3, #77	; 0x4d
     584:	4018      	ands	r0, r3
     586:	3803      	subs	r0, #3
     588:	4243      	negs	r3, r0
     58a:	4158      	adcs	r0, r3
     58c:	b2c0      	uxtb	r0, r0
     58e:	e008      	b.n	5a2 <system_clock_source_is_ready+0x42>
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
     590:	2008      	movs	r0, #8
     592:	e000      	b.n	596 <system_clock_source_is_ready+0x36>
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
     594:	2004      	movs	r0, #4
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     596:	4b05      	ldr	r3, [pc, #20]	; (5ac <system_clock_source_is_ready+0x4c>)
     598:	68db      	ldr	r3, [r3, #12]
     59a:	4398      	bics	r0, r3
     59c:	4243      	negs	r3, r0
     59e:	4158      	adcs	r0, r3
     5a0:	b2c0      	uxtb	r0, r0
}
     5a2:	4770      	bx	lr
		return false;
     5a4:	2000      	movs	r0, #0
     5a6:	e7fc      	b.n	5a2 <system_clock_source_is_ready+0x42>
     5a8:	00001320 	.word	0x00001320
     5ac:	40000800 	.word	0x40000800

000005b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b2:	46d6      	mov	lr, sl
     5b4:	464f      	mov	r7, r9
     5b6:	4646      	mov	r6, r8
     5b8:	b5c0      	push	{r6, r7, lr}
     5ba:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     5bc:	4c4a      	ldr	r4, [pc, #296]	; (6e8 <system_clock_init+0x138>)
     5be:	23c2      	movs	r3, #194	; 0xc2
     5c0:	00db      	lsls	r3, r3, #3
     5c2:	60a3      	str	r3, [r4, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     5c4:	4949      	ldr	r1, [pc, #292]	; (6ec <system_clock_init+0x13c>)
     5c6:	684a      	ldr	r2, [r1, #4]
     5c8:	231e      	movs	r3, #30
     5ca:	439a      	bics	r2, r3
     5cc:	3b1c      	subs	r3, #28
     5ce:	4313      	orrs	r3, r2
     5d0:	604b      	str	r3, [r1, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
     5d2:	4b47      	ldr	r3, [pc, #284]	; (6f0 <system_clock_init+0x140>)
     5d4:	4798      	blx	r3


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     5d6:	4d47      	ldr	r5, [pc, #284]	; (6f4 <system_clock_init+0x144>)
     5d8:	682b      	ldr	r3, [r5, #0]
     5da:	0999      	lsrs	r1, r3, #6
	SYSCTRL->OSC32K.bit.CALIB =
     5dc:	69a2      	ldr	r2, [r4, #24]
     5de:	237f      	movs	r3, #127	; 0x7f
     5e0:	400b      	ands	r3, r1
     5e2:	041b      	lsls	r3, r3, #16
     5e4:	4944      	ldr	r1, [pc, #272]	; (6f8 <system_clock_init+0x148>)
     5e6:	400a      	ands	r2, r1
     5e8:	4313      	orrs	r3, r2
     5ea:	61a3      	str	r3, [r4, #24]
	config->enable_1khz_output  = true;
     5ec:	a80a      	add	r0, sp, #40	; 0x28
     5ee:	2301      	movs	r3, #1
     5f0:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     5f2:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
     5f4:	2400      	movs	r4, #0
     5f6:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
     5f8:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     5fa:	3306      	adds	r3, #6
     5fc:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
     5fe:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     600:	4b3e      	ldr	r3, [pc, #248]	; (6fc <system_clock_init+0x14c>)
     602:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     604:	2004      	movs	r0, #4
     606:	4b3e      	ldr	r3, [pc, #248]	; (700 <system_clock_init+0x150>)
     608:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     60a:	ab05      	add	r3, sp, #20
     60c:	2200      	movs	r2, #0
     60e:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     610:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     612:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     614:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
     616:	213f      	movs	r1, #63	; 0x3f
     618:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     61a:	393b      	subs	r1, #59	; 0x3b
     61c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     61e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     620:	682b      	ldr	r3, [r5, #0]
     622:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     624:	2b3f      	cmp	r3, #63	; 0x3f
     626:	d05c      	beq.n	6e2 <system_clock_init+0x132>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
     628:	a805      	add	r0, sp, #20
     62a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     62c:	23b7      	movs	r3, #183	; 0xb7
     62e:	00db      	lsls	r3, r3, #3
     630:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     632:	2307      	movs	r3, #7
     634:	4699      	mov	r9, r3
     636:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     638:	233f      	movs	r3, #63	; 0x3f
     63a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     63c:	4b31      	ldr	r3, [pc, #196]	; (704 <system_clock_init+0x154>)
     63e:	4798      	blx	r3
	config->run_in_standby  = false;
     640:	a804      	add	r0, sp, #16
     642:	2500      	movs	r5, #0
     644:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     646:	2601      	movs	r6, #1
     648:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     64a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     64c:	4b2e      	ldr	r3, [pc, #184]	; (708 <system_clock_init+0x158>)
     64e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     650:	2006      	movs	r0, #6
     652:	4f2b      	ldr	r7, [pc, #172]	; (700 <system_clock_init+0x150>)
     654:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     656:	4b2d      	ldr	r3, [pc, #180]	; (70c <system_clock_init+0x15c>)
     658:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     65a:	ac01      	add	r4, sp, #4
     65c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
     65e:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     660:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     662:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     664:	2304      	movs	r3, #4
     666:	7023      	strb	r3, [r4, #0]
     668:	0021      	movs	r1, r4
     66a:	2001      	movs	r0, #1
     66c:	4b28      	ldr	r3, [pc, #160]	; (710 <system_clock_init+0x160>)
     66e:	469a      	mov	sl, r3
     670:	4798      	blx	r3
     672:	2001      	movs	r0, #1
     674:	4b27      	ldr	r3, [pc, #156]	; (714 <system_clock_init+0x164>)
     676:	4698      	mov	r8, r3
     678:	4798      	blx	r3
	config->division_factor    = 1;
     67a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
     67c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     67e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     680:	7265      	strb	r5, [r4, #9]
     682:	464b      	mov	r3, r9
     684:	7023      	strb	r3, [r4, #0]
     686:	0021      	movs	r1, r4
     688:	2003      	movs	r0, #3
     68a:	47d0      	blx	sl
     68c:	2003      	movs	r0, #3
     68e:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     690:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     692:	0021      	movs	r1, r4
     694:	2000      	movs	r0, #0
     696:	4b20      	ldr	r3, [pc, #128]	; (718 <system_clock_init+0x168>)
     698:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     69a:	2000      	movs	r0, #0
     69c:	4b1f      	ldr	r3, [pc, #124]	; (71c <system_clock_init+0x16c>)
     69e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     6a0:	2007      	movs	r0, #7
     6a2:	47b8      	blx	r7
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     6a4:	2007      	movs	r0, #7
     6a6:	4b1e      	ldr	r3, [pc, #120]	; (720 <system_clock_init+0x170>)
     6a8:	4798      	blx	r3
     6aa:	2800      	cmp	r0, #0
     6ac:	d0fa      	beq.n	6a4 <system_clock_init+0xf4>
	PM->CPUSEL.reg = (uint32_t)divider;
     6ae:	4a1d      	ldr	r2, [pc, #116]	; (724 <system_clock_init+0x174>)
     6b0:	2300      	movs	r3, #0
     6b2:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     6b4:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     6b6:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     6b8:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
     6ba:	a901      	add	r1, sp, #4
     6bc:	2201      	movs	r2, #1
     6be:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     6c0:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     6c2:	3205      	adds	r2, #5
     6c4:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
     6c6:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     6c8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     6ca:	2000      	movs	r0, #0
     6cc:	4b10      	ldr	r3, [pc, #64]	; (710 <system_clock_init+0x160>)
     6ce:	4798      	blx	r3
     6d0:	2000      	movs	r0, #0
     6d2:	4b10      	ldr	r3, [pc, #64]	; (714 <system_clock_init+0x164>)
     6d4:	4798      	blx	r3
#endif
}
     6d6:	b00c      	add	sp, #48	; 0x30
     6d8:	bc1c      	pop	{r2, r3, r4}
     6da:	4690      	mov	r8, r2
     6dc:	4699      	mov	r9, r3
     6de:	46a2      	mov	sl, r4
     6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
     6e2:	3b20      	subs	r3, #32
     6e4:	e7a0      	b.n	628 <system_clock_init+0x78>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	40000800 	.word	0x40000800
     6ec:	41004000 	.word	0x41004000
     6f0:	00000365 	.word	0x00000365
     6f4:	00806024 	.word	0x00806024
     6f8:	ff80ffff 	.word	0xff80ffff
     6fc:	000003c5 	.word	0x000003c5
     700:	000004b5 	.word	0x000004b5
     704:	00000429 	.word	0x00000429
     708:	00000389 	.word	0x00000389
     70c:	00000729 	.word	0x00000729
     710:	0000074d 	.word	0x0000074d
     714:	0000081d 	.word	0x0000081d
     718:	000008fd 	.word	0x000008fd
     71c:	00000875 	.word	0x00000875
     720:	00000561 	.word	0x00000561
     724:	40000400 	.word	0x40000400

00000728 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     728:	4a06      	ldr	r2, [pc, #24]	; (744 <system_gclk_init+0x1c>)
     72a:	6993      	ldr	r3, [r2, #24]
     72c:	2108      	movs	r1, #8
     72e:	430b      	orrs	r3, r1
     730:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     732:	2201      	movs	r2, #1
     734:	4b04      	ldr	r3, [pc, #16]	; (748 <system_gclk_init+0x20>)
     736:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     738:	4b03      	ldr	r3, [pc, #12]	; (748 <system_gclk_init+0x20>)
     73a:	781b      	ldrb	r3, [r3, #0]
     73c:	07db      	lsls	r3, r3, #31
     73e:	d4fb      	bmi.n	738 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     740:	4770      	bx	lr
     742:	46c0      	nop			; (mov r8, r8)
     744:	40000400 	.word	0x40000400
     748:	40000c00 	.word	0x40000c00

0000074c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     74e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     750:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     752:	780c      	ldrb	r4, [r1, #0]
     754:	0224      	lsls	r4, r4, #8
     756:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     758:	784b      	ldrb	r3, [r1, #1]
     75a:	2b00      	cmp	r3, #0
     75c:	d002      	beq.n	764 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     75e:	2380      	movs	r3, #128	; 0x80
     760:	02db      	lsls	r3, r3, #11
     762:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     764:	7a4b      	ldrb	r3, [r1, #9]
     766:	2b00      	cmp	r3, #0
     768:	d002      	beq.n	770 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     76a:	2380      	movs	r3, #128	; 0x80
     76c:	031b      	lsls	r3, r3, #12
     76e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     770:	6848      	ldr	r0, [r1, #4]
     772:	2801      	cmp	r0, #1
     774:	d912      	bls.n	79c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     776:	1e43      	subs	r3, r0, #1
     778:	4203      	tst	r3, r0
     77a:	d03d      	beq.n	7f8 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     77c:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
     77e:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     780:	2380      	movs	r3, #128	; 0x80
     782:	029b      	lsls	r3, r3, #10
     784:	431c      	orrs	r4, r3
     786:	e009      	b.n	79c <system_gclk_gen_set_config+0x50>
				div2_count++;
     788:	3201      	adds	r2, #1
						mask <<= 1) {
     78a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     78c:	4283      	cmp	r3, r0
     78e:	d3fb      	bcc.n	788 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     790:	0212      	lsls	r2, r2, #8
     792:	4332      	orrs	r2, r6
     794:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     796:	2380      	movs	r3, #128	; 0x80
     798:	035b      	lsls	r3, r3, #13
     79a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     79c:	7a0b      	ldrb	r3, [r1, #8]
     79e:	2b00      	cmp	r3, #0
     7a0:	d002      	beq.n	7a8 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     7a2:	2380      	movs	r3, #128	; 0x80
     7a4:	039b      	lsls	r3, r3, #14
     7a6:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7a8:	4b18      	ldr	r3, [pc, #96]	; (80c <system_gclk_gen_set_config+0xc0>)
     7aa:	785b      	ldrb	r3, [r3, #1]
     7ac:	b25b      	sxtb	r3, r3
     7ae:	2b00      	cmp	r3, #0
     7b0:	db25      	blt.n	7fe <system_gclk_gen_set_config+0xb2>
	return false;
     7b2:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
     7b4:	2f00      	cmp	r7, #0
     7b6:	d1f7      	bne.n	7a8 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
     7b8:	4b15      	ldr	r3, [pc, #84]	; (810 <system_gclk_gen_set_config+0xc4>)
     7ba:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     7bc:	4b15      	ldr	r3, [pc, #84]	; (814 <system_gclk_gen_set_config+0xc8>)
     7be:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7c0:	4b12      	ldr	r3, [pc, #72]	; (80c <system_gclk_gen_set_config+0xc0>)
     7c2:	785b      	ldrb	r3, [r3, #1]
     7c4:	b25b      	sxtb	r3, r3
     7c6:	2b00      	cmp	r3, #0
     7c8:	db1b      	blt.n	802 <system_gclk_gen_set_config+0xb6>
	return false;
     7ca:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     7cc:	2a00      	cmp	r2, #0
     7ce:	d1f7      	bne.n	7c0 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     7d0:	4b0e      	ldr	r3, [pc, #56]	; (80c <system_gclk_gen_set_config+0xc0>)
     7d2:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7d4:	4b0d      	ldr	r3, [pc, #52]	; (80c <system_gclk_gen_set_config+0xc0>)
     7d6:	785b      	ldrb	r3, [r3, #1]
     7d8:	b25b      	sxtb	r3, r3
     7da:	2b00      	cmp	r3, #0
     7dc:	db13      	blt.n	806 <system_gclk_gen_set_config+0xba>
	return false;
     7de:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
     7e0:	2b00      	cmp	r3, #0
     7e2:	d1f7      	bne.n	7d4 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     7e4:	4a09      	ldr	r2, [pc, #36]	; (80c <system_gclk_gen_set_config+0xc0>)
     7e6:	6853      	ldr	r3, [r2, #4]
     7e8:	2180      	movs	r1, #128	; 0x80
     7ea:	0249      	lsls	r1, r1, #9
     7ec:	400b      	ands	r3, r1
     7ee:	431c      	orrs	r4, r3
     7f0:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
     7f2:	4b09      	ldr	r3, [pc, #36]	; (818 <system_gclk_gen_set_config+0xcc>)
     7f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7f8:	2302      	movs	r3, #2
     7fa:	2200      	movs	r2, #0
     7fc:	e7c6      	b.n	78c <system_gclk_gen_set_config+0x40>
		return true;
     7fe:	2701      	movs	r7, #1
     800:	e7d8      	b.n	7b4 <system_gclk_gen_set_config+0x68>
     802:	2201      	movs	r2, #1
     804:	e7e2      	b.n	7cc <system_gclk_gen_set_config+0x80>
     806:	2301      	movs	r3, #1
     808:	e7ea      	b.n	7e0 <system_gclk_gen_set_config+0x94>
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	40000c00 	.word	0x40000c00
     810:	000000ed 	.word	0x000000ed
     814:	40000c08 	.word	0x40000c08
     818:	0000012d 	.word	0x0000012d

0000081c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     81c:	b570      	push	{r4, r5, r6, lr}
     81e:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     820:	4b10      	ldr	r3, [pc, #64]	; (864 <system_gclk_gen_enable+0x48>)
     822:	785b      	ldrb	r3, [r3, #1]
     824:	b25b      	sxtb	r3, r3
     826:	2b00      	cmp	r3, #0
     828:	db17      	blt.n	85a <system_gclk_gen_enable+0x3e>
	return false;
     82a:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
     82c:	2c00      	cmp	r4, #0
     82e:	d1f7      	bne.n	820 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
     830:	4b0d      	ldr	r3, [pc, #52]	; (868 <system_gclk_gen_enable+0x4c>)
     832:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     834:	4b0d      	ldr	r3, [pc, #52]	; (86c <system_gclk_gen_enable+0x50>)
     836:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     838:	4b0a      	ldr	r3, [pc, #40]	; (864 <system_gclk_gen_enable+0x48>)
     83a:	785b      	ldrb	r3, [r3, #1]
     83c:	b25b      	sxtb	r3, r3
     83e:	2b00      	cmp	r3, #0
     840:	db0d      	blt.n	85e <system_gclk_gen_enable+0x42>
	return false;
     842:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
     844:	2b00      	cmp	r3, #0
     846:	d1f7      	bne.n	838 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     848:	4a06      	ldr	r2, [pc, #24]	; (864 <system_gclk_gen_enable+0x48>)
     84a:	6851      	ldr	r1, [r2, #4]
     84c:	2380      	movs	r3, #128	; 0x80
     84e:	025b      	lsls	r3, r3, #9
     850:	430b      	orrs	r3, r1
     852:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     854:	4b06      	ldr	r3, [pc, #24]	; (870 <system_gclk_gen_enable+0x54>)
     856:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     858:	bd70      	pop	{r4, r5, r6, pc}
		return true;
     85a:	2401      	movs	r4, #1
     85c:	e7e6      	b.n	82c <system_gclk_gen_enable+0x10>
     85e:	2301      	movs	r3, #1
     860:	e7f0      	b.n	844 <system_gclk_gen_enable+0x28>
     862:	46c0      	nop			; (mov r8, r8)
     864:	40000c00 	.word	0x40000c00
     868:	000000ed 	.word	0x000000ed
     86c:	40000c04 	.word	0x40000c04
     870:	0000012d 	.word	0x0000012d

00000874 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     874:	b510      	push	{r4, lr}
     876:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     878:	4b06      	ldr	r3, [pc, #24]	; (894 <system_gclk_chan_enable+0x20>)
     87a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     87c:	4b06      	ldr	r3, [pc, #24]	; (898 <system_gclk_chan_enable+0x24>)
     87e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     880:	4a06      	ldr	r2, [pc, #24]	; (89c <system_gclk_chan_enable+0x28>)
     882:	8853      	ldrh	r3, [r2, #2]
     884:	2180      	movs	r1, #128	; 0x80
     886:	01c9      	lsls	r1, r1, #7
     888:	430b      	orrs	r3, r1
     88a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     88c:	4b04      	ldr	r3, [pc, #16]	; (8a0 <system_gclk_chan_enable+0x2c>)
     88e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     890:	bd10      	pop	{r4, pc}
     892:	46c0      	nop			; (mov r8, r8)
     894:	000000ed 	.word	0x000000ed
     898:	40000c02 	.word	0x40000c02
     89c:	40000c00 	.word	0x40000c00
     8a0:	0000012d 	.word	0x0000012d

000008a4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     8a4:	b510      	push	{r4, lr}
     8a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     8a8:	4b0e      	ldr	r3, [pc, #56]	; (8e4 <system_gclk_chan_disable+0x40>)
     8aa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     8ac:	4b0e      	ldr	r3, [pc, #56]	; (8e8 <system_gclk_chan_disable+0x44>)
     8ae:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     8b0:	490e      	ldr	r1, [pc, #56]	; (8ec <system_gclk_chan_disable+0x48>)
     8b2:	884b      	ldrh	r3, [r1, #2]
     8b4:	051b      	lsls	r3, r3, #20
     8b6:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     8b8:	884b      	ldrh	r3, [r1, #2]
     8ba:	480d      	ldr	r0, [pc, #52]	; (8f0 <system_gclk_chan_disable+0x4c>)
     8bc:	4003      	ands	r3, r0
     8be:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     8c0:	884b      	ldrh	r3, [r1, #2]
     8c2:	480c      	ldr	r0, [pc, #48]	; (8f4 <system_gclk_chan_disable+0x50>)
     8c4:	4003      	ands	r3, r0
     8c6:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     8c8:	4b08      	ldr	r3, [pc, #32]	; (8ec <system_gclk_chan_disable+0x48>)
     8ca:	885b      	ldrh	r3, [r3, #2]
     8cc:	045b      	lsls	r3, r3, #17
     8ce:	d4fb      	bmi.n	8c8 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     8d0:	4806      	ldr	r0, [pc, #24]	; (8ec <system_gclk_chan_disable+0x48>)
     8d2:	8841      	ldrh	r1, [r0, #2]
     8d4:	0213      	lsls	r3, r2, #8
     8d6:	4a06      	ldr	r2, [pc, #24]	; (8f0 <system_gclk_chan_disable+0x4c>)
     8d8:	400a      	ands	r2, r1
     8da:	4313      	orrs	r3, r2
     8dc:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
     8de:	4b06      	ldr	r3, [pc, #24]	; (8f8 <system_gclk_chan_disable+0x54>)
     8e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     8e2:	bd10      	pop	{r4, pc}
     8e4:	000000ed 	.word	0x000000ed
     8e8:	40000c02 	.word	0x40000c02
     8ec:	40000c00 	.word	0x40000c00
     8f0:	fffff0ff 	.word	0xfffff0ff
     8f4:	ffffbfff 	.word	0xffffbfff
     8f8:	0000012d 	.word	0x0000012d

000008fc <system_gclk_chan_set_config>:
{
     8fc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     8fe:	780c      	ldrb	r4, [r1, #0]
     900:	0224      	lsls	r4, r4, #8
     902:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     904:	4b02      	ldr	r3, [pc, #8]	; (910 <system_gclk_chan_set_config+0x14>)
     906:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     908:	b2a4      	uxth	r4, r4
     90a:	4b02      	ldr	r3, [pc, #8]	; (914 <system_gclk_chan_set_config+0x18>)
     90c:	805c      	strh	r4, [r3, #2]
}
     90e:	bd10      	pop	{r4, pc}
     910:	000008a5 	.word	0x000008a5
     914:	40000c00 	.word	0x40000c00

00000918 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     918:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     91a:	78d3      	ldrb	r3, [r2, #3]
     91c:	2b00      	cmp	r3, #0
     91e:	d120      	bne.n	962 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     920:	7815      	ldrb	r5, [r2, #0]
     922:	2d80      	cmp	r5, #128	; 0x80
     924:	d01b      	beq.n	95e <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     926:	062d      	lsls	r5, r5, #24
     928:	2380      	movs	r3, #128	; 0x80
     92a:	025b      	lsls	r3, r3, #9
     92c:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     92e:	7853      	ldrb	r3, [r2, #1]
     930:	2b00      	cmp	r3, #0
     932:	d001      	beq.n	938 <_system_pinmux_config+0x20>
     934:	2b02      	cmp	r3, #2
     936:	d10a      	bne.n	94e <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     938:	2380      	movs	r3, #128	; 0x80
     93a:	029b      	lsls	r3, r3, #10
     93c:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     93e:	7894      	ldrb	r4, [r2, #2]
     940:	2c00      	cmp	r4, #0
     942:	d002      	beq.n	94a <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     944:	23c0      	movs	r3, #192	; 0xc0
     946:	02db      	lsls	r3, r3, #11
     948:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     94a:	6041      	str	r1, [r0, #4]
     94c:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     94e:	7853      	ldrb	r3, [r2, #1]
     950:	3b01      	subs	r3, #1
     952:	b2db      	uxtb	r3, r3
     954:	2b01      	cmp	r3, #1
     956:	d806      	bhi.n	966 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     958:	4b13      	ldr	r3, [pc, #76]	; (9a8 <_system_pinmux_config+0x90>)
     95a:	401d      	ands	r5, r3
     95c:	e003      	b.n	966 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
     95e:	2500      	movs	r5, #0
     960:	e7e5      	b.n	92e <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     962:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
     964:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     966:	040c      	lsls	r4, r1, #16
     968:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
     96a:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     96c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     96e:	26a0      	movs	r6, #160	; 0xa0
     970:	05f6      	lsls	r6, r6, #23
     972:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     974:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     976:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     978:	24d0      	movs	r4, #208	; 0xd0
     97a:	0624      	lsls	r4, r4, #24
     97c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     97e:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     980:	78d3      	ldrb	r3, [r2, #3]
     982:	2b00      	cmp	r3, #0
     984:	d10a      	bne.n	99c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     986:	036b      	lsls	r3, r5, #13
     988:	d503      	bpl.n	992 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     98a:	7893      	ldrb	r3, [r2, #2]
     98c:	2b01      	cmp	r3, #1
     98e:	d006      	beq.n	99e <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     990:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     992:	7853      	ldrb	r3, [r2, #1]
     994:	3b01      	subs	r3, #1
     996:	b2db      	uxtb	r3, r3
     998:	2b01      	cmp	r3, #1
     99a:	d902      	bls.n	9a2 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     99c:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
     99e:	6181      	str	r1, [r0, #24]
     9a0:	e7f7      	b.n	992 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
     9a2:	6081      	str	r1, [r0, #8]
}
     9a4:	e7fa      	b.n	99c <_system_pinmux_config+0x84>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	fffbffff 	.word	0xfffbffff

000009ac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     9ac:	b510      	push	{r4, lr}
     9ae:	000a      	movs	r2, r1
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
     9b0:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
     9b2:	0943      	lsrs	r3, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9b4:	2900      	cmp	r1, #0
     9b6:	d10b      	bne.n	9d0 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
     9b8:	01db      	lsls	r3, r3, #7
     9ba:	4906      	ldr	r1, [pc, #24]	; (9d4 <system_pinmux_pin_set_config+0x28>)
     9bc:	468c      	mov	ip, r1
     9be:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     9c0:	241f      	movs	r4, #31
     9c2:	4020      	ands	r0, r4
     9c4:	2101      	movs	r1, #1
     9c6:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     9c8:	0018      	movs	r0, r3
     9ca:	4b03      	ldr	r3, [pc, #12]	; (9d8 <system_pinmux_pin_set_config+0x2c>)
     9cc:	4798      	blx	r3
}
     9ce:	bd10      	pop	{r4, pc}
	} else {
		Assert(false);
		return NULL;
     9d0:	2300      	movs	r3, #0
     9d2:	e7f5      	b.n	9c0 <system_pinmux_pin_set_config+0x14>
     9d4:	41004400 	.word	0x41004400
     9d8:	00000919 	.word	0x00000919

000009dc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     9dc:	4770      	bx	lr
	...

000009e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     9e0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     9e2:	4b05      	ldr	r3, [pc, #20]	; (9f8 <system_init+0x18>)
     9e4:	4798      	blx	r3
	/* Initialize board hardware */
	system_board_init();
     9e6:	4b05      	ldr	r3, [pc, #20]	; (9fc <system_init+0x1c>)
     9e8:	4798      	blx	r3
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
     9ea:	4b05      	ldr	r3, [pc, #20]	; (a00 <system_init+0x20>)
     9ec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <system_init+0x24>)
     9f0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <system_init+0x28>)
     9f4:	4798      	blx	r3
}
     9f6:	bd10      	pop	{r4, pc}
     9f8:	000005b1 	.word	0x000005b1
     9fc:	0000015d 	.word	0x0000015d
     a00:	000001d1 	.word	0x000001d1
     a04:	00000281 	.word	0x00000281
     a08:	000009dd 	.word	0x000009dd

00000a0c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     a0e:	0080      	lsls	r0, r0, #2
     a10:	4b0c      	ldr	r3, [pc, #48]	; (a44 <_tcc_interrupt_handler+0x38>)
     a12:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     a14:	683b      	ldr	r3, [r7, #0]
     a16:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a1a:	401e      	ands	r6, r3
     a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a1e:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     a20:	2400      	movs	r4, #0
     a22:	e000      	b.n	a26 <_tcc_interrupt_handler+0x1a>
     a24:	3401      	adds	r4, #1
     a26:	2c0b      	cmp	r4, #11
     a28:	dc0b      	bgt.n	a42 <_tcc_interrupt_handler+0x36>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     a2a:	00a3      	lsls	r3, r4, #2
     a2c:	4a06      	ldr	r2, [pc, #24]	; (a48 <_tcc_interrupt_handler+0x3c>)
     a2e:	589d      	ldr	r5, [r3, r2]
     a30:	4235      	tst	r5, r6
     a32:	d0f7      	beq.n	a24 <_tcc_interrupt_handler+0x18>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     a34:	18fb      	adds	r3, r7, r3
     a36:	685b      	ldr	r3, [r3, #4]
     a38:	0038      	movs	r0, r7
     a3a:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     a3c:	683b      	ldr	r3, [r7, #0]
     a3e:	62dd      	str	r5, [r3, #44]	; 0x2c
     a40:	e7f0      	b.n	a24 <_tcc_interrupt_handler+0x18>
		}
	}
}
     a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a44:	200000b4 	.word	0x200000b4
     a48:	00001344 	.word	0x00001344

00000a4c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     a4c:	b510      	push	{r4, lr}
     a4e:	2000      	movs	r0, #0
     a50:	4b01      	ldr	r3, [pc, #4]	; (a58 <TCC0_Handler+0xc>)
     a52:	4798      	blx	r3
     a54:	bd10      	pop	{r4, pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	00000a0d 	.word	0x00000a0d

00000a5c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     a5c:	1c93      	adds	r3, r2, #2
     a5e:	009b      	lsls	r3, r3, #2
     a60:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     a62:	2a02      	cmp	r2, #2
     a64:	d009      	beq.n	a7a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     a66:	2a03      	cmp	r2, #3
     a68:	d00c      	beq.n	a84 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     a6a:	2301      	movs	r3, #1
     a6c:	4093      	lsls	r3, r2
     a6e:	001a      	movs	r2, r3
     a70:	7e03      	ldrb	r3, [r0, #24]
     a72:	4313      	orrs	r3, r2
     a74:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     a76:	2000      	movs	r0, #0
     a78:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     a7a:	7e03      	ldrb	r3, [r0, #24]
     a7c:	2210      	movs	r2, #16
     a7e:	4313      	orrs	r3, r2
     a80:	7603      	strb	r3, [r0, #24]
     a82:	e7f8      	b.n	a76 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     a84:	7e03      	ldrb	r3, [r0, #24]
     a86:	2220      	movs	r2, #32
     a88:	4313      	orrs	r3, r2
     a8a:	7603      	strb	r3, [r0, #24]
     a8c:	e7f3      	b.n	a76 <tc_register_callback+0x1a>
	...

00000a90 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     a90:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     a92:	0080      	lsls	r0, r0, #2
     a94:	4b16      	ldr	r3, [pc, #88]	; (af0 <_tc_interrupt_handler+0x60>)
     a96:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     a98:	682b      	ldr	r3, [r5, #0]
     a9a:	7b9c      	ldrb	r4, [r3, #14]
			module->register_callback_mask &
     a9c:	7e2a      	ldrb	r2, [r5, #24]
			module->enable_callback_mask;
     a9e:	7e6b      	ldrb	r3, [r5, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     aa0:	4014      	ands	r4, r2
     aa2:	401c      	ands	r4, r3

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     aa4:	07e3      	lsls	r3, r4, #31
     aa6:	d406      	bmi.n	ab6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     aa8:	07a3      	lsls	r3, r4, #30
     aaa:	d40b      	bmi.n	ac4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     aac:	06e3      	lsls	r3, r4, #27
     aae:	d410      	bmi.n	ad2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     ab0:	06a3      	lsls	r3, r4, #26
     ab2:	d415      	bmi.n	ae0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     ab4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     ab6:	0028      	movs	r0, r5
     ab8:	68ab      	ldr	r3, [r5, #8]
     aba:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     abc:	2301      	movs	r3, #1
     abe:	682a      	ldr	r2, [r5, #0]
     ac0:	7393      	strb	r3, [r2, #14]
     ac2:	e7f1      	b.n	aa8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     ac4:	0028      	movs	r0, r5
     ac6:	68eb      	ldr	r3, [r5, #12]
     ac8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     aca:	2302      	movs	r3, #2
     acc:	682a      	ldr	r2, [r5, #0]
     ace:	7393      	strb	r3, [r2, #14]
     ad0:	e7ec      	b.n	aac <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     ad2:	0028      	movs	r0, r5
     ad4:	692b      	ldr	r3, [r5, #16]
     ad6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     ad8:	2310      	movs	r3, #16
     ada:	682a      	ldr	r2, [r5, #0]
     adc:	7393      	strb	r3, [r2, #14]
     ade:	e7e7      	b.n	ab0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     ae0:	0028      	movs	r0, r5
     ae2:	696b      	ldr	r3, [r5, #20]
     ae4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     ae6:	682b      	ldr	r3, [r5, #0]
     ae8:	2220      	movs	r2, #32
     aea:	739a      	strb	r2, [r3, #14]
}
     aec:	e7e2      	b.n	ab4 <_tc_interrupt_handler+0x24>
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	200000b8 	.word	0x200000b8

00000af4 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     af4:	b510      	push	{r4, lr}
     af6:	2000      	movs	r0, #0
     af8:	4b01      	ldr	r3, [pc, #4]	; (b00 <TC1_Handler+0xc>)
     afa:	4798      	blx	r3
     afc:	bd10      	pop	{r4, pc}
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	00000a91 	.word	0x00000a91

00000b04 <TC2_Handler>:
     b04:	b510      	push	{r4, lr}
     b06:	2001      	movs	r0, #1
     b08:	4b01      	ldr	r3, [pc, #4]	; (b10 <TC2_Handler+0xc>)
     b0a:	4798      	blx	r3
     b0c:	bd10      	pop	{r4, pc}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	00000a91 	.word	0x00000a91

00000b14 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     b14:	b510      	push	{r4, lr}
     b16:	b082      	sub	sp, #8
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     b18:	466a      	mov	r2, sp
     b1a:	4b09      	ldr	r3, [pc, #36]	; (b40 <_tc_get_inst_index+0x2c>)
     b1c:	cb12      	ldmia	r3!, {r1, r4}
     b1e:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     b20:	2300      	movs	r3, #0
     b22:	2b01      	cmp	r3, #1
     b24:	d808      	bhi.n	b38 <_tc_get_inst_index+0x24>
		if (hw == tc_modules[i]) {
     b26:	009a      	lsls	r2, r3, #2
     b28:	4669      	mov	r1, sp
     b2a:	5852      	ldr	r2, [r2, r1]
     b2c:	4282      	cmp	r2, r0
     b2e:	d001      	beq.n	b34 <_tc_get_inst_index+0x20>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     b30:	3301      	adds	r3, #1
     b32:	e7f6      	b.n	b22 <_tc_get_inst_index+0xe>
			return i;
     b34:	b2d8      	uxtb	r0, r3
     b36:	e000      	b.n	b3a <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     b38:	2000      	movs	r0, #0
}
     b3a:	b002      	add	sp, #8
     b3c:	bd10      	pop	{r4, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	00001374 	.word	0x00001374

00000b44 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     b44:	b5f0      	push	{r4, r5, r6, r7, lr}
     b46:	b085      	sub	sp, #20
     b48:	0004      	movs	r4, r0
     b4a:	000d      	movs	r5, r1
     b4c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     b4e:	0008      	movs	r0, r1
     b50:	4b88      	ldr	r3, [pc, #544]	; (d74 <tc_init+0x230>)
     b52:	4798      	blx	r3
     b54:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     b56:	4b88      	ldr	r3, [pc, #544]	; (d78 <tc_init+0x234>)
     b58:	8919      	ldrh	r1, [r3, #8]
     b5a:	aa03      	add	r2, sp, #12
     b5c:	8011      	strh	r1, [r2, #0]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     b5e:	68db      	ldr	r3, [r3, #12]
     b60:	9302      	str	r3, [sp, #8]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     b62:	2300      	movs	r3, #0
     b64:	e005      	b.n	b72 <tc_init+0x2e>
		module_inst->callback[i]        = NULL;
     b66:	1c9a      	adds	r2, r3, #2
     b68:	0092      	lsls	r2, r2, #2
     b6a:	2100      	movs	r1, #0
     b6c:	5111      	str	r1, [r2, r4]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     b6e:	3301      	adds	r3, #1
     b70:	b2db      	uxtb	r3, r3
     b72:	2b03      	cmp	r3, #3
     b74:	d9f7      	bls.n	b66 <tc_init+0x22>
	}
	module_inst->register_callback_mask     = 0x00;
     b76:	2300      	movs	r3, #0
     b78:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     b7a:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     b7c:	00bb      	lsls	r3, r7, #2
     b7e:	4a7f      	ldr	r2, [pc, #508]	; (d7c <tc_init+0x238>)
     b80:	509c      	str	r4, [r3, r2]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     b82:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     b84:	78b3      	ldrb	r3, [r6, #2]
     b86:	2b08      	cmp	r3, #8
     b88:	d006      	beq.n	b98 <tc_init+0x54>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     b8a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     b8c:	882b      	ldrh	r3, [r5, #0]
     b8e:	07db      	lsls	r3, r3, #31
     b90:	d506      	bpl.n	ba0 <tc_init+0x5c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     b92:	2005      	movs	r0, #5
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     b94:	b005      	add	sp, #20
     b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     b98:	07fa      	lsls	r2, r7, #31
     b9a:	d5f6      	bpl.n	b8a <tc_init+0x46>
		return STATUS_ERR_INVALID_ARG;
     b9c:	2017      	movs	r0, #23
     b9e:	e7f9      	b.n	b94 <tc_init+0x50>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     ba0:	7beb      	ldrb	r3, [r5, #15]
     ba2:	06db      	lsls	r3, r3, #27
     ba4:	d501      	bpl.n	baa <tc_init+0x66>
		return STATUS_ERR_DENIED;
     ba6:	201c      	movs	r0, #28
     ba8:	e7f4      	b.n	b94 <tc_init+0x50>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     baa:	882b      	ldrh	r3, [r5, #0]
     bac:	079b      	lsls	r3, r3, #30
     bae:	d501      	bpl.n	bb4 <tc_init+0x70>
		return STATUS_ERR_DENIED;
     bb0:	201c      	movs	r0, #28
     bb2:	e7ef      	b.n	b94 <tc_init+0x50>
	if (config->pwm_channel[0].enabled) {
     bb4:	7c33      	ldrb	r3, [r6, #16]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d147      	bne.n	c4a <tc_init+0x106>
	if (config->pwm_channel[1].enabled) {
     bba:	7f33      	ldrb	r3, [r6, #28]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d150      	bne.n	c62 <tc_init+0x11e>
			inst_pm_apbmask[instance]);
     bc0:	007b      	lsls	r3, r7, #1
     bc2:	aa02      	add	r2, sp, #8
     bc4:	5a9b      	ldrh	r3, [r3, r2]
			PM->APBCMASK.reg |= mask;
     bc6:	4a6e      	ldr	r2, [pc, #440]	; (d80 <tc_init+0x23c>)
     bc8:	6a11      	ldr	r1, [r2, #32]
     bca:	430b      	orrs	r3, r1
     bcc:	6213      	str	r3, [r2, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     bce:	78b3      	ldrb	r3, [r6, #2]
     bd0:	2b08      	cmp	r3, #8
     bd2:	d056      	beq.n	c82 <tc_init+0x13e>
	gclk_chan_config.source_generator = config->clock_source;
     bd4:	7833      	ldrb	r3, [r6, #0]
     bd6:	466a      	mov	r2, sp
     bd8:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     bda:	ab03      	add	r3, sp, #12
     bdc:	5ddf      	ldrb	r7, [r3, r7]
     bde:	4669      	mov	r1, sp
     be0:	0038      	movs	r0, r7
     be2:	4b68      	ldr	r3, [pc, #416]	; (d84 <tc_init+0x240>)
     be4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     be6:	0038      	movs	r0, r7
     be8:	4b67      	ldr	r3, [pc, #412]	; (d88 <tc_init+0x244>)
     bea:	4798      	blx	r3
			(uint32_t)config->counter_size |
     bec:	78b3      	ldrb	r3, [r6, #2]
			(uint32_t)config->wave_generation |
     bee:	79b1      	ldrb	r1, [r6, #6]
			(uint32_t)config->reload_action |
     bf0:	8932      	ldrh	r2, [r6, #8]
			(uint32_t)config->wave_generation |
     bf2:	430b      	orrs	r3, r1
     bf4:	431a      	orrs	r2, r3
			(uint32_t)config->clock_prescaler;
     bf6:	88b3      	ldrh	r3, [r6, #4]
	ctrla_tmp =
     bf8:	431a      	orrs	r2, r3
	if (config->run_in_standby) {
     bfa:	7873      	ldrb	r3, [r6, #1]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d002      	beq.n	c06 <tc_init+0xc2>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     c00:	2380      	movs	r3, #128	; 0x80
     c02:	011b      	lsls	r3, r3, #4
     c04:	431a      	orrs	r2, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c06:	6823      	ldr	r3, [r4, #0]
     c08:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     c0a:	b25b      	sxtb	r3, r3
     c0c:	2b00      	cmp	r3, #0
     c0e:	dbfa      	blt.n	c06 <tc_init+0xc2>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     c10:	802a      	strh	r2, [r5, #0]
	if (config->oneshot) {
     c12:	7b73      	ldrb	r3, [r6, #13]
     c14:	2b00      	cmp	r3, #0
     c16:	d13d      	bne.n	c94 <tc_init+0x150>
	uint8_t ctrlbset_tmp = 0;
     c18:	2200      	movs	r2, #0
	if (config->count_direction) {
     c1a:	7bb3      	ldrb	r3, [r6, #14]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d002      	beq.n	c26 <tc_init+0xe2>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     c20:	2301      	movs	r3, #1
     c22:	431a      	orrs	r2, r3
     c24:	b2d2      	uxtb	r2, r2
     c26:	6823      	ldr	r3, [r4, #0]
     c28:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     c2a:	b25b      	sxtb	r3, r3
     c2c:	2b00      	cmp	r3, #0
     c2e:	dbfa      	blt.n	c26 <tc_init+0xe2>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     c30:	23ff      	movs	r3, #255	; 0xff
     c32:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     c34:	2a00      	cmp	r2, #0
     c36:	d005      	beq.n	c44 <tc_init+0x100>
     c38:	6823      	ldr	r3, [r4, #0]
     c3a:	7bdb      	ldrb	r3, [r3, #15]
		while (tc_is_syncing(module_inst)) {
     c3c:	b25b      	sxtb	r3, r3
     c3e:	2b00      	cmp	r3, #0
     c40:	dbfa      	blt.n	c38 <tc_init+0xf4>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     c42:	716a      	strb	r2, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     c44:	7ab2      	ldrb	r2, [r6, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     c46:	2300      	movs	r3, #0
     c48:	e028      	b.n	c9c <tc_init+0x158>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c4a:	a901      	add	r1, sp, #4
     c4c:	2301      	movs	r3, #1
     c4e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     c50:	2200      	movs	r2, #0
     c52:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     c54:	7e32      	ldrb	r2, [r6, #24]
     c56:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     c58:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     c5a:	7d30      	ldrb	r0, [r6, #20]
     c5c:	4b4b      	ldr	r3, [pc, #300]	; (d8c <tc_init+0x248>)
     c5e:	4798      	blx	r3
     c60:	e7ab      	b.n	bba <tc_init+0x76>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c62:	a901      	add	r1, sp, #4
     c64:	2301      	movs	r3, #1
     c66:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     c68:	2200      	movs	r2, #0
     c6a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     c6c:	3224      	adds	r2, #36	; 0x24
     c6e:	18b2      	adds	r2, r6, r2
     c70:	7812      	ldrb	r2, [r2, #0]
     c72:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     c74:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     c76:	331f      	adds	r3, #31
     c78:	18f3      	adds	r3, r6, r3
     c7a:	7818      	ldrb	r0, [r3, #0]
     c7c:	4b43      	ldr	r3, [pc, #268]	; (d8c <tc_init+0x248>)
     c7e:	4798      	blx	r3
     c80:	e79e      	b.n	bc0 <tc_init+0x7c>
				inst_pm_apbmask[instance + 1]);
     c82:	1c7b      	adds	r3, r7, #1
     c84:	005b      	lsls	r3, r3, #1
     c86:	aa02      	add	r2, sp, #8
     c88:	5a9b      	ldrh	r3, [r3, r2]
     c8a:	4a3d      	ldr	r2, [pc, #244]	; (d80 <tc_init+0x23c>)
     c8c:	6a11      	ldr	r1, [r2, #32]
     c8e:	430b      	orrs	r3, r1
     c90:	6213      	str	r3, [r2, #32]
     c92:	e79f      	b.n	bd4 <tc_init+0x90>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     c94:	2204      	movs	r2, #4
     c96:	e7c0      	b.n	c1a <tc_init+0xd6>
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     c98:	3301      	adds	r3, #1
     c9a:	b2db      	uxtb	r3, r3
     c9c:	2b01      	cmp	r3, #1
     c9e:	d808      	bhi.n	cb2 <tc_init+0x16e>
		if (config->enable_capture_on_channel[i] == true) {
     ca0:	18f1      	adds	r1, r6, r3
     ca2:	7ac9      	ldrb	r1, [r1, #11]
     ca4:	2900      	cmp	r1, #0
     ca6:	d0f7      	beq.n	c98 <tc_init+0x154>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     ca8:	2110      	movs	r1, #16
     caa:	4099      	lsls	r1, r3
     cac:	430a      	orrs	r2, r1
     cae:	b2d2      	uxtb	r2, r2
     cb0:	e7f2      	b.n	c98 <tc_init+0x154>
     cb2:	6823      	ldr	r3, [r4, #0]
     cb4:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     cb6:	b25b      	sxtb	r3, r3
     cb8:	2b00      	cmp	r3, #0
     cba:	dbfa      	blt.n	cb2 <tc_init+0x16e>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     cbc:	71aa      	strb	r2, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cbe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cc0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     cc2:	b25b      	sxtb	r3, r3
     cc4:	2b00      	cmp	r3, #0
     cc6:	dbfa      	blt.n	cbe <tc_init+0x17a>
	switch (module_inst->counter_size) {
     cc8:	7923      	ldrb	r3, [r4, #4]
     cca:	2b04      	cmp	r3, #4
     ccc:	d005      	beq.n	cda <tc_init+0x196>
     cce:	2b08      	cmp	r3, #8
     cd0:	d03a      	beq.n	d48 <tc_init+0x204>
     cd2:	2b00      	cmp	r3, #0
     cd4:	d022      	beq.n	d1c <tc_init+0x1d8>
	return STATUS_ERR_INVALID_ARG;
     cd6:	2017      	movs	r0, #23
     cd8:	e75c      	b.n	b94 <tc_init+0x50>
     cda:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     cdc:	b25b      	sxtb	r3, r3
     cde:	2b00      	cmp	r3, #0
     ce0:	dbfb      	blt.n	cda <tc_init+0x196>
					config->counter_8_bit.value;
     ce2:	2328      	movs	r3, #40	; 0x28
     ce4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     ce6:	742b      	strb	r3, [r5, #16]
     ce8:	6823      	ldr	r3, [r4, #0]
     cea:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
     cec:	b25b      	sxtb	r3, r3
     cee:	2b00      	cmp	r3, #0
     cf0:	dbfa      	blt.n	ce8 <tc_init+0x1a4>
					config->counter_8_bit.period;
     cf2:	2329      	movs	r3, #41	; 0x29
     cf4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     cf6:	752b      	strb	r3, [r5, #20]
     cf8:	6823      	ldr	r3, [r4, #0]
     cfa:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
     cfc:	b25b      	sxtb	r3, r3
     cfe:	2b00      	cmp	r3, #0
     d00:	dbfa      	blt.n	cf8 <tc_init+0x1b4>
					config->counter_8_bit.compare_capture_channel[0];
     d02:	232a      	movs	r3, #42	; 0x2a
     d04:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     d06:	762b      	strb	r3, [r5, #24]
     d08:	6823      	ldr	r3, [r4, #0]
     d0a:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
     d0c:	b25b      	sxtb	r3, r3
     d0e:	2b00      	cmp	r3, #0
     d10:	dbfa      	blt.n	d08 <tc_init+0x1c4>
					config->counter_8_bit.compare_capture_channel[1];
     d12:	232b      	movs	r3, #43	; 0x2b
     d14:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     d16:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     d18:	2000      	movs	r0, #0
     d1a:	e73b      	b.n	b94 <tc_init+0x50>
     d1c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d1e:	b25b      	sxtb	r3, r3
     d20:	2b00      	cmp	r3, #0
     d22:	dbfb      	blt.n	d1c <tc_init+0x1d8>
				= config->counter_16_bit.value;
     d24:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     d26:	822b      	strh	r3, [r5, #16]
     d28:	6823      	ldr	r3, [r4, #0]
     d2a:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
     d2c:	b25b      	sxtb	r3, r3
     d2e:	2b00      	cmp	r3, #0
     d30:	dbfa      	blt.n	d28 <tc_init+0x1e4>
					config->counter_16_bit.compare_capture_channel[0];
     d32:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     d34:	832b      	strh	r3, [r5, #24]
     d36:	6823      	ldr	r3, [r4, #0]
     d38:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
     d3a:	b25b      	sxtb	r3, r3
     d3c:	2b00      	cmp	r3, #0
     d3e:	dbfa      	blt.n	d36 <tc_init+0x1f2>
					config->counter_16_bit.compare_capture_channel[1];
     d40:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     d42:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     d44:	2000      	movs	r0, #0
     d46:	e725      	b.n	b94 <tc_init+0x50>
     d48:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d4a:	b25b      	sxtb	r3, r3
     d4c:	2b00      	cmp	r3, #0
     d4e:	dbfb      	blt.n	d48 <tc_init+0x204>
				= config->counter_32_bit.value;
     d50:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d52:	612b      	str	r3, [r5, #16]
     d54:	6823      	ldr	r3, [r4, #0]
     d56:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
     d58:	b25b      	sxtb	r3, r3
     d5a:	2b00      	cmp	r3, #0
     d5c:	dbfa      	blt.n	d54 <tc_init+0x210>
			hw->COUNT32.CC[0].reg =
     d5e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     d60:	61ab      	str	r3, [r5, #24]
     d62:	6823      	ldr	r3, [r4, #0]
     d64:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
     d66:	b25b      	sxtb	r3, r3
     d68:	2b00      	cmp	r3, #0
     d6a:	dbfa      	blt.n	d62 <tc_init+0x21e>
					config->counter_32_bit.compare_capture_channel[1];
     d6c:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     d6e:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     d70:	2000      	movs	r0, #0
     d72:	e70f      	b.n	b94 <tc_init+0x50>
     d74:	00000b15 	.word	0x00000b15
     d78:	00001374 	.word	0x00001374
     d7c:	200000b8 	.word	0x200000b8
     d80:	40000400 	.word	0x40000400
     d84:	000008fd 	.word	0x000008fd
     d88:	00000875 	.word	0x00000875
     d8c:	000009ad 	.word	0x000009ad

00000d90 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     d90:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     d92:	6804      	ldr	r4, [r0, #0]
     d94:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
     d96:	b25b      	sxtb	r3, r3
     d98:	2b00      	cmp	r3, #0
     d9a:	dbfb      	blt.n	d94 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     d9c:	7903      	ldrb	r3, [r0, #4]
     d9e:	2b04      	cmp	r3, #4
     da0:	d005      	beq.n	dae <tc_set_compare_value+0x1e>
     da2:	2b08      	cmp	r3, #8
     da4:	d007      	beq.n	db6 <tc_set_compare_value+0x26>
     da6:	2b00      	cmp	r3, #0
     da8:	d003      	beq.n	db2 <tc_set_compare_value+0x22>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     daa:	2017      	movs	r0, #23
     dac:	e006      	b.n	dbc <tc_set_compare_value+0x2c>
			if (channel_index <
     dae:	2901      	cmp	r1, #1
     db0:	d905      	bls.n	dbe <tc_set_compare_value+0x2e>
			if (channel_index <
     db2:	2901      	cmp	r1, #1
     db4:	d908      	bls.n	dc8 <tc_set_compare_value+0x38>
			if (channel_index <
     db6:	2901      	cmp	r1, #1
     db8:	d90c      	bls.n	dd4 <tc_set_compare_value+0x44>
	return STATUS_ERR_INVALID_ARG;
     dba:	2017      	movs	r0, #23
}
     dbc:	bd10      	pop	{r4, pc}
						(uint8_t)compare;
     dbe:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
     dc0:	1864      	adds	r4, r4, r1
     dc2:	7622      	strb	r2, [r4, #24]
				return STATUS_OK;
     dc4:	2000      	movs	r0, #0
     dc6:	e7f9      	b.n	dbc <tc_set_compare_value+0x2c>
						(uint16_t)compare;
     dc8:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
     dca:	310c      	adds	r1, #12
     dcc:	0049      	lsls	r1, r1, #1
     dce:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
     dd0:	2000      	movs	r0, #0
     dd2:	e7f3      	b.n	dbc <tc_set_compare_value+0x2c>
				tc_module->COUNT32.CC[channel_index].reg =
     dd4:	3106      	adds	r1, #6
     dd6:	0089      	lsls	r1, r1, #2
     dd8:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
     dda:	2000      	movs	r0, #0
     ddc:	e7ee      	b.n	dbc <tc_set_compare_value+0x2c>

00000dde <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     dde:	e7fe      	b.n	dde <Dummy_Handler>

00000de0 <Reset_Handler>:
{
     de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     de2:	4a23      	ldr	r2, [pc, #140]	; (e70 <Reset_Handler+0x90>)
     de4:	4b23      	ldr	r3, [pc, #140]	; (e74 <Reset_Handler+0x94>)
     de6:	429a      	cmp	r2, r3
     de8:	d009      	beq.n	dfe <Reset_Handler+0x1e>
     dea:	4b22      	ldr	r3, [pc, #136]	; (e74 <Reset_Handler+0x94>)
     dec:	4a20      	ldr	r2, [pc, #128]	; (e70 <Reset_Handler+0x90>)
     dee:	e003      	b.n	df8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     df0:	6811      	ldr	r1, [r2, #0]
     df2:	6019      	str	r1, [r3, #0]
     df4:	3304      	adds	r3, #4
     df6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     df8:	491f      	ldr	r1, [pc, #124]	; (e78 <Reset_Handler+0x98>)
     dfa:	428b      	cmp	r3, r1
     dfc:	d3f8      	bcc.n	df0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     dfe:	4b1f      	ldr	r3, [pc, #124]	; (e7c <Reset_Handler+0x9c>)
     e00:	e002      	b.n	e08 <Reset_Handler+0x28>
                *pDest++ = 0;
     e02:	2200      	movs	r2, #0
     e04:	601a      	str	r2, [r3, #0]
     e06:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     e08:	4a1d      	ldr	r2, [pc, #116]	; (e80 <Reset_Handler+0xa0>)
     e0a:	4293      	cmp	r3, r2
     e0c:	d3f9      	bcc.n	e02 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     e0e:	4a1d      	ldr	r2, [pc, #116]	; (e84 <Reset_Handler+0xa4>)
     e10:	21ff      	movs	r1, #255	; 0xff
     e12:	4b1d      	ldr	r3, [pc, #116]	; (e88 <Reset_Handler+0xa8>)
     e14:	438b      	bics	r3, r1
     e16:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     e18:	39fd      	subs	r1, #253	; 0xfd
     e1a:	2390      	movs	r3, #144	; 0x90
     e1c:	005b      	lsls	r3, r3, #1
     e1e:	4a1b      	ldr	r2, [pc, #108]	; (e8c <Reset_Handler+0xac>)
     e20:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     e22:	4a1b      	ldr	r2, [pc, #108]	; (e90 <Reset_Handler+0xb0>)
     e24:	78d3      	ldrb	r3, [r2, #3]
     e26:	2503      	movs	r5, #3
     e28:	43ab      	bics	r3, r5
     e2a:	2402      	movs	r4, #2
     e2c:	4323      	orrs	r3, r4
     e2e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     e30:	78d3      	ldrb	r3, [r2, #3]
     e32:	270c      	movs	r7, #12
     e34:	43bb      	bics	r3, r7
     e36:	2608      	movs	r6, #8
     e38:	4333      	orrs	r3, r6
     e3a:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     e3c:	4b15      	ldr	r3, [pc, #84]	; (e94 <Reset_Handler+0xb4>)
     e3e:	7b98      	ldrb	r0, [r3, #14]
     e40:	2230      	movs	r2, #48	; 0x30
     e42:	4390      	bics	r0, r2
     e44:	2220      	movs	r2, #32
     e46:	4310      	orrs	r0, r2
     e48:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     e4a:	7b99      	ldrb	r1, [r3, #14]
     e4c:	43b9      	bics	r1, r7
     e4e:	4331      	orrs	r1, r6
     e50:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     e52:	7b9a      	ldrb	r2, [r3, #14]
     e54:	43aa      	bics	r2, r5
     e56:	4322      	orrs	r2, r4
     e58:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     e5a:	4a0f      	ldr	r2, [pc, #60]	; (e98 <Reset_Handler+0xb8>)
     e5c:	6851      	ldr	r1, [r2, #4]
     e5e:	2380      	movs	r3, #128	; 0x80
     e60:	430b      	orrs	r3, r1
     e62:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     e64:	4b0d      	ldr	r3, [pc, #52]	; (e9c <Reset_Handler+0xbc>)
     e66:	4798      	blx	r3
        main();
     e68:	4b0d      	ldr	r3, [pc, #52]	; (ea0 <Reset_Handler+0xc0>)
     e6a:	4798      	blx	r3
     e6c:	e7fe      	b.n	e6c <Reset_Handler+0x8c>
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	000013b8 	.word	0x000013b8
     e74:	20000000 	.word	0x20000000
     e78:	2000001c 	.word	0x2000001c
     e7c:	2000001c 	.word	0x2000001c
     e80:	20000100 	.word	0x20000100
     e84:	e000ed00 	.word	0xe000ed00
     e88:	00000000 	.word	0x00000000
     e8c:	41007000 	.word	0x41007000
     e90:	41005000 	.word	0x41005000
     e94:	41004800 	.word	0x41004800
     e98:	41004000 	.word	0x41004000
     e9c:	000012a1 	.word	0x000012a1
     ea0:	00001271 	.word	0x00001271

00000ea4 <_tc_interrupt_get_interrupt_vector>:
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     ea4:	4b01      	ldr	r3, [pc, #4]	; (eac <_tc_interrupt_get_interrupt_vector+0x8>)
     ea6:	5618      	ldrsb	r0, [r3, r0]
}
     ea8:	4770      	bx	lr
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	00001394 	.word	0x00001394

00000eb0 <configure_pwm_generator>:
*/
/************************************************************************/


static void configure_pwm_generator (void)
{
     eb0:	b500      	push	{lr}
     eb2:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     eb4:	aa01      	add	r2, sp, #4
     eb6:	2300      	movs	r3, #0
     eb8:	2100      	movs	r1, #0
     eba:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     ebc:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     ebe:	2000      	movs	r0, #0
     ec0:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     ec2:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     ec4:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     ec6:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     ec8:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     eca:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     ecc:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     ece:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     ed0:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     ed2:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     ed4:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     ed6:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);

	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
     ed8:	3304      	adds	r3, #4
     eda:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     edc:	21a0      	movs	r1, #160	; 0xa0
     ede:	00c9      	lsls	r1, r1, #3
     ee0:	8091      	strh	r1, [r2, #4]

	config_tc.counter_8_bit.value = 0;
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     ee2:	2055      	movs	r0, #85	; 0x55
     ee4:	2129      	movs	r1, #41	; 0x29
     ee6:	5450      	strb	r0, [r2, r1]

	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     ee8:	3840      	subs	r0, #64	; 0x40
     eea:	3101      	adds	r1, #1
     eec:	5450      	strb	r0, [r2, r1]

	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     eee:	3116      	adds	r1, #22
     ef0:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_out = PIN_PA10E_TC2_WO0;
     ef2:	3936      	subs	r1, #54	; 0x36
     ef4:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].pin_mux = MUX_PA10E_TC2_WO0;
     ef6:	6193      	str	r3, [r2, #24]

	config_tc.pwm_channel[0].enabled = true;
     ef8:	3b03      	subs	r3, #3
     efa:	7413      	strb	r3, [r2, #16]

	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     efc:	4902      	ldr	r1, [pc, #8]	; (f08 <configure_pwm_generator+0x58>)
     efe:	4803      	ldr	r0, [pc, #12]	; (f0c <configure_pwm_generator+0x5c>)
     f00:	4b03      	ldr	r3, [pc, #12]	; (f10 <configure_pwm_generator+0x60>)
     f02:	4798      	blx	r3
}
     f04:	b00f      	add	sp, #60	; 0x3c
     f06:	bd00      	pop	{pc}
     f08:	42001c00 	.word	0x42001c00
     f0c:	200000e4 	.word	0x200000e4
     f10:	00000b45 	.word	0x00000b45

00000f14 <configure_port_pins>:
{
     f14:	b500      	push	{lr}
     f16:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     f18:	a901      	add	r1, sp, #4
     f1a:	2300      	movs	r3, #0
     f1c:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
     f1e:	708b      	strb	r3, [r1, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     f20:	3302      	adds	r3, #2
     f22:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     f24:	201b      	movs	r0, #27
     f26:	4b02      	ldr	r3, [pc, #8]	; (f30 <configure_port_pins+0x1c>)
     f28:	4798      	blx	r3
}
     f2a:	b003      	add	sp, #12
     f2c:	bd00      	pop	{pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	00000311 	.word	0x00000311

00000f34 <configure_system_tc>:
{
     f34:	b510      	push	{r4, lr}
     f36:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
     f38:	aa01      	add	r2, sp, #4
     f3a:	2300      	movs	r3, #0
     f3c:	2100      	movs	r1, #0
     f3e:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     f40:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     f42:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     f44:	2000      	movs	r0, #0
     f46:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     f48:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     f4a:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     f4c:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     f4e:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     f50:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     f52:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     f54:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     f56:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     f58:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     f5a:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     f5c:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     f5e:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     f60:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     f62:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
     f64:	3304      	adds	r3, #4
     f66:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     f68:	23a0      	movs	r3, #160	; 0xa0
     f6a:	00db      	lsls	r3, r3, #3
     f6c:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
     f6e:	217c      	movs	r1, #124	; 0x7c
     f70:	2329      	movs	r3, #41	; 0x29
     f72:	54d1      	strb	r1, [r2, r3]
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
     f74:	4c08      	ldr	r4, [pc, #32]	; (f98 <configure_system_tc+0x64>)
     f76:	4909      	ldr	r1, [pc, #36]	; (f9c <configure_system_tc+0x68>)
     f78:	0020      	movs	r0, r4
     f7a:	4b09      	ldr	r3, [pc, #36]	; (fa0 <configure_system_tc+0x6c>)
     f7c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     f7e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     f80:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     f82:	b25b      	sxtb	r3, r3
     f84:	2b00      	cmp	r3, #0
     f86:	dbfb      	blt.n	f80 <configure_system_tc+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     f88:	8813      	ldrh	r3, [r2, #0]
     f8a:	2102      	movs	r1, #2
     f8c:	430b      	orrs	r3, r1
     f8e:	b29b      	uxth	r3, r3
     f90:	8013      	strh	r3, [r2, #0]
}
     f92:	b00e      	add	sp, #56	; 0x38
     f94:	bd10      	pop	{r4, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	200000c4 	.word	0x200000c4
     f9c:	42001800 	.word	0x42001800
     fa0:	00000b45 	.word	0x00000b45

00000fa4 <system_tc_callbacks>:
{
     fa4:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, tc_callback_to_toggle_led,
     fa6:	4c0c      	ldr	r4, [pc, #48]	; (fd8 <system_tc_callbacks+0x34>)
     fa8:	2200      	movs	r2, #0
     faa:	490c      	ldr	r1, [pc, #48]	; (fdc <system_tc_callbacks+0x38>)
     fac:	0020      	movs	r0, r4
     fae:	4b0c      	ldr	r3, [pc, #48]	; (fe0 <system_tc_callbacks+0x3c>)
     fb0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     fb2:	6820      	ldr	r0, [r4, #0]
     fb4:	4b0b      	ldr	r3, [pc, #44]	; (fe4 <system_tc_callbacks+0x40>)
     fb6:	4798      	blx	r3
     fb8:	4b0b      	ldr	r3, [pc, #44]	; (fe8 <system_tc_callbacks+0x44>)
     fba:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     fbc:	231f      	movs	r3, #31
     fbe:	4018      	ands	r0, r3
     fc0:	2201      	movs	r2, #1
     fc2:	0011      	movs	r1, r2
     fc4:	4081      	lsls	r1, r0
     fc6:	4b09      	ldr	r3, [pc, #36]	; (fec <system_tc_callbacks+0x48>)
     fc8:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     fca:	7e63      	ldrb	r3, [r4, #25]
     fcc:	2101      	movs	r1, #1
     fce:	430b      	orrs	r3, r1
     fd0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     fd2:	6823      	ldr	r3, [r4, #0]
     fd4:	735a      	strb	r2, [r3, #13]
}
     fd6:	bd10      	pop	{r4, pc}
     fd8:	200000c4 	.word	0x200000c4
     fdc:	00001131 	.word	0x00001131
     fe0:	00000a5d 	.word	0x00000a5d
     fe4:	00000b15 	.word	0x00000b15
     fe8:	00000ea5 	.word	0x00000ea5
     fec:	e000e100 	.word	0xe000e100

00000ff0 <is_button_pressed>:
	return (port_base->IN.reg & pin_mask);
     ff0:	4b0f      	ldr	r3, [pc, #60]	; (1030 <is_button_pressed+0x40>)
     ff2:	6a1b      	ldr	r3, [r3, #32]

bool is_button_pressed (void)
{
	static int press_delay_count = 5;
	if (!port_pin_get_input_level (SW0_PIN))
     ff4:	045b      	lsls	r3, r3, #17
     ff6:	d40f      	bmi.n	1018 <is_button_pressed+0x28>
	{
		BUTTON_PRESS_STATUS = true;
     ff8:	2201      	movs	r2, #1
     ffa:	4b0e      	ldr	r3, [pc, #56]	; (1034 <is_button_pressed+0x44>)
     ffc:	701a      	strb	r2, [r3, #0]
		press_delay_count--;
     ffe:	4a0e      	ldr	r2, [pc, #56]	; (1038 <is_button_pressed+0x48>)
    1000:	6813      	ldr	r3, [r2, #0]
    1002:	3b01      	subs	r3, #1
    1004:	6013      	str	r3, [r2, #0]
	}else
	{
		BUTTON_PRESS_STATUS = false;
		press_delay_count = 5;
	}
	if (press_delay_count <= 0)
    1006:	4b0c      	ldr	r3, [pc, #48]	; (1038 <is_button_pressed+0x48>)
    1008:	681b      	ldr	r3, [r3, #0]
    100a:	2b00      	cmp	r3, #0
    100c:	dd0b      	ble.n	1026 <is_button_pressed+0x36>
		return true;
		press_delay_count = 0;
	}
	else
	{
		BUTTON_RELEASE_STATUS = true;
    100e:	2201      	movs	r2, #1
    1010:	4b0a      	ldr	r3, [pc, #40]	; (103c <is_button_pressed+0x4c>)
    1012:	701a      	strb	r2, [r3, #0]
		return false;
    1014:	2000      	movs	r0, #0
	}
}
    1016:	4770      	bx	lr
		BUTTON_PRESS_STATUS = false;
    1018:	2200      	movs	r2, #0
    101a:	4b06      	ldr	r3, [pc, #24]	; (1034 <is_button_pressed+0x44>)
    101c:	701a      	strb	r2, [r3, #0]
		press_delay_count = 5;
    101e:	3205      	adds	r2, #5
    1020:	4b05      	ldr	r3, [pc, #20]	; (1038 <is_button_pressed+0x48>)
    1022:	601a      	str	r2, [r3, #0]
    1024:	e7ef      	b.n	1006 <is_button_pressed+0x16>
		BUTTON_RELEASE_STATUS = false;
    1026:	2200      	movs	r2, #0
    1028:	4b04      	ldr	r3, [pc, #16]	; (103c <is_button_pressed+0x4c>)
    102a:	701a      	strb	r2, [r3, #0]
		return true;
    102c:	2001      	movs	r0, #1
    102e:	e7f2      	b.n	1016 <is_button_pressed+0x26>
    1030:	41004400 	.word	0x41004400
    1034:	20000064 	.word	0x20000064
    1038:	20000018 	.word	0x20000018
    103c:	20000065 	.word	0x20000065

00001040 <cycle_pwm_duty>:
		motor_status_changed = false;
	}
}

void cycle_pwm_duty (void)
{
    1040:	b570      	push	{r4, r5, r6, lr}
	if (PWM_RUNNING)
    1042:	4b18      	ldr	r3, [pc, #96]	; (10a4 <cycle_pwm_duty+0x64>)
    1044:	781b      	ldrb	r3, [r3, #0]
    1046:	2b00      	cmp	r3, #0
    1048:	d006      	beq.n	1058 <cycle_pwm_duty+0x18>
	{
		if (toggle_count == 2)
    104a:	4b17      	ldr	r3, [pc, #92]	; (10a8 <cycle_pwm_duty+0x68>)
    104c:	781b      	ldrb	r3, [r3, #0]
    104e:	2b02      	cmp	r3, #2
    1050:	d003      	beq.n	105a <cycle_pwm_duty+0x1a>
		{
			tc_set_compare_value (&pwm_generator_instance,
			TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
		}
		else if (toggle_count == 3)
    1052:	2b03      	cmp	r3, #3
    1054:	d007      	beq.n	1066 <cycle_pwm_duty+0x26>
		{
			tc_set_compare_value (&pwm_generator_instance,
			TC_COMPARE_CAPTURE_CHANNEL_0,
			SECOND_DUTY_CYCLE);
		}
		else if (toggle_count > 3)
    1056:	d80c      	bhi.n	1072 <cycle_pwm_duty+0x32>
			INITIAL_DUTY_CYCLE);
			PWM_RUNNING = false;
			tc_disable (&pwm_generator_instance);
		}
	}
}
    1058:	bd70      	pop	{r4, r5, r6, pc}
			tc_set_compare_value (&pwm_generator_instance,
    105a:	2222      	movs	r2, #34	; 0x22
    105c:	2100      	movs	r1, #0
    105e:	4813      	ldr	r0, [pc, #76]	; (10ac <cycle_pwm_duty+0x6c>)
    1060:	4b13      	ldr	r3, [pc, #76]	; (10b0 <cycle_pwm_duty+0x70>)
    1062:	4798      	blx	r3
    1064:	e7f8      	b.n	1058 <cycle_pwm_duty+0x18>
			tc_set_compare_value (&pwm_generator_instance,
    1066:	224d      	movs	r2, #77	; 0x4d
    1068:	2100      	movs	r1, #0
    106a:	4810      	ldr	r0, [pc, #64]	; (10ac <cycle_pwm_duty+0x6c>)
    106c:	4b10      	ldr	r3, [pc, #64]	; (10b0 <cycle_pwm_duty+0x70>)
    106e:	4798      	blx	r3
    1070:	e7f2      	b.n	1058 <cycle_pwm_duty+0x18>
			toggle_count = 0;
    1072:	2500      	movs	r5, #0
    1074:	4b0c      	ldr	r3, [pc, #48]	; (10a8 <cycle_pwm_duty+0x68>)
    1076:	701d      	strb	r5, [r3, #0]
			tc_set_compare_value (&pwm_generator_instance,
    1078:	4c0c      	ldr	r4, [pc, #48]	; (10ac <cycle_pwm_duty+0x6c>)
    107a:	2215      	movs	r2, #21
    107c:	2100      	movs	r1, #0
    107e:	0020      	movs	r0, r4
    1080:	4b0b      	ldr	r3, [pc, #44]	; (10b0 <cycle_pwm_duty+0x70>)
    1082:	4798      	blx	r3
			PWM_RUNNING = false;
    1084:	4b07      	ldr	r3, [pc, #28]	; (10a4 <cycle_pwm_duty+0x64>)
    1086:	701d      	strb	r5, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1088:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    108a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    108c:	b25b      	sxtb	r3, r3
    108e:	2b00      	cmp	r3, #0
    1090:	dbfb      	blt.n	108a <cycle_pwm_duty+0x4a>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1092:	233b      	movs	r3, #59	; 0x3b
    1094:	7313      	strb	r3, [r2, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    1096:	7393      	strb	r3, [r2, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1098:	8813      	ldrh	r3, [r2, #0]
    109a:	2102      	movs	r1, #2
    109c:	438b      	bics	r3, r1
    109e:	8013      	strh	r3, [r2, #0]
}
    10a0:	e7da      	b.n	1058 <cycle_pwm_duty+0x18>
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	20000066 	.word	0x20000066
    10a8:	20000071 	.word	0x20000071
    10ac:	200000e4 	.word	0x200000e4
    10b0:	00000d91 	.word	0x00000d91

000010b4 <check_button_press>:
{
    10b4:	b510      	push	{r4, lr}
	if (is_button_pressed () & !motor_status_changed)
    10b6:	4b17      	ldr	r3, [pc, #92]	; (1114 <check_button_press+0x60>)
    10b8:	4798      	blx	r3
    10ba:	4b17      	ldr	r3, [pc, #92]	; (1118 <check_button_press+0x64>)
    10bc:	781b      	ldrb	r3, [r3, #0]
    10be:	2201      	movs	r2, #1
    10c0:	4053      	eors	r3, r2
    10c2:	b2db      	uxtb	r3, r3
    10c4:	2800      	cmp	r0, #0
    10c6:	d019      	beq.n	10fc <check_button_press+0x48>
    10c8:	2b00      	cmp	r3, #0
    10ca:	d017      	beq.n	10fc <check_button_press+0x48>
		toggle_count++;
    10cc:	4a13      	ldr	r2, [pc, #76]	; (111c <check_button_press+0x68>)
    10ce:	7813      	ldrb	r3, [r2, #0]
    10d0:	3301      	adds	r3, #1
    10d2:	7013      	strb	r3, [r2, #0]
		motor_status_changed = true;
    10d4:	2201      	movs	r2, #1
    10d6:	4b10      	ldr	r3, [pc, #64]	; (1118 <check_button_press+0x64>)
    10d8:	701a      	strb	r2, [r3, #0]
		if (!PWM_RUNNING)
    10da:	4b11      	ldr	r3, [pc, #68]	; (1120 <check_button_press+0x6c>)
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	2b00      	cmp	r3, #0
    10e0:	d114      	bne.n	110c <check_button_press+0x58>
			PWM_RUNNING = true;
    10e2:	4b0f      	ldr	r3, [pc, #60]	; (1120 <check_button_press+0x6c>)
    10e4:	701a      	strb	r2, [r3, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    10e6:	4b0f      	ldr	r3, [pc, #60]	; (1124 <check_button_press+0x70>)
    10e8:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    10ea:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    10ec:	b25b      	sxtb	r3, r3
    10ee:	2b00      	cmp	r3, #0
    10f0:	dbfb      	blt.n	10ea <check_button_press+0x36>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    10f2:	8813      	ldrh	r3, [r2, #0]
    10f4:	2102      	movs	r1, #2
    10f6:	430b      	orrs	r3, r1
    10f8:	b29b      	uxth	r3, r3
    10fa:	8013      	strh	r3, [r2, #0]
	if (BUTTON_RELEASE_STATUS)
    10fc:	4b0a      	ldr	r3, [pc, #40]	; (1128 <check_button_press+0x74>)
    10fe:	781b      	ldrb	r3, [r3, #0]
    1100:	2b00      	cmp	r3, #0
    1102:	d002      	beq.n	110a <check_button_press+0x56>
		motor_status_changed = false;
    1104:	2200      	movs	r2, #0
    1106:	4b04      	ldr	r3, [pc, #16]	; (1118 <check_button_press+0x64>)
    1108:	701a      	strb	r2, [r3, #0]
}
    110a:	bd10      	pop	{r4, pc}
			cycle_pwm_duty ();
    110c:	4b07      	ldr	r3, [pc, #28]	; (112c <check_button_press+0x78>)
    110e:	4798      	blx	r3
    1110:	e7f4      	b.n	10fc <check_button_press+0x48>
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	00000ff1 	.word	0x00000ff1
    1118:	20000067 	.word	0x20000067
    111c:	20000071 	.word	0x20000071
    1120:	20000066 	.word	0x20000066
    1124:	200000e4 	.word	0x200000e4
    1128:	20000065 	.word	0x20000065
    112c:	00001041 	.word	0x00001041

00001130 <tc_callback_to_toggle_led>:
{
    1130:	b510      	push	{r4, lr}
	tick_count_1ms++;
    1132:	4a0a      	ldr	r2, [pc, #40]	; (115c <tc_callback_to_toggle_led+0x2c>)
    1134:	6813      	ldr	r3, [r2, #0]
    1136:	3301      	adds	r3, #1
    1138:	6013      	str	r3, [r2, #0]
	if (tick_count_1ms > 10)
    113a:	2b0a      	cmp	r3, #10
    113c:	dc00      	bgt.n	1140 <tc_callback_to_toggle_led+0x10>
}
    113e:	bd10      	pop	{r4, pc}
		tick_count_10ms++;
    1140:	4a07      	ldr	r2, [pc, #28]	; (1160 <tc_callback_to_toggle_led+0x30>)
    1142:	6813      	ldr	r3, [r2, #0]
    1144:	3301      	adds	r3, #1
    1146:	6013      	str	r3, [r2, #0]
		tick_count_1ms = 0;
    1148:	2200      	movs	r2, #0
    114a:	4b04      	ldr	r3, [pc, #16]	; (115c <tc_callback_to_toggle_led+0x2c>)
    114c:	601a      	str	r2, [r3, #0]
		tick_flag_10ms = true;
    114e:	3201      	adds	r2, #1
    1150:	4b04      	ldr	r3, [pc, #16]	; (1164 <tc_callback_to_toggle_led+0x34>)
    1152:	701a      	strb	r2, [r3, #0]
		check_button_press ();
    1154:	4b04      	ldr	r3, [pc, #16]	; (1168 <tc_callback_to_toggle_led+0x38>)
    1156:	4798      	blx	r3
}
    1158:	e7f1      	b.n	113e <tc_callback_to_toggle_led+0xe>
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	2000006c 	.word	0x2000006c
    1160:	20000068 	.word	0x20000068
    1164:	20000070 	.word	0x20000070
    1168:	000010b5 	.word	0x000010b5

0000116c <get_vbus_state>:
    116c:	4b03      	ldr	r3, [pc, #12]	; (117c <get_vbus_state+0x10>)
    116e:	6a1a      	ldr	r2, [r3, #32]
    1170:	0ed2      	lsrs	r2, r2, #27
    1172:	2301      	movs	r3, #1
    1174:	4013      	ands	r3, r2

bool VBUS_STATE;
void get_vbus_state(void);

void get_vbus_state(void){
	VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
    1176:	4a02      	ldr	r2, [pc, #8]	; (1180 <get_vbus_state+0x14>)
    1178:	7013      	strb	r3, [r2, #0]
}
    117a:	4770      	bx	lr
    117c:	41004400 	.word	0x41004400
    1180:	200000c0 	.word	0x200000c0

00001184 <led_control>:
/************************************************************************/


void led_control(const char* manner, const char* color);

void led_control(const char* manner, const char* color) {
    1184:	b510      	push	{r4, lr}
    1186:	000c      	movs	r4, r1
	if (strcmp(manner, "blink") == 0 && strcmp(color, "yellow") == 0) {
    1188:	4907      	ldr	r1, [pc, #28]	; (11a8 <led_control+0x24>)
    118a:	4b08      	ldr	r3, [pc, #32]	; (11ac <led_control+0x28>)
    118c:	4798      	blx	r3
    118e:	2800      	cmp	r0, #0
    1190:	d109      	bne.n	11a6 <led_control+0x22>
    1192:	4907      	ldr	r1, [pc, #28]	; (11b0 <led_control+0x2c>)
    1194:	0020      	movs	r0, r4
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <led_control+0x28>)
    1198:	4798      	blx	r3
    119a:	2800      	cmp	r0, #0
    119c:	d103      	bne.n	11a6 <led_control+0x22>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    119e:	2280      	movs	r2, #128	; 0x80
    11a0:	0252      	lsls	r2, r2, #9
    11a2:	4b04      	ldr	r3, [pc, #16]	; (11b4 <led_control+0x30>)
    11a4:	615a      	str	r2, [r3, #20]
		LED_On(LED0_PIN);
	}
}
    11a6:	bd10      	pop	{r4, pc}
    11a8:	00001384 	.word	0x00001384
    11ac:	000012e9 	.word	0x000012e9
    11b0:	0000138c 	.word	0x0000138c
    11b4:	41004400 	.word	0x41004400

000011b8 <display_battery_state>:
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void);

void display_battery_state(void){
    11b8:	b510      	push	{r4, lr}
	}
	
	if (BATTERY_LOW){
	}
	
	if (BATTERY_CHARGED){
    11ba:	4b05      	ldr	r3, [pc, #20]	; (11d0 <display_battery_state+0x18>)
    11bc:	781b      	ldrb	r3, [r3, #0]
    11be:	2b00      	cmp	r3, #0
    11c0:	d100      	bne.n	11c4 <display_battery_state+0xc>
	
	if (BATTERY_CHARGING){
		
	}
	
}
    11c2:	bd10      	pop	{r4, pc}
		led_control("blink","yellow");
    11c4:	4903      	ldr	r1, [pc, #12]	; (11d4 <display_battery_state+0x1c>)
    11c6:	4804      	ldr	r0, [pc, #16]	; (11d8 <display_battery_state+0x20>)
    11c8:	4b04      	ldr	r3, [pc, #16]	; (11dc <display_battery_state+0x24>)
    11ca:	4798      	blx	r3
}
    11cc:	e7f9      	b.n	11c2 <display_battery_state+0xa>
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	200000c2 	.word	0x200000c2
    11d4:	0000138c 	.word	0x0000138c
    11d8:	00001384 	.word	0x00001384
    11dc:	00001185 	.word	0x00001185

000011e0 <system_state>:
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void);

void system_state(void){
    11e0:	b510      	push	{r4, lr}
	get_vbus_state();
    11e2:	4b01      	ldr	r3, [pc, #4]	; (11e8 <system_state+0x8>)
    11e4:	4798      	blx	r3
	update_battery_states();
	sample_battery_states();
}
    11e6:	bd10      	pop	{r4, pc}
    11e8:	0000116d 	.word	0x0000116d

000011ec <system_logic>:
/* LOGIC MACHINE		                                                */
/************************************************************************/

void system_logic(void);

void system_logic(void){
    11ec:	b510      	push	{r4, lr}
	if (!VBUS_STATE){
    11ee:	4b0e      	ldr	r3, [pc, #56]	; (1228 <system_logic+0x3c>)
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d00c      	beq.n	1210 <system_logic+0x24>
		configure_pwm_generator();					// Enable Motor PWM
	}
	
	if (VBUS_STATE){
    11f6:	4b0c      	ldr	r3, [pc, #48]	; (1228 <system_logic+0x3c>)
    11f8:	781b      	ldrb	r3, [r3, #0]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d10b      	bne.n	1216 <system_logic+0x2a>
		// LED_On(LED0_PIN);						// Verify VBUS Connection
		display_battery_state();					// Display colors mapped to battery state
	}
	
	if (BATTERY_LOW){
    11fe:	4b0b      	ldr	r3, [pc, #44]	; (122c <system_logic+0x40>)
    1200:	781b      	ldrb	r3, [r3, #0]
    1202:	2b00      	cmp	r3, #0
    1204:	d10a      	bne.n	121c <system_logic+0x30>
		display_battery_state();					// Steady Red
	}
	
	if (BATTERY_LOWEST){
    1206:	4b0a      	ldr	r3, [pc, #40]	; (1230 <system_logic+0x44>)
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	2b00      	cmp	r3, #0
    120c:	d109      	bne.n	1222 <system_logic+0x36>
		display_battery_state();					// Blink Red
	}
}
    120e:	bd10      	pop	{r4, pc}
		configure_pwm_generator();					// Enable Motor PWM
    1210:	4b08      	ldr	r3, [pc, #32]	; (1234 <system_logic+0x48>)
    1212:	4798      	blx	r3
    1214:	e7ef      	b.n	11f6 <system_logic+0xa>
		display_battery_state();					// Display colors mapped to battery state
    1216:	4b08      	ldr	r3, [pc, #32]	; (1238 <system_logic+0x4c>)
    1218:	4798      	blx	r3
    121a:	e7f0      	b.n	11fe <system_logic+0x12>
		display_battery_state();					// Steady Red
    121c:	4b06      	ldr	r3, [pc, #24]	; (1238 <system_logic+0x4c>)
    121e:	4798      	blx	r3
    1220:	e7f1      	b.n	1206 <system_logic+0x1a>
		display_battery_state();					// Blink Red
    1222:	4b05      	ldr	r3, [pc, #20]	; (1238 <system_logic+0x4c>)
    1224:	4798      	blx	r3
}
    1226:	e7f2      	b.n	120e <system_logic+0x22>
    1228:	200000c0 	.word	0x200000c0
    122c:	200000c3 	.word	0x200000c3
    1230:	200000c1 	.word	0x200000c1
    1234:	00000eb1 	.word	0x00000eb1
    1238:	000011b9 	.word	0x000011b9

0000123c <startup_sys_configs>:
/************************************************************************/

void startup_sys_configs(void);


void startup_sys_configs(void){
    123c:	b510      	push	{r4, lr}
	system_init ();									// System Initialize
    123e:	4b07      	ldr	r3, [pc, #28]	; (125c <startup_sys_configs+0x20>)
    1240:	4798      	blx	r3
	cpu_irq_enable();
    1242:	2201      	movs	r2, #1
    1244:	4b06      	ldr	r3, [pc, #24]	; (1260 <startup_sys_configs+0x24>)
    1246:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1248:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    124c:	b662      	cpsie	i
	system_interrupt_enable_global ();				// System Interrupts
	configure_port_pins ();							// System PORTs
    124e:	4b05      	ldr	r3, [pc, #20]	; (1264 <startup_sys_configs+0x28>)
    1250:	4798      	blx	r3
	configure_system_tc ();							// System Clock
    1252:	4b05      	ldr	r3, [pc, #20]	; (1268 <startup_sys_configs+0x2c>)
    1254:	4798      	blx	r3
	system_tc_callbacks ();							// System Clock Callback
    1256:	4b05      	ldr	r3, [pc, #20]	; (126c <startup_sys_configs+0x30>)
    1258:	4798      	blx	r3
}
    125a:	bd10      	pop	{r4, pc}
    125c:	000009e1 	.word	0x000009e1
    1260:	20000000 	.word	0x20000000
    1264:	00000f15 	.word	0x00000f15
    1268:	00000f35 	.word	0x00000f35
    126c:	00000fa5 	.word	0x00000fa5

00001270 <main>:



int main (void)
{
    1270:	b510      	push	{r4, lr}
	startup_sys_configs ();
    1272:	4b07      	ldr	r3, [pc, #28]	; (1290 <main+0x20>)
    1274:	4798      	blx	r3
	
	while (true)
	{
		if(tick_flag_10ms)
    1276:	4b07      	ldr	r3, [pc, #28]	; (1294 <main+0x24>)
    1278:	781b      	ldrb	r3, [r3, #0]
    127a:	2b00      	cmp	r3, #0
    127c:	d0fb      	beq.n	1276 <main+0x6>
		{
			tick_flag_10ms = false;
    127e:	2200      	movs	r2, #0
    1280:	4b04      	ldr	r3, [pc, #16]	; (1294 <main+0x24>)
    1282:	701a      	strb	r2, [r3, #0]
			system_state();
    1284:	4b04      	ldr	r3, [pc, #16]	; (1298 <main+0x28>)
    1286:	4798      	blx	r3
			system_logic();
    1288:	4b04      	ldr	r3, [pc, #16]	; (129c <main+0x2c>)
    128a:	4798      	blx	r3
    128c:	e7f3      	b.n	1276 <main+0x6>
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	0000123d 	.word	0x0000123d
    1294:	20000070 	.word	0x20000070
    1298:	000011e1 	.word	0x000011e1
    129c:	000011ed 	.word	0x000011ed

000012a0 <__libc_init_array>:
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	2600      	movs	r6, #0
    12a4:	4d0c      	ldr	r5, [pc, #48]	; (12d8 <__libc_init_array+0x38>)
    12a6:	4c0d      	ldr	r4, [pc, #52]	; (12dc <__libc_init_array+0x3c>)
    12a8:	1b64      	subs	r4, r4, r5
    12aa:	10a4      	asrs	r4, r4, #2
    12ac:	42a6      	cmp	r6, r4
    12ae:	d109      	bne.n	12c4 <__libc_init_array+0x24>
    12b0:	2600      	movs	r6, #0
    12b2:	f000 f871 	bl	1398 <_init>
    12b6:	4d0a      	ldr	r5, [pc, #40]	; (12e0 <__libc_init_array+0x40>)
    12b8:	4c0a      	ldr	r4, [pc, #40]	; (12e4 <__libc_init_array+0x44>)
    12ba:	1b64      	subs	r4, r4, r5
    12bc:	10a4      	asrs	r4, r4, #2
    12be:	42a6      	cmp	r6, r4
    12c0:	d105      	bne.n	12ce <__libc_init_array+0x2e>
    12c2:	bd70      	pop	{r4, r5, r6, pc}
    12c4:	00b3      	lsls	r3, r6, #2
    12c6:	58eb      	ldr	r3, [r5, r3]
    12c8:	4798      	blx	r3
    12ca:	3601      	adds	r6, #1
    12cc:	e7ee      	b.n	12ac <__libc_init_array+0xc>
    12ce:	00b3      	lsls	r3, r6, #2
    12d0:	58eb      	ldr	r3, [r5, r3]
    12d2:	4798      	blx	r3
    12d4:	3601      	adds	r6, #1
    12d6:	e7f2      	b.n	12be <__libc_init_array+0x1e>
    12d8:	000013a4 	.word	0x000013a4
    12dc:	000013a4 	.word	0x000013a4
    12e0:	000013a4 	.word	0x000013a4
    12e4:	000013a8 	.word	0x000013a8

000012e8 <strcmp>:
    12e8:	7802      	ldrb	r2, [r0, #0]
    12ea:	780b      	ldrb	r3, [r1, #0]
    12ec:	2a00      	cmp	r2, #0
    12ee:	d003      	beq.n	12f8 <strcmp+0x10>
    12f0:	3001      	adds	r0, #1
    12f2:	3101      	adds	r1, #1
    12f4:	429a      	cmp	r2, r3
    12f6:	d0f7      	beq.n	12e8 <strcmp>
    12f8:	1ad0      	subs	r0, r2, r3
    12fa:	4770      	bx	lr
    12fc:	000004e0 	.word	0x000004e0
    1300:	0000054e 	.word	0x0000054e
    1304:	0000054e 	.word	0x0000054e
    1308:	000004c0 	.word	0x000004c0
    130c:	000004d2 	.word	0x000004d2
    1310:	000004f0 	.word	0x000004f0
    1314:	000004c4 	.word	0x000004c4
    1318:	00000500 	.word	0x00000500
    131c:	0000053c 	.word	0x0000053c
    1320:	00000570 	.word	0x00000570
    1324:	000005a4 	.word	0x000005a4
    1328:	000005a4 	.word	0x000005a4
    132c:	0000056c 	.word	0x0000056c
    1330:	00000594 	.word	0x00000594
    1334:	00000574 	.word	0x00000574
    1338:	00000590 	.word	0x00000590
    133c:	00000578 	.word	0x00000578
    1340:	0000057c 	.word	0x0000057c

00001344 <_tcc_intflag>:
    1344:	00000001 00000002 00000004 00000008     ................
    1354:	00001000 00002000 00004000 00008000     ..... ...@......
    1364:	00010000 00020000 00040000 00080000     ................
    1374:	42001800 42001c00 00001212 00800040     ...B...B....@...
    1384:	6e696c62 0000006b 6c6c6579 0000776f     blink...yellow..

00001394 <tc_interrupt_vectors.12195>:
    1394:	00000e0d                                ....

00001398 <_init>:
    1398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    139e:	bc08      	pop	{r3}
    13a0:	469e      	mov	lr, r3
    13a2:	4770      	bx	lr

000013a4 <__init_array_start>:
    13a4:	000000b5 	.word	0x000000b5

000013a8 <_fini>:
    13a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    13ae:	bc08      	pop	{r3}
    13b0:	469e      	mov	lr, r3
    13b2:	4770      	bx	lr

000013b4 <__fini_array_start>:
    13b4:	0000008d 	.word	0x0000008d
