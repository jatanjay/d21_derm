
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000038d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001c4  2000000c  000038e4  0002000c  2**2
                  ALLOC
  3 .stack        00000400  200001d0  00003aa8  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
  6 .debug_info   000339f7  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004434  00000000  00000000  00053a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005f8f  00000000  00000000  00057eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006d8  00000000  00000000  0005de49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b38  00000000  00000000  0005e521  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017e8a  00000000  00000000  0005f059  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e07a  00000000  00000000  00076ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007b248  00000000  00000000  00084f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012b0  00000000  00000000  001001a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 05 00 20 61 18 00 00 5f 18 00 00 5f 18 00 00     ... a..._..._...
	...
      2c:	5f 18 00 00 00 00 00 00 00 00 00 00 5f 18 00 00     _..........._...
      3c:	5f 18 00 00 5f 18 00 00 5f 18 00 00 5f 18 00 00     _..._..._..._...
      4c:	5f 18 00 00 5f 18 00 00 5f 18 00 00 5f 18 00 00     _..._..._..._...
      5c:	5f 18 00 00 5f 18 00 00 c9 09 00 00 d9 09 00 00     _..._...........
      6c:	e9 09 00 00 05 15 00 00 99 15 00 00 a9 15 00 00     ................
      7c:	5f 18 00 00 5f 18 00 00 5f 18 00 00 5f 18 00 00     _..._..._..._...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000000c 	.word	0x2000000c
      ac:	00000000 	.word	0x00000000
      b0:	000038d8 	.word	0x000038d8

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000010 	.word	0x20000010
      e0:	000038d8 	.word	0x000038d8
      e4:	000038d8 	.word	0x000038d8
      e8:	00000000 	.word	0x00000000

000000ec <set_color_channel>:


void set_color_channel(uint8_t channel, bool enable) {
	// Disable all channels first
	for (int i = 0; i < 4; i++) {
		config_tcc.pins.enable_wave_out_pin[i] = false;
      ec:	4a11      	ldr	r2, [pc, #68]	; (134 <set_color_channel+0x48>)
void set_color_channel(uint8_t channel, bool enable) {
      ee:	b510      	push	{r4, lr}
		config_tcc.pins.enable_wave_out_pin[i] = false;
      f0:	0014      	movs	r4, r2
      f2:	2300      	movs	r3, #0
      f4:	3498      	adds	r4, #152	; 0x98
      f6:	7023      	strb	r3, [r4, #0]
      f8:	0014      	movs	r4, r2
      fa:	3499      	adds	r4, #153	; 0x99
      fc:	7023      	strb	r3, [r4, #0]
      fe:	0014      	movs	r4, r2
     100:	349a      	adds	r4, #154	; 0x9a
     102:	7023      	strb	r3, [r4, #0]
     104:	0014      	movs	r4, r2
     106:	349b      	adds	r4, #155	; 0x9b
     108:	7023      	strb	r3, [r4, #0]
	}

	// Enable only the specified channel
	if (enable) {
     10a:	4299      	cmp	r1, r3
     10c:	d003      	beq.n	116 <set_color_channel+0x2a>
		config_tcc.pins.enable_wave_out_pin[channel] = true;
     10e:	1810      	adds	r0, r2, r0
     110:	3098      	adds	r0, #152	; 0x98
     112:	3301      	adds	r3, #1
     114:	7003      	strb	r3, [r0, #0]
	}

	// Reinitialize and enable TCC
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     116:	4c08      	ldr	r4, [pc, #32]	; (138 <set_color_channel+0x4c>)
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <set_color_channel+0x50>)
     11a:	4909      	ldr	r1, [pc, #36]	; (140 <set_color_channel+0x54>)
     11c:	0020      	movs	r0, r4
     11e:	4798      	blx	r3
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     120:	2302      	movs	r3, #2
     122:	6822      	ldr	r2, [r4, #0]
     124:	6891      	ldr	r1, [r2, #8]
     126:	4219      	tst	r1, r3
     128:	d1fc      	bne.n	124 <set_color_channel+0x38>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     12a:	6811      	ldr	r1, [r2, #0]
     12c:	430b      	orrs	r3, r1
     12e:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance);
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	200000b4 	.word	0x200000b4
     138:	20000074 	.word	0x20000074
     13c:	00001201 	.word	0x00001201
     140:	42001400 	.word	0x42001400

00000144 <turn_off_all>:
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     144:	2102      	movs	r1, #2
     146:	4b06      	ldr	r3, [pc, #24]	; (160 <turn_off_all+0x1c>)
     148:	681b      	ldr	r3, [r3, #0]
     14a:	689a      	ldr	r2, [r3, #8]
     14c:	420a      	tst	r2, r1
     14e:	d1fc      	bne.n	14a <turn_off_all+0x6>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tcc_module->INTENCLR.reg = TCC_INTENCLR_MASK;
     150:	4a04      	ldr	r2, [pc, #16]	; (164 <turn_off_all+0x20>)
     152:	625a      	str	r2, [r3, #36]	; 0x24
	/* Clear interrupt flag */
	tcc_module->INTFLAG.reg = TCC_INTFLAG_MASK;
     154:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Disable the TCC module */
	tcc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     156:	681a      	ldr	r2, [r3, #0]
     158:	438a      	bics	r2, r1
     15a:	601a      	str	r2, [r3, #0]



void turn_off_all(void) {
	tcc_disable(&tcc_instance);
}
     15c:	4770      	bx	lr
     15e:	46c0      	nop			; (mov r8, r8)
     160:	20000074 	.word	0x20000074
     164:	000ff80f 	.word	0x000ff80f

00000168 <set_color>:


void set_color(int color) {
     168:	b510      	push	{r4, lr}
	turn_off_all();  
     16a:	4b0f      	ldr	r3, [pc, #60]	; (1a8 <set_color+0x40>)
void set_color(int color) {
     16c:	0004      	movs	r4, r0
	turn_off_all();  
     16e:	4798      	blx	r3

	switch (color) {
     170:	2c06      	cmp	r4, #6
     172:	d80a      	bhi.n	18a <set_color+0x22>
     174:	0020      	movs	r0, r4
		case 5:  // Purple (Red + Blue)
		set_color_channel(RED_CHANNEL, true);
		set_color_channel(BLUE_CHANNEL, true);
		break;
		case 6:  // Cyan (Green + Blue)
		set_color_channel(GREEN_CHANNEL, true);
     176:	2101      	movs	r1, #1
     178:	4c0c      	ldr	r4, [pc, #48]	; (1ac <set_color+0x44>)
	switch (color) {
     17a:	f001 fe1f 	bl	1dbc <__gnu_thumb1_case_uqi>
     17e:	0c04      	.short	0x0c04
     180:	0e090711 	.word	0x0e090711
     184:	13          	.byte	0x13
     185:	00          	.byte	0x00
		set_color_channel(RED_CHANNEL, true);
     186:	2000      	movs	r0, #0
		set_color_channel(BLUE_CHANNEL, true);
     188:	47a0      	blx	r4
		break;
	}
}
     18a:	bd10      	pop	{r4, pc}
		set_color_channel(WHITE_CHANNEL, true);
     18c:	2005      	movs	r0, #5
     18e:	e7fb      	b.n	188 <set_color+0x20>
		set_color_channel(RED_CHANNEL, true);
     190:	2000      	movs	r0, #0
     192:	47a0      	blx	r4
		set_color_channel(GREEN_CHANNEL, true);
     194:	2101      	movs	r1, #1
     196:	0008      	movs	r0, r1
     198:	e7f6      	b.n	188 <set_color+0x20>
		set_color_channel(RED_CHANNEL, true);
     19a:	2000      	movs	r0, #0
		set_color_channel(GREEN_CHANNEL, true);
     19c:	47a0      	blx	r4
		set_color_channel(BLUE_CHANNEL, true);
     19e:	2101      	movs	r1, #1
     1a0:	2002      	movs	r0, #2
     1a2:	e7f1      	b.n	188 <set_color+0x20>
		set_color_channel(GREEN_CHANNEL, true);
     1a4:	0008      	movs	r0, r1
     1a6:	e7f9      	b.n	19c <set_color+0x34>
     1a8:	00000145 	.word	0x00000145
     1ac:	000000ed 	.word	0x000000ed

000001b0 <configure_pwm_tcc>:

void configure_pwm_tcc(void)
{
     1b0:	b570      	push	{r4, r5, r6, lr}
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     1b2:	4c1a      	ldr	r4, [pc, #104]	; (21c <configure_pwm_tcc+0x6c>)
     1b4:	491a      	ldr	r1, [pc, #104]	; (220 <configure_pwm_tcc+0x70>)
     1b6:	0020      	movs	r0, r4
     1b8:	4b1a      	ldr	r3, [pc, #104]	; (224 <configure_pwm_tcc+0x74>)
     1ba:	4798      	blx	r3
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_DOUBLE_SLOPE_TOP;
     1bc:	2307      	movs	r3, #7
     1be:	7623      	strb	r3, [r4, #24]
	
	config_tcc.compare.match[0]								= CONF_DEFAULT_MATCH_COMPARE;
	config_tcc.compare.match[1]								= CONF_DEFAULT_MATCH_COMPARE;
     1c0:	4b19      	ldr	r3, [pc, #100]	; (228 <configure_pwm_tcc+0x78>)
	config_tcc.compare.wave_polarity[WHITE_CHANNEL]			= 1;
	
	
	config_tcc.pins.wave_out_pin[RED_CHANNEL]			= PIN_PA04F_TCC0_WO0;		// RED
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]		= MUX_PA04F_TCC0_WO0;
	config_tcc.compare.match[0]   = 0x0FF;
     1c2:	21ff      	movs	r1, #255	; 0xff
	config_tcc.compare.match[1]								= CONF_DEFAULT_MATCH_COMPARE;
     1c4:	6223      	str	r3, [r4, #32]
	config_tcc.counter.period                               = CONF_DEFAULT_PERIOD;
     1c6:	4b19      	ldr	r3, [pc, #100]	; (22c <configure_pwm_tcc+0x7c>)
	config_tcc.pins.wave_out_pin[RED_CHANNEL]			= PIN_PA04F_TCC0_WO0;		// RED
     1c8:	2204      	movs	r2, #4
	config_tcc.counter.period                               = CONF_DEFAULT_PERIOD;
     1ca:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_polarity[RED_CHANNEL]			= 1;
     1cc:	2301      	movs	r3, #1
	config_tcc.compare.match[0]   = 0x0FF;
     1ce:	61e1      	str	r1, [r4, #28]

	config_tcc.pins.wave_out_pin[GREEN_CHANNEL]			= PIN_PA05F_TCC0_WO1;		// GREEN
	config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL]		= MUX_PA05F_TCC0_WO1;
	config_tcc.compare.match[1]   = 0x1FF;

	config_tcc.pins.wave_out_pin[BLUE_CHANNEL]			= PIN_PA08E_TCC0_WO2;		// BLUE
     1d0:	39f7      	subs	r1, #247	; 0xf7
     1d2:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL]		= MUX_PA08E_TCC0_WO2;
     1d4:	18a1      	adds	r1, r4, r2
     1d6:	67ca      	str	r2, [r1, #124]	; 0x7c
	config_tcc.compare.wave_polarity[RED_CHANNEL]			= 1;
     1d8:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_polarity[GREEN_CHANNEL]			= 1;
     1da:	7563      	strb	r3, [r4, #21]
	config_tcc.compare.wave_polarity[BLUE_CHANNEL]			= 1;
     1dc:	75a3      	strb	r3, [r4, #22]
	config_tcc.compare.wave_polarity[WHITE_CHANNEL]			= 1;
     1de:	7663      	strb	r3, [r4, #25]
	config_tcc.pins.wave_out_pin[RED_CHANNEL]			= PIN_PA04F_TCC0_WO0;		// RED
     1e0:	65a2      	str	r2, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]		= MUX_PA04F_TCC0_WO0;
     1e2:	189b      	adds	r3, r3, r2
	config_tcc.compare.match[2]   = 0x2FF;
     1e4:	4a12      	ldr	r2, [pc, #72]	; (230 <configure_pwm_tcc+0x80>)

	config_tcc.pins.wave_out_pin[WHITE_CHANNEL]			= PIN_PA09F_TCC0_WO5;		// WHITE
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]		= MUX_PA09F_TCC0_WO5;
	config_tcc.compare.match[3]   = 0X200;
	
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     1e6:	4d13      	ldr	r5, [pc, #76]	; (234 <configure_pwm_tcc+0x84>)
	config_tcc.compare.match[2]   = 0x2FF;
     1e8:	6262      	str	r2, [r4, #36]	; 0x24
	config_tcc.pins.wave_out_pin[WHITE_CHANNEL]			= PIN_PA09F_TCC0_WO5;		// WHITE
     1ea:	2209      	movs	r2, #9
     1ec:	66e2      	str	r2, [r4, #108]	; 0x6c
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]		= MUX_PA09F_TCC0_WO5;
     1ee:	0022      	movs	r2, r4
     1f0:	328c      	adds	r2, #140	; 0x8c
     1f2:	6013      	str	r3, [r2, #0]
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]		= MUX_PA04F_TCC0_WO0;
     1f4:	67a3      	str	r3, [r4, #120]	; 0x78
	config_tcc.pins.wave_out_pin[GREEN_CHANNEL]			= PIN_PA05F_TCC0_WO1;		// GREEN
     1f6:	65e3      	str	r3, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL]		= MUX_PA05F_TCC0_WO1;
     1f8:	67e3      	str	r3, [r4, #124]	; 0x7c
	config_tcc.compare.match[3]   = 0X200;
     1fa:	33fc      	adds	r3, #252	; 0xfc
     1fc:	33ff      	adds	r3, #255	; 0xff
     1fe:	62a3      	str	r3, [r4, #40]	; 0x28
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     200:	0022      	movs	r2, r4
     202:	4b0d      	ldr	r3, [pc, #52]	; (238 <configure_pwm_tcc+0x88>)
     204:	4906      	ldr	r1, [pc, #24]	; (220 <configure_pwm_tcc+0x70>)
     206:	0028      	movs	r0, r5
     208:	4798      	blx	r3
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     20a:	2302      	movs	r3, #2
     20c:	682a      	ldr	r2, [r5, #0]
     20e:	6891      	ldr	r1, [r2, #8]
     210:	4219      	tst	r1, r3
     212:	d1fc      	bne.n	20e <configure_pwm_tcc+0x5e>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     214:	6811      	ldr	r1, [r2, #0]
     216:	430b      	orrs	r3, r1
     218:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance);
	
}
     21a:	bd70      	pop	{r4, r5, r6, pc}
     21c:	200000b4 	.word	0x200000b4
     220:	42001400 	.word	0x42001400
     224:	0000111d 	.word	0x0000111d
     228:	000001ff 	.word	0x000001ff
     22c:	000003ff 	.word	0x000003ff
     230:	000002ff 	.word	0x000002ff
     234:	20000074 	.word	0x20000074
     238:	00001201 	.word	0x00001201

0000023c <set_red>:
5	p	(r + b)
6	c	(b + g)
*/
	

void set_red(void){
     23c:	b510      	push	{r4, lr}
	set_color(0);
     23e:	2000      	movs	r0, #0
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <set_red+0xc>)
     242:	4798      	blx	r3
}
     244:	bd10      	pop	{r4, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	00000169 	.word	0x00000169

0000024c <set_green>:

void set_green(void){
     24c:	b510      	push	{r4, lr}
	set_color(1);
     24e:	2001      	movs	r0, #1
     250:	4b01      	ldr	r3, [pc, #4]	; (258 <set_green+0xc>)
     252:	4798      	blx	r3
	
}
     254:	bd10      	pop	{r4, pc}
     256:	46c0      	nop			; (mov r8, r8)
     258:	00000169 	.word	0x00000169

0000025c <set_blue>:

void set_blue(void){
     25c:	b510      	push	{r4, lr}
	set_color(2);
     25e:	2002      	movs	r0, #2
     260:	4b01      	ldr	r3, [pc, #4]	; (268 <set_blue+0xc>)
     262:	4798      	blx	r3
}
     264:	bd10      	pop	{r4, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	00000169 	.word	0x00000169

0000026c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     26c:	4b09      	ldr	r3, [pc, #36]	; (294 <cpu_irq_enter_critical+0x28>)
     26e:	6819      	ldr	r1, [r3, #0]
     270:	2900      	cmp	r1, #0
     272:	d10b      	bne.n	28c <cpu_irq_enter_critical+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     274:	f3ef 8010 	mrs	r0, PRIMASK
     278:	4a07      	ldr	r2, [pc, #28]	; (298 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     27a:	2800      	cmp	r0, #0
     27c:	d105      	bne.n	28a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     27e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     280:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     284:	4905      	ldr	r1, [pc, #20]	; (29c <cpu_irq_enter_critical+0x30>)
     286:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     288:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     28a:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     28c:	681a      	ldr	r2, [r3, #0]
     28e:	3201      	adds	r2, #1
     290:	601a      	str	r2, [r3, #0]
}
     292:	4770      	bx	lr
     294:	20000028 	.word	0x20000028
     298:	2000002c 	.word	0x2000002c
     29c:	20000000 	.word	0x20000000

000002a0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     2a0:	4b08      	ldr	r3, [pc, #32]	; (2c4 <cpu_irq_leave_critical+0x24>)
     2a2:	681a      	ldr	r2, [r3, #0]
     2a4:	3a01      	subs	r2, #1
     2a6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     2a8:	681b      	ldr	r3, [r3, #0]
     2aa:	2b00      	cmp	r3, #0
     2ac:	d109      	bne.n	2c2 <cpu_irq_leave_critical+0x22>
     2ae:	4b06      	ldr	r3, [pc, #24]	; (2c8 <cpu_irq_leave_critical+0x28>)
     2b0:	781b      	ldrb	r3, [r3, #0]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d005      	beq.n	2c2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     2b6:	2201      	movs	r2, #1
     2b8:	4b04      	ldr	r3, [pc, #16]	; (2cc <cpu_irq_leave_critical+0x2c>)
     2ba:	701a      	strb	r2, [r3, #0]
     2bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     2c0:	b662      	cpsie	i
	}
}
     2c2:	4770      	bx	lr
     2c4:	20000028 	.word	0x20000028
     2c8:	2000002c 	.word	0x2000002c
     2cc:	20000000 	.word	0x20000000

000002d0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2d2:	2501      	movs	r5, #1
	config->powersave  = false;
     2d4:	2700      	movs	r7, #0
	config->input_pull = PORT_PIN_PULL_UP;
     2d6:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2d8:	4e08      	ldr	r6, [pc, #32]	; (2fc <system_board_init+0x2c>)
     2da:	0021      	movs	r1, r4
     2dc:	2010      	movs	r0, #16
     2de:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     2e0:	70a7      	strb	r7, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2e2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2e4:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2e6:	2280      	movs	r2, #128	; 0x80
     2e8:	4b05      	ldr	r3, [pc, #20]	; (300 <system_board_init+0x30>)
     2ea:	0252      	lsls	r2, r2, #9
     2ec:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2ee:	0021      	movs	r1, r4
     2f0:	200e      	movs	r0, #14
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2f2:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2f4:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2f6:	47b0      	blx	r6
}
     2f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00000305 	.word	0x00000305
     300:	41004400 	.word	0x41004400

00000304 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     304:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     306:	2280      	movs	r2, #128	; 0x80
     308:	ab01      	add	r3, sp, #4
     30a:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     30c:	780a      	ldrb	r2, [r1, #0]
     30e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     310:	784a      	ldrb	r2, [r1, #1]
     312:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     314:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     316:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     318:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     31a:	4b01      	ldr	r3, [pc, #4]	; (320 <port_pin_set_config+0x1c>)
     31c:	4798      	blx	r3
}
     31e:	bd07      	pop	{r0, r1, r2, pc}
     320:	000010bd 	.word	0x000010bd

00000324 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     324:	b5f0      	push	{r4, r5, r6, r7, lr}
     326:	0007      	movs	r7, r0
     328:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     32a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     32c:	0008      	movs	r0, r1
     32e:	4b9b      	ldr	r3, [pc, #620]	; (59c <STACK_SIZE+0x19c>)
{
     330:	0014      	movs	r4, r2
     332:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     334:	4798      	blx	r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     336:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     338:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     33a:	409d      	lsls	r5, r3
     33c:	002b      	movs	r3, r5
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     33e:	4a98      	ldr	r2, [pc, #608]	; (5a0 <STACK_SIZE+0x1a0>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     340:	300e      	adds	r0, #14
     342:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     344:	b2c5      	uxtb	r5, r0
     346:	430b      	orrs	r3, r1
     348:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     34a:	7b23      	ldrb	r3, [r4, #12]
     34c:	aa08      	add	r2, sp, #32
     34e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     350:	0011      	movs	r1, r2
     352:	0028      	movs	r0, r5
     354:	4b93      	ldr	r3, [pc, #588]	; (5a4 <STACK_SIZE+0x1a4>)
     356:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     358:	0028      	movs	r0, r5
     35a:	4b93      	ldr	r3, [pc, #588]	; (5a8 <STACK_SIZE+0x1a8>)
     35c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     35e:	4b93      	ldr	r3, [pc, #588]	; (5ac <STACK_SIZE+0x1ac>)
     360:	7b20      	ldrb	r0, [r4, #12]
     362:	2100      	movs	r1, #0
     364:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     366:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     368:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     36a:	079b      	lsls	r3, r3, #30
     36c:	d500      	bpl.n	370 <i2c_master_init+0x4c>
     36e:	e109      	b.n	584 <STACK_SIZE+0x184>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     370:	2301      	movs	r3, #1
     372:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     374:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     376:	401d      	ands	r5, r3
     378:	d000      	beq.n	37c <i2c_master_init+0x58>
     37a:	e103      	b.n	584 <STACK_SIZE+0x184>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     37c:	4b87      	ldr	r3, [pc, #540]	; (59c <STACK_SIZE+0x19c>)
     37e:	6838      	ldr	r0, [r7, #0]
     380:	4798      	blx	r3
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     382:	498b      	ldr	r1, [pc, #556]	; (5b0 <STACK_SIZE+0x1b0>)
     384:	4b8b      	ldr	r3, [pc, #556]	; (5b4 <STACK_SIZE+0x1b4>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     386:	9004      	str	r0, [sp, #16]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     388:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     38a:	9b04      	ldr	r3, [sp, #16]

	/* Initialize values in module. */
	module->registered_callback = 0;
     38c:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     38e:	009a      	lsls	r2, r3, #2
     390:	4b89      	ldr	r3, [pc, #548]	; (5b8 <STACK_SIZE+0x1b8>)
	module->enabled_callback = 0;
     392:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     394:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     396:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     398:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     39a:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     39c:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     39e:	2314      	movs	r3, #20
	module->buffer = NULL;
     3a0:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     3a2:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3a4:	683b      	ldr	r3, [r7, #0]
     3a6:	ae09      	add	r6, sp, #36	; 0x24
     3a8:	9304      	str	r3, [sp, #16]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     3aa:	0018      	movs	r0, r3
     3ac:	4b7b      	ldr	r3, [pc, #492]	; (59c <STACK_SIZE+0x19c>)
     3ae:	4798      	blx	r3
     3b0:	2380      	movs	r3, #128	; 0x80
     3b2:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
     3b4:	69e0      	ldr	r0, [r4, #28]
     3b6:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3b8:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3ba:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     3bc:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3be:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     3c0:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     3c2:	2800      	cmp	r0, #0
     3c4:	d103      	bne.n	3ce <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3c6:	0001      	movs	r1, r0
     3c8:	4b7c      	ldr	r3, [pc, #496]	; (5bc <STACK_SIZE+0x1bc>)
     3ca:	9804      	ldr	r0, [sp, #16]
     3cc:	4798      	blx	r3
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3ce:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     3d0:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     3d2:	0c00      	lsrs	r0, r0, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3d4:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     3d6:	b2c0      	uxtb	r0, r0
     3d8:	0031      	movs	r1, r6
     3da:	4b79      	ldr	r3, [pc, #484]	; (5c0 <STACK_SIZE+0x1c0>)
     3dc:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     3de:	2d00      	cmp	r5, #0
     3e0:	d104      	bne.n	3ec <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3e2:	2101      	movs	r1, #1
     3e4:	9804      	ldr	r0, [sp, #16]
     3e6:	4b75      	ldr	r3, [pc, #468]	; (5bc <STACK_SIZE+0x1bc>)
     3e8:	4798      	blx	r3
     3ea:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3ec:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     3ee:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     3f0:	0c2d      	lsrs	r5, r5, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     3f2:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     3f4:	b2e8      	uxtb	r0, r5
     3f6:	4b72      	ldr	r3, [pc, #456]	; (5c0 <STACK_SIZE+0x1c0>)
     3f8:	0031      	movs	r1, r6
     3fa:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     3fc:	8aa3      	ldrh	r3, [r4, #20]
     3fe:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     400:	8ae3      	ldrh	r3, [r4, #22]
     402:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     404:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     406:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     408:	2a00      	cmp	r2, #0
     40a:	d106      	bne.n	41a <STACK_SIZE+0x1a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     40c:	4b6d      	ldr	r3, [pc, #436]	; (5c4 <STACK_SIZE+0x1c4>)
     40e:	3202      	adds	r2, #2
     410:	789b      	ldrb	r3, [r3, #2]
     412:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     414:	1e5f      	subs	r7, r3, #1
     416:	41bb      	sbcs	r3, r7
     418:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     41a:	68a2      	ldr	r2, [r4, #8]
     41c:	6927      	ldr	r7, [r4, #16]
     41e:	4317      	orrs	r7, r2
     420:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     422:	1d63      	adds	r3, r4, #5
     424:	7fdb      	ldrb	r3, [r3, #31]
     426:	2b00      	cmp	r3, #0
     428:	d002      	beq.n	430 <STACK_SIZE+0x30>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     42a:	2380      	movs	r3, #128	; 0x80
     42c:	05db      	lsls	r3, r3, #23
     42e:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     432:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     434:	0023      	movs	r3, r4
     436:	332c      	adds	r3, #44	; 0x2c
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2b00      	cmp	r3, #0
     43c:	d103      	bne.n	446 <STACK_SIZE+0x46>
     43e:	2380      	movs	r3, #128	; 0x80
     440:	049b      	lsls	r3, r3, #18
     442:	429a      	cmp	r2, r3
     444:	d102      	bne.n	44c <STACK_SIZE+0x4c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     446:	2380      	movs	r3, #128	; 0x80
     448:	051b      	lsls	r3, r3, #20
     44a:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     44c:	0023      	movs	r3, r4
     44e:	332d      	adds	r3, #45	; 0x2d
     450:	781b      	ldrb	r3, [r3, #0]
     452:	2b00      	cmp	r3, #0
     454:	d002      	beq.n	45c <STACK_SIZE+0x5c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     456:	2380      	movs	r3, #128	; 0x80
     458:	041b      	lsls	r3, r3, #16
     45a:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     45c:	0023      	movs	r3, r4
     45e:	332e      	adds	r3, #46	; 0x2e
     460:	781b      	ldrb	r3, [r3, #0]
     462:	2b00      	cmp	r3, #0
     464:	d002      	beq.n	46c <STACK_SIZE+0x6c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     466:	2380      	movs	r3, #128	; 0x80
     468:	03db      	lsls	r3, r3, #15
     46a:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     46c:	9b04      	ldr	r3, [sp, #16]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     46e:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     470:	681b      	ldr	r3, [r3, #0]
	uint32_t fscl        = 1000 * config->baud_rate;
     472:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     474:	431f      	orrs	r7, r3
     476:	9b04      	ldr	r3, [sp, #16]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     478:	9a04      	ldr	r2, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     47a:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     47c:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     47e:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     480:	005b      	lsls	r3, r3, #1
     482:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     484:	b2c0      	uxtb	r0, r0
     486:	4b50      	ldr	r3, [pc, #320]	; (5c8 <STACK_SIZE+0x1c8>)
     488:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
     48a:	6823      	ldr	r3, [r4, #0]
     48c:	00ad      	lsls	r5, r5, #2
     48e:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     490:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     492:	0007      	movs	r7, r0
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     494:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     496:	4b4d      	ldr	r3, [pc, #308]	; (5cc <STACK_SIZE+0x1cc>)
     498:	4798      	blx	r3
     49a:	4b4c      	ldr	r3, [pc, #304]	; (5cc <STACK_SIZE+0x1cc>)
     49c:	9000      	str	r0, [sp, #0]
     49e:	9101      	str	r1, [sp, #4]
     4a0:	0068      	lsls	r0, r5, #1
     4a2:	4798      	blx	r3
     4a4:	9002      	str	r0, [sp, #8]
     4a6:	9103      	str	r1, [sp, #12]
     4a8:	4b48      	ldr	r3, [pc, #288]	; (5cc <STACK_SIZE+0x1cc>)
     4aa:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     4ac:	4798      	blx	r3
     4ae:	4e48      	ldr	r6, [pc, #288]	; (5d0 <STACK_SIZE+0x1d0>)
     4b0:	9006      	str	r0, [sp, #24]
     4b2:	9107      	str	r1, [sp, #28]
     4b4:	9800      	ldr	r0, [sp, #0]
     4b6:	9901      	ldr	r1, [sp, #4]
     4b8:	4a46      	ldr	r2, [pc, #280]	; (5d4 <STACK_SIZE+0x1d4>)
     4ba:	4b47      	ldr	r3, [pc, #284]	; (5d8 <STACK_SIZE+0x1d8>)
     4bc:	47b0      	blx	r6
     4be:	0002      	movs	r2, r0
     4c0:	000b      	movs	r3, r1
     4c2:	9806      	ldr	r0, [sp, #24]
     4c4:	9907      	ldr	r1, [sp, #28]
     4c6:	47b0      	blx	r6
     4c8:	4e44      	ldr	r6, [pc, #272]	; (5dc <STACK_SIZE+0x1dc>)
     4ca:	2200      	movs	r2, #0
     4cc:	4b44      	ldr	r3, [pc, #272]	; (5e0 <STACK_SIZE+0x1e0>)
     4ce:	47b0      	blx	r6
     4d0:	4b3e      	ldr	r3, [pc, #248]	; (5cc <STACK_SIZE+0x1cc>)
     4d2:	9006      	str	r0, [sp, #24]
     4d4:	9107      	str	r1, [sp, #28]
     4d6:	0028      	movs	r0, r5
     4d8:	4798      	blx	r3
     4da:	4d3d      	ldr	r5, [pc, #244]	; (5d0 <STACK_SIZE+0x1d0>)
     4dc:	0002      	movs	r2, r0
     4de:	000b      	movs	r3, r1
     4e0:	9806      	ldr	r0, [sp, #24]
     4e2:	9907      	ldr	r1, [sp, #28]
     4e4:	47a8      	blx	r5
     4e6:	4d3f      	ldr	r5, [pc, #252]	; (5e4 <STACK_SIZE+0x1e4>)
     4e8:	0002      	movs	r2, r0
     4ea:	000b      	movs	r3, r1
     4ec:	9800      	ldr	r0, [sp, #0]
     4ee:	9901      	ldr	r1, [sp, #4]
     4f0:	47a8      	blx	r5
     4f2:	9a02      	ldr	r2, [sp, #8]
     4f4:	9b03      	ldr	r3, [sp, #12]
     4f6:	47b0      	blx	r6
     4f8:	2200      	movs	r2, #0
     4fa:	4b3b      	ldr	r3, [pc, #236]	; (5e8 <STACK_SIZE+0x1e8>)
     4fc:	47a8      	blx	r5
     4fe:	9a02      	ldr	r2, [sp, #8]
     500:	9b03      	ldr	r3, [sp, #12]
     502:	4e3a      	ldr	r6, [pc, #232]	; (5ec <STACK_SIZE+0x1ec>)
     504:	47b0      	blx	r6
     506:	4b3a      	ldr	r3, [pc, #232]	; (5f0 <STACK_SIZE+0x1f0>)
     508:	4798      	blx	r3
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     50a:	2380      	movs	r3, #128	; 0x80
	tmp_baud = (int32_t)(div_ceil(
     50c:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     50e:	68a2      	ldr	r2, [r4, #8]
     510:	049b      	lsls	r3, r3, #18
     512:	429a      	cmp	r2, r3
     514:	d13e      	bne.n	594 <STACK_SIZE+0x194>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     516:	23fa      	movs	r3, #250	; 0xfa
     518:	9c05      	ldr	r4, [sp, #20]
     51a:	009b      	lsls	r3, r3, #2
     51c:	435c      	muls	r4, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     51e:	9a00      	ldr	r2, [sp, #0]
     520:	9b01      	ldr	r3, [sp, #4]
     522:	4e2e      	ldr	r6, [pc, #184]	; (5dc <STACK_SIZE+0x1dc>)
     524:	0010      	movs	r0, r2
     526:	0019      	movs	r1, r3
     528:	47b0      	blx	r6
     52a:	4b28      	ldr	r3, [pc, #160]	; (5cc <STACK_SIZE+0x1cc>)
     52c:	9000      	str	r0, [sp, #0]
     52e:	9101      	str	r1, [sp, #4]
     530:	0020      	movs	r0, r4
     532:	4798      	blx	r3
     534:	2200      	movs	r2, #0
     536:	4b2f      	ldr	r3, [pc, #188]	; (5f4 <STACK_SIZE+0x1f4>)
     538:	4e25      	ldr	r6, [pc, #148]	; (5d0 <STACK_SIZE+0x1d0>)
     53a:	47b0      	blx	r6
     53c:	4e2b      	ldr	r6, [pc, #172]	; (5ec <STACK_SIZE+0x1ec>)
     53e:	0002      	movs	r2, r0
     540:	000b      	movs	r3, r1
     542:	9800      	ldr	r0, [sp, #0]
     544:	9901      	ldr	r1, [sp, #4]
     546:	47b0      	blx	r6
     548:	2200      	movs	r2, #0
     54a:	4b27      	ldr	r3, [pc, #156]	; (5e8 <STACK_SIZE+0x1e8>)
     54c:	47a8      	blx	r5
     54e:	4b28      	ldr	r3, [pc, #160]	; (5f0 <STACK_SIZE+0x1f0>)
     550:	4798      	blx	r3
     552:	4b29      	ldr	r3, [pc, #164]	; (5f8 <STACK_SIZE+0x1f8>)
     554:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     556:	d017      	beq.n	588 <STACK_SIZE+0x188>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     558:	0021      	movs	r1, r4
     55a:	0038      	movs	r0, r7
     55c:	4798      	blx	r3
     55e:	3802      	subs	r0, #2
     560:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     562:	9a02      	ldr	r2, [sp, #8]
     564:	2040      	movs	r0, #64	; 0x40
     566:	2aff      	cmp	r2, #255	; 0xff
     568:	d80c      	bhi.n	584 <STACK_SIZE+0x184>
     56a:	2bff      	cmp	r3, #255	; 0xff
     56c:	d80a      	bhi.n	584 <STACK_SIZE+0x184>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     56e:	20ff      	movs	r0, #255	; 0xff
     570:	0015      	movs	r5, r2
     572:	0400      	lsls	r0, r0, #16
     574:	041b      	lsls	r3, r3, #16
     576:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     578:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     57a:	0636      	lsls	r6, r6, #24
     57c:	4335      	orrs	r5, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     57e:	9a04      	ldr	r2, [sp, #16]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     580:	432b      	orrs	r3, r5
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     582:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     584:	b00b      	add	sp, #44	; 0x2c
     586:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     588:	0061      	lsls	r1, r4, #1
     58a:	1e48      	subs	r0, r1, #1
     58c:	19c0      	adds	r0, r0, r7
     58e:	4798      	blx	r3
     590:	1e43      	subs	r3, r0, #1
     592:	e7e6      	b.n	562 <STACK_SIZE+0x162>
	int32_t tmp_baudlow_hs = 0;
     594:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     596:	0033      	movs	r3, r6
     598:	e7e3      	b.n	562 <STACK_SIZE+0x162>
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	00000939 	.word	0x00000939
     5a0:	40000400 	.word	0x40000400
     5a4:	00000fe9 	.word	0x00000fe9
     5a8:	00000f61 	.word	0x00000f61
     5ac:	00000841 	.word	0x00000841
     5b0:	000006b5 	.word	0x000006b5
     5b4:	00000975 	.word	0x00000975
     5b8:	20000158 	.word	0x20000158
     5bc:	00000885 	.word	0x00000885
     5c0:	000010bd 	.word	0x000010bd
     5c4:	41002000 	.word	0x41002000
     5c8:	00001005 	.word	0x00001005
     5cc:	00003705 	.word	0x00003705
     5d0:	00002b71 	.word	0x00002b71
     5d4:	e826d695 	.word	0xe826d695
     5d8:	3e112e0b 	.word	0x3e112e0b
     5dc:	00001ee9 	.word	0x00001ee9
     5e0:	40240000 	.word	0x40240000
     5e4:	00003071 	.word	0x00003071
     5e8:	3ff00000 	.word	0x3ff00000
     5ec:	00002509 	.word	0x00002509
     5f0:	0000369d 	.word	0x0000369d
     5f4:	40080000 	.word	0x40080000
     5f8:	00001dd1 	.word	0x00001dd1

000005fc <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5fc:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     5fe:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     600:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     602:	421a      	tst	r2, r3
     604:	d1fc      	bne.n	600 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     606:	4770      	bx	lr

00000608 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     60a:	6805      	ldr	r5, [r0, #0]
{
     60c:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     60e:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     610:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     612:	8b83      	ldrh	r3, [r0, #28]
     614:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
     616:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     618:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     61a:	3b01      	subs	r3, #1
     61c:	b29b      	uxth	r3, r3
     61e:	8383      	strh	r3, [r0, #28]
     620:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
     622:	0112      	lsls	r2, r2, #4
     624:	d50a      	bpl.n	63c <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
     626:	2b00      	cmp	r3, #0
     628:	d00d      	beq.n	646 <_i2c_master_read+0x3e>
     62a:	8b83      	ldrh	r3, [r0, #28]
     62c:	2b01      	cmp	r3, #1
     62e:	d10a      	bne.n	646 <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     630:	2380      	movs	r3, #128	; 0x80
     632:	686a      	ldr	r2, [r5, #4]
     634:	02db      	lsls	r3, r3, #11
     636:	4313      	orrs	r3, r2
     638:	606b      	str	r3, [r5, #4]
     63a:	e004      	b.n	646 <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
     63c:	2b00      	cmp	r3, #0
     63e:	d002      	beq.n	646 <_i2c_master_read+0x3e>
     640:	8b83      	ldrh	r3, [r0, #28]
     642:	2b00      	cmp	r3, #0
     644:	d0f4      	beq.n	630 <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
     646:	8ba3      	ldrh	r3, [r4, #28]
     648:	4f0a      	ldr	r7, [pc, #40]	; (674 <_i2c_master_read+0x6c>)
     64a:	2b00      	cmp	r3, #0
     64c:	d109      	bne.n	662 <_i2c_master_read+0x5a>
		if (module->send_stop) {
     64e:	7aa3      	ldrb	r3, [r4, #10]
     650:	2b00      	cmp	r3, #0
     652:	d006      	beq.n	662 <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     654:	0020      	movs	r0, r4
     656:	47b8      	blx	r7
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     658:	23c0      	movs	r3, #192	; 0xc0
     65a:	686a      	ldr	r2, [r5, #4]
     65c:	029b      	lsls	r3, r3, #10
     65e:	4313      	orrs	r3, r2
     660:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     662:	0020      	movs	r0, r4
     664:	47b8      	blx	r7
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     666:	6a23      	ldr	r3, [r4, #32]
     668:	3528      	adds	r5, #40	; 0x28
     66a:	199e      	adds	r6, r3, r6
     66c:	782b      	ldrb	r3, [r5, #0]
     66e:	b2db      	uxtb	r3, r3
     670:	7033      	strb	r3, [r6, #0]
}
     672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     674:	000005fd 	.word	0x000005fd

00000678 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     678:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     67a:	6806      	ldr	r6, [r0, #0]
{
     67c:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     67e:	8b73      	ldrh	r3, [r6, #26]
     680:	075b      	lsls	r3, r3, #29
     682:	d503      	bpl.n	68c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     684:	231e      	movs	r3, #30
     686:	3406      	adds	r4, #6
     688:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     68a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     68c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     68e:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
     690:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
     692:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
     694:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     696:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
     698:	3b01      	subs	r3, #1
     69a:	b29b      	uxth	r3, r3
     69c:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     69e:	4b04      	ldr	r3, [pc, #16]	; (6b0 <_i2c_master_write+0x38>)
     6a0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     6a2:	6a23      	ldr	r3, [r4, #32]
     6a4:	195d      	adds	r5, r3, r5
     6a6:	782b      	ldrb	r3, [r5, #0]
     6a8:	b2db      	uxtb	r3, r3
     6aa:	7033      	strb	r3, [r6, #0]
     6ac:	e7ed      	b.n	68a <_i2c_master_write+0x12>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	000005fd 	.word	0x000005fd

000006b4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     6b6:	4b5e      	ldr	r3, [pc, #376]	; (830 <_i2c_master_interrupt_handler+0x17c>)
     6b8:	0080      	lsls	r0, r0, #2
     6ba:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6bc:	6825      	ldr	r5, [r4, #0]
     6be:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6c0:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     6c2:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
     6c4:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6c6:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
     6c8:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     6ca:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6cc:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     6ce:	2a00      	cmp	r2, #0
     6d0:	d12e      	bne.n	730 <_i2c_master_interrupt_handler+0x7c>
     6d2:	8ba2      	ldrh	r2, [r4, #28]
     6d4:	2a00      	cmp	r2, #0
     6d6:	d02b      	beq.n	730 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     6d8:	2301      	movs	r3, #1
     6da:	7e2a      	ldrb	r2, [r5, #24]
     6dc:	421a      	tst	r2, r3
     6de:	d006      	beq.n	6ee <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     6e0:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6e2:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     6e4:	8b6b      	ldrh	r3, [r5, #26]
     6e6:	4013      	ands	r3, r2
     6e8:	d010      	beq.n	70c <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
     6ea:	2341      	movs	r3, #65	; 0x41
     6ec:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
     6ee:	8ba3      	ldrh	r3, [r4, #28]
     6f0:	b29b      	uxth	r3, r3
     6f2:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     6f4:	7ff3      	ldrb	r3, [r6, #31]
     6f6:	2b05      	cmp	r3, #5
     6f8:	d13c      	bne.n	774 <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     6fa:	1d63      	adds	r3, r4, #5
     6fc:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
     6fe:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     700:	2b00      	cmp	r3, #0
     702:	d000      	beq.n	706 <_i2c_master_interrupt_handler+0x52>
     704:	e08a      	b.n	81c <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
     706:	4b4b      	ldr	r3, [pc, #300]	; (834 <_i2c_master_interrupt_handler+0x180>)
		} else {
			_i2c_master_read(module);
     708:	4798      	blx	r3
     70a:	e033      	b.n	774 <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     70c:	8b6a      	ldrh	r2, [r5, #26]
     70e:	0752      	lsls	r2, r2, #29
     710:	d5ed      	bpl.n	6ee <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     712:	2218      	movs	r2, #24
     714:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
     716:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     718:	7aa3      	ldrb	r3, [r4, #10]
     71a:	2b00      	cmp	r3, #0
     71c:	d0e7      	beq.n	6ee <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
     71e:	4b46      	ldr	r3, [pc, #280]	; (838 <_i2c_master_interrupt_handler+0x184>)
     720:	0020      	movs	r0, r4
     722:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     724:	23c0      	movs	r3, #192	; 0xc0
     726:	686a      	ldr	r2, [r5, #4]
     728:	029b      	lsls	r3, r3, #10
     72a:	4313      	orrs	r3, r2
     72c:	606b      	str	r3, [r5, #4]
     72e:	e7de      	b.n	6ee <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     730:	8b62      	ldrh	r2, [r4, #26]
     732:	2a00      	cmp	r2, #0
     734:	d05f      	beq.n	7f6 <_i2c_master_interrupt_handler+0x142>
     736:	8ba2      	ldrh	r2, [r4, #28]
     738:	2a00      	cmp	r2, #0
     73a:	d15c      	bne.n	7f6 <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
     73c:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     73e:	2a05      	cmp	r2, #5
     740:	d159      	bne.n	7f6 <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     742:	1d62      	adds	r2, r4, #5
     744:	7fd2      	ldrb	r2, [r2, #31]
     746:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
     748:	2a00      	cmp	r2, #0
     74a:	d154      	bne.n	7f6 <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
     74c:	2303      	movs	r3, #3
     74e:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     750:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     752:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
     754:	7aa3      	ldrb	r3, [r4, #10]
     756:	2b00      	cmp	r3, #0
     758:	d04a      	beq.n	7f0 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
     75a:	4b37      	ldr	r3, [pc, #220]	; (838 <_i2c_master_interrupt_handler+0x184>)
     75c:	0020      	movs	r0, r4
     75e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     760:	23c0      	movs	r3, #192	; 0xc0
     762:	686a      	ldr	r2, [r5, #4]
     764:	029b      	lsls	r3, r3, #10
     766:	4313      	orrs	r3, r2
     768:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     76a:	07fb      	lsls	r3, r7, #31
     76c:	d502      	bpl.n	774 <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     76e:	68e3      	ldr	r3, [r4, #12]
     770:	0020      	movs	r0, r4
     772:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     774:	8b63      	ldrh	r3, [r4, #26]
     776:	2b00      	cmp	r3, #0
     778:	d01b      	beq.n	7b2 <_i2c_master_interrupt_handler+0xfe>
     77a:	8ba3      	ldrh	r3, [r4, #28]
     77c:	2b00      	cmp	r3, #0
     77e:	d118      	bne.n	7b2 <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
     780:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     782:	2b05      	cmp	r3, #5
     784:	d115      	bne.n	7b2 <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     786:	1d63      	adds	r3, r4, #5
     788:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
     78a:	2a01      	cmp	r2, #1
     78c:	d111      	bne.n	7b2 <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     78e:	7e29      	ldrb	r1, [r5, #24]
     790:	3201      	adds	r2, #1
     792:	4211      	tst	r1, r2
     794:	d000      	beq.n	798 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     796:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     798:	2203      	movs	r2, #3
     79a:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     79c:	2200      	movs	r2, #0
     79e:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     7a0:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     7a2:	07ba      	lsls	r2, r7, #30
     7a4:	d53c      	bpl.n	820 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     7a6:	7fda      	ldrb	r2, [r3, #31]
     7a8:	2a01      	cmp	r2, #1
     7aa:	d139      	bne.n	820 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     7ac:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     7ae:	0020      	movs	r0, r4
     7b0:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     7b2:	7ff3      	ldrb	r3, [r6, #31]
     7b4:	2b05      	cmp	r3, #5
     7b6:	d01a      	beq.n	7ee <_i2c_master_interrupt_handler+0x13a>
     7b8:	7ff3      	ldrb	r3, [r6, #31]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d017      	beq.n	7ee <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     7be:	2303      	movs	r3, #3
     7c0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     7c2:	2300      	movs	r3, #0
     7c4:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     7c6:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     7c8:	7ff3      	ldrb	r3, [r6, #31]
     7ca:	2b41      	cmp	r3, #65	; 0x41
     7cc:	d00a      	beq.n	7e4 <_i2c_master_interrupt_handler+0x130>
     7ce:	7aa3      	ldrb	r3, [r4, #10]
     7d0:	2b00      	cmp	r3, #0
     7d2:	d007      	beq.n	7e4 <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     7d4:	4b18      	ldr	r3, [pc, #96]	; (838 <_i2c_master_interrupt_handler+0x184>)
     7d6:	0020      	movs	r0, r4
     7d8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     7da:	23e0      	movs	r3, #224	; 0xe0
     7dc:	686a      	ldr	r2, [r5, #4]
     7de:	02db      	lsls	r3, r3, #11
     7e0:	4313      	orrs	r3, r2
     7e2:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     7e4:	077b      	lsls	r3, r7, #29
     7e6:	d502      	bpl.n	7ee <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     7e8:	6963      	ldr	r3, [r4, #20]
     7ea:	0020      	movs	r0, r4
     7ec:	4798      	blx	r3
		}
	}
}
     7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     7f0:	2301      	movs	r3, #1
     7f2:	762b      	strb	r3, [r5, #24]
     7f4:	e7b9      	b.n	76a <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     7f6:	8b62      	ldrh	r2, [r4, #26]
     7f8:	2a00      	cmp	r2, #0
     7fa:	d0bb      	beq.n	774 <_i2c_master_interrupt_handler+0xc0>
     7fc:	8ba2      	ldrh	r2, [r4, #28]
     7fe:	2a00      	cmp	r2, #0
     800:	d0b8      	beq.n	774 <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     802:	8b6a      	ldrh	r2, [r5, #26]
     804:	0692      	lsls	r2, r2, #26
     806:	d500      	bpl.n	80a <_i2c_master_interrupt_handler+0x156>
     808:	e777      	b.n	6fa <_i2c_master_interrupt_handler+0x46>
     80a:	2b00      	cmp	r3, #0
     80c:	d003      	beq.n	816 <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     80e:	8ba3      	ldrh	r3, [r4, #28]
     810:	2b01      	cmp	r3, #1
     812:	d100      	bne.n	816 <_i2c_master_interrupt_handler+0x162>
     814:	e771      	b.n	6fa <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
     816:	2341      	movs	r3, #65	; 0x41
     818:	77f3      	strb	r3, [r6, #31]
     81a:	e7ab      	b.n	774 <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
     81c:	4b07      	ldr	r3, [pc, #28]	; (83c <_i2c_master_interrupt_handler+0x188>)
     81e:	e773      	b.n	708 <_i2c_master_interrupt_handler+0x54>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     820:	07fa      	lsls	r2, r7, #31
     822:	d5c6      	bpl.n	7b2 <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     824:	7fdb      	ldrb	r3, [r3, #31]
     826:	2b00      	cmp	r3, #0
     828:	d1c3      	bne.n	7b2 <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     82a:	68e3      	ldr	r3, [r4, #12]
     82c:	e7bf      	b.n	7ae <_i2c_master_interrupt_handler+0xfa>
     82e:	46c0      	nop			; (mov r8, r8)
     830:	20000158 	.word	0x20000158
     834:	00000679 	.word	0x00000679
     838:	000005fd 	.word	0x000005fd
     83c:	00000609 	.word	0x00000609

00000840 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     840:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     842:	4c0d      	ldr	r4, [pc, #52]	; (878 <sercom_set_gclk_generator+0x38>)
{
     844:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     846:	7823      	ldrb	r3, [r4, #0]
     848:	2b00      	cmp	r3, #0
     84a:	d001      	beq.n	850 <sercom_set_gclk_generator+0x10>
     84c:	2900      	cmp	r1, #0
     84e:	d00c      	beq.n	86a <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     850:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     852:	200d      	movs	r0, #13
     854:	4b09      	ldr	r3, [pc, #36]	; (87c <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     856:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     858:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     85a:	200d      	movs	r0, #13
     85c:	4b08      	ldr	r3, [pc, #32]	; (880 <sercom_set_gclk_generator+0x40>)
     85e:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     860:	2301      	movs	r3, #1

		return STATUS_OK;
     862:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     864:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     866:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     868:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     86a:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     86c:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     86e:	42ab      	cmp	r3, r5
     870:	d0fa      	beq.n	868 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     872:	201d      	movs	r0, #29
     874:	e7f8      	b.n	868 <sercom_set_gclk_generator+0x28>
     876:	46c0      	nop			; (mov r8, r8)
     878:	2000002d 	.word	0x2000002d
     87c:	00000fe9 	.word	0x00000fe9
     880:	00000f61 	.word	0x00000f61

00000884 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     884:	4a1d      	ldr	r2, [pc, #116]	; (8fc <_sercom_get_default_pad+0x78>)
{
     886:	0003      	movs	r3, r0
     888:	b500      	push	{lr}
     88a:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     88c:	4293      	cmp	r3, r2
     88e:	d013      	beq.n	8b8 <_sercom_get_default_pad+0x34>
     890:	4a1b      	ldr	r2, [pc, #108]	; (900 <_sercom_get_default_pad+0x7c>)
     892:	4293      	cmp	r3, r2
     894:	d01d      	beq.n	8d2 <_sercom_get_default_pad+0x4e>
     896:	4a1b      	ldr	r2, [pc, #108]	; (904 <_sercom_get_default_pad+0x80>)
     898:	4293      	cmp	r3, r2
     89a:	d127      	bne.n	8ec <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     89c:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     89e:	2903      	cmp	r1, #3
     8a0:	d804      	bhi.n	8ac <_sercom_get_default_pad+0x28>
     8a2:	f001 fa8b 	bl	1dbc <__gnu_thumb1_case_uqi>
     8a6:	0225      	.short	0x0225
     8a8:	0705      	.short	0x0705
     8aa:	4b17      	ldr	r3, [pc, #92]	; (908 <_sercom_get_default_pad+0x84>)
}
     8ac:	0018      	movs	r0, r3
     8ae:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8b0:	4b16      	ldr	r3, [pc, #88]	; (90c <_sercom_get_default_pad+0x88>)
     8b2:	e7fb      	b.n	8ac <_sercom_get_default_pad+0x28>
     8b4:	4b16      	ldr	r3, [pc, #88]	; (910 <_sercom_get_default_pad+0x8c>)
     8b6:	e7f9      	b.n	8ac <_sercom_get_default_pad+0x28>
	return 0;
     8b8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ba:	2903      	cmp	r1, #3
     8bc:	d8f6      	bhi.n	8ac <_sercom_get_default_pad+0x28>
     8be:	f001 fa7d 	bl	1dbc <__gnu_thumb1_case_uqi>
     8c2:	0219      	.short	0x0219
     8c4:	0604      	.short	0x0604
     8c6:	4b13      	ldr	r3, [pc, #76]	; (914 <_sercom_get_default_pad+0x90>)
     8c8:	e7f0      	b.n	8ac <_sercom_get_default_pad+0x28>
     8ca:	4b13      	ldr	r3, [pc, #76]	; (918 <_sercom_get_default_pad+0x94>)
     8cc:	e7ee      	b.n	8ac <_sercom_get_default_pad+0x28>
     8ce:	4b13      	ldr	r3, [pc, #76]	; (91c <_sercom_get_default_pad+0x98>)
     8d0:	e7ec      	b.n	8ac <_sercom_get_default_pad+0x28>
	return 0;
     8d2:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d4:	2903      	cmp	r1, #3
     8d6:	d8e9      	bhi.n	8ac <_sercom_get_default_pad+0x28>
     8d8:	f001 fa70 	bl	1dbc <__gnu_thumb1_case_uqi>
     8dc:	0604020e 	.word	0x0604020e
     8e0:	4b0f      	ldr	r3, [pc, #60]	; (920 <_sercom_get_default_pad+0x9c>)
     8e2:	e7e3      	b.n	8ac <_sercom_get_default_pad+0x28>
     8e4:	4b0f      	ldr	r3, [pc, #60]	; (924 <_sercom_get_default_pad+0xa0>)
     8e6:	e7e1      	b.n	8ac <_sercom_get_default_pad+0x28>
     8e8:	4b0f      	ldr	r3, [pc, #60]	; (928 <_sercom_get_default_pad+0xa4>)
     8ea:	e7df      	b.n	8ac <_sercom_get_default_pad+0x28>
	return 0;
     8ec:	2300      	movs	r3, #0
     8ee:	e7dd      	b.n	8ac <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8f0:	4b0e      	ldr	r3, [pc, #56]	; (92c <_sercom_get_default_pad+0xa8>)
     8f2:	e7db      	b.n	8ac <_sercom_get_default_pad+0x28>
     8f4:	4b0e      	ldr	r3, [pc, #56]	; (930 <_sercom_get_default_pad+0xac>)
     8f6:	e7d9      	b.n	8ac <_sercom_get_default_pad+0x28>
     8f8:	4b0e      	ldr	r3, [pc, #56]	; (934 <_sercom_get_default_pad+0xb0>)
     8fa:	e7d7      	b.n	8ac <_sercom_get_default_pad+0x28>
     8fc:	42000c00 	.word	0x42000c00
     900:	42001000 	.word	0x42001000
     904:	42000800 	.word	0x42000800
     908:	00050003 	.word	0x00050003
     90c:	00060003 	.word	0x00060003
     910:	00070003 	.word	0x00070003
     914:	00170002 	.word	0x00170002
     918:	001e0003 	.word	0x001e0003
     91c:	001f0003 	.word	0x001f0003
     920:	00170003 	.word	0x00170003
     924:	00100003 	.word	0x00100003
     928:	00190003 	.word	0x00190003
     92c:	00040003 	.word	0x00040003
     930:	00160002 	.word	0x00160002
     934:	00160003 	.word	0x00160003

00000938 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     93a:	4b0c      	ldr	r3, [pc, #48]	; (96c <_sercom_get_sercom_inst_index+0x34>)
{
     93c:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     93e:	0018      	movs	r0, r3
     940:	aa01      	add	r2, sp, #4
     942:	c870      	ldmia	r0!, {r4, r5, r6}
     944:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     946:	9a01      	ldr	r2, [sp, #4]
     948:	428a      	cmp	r2, r1
     94a:	d00a      	beq.n	962 <_sercom_get_sercom_inst_index+0x2a>
     94c:	685a      	ldr	r2, [r3, #4]
     94e:	428a      	cmp	r2, r1
     950:	d009      	beq.n	966 <_sercom_get_sercom_inst_index+0x2e>
     952:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     954:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     956:	428b      	cmp	r3, r1
     958:	d101      	bne.n	95e <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     95a:	3002      	adds	r0, #2
			return i;
     95c:	b2c0      	uxtb	r0, r0
}
     95e:	b004      	add	sp, #16
     960:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     962:	2000      	movs	r0, #0
     964:	e7fa      	b.n	95c <_sercom_get_sercom_inst_index+0x24>
     966:	2001      	movs	r0, #1
     968:	e7f8      	b.n	95c <_sercom_get_sercom_inst_index+0x24>
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	000037f8 	.word	0x000037f8

00000970 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     970:	4770      	bx	lr
	...

00000974 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     974:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     976:	4e09      	ldr	r6, [pc, #36]	; (99c <_sercom_set_handler+0x28>)
     978:	4b09      	ldr	r3, [pc, #36]	; (9a0 <_sercom_set_handler+0x2c>)
     97a:	7832      	ldrb	r2, [r6, #0]
     97c:	2a00      	cmp	r2, #0
     97e:	d109      	bne.n	994 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     980:	4c08      	ldr	r4, [pc, #32]	; (9a4 <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     982:	4d09      	ldr	r5, [pc, #36]	; (9a8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     984:	6022      	str	r2, [r4, #0]
     986:	6062      	str	r2, [r4, #4]
     988:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
     98a:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     98c:	601d      	str	r5, [r3, #0]
     98e:	605d      	str	r5, [r3, #4]
     990:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
     992:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     994:	0080      	lsls	r0, r0, #2
     996:	5019      	str	r1, [r3, r0]
}
     998:	bd70      	pop	{r4, r5, r6, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	2000002f 	.word	0x2000002f
     9a0:	20000030 	.word	0x20000030
     9a4:	20000158 	.word	0x20000158
     9a8:	00000971 	.word	0x00000971

000009ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9ac:	2309      	movs	r3, #9
{
     9ae:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9b0:	ac01      	add	r4, sp, #4
     9b2:	7023      	strb	r3, [r4, #0]
     9b4:	3301      	adds	r3, #1
     9b6:	7063      	strb	r3, [r4, #1]
     9b8:	3301      	adds	r3, #1
     9ba:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     9bc:	4b01      	ldr	r3, [pc, #4]	; (9c4 <_sercom_get_interrupt_vector+0x18>)
     9be:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     9c0:	5620      	ldrsb	r0, [r4, r0]
}
     9c2:	bd16      	pop	{r1, r2, r4, pc}
     9c4:	00000939 	.word	0x00000939

000009c8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     9c8:	b510      	push	{r4, lr}
     9ca:	4b02      	ldr	r3, [pc, #8]	; (9d4 <SERCOM0_Handler+0xc>)
     9cc:	2000      	movs	r0, #0
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	4798      	blx	r3
     9d2:	bd10      	pop	{r4, pc}
     9d4:	20000030 	.word	0x20000030

000009d8 <SERCOM1_Handler>:
     9d8:	b510      	push	{r4, lr}
     9da:	4b02      	ldr	r3, [pc, #8]	; (9e4 <SERCOM1_Handler+0xc>)
     9dc:	2001      	movs	r0, #1
     9de:	685b      	ldr	r3, [r3, #4]
     9e0:	4798      	blx	r3
     9e2:	bd10      	pop	{r4, pc}
     9e4:	20000030 	.word	0x20000030

000009e8 <SERCOM2_Handler>:
     9e8:	b510      	push	{r4, lr}
     9ea:	4b02      	ldr	r3, [pc, #8]	; (9f4 <SERCOM2_Handler+0xc>)
     9ec:	2002      	movs	r0, #2
     9ee:	689b      	ldr	r3, [r3, #8]
     9f0:	4798      	blx	r3
     9f2:	bd10      	pop	{r4, pc}
     9f4:	20000030 	.word	0x20000030

000009f8 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     9f8:	2310      	movs	r3, #16
     9fa:	4902      	ldr	r1, [pc, #8]	; (a04 <_system_dfll_wait_for_sync+0xc>)
     9fc:	68ca      	ldr	r2, [r1, #12]
     9fe:	421a      	tst	r2, r3
     a00:	d0fc      	beq.n	9fc <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     a02:	4770      	bx	lr
     a04:	40000800 	.word	0x40000800

00000a08 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a08:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
     a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
     a0c:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a0e:	4d09      	ldr	r5, [pc, #36]	; (a34 <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     a10:	4c09      	ldr	r4, [pc, #36]	; (a38 <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a12:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
     a14:	4f09      	ldr	r7, [pc, #36]	; (a3c <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a16:	4313      	orrs	r3, r2
     a18:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     a1a:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     a1c:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     a1e:	68ab      	ldr	r3, [r5, #8]
     a20:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     a22:	686b      	ldr	r3, [r5, #4]
     a24:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     a26:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     a28:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     a2a:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     a2c:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     a2e:	b29b      	uxth	r3, r3
     a30:	84a3      	strh	r3, [r4, #36]	; 0x24
}
     a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a34:	2000003c 	.word	0x2000003c
     a38:	40000800 	.word	0x40000800
     a3c:	000009f9 	.word	0x000009f9

00000a40 <system_clock_source_get_hz>:
{
     a40:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     a42:	2808      	cmp	r0, #8
     a44:	d806      	bhi.n	a54 <system_clock_source_get_hz+0x14>
     a46:	f001 f9b9 	bl	1dbc <__gnu_thumb1_case_uqi>
     a4a:	0508      	.short	0x0508
     a4c:	12303005 	.word	0x12303005
     a50:	150b      	.short	0x150b
     a52:	28          	.byte	0x28
     a53:	00          	.byte	0x00
		return 0;
     a54:	2400      	movs	r4, #0
}
     a56:	0020      	movs	r0, r4
     a58:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     a5a:	4b16      	ldr	r3, [pc, #88]	; (ab4 <system_clock_source_get_hz+0x74>)
     a5c:	691c      	ldr	r4, [r3, #16]
     a5e:	e7fa      	b.n	a56 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     a60:	4b15      	ldr	r3, [pc, #84]	; (ab8 <system_clock_source_get_hz+0x78>)
     a62:	4c16      	ldr	r4, [pc, #88]	; (abc <system_clock_source_get_hz+0x7c>)
     a64:	6a1b      	ldr	r3, [r3, #32]
     a66:	059b      	lsls	r3, r3, #22
     a68:	0f9b      	lsrs	r3, r3, #30
     a6a:	40dc      	lsrs	r4, r3
     a6c:	e7f3      	b.n	a56 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     a6e:	4b11      	ldr	r3, [pc, #68]	; (ab4 <system_clock_source_get_hz+0x74>)
     a70:	695c      	ldr	r4, [r3, #20]
     a72:	e7f0      	b.n	a56 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     a74:	4d0f      	ldr	r5, [pc, #60]	; (ab4 <system_clock_source_get_hz+0x74>)
			return 0;
     a76:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     a78:	682b      	ldr	r3, [r5, #0]
     a7a:	079b      	lsls	r3, r3, #30
     a7c:	d5eb      	bpl.n	a56 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     a7e:	4b10      	ldr	r3, [pc, #64]	; (ac0 <system_clock_source_get_hz+0x80>)
     a80:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
     a82:	2224      	movs	r2, #36	; 0x24
     a84:	682b      	ldr	r3, [r5, #0]
     a86:	4013      	ands	r3, r2
     a88:	2b04      	cmp	r3, #4
     a8a:	d111      	bne.n	ab0 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     a8c:	0020      	movs	r0, r4
     a8e:	4b0d      	ldr	r3, [pc, #52]	; (ac4 <system_clock_source_get_hz+0x84>)
     a90:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     a92:	68ac      	ldr	r4, [r5, #8]
     a94:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     a96:	4344      	muls	r4, r0
     a98:	e7dd      	b.n	a56 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     a9a:	4b0b      	ldr	r3, [pc, #44]	; (ac8 <system_clock_source_get_hz+0x88>)
			return 0;
     a9c:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     a9e:	781b      	ldrb	r3, [r3, #0]
     aa0:	075b      	lsls	r3, r3, #29
     aa2:	d5d8      	bpl.n	a56 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     aa4:	4b03      	ldr	r3, [pc, #12]	; (ab4 <system_clock_source_get_hz+0x74>)
     aa6:	68dc      	ldr	r4, [r3, #12]
     aa8:	e7d5      	b.n	a56 <system_clock_source_get_hz+0x16>
		return 32768UL;
     aaa:	2480      	movs	r4, #128	; 0x80
     aac:	0224      	lsls	r4, r4, #8
     aae:	e7d2      	b.n	a56 <system_clock_source_get_hz+0x16>
			return 48000000UL;
     ab0:	4c06      	ldr	r4, [pc, #24]	; (acc <system_clock_source_get_hz+0x8c>)
     ab2:	e7d0      	b.n	a56 <system_clock_source_get_hz+0x16>
     ab4:	2000003c 	.word	0x2000003c
     ab8:	40000800 	.word	0x40000800
     abc:	007a1200 	.word	0x007a1200
     ac0:	000009f9 	.word	0x000009f9
     ac4:	00001005 	.word	0x00001005
     ac8:	40000850 	.word	0x40000850
     acc:	02dc6c00 	.word	0x02dc6c00

00000ad0 <system_clock_source_osc8m_set_config>:
{
     ad0:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
     ad2:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
     ad4:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
     ad6:	7845      	ldrb	r5, [r0, #1]
     ad8:	2001      	movs	r0, #1
     ada:	2640      	movs	r6, #64	; 0x40
     adc:	4005      	ands	r5, r0
     ade:	4020      	ands	r0, r4
     ae0:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ae2:	4908      	ldr	r1, [pc, #32]	; (b04 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     ae4:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ae6:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     ae8:	01c0      	lsls	r0, r0, #7
     aea:	43b3      	bics	r3, r6
     aec:	432b      	orrs	r3, r5
     aee:	43a3      	bics	r3, r4
     af0:	4303      	orrs	r3, r0
     af2:	2003      	movs	r0, #3
     af4:	4002      	ands	r2, r0
     af6:	4804      	ldr	r0, [pc, #16]	; (b08 <system_clock_source_osc8m_set_config+0x38>)
     af8:	0212      	lsls	r2, r2, #8
     afa:	4003      	ands	r3, r0
     afc:	4313      	orrs	r3, r2
     afe:	620b      	str	r3, [r1, #32]
}
     b00:	bd70      	pop	{r4, r5, r6, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	40000800 	.word	0x40000800
     b08:	fffffcff 	.word	0xfffffcff

00000b0c <system_clock_source_osc32k_set_config>:
{
     b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     b0e:	4f18      	ldr	r7, [pc, #96]	; (b70 <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
     b10:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     b12:	69bb      	ldr	r3, [r7, #24]
     b14:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
     b16:	7803      	ldrb	r3, [r0, #0]
     b18:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
     b1a:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
     b1c:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
     b1e:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     b20:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     b22:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
     b24:	2201      	movs	r2, #1
     b26:	4399      	bics	r1, r3
     b28:	2308      	movs	r3, #8
     b2a:	7880      	ldrb	r0, [r0, #2]
     b2c:	4016      	ands	r6, r2
     b2e:	4010      	ands	r0, r2
     b30:	0080      	lsls	r0, r0, #2
     b32:	4308      	orrs	r0, r1
     b34:	4398      	bics	r0, r3
     b36:	00f6      	lsls	r6, r6, #3
     b38:	4306      	orrs	r6, r0
     b3a:	4015      	ands	r5, r2
     b3c:	01a8      	lsls	r0, r5, #6
     b3e:	0035      	movs	r5, r6
     b40:	3338      	adds	r3, #56	; 0x38
     b42:	439d      	bics	r5, r3
     b44:	4305      	orrs	r5, r0
     b46:	4014      	ands	r4, r2
     b48:	01e3      	lsls	r3, r4, #7
     b4a:	2080      	movs	r0, #128	; 0x80
     b4c:	002c      	movs	r4, r5
     b4e:	4384      	bics	r4, r0
     b50:	431c      	orrs	r4, r3
     b52:	2307      	movs	r3, #7
     b54:	9901      	ldr	r1, [sp, #4]
     b56:	400b      	ands	r3, r1
     b58:	4906      	ldr	r1, [pc, #24]	; (b74 <system_clock_source_osc32k_set_config+0x68>)
     b5a:	021b      	lsls	r3, r3, #8
     b5c:	4021      	ands	r1, r4
     b5e:	4319      	orrs	r1, r3
     b60:	9b00      	ldr	r3, [sp, #0]
     b62:	401a      	ands	r2, r3
     b64:	0313      	lsls	r3, r2, #12
     b66:	4a04      	ldr	r2, [pc, #16]	; (b78 <system_clock_source_osc32k_set_config+0x6c>)
     b68:	400a      	ands	r2, r1
     b6a:	431a      	orrs	r2, r3
     b6c:	61ba      	str	r2, [r7, #24]
}
     b6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     b70:	40000800 	.word	0x40000800
     b74:	fffff8ff 	.word	0xfffff8ff
     b78:	ffffefff 	.word	0xffffefff

00000b7c <system_clock_source_dfll_set_config>:
{
     b7c:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     b7e:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     b80:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     b82:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     b84:	059b      	lsls	r3, r3, #22
     b86:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     b88:	0c12      	lsrs	r2, r2, #16
     b8a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
     b8c:	4b17      	ldr	r3, [pc, #92]	; (bec <system_clock_source_dfll_set_config+0x70>)
     b8e:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
     b90:	79c1      	ldrb	r1, [r0, #7]
     b92:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
     b94:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
     b96:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
     b98:	8841      	ldrh	r1, [r0, #2]
     b9a:	4321      	orrs	r1, r4
     b9c:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     b9e:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     ba0:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     ba2:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
     ba4:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
     ba6:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     ba8:	2c04      	cmp	r4, #4
     baa:	d10d      	bne.n	bc8 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     bac:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     bae:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     bb0:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     bb2:	430a      	orrs	r2, r1
     bb4:	89c1      	ldrh	r1, [r0, #14]
     bb6:	480e      	ldr	r0, [pc, #56]	; (bf0 <system_clock_source_dfll_set_config+0x74>)
     bb8:	0409      	lsls	r1, r1, #16
     bba:	4001      	ands	r1, r0
     bbc:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     bbe:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     bc0:	681a      	ldr	r2, [r3, #0]
     bc2:	4314      	orrs	r4, r2
     bc4:	601c      	str	r4, [r3, #0]
}
     bc6:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     bc8:	2c20      	cmp	r4, #32
     bca:	d1fc      	bne.n	bc6 <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     bcc:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     bce:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     bd0:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     bd2:	430a      	orrs	r2, r1
     bd4:	89c1      	ldrh	r1, [r0, #14]
     bd6:	4806      	ldr	r0, [pc, #24]	; (bf0 <system_clock_source_dfll_set_config+0x74>)
     bd8:	0409      	lsls	r1, r1, #16
     bda:	4001      	ands	r1, r0
     bdc:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     bde:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
     be0:	6819      	ldr	r1, [r3, #0]
     be2:	4a04      	ldr	r2, [pc, #16]	; (bf4 <system_clock_source_dfll_set_config+0x78>)
     be4:	430a      	orrs	r2, r1
     be6:	601a      	str	r2, [r3, #0]
}
     be8:	e7ed      	b.n	bc6 <system_clock_source_dfll_set_config+0x4a>
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	2000003c 	.word	0x2000003c
     bf0:	03ff0000 	.word	0x03ff0000
     bf4:	00000424 	.word	0x00000424

00000bf8 <system_clock_source_enable>:
{
     bf8:	b510      	push	{r4, lr}
	switch (clock_source) {
     bfa:	2808      	cmp	r0, #8
     bfc:	d806      	bhi.n	c0c <system_clock_source_enable+0x14>
     bfe:	f001 f8dd 	bl	1dbc <__gnu_thumb1_case_uqi>
     c02:	0514      	.short	0x0514
     c04:	1a0e0c05 	.word	0x1a0e0c05
     c08:	2007      	.short	0x2007
     c0a:	23          	.byte	0x23
     c0b:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
     c0c:	2017      	movs	r0, #23
}
     c0e:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c10:	2302      	movs	r3, #2
     c12:	4a10      	ldr	r2, [pc, #64]	; (c54 <system_clock_source_enable+0x5c>)
     c14:	6a11      	ldr	r1, [r2, #32]
     c16:	430b      	orrs	r3, r1
     c18:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c1a:	2000      	movs	r0, #0
     c1c:	e7f7      	b.n	c0e <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c1e:	2302      	movs	r3, #2
     c20:	4a0c      	ldr	r2, [pc, #48]	; (c54 <system_clock_source_enable+0x5c>)
     c22:	6991      	ldr	r1, [r2, #24]
     c24:	430b      	orrs	r3, r1
     c26:	6193      	str	r3, [r2, #24]
     c28:	e7f7      	b.n	c1a <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c2a:	2302      	movs	r3, #2
     c2c:	4a09      	ldr	r2, [pc, #36]	; (c54 <system_clock_source_enable+0x5c>)
     c2e:	8a11      	ldrh	r1, [r2, #16]
     c30:	430b      	orrs	r3, r1
     c32:	8213      	strh	r3, [r2, #16]
     c34:	e7f1      	b.n	c1a <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c36:	2302      	movs	r3, #2
     c38:	4a06      	ldr	r2, [pc, #24]	; (c54 <system_clock_source_enable+0x5c>)
     c3a:	8a91      	ldrh	r1, [r2, #20]
     c3c:	430b      	orrs	r3, r1
     c3e:	8293      	strh	r3, [r2, #20]
     c40:	e7eb      	b.n	c1a <system_clock_source_enable+0x22>
     c42:	4b05      	ldr	r3, [pc, #20]	; (c58 <system_clock_source_enable+0x60>)
     c44:	4798      	blx	r3
     c46:	e7e2      	b.n	c0e <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     c48:	2302      	movs	r3, #2
     c4a:	4a04      	ldr	r2, [pc, #16]	; (c5c <system_clock_source_enable+0x64>)
     c4c:	7811      	ldrb	r1, [r2, #0]
     c4e:	430b      	orrs	r3, r1
     c50:	7013      	strb	r3, [r2, #0]
     c52:	e7e2      	b.n	c1a <system_clock_source_enable+0x22>
     c54:	40000800 	.word	0x40000800
     c58:	00000a09 	.word	0x00000a09
     c5c:	40000844 	.word	0x40000844

00000c60 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c60:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     c62:	221e      	movs	r2, #30
{
     c64:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     c66:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     c68:	4e48      	ldr	r6, [pc, #288]	; (d8c <system_clock_init+0x12c>)
     c6a:	00db      	lsls	r3, r3, #3
     c6c:	4948      	ldr	r1, [pc, #288]	; (d90 <system_clock_init+0x130>)
     c6e:	60b3      	str	r3, [r6, #8]
     c70:	684b      	ldr	r3, [r1, #4]
{
     c72:	b08d      	sub	sp, #52	; 0x34
     c74:	4393      	bics	r3, r2
     c76:	3a1c      	subs	r2, #28
     c78:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     c7a:	ac07      	add	r4, sp, #28
     c7c:	604b      	str	r3, [r1, #4]
     c7e:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     c80:	b2e8      	uxtb	r0, r5
     c82:	0021      	movs	r1, r4
     c84:	4b43      	ldr	r3, [pc, #268]	; (d94 <system_clock_init+0x134>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     c86:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     c88:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     c8a:	2d18      	cmp	r5, #24
     c8c:	d1f8      	bne.n	c80 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     c8e:	4f42      	ldr	r7, [pc, #264]	; (d98 <system_clock_init+0x138>)
	SYSCTRL->OSC32K.bit.CALIB =
     c90:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     c92:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
     c94:	4941      	ldr	r1, [pc, #260]	; (d9c <system_clock_init+0x13c>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     c96:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     c98:	0e5b      	lsrs	r3, r3, #25
     c9a:	400a      	ands	r2, r1
     c9c:	041b      	lsls	r3, r3, #16
     c9e:	4313      	orrs	r3, r2
     ca0:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
     ca2:	2301      	movs	r3, #1
	config->run_in_standby      = false;
     ca4:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
     ca6:	a802      	add	r0, sp, #8
     ca8:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     caa:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
     cac:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     cae:	3306      	adds	r3, #6
     cb0:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     cb2:	4b3b      	ldr	r3, [pc, #236]	; (da0 <system_clock_init+0x140>)
	config->run_in_standby      = false;
     cb4:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
     cb6:	7145      	strb	r5, [r0, #5]
     cb8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     cba:	4b3a      	ldr	r3, [pc, #232]	; (da4 <system_clock_init+0x144>)
     cbc:	2004      	movs	r0, #4
     cbe:	4798      	blx	r3
	config->fine_value      = 0xff / 4; /* Midpoint */
     cc0:	233f      	movs	r3, #63	; 0x3f
     cc2:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     cc4:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     cc6:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     cc8:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     cca:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     ccc:	71e5      	strb	r5, [r4, #7]
     cce:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
     cd0:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     cd2:	683b      	ldr	r3, [r7, #0]
     cd4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     cd6:	2b3f      	cmp	r3, #63	; 0x3f
     cd8:	d100      	bne.n	cdc <system_clock_init+0x7c>
		coarse = 0x1f;
     cda:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
     cdc:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     cde:	23b7      	movs	r3, #183	; 0xb7
     ce0:	00db      	lsls	r3, r3, #3
     ce2:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     ce4:	2307      	movs	r3, #7
     ce6:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     ce8:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
     cea:	2500      	movs	r5, #0
	config->on_demand       = true;
     cec:	2701      	movs	r7, #1
     cee:	81e3      	strh	r3, [r4, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     cf0:	0020      	movs	r0, r4
     cf2:	4b2d      	ldr	r3, [pc, #180]	; (da8 <system_clock_init+0x148>)
     cf4:	4798      	blx	r3
	config->run_in_standby  = false;
     cf6:	a801      	add	r0, sp, #4

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     cf8:	4b2c      	ldr	r3, [pc, #176]	; (dac <system_clock_init+0x14c>)
     cfa:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     cfc:	7087      	strb	r7, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     cfe:	7005      	strb	r5, [r0, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
     d00:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d02:	4b28      	ldr	r3, [pc, #160]	; (da4 <system_clock_init+0x144>)
     d04:	2006      	movs	r0, #6
     d06:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d08:	4b29      	ldr	r3, [pc, #164]	; (db0 <system_clock_init+0x150>)
     d0a:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     d0c:	2304      	movs	r3, #4
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d0e:	ac04      	add	r4, sp, #16
     d10:	0021      	movs	r1, r4
     d12:	7023      	strb	r3, [r4, #0]
     d14:	0038      	movs	r0, r7
     d16:	4b27      	ldr	r3, [pc, #156]	; (db4 <system_clock_init+0x154>)
     d18:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     d1a:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     d1c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     d1e:	7265      	strb	r5, [r4, #9]
     d20:	4798      	blx	r3
     d22:	0038      	movs	r0, r7
     d24:	4b24      	ldr	r3, [pc, #144]	; (db8 <system_clock_init+0x158>)
     d26:	4798      	blx	r3
     d28:	2307      	movs	r3, #7
     d2a:	0021      	movs	r1, r4
     d2c:	7023      	strb	r3, [r4, #0]
     d2e:	2003      	movs	r0, #3
     d30:	4b20      	ldr	r3, [pc, #128]	; (db4 <system_clock_init+0x154>)
	config->division_factor    = 1;
     d32:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     d34:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     d36:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     d38:	7265      	strb	r5, [r4, #9]
     d3a:	4798      	blx	r3
     d3c:	2003      	movs	r0, #3
     d3e:	4b1e      	ldr	r3, [pc, #120]	; (db8 <system_clock_init+0x158>)
     d40:	4798      	blx	r3
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     d42:	0021      	movs	r1, r4
     d44:	0028      	movs	r0, r5
     d46:	4b13      	ldr	r3, [pc, #76]	; (d94 <system_clock_init+0x134>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     d48:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     d4a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     d4c:	0028      	movs	r0, r5
     d4e:	4b1b      	ldr	r3, [pc, #108]	; (dbc <system_clock_init+0x15c>)
     d50:	4798      	blx	r3
     d52:	4b1b      	ldr	r3, [pc, #108]	; (dc0 <system_clock_init+0x160>)
     d54:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     d56:	22d0      	movs	r2, #208	; 0xd0
     d58:	68f3      	ldr	r3, [r6, #12]
     d5a:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     d5c:	2bd0      	cmp	r3, #208	; 0xd0
     d5e:	d1fb      	bne.n	d58 <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
     d60:	2500      	movs	r5, #0
     d62:	4b18      	ldr	r3, [pc, #96]	; (dc4 <system_clock_init+0x164>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d64:	0021      	movs	r1, r4
     d66:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     d68:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     d6a:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     d6c:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
     d6e:	2301      	movs	r3, #1
     d70:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d72:	3305      	adds	r3, #5
     d74:	7023      	strb	r3, [r4, #0]
     d76:	0028      	movs	r0, r5
     d78:	4b0e      	ldr	r3, [pc, #56]	; (db4 <system_clock_init+0x154>)
	config->high_when_disabled = false;
     d7a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     d7c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     d7e:	7265      	strb	r5, [r4, #9]
     d80:	4798      	blx	r3
     d82:	0028      	movs	r0, r5
     d84:	4b0c      	ldr	r3, [pc, #48]	; (db8 <system_clock_init+0x158>)
     d86:	4798      	blx	r3
#endif
}
     d88:	b00d      	add	sp, #52	; 0x34
     d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d8c:	40000800 	.word	0x40000800
     d90:	41004000 	.word	0x41004000
     d94:	00000fe9 	.word	0x00000fe9
     d98:	00806024 	.word	0x00806024
     d9c:	ff80ffff 	.word	0xff80ffff
     da0:	00000b0d 	.word	0x00000b0d
     da4:	00000bf9 	.word	0x00000bf9
     da8:	00000b7d 	.word	0x00000b7d
     dac:	00000ad1 	.word	0x00000ad1
     db0:	00000dd5 	.word	0x00000dd5
     db4:	00000df5 	.word	0x00000df5
     db8:	00000e99 	.word	0x00000e99
     dbc:	00000f61 	.word	0x00000f61
     dc0:	00000a09 	.word	0x00000a09
     dc4:	40000400 	.word	0x40000400

00000dc8 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dc8:	4b01      	ldr	r3, [pc, #4]	; (dd0 <system_gclk_is_syncing+0x8>)
     dca:	7858      	ldrb	r0, [r3, #1]
     dcc:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
     dce:	4770      	bx	lr
     dd0:	40000c00 	.word	0x40000c00

00000dd4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     dd4:	2308      	movs	r3, #8
     dd6:	4a05      	ldr	r2, [pc, #20]	; (dec <system_gclk_init+0x18>)
     dd8:	6991      	ldr	r1, [r2, #24]
     dda:	430b      	orrs	r3, r1
     ddc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     dde:	2301      	movs	r3, #1
     de0:	4a03      	ldr	r2, [pc, #12]	; (df0 <system_gclk_init+0x1c>)
     de2:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     de4:	7811      	ldrb	r1, [r2, #0]
     de6:	4219      	tst	r1, r3
     de8:	d1fc      	bne.n	de4 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     dea:	4770      	bx	lr
     dec:	40000400 	.word	0x40000400
     df0:	40000c00 	.word	0x40000c00

00000df4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     df6:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     df8:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     dfa:	0224      	lsls	r4, r4, #8
{
     dfc:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     dfe:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e00:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
     e02:	2b00      	cmp	r3, #0
     e04:	d002      	beq.n	e0c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     e06:	2380      	movs	r3, #128	; 0x80
     e08:	02db      	lsls	r3, r3, #11
     e0a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     e0c:	7a4b      	ldrb	r3, [r1, #9]
     e0e:	2b00      	cmp	r3, #0
     e10:	d002      	beq.n	e18 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     e12:	2380      	movs	r3, #128	; 0x80
     e14:	031b      	lsls	r3, r3, #12
     e16:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     e18:	684b      	ldr	r3, [r1, #4]
     e1a:	2b01      	cmp	r3, #1
     e1c:	d912      	bls.n	e44 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     e1e:	1e5d      	subs	r5, r3, #1
     e20:	401d      	ands	r5, r3
     e22:	2202      	movs	r2, #2
     e24:	2d00      	cmp	r5, #0
     e26:	d006      	beq.n	e36 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e28:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e2a:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
     e2c:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e2e:	029b      	lsls	r3, r3, #10
     e30:	e007      	b.n	e42 <system_gclk_gen_set_config+0x4e>
				div2_count++;
     e32:	3501      	adds	r5, #1
						mask <<= 1) {
     e34:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     e36:	429a      	cmp	r2, r3
     e38:	d3fb      	bcc.n	e32 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e3a:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     e3c:	022d      	lsls	r5, r5, #8
     e3e:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e40:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e42:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     e44:	7a0b      	ldrb	r3, [r1, #8]
     e46:	2b00      	cmp	r3, #0
     e48:	d002      	beq.n	e50 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     e4a:	2380      	movs	r3, #128	; 0x80
     e4c:	039b      	lsls	r3, r3, #14
     e4e:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
     e50:	4f0c      	ldr	r7, [pc, #48]	; (e84 <system_gclk_gen_set_config+0x90>)
     e52:	47b8      	blx	r7
     e54:	2800      	cmp	r0, #0
     e56:	d1fb      	bne.n	e50 <system_gclk_gen_set_config+0x5c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e58:	4b0b      	ldr	r3, [pc, #44]	; (e88 <system_gclk_gen_set_config+0x94>)
     e5a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e5c:	4b0b      	ldr	r3, [pc, #44]	; (e8c <system_gclk_gen_set_config+0x98>)
     e5e:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e60:	47b8      	blx	r7
     e62:	2800      	cmp	r0, #0
     e64:	d1fc      	bne.n	e60 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e66:	4b0a      	ldr	r3, [pc, #40]	; (e90 <system_gclk_gen_set_config+0x9c>)
     e68:	609d      	str	r5, [r3, #8]
     e6a:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
     e6c:	47b8      	blx	r7
     e6e:	2800      	cmp	r0, #0
     e70:	d1fc      	bne.n	e6c <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e72:	2280      	movs	r2, #128	; 0x80
     e74:	686b      	ldr	r3, [r5, #4]
     e76:	0252      	lsls	r2, r2, #9
     e78:	4013      	ands	r3, r2
     e7a:	431c      	orrs	r4, r3
     e7c:	606c      	str	r4, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e7e:	4b05      	ldr	r3, [pc, #20]	; (e94 <system_gclk_gen_set_config+0xa0>)
     e80:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e84:	00000dc9 	.word	0x00000dc9
     e88:	0000026d 	.word	0x0000026d
     e8c:	40000c08 	.word	0x40000c08
     e90:	40000c00 	.word	0x40000c00
     e94:	000002a1 	.word	0x000002a1

00000e98 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
     e9c:	4c09      	ldr	r4, [pc, #36]	; (ec4 <system_gclk_gen_enable+0x2c>)
     e9e:	47a0      	blx	r4
     ea0:	2800      	cmp	r0, #0
     ea2:	d1fb      	bne.n	e9c <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
     ea4:	4b08      	ldr	r3, [pc, #32]	; (ec8 <system_gclk_gen_enable+0x30>)
     ea6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ea8:	4b08      	ldr	r3, [pc, #32]	; (ecc <system_gclk_gen_enable+0x34>)
     eaa:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
     eac:	47a0      	blx	r4
     eae:	2800      	cmp	r0, #0
     eb0:	d1fc      	bne.n	eac <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     eb2:	2380      	movs	r3, #128	; 0x80
     eb4:	4a06      	ldr	r2, [pc, #24]	; (ed0 <system_gclk_gen_enable+0x38>)
     eb6:	025b      	lsls	r3, r3, #9
     eb8:	6851      	ldr	r1, [r2, #4]
     eba:	430b      	orrs	r3, r1
     ebc:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     ebe:	4b05      	ldr	r3, [pc, #20]	; (ed4 <system_gclk_gen_enable+0x3c>)
     ec0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ec2:	bd70      	pop	{r4, r5, r6, pc}
     ec4:	00000dc9 	.word	0x00000dc9
     ec8:	0000026d 	.word	0x0000026d
     ecc:	40000c04 	.word	0x40000c04
     ed0:	40000c00 	.word	0x40000c00
     ed4:	000002a1 	.word	0x000002a1

00000ed8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     eda:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
     edc:	4e18      	ldr	r6, [pc, #96]	; (f40 <system_gclk_gen_get_hz+0x68>)
     ede:	47b0      	blx	r6
     ee0:	2800      	cmp	r0, #0
     ee2:	d1fb      	bne.n	edc <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
     ee4:	4b17      	ldr	r3, [pc, #92]	; (f44 <system_gclk_gen_get_hz+0x6c>)
     ee6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ee8:	4b17      	ldr	r3, [pc, #92]	; (f48 <system_gclk_gen_get_hz+0x70>)
     eea:	701f      	strb	r7, [r3, #0]
     eec:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
     eee:	47b0      	blx	r6
     ef0:	2800      	cmp	r0, #0
     ef2:	d1fc      	bne.n	eee <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     ef4:	4d15      	ldr	r5, [pc, #84]	; (f4c <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ef6:	4b16      	ldr	r3, [pc, #88]	; (f50 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     ef8:	6868      	ldr	r0, [r5, #4]
     efa:	04c0      	lsls	r0, r0, #19
     efc:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     efe:	4798      	blx	r3
     f00:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f02:	9b01      	ldr	r3, [sp, #4]
     f04:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     f06:	686b      	ldr	r3, [r5, #4]
     f08:	02db      	lsls	r3, r3, #11
     f0a:	0fdb      	lsrs	r3, r3, #31
     f0c:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f0e:	4b11      	ldr	r3, [pc, #68]	; (f54 <system_gclk_gen_get_hz+0x7c>)
     f10:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
     f12:	47b0      	blx	r6
     f14:	2800      	cmp	r0, #0
     f16:	d1fc      	bne.n	f12 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f18:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
     f1a:	4b0f      	ldr	r3, [pc, #60]	; (f58 <system_gclk_gen_get_hz+0x80>)
     f1c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     f1e:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f20:	022d      	lsls	r5, r5, #8
     f22:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
     f24:	2b00      	cmp	r3, #0
     f26:	d108      	bne.n	f3a <system_gclk_gen_get_hz+0x62>
     f28:	2d01      	cmp	r5, #1
     f2a:	d904      	bls.n	f36 <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
     f2c:	0020      	movs	r0, r4
     f2e:	0029      	movs	r1, r5
     f30:	4b0a      	ldr	r3, [pc, #40]	; (f5c <system_gclk_gen_get_hz+0x84>)
     f32:	4798      	blx	r3
     f34:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
     f36:	0020      	movs	r0, r4
     f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
     f3a:	3501      	adds	r5, #1
     f3c:	40ec      	lsrs	r4, r5
	return gen_input_hz;
     f3e:	e7fa      	b.n	f36 <system_gclk_gen_get_hz+0x5e>
     f40:	00000dc9 	.word	0x00000dc9
     f44:	0000026d 	.word	0x0000026d
     f48:	40000c04 	.word	0x40000c04
     f4c:	40000c00 	.word	0x40000c00
     f50:	00000a41 	.word	0x00000a41
     f54:	40000c08 	.word	0x40000c08
     f58:	000002a1 	.word	0x000002a1
     f5c:	00001dd1 	.word	0x00001dd1

00000f60 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f60:	b510      	push	{r4, lr}
     f62:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f64:	4b06      	ldr	r3, [pc, #24]	; (f80 <system_gclk_chan_enable+0x20>)
     f66:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f68:	4b06      	ldr	r3, [pc, #24]	; (f84 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f6a:	4a07      	ldr	r2, [pc, #28]	; (f88 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f6c:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f6e:	2380      	movs	r3, #128	; 0x80
     f70:	8851      	ldrh	r1, [r2, #2]
     f72:	01db      	lsls	r3, r3, #7
     f74:	430b      	orrs	r3, r1
     f76:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     f78:	4b04      	ldr	r3, [pc, #16]	; (f8c <system_gclk_chan_enable+0x2c>)
     f7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f7c:	bd10      	pop	{r4, pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	0000026d 	.word	0x0000026d
     f84:	40000c02 	.word	0x40000c02
     f88:	40000c00 	.word	0x40000c00
     f8c:	000002a1 	.word	0x000002a1

00000f90 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f90:	b510      	push	{r4, lr}
     f92:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f94:	4b0e      	ldr	r3, [pc, #56]	; (fd0 <system_gclk_chan_disable+0x40>)
     f96:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f98:	4b0e      	ldr	r3, [pc, #56]	; (fd4 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
     f9a:	4a0f      	ldr	r2, [pc, #60]	; (fd8 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f9c:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f9e:	4b0f      	ldr	r3, [pc, #60]	; (fdc <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     fa0:	4c0f      	ldr	r4, [pc, #60]	; (fe0 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     fa2:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
     fa4:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     fa6:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
     fa8:	4011      	ands	r1, r2
     faa:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     fac:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     fae:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     fb0:	4021      	ands	r1, r4
     fb2:	8059      	strh	r1, [r3, #2]
     fb4:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     fb6:	2280      	movs	r2, #128	; 0x80
     fb8:	01d2      	lsls	r2, r2, #7
     fba:	885c      	ldrh	r4, [r3, #2]
     fbc:	4214      	tst	r4, r2
     fbe:	d1fc      	bne.n	fba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     fc0:	885a      	ldrh	r2, [r3, #2]
     fc2:	0200      	lsls	r0, r0, #8
     fc4:	400a      	ands	r2, r1
     fc6:	4302      	orrs	r2, r0
     fc8:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
     fca:	4b06      	ldr	r3, [pc, #24]	; (fe4 <system_gclk_chan_disable+0x54>)
     fcc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fce:	bd10      	pop	{r4, pc}
     fd0:	0000026d 	.word	0x0000026d
     fd4:	40000c02 	.word	0x40000c02
     fd8:	fffff0ff 	.word	0xfffff0ff
     fdc:	40000c00 	.word	0x40000c00
     fe0:	ffffbfff 	.word	0xffffbfff
     fe4:	000002a1 	.word	0x000002a1

00000fe8 <system_gclk_chan_set_config>:
{
     fe8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     fea:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
     fec:	4b03      	ldr	r3, [pc, #12]	; (ffc <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     fee:	0224      	lsls	r4, r4, #8
     ff0:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     ff2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     ff4:	4b02      	ldr	r3, [pc, #8]	; (1000 <system_gclk_chan_set_config+0x18>)
     ff6:	b2a4      	uxth	r4, r4
     ff8:	805c      	strh	r4, [r3, #2]
}
     ffa:	bd10      	pop	{r4, pc}
     ffc:	00000f91 	.word	0x00000f91
    1000:	40000c00 	.word	0x40000c00

00001004 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1004:	b510      	push	{r4, lr}
    1006:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1008:	4b06      	ldr	r3, [pc, #24]	; (1024 <system_gclk_chan_get_hz+0x20>)
    100a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    100c:	4b06      	ldr	r3, [pc, #24]	; (1028 <system_gclk_chan_get_hz+0x24>)
    100e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1010:	4b06      	ldr	r3, [pc, #24]	; (102c <system_gclk_chan_get_hz+0x28>)
    1012:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1014:	4b06      	ldr	r3, [pc, #24]	; (1030 <system_gclk_chan_get_hz+0x2c>)
    1016:	0524      	lsls	r4, r4, #20
    1018:	0f24      	lsrs	r4, r4, #28
    101a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    101c:	0020      	movs	r0, r4
    101e:	4b05      	ldr	r3, [pc, #20]	; (1034 <system_gclk_chan_get_hz+0x30>)
    1020:	4798      	blx	r3
}
    1022:	bd10      	pop	{r4, pc}
    1024:	0000026d 	.word	0x0000026d
    1028:	40000c02 	.word	0x40000c02
    102c:	40000c00 	.word	0x40000c00
    1030:	000002a1 	.word	0x000002a1
    1034:	00000ed9 	.word	0x00000ed9

00001038 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1038:	78d3      	ldrb	r3, [r2, #3]
{
    103a:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    103c:	2b00      	cmp	r3, #0
    103e:	d135      	bne.n	10ac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1040:	7814      	ldrb	r4, [r2, #0]
    1042:	2c80      	cmp	r4, #128	; 0x80
    1044:	d003      	beq.n	104e <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1046:	2380      	movs	r3, #128	; 0x80
    1048:	0624      	lsls	r4, r4, #24
    104a:	025b      	lsls	r3, r3, #9
    104c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    104e:	2502      	movs	r5, #2
    1050:	7854      	ldrb	r4, [r2, #1]
    1052:	43ac      	bics	r4, r5
    1054:	d106      	bne.n	1064 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1056:	7894      	ldrb	r4, [r2, #2]
    1058:	2c00      	cmp	r4, #0
    105a:	d124      	bne.n	10a6 <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    105c:	2480      	movs	r4, #128	; 0x80
    105e:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1060:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1062:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1064:	7854      	ldrb	r4, [r2, #1]
    1066:	3c01      	subs	r4, #1
    1068:	2c01      	cmp	r4, #1
    106a:	d801      	bhi.n	1070 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    106c:	4c12      	ldr	r4, [pc, #72]	; (10b8 <_system_pinmux_config+0x80>)
    106e:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1070:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1072:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1074:	05e4      	lsls	r4, r4, #23
    1076:	432c      	orrs	r4, r5
    1078:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    107a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    107c:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    107e:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1080:	0624      	lsls	r4, r4, #24
    1082:	432c      	orrs	r4, r5
    1084:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1086:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1088:	78d4      	ldrb	r4, [r2, #3]
    108a:	2c00      	cmp	r4, #0
    108c:	d10a      	bne.n	10a4 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    108e:	035b      	lsls	r3, r3, #13
    1090:	d503      	bpl.n	109a <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1092:	7893      	ldrb	r3, [r2, #2]
    1094:	2b01      	cmp	r3, #1
    1096:	d10c      	bne.n	10b2 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1098:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    109a:	7853      	ldrb	r3, [r2, #1]
    109c:	3b01      	subs	r3, #1
    109e:	2b01      	cmp	r3, #1
    10a0:	d800      	bhi.n	10a4 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    10a2:	6081      	str	r1, [r0, #8]
		}
	}
}
    10a4:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    10a6:	24c0      	movs	r4, #192	; 0xc0
    10a8:	02e4      	lsls	r4, r4, #11
    10aa:	e7d9      	b.n	1060 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    10ac:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    10ae:	2300      	movs	r3, #0
    10b0:	e7de      	b.n	1070 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    10b2:	6141      	str	r1, [r0, #20]
    10b4:	e7f1      	b.n	109a <_system_pinmux_config+0x62>
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	fffbffff 	.word	0xfffbffff

000010bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    10bc:	b510      	push	{r4, lr}
    10be:	0003      	movs	r3, r0
    10c0:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    10c2:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10c4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10c6:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    10c8:	4281      	cmp	r1, r0
    10ca:	d102      	bne.n	10d2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    10cc:	4904      	ldr	r1, [pc, #16]	; (10e0 <system_pinmux_pin_set_config+0x24>)
    10ce:	01e0      	lsls	r0, r4, #7
    10d0:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    10d2:	211f      	movs	r1, #31
    10d4:	400b      	ands	r3, r1
    10d6:	391e      	subs	r1, #30
    10d8:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    10da:	4b02      	ldr	r3, [pc, #8]	; (10e4 <system_pinmux_pin_set_config+0x28>)
    10dc:	4798      	blx	r3
}
    10de:	bd10      	pop	{r4, pc}
    10e0:	41004400 	.word	0x41004400
    10e4:	00001039 	.word	0x00001039

000010e8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10e8:	4770      	bx	lr
	...

000010ec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10ec:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10ee:	4b05      	ldr	r3, [pc, #20]	; (1104 <system_init+0x18>)
    10f0:	4798      	blx	r3
	/* Initialize board hardware */
	system_board_init();
    10f2:	4b05      	ldr	r3, [pc, #20]	; (1108 <system_init+0x1c>)
    10f4:	4798      	blx	r3
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    10f6:	4b05      	ldr	r3, [pc, #20]	; (110c <system_init+0x20>)
    10f8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10fa:	4b05      	ldr	r3, [pc, #20]	; (1110 <system_init+0x24>)
    10fc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10fe:	4b05      	ldr	r3, [pc, #20]	; (1114 <system_init+0x28>)
    1100:	4798      	blx	r3
}
    1102:	bd10      	pop	{r4, pc}
    1104:	00000c61 	.word	0x00000c61
    1108:	000002d1 	.word	0x000002d1
    110c:	000010e9 	.word	0x000010e9
    1110:	000010e9 	.word	0x000010e9
    1114:	000010e9 	.word	0x000010e9

00001118 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1118:	2000      	movs	r0, #0
    111a:	4770      	bx	lr

0000111c <tcc_get_config_defaults>:
	uint8_t module_index = _tcc_get_inst_index(hw);

	/* Base counter defaults */
	config->counter.count                  = 0;

	config->counter.period                 = _tcc_maxs[module_index];
    111c:	4a37      	ldr	r2, [pc, #220]	; (11fc <tcc_get_config_defaults+0xe0>)
{
    111e:	b510      	push	{r4, lr}
	config->counter.period                 = _tcc_maxs[module_index];
    1120:	6042      	str	r2, [r0, #4]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1122:	0002      	movs	r2, r0
	config->counter.count                  = 0;
    1124:	2300      	movs	r3, #0

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1126:	0004      	movs	r4, r0
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1128:	322c      	adds	r2, #44	; 0x2c
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    112a:	3448      	adds	r4, #72	; 0x48
	config->counter.count                  = 0;
    112c:	6003      	str	r3, [r0, #0]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    112e:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1130:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1132:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1134:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    1136:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    1138:	61c3      	str	r3, [r0, #28]
    113a:	6203      	str	r3, [r0, #32]
    113c:	6243      	str	r3, [r0, #36]	; 0x24
    113e:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1140:	7503      	strb	r3, [r0, #20]
    1142:	7543      	strb	r3, [r0, #21]
    1144:	7583      	strb	r3, [r0, #22]
    1146:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1148:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    114a:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    114c:	7403      	strb	r3, [r0, #16]
    114e:	7443      	strb	r3, [r0, #17]
    1150:	7483      	strb	r3, [r0, #18]
    1152:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1154:	7013      	strb	r3, [r2, #0]
    1156:	7053      	strb	r3, [r2, #1]
    1158:	7093      	strb	r3, [r2, #2]
    115a:	70d3      	strb	r3, [r2, #3]
    115c:	7113      	strb	r3, [r2, #4]
    115e:	7153      	strb	r3, [r2, #5]
    1160:	7193      	strb	r3, [r2, #6]
    1162:	71d3      	strb	r3, [r2, #7]
    1164:	7213      	strb	r3, [r2, #8]
    1166:	7253      	strb	r3, [r2, #9]
    1168:	7293      	strb	r3, [r2, #10]
    116a:	72d3      	strb	r3, [r2, #11]
    116c:	320c      	adds	r2, #12
    116e:	7013      	strb	r3, [r2, #0]
    1170:	7053      	strb	r3, [r2, #1]
    1172:	7093      	strb	r3, [r2, #2]
    1174:	70d3      	strb	r3, [r2, #3]
    1176:	7113      	strb	r3, [r2, #4]
    1178:	7153      	strb	r3, [r2, #5]
    117a:	7193      	strb	r3, [r2, #6]
    117c:	71d3      	strb	r3, [r2, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    117e:	7213      	strb	r3, [r2, #8]
    1180:	7253      	strb	r3, [r2, #9]
    1182:	7293      	strb	r3, [r2, #10]
    1184:	72d3      	strb	r3, [r2, #11]
    1186:	7313      	strb	r3, [r2, #12]
    1188:	7353      	strb	r3, [r2, #13]
    118a:	7393      	strb	r3, [r2, #14]
    118c:	73d3      	strb	r3, [r2, #15]
    118e:	1d01      	adds	r1, r0, #4
    1190:	7023      	strb	r3, [r4, #0]
    1192:	7063      	strb	r3, [r4, #1]
    1194:	70a3      	strb	r3, [r4, #2]
    1196:	70e3      	strb	r3, [r4, #3]
    1198:	7123      	strb	r3, [r4, #4]
    119a:	7163      	strb	r3, [r4, #5]
    119c:	71a3      	strb	r3, [r4, #6]
    119e:	71e3      	strb	r3, [r4, #7]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    11a0:	7223      	strb	r3, [r4, #8]
    11a2:	7263      	strb	r3, [r4, #9]
    11a4:	72a3      	strb	r3, [r4, #10]
    11a6:	72e3      	strb	r3, [r4, #11]
    11a8:	7323      	strb	r3, [r4, #12]
    11aa:	7363      	strb	r3, [r4, #13]
    11ac:	73a3      	strb	r3, [r4, #14]
    11ae:	73e3      	strb	r3, [r4, #15]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    11b0:	3450      	adds	r4, #80	; 0x50
    11b2:	7023      	strb	r3, [r4, #0]
    11b4:	6583      	str	r3, [r0, #88]	; 0x58
    11b6:	6783      	str	r3, [r0, #120]	; 0x78
    11b8:	7063      	strb	r3, [r4, #1]
    11ba:	65c3      	str	r3, [r0, #92]	; 0x5c
    11bc:	67c3      	str	r3, [r0, #124]	; 0x7c
    11be:	70a3      	strb	r3, [r4, #2]
    11c0:	6603      	str	r3, [r0, #96]	; 0x60
    11c2:	67cb      	str	r3, [r1, #124]	; 0x7c
    11c4:	3197      	adds	r1, #151	; 0x97
    11c6:	700b      	strb	r3, [r1, #0]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    11c8:	2101      	movs	r1, #1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    11ca:	3a30      	subs	r2, #48	; 0x30
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    11cc:	6643      	str	r3, [r0, #100]	; 0x64
    11ce:	67d3      	str	r3, [r2, #124]	; 0x7c
    11d0:	3294      	adds	r2, #148	; 0x94
    11d2:	7013      	strb	r3, [r2, #0]
    11d4:	3a14      	subs	r2, #20
    11d6:	6683      	str	r3, [r0, #104]	; 0x68
    11d8:	6013      	str	r3, [r2, #0]
    11da:	7553      	strb	r3, [r2, #21]
    11dc:	3204      	adds	r2, #4
    11de:	66c3      	str	r3, [r0, #108]	; 0x6c
    11e0:	6013      	str	r3, [r2, #0]
    11e2:	7493      	strb	r3, [r2, #18]
    11e4:	3204      	adds	r2, #4
    11e6:	6703      	str	r3, [r0, #112]	; 0x70
    11e8:	6013      	str	r3, [r2, #0]
    11ea:	73d3      	strb	r3, [r2, #15]
    11ec:	6743      	str	r3, [r0, #116]	; 0x74
    11ee:	3204      	adds	r2, #4
	config->run_in_standby            = false;
    11f0:	30a1      	adds	r0, #161	; 0xa1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    11f2:	6013      	str	r3, [r2, #0]
	config->double_buffering_enabled  = true;
    11f4:	7311      	strb	r1, [r2, #12]
	config->run_in_standby            = false;
    11f6:	7003      	strb	r3, [r0, #0]
}
    11f8:	bd10      	pop	{r4, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	00ffffff 	.word	0x00ffffff

00001200 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    1200:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    1202:	4ba7      	ldr	r3, [pc, #668]	; (14a0 <tcc_init+0x2a0>)
{
    1204:	b08f      	sub	sp, #60	; 0x3c
    1206:	0006      	movs	r6, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    1208:	0008      	movs	r0, r1
{
    120a:	000d      	movs	r5, r1
    120c:	0014      	movs	r4, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    120e:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    1210:	2320      	movs	r3, #32
    1212:	4aa4      	ldr	r2, [pc, #656]	; (14a4 <tcc_init+0x2a4>)
    1214:	9009      	str	r0, [sp, #36]	; 0x24
    1216:	6a11      	ldr	r1, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
    1218:	201c      	movs	r0, #28
    121a:	430b      	orrs	r3, r1
    121c:	6213      	str	r3, [r2, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    121e:	682b      	ldr	r3, [r5, #0]
    1220:	079b      	lsls	r3, r3, #30
    1222:	d407      	bmi.n	1234 <tcc_init+0x34>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1224:	682b      	ldr	r3, [r5, #0]
    1226:	07db      	lsls	r3, r3, #31
    1228:	d404      	bmi.n	1234 <tcc_init+0x34>
    122a:	4a9f      	ldr	r2, [pc, #636]	; (14a8 <tcc_init+0x2a8>)

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
    122c:	6823      	ldr	r3, [r4, #0]
    122e:	4293      	cmp	r3, r2
    1230:	d902      	bls.n	1238 <tcc_init+0x38>
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
    1232:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    1234:	b00f      	add	sp, #60	; 0x3c
    1236:	bdf0      	pop	{r4, r5, r6, r7, pc}
		|| (config->counter.period > count_max)
    1238:	6863      	ldr	r3, [r4, #4]
    123a:	4293      	cmp	r3, r2
    123c:	d8f9      	bhi.n	1232 <tcc_init+0x32>
    123e:	0023      	movs	r3, r4
    1240:	0021      	movs	r1, r4
    1242:	331c      	adds	r3, #28
    1244:	312c      	adds	r1, #44	; 0x2c
		if ((config->compare.match[i] > count_max)
    1246:	6818      	ldr	r0, [r3, #0]
    1248:	4290      	cmp	r0, r2
    124a:	d8f2      	bhi.n	1232 <tcc_init+0x32>
    124c:	3304      	adds	r3, #4
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    124e:	428b      	cmp	r3, r1
    1250:	d1f9      	bne.n	1246 <tcc_init+0x46>
    1252:	2200      	movs	r2, #0
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1254:	2180      	movs	r1, #128	; 0x80
    1256:	9202      	str	r2, [sp, #8]
    1258:	0449      	lsls	r1, r1, #17
		if (config->capture.channel_function[i] ==
    125a:	18a0      	adds	r0, r4, r2
    125c:	7c00      	ldrb	r0, [r0, #16]
    125e:	2801      	cmp	r0, #1
    1260:	d104      	bne.n	126c <tcc_init+0x6c>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1262:	0008      	movs	r0, r1
    1264:	4090      	lsls	r0, r2
    1266:	9f02      	ldr	r7, [sp, #8]
    1268:	4307      	orrs	r7, r0
    126a:	9702      	str	r7, [sp, #8]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    126c:	3201      	adds	r2, #1
    126e:	2a04      	cmp	r2, #4
    1270:	d1f3      	bne.n	125a <tcc_init+0x5a>
	if (config->run_in_standby) {
    1272:	0022      	movs	r2, r4
    1274:	32a1      	adds	r2, #161	; 0xa1
    1276:	7812      	ldrb	r2, [r2, #0]
    1278:	2a00      	cmp	r2, #0
    127a:	d004      	beq.n	1286 <tcc_init+0x86>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    127c:	2280      	movs	r2, #128	; 0x80
    127e:	9902      	ldr	r1, [sp, #8]
    1280:	0112      	lsls	r2, r2, #4
    1282:	4311      	orrs	r1, r2
    1284:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    1286:	7a22      	ldrb	r2, [r4, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1288:	1e51      	subs	r1, r2, #1
    128a:	418a      	sbcs	r2, r1
    128c:	0092      	lsls	r2, r2, #2
    128e:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    1290:	7a62      	ldrb	r2, [r4, #9]
    1292:	2a01      	cmp	r2, #1
    1294:	d102      	bne.n	129c <tcc_init+0x9c>
		ctrlb |= TCC_CTRLBSET_DIR;
    1296:	9903      	ldr	r1, [sp, #12]
    1298:	4311      	orrs	r1, r2
    129a:	9103      	str	r1, [sp, #12]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    129c:	7b22      	ldrb	r2, [r4, #12]
    129e:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    12a0:	7ae2      	ldrb	r2, [r4, #11]
    12a2:	9207      	str	r2, [sp, #28]
    12a4:	2200      	movs	r2, #0
    12a6:	4694      	mov	ip, r2
		if (cfg->capture_channel >= cc_num) {
    12a8:	7a5f      	ldrb	r7, [r3, #9]
    12aa:	2f03      	cmp	r7, #3
    12ac:	d8c1      	bhi.n	1232 <tcc_init+0x32>
		if (cfg->filter_value > 0xF) {
    12ae:	7819      	ldrb	r1, [r3, #0]
    12b0:	290f      	cmp	r1, #15
    12b2:	d8be      	bhi.n	1232 <tcc_init+0x32>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    12b4:	20f0      	movs	r0, #240	; 0xf0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    12b6:	785a      	ldrb	r2, [r3, #1]
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    12b8:	0500      	lsls	r0, r0, #20
    12ba:	0609      	lsls	r1, r1, #24
    12bc:	4001      	ands	r1, r0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    12be:	0412      	lsls	r2, r2, #16
    12c0:	430a      	orrs	r2, r1
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    12c2:	7899      	ldrb	r1, [r3, #2]
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    12c4:	9201      	str	r2, [sp, #4]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    12c6:	1e48      	subs	r0, r1, #1
    12c8:	4181      	sbcs	r1, r0
    12ca:	01c9      	lsls	r1, r1, #7
    12cc:	9104      	str	r1, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    12ce:	78d9      	ldrb	r1, [r3, #3]
				| TCC_FCTRLA_SRC(cfg->source)
    12d0:	2203      	movs	r2, #3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    12d2:	1e48      	subs	r0, r1, #1
    12d4:	4181      	sbcs	r1, r0
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    12d6:	7918      	ldrb	r0, [r3, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    12d8:	00c9      	lsls	r1, r1, #3
    12da:	9105      	str	r1, [sp, #20]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    12dc:	1e41      	subs	r1, r0, #1
    12de:	4188      	sbcs	r0, r1
    12e0:	0101      	lsls	r1, r0, #4
				| TCC_FCTRLA_BLANK(cfg->blanking)
    12e2:	2060      	movs	r0, #96	; 0x60
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    12e4:	9108      	str	r1, [sp, #32]
				| TCC_FCTRLA_BLANK(cfg->blanking)
    12e6:	7999      	ldrb	r1, [r3, #6]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    12e8:	02bf      	lsls	r7, r7, #10
				| TCC_FCTRLA_BLANK(cfg->blanking)
    12ea:	0149      	lsls	r1, r1, #5
    12ec:	4001      	ands	r1, r0
				| TCC_FCTRLA_SRC(cfg->source)
    12ee:	7958      	ldrb	r0, [r3, #5]
    12f0:	4010      	ands	r0, r2
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    12f2:	9a01      	ldr	r2, [sp, #4]
    12f4:	4302      	orrs	r2, r0
    12f6:	430a      	orrs	r2, r1
				| TCC_FCTRLA_HALT(cfg->halt_action)
    12f8:	21c0      	movs	r1, #192	; 0xc0
    12fa:	79d8      	ldrb	r0, [r3, #7]
    12fc:	0089      	lsls	r1, r1, #2
    12fe:	0200      	lsls	r0, r0, #8
    1300:	4001      	ands	r1, r0
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1302:	20e0      	movs	r0, #224	; 0xe0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1304:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1306:	7a1a      	ldrb	r2, [r3, #8]
    1308:	01c0      	lsls	r0, r0, #7
    130a:	0312      	lsls	r2, r2, #12
    130c:	4002      	ands	r2, r0
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    130e:	20c0      	movs	r0, #192	; 0xc0
    1310:	0100      	lsls	r0, r0, #4
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1312:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1314:	4007      	ands	r7, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1316:	430f      	orrs	r7, r1
		value_buffer[i] = fault;
    1318:	4661      	mov	r1, ip
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    131a:	9a04      	ldr	r2, [sp, #16]
    131c:	330a      	adds	r3, #10
    131e:	4317      	orrs	r7, r2
    1320:	9a05      	ldr	r2, [sp, #20]
    1322:	4317      	orrs	r7, r2
    1324:	9a08      	ldr	r2, [sp, #32]
    1326:	4317      	orrs	r7, r2
		value_buffer[i] = fault;
    1328:	aa0c      	add	r2, sp, #48	; 0x30
    132a:	508f      	str	r7, [r1, r2]
    132c:	2204      	movs	r2, #4
    132e:	4494      	add	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1330:	4662      	mov	r2, ip
    1332:	2a08      	cmp	r2, #8
    1334:	d1b8      	bne.n	12a8 <tcc_init+0xa8>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1336:	2280      	movs	r2, #128	; 0x80
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1338:	2300      	movs	r3, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    133a:	0252      	lsls	r2, r2, #9
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    133c:	2002      	movs	r0, #2
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    133e:	4694      	mov	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1340:	9301      	str	r3, [sp, #4]
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1342:	30ff      	adds	r0, #255	; 0xff
    1344:	18e2      	adds	r2, r4, r3
		if (config->wave_ext.invert[i]) {
    1346:	0017      	movs	r7, r2
    1348:	3750      	adds	r7, #80	; 0x50
    134a:	783f      	ldrb	r7, [r7, #0]
    134c:	2f00      	cmp	r7, #0
    134e:	d004      	beq.n	135a <tcc_init+0x15a>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1350:	4667      	mov	r7, ip
    1352:	409f      	lsls	r7, r3
    1354:	9901      	ldr	r1, [sp, #4]
    1356:	4339      	orrs	r1, r7
    1358:	9101      	str	r1, [sp, #4]
		if (config->wave_ext.non_recoverable_fault[i].output !=
    135a:	001f      	movs	r7, r3
    135c:	3741      	adds	r7, #65	; 0x41
    135e:	5dd2      	ldrb	r2, [r2, r7]
    1360:	2a00      	cmp	r2, #0
    1362:	d007      	beq.n	1374 <tcc_init+0x174>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    1364:	2a02      	cmp	r2, #2
    1366:	d000      	beq.n	136a <tcc_init+0x16a>
    1368:	e098      	b.n	149c <tcc_init+0x29c>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    136a:	0002      	movs	r2, r0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    136c:	409a      	lsls	r2, r3
    136e:	9901      	ldr	r1, [sp, #4]
    1370:	4311      	orrs	r1, r2
    1372:	9101      	str	r1, [sp, #4]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1374:	3301      	adds	r3, #1
    1376:	2b08      	cmp	r3, #8
    1378:	d1e4      	bne.n	1344 <tcc_init+0x144>
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    137a:	2230      	movs	r2, #48	; 0x30
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    137c:	2107      	movs	r1, #7
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    137e:	7e63      	ldrb	r3, [r4, #25]
    1380:	011b      	lsls	r3, r3, #4
    1382:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1384:	7e22      	ldrb	r2, [r4, #24]
    1386:	400a      	ands	r2, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1388:	4313      	orrs	r3, r2
			wave |= (TCC_WAVE_POL0 << n);
    138a:	2280      	movs	r2, #128	; 0x80
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    138c:	9304      	str	r3, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    138e:	2300      	movs	r3, #0
			wave |= (TCC_WAVE_POL0 << n);
    1390:	0252      	lsls	r2, r2, #9
		if (wav_cfg->wave_polarity[n]) {
    1392:	18e1      	adds	r1, r4, r3
    1394:	7d09      	ldrb	r1, [r1, #20]
    1396:	2900      	cmp	r1, #0
    1398:	d004      	beq.n	13a4 <tcc_init+0x1a4>
			wave |= (TCC_WAVE_POL0 << n);
    139a:	0011      	movs	r1, r2
    139c:	4099      	lsls	r1, r3
    139e:	9804      	ldr	r0, [sp, #16]
    13a0:	4308      	orrs	r0, r1
    13a2:	9004      	str	r0, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    13a4:	3301      	adds	r3, #1
    13a6:	2b04      	cmp	r3, #4
    13a8:	d1f3      	bne.n	1392 <tcc_init+0x192>
    13aa:	0031      	movs	r1, r6
		module_inst->callback[i] = NULL;
    13ac:	2300      	movs	r3, #0
    13ae:	1d32      	adds	r2, r6, #4
    13b0:	3134      	adds	r1, #52	; 0x34
    13b2:	c208      	stmia	r2!, {r3}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    13b4:	428a      	cmp	r2, r1
    13b6:	d1fc      	bne.n	13b2 <tcc_init+0x1b2>
	module_inst->register_callback_mask = 0;
    13b8:	6373      	str	r3, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    13ba:	63b3      	str	r3, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    13bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	gclk_chan_config.source_generator = config->counter.clock_source;
    13be:	aa0a      	add	r2, sp, #40	; 0x28
	_tcc_instances[module_index] = module_inst;
    13c0:	0098      	lsls	r0, r3, #2
    13c2:	4b3a      	ldr	r3, [pc, #232]	; (14ac <tcc_init+0x2ac>)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    13c4:	0011      	movs	r1, r2
	_tcc_instances[module_index] = module_inst;
    13c6:	50c6      	str	r6, [r0, r3]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    13c8:	0023      	movs	r3, r4
	module_inst->hw = hw;
    13ca:	6035      	str	r5, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    13cc:	33a0      	adds	r3, #160	; 0xa0
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	363c      	adds	r6, #60	; 0x3c
    13d2:	7033      	strb	r3, [r6, #0]
	gclk_chan_config.source_generator = config->counter.clock_source;
    13d4:	7aa3      	ldrb	r3, [r4, #10]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    13d6:	2011      	movs	r0, #17
	gclk_chan_config.source_generator = config->counter.clock_source;
    13d8:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    13da:	4b35      	ldr	r3, [pc, #212]	; (14b0 <tcc_init+0x2b0>)
    13dc:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    13de:	4b35      	ldr	r3, [pc, #212]	; (14b4 <tcc_init+0x2b4>)
    13e0:	2011      	movs	r0, #17
    13e2:	4798      	blx	r3
    13e4:	0023      	movs	r3, r4
    13e6:	0027      	movs	r7, r4
    13e8:	0026      	movs	r6, r4
    13ea:	3378      	adds	r3, #120	; 0x78
    13ec:	3798      	adds	r7, #152	; 0x98
    13ee:	3658      	adds	r6, #88	; 0x58
    13f0:	9305      	str	r3, [sp, #20]
		if (!config->pins.enable_wave_out_pin[i]) {
    13f2:	783b      	ldrb	r3, [r7, #0]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d00d      	beq.n	1414 <tcc_init+0x214>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    13f8:	2301      	movs	r3, #1
    13fa:	a90b      	add	r1, sp, #44	; 0x2c
    13fc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    13fe:	2300      	movs	r3, #0
    1400:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1402:	3320      	adds	r3, #32
    1404:	18f3      	adds	r3, r6, r3
    1406:	781b      	ldrb	r3, [r3, #0]
		system_pinmux_pin_set_config(
    1408:	7830      	ldrb	r0, [r6, #0]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    140a:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    140c:	2301      	movs	r3, #1
    140e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1410:	4b29      	ldr	r3, [pc, #164]	; (14b8 <tcc_init+0x2b8>)
    1412:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1414:	9b05      	ldr	r3, [sp, #20]
    1416:	3604      	adds	r6, #4
    1418:	3701      	adds	r7, #1
    141a:	42b3      	cmp	r3, r6
    141c:	d1e9      	bne.n	13f2 <tcc_init+0x1f2>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    141e:	9b06      	ldr	r3, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1420:	9a07      	ldr	r2, [sp, #28]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1422:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1424:	0212      	lsls	r2, r2, #8
    1426:	4313      	orrs	r3, r2
    1428:	9a02      	ldr	r2, [sp, #8]
    142a:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    142c:	602b      	str	r3, [r5, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    142e:	2304      	movs	r3, #4
    1430:	68aa      	ldr	r2, [r5, #8]
    1432:	421a      	tst	r2, r3
    1434:	d1fc      	bne.n	1430 <tcc_init+0x230>
	hw->CTRLBCLR.reg = 0xFF;
    1436:	23ff      	movs	r3, #255	; 0xff
    1438:	712b      	strb	r3, [r5, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    143a:	3bfb      	subs	r3, #251	; 0xfb
    143c:	68aa      	ldr	r2, [r5, #8]
    143e:	421a      	tst	r2, r3
    1440:	d1fc      	bne.n	143c <tcc_init+0x23c>
	hw->CTRLBSET.reg = ctrlb;
    1442:	466b      	mov	r3, sp
    1444:	7b1b      	ldrb	r3, [r3, #12]
    1446:	716b      	strb	r3, [r5, #5]
	hw->FCTRLA.reg = faults[0];
    1448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    144a:	60eb      	str	r3, [r5, #12]
	hw->FCTRLB.reg = faults[1];
    144c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    144e:	612b      	str	r3, [r5, #16]
	hw->DRVCTRL.reg = drvctrl;
    1450:	9b01      	ldr	r3, [sp, #4]
    1452:	61ab      	str	r3, [r5, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    1454:	4b19      	ldr	r3, [pc, #100]	; (14bc <tcc_init+0x2bc>)
    1456:	68aa      	ldr	r2, [r5, #8]
    1458:	421a      	tst	r2, r3
    145a:	d1fc      	bne.n	1456 <tcc_init+0x256>
	hw->WAVE.reg = waves[0];
    145c:	9b04      	ldr	r3, [sp, #16]
    145e:	63eb      	str	r3, [r5, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1460:	2310      	movs	r3, #16
    1462:	68aa      	ldr	r2, [r5, #8]
    1464:	421a      	tst	r2, r3
    1466:	d1fc      	bne.n	1462 <tcc_init+0x262>
	hw->COUNT.reg = config->counter.count;
    1468:	6823      	ldr	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    146a:	4a15      	ldr	r2, [pc, #84]	; (14c0 <tcc_init+0x2c0>)
	hw->COUNT.reg = config->counter.count;
    146c:	636b      	str	r3, [r5, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    146e:	68ab      	ldr	r3, [r5, #8]
    1470:	4013      	ands	r3, r2
    1472:	d1fc      	bne.n	146e <tcc_init+0x26e>
	hw->PER.reg = (config->counter.period);
    1474:	6862      	ldr	r2, [r4, #4]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1476:	4913      	ldr	r1, [pc, #76]	; (14c4 <tcc_init+0x2c4>)
	hw->PER.reg = (config->counter.period);
    1478:	642a      	str	r2, [r5, #64]	; 0x40
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    147a:	000a      	movs	r2, r1
    147c:	409a      	lsls	r2, r3
		while (hw->SYNCBUSY.reg & (
    147e:	68a8      	ldr	r0, [r5, #8]
    1480:	4010      	ands	r0, r2
    1482:	d1fc      	bne.n	147e <tcc_init+0x27e>
		hw->CC[i].reg = (config->compare.match[i]);
    1484:	009a      	lsls	r2, r3, #2
    1486:	18a2      	adds	r2, r4, r2
    1488:	69d6      	ldr	r6, [r2, #28]
    148a:	001a      	movs	r2, r3
    148c:	3210      	adds	r2, #16
    148e:	0092      	lsls	r2, r2, #2
    1490:	18aa      	adds	r2, r5, r2
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1492:	3301      	adds	r3, #1
		hw->CC[i].reg = (config->compare.match[i]);
    1494:	6056      	str	r6, [r2, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1496:	2b04      	cmp	r3, #4
    1498:	d1ef      	bne.n	147a <tcc_init+0x27a>
    149a:	e6cb      	b.n	1234 <tcc_init+0x34>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    149c:	2201      	movs	r2, #1
    149e:	e765      	b.n	136c <tcc_init+0x16c>
    14a0:	00001119 	.word	0x00001119
    14a4:	40000400 	.word	0x40000400
    14a8:	00ffffff 	.word	0x00ffffff
    14ac:	20000164 	.word	0x20000164
    14b0:	00000fe9 	.word	0x00000fe9
    14b4:	00000f61 	.word	0x00000f61
    14b8:	000010bd 	.word	0x000010bd
    14bc:	00020040 	.word	0x00020040
    14c0:	00040080 	.word	0x00040080
    14c4:	00080100 	.word	0x00080100

000014c8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    14c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    14ca:	2500      	movs	r5, #0
	struct tcc_module *module =
    14cc:	4b0b      	ldr	r3, [pc, #44]	; (14fc <_tcc_interrupt_handler+0x34>)
    14ce:	0080      	lsls	r0, r0, #2
    14d0:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    14d2:	6823      	ldr	r3, [r4, #0]
    14d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    14d6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    14d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    14da:	4013      	ands	r3, r2
    14dc:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    14de:	4b08      	ldr	r3, [pc, #32]	; (1500 <_tcc_interrupt_handler+0x38>)
    14e0:	58ef      	ldr	r7, [r5, r3]
    14e2:	4237      	tst	r7, r6
    14e4:	d005      	beq.n	14f2 <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    14e6:	1963      	adds	r3, r4, r5
    14e8:	685b      	ldr	r3, [r3, #4]
    14ea:	0020      	movs	r0, r4
    14ec:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    14ee:	6823      	ldr	r3, [r4, #0]
    14f0:	62df      	str	r7, [r3, #44]	; 0x2c
    14f2:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    14f4:	2d30      	cmp	r5, #48	; 0x30
    14f6:	d1f2      	bne.n	14de <_tcc_interrupt_handler+0x16>
		}
	}
}
    14f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	20000164 	.word	0x20000164
    1500:	00003804 	.word	0x00003804

00001504 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1504:	b510      	push	{r4, lr}
    1506:	2000      	movs	r0, #0
    1508:	4b01      	ldr	r3, [pc, #4]	; (1510 <TCC0_Handler+0xc>)
    150a:	4798      	blx	r3
    150c:	bd10      	pop	{r4, pc}
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	000014c9 	.word	0x000014c9

00001514 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1514:	1c93      	adds	r3, r2, #2
    1516:	009b      	lsls	r3, r3, #2
    1518:	5019      	str	r1, [r3, r0]
    151a:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    151c:	2a02      	cmp	r2, #2
    151e:	d104      	bne.n	152a <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1520:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1522:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1524:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1526:	2000      	movs	r0, #0
    1528:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    152a:	2a03      	cmp	r2, #3
    152c:	d101      	bne.n	1532 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    152e:	321d      	adds	r2, #29
    1530:	e7f7      	b.n	1522 <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    1532:	2101      	movs	r1, #1
    1534:	4091      	lsls	r1, r2
    1536:	430b      	orrs	r3, r1
    1538:	e7f4      	b.n	1524 <tc_register_callback+0x10>
	...

0000153c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    153c:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    153e:	2601      	movs	r6, #1
	struct tc_module *module
    1540:	4b14      	ldr	r3, [pc, #80]	; (1594 <_tc_interrupt_handler+0x58>)
    1542:	0080      	lsls	r0, r0, #2
    1544:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1546:	6823      	ldr	r3, [r4, #0]
    1548:	7e22      	ldrb	r2, [r4, #24]
    154a:	7e65      	ldrb	r5, [r4, #25]
    154c:	7b9b      	ldrb	r3, [r3, #14]
    154e:	4015      	ands	r5, r2
    1550:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1552:	4235      	tst	r5, r6
    1554:	d004      	beq.n	1560 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1556:	68a3      	ldr	r3, [r4, #8]
    1558:	0020      	movs	r0, r4
    155a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    155c:	6823      	ldr	r3, [r4, #0]
    155e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1560:	2602      	movs	r6, #2
    1562:	4235      	tst	r5, r6
    1564:	d004      	beq.n	1570 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1566:	68e3      	ldr	r3, [r4, #12]
    1568:	0020      	movs	r0, r4
    156a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    156c:	6823      	ldr	r3, [r4, #0]
    156e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1570:	2610      	movs	r6, #16
    1572:	4235      	tst	r5, r6
    1574:	d004      	beq.n	1580 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1576:	6923      	ldr	r3, [r4, #16]
    1578:	0020      	movs	r0, r4
    157a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    157c:	6823      	ldr	r3, [r4, #0]
    157e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1580:	2620      	movs	r6, #32
    1582:	4235      	tst	r5, r6
    1584:	d004      	beq.n	1590 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1586:	6963      	ldr	r3, [r4, #20]
    1588:	0020      	movs	r0, r4
    158a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    158c:	6823      	ldr	r3, [r4, #0]
    158e:	739e      	strb	r6, [r3, #14]
	}
}
    1590:	bd70      	pop	{r4, r5, r6, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	20000168 	.word	0x20000168

00001598 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1598:	b510      	push	{r4, lr}
    159a:	2000      	movs	r0, #0
    159c:	4b01      	ldr	r3, [pc, #4]	; (15a4 <TC1_Handler+0xc>)
    159e:	4798      	blx	r3
    15a0:	bd10      	pop	{r4, pc}
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	0000153d 	.word	0x0000153d

000015a8 <TC2_Handler>:
    15a8:	b510      	push	{r4, lr}
    15aa:	2001      	movs	r0, #1
    15ac:	4b01      	ldr	r3, [pc, #4]	; (15b4 <TC2_Handler+0xc>)
    15ae:	4798      	blx	r3
    15b0:	bd10      	pop	{r4, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	0000153d 	.word	0x0000153d

000015b8 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    15b8:	4b06      	ldr	r3, [pc, #24]	; (15d4 <_tc_get_inst_index+0x1c>)
    15ba:	4298      	cmp	r0, r3
    15bc:	d007      	beq.n	15ce <_tc_get_inst_index+0x16>
    15be:	4a06      	ldr	r2, [pc, #24]	; (15d8 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    15c0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    15c2:	4290      	cmp	r0, r2
    15c4:	d101      	bne.n	15ca <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    15c6:	3301      	adds	r3, #1
			return i;
    15c8:	b2db      	uxtb	r3, r3
}
    15ca:	0018      	movs	r0, r3
    15cc:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    15ce:	2300      	movs	r3, #0
    15d0:	e7fa      	b.n	15c8 <_tc_get_inst_index+0x10>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	42001800 	.word	0x42001800
    15d8:	42001c00 	.word	0x42001c00

000015dc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    15dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    15de:	4b87      	ldr	r3, [pc, #540]	; (17fc <tc_init+0x220>)
{
    15e0:	0005      	movs	r5, r0
    15e2:	b085      	sub	sp, #20
	uint8_t instance = _tc_get_inst_index(hw);
    15e4:	0008      	movs	r0, r1
{
    15e6:	0014      	movs	r4, r2
    15e8:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    15ea:	4798      	blx	r3

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    15ec:	466a      	mov	r2, sp
    15ee:	2312      	movs	r3, #18
    15f0:	7113      	strb	r3, [r2, #4]
    15f2:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    15f4:	332e      	adds	r3, #46	; 0x2e
    15f6:	8113      	strh	r3, [r2, #8]
    15f8:	3340      	adds	r3, #64	; 0x40
    15fa:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    15fc:	2300      	movs	r3, #0
    15fe:	60ab      	str	r3, [r5, #8]
    1600:	60eb      	str	r3, [r5, #12]
    1602:	612b      	str	r3, [r5, #16]
    1604:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1606:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    1608:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    160a:	4b7d      	ldr	r3, [pc, #500]	; (1800 <tc_init+0x224>)
    160c:	0082      	lsls	r2, r0, #2
    160e:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1610:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1612:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    1614:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1616:	2b08      	cmp	r3, #8
    1618:	d103      	bne.n	1622 <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    161a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    161c:	07fa      	lsls	r2, r7, #31
    161e:	d500      	bpl.n	1622 <tc_init+0x46>
    1620:	e0d5      	b.n	17ce <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1622:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    1624:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1626:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1628:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    162a:	4213      	tst	r3, r2
    162c:	d000      	beq.n	1630 <tc_init+0x54>
    162e:	e0ce      	b.n	17ce <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1630:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1632:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1634:	06db      	lsls	r3, r3, #27
    1636:	d500      	bpl.n	163a <tc_init+0x5e>
    1638:	e0c9      	b.n	17ce <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    163a:	2102      	movs	r1, #2
    163c:	8833      	ldrh	r3, [r6, #0]
    163e:	400b      	ands	r3, r1
    1640:	d000      	beq.n	1644 <tc_init+0x68>
    1642:	e0c4      	b.n	17ce <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1644:	7c21      	ldrb	r1, [r4, #16]
    1646:	2900      	cmp	r1, #0
    1648:	d008      	beq.n	165c <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    164a:	a903      	add	r1, sp, #12
	config->powersave    = false;
    164c:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    164e:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1650:	7d20      	ldrb	r0, [r4, #20]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1652:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(
    1654:	4b6b      	ldr	r3, [pc, #428]	; (1804 <tc_init+0x228>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1656:	708a      	strb	r2, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1658:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    165a:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    165c:	7f23      	ldrb	r3, [r4, #28]
    165e:	2b00      	cmp	r3, #0
    1660:	d00e      	beq.n	1680 <tc_init+0xa4>
	config->powersave    = false;
    1662:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1664:	2301      	movs	r3, #1
    1666:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1668:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    166a:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    166c:	708b      	strb	r3, [r1, #2]
    166e:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1670:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1672:	331f      	adds	r3, #31
    1674:	18e3      	adds	r3, r4, r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1676:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    1678:	7818      	ldrb	r0, [r3, #0]
    167a:	4b62      	ldr	r3, [pc, #392]	; (1804 <tc_init+0x228>)
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    167c:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    167e:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1680:	007a      	lsls	r2, r7, #1
    1682:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1684:	4668      	mov	r0, sp
    1686:	2208      	movs	r2, #8
    1688:	1880      	adds	r0, r0, r2
    168a:	4662      	mov	r2, ip
    168c:	4b5e      	ldr	r3, [pc, #376]	; (1808 <tc_init+0x22c>)
    168e:	5a82      	ldrh	r2, [r0, r2]
    1690:	6a19      	ldr	r1, [r3, #32]
    1692:	430a      	orrs	r2, r1
    1694:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1696:	78a2      	ldrb	r2, [r4, #2]
    1698:	2a08      	cmp	r2, #8
    169a:	d10a      	bne.n	16b2 <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    169c:	1c79      	adds	r1, r7, #1
    169e:	004a      	lsls	r2, r1, #1
    16a0:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    16a2:	2108      	movs	r1, #8
    16a4:	466a      	mov	r2, sp
    16a6:	1852      	adds	r2, r2, r1
    16a8:	4661      	mov	r1, ip
    16aa:	6a18      	ldr	r0, [r3, #32]
    16ac:	5a52      	ldrh	r2, [r2, r1]
    16ae:	4302      	orrs	r2, r0
    16b0:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    16b2:	466a      	mov	r2, sp
    16b4:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    16b6:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    16b8:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    16ba:	466b      	mov	r3, sp
    16bc:	3304      	adds	r3, #4
    16be:	5ddf      	ldrb	r7, [r3, r7]
    16c0:	4b52      	ldr	r3, [pc, #328]	; (180c <tc_init+0x230>)
    16c2:	0038      	movs	r0, r7
    16c4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    16c6:	4b52      	ldr	r3, [pc, #328]	; (1810 <tc_init+0x234>)
    16c8:	0038      	movs	r0, r7
    16ca:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    16cc:	8923      	ldrh	r3, [r4, #8]
    16ce:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    16d0:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    16d2:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    16d4:	78a3      	ldrb	r3, [r4, #2]
    16d6:	430b      	orrs	r3, r1
	ctrla_tmp =
    16d8:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    16da:	7862      	ldrb	r2, [r4, #1]
    16dc:	2a00      	cmp	r2, #0
    16de:	d002      	beq.n	16e6 <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    16e0:	2280      	movs	r2, #128	; 0x80
    16e2:	0112      	lsls	r2, r2, #4
    16e4:	4313      	orrs	r3, r2
    16e6:	6829      	ldr	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16e8:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    16ea:	b252      	sxtb	r2, r2
    16ec:	2a00      	cmp	r2, #0
    16ee:	dbfb      	blt.n	16e8 <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    16f0:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    16f2:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    16f4:	1e5a      	subs	r2, r3, #1
    16f6:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    16f8:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    16fa:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    16fc:	2a00      	cmp	r2, #0
    16fe:	d001      	beq.n	1704 <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1700:	2201      	movs	r2, #1
    1702:	4313      	orrs	r3, r2
    1704:	6829      	ldr	r1, [r5, #0]
    1706:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1708:	b252      	sxtb	r2, r2
    170a:	2a00      	cmp	r2, #0
    170c:	dbfb      	blt.n	1706 <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    170e:	22ff      	movs	r2, #255	; 0xff
    1710:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1712:	2b00      	cmp	r3, #0
    1714:	d005      	beq.n	1722 <tc_init+0x146>
    1716:	6829      	ldr	r1, [r5, #0]
    1718:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    171a:	b252      	sxtb	r2, r2
    171c:	2a00      	cmp	r2, #0
    171e:	dbfb      	blt.n	1718 <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1720:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1722:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    1724:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1726:	2b00      	cmp	r3, #0
    1728:	d001      	beq.n	172e <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    172a:	2310      	movs	r3, #16
    172c:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    172e:	7b23      	ldrb	r3, [r4, #12]
    1730:	2b00      	cmp	r3, #0
    1732:	d001      	beq.n	1738 <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1734:	2320      	movs	r3, #32
    1736:	431a      	orrs	r2, r3
    1738:	6829      	ldr	r1, [r5, #0]
    173a:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    173c:	b25b      	sxtb	r3, r3
    173e:	2b00      	cmp	r3, #0
    1740:	dbfb      	blt.n	173a <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1742:	71b2      	strb	r2, [r6, #6]
    1744:	682b      	ldr	r3, [r5, #0]
    1746:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1748:	b252      	sxtb	r2, r2
    174a:	2a00      	cmp	r2, #0
    174c:	dbfb      	blt.n	1746 <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    174e:	792a      	ldrb	r2, [r5, #4]
    1750:	2a04      	cmp	r2, #4
    1752:	d019      	beq.n	1788 <tc_init+0x1ac>
    1754:	2a08      	cmp	r2, #8
    1756:	d03c      	beq.n	17d2 <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1758:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    175a:	2a00      	cmp	r2, #0
    175c:	d137      	bne.n	17ce <tc_init+0x1f2>
    175e:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1760:	b252      	sxtb	r2, r2
    1762:	2a00      	cmp	r2, #0
    1764:	dbfb      	blt.n	175e <tc_init+0x182>
				= config->counter_16_bit.value;
    1766:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1768:	8233      	strh	r3, [r6, #16]
    176a:	682a      	ldr	r2, [r5, #0]
    176c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    176e:	b25b      	sxtb	r3, r3
    1770:	2b00      	cmp	r3, #0
    1772:	dbfb      	blt.n	176c <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    1774:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1776:	8333      	strh	r3, [r6, #24]
    1778:	682a      	ldr	r2, [r5, #0]
    177a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    177c:	b25b      	sxtb	r3, r3
    177e:	2b00      	cmp	r3, #0
    1780:	dbfb      	blt.n	177a <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    1782:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1784:	8373      	strh	r3, [r6, #26]
    1786:	e021      	b.n	17cc <tc_init+0x1f0>
    1788:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    178a:	b252      	sxtb	r2, r2
    178c:	2a00      	cmp	r2, #0
    178e:	dbfb      	blt.n	1788 <tc_init+0x1ac>
					config->counter_8_bit.value;
    1790:	0023      	movs	r3, r4
    1792:	3328      	adds	r3, #40	; 0x28
    1794:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    1796:	7433      	strb	r3, [r6, #16]
    1798:	682a      	ldr	r2, [r5, #0]
    179a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    179c:	b25b      	sxtb	r3, r3
    179e:	2b00      	cmp	r3, #0
    17a0:	dbfb      	blt.n	179a <tc_init+0x1be>
					config->counter_8_bit.period;
    17a2:	0023      	movs	r3, r4
    17a4:	3329      	adds	r3, #41	; 0x29
    17a6:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    17a8:	7533      	strb	r3, [r6, #20]
    17aa:	682a      	ldr	r2, [r5, #0]
    17ac:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17ae:	b25b      	sxtb	r3, r3
    17b0:	2b00      	cmp	r3, #0
    17b2:	dbfb      	blt.n	17ac <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    17b4:	0023      	movs	r3, r4
    17b6:	332a      	adds	r3, #42	; 0x2a
    17b8:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    17ba:	7633      	strb	r3, [r6, #24]
    17bc:	682a      	ldr	r2, [r5, #0]
    17be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17c0:	b25b      	sxtb	r3, r3
    17c2:	2b00      	cmp	r3, #0
    17c4:	dbfb      	blt.n	17be <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    17c6:	342b      	adds	r4, #43	; 0x2b
    17c8:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    17ca:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    17cc:	2000      	movs	r0, #0
}
    17ce:	b005      	add	sp, #20
    17d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17d2:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    17d4:	b252      	sxtb	r2, r2
    17d6:	2a00      	cmp	r2, #0
    17d8:	dbfb      	blt.n	17d2 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    17da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17dc:	6133      	str	r3, [r6, #16]
    17de:	682a      	ldr	r2, [r5, #0]
    17e0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17e2:	b25b      	sxtb	r3, r3
    17e4:	2b00      	cmp	r3, #0
    17e6:	dbfb      	blt.n	17e0 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    17e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17ea:	61b3      	str	r3, [r6, #24]
    17ec:	682a      	ldr	r2, [r5, #0]
    17ee:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17f0:	b25b      	sxtb	r3, r3
    17f2:	2b00      	cmp	r3, #0
    17f4:	dbfb      	blt.n	17ee <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    17f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    17f8:	61f3      	str	r3, [r6, #28]
    17fa:	e7e7      	b.n	17cc <tc_init+0x1f0>
    17fc:	000015b9 	.word	0x000015b9
    1800:	20000168 	.word	0x20000168
    1804:	000010bd 	.word	0x000010bd
    1808:	40000400 	.word	0x40000400
    180c:	00000fe9 	.word	0x00000fe9
    1810:	00000f61 	.word	0x00000f61

00001814 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1814:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1816:	6804      	ldr	r4, [r0, #0]
    1818:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    181a:	b25b      	sxtb	r3, r3
    181c:	2b00      	cmp	r3, #0
    181e:	dbfb      	blt.n	1818 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1820:	7903      	ldrb	r3, [r0, #4]
    1822:	2b04      	cmp	r3, #4
    1824:	d00c      	beq.n	1840 <tc_set_compare_value+0x2c>
    1826:	2b08      	cmp	r3, #8
    1828:	d012      	beq.n	1850 <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    182a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    182c:	2b00      	cmp	r3, #0
    182e:	d10e      	bne.n	184e <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    1830:	2017      	movs	r0, #23
			if (channel_index <
    1832:	2901      	cmp	r1, #1
    1834:	d80b      	bhi.n	184e <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    1836:	310c      	adds	r1, #12
						(uint16_t)compare;
    1838:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    183a:	0049      	lsls	r1, r1, #1
    183c:	530a      	strh	r2, [r1, r4]
    183e:	e005      	b.n	184c <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    1840:	2017      	movs	r0, #23
			if (channel_index <
    1842:	2901      	cmp	r1, #1
    1844:	d803      	bhi.n	184e <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    1846:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1848:	1861      	adds	r1, r4, r1
    184a:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    184c:	2000      	movs	r0, #0
}
    184e:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1850:	2017      	movs	r0, #23
			if (channel_index <
    1852:	2901      	cmp	r1, #1
    1854:	d8fb      	bhi.n	184e <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    1856:	3106      	adds	r1, #6
    1858:	0089      	lsls	r1, r1, #2
    185a:	510a      	str	r2, [r1, r4]
    185c:	e7f6      	b.n	184c <tc_set_compare_value+0x38>

0000185e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    185e:	e7fe      	b.n	185e <Dummy_Handler>

00001860 <Reset_Handler>:
        if (pSrc != pDest) {
    1860:	4821      	ldr	r0, [pc, #132]	; (18e8 <Reset_Handler+0x88>)
    1862:	4922      	ldr	r1, [pc, #136]	; (18ec <Reset_Handler+0x8c>)
{
    1864:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1866:	4288      	cmp	r0, r1
    1868:	d004      	beq.n	1874 <Reset_Handler+0x14>
    186a:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    186c:	4c20      	ldr	r4, [pc, #128]	; (18f0 <Reset_Handler+0x90>)
    186e:	18ca      	adds	r2, r1, r3
    1870:	42a2      	cmp	r2, r4
    1872:	d332      	bcc.n	18da <Reset_Handler+0x7a>
                *pDest++ = 0;
    1874:	2100      	movs	r1, #0
    1876:	4b1f      	ldr	r3, [pc, #124]	; (18f4 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1878:	4a1f      	ldr	r2, [pc, #124]	; (18f8 <Reset_Handler+0x98>)
    187a:	4293      	cmp	r3, r2
    187c:	d331      	bcc.n	18e2 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    187e:	21ff      	movs	r1, #255	; 0xff
    1880:	4b1e      	ldr	r3, [pc, #120]	; (18fc <Reset_Handler+0x9c>)
    1882:	4a1f      	ldr	r2, [pc, #124]	; (1900 <Reset_Handler+0xa0>)
    1884:	438b      	bics	r3, r1
    1886:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1888:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    188a:	250c      	movs	r5, #12
    188c:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    188e:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1890:	4b1c      	ldr	r3, [pc, #112]	; (1904 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1892:	481d      	ldr	r0, [pc, #116]	; (1908 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1894:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1896:	78c3      	ldrb	r3, [r0, #3]
    1898:	39fc      	subs	r1, #252	; 0xfc
    189a:	438b      	bics	r3, r1
    189c:	4313      	orrs	r3, r2
    189e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    18a0:	78c3      	ldrb	r3, [r0, #3]
    18a2:	43ab      	bics	r3, r5
    18a4:	4323      	orrs	r3, r4
    18a6:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    18a8:	4b18      	ldr	r3, [pc, #96]	; (190c <Reset_Handler+0xac>)
    18aa:	7b98      	ldrb	r0, [r3, #14]
    18ac:	43b0      	bics	r0, r6
    18ae:	0006      	movs	r6, r0
    18b0:	2020      	movs	r0, #32
    18b2:	4330      	orrs	r0, r6
    18b4:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    18b6:	7b98      	ldrb	r0, [r3, #14]
    18b8:	43a8      	bics	r0, r5
    18ba:	4304      	orrs	r4, r0
    18bc:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    18be:	7b98      	ldrb	r0, [r3, #14]
    18c0:	4388      	bics	r0, r1
    18c2:	4302      	orrs	r2, r0
    18c4:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    18c6:	2380      	movs	r3, #128	; 0x80
    18c8:	4a11      	ldr	r2, [pc, #68]	; (1910 <Reset_Handler+0xb0>)
    18ca:	6851      	ldr	r1, [r2, #4]
    18cc:	430b      	orrs	r3, r1
    18ce:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    18d0:	4b10      	ldr	r3, [pc, #64]	; (1914 <Reset_Handler+0xb4>)
    18d2:	4798      	blx	r3
        main();
    18d4:	4b10      	ldr	r3, [pc, #64]	; (1918 <Reset_Handler+0xb8>)
    18d6:	4798      	blx	r3
    18d8:	e7fe      	b.n	18d8 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    18da:	58c5      	ldr	r5, [r0, r3]
    18dc:	3304      	adds	r3, #4
    18de:	6015      	str	r5, [r2, #0]
    18e0:	e7c5      	b.n	186e <Reset_Handler+0xe>
                *pDest++ = 0;
    18e2:	c302      	stmia	r3!, {r1}
    18e4:	e7c9      	b.n	187a <Reset_Handler+0x1a>
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	000038d8 	.word	0x000038d8
    18ec:	20000000 	.word	0x20000000
    18f0:	2000000c 	.word	0x2000000c
    18f4:	2000000c 	.word	0x2000000c
    18f8:	200001d0 	.word	0x200001d0
    18fc:	00000000 	.word	0x00000000
    1900:	e000ed00 	.word	0xe000ed00
    1904:	410070fc 	.word	0x410070fc
    1908:	41005000 	.word	0x41005000
    190c:	41004800 	.word	0x41004800
    1910:	41004000 	.word	0x41004000
    1914:	000037b1 	.word	0x000037b1
    1918:	00001da1 	.word	0x00001da1

0000191c <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    191c:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    191e:	2364      	movs	r3, #100	; 0x64
	
}



void i2c_master_setup(void){
    1920:	b570      	push	{r4, r5, r6, lr}
    1922:	b08e      	sub	sp, #56	; 0x38
    1924:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1926:	0389      	lsls	r1, r1, #14
    1928:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    192a:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    192c:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    192e:	4b1e      	ldr	r3, [pc, #120]	; (19a8 <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    1930:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1932:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1934:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    1936:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1938:	310a      	adds	r1, #10
    193a:	4469      	add	r1, sp
    193c:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    193e:	a90c      	add	r1, sp, #48	; 0x30
    1940:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1942:	2131      	movs	r1, #49	; 0x31
    1944:	4469      	add	r1, sp
    1946:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    1948:	2132      	movs	r1, #50	; 0x32
    194a:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    194c:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    194e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1950:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1952:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1954:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1956:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    1958:	700b      	strb	r3, [r1, #0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    195a:	33d7      	adds	r3, #215	; 0xd7
    195c:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    195e:	4e13      	ldr	r6, [pc, #76]	; (19ac <i2c_master_setup+0x90>)
	config_i2c_master.buffer_timeout = 10000;
    1960:	4b13      	ldr	r3, [pc, #76]	; (19b0 <i2c_master_setup+0x94>)
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1962:	4914      	ldr	r1, [pc, #80]	; (19b4 <i2c_master_setup+0x98>)
	config_i2c_master.buffer_timeout = 10000;
    1964:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1966:	0030      	movs	r0, r6
    1968:	4b13      	ldr	r3, [pc, #76]	; (19b8 <i2c_master_setup+0x9c>)
    196a:	4798      	blx	r3
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    196c:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    196e:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1970:	69ec      	ldr	r4, [r5, #28]
    1972:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    1974:	d1fc      	bne.n	1970 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1976:	2302      	movs	r3, #2
    1978:	682a      	ldr	r2, [r5, #0]
    197a:	4313      	orrs	r3, r2
    197c:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    197e:	6830      	ldr	r0, [r6, #0]
    1980:	4b0e      	ldr	r3, [pc, #56]	; (19bc <i2c_master_setup+0xa0>)
    1982:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1984:	231f      	movs	r3, #31
    1986:	4018      	ands	r0, r3
    1988:	3b1e      	subs	r3, #30
    198a:	4083      	lsls	r3, r0
    198c:	4a0c      	ldr	r2, [pc, #48]	; (19c0 <i2c_master_setup+0xa4>)
    198e:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1990:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1992:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1994:	8b69      	ldrh	r1, [r5, #26]
    1996:	4211      	tst	r1, r2
    1998:	d103      	bne.n	19a2 <i2c_master_setup+0x86>
		timeout_counter++;
    199a:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    199c:	4284      	cmp	r4, r0
    199e:	d3f9      	bcc.n	1994 <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    19a0:	836a      	strh	r2, [r5, #26]
	i2c_master_enable(&i2c_master_instance);
	
}
    19a2:	b00e      	add	sp, #56	; 0x38
    19a4:	bd70      	pop	{r4, r5, r6, pc}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	00000d48 	.word	0x00000d48
    19ac:	20000170 	.word	0x20000170
    19b0:	00002710 	.word	0x00002710
    19b4:	42001000 	.word	0x42001000
    19b8:	00000325 	.word	0x00000325
    19bc:	000009ad 	.word	0x000009ad
    19c0:	e000e100 	.word	0xe000e100

000019c4 <sys_tc_callback>:
	static int tick_count_50ms;
	static int tick_count_100ms;
	static int tick_count_200ms;
	
	
	tick_count_1ms++;
    19c4:	4916      	ldr	r1, [pc, #88]	; (1a20 <sys_tc_callback+0x5c>)
    19c6:	680b      	ldr	r3, [r1, #0]
    19c8:	1c5a      	adds	r2, r3, #1
    19ca:	600a      	str	r2, [r1, #0]
    19cc:	4b15      	ldr	r3, [pc, #84]	; (1a24 <sys_tc_callback+0x60>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
    19ce:	2a09      	cmp	r2, #9
    19d0:	dd07      	ble.n	19e2 <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
    19d2:	681a      	ldr	r2, [r3, #0]
    19d4:	3201      	adds	r2, #1
    19d6:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
    19d8:	2200      	movs	r2, #0
    19da:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
    19dc:	2101      	movs	r1, #1
    19de:	4a12      	ldr	r2, [pc, #72]	; (1a28 <sys_tc_callback+0x64>)
    19e0:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
    19e2:	6819      	ldr	r1, [r3, #0]
    19e4:	4a11      	ldr	r2, [pc, #68]	; (1a2c <sys_tc_callback+0x68>)
    19e6:	2904      	cmp	r1, #4
    19e8:	dd04      	ble.n	19f4 <sys_tc_callback+0x30>
	{
		tick_count_50ms++;
    19ea:	6811      	ldr	r1, [r2, #0]
    19ec:	3101      	adds	r1, #1
    19ee:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
    19f0:	2100      	movs	r1, #0
    19f2:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
    19f4:	6811      	ldr	r1, [r2, #0]
    19f6:	4b0e      	ldr	r3, [pc, #56]	; (1a30 <sys_tc_callback+0x6c>)
    19f8:	2901      	cmp	r1, #1
    19fa:	dd04      	ble.n	1a06 <sys_tc_callback+0x42>
	{
		tick_count_100ms++;
    19fc:	6819      	ldr	r1, [r3, #0]
    19fe:	3101      	adds	r1, #1
    1a00:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
    1a02:	2100      	movs	r1, #0
    1a04:	6011      	str	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
    1a06:	681a      	ldr	r2, [r3, #0]
    1a08:	2a01      	cmp	r2, #1
    1a0a:	dd08      	ble.n	1a1e <sys_tc_callback+0x5a>
	{
		tick_count_200ms++;
    1a0c:	4909      	ldr	r1, [pc, #36]	; (1a34 <sys_tc_callback+0x70>)
    1a0e:	680a      	ldr	r2, [r1, #0]
    1a10:	3201      	adds	r2, #1
    1a12:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
    1a14:	2200      	movs	r2, #0
    1a16:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
    1a18:	4b07      	ldr	r3, [pc, #28]	; (1a38 <sys_tc_callback+0x74>)
    1a1a:	3201      	adds	r2, #1
    1a1c:	701a      	strb	r2, [r3, #0]
	}
	
	
	
	
}
    1a1e:	4770      	bx	lr
    1a20:	20000064 	.word	0x20000064
    1a24:	20000060 	.word	0x20000060
    1a28:	20000059 	.word	0x20000059
    1a2c:	2000006c 	.word	0x2000006c
    1a30:	2000005c 	.word	0x2000005c
    1a34:	20000068 	.word	0x20000068
    1a38:	2000005a 	.word	0x2000005a

00001a3c <configure_port_pins>:
{
    1a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
    1a3e:	2300      	movs	r3, #0
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1a40:	2702      	movs	r7, #2
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1a42:	2601      	movs	r6, #1
    1a44:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1a46:	4d09      	ldr	r5, [pc, #36]	; (1a6c <configure_port_pins+0x30>)
    1a48:	0021      	movs	r1, r4
    1a4a:	201b      	movs	r0, #27
    1a4c:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    1a4e:	70a3      	strb	r3, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1a50:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1a52:	47a8      	blx	r5
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1a54:	0021      	movs	r1, r4
    1a56:	2006      	movs	r0, #6
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1a58:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;						// START AT PULL DOWN.
    1a5a:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1a5c:	47a8      	blx	r5
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
    1a5e:	0021      	movs	r1, r4
    1a60:	2007      	movs	r0, #7
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1a62:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL UP.
    1a64:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
    1a66:	47a8      	blx	r5
}
    1a68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	00000305 	.word	0x00000305

00001a70 <configure_system_tc>:
{
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);
	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1a70:	21a0      	movs	r1, #160	; 0xa0
{
    1a72:	b510      	push	{r4, lr}
    1a74:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1a76:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1a78:	00c9      	lsls	r1, r1, #3
    1a7a:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
    1a7c:	212d      	movs	r1, #45	; 0x2d
    1a7e:	2300      	movs	r3, #0
    1a80:	206f      	movs	r0, #111	; 0x6f
    1a82:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    1a84:	8513      	strh	r3, [r2, #40]	; 0x28
    1a86:	7008      	strb	r0, [r1, #0]
	
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1a88:	2101      	movs	r1, #1
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING ; OG PA16 (LED)
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA15E_TC1_WO1; // PA15 FOR TESTING ; OG PA16 (LED)
	
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1a8a:	4c12      	ldr	r4, [pc, #72]	; (1ad4 <configure_system_tc+0x64>)
	config->clock_source               = GCLK_GENERATOR_0;
    1a8c:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1a8e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1a90:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1a92:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1a94:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1a96:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1a98:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1a9a:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1a9c:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1a9e:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1aa0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1aa2:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1aa4:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1aa6:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    1aa8:	7411      	strb	r1, [r2, #16]
	config_tc.counter_size = TC_COUNTER_SIZE;
    1aaa:	3304      	adds	r3, #4
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING ; OG PA16 (LED)
    1aac:	310e      	adds	r1, #14
	config_tc.counter_size = TC_COUNTER_SIZE;
    1aae:	7093      	strb	r3, [r2, #2]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING ; OG PA16 (LED)
    1ab0:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA15E_TC1_WO1; // PA15 FOR TESTING ; OG PA16 (LED)
    1ab2:	6193      	str	r3, [r2, #24]
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1ab4:	4908      	ldr	r1, [pc, #32]	; (1ad8 <configure_system_tc+0x68>)
    1ab6:	4b09      	ldr	r3, [pc, #36]	; (1adc <configure_system_tc+0x6c>)
    1ab8:	0020      	movs	r0, r4
    1aba:	4798      	blx	r3
    1abc:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1abe:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1ac0:	b252      	sxtb	r2, r2
    1ac2:	2a00      	cmp	r2, #0
    1ac4:	dbfb      	blt.n	1abe <configure_system_tc+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1ac6:	2202      	movs	r2, #2
    1ac8:	8819      	ldrh	r1, [r3, #0]
    1aca:	430a      	orrs	r2, r1
    1acc:	801a      	strh	r2, [r3, #0]
	tc_enable (&system_timer_instance);
}
    1ace:	b00e      	add	sp, #56	; 0x38
    1ad0:	bd10      	pop	{r4, pc}
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	20000198 	.word	0x20000198
    1ad8:	42001800 	.word	0x42001800
    1adc:	000015dd 	.word	0x000015dd

00001ae0 <system_tc_callbacks>:

void system_tc_callbacks (void)
{
    1ae0:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
    1ae2:	4c0c      	ldr	r4, [pc, #48]	; (1b14 <system_tc_callbacks+0x34>)
    1ae4:	2200      	movs	r2, #0
    1ae6:	490c      	ldr	r1, [pc, #48]	; (1b18 <system_tc_callbacks+0x38>)
    1ae8:	0020      	movs	r0, r4
    1aea:	4b0c      	ldr	r3, [pc, #48]	; (1b1c <system_tc_callbacks+0x3c>)
    1aec:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1aee:	6820      	ldr	r0, [r4, #0]
    1af0:	4b0b      	ldr	r3, [pc, #44]	; (1b20 <system_tc_callbacks+0x40>)
    1af2:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1af4:	4b0b      	ldr	r3, [pc, #44]	; (1b24 <system_tc_callbacks+0x44>)
    1af6:	5c1a      	ldrb	r2, [r3, r0]
    1af8:	231f      	movs	r3, #31
    1afa:	401a      	ands	r2, r3
    1afc:	3b1e      	subs	r3, #30
    1afe:	0019      	movs	r1, r3
    1b00:	4091      	lsls	r1, r2
    1b02:	4a09      	ldr	r2, [pc, #36]	; (1b28 <system_tc_callbacks+0x48>)
    1b04:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1b06:	7e62      	ldrb	r2, [r4, #25]
    1b08:	431a      	orrs	r2, r3
    1b0a:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1b0c:	6822      	ldr	r2, [r4, #0]
    1b0e:	7353      	strb	r3, [r2, #13]
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback (&system_timer_instance, TC_CALLBACK_OVERFLOW);
}
    1b10:	bd10      	pop	{r4, pc}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	20000198 	.word	0x20000198
    1b18:	000019c5 	.word	0x000019c5
    1b1c:	00001515 	.word	0x00001515
    1b20:	000015b9 	.word	0x000015b9
    1b24:	00003834 	.word	0x00003834
    1b28:	e000e100 	.word	0xe000e100

00001b2c <is_button_pressed>:
	return (port_base->IN.reg & pin_mask);
    1b2c:	4b12      	ldr	r3, [pc, #72]	; (1b78 <is_button_pressed+0x4c>)
    1b2e:	4a13      	ldr	r2, [pc, #76]	; (1b7c <is_button_pressed+0x50>)
    1b30:	6a19      	ldr	r1, [r3, #32]
    1b32:	4b13      	ldr	r3, [pc, #76]	; (1b80 <is_button_pressed+0x54>)


bool is_button_pressed (void)
{

	if (!port_pin_get_input_level (SW0_PIN))
    1b34:	0449      	lsls	r1, r1, #17
    1b36:	d416      	bmi.n	1b66 <is_button_pressed+0x3a>
	{
		BUTTON_PRESS_STATUS = true;
		press_delay_count--;
    1b38:	6819      	ldr	r1, [r3, #0]
    1b3a:	3901      	subs	r1, #1
    1b3c:	6019      	str	r1, [r3, #0]
		long_press_delay_count--;
    1b3e:	6811      	ldr	r1, [r2, #0]
    1b40:	3901      	subs	r1, #1
		
	}else
	{
		BUTTON_PRESS_STATUS = false;
		press_delay_count = DELAY_DEBOUNCE_CN;
		long_press_delay_count = DELAY_PRESS_CN;
    1b42:	6011      	str	r1, [r2, #0]
		
	}
	
	// long press delay logic
	if (long_press_delay_count <= 0){
    1b44:	6811      	ldr	r1, [r2, #0]
    1b46:	2900      	cmp	r1, #0
    1b48:	dc04      	bgt.n	1b54 <is_button_pressed+0x28>
		LongPressFlag = true;
    1b4a:	2001      	movs	r0, #1
    1b4c:	490d      	ldr	r1, [pc, #52]	; (1b84 <is_button_pressed+0x58>)
    1b4e:	7008      	strb	r0, [r1, #0]
		long_press_delay_count = 0 ;
    1b50:	2100      	movs	r1, #0
    1b52:	6011      	str	r1, [r2, #0]
    1b54:	2000      	movs	r0, #0
	}
	
	// debounce logic
	if (press_delay_count <= 0)
    1b56:	6819      	ldr	r1, [r3, #0]
    1b58:	4a0b      	ldr	r2, [pc, #44]	; (1b88 <is_button_pressed+0x5c>)
    1b5a:	4281      	cmp	r1, r0
    1b5c:	dc08      	bgt.n	1b70 <is_button_pressed+0x44>
	{
		BUTTON_RELEASE_STATUS = false;
    1b5e:	7010      	strb	r0, [r2, #0]
		press_delay_count = 0;
    1b60:	6018      	str	r0, [r3, #0]
		return true;
    1b62:	3001      	adds	r0, #1
	else
	{
		BUTTON_RELEASE_STATUS = true;
		return false;
	}
}
    1b64:	4770      	bx	lr
		press_delay_count = DELAY_DEBOUNCE_CN;
    1b66:	2102      	movs	r1, #2
    1b68:	6019      	str	r1, [r3, #0]
		long_press_delay_count = DELAY_PRESS_CN;
    1b6a:	318f      	adds	r1, #143	; 0x8f
    1b6c:	31ff      	adds	r1, #255	; 0xff
    1b6e:	e7e8      	b.n	1b42 <is_button_pressed+0x16>
		BUTTON_RELEASE_STATUS = true;
    1b70:	2301      	movs	r3, #1
    1b72:	7013      	strb	r3, [r2, #0]
		return false;
    1b74:	e7f6      	b.n	1b64 <is_button_pressed+0x38>
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	41004400 	.word	0x41004400
    1b7c:	20000004 	.word	0x20000004
    1b80:	20000008 	.word	0x20000008
    1b84:	20000055 	.word	0x20000055
    1b88:	20000054 	.word	0x20000054

00001b8c <pwm_motor_cleanup>:



void pwm_motor_cleanup(void);

void pwm_motor_cleanup(void){
    1b8c:	b570      	push	{r4, r5, r6, lr}
	PULSATING_MOTOR_ROUTINE = false;
    1b8e:	2400      	movs	r4, #0
    1b90:	4b0d      	ldr	r3, [pc, #52]	; (1bc8 <pwm_motor_cleanup+0x3c>)
	toggle_count = 0;
	tc_set_compare_value (&pwm_generator_instance,
    1b92:	4d0e      	ldr	r5, [pc, #56]	; (1bcc <pwm_motor_cleanup+0x40>)
	PULSATING_MOTOR_ROUTINE = false;
    1b94:	701c      	strb	r4, [r3, #0]
	toggle_count = 0;
    1b96:	4b0e      	ldr	r3, [pc, #56]	; (1bd0 <pwm_motor_cleanup+0x44>)
	tc_set_compare_value (&pwm_generator_instance,
    1b98:	2215      	movs	r2, #21
	toggle_count = 0;
    1b9a:	701c      	strb	r4, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,
    1b9c:	0021      	movs	r1, r4
    1b9e:	4b0d      	ldr	r3, [pc, #52]	; (1bd4 <pwm_motor_cleanup+0x48>)
    1ba0:	0028      	movs	r0, r5
    1ba2:	4798      	blx	r3
	TC_COMPARE_CAPTURE_CHANNEL_0,
	INITIAL_DUTY_CYCLE);
	PWM_RUNNING = false;
    1ba4:	4b0c      	ldr	r3, [pc, #48]	; (1bd8 <pwm_motor_cleanup+0x4c>)
    1ba6:	701c      	strb	r4, [r3, #0]
    1ba8:	682b      	ldr	r3, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1baa:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1bac:	b252      	sxtb	r2, r2
    1bae:	2a00      	cmp	r2, #0
    1bb0:	dbfb      	blt.n	1baa <pwm_motor_cleanup+0x1e>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1bb2:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1bb4:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1bb6:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    1bb8:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1bba:	881a      	ldrh	r2, [r3, #0]
    1bbc:	438a      	bics	r2, r1
    1bbe:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1bc0:	2240      	movs	r2, #64	; 0x40
    1bc2:	4b06      	ldr	r3, [pc, #24]	; (1bdc <pwm_motor_cleanup+0x50>)
    1bc4:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
    1bc6:	bd70      	pop	{r4, r5, r6, pc}
    1bc8:	20000057 	.word	0x20000057
    1bcc:	200001b4 	.word	0x200001b4
    1bd0:	20000070 	.word	0x20000070
    1bd4:	00001815 	.word	0x00001815
    1bd8:	20000058 	.word	0x20000058
    1bdc:	41004400 	.word	0x41004400

00001be0 <cycle_pwm_duty>:




void cycle_pwm_duty (void)
{
    1be0:	b510      	push	{r4, lr}
	if (PWM_RUNNING)
    1be2:	4b0d      	ldr	r3, [pc, #52]	; (1c18 <cycle_pwm_duty+0x38>)
    1be4:	781b      	ldrb	r3, [r3, #0]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d005      	beq.n	1bf6 <cycle_pwm_duty+0x16>
	{
		
		if (toggle_count == 2)
    1bea:	4b0c      	ldr	r3, [pc, #48]	; (1c1c <cycle_pwm_duty+0x3c>)
    1bec:	781b      	ldrb	r3, [r3, #0]
    1bee:	2b02      	cmp	r3, #2
    1bf0:	d102      	bne.n	1bf8 <cycle_pwm_duty+0x18>
		{
			//tc_set_compare_value (&pwm_generator_instance,
			//TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
			set_red();
    1bf2:	4b0b      	ldr	r3, [pc, #44]	; (1c20 <cycle_pwm_duty+0x40>)
		else if (toggle_count == 3)
		{
			//tc_set_compare_value (&pwm_generator_instance,
			//TC_COMPARE_CAPTURE_CHANNEL_0,
			//SECOND_DUTY_CYCLE);	
			set_blue();
    1bf4:	4798      	blx	r3
		else if (toggle_count > 4)
		{
			pwm_motor_cleanup();
		}
	}
}
    1bf6:	bd10      	pop	{r4, pc}
		else if (toggle_count == 3)
    1bf8:	2b03      	cmp	r3, #3
    1bfa:	d101      	bne.n	1c00 <cycle_pwm_duty+0x20>
			set_blue();
    1bfc:	4b09      	ldr	r3, [pc, #36]	; (1c24 <cycle_pwm_duty+0x44>)
    1bfe:	e7f9      	b.n	1bf4 <cycle_pwm_duty+0x14>
		else if (toggle_count == 4)
    1c00:	2b04      	cmp	r3, #4
    1c02:	d104      	bne.n	1c0e <cycle_pwm_duty+0x2e>
			PULSATING_MOTOR_ROUTINE = true;
    1c04:	2201      	movs	r2, #1
    1c06:	4b08      	ldr	r3, [pc, #32]	; (1c28 <cycle_pwm_duty+0x48>)
    1c08:	701a      	strb	r2, [r3, #0]
			set_green();
    1c0a:	4b08      	ldr	r3, [pc, #32]	; (1c2c <cycle_pwm_duty+0x4c>)
    1c0c:	e7f2      	b.n	1bf4 <cycle_pwm_duty+0x14>
		else if (toggle_count > 4)
    1c0e:	2b04      	cmp	r3, #4
    1c10:	d9f1      	bls.n	1bf6 <cycle_pwm_duty+0x16>
			pwm_motor_cleanup();
    1c12:	4b07      	ldr	r3, [pc, #28]	; (1c30 <cycle_pwm_duty+0x50>)
    1c14:	4798      	blx	r3
}
    1c16:	e7ee      	b.n	1bf6 <cycle_pwm_duty+0x16>
    1c18:	20000058 	.word	0x20000058
    1c1c:	20000070 	.word	0x20000070
    1c20:	0000023d 	.word	0x0000023d
    1c24:	0000025d 	.word	0x0000025d
    1c28:	20000057 	.word	0x20000057
    1c2c:	0000024d 	.word	0x0000024d
    1c30:	00001b8d 	.word	0x00001b8d

00001c34 <regular_routine>:
{
    1c34:	b510      	push	{r4, lr}
	if (is_button_pressed()){
    1c36:	4b1a      	ldr	r3, [pc, #104]	; (1ca0 <regular_routine+0x6c>)
    1c38:	4798      	blx	r3
    1c3a:	2800      	cmp	r0, #0
    1c3c:	d026      	beq.n	1c8c <regular_routine+0x58>
		if (LongPressFlag){
    1c3e:	4b19      	ldr	r3, [pc, #100]	; (1ca4 <regular_routine+0x70>)
    1c40:	781b      	ldrb	r3, [r3, #0]
    1c42:	2b00      	cmp	r3, #0
    1c44:	d006      	beq.n	1c54 <regular_routine+0x20>
    1c46:	2280      	movs	r2, #128	; 0x80
    1c48:	4b17      	ldr	r3, [pc, #92]	; (1ca8 <regular_routine+0x74>)
    1c4a:	0252      	lsls	r2, r2, #9
    1c4c:	615a      	str	r2, [r3, #20]
			pwm_motor_cleanup();
    1c4e:	4b17      	ldr	r3, [pc, #92]	; (1cac <regular_routine+0x78>)
					cycle_pwm_duty ();
    1c50:	4798      	blx	r3
    1c52:	e01b      	b.n	1c8c <regular_routine+0x58>
			if (!motor_status_changed)
    1c54:	4916      	ldr	r1, [pc, #88]	; (1cb0 <regular_routine+0x7c>)
    1c56:	780b      	ldrb	r3, [r1, #0]
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d117      	bne.n	1c8c <regular_routine+0x58>
				toggle_count++;
    1c5c:	4a15      	ldr	r2, [pc, #84]	; (1cb4 <regular_routine+0x80>)
    1c5e:	7813      	ldrb	r3, [r2, #0]
    1c60:	3301      	adds	r3, #1
    1c62:	7013      	strb	r3, [r2, #0]
				motor_status_changed = true;
    1c64:	2201      	movs	r2, #1
				if (!PWM_RUNNING)
    1c66:	4b14      	ldr	r3, [pc, #80]	; (1cb8 <regular_routine+0x84>)
				motor_status_changed = true;
    1c68:	700a      	strb	r2, [r1, #0]
				if (!PWM_RUNNING)
    1c6a:	7819      	ldrb	r1, [r3, #0]
    1c6c:	2900      	cmp	r1, #0
    1c6e:	d115      	bne.n	1c9c <regular_routine+0x68>
					PWM_RUNNING = true;
    1c70:	701a      	strb	r2, [r3, #0]
    1c72:	4b12      	ldr	r3, [pc, #72]	; (1cbc <regular_routine+0x88>)
    1c74:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c76:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    1c78:	b252      	sxtb	r2, r2
    1c7a:	2a00      	cmp	r2, #0
    1c7c:	dbfb      	blt.n	1c76 <regular_routine+0x42>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1c7e:	2202      	movs	r2, #2
    1c80:	8819      	ldrh	r1, [r3, #0]
    1c82:	430a      	orrs	r2, r1
    1c84:	801a      	strh	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    1c86:	2240      	movs	r2, #64	; 0x40
    1c88:	4b07      	ldr	r3, [pc, #28]	; (1ca8 <regular_routine+0x74>)
    1c8a:	619a      	str	r2, [r3, #24]
	if (BUTTON_RELEASE_STATUS)
    1c8c:	4b0c      	ldr	r3, [pc, #48]	; (1cc0 <regular_routine+0x8c>)
    1c8e:	781b      	ldrb	r3, [r3, #0]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d002      	beq.n	1c9a <regular_routine+0x66>
		motor_status_changed = false;
    1c94:	2200      	movs	r2, #0
    1c96:	4b06      	ldr	r3, [pc, #24]	; (1cb0 <regular_routine+0x7c>)
    1c98:	701a      	strb	r2, [r3, #0]
}
    1c9a:	bd10      	pop	{r4, pc}
					cycle_pwm_duty ();
    1c9c:	4b09      	ldr	r3, [pc, #36]	; (1cc4 <regular_routine+0x90>)
    1c9e:	e7d7      	b.n	1c50 <regular_routine+0x1c>
    1ca0:	00001b2d 	.word	0x00001b2d
    1ca4:	20000055 	.word	0x20000055
    1ca8:	41004400 	.word	0x41004400
    1cac:	00001b8d 	.word	0x00001b8d
    1cb0:	2000005b 	.word	0x2000005b
    1cb4:	20000070 	.word	0x20000070
    1cb8:	20000058 	.word	0x20000058
    1cbc:	200001b4 	.word	0x200001b4
    1cc0:	20000054 	.word	0x20000054
    1cc4:	00001be1 	.word	0x00001be1

00001cc8 <get_vbus_state>:
	return (port_base->IN.reg & pin_mask);
    1cc8:	4b01      	ldr	r3, [pc, #4]	; (1cd0 <get_vbus_state+0x8>)
    1cca:	6a1b      	ldr	r3, [r3, #32]

void get_vbus_state(void);

void get_vbus_state(void){
	VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
}
    1ccc:	4770      	bx	lr
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	41004400 	.word	0x41004400

00001cd4 <toggle_nsleep>:
}


void toggle_nsleep(void);

void toggle_nsleep(void){
    1cd4:	b510      	push	{r4, lr}
	static bool PULSATING_MOTOR = false;
	if (PULSATING_MOTOR_ROUTINE){
    1cd6:	4b0b      	ldr	r3, [pc, #44]	; (1d04 <toggle_nsleep+0x30>)
    1cd8:	781b      	ldrb	r3, [r3, #0]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d00b      	beq.n	1cf6 <toggle_nsleep+0x22>
    1cde:	2180      	movs	r1, #128	; 0x80
		if (PULSATING_MOTOR){
    1ce0:	4a09      	ldr	r2, [pc, #36]	; (1d08 <toggle_nsleep+0x34>)
    1ce2:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <toggle_nsleep+0x38>)
    1ce4:	7814      	ldrb	r4, [r2, #0]
    1ce6:	2040      	movs	r0, #64	; 0x40
    1ce8:	0249      	lsls	r1, r1, #9
    1cea:	2c00      	cmp	r4, #0
    1cec:	d004      	beq.n	1cf8 <toggle_nsleep+0x24>
		port_base->OUTCLR.reg = pin_mask;
    1cee:	6158      	str	r0, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1cf0:	6199      	str	r1, [r3, #24]
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			LED_Off(LED0_PIN);
			PULSATING_MOTOR = false;
    1cf2:	2300      	movs	r3, #0
    1cf4:	7013      	strb	r3, [r2, #0]
			PULSATING_MOTOR = true;
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
			LED_On(LED0_PIN);
		}
	}
}
    1cf6:	bd10      	pop	{r4, pc}
			PULSATING_MOTOR = true;
    1cf8:	2401      	movs	r4, #1
    1cfa:	7014      	strb	r4, [r2, #0]
    1cfc:	6198      	str	r0, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    1cfe:	6159      	str	r1, [r3, #20]
}
    1d00:	e7f9      	b.n	1cf6 <toggle_nsleep+0x22>
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	20000057 	.word	0x20000057
    1d08:	20000056 	.word	0x20000056
    1d0c:	41004400 	.word	0x41004400

00001d10 <system_logic>:
/* LOGIC MACHINE		                                                */
/************************************************************************/

void system_logic(void);

void system_logic(void){
    1d10:	b510      	push	{r4, lr}
	
	if (BATTERY_LOWEST){
		//display_battery_state();					// Blink Red
	}
	
	if (SYS_TICK_10MS){
    1d12:	4b08      	ldr	r3, [pc, #32]	; (1d34 <system_logic+0x24>)
    1d14:	781a      	ldrb	r2, [r3, #0]
    1d16:	2a00      	cmp	r2, #0
    1d18:	d003      	beq.n	1d22 <system_logic+0x12>
		SYS_TICK_10MS = false;
    1d1a:	2200      	movs	r2, #0
    1d1c:	701a      	strb	r2, [r3, #0]
		regular_routine();
    1d1e:	4b06      	ldr	r3, [pc, #24]	; (1d38 <system_logic+0x28>)
    1d20:	4798      	blx	r3
	}
	
	if (SYS_TICK_200MS){
    1d22:	4b06      	ldr	r3, [pc, #24]	; (1d3c <system_logic+0x2c>)
    1d24:	781a      	ldrb	r2, [r3, #0]
    1d26:	2a00      	cmp	r2, #0
    1d28:	d003      	beq.n	1d32 <system_logic+0x22>
		SYS_TICK_200MS = false;
    1d2a:	2200      	movs	r2, #0
    1d2c:	701a      	strb	r2, [r3, #0]
		toggle_nsleep();
    1d2e:	4b04      	ldr	r3, [pc, #16]	; (1d40 <system_logic+0x30>)
    1d30:	4798      	blx	r3
	}


}
    1d32:	bd10      	pop	{r4, pc}
    1d34:	20000059 	.word	0x20000059
    1d38:	00001c35 	.word	0x00001c35
    1d3c:	2000005a 	.word	0x2000005a
    1d40:	00001cd5 	.word	0x00001cd5

00001d44 <startup_default_pin_state>:
    1d44:	2240      	movs	r2, #64	; 0x40
    1d46:	4b02      	ldr	r3, [pc, #8]	; (1d50 <startup_default_pin_state+0xc>)
    1d48:	615a      	str	r2, [r3, #20]
    1d4a:	1892      	adds	r2, r2, r2
    1d4c:	615a      	str	r2, [r3, #20]
void startup_default_pin_state(void);

void startup_default_pin_state(void){
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
	port_pin_set_output_level(SWITCH_OFF_PIN,LOW);
}
    1d4e:	4770      	bx	lr
    1d50:	41004400 	.word	0x41004400

00001d54 <startup_sys_configs>:


void startup_sys_configs(void);


void startup_sys_configs(void){
    1d54:	b510      	push	{r4, lr}
	system_init ();									// System Initialize
    1d56:	4b0a      	ldr	r3, [pc, #40]	; (1d80 <startup_sys_configs+0x2c>)
    1d58:	4798      	blx	r3
	cpu_irq_enable();
    1d5a:	2201      	movs	r2, #1
    1d5c:	4b09      	ldr	r3, [pc, #36]	; (1d84 <startup_sys_configs+0x30>)
    1d5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1d60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d64:	b662      	cpsie	i
	system_interrupt_enable_global ();				// System Interrupts
	configure_port_pins ();							// System PORTs
    1d66:	4b08      	ldr	r3, [pc, #32]	; (1d88 <startup_sys_configs+0x34>)
    1d68:	4798      	blx	r3
	startup_default_pin_state();
    1d6a:	4b08      	ldr	r3, [pc, #32]	; (1d8c <startup_sys_configs+0x38>)
    1d6c:	4798      	blx	r3
	configure_system_tc ();							// System Clock
    1d6e:	4b08      	ldr	r3, [pc, #32]	; (1d90 <startup_sys_configs+0x3c>)
    1d70:	4798      	blx	r3
	system_tc_callbacks ();							// System Clock Callback
    1d72:	4b08      	ldr	r3, [pc, #32]	; (1d94 <startup_sys_configs+0x40>)
    1d74:	4798      	blx	r3
	i2c_master_setup();
    1d76:	4b08      	ldr	r3, [pc, #32]	; (1d98 <startup_sys_configs+0x44>)
    1d78:	4798      	blx	r3
	configure_pwm_tcc();
    1d7a:	4b08      	ldr	r3, [pc, #32]	; (1d9c <startup_sys_configs+0x48>)
    1d7c:	4798      	blx	r3
	//reset_chip();
}
    1d7e:	bd10      	pop	{r4, pc}
    1d80:	000010ed 	.word	0x000010ed
    1d84:	20000000 	.word	0x20000000
    1d88:	00001a3d 	.word	0x00001a3d
    1d8c:	00001d45 	.word	0x00001d45
    1d90:	00001a71 	.word	0x00001a71
    1d94:	00001ae1 	.word	0x00001ae1
    1d98:	0000191d 	.word	0x0000191d
    1d9c:	000001b1 	.word	0x000001b1

00001da0 <main>:



int main (void)
{
    1da0:	b510      	push	{r4, lr}
	startup_sys_configs ();
    1da2:	4b03      	ldr	r3, [pc, #12]	; (1db0 <main+0x10>)
    1da4:	4798      	blx	r3
	get_vbus_state();
    1da6:	4b03      	ldr	r3, [pc, #12]	; (1db4 <main+0x14>)
    1da8:	4798      	blx	r3
	
	while (true)
	{
		system_state();								// Get latest system_state
		system_logic();								// Invoke System Logic
    1daa:	4b03      	ldr	r3, [pc, #12]	; (1db8 <main+0x18>)
    1dac:	e7fa      	b.n	1da4 <main+0x4>
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	00001d55 	.word	0x00001d55
    1db4:	00001cc9 	.word	0x00001cc9
    1db8:	00001d11 	.word	0x00001d11

00001dbc <__gnu_thumb1_case_uqi>:
    1dbc:	b402      	push	{r1}
    1dbe:	4671      	mov	r1, lr
    1dc0:	0849      	lsrs	r1, r1, #1
    1dc2:	0049      	lsls	r1, r1, #1
    1dc4:	5c09      	ldrb	r1, [r1, r0]
    1dc6:	0049      	lsls	r1, r1, #1
    1dc8:	448e      	add	lr, r1
    1dca:	bc02      	pop	{r1}
    1dcc:	4770      	bx	lr
    1dce:	46c0      	nop			; (mov r8, r8)

00001dd0 <__udivsi3>:
    1dd0:	2200      	movs	r2, #0
    1dd2:	0843      	lsrs	r3, r0, #1
    1dd4:	428b      	cmp	r3, r1
    1dd6:	d374      	bcc.n	1ec2 <__udivsi3+0xf2>
    1dd8:	0903      	lsrs	r3, r0, #4
    1dda:	428b      	cmp	r3, r1
    1ddc:	d35f      	bcc.n	1e9e <__udivsi3+0xce>
    1dde:	0a03      	lsrs	r3, r0, #8
    1de0:	428b      	cmp	r3, r1
    1de2:	d344      	bcc.n	1e6e <__udivsi3+0x9e>
    1de4:	0b03      	lsrs	r3, r0, #12
    1de6:	428b      	cmp	r3, r1
    1de8:	d328      	bcc.n	1e3c <__udivsi3+0x6c>
    1dea:	0c03      	lsrs	r3, r0, #16
    1dec:	428b      	cmp	r3, r1
    1dee:	d30d      	bcc.n	1e0c <__udivsi3+0x3c>
    1df0:	22ff      	movs	r2, #255	; 0xff
    1df2:	0209      	lsls	r1, r1, #8
    1df4:	ba12      	rev	r2, r2
    1df6:	0c03      	lsrs	r3, r0, #16
    1df8:	428b      	cmp	r3, r1
    1dfa:	d302      	bcc.n	1e02 <__udivsi3+0x32>
    1dfc:	1212      	asrs	r2, r2, #8
    1dfe:	0209      	lsls	r1, r1, #8
    1e00:	d065      	beq.n	1ece <__udivsi3+0xfe>
    1e02:	0b03      	lsrs	r3, r0, #12
    1e04:	428b      	cmp	r3, r1
    1e06:	d319      	bcc.n	1e3c <__udivsi3+0x6c>
    1e08:	e000      	b.n	1e0c <__udivsi3+0x3c>
    1e0a:	0a09      	lsrs	r1, r1, #8
    1e0c:	0bc3      	lsrs	r3, r0, #15
    1e0e:	428b      	cmp	r3, r1
    1e10:	d301      	bcc.n	1e16 <__udivsi3+0x46>
    1e12:	03cb      	lsls	r3, r1, #15
    1e14:	1ac0      	subs	r0, r0, r3
    1e16:	4152      	adcs	r2, r2
    1e18:	0b83      	lsrs	r3, r0, #14
    1e1a:	428b      	cmp	r3, r1
    1e1c:	d301      	bcc.n	1e22 <__udivsi3+0x52>
    1e1e:	038b      	lsls	r3, r1, #14
    1e20:	1ac0      	subs	r0, r0, r3
    1e22:	4152      	adcs	r2, r2
    1e24:	0b43      	lsrs	r3, r0, #13
    1e26:	428b      	cmp	r3, r1
    1e28:	d301      	bcc.n	1e2e <__udivsi3+0x5e>
    1e2a:	034b      	lsls	r3, r1, #13
    1e2c:	1ac0      	subs	r0, r0, r3
    1e2e:	4152      	adcs	r2, r2
    1e30:	0b03      	lsrs	r3, r0, #12
    1e32:	428b      	cmp	r3, r1
    1e34:	d301      	bcc.n	1e3a <__udivsi3+0x6a>
    1e36:	030b      	lsls	r3, r1, #12
    1e38:	1ac0      	subs	r0, r0, r3
    1e3a:	4152      	adcs	r2, r2
    1e3c:	0ac3      	lsrs	r3, r0, #11
    1e3e:	428b      	cmp	r3, r1
    1e40:	d301      	bcc.n	1e46 <__udivsi3+0x76>
    1e42:	02cb      	lsls	r3, r1, #11
    1e44:	1ac0      	subs	r0, r0, r3
    1e46:	4152      	adcs	r2, r2
    1e48:	0a83      	lsrs	r3, r0, #10
    1e4a:	428b      	cmp	r3, r1
    1e4c:	d301      	bcc.n	1e52 <__udivsi3+0x82>
    1e4e:	028b      	lsls	r3, r1, #10
    1e50:	1ac0      	subs	r0, r0, r3
    1e52:	4152      	adcs	r2, r2
    1e54:	0a43      	lsrs	r3, r0, #9
    1e56:	428b      	cmp	r3, r1
    1e58:	d301      	bcc.n	1e5e <__udivsi3+0x8e>
    1e5a:	024b      	lsls	r3, r1, #9
    1e5c:	1ac0      	subs	r0, r0, r3
    1e5e:	4152      	adcs	r2, r2
    1e60:	0a03      	lsrs	r3, r0, #8
    1e62:	428b      	cmp	r3, r1
    1e64:	d301      	bcc.n	1e6a <__udivsi3+0x9a>
    1e66:	020b      	lsls	r3, r1, #8
    1e68:	1ac0      	subs	r0, r0, r3
    1e6a:	4152      	adcs	r2, r2
    1e6c:	d2cd      	bcs.n	1e0a <__udivsi3+0x3a>
    1e6e:	09c3      	lsrs	r3, r0, #7
    1e70:	428b      	cmp	r3, r1
    1e72:	d301      	bcc.n	1e78 <__udivsi3+0xa8>
    1e74:	01cb      	lsls	r3, r1, #7
    1e76:	1ac0      	subs	r0, r0, r3
    1e78:	4152      	adcs	r2, r2
    1e7a:	0983      	lsrs	r3, r0, #6
    1e7c:	428b      	cmp	r3, r1
    1e7e:	d301      	bcc.n	1e84 <__udivsi3+0xb4>
    1e80:	018b      	lsls	r3, r1, #6
    1e82:	1ac0      	subs	r0, r0, r3
    1e84:	4152      	adcs	r2, r2
    1e86:	0943      	lsrs	r3, r0, #5
    1e88:	428b      	cmp	r3, r1
    1e8a:	d301      	bcc.n	1e90 <__udivsi3+0xc0>
    1e8c:	014b      	lsls	r3, r1, #5
    1e8e:	1ac0      	subs	r0, r0, r3
    1e90:	4152      	adcs	r2, r2
    1e92:	0903      	lsrs	r3, r0, #4
    1e94:	428b      	cmp	r3, r1
    1e96:	d301      	bcc.n	1e9c <__udivsi3+0xcc>
    1e98:	010b      	lsls	r3, r1, #4
    1e9a:	1ac0      	subs	r0, r0, r3
    1e9c:	4152      	adcs	r2, r2
    1e9e:	08c3      	lsrs	r3, r0, #3
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d301      	bcc.n	1ea8 <__udivsi3+0xd8>
    1ea4:	00cb      	lsls	r3, r1, #3
    1ea6:	1ac0      	subs	r0, r0, r3
    1ea8:	4152      	adcs	r2, r2
    1eaa:	0883      	lsrs	r3, r0, #2
    1eac:	428b      	cmp	r3, r1
    1eae:	d301      	bcc.n	1eb4 <__udivsi3+0xe4>
    1eb0:	008b      	lsls	r3, r1, #2
    1eb2:	1ac0      	subs	r0, r0, r3
    1eb4:	4152      	adcs	r2, r2
    1eb6:	0843      	lsrs	r3, r0, #1
    1eb8:	428b      	cmp	r3, r1
    1eba:	d301      	bcc.n	1ec0 <__udivsi3+0xf0>
    1ebc:	004b      	lsls	r3, r1, #1
    1ebe:	1ac0      	subs	r0, r0, r3
    1ec0:	4152      	adcs	r2, r2
    1ec2:	1a41      	subs	r1, r0, r1
    1ec4:	d200      	bcs.n	1ec8 <__udivsi3+0xf8>
    1ec6:	4601      	mov	r1, r0
    1ec8:	4152      	adcs	r2, r2
    1eca:	4610      	mov	r0, r2
    1ecc:	4770      	bx	lr
    1ece:	e7ff      	b.n	1ed0 <__udivsi3+0x100>
    1ed0:	b501      	push	{r0, lr}
    1ed2:	2000      	movs	r0, #0
    1ed4:	f000 f806 	bl	1ee4 <__aeabi_idiv0>
    1ed8:	bd02      	pop	{r1, pc}
    1eda:	46c0      	nop			; (mov r8, r8)

00001edc <__aeabi_uidivmod>:
    1edc:	2900      	cmp	r1, #0
    1ede:	d0f7      	beq.n	1ed0 <__udivsi3+0x100>
    1ee0:	e776      	b.n	1dd0 <__udivsi3>
    1ee2:	4770      	bx	lr

00001ee4 <__aeabi_idiv0>:
    1ee4:	4770      	bx	lr
    1ee6:	46c0      	nop			; (mov r8, r8)

00001ee8 <__aeabi_dadd>:
    1ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eea:	4645      	mov	r5, r8
    1eec:	46de      	mov	lr, fp
    1eee:	4657      	mov	r7, sl
    1ef0:	464e      	mov	r6, r9
    1ef2:	030c      	lsls	r4, r1, #12
    1ef4:	b5e0      	push	{r5, r6, r7, lr}
    1ef6:	004e      	lsls	r6, r1, #1
    1ef8:	0fc9      	lsrs	r1, r1, #31
    1efa:	4688      	mov	r8, r1
    1efc:	000d      	movs	r5, r1
    1efe:	0a61      	lsrs	r1, r4, #9
    1f00:	0f44      	lsrs	r4, r0, #29
    1f02:	430c      	orrs	r4, r1
    1f04:	00c7      	lsls	r7, r0, #3
    1f06:	0319      	lsls	r1, r3, #12
    1f08:	0058      	lsls	r0, r3, #1
    1f0a:	0fdb      	lsrs	r3, r3, #31
    1f0c:	469b      	mov	fp, r3
    1f0e:	0a4b      	lsrs	r3, r1, #9
    1f10:	0f51      	lsrs	r1, r2, #29
    1f12:	430b      	orrs	r3, r1
    1f14:	0d76      	lsrs	r6, r6, #21
    1f16:	0d40      	lsrs	r0, r0, #21
    1f18:	0019      	movs	r1, r3
    1f1a:	00d2      	lsls	r2, r2, #3
    1f1c:	45d8      	cmp	r8, fp
    1f1e:	d100      	bne.n	1f22 <__aeabi_dadd+0x3a>
    1f20:	e0ae      	b.n	2080 <__aeabi_dadd+0x198>
    1f22:	1a35      	subs	r5, r6, r0
    1f24:	2d00      	cmp	r5, #0
    1f26:	dc00      	bgt.n	1f2a <__aeabi_dadd+0x42>
    1f28:	e0f6      	b.n	2118 <__aeabi_dadd+0x230>
    1f2a:	2800      	cmp	r0, #0
    1f2c:	d10f      	bne.n	1f4e <__aeabi_dadd+0x66>
    1f2e:	4313      	orrs	r3, r2
    1f30:	d100      	bne.n	1f34 <__aeabi_dadd+0x4c>
    1f32:	e0db      	b.n	20ec <__aeabi_dadd+0x204>
    1f34:	1e6b      	subs	r3, r5, #1
    1f36:	2b00      	cmp	r3, #0
    1f38:	d000      	beq.n	1f3c <__aeabi_dadd+0x54>
    1f3a:	e137      	b.n	21ac <__aeabi_dadd+0x2c4>
    1f3c:	1aba      	subs	r2, r7, r2
    1f3e:	4297      	cmp	r7, r2
    1f40:	41bf      	sbcs	r7, r7
    1f42:	1a64      	subs	r4, r4, r1
    1f44:	427f      	negs	r7, r7
    1f46:	1be4      	subs	r4, r4, r7
    1f48:	2601      	movs	r6, #1
    1f4a:	0017      	movs	r7, r2
    1f4c:	e024      	b.n	1f98 <__aeabi_dadd+0xb0>
    1f4e:	4bc6      	ldr	r3, [pc, #792]	; (2268 <__aeabi_dadd+0x380>)
    1f50:	429e      	cmp	r6, r3
    1f52:	d04d      	beq.n	1ff0 <__aeabi_dadd+0x108>
    1f54:	2380      	movs	r3, #128	; 0x80
    1f56:	041b      	lsls	r3, r3, #16
    1f58:	4319      	orrs	r1, r3
    1f5a:	2d38      	cmp	r5, #56	; 0x38
    1f5c:	dd00      	ble.n	1f60 <__aeabi_dadd+0x78>
    1f5e:	e107      	b.n	2170 <__aeabi_dadd+0x288>
    1f60:	2d1f      	cmp	r5, #31
    1f62:	dd00      	ble.n	1f66 <__aeabi_dadd+0x7e>
    1f64:	e138      	b.n	21d8 <__aeabi_dadd+0x2f0>
    1f66:	2020      	movs	r0, #32
    1f68:	1b43      	subs	r3, r0, r5
    1f6a:	469a      	mov	sl, r3
    1f6c:	000b      	movs	r3, r1
    1f6e:	4650      	mov	r0, sl
    1f70:	4083      	lsls	r3, r0
    1f72:	4699      	mov	r9, r3
    1f74:	0013      	movs	r3, r2
    1f76:	4648      	mov	r0, r9
    1f78:	40eb      	lsrs	r3, r5
    1f7a:	4318      	orrs	r0, r3
    1f7c:	0003      	movs	r3, r0
    1f7e:	4650      	mov	r0, sl
    1f80:	4082      	lsls	r2, r0
    1f82:	1e50      	subs	r0, r2, #1
    1f84:	4182      	sbcs	r2, r0
    1f86:	40e9      	lsrs	r1, r5
    1f88:	431a      	orrs	r2, r3
    1f8a:	1aba      	subs	r2, r7, r2
    1f8c:	1a61      	subs	r1, r4, r1
    1f8e:	4297      	cmp	r7, r2
    1f90:	41a4      	sbcs	r4, r4
    1f92:	0017      	movs	r7, r2
    1f94:	4264      	negs	r4, r4
    1f96:	1b0c      	subs	r4, r1, r4
    1f98:	0223      	lsls	r3, r4, #8
    1f9a:	d562      	bpl.n	2062 <__aeabi_dadd+0x17a>
    1f9c:	0264      	lsls	r4, r4, #9
    1f9e:	0a65      	lsrs	r5, r4, #9
    1fa0:	2d00      	cmp	r5, #0
    1fa2:	d100      	bne.n	1fa6 <__aeabi_dadd+0xbe>
    1fa4:	e0df      	b.n	2166 <__aeabi_dadd+0x27e>
    1fa6:	0028      	movs	r0, r5
    1fa8:	f001 fbe4 	bl	3774 <__clzsi2>
    1fac:	0003      	movs	r3, r0
    1fae:	3b08      	subs	r3, #8
    1fb0:	2b1f      	cmp	r3, #31
    1fb2:	dd00      	ble.n	1fb6 <__aeabi_dadd+0xce>
    1fb4:	e0d2      	b.n	215c <__aeabi_dadd+0x274>
    1fb6:	2220      	movs	r2, #32
    1fb8:	003c      	movs	r4, r7
    1fba:	1ad2      	subs	r2, r2, r3
    1fbc:	409d      	lsls	r5, r3
    1fbe:	40d4      	lsrs	r4, r2
    1fc0:	409f      	lsls	r7, r3
    1fc2:	4325      	orrs	r5, r4
    1fc4:	429e      	cmp	r6, r3
    1fc6:	dd00      	ble.n	1fca <__aeabi_dadd+0xe2>
    1fc8:	e0c4      	b.n	2154 <__aeabi_dadd+0x26c>
    1fca:	1b9e      	subs	r6, r3, r6
    1fcc:	1c73      	adds	r3, r6, #1
    1fce:	2b1f      	cmp	r3, #31
    1fd0:	dd00      	ble.n	1fd4 <__aeabi_dadd+0xec>
    1fd2:	e0f1      	b.n	21b8 <__aeabi_dadd+0x2d0>
    1fd4:	2220      	movs	r2, #32
    1fd6:	0038      	movs	r0, r7
    1fd8:	0029      	movs	r1, r5
    1fda:	1ad2      	subs	r2, r2, r3
    1fdc:	40d8      	lsrs	r0, r3
    1fde:	4091      	lsls	r1, r2
    1fe0:	4097      	lsls	r7, r2
    1fe2:	002c      	movs	r4, r5
    1fe4:	4301      	orrs	r1, r0
    1fe6:	1e78      	subs	r0, r7, #1
    1fe8:	4187      	sbcs	r7, r0
    1fea:	40dc      	lsrs	r4, r3
    1fec:	2600      	movs	r6, #0
    1fee:	430f      	orrs	r7, r1
    1ff0:	077b      	lsls	r3, r7, #29
    1ff2:	d009      	beq.n	2008 <__aeabi_dadd+0x120>
    1ff4:	230f      	movs	r3, #15
    1ff6:	403b      	ands	r3, r7
    1ff8:	2b04      	cmp	r3, #4
    1ffa:	d005      	beq.n	2008 <__aeabi_dadd+0x120>
    1ffc:	1d3b      	adds	r3, r7, #4
    1ffe:	42bb      	cmp	r3, r7
    2000:	41bf      	sbcs	r7, r7
    2002:	427f      	negs	r7, r7
    2004:	19e4      	adds	r4, r4, r7
    2006:	001f      	movs	r7, r3
    2008:	0223      	lsls	r3, r4, #8
    200a:	d52c      	bpl.n	2066 <__aeabi_dadd+0x17e>
    200c:	4b96      	ldr	r3, [pc, #600]	; (2268 <__aeabi_dadd+0x380>)
    200e:	3601      	adds	r6, #1
    2010:	429e      	cmp	r6, r3
    2012:	d100      	bne.n	2016 <__aeabi_dadd+0x12e>
    2014:	e09a      	b.n	214c <__aeabi_dadd+0x264>
    2016:	4645      	mov	r5, r8
    2018:	4b94      	ldr	r3, [pc, #592]	; (226c <__aeabi_dadd+0x384>)
    201a:	08ff      	lsrs	r7, r7, #3
    201c:	401c      	ands	r4, r3
    201e:	0760      	lsls	r0, r4, #29
    2020:	0576      	lsls	r6, r6, #21
    2022:	0264      	lsls	r4, r4, #9
    2024:	4307      	orrs	r7, r0
    2026:	0b24      	lsrs	r4, r4, #12
    2028:	0d76      	lsrs	r6, r6, #21
    202a:	2100      	movs	r1, #0
    202c:	0324      	lsls	r4, r4, #12
    202e:	0b23      	lsrs	r3, r4, #12
    2030:	0d0c      	lsrs	r4, r1, #20
    2032:	4a8f      	ldr	r2, [pc, #572]	; (2270 <__aeabi_dadd+0x388>)
    2034:	0524      	lsls	r4, r4, #20
    2036:	431c      	orrs	r4, r3
    2038:	4014      	ands	r4, r2
    203a:	0533      	lsls	r3, r6, #20
    203c:	4323      	orrs	r3, r4
    203e:	005b      	lsls	r3, r3, #1
    2040:	07ed      	lsls	r5, r5, #31
    2042:	085b      	lsrs	r3, r3, #1
    2044:	432b      	orrs	r3, r5
    2046:	0038      	movs	r0, r7
    2048:	0019      	movs	r1, r3
    204a:	bc3c      	pop	{r2, r3, r4, r5}
    204c:	4690      	mov	r8, r2
    204e:	4699      	mov	r9, r3
    2050:	46a2      	mov	sl, r4
    2052:	46ab      	mov	fp, r5
    2054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2056:	4664      	mov	r4, ip
    2058:	4304      	orrs	r4, r0
    205a:	d100      	bne.n	205e <__aeabi_dadd+0x176>
    205c:	e211      	b.n	2482 <__aeabi_dadd+0x59a>
    205e:	0004      	movs	r4, r0
    2060:	4667      	mov	r7, ip
    2062:	077b      	lsls	r3, r7, #29
    2064:	d1c6      	bne.n	1ff4 <__aeabi_dadd+0x10c>
    2066:	4645      	mov	r5, r8
    2068:	0760      	lsls	r0, r4, #29
    206a:	08ff      	lsrs	r7, r7, #3
    206c:	4307      	orrs	r7, r0
    206e:	08e4      	lsrs	r4, r4, #3
    2070:	4b7d      	ldr	r3, [pc, #500]	; (2268 <__aeabi_dadd+0x380>)
    2072:	429e      	cmp	r6, r3
    2074:	d030      	beq.n	20d8 <__aeabi_dadd+0x1f0>
    2076:	0324      	lsls	r4, r4, #12
    2078:	0576      	lsls	r6, r6, #21
    207a:	0b24      	lsrs	r4, r4, #12
    207c:	0d76      	lsrs	r6, r6, #21
    207e:	e7d4      	b.n	202a <__aeabi_dadd+0x142>
    2080:	1a33      	subs	r3, r6, r0
    2082:	469a      	mov	sl, r3
    2084:	2b00      	cmp	r3, #0
    2086:	dd78      	ble.n	217a <__aeabi_dadd+0x292>
    2088:	2800      	cmp	r0, #0
    208a:	d031      	beq.n	20f0 <__aeabi_dadd+0x208>
    208c:	4876      	ldr	r0, [pc, #472]	; (2268 <__aeabi_dadd+0x380>)
    208e:	4286      	cmp	r6, r0
    2090:	d0ae      	beq.n	1ff0 <__aeabi_dadd+0x108>
    2092:	2080      	movs	r0, #128	; 0x80
    2094:	0400      	lsls	r0, r0, #16
    2096:	4301      	orrs	r1, r0
    2098:	4653      	mov	r3, sl
    209a:	2b38      	cmp	r3, #56	; 0x38
    209c:	dc00      	bgt.n	20a0 <__aeabi_dadd+0x1b8>
    209e:	e0e9      	b.n	2274 <__aeabi_dadd+0x38c>
    20a0:	430a      	orrs	r2, r1
    20a2:	1e51      	subs	r1, r2, #1
    20a4:	418a      	sbcs	r2, r1
    20a6:	2100      	movs	r1, #0
    20a8:	19d2      	adds	r2, r2, r7
    20aa:	42ba      	cmp	r2, r7
    20ac:	41bf      	sbcs	r7, r7
    20ae:	1909      	adds	r1, r1, r4
    20b0:	427c      	negs	r4, r7
    20b2:	0017      	movs	r7, r2
    20b4:	190c      	adds	r4, r1, r4
    20b6:	0223      	lsls	r3, r4, #8
    20b8:	d5d3      	bpl.n	2062 <__aeabi_dadd+0x17a>
    20ba:	4b6b      	ldr	r3, [pc, #428]	; (2268 <__aeabi_dadd+0x380>)
    20bc:	3601      	adds	r6, #1
    20be:	429e      	cmp	r6, r3
    20c0:	d100      	bne.n	20c4 <__aeabi_dadd+0x1dc>
    20c2:	e13a      	b.n	233a <__aeabi_dadd+0x452>
    20c4:	2001      	movs	r0, #1
    20c6:	4b69      	ldr	r3, [pc, #420]	; (226c <__aeabi_dadd+0x384>)
    20c8:	401c      	ands	r4, r3
    20ca:	087b      	lsrs	r3, r7, #1
    20cc:	4007      	ands	r7, r0
    20ce:	431f      	orrs	r7, r3
    20d0:	07e0      	lsls	r0, r4, #31
    20d2:	4307      	orrs	r7, r0
    20d4:	0864      	lsrs	r4, r4, #1
    20d6:	e78b      	b.n	1ff0 <__aeabi_dadd+0x108>
    20d8:	0023      	movs	r3, r4
    20da:	433b      	orrs	r3, r7
    20dc:	d100      	bne.n	20e0 <__aeabi_dadd+0x1f8>
    20de:	e1cb      	b.n	2478 <__aeabi_dadd+0x590>
    20e0:	2280      	movs	r2, #128	; 0x80
    20e2:	0312      	lsls	r2, r2, #12
    20e4:	4314      	orrs	r4, r2
    20e6:	0324      	lsls	r4, r4, #12
    20e8:	0b24      	lsrs	r4, r4, #12
    20ea:	e79e      	b.n	202a <__aeabi_dadd+0x142>
    20ec:	002e      	movs	r6, r5
    20ee:	e77f      	b.n	1ff0 <__aeabi_dadd+0x108>
    20f0:	0008      	movs	r0, r1
    20f2:	4310      	orrs	r0, r2
    20f4:	d100      	bne.n	20f8 <__aeabi_dadd+0x210>
    20f6:	e0b4      	b.n	2262 <__aeabi_dadd+0x37a>
    20f8:	1e58      	subs	r0, r3, #1
    20fa:	2800      	cmp	r0, #0
    20fc:	d000      	beq.n	2100 <__aeabi_dadd+0x218>
    20fe:	e0de      	b.n	22be <__aeabi_dadd+0x3d6>
    2100:	18ba      	adds	r2, r7, r2
    2102:	42ba      	cmp	r2, r7
    2104:	419b      	sbcs	r3, r3
    2106:	1864      	adds	r4, r4, r1
    2108:	425b      	negs	r3, r3
    210a:	18e4      	adds	r4, r4, r3
    210c:	0017      	movs	r7, r2
    210e:	2601      	movs	r6, #1
    2110:	0223      	lsls	r3, r4, #8
    2112:	d5a6      	bpl.n	2062 <__aeabi_dadd+0x17a>
    2114:	2602      	movs	r6, #2
    2116:	e7d5      	b.n	20c4 <__aeabi_dadd+0x1dc>
    2118:	2d00      	cmp	r5, #0
    211a:	d16e      	bne.n	21fa <__aeabi_dadd+0x312>
    211c:	1c70      	adds	r0, r6, #1
    211e:	0540      	lsls	r0, r0, #21
    2120:	0d40      	lsrs	r0, r0, #21
    2122:	2801      	cmp	r0, #1
    2124:	dc00      	bgt.n	2128 <__aeabi_dadd+0x240>
    2126:	e0f9      	b.n	231c <__aeabi_dadd+0x434>
    2128:	1ab8      	subs	r0, r7, r2
    212a:	4684      	mov	ip, r0
    212c:	4287      	cmp	r7, r0
    212e:	4180      	sbcs	r0, r0
    2130:	1ae5      	subs	r5, r4, r3
    2132:	4240      	negs	r0, r0
    2134:	1a2d      	subs	r5, r5, r0
    2136:	0228      	lsls	r0, r5, #8
    2138:	d400      	bmi.n	213c <__aeabi_dadd+0x254>
    213a:	e089      	b.n	2250 <__aeabi_dadd+0x368>
    213c:	1bd7      	subs	r7, r2, r7
    213e:	42ba      	cmp	r2, r7
    2140:	4192      	sbcs	r2, r2
    2142:	1b1c      	subs	r4, r3, r4
    2144:	4252      	negs	r2, r2
    2146:	1aa5      	subs	r5, r4, r2
    2148:	46d8      	mov	r8, fp
    214a:	e729      	b.n	1fa0 <__aeabi_dadd+0xb8>
    214c:	4645      	mov	r5, r8
    214e:	2400      	movs	r4, #0
    2150:	2700      	movs	r7, #0
    2152:	e76a      	b.n	202a <__aeabi_dadd+0x142>
    2154:	4c45      	ldr	r4, [pc, #276]	; (226c <__aeabi_dadd+0x384>)
    2156:	1af6      	subs	r6, r6, r3
    2158:	402c      	ands	r4, r5
    215a:	e749      	b.n	1ff0 <__aeabi_dadd+0x108>
    215c:	003d      	movs	r5, r7
    215e:	3828      	subs	r0, #40	; 0x28
    2160:	4085      	lsls	r5, r0
    2162:	2700      	movs	r7, #0
    2164:	e72e      	b.n	1fc4 <__aeabi_dadd+0xdc>
    2166:	0038      	movs	r0, r7
    2168:	f001 fb04 	bl	3774 <__clzsi2>
    216c:	3020      	adds	r0, #32
    216e:	e71d      	b.n	1fac <__aeabi_dadd+0xc4>
    2170:	430a      	orrs	r2, r1
    2172:	1e51      	subs	r1, r2, #1
    2174:	418a      	sbcs	r2, r1
    2176:	2100      	movs	r1, #0
    2178:	e707      	b.n	1f8a <__aeabi_dadd+0xa2>
    217a:	2b00      	cmp	r3, #0
    217c:	d000      	beq.n	2180 <__aeabi_dadd+0x298>
    217e:	e0f3      	b.n	2368 <__aeabi_dadd+0x480>
    2180:	1c70      	adds	r0, r6, #1
    2182:	0543      	lsls	r3, r0, #21
    2184:	0d5b      	lsrs	r3, r3, #21
    2186:	2b01      	cmp	r3, #1
    2188:	dc00      	bgt.n	218c <__aeabi_dadd+0x2a4>
    218a:	e0ad      	b.n	22e8 <__aeabi_dadd+0x400>
    218c:	4b36      	ldr	r3, [pc, #216]	; (2268 <__aeabi_dadd+0x380>)
    218e:	4298      	cmp	r0, r3
    2190:	d100      	bne.n	2194 <__aeabi_dadd+0x2ac>
    2192:	e0d1      	b.n	2338 <__aeabi_dadd+0x450>
    2194:	18ba      	adds	r2, r7, r2
    2196:	42ba      	cmp	r2, r7
    2198:	41bf      	sbcs	r7, r7
    219a:	1864      	adds	r4, r4, r1
    219c:	427f      	negs	r7, r7
    219e:	19e4      	adds	r4, r4, r7
    21a0:	07e7      	lsls	r7, r4, #31
    21a2:	0852      	lsrs	r2, r2, #1
    21a4:	4317      	orrs	r7, r2
    21a6:	0864      	lsrs	r4, r4, #1
    21a8:	0006      	movs	r6, r0
    21aa:	e721      	b.n	1ff0 <__aeabi_dadd+0x108>
    21ac:	482e      	ldr	r0, [pc, #184]	; (2268 <__aeabi_dadd+0x380>)
    21ae:	4285      	cmp	r5, r0
    21b0:	d100      	bne.n	21b4 <__aeabi_dadd+0x2cc>
    21b2:	e093      	b.n	22dc <__aeabi_dadd+0x3f4>
    21b4:	001d      	movs	r5, r3
    21b6:	e6d0      	b.n	1f5a <__aeabi_dadd+0x72>
    21b8:	0029      	movs	r1, r5
    21ba:	3e1f      	subs	r6, #31
    21bc:	40f1      	lsrs	r1, r6
    21be:	2b20      	cmp	r3, #32
    21c0:	d100      	bne.n	21c4 <__aeabi_dadd+0x2dc>
    21c2:	e08d      	b.n	22e0 <__aeabi_dadd+0x3f8>
    21c4:	2240      	movs	r2, #64	; 0x40
    21c6:	1ad3      	subs	r3, r2, r3
    21c8:	409d      	lsls	r5, r3
    21ca:	432f      	orrs	r7, r5
    21cc:	1e7d      	subs	r5, r7, #1
    21ce:	41af      	sbcs	r7, r5
    21d0:	2400      	movs	r4, #0
    21d2:	430f      	orrs	r7, r1
    21d4:	2600      	movs	r6, #0
    21d6:	e744      	b.n	2062 <__aeabi_dadd+0x17a>
    21d8:	002b      	movs	r3, r5
    21da:	0008      	movs	r0, r1
    21dc:	3b20      	subs	r3, #32
    21de:	40d8      	lsrs	r0, r3
    21e0:	0003      	movs	r3, r0
    21e2:	2d20      	cmp	r5, #32
    21e4:	d100      	bne.n	21e8 <__aeabi_dadd+0x300>
    21e6:	e07d      	b.n	22e4 <__aeabi_dadd+0x3fc>
    21e8:	2040      	movs	r0, #64	; 0x40
    21ea:	1b45      	subs	r5, r0, r5
    21ec:	40a9      	lsls	r1, r5
    21ee:	430a      	orrs	r2, r1
    21f0:	1e51      	subs	r1, r2, #1
    21f2:	418a      	sbcs	r2, r1
    21f4:	2100      	movs	r1, #0
    21f6:	431a      	orrs	r2, r3
    21f8:	e6c7      	b.n	1f8a <__aeabi_dadd+0xa2>
    21fa:	2e00      	cmp	r6, #0
    21fc:	d050      	beq.n	22a0 <__aeabi_dadd+0x3b8>
    21fe:	4e1a      	ldr	r6, [pc, #104]	; (2268 <__aeabi_dadd+0x380>)
    2200:	42b0      	cmp	r0, r6
    2202:	d057      	beq.n	22b4 <__aeabi_dadd+0x3cc>
    2204:	2680      	movs	r6, #128	; 0x80
    2206:	426b      	negs	r3, r5
    2208:	4699      	mov	r9, r3
    220a:	0436      	lsls	r6, r6, #16
    220c:	4334      	orrs	r4, r6
    220e:	464b      	mov	r3, r9
    2210:	2b38      	cmp	r3, #56	; 0x38
    2212:	dd00      	ble.n	2216 <__aeabi_dadd+0x32e>
    2214:	e0d6      	b.n	23c4 <__aeabi_dadd+0x4dc>
    2216:	2b1f      	cmp	r3, #31
    2218:	dd00      	ble.n	221c <__aeabi_dadd+0x334>
    221a:	e135      	b.n	2488 <__aeabi_dadd+0x5a0>
    221c:	2620      	movs	r6, #32
    221e:	1af5      	subs	r5, r6, r3
    2220:	0026      	movs	r6, r4
    2222:	40ae      	lsls	r6, r5
    2224:	46b2      	mov	sl, r6
    2226:	003e      	movs	r6, r7
    2228:	40de      	lsrs	r6, r3
    222a:	46ac      	mov	ip, r5
    222c:	0035      	movs	r5, r6
    222e:	4656      	mov	r6, sl
    2230:	432e      	orrs	r6, r5
    2232:	4665      	mov	r5, ip
    2234:	40af      	lsls	r7, r5
    2236:	1e7d      	subs	r5, r7, #1
    2238:	41af      	sbcs	r7, r5
    223a:	40dc      	lsrs	r4, r3
    223c:	4337      	orrs	r7, r6
    223e:	1bd7      	subs	r7, r2, r7
    2240:	42ba      	cmp	r2, r7
    2242:	4192      	sbcs	r2, r2
    2244:	1b0c      	subs	r4, r1, r4
    2246:	4252      	negs	r2, r2
    2248:	1aa4      	subs	r4, r4, r2
    224a:	0006      	movs	r6, r0
    224c:	46d8      	mov	r8, fp
    224e:	e6a3      	b.n	1f98 <__aeabi_dadd+0xb0>
    2250:	4664      	mov	r4, ip
    2252:	4667      	mov	r7, ip
    2254:	432c      	orrs	r4, r5
    2256:	d000      	beq.n	225a <__aeabi_dadd+0x372>
    2258:	e6a2      	b.n	1fa0 <__aeabi_dadd+0xb8>
    225a:	2500      	movs	r5, #0
    225c:	2600      	movs	r6, #0
    225e:	2700      	movs	r7, #0
    2260:	e706      	b.n	2070 <__aeabi_dadd+0x188>
    2262:	001e      	movs	r6, r3
    2264:	e6c4      	b.n	1ff0 <__aeabi_dadd+0x108>
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	000007ff 	.word	0x000007ff
    226c:	ff7fffff 	.word	0xff7fffff
    2270:	800fffff 	.word	0x800fffff
    2274:	2b1f      	cmp	r3, #31
    2276:	dc63      	bgt.n	2340 <__aeabi_dadd+0x458>
    2278:	2020      	movs	r0, #32
    227a:	1ac3      	subs	r3, r0, r3
    227c:	0008      	movs	r0, r1
    227e:	4098      	lsls	r0, r3
    2280:	469c      	mov	ip, r3
    2282:	4683      	mov	fp, r0
    2284:	4653      	mov	r3, sl
    2286:	0010      	movs	r0, r2
    2288:	40d8      	lsrs	r0, r3
    228a:	0003      	movs	r3, r0
    228c:	4658      	mov	r0, fp
    228e:	4318      	orrs	r0, r3
    2290:	4663      	mov	r3, ip
    2292:	409a      	lsls	r2, r3
    2294:	1e53      	subs	r3, r2, #1
    2296:	419a      	sbcs	r2, r3
    2298:	4653      	mov	r3, sl
    229a:	4302      	orrs	r2, r0
    229c:	40d9      	lsrs	r1, r3
    229e:	e703      	b.n	20a8 <__aeabi_dadd+0x1c0>
    22a0:	0026      	movs	r6, r4
    22a2:	433e      	orrs	r6, r7
    22a4:	d006      	beq.n	22b4 <__aeabi_dadd+0x3cc>
    22a6:	43eb      	mvns	r3, r5
    22a8:	4699      	mov	r9, r3
    22aa:	2b00      	cmp	r3, #0
    22ac:	d0c7      	beq.n	223e <__aeabi_dadd+0x356>
    22ae:	4e94      	ldr	r6, [pc, #592]	; (2500 <__aeabi_dadd+0x618>)
    22b0:	42b0      	cmp	r0, r6
    22b2:	d1ac      	bne.n	220e <__aeabi_dadd+0x326>
    22b4:	000c      	movs	r4, r1
    22b6:	0017      	movs	r7, r2
    22b8:	0006      	movs	r6, r0
    22ba:	46d8      	mov	r8, fp
    22bc:	e698      	b.n	1ff0 <__aeabi_dadd+0x108>
    22be:	4b90      	ldr	r3, [pc, #576]	; (2500 <__aeabi_dadd+0x618>)
    22c0:	459a      	cmp	sl, r3
    22c2:	d00b      	beq.n	22dc <__aeabi_dadd+0x3f4>
    22c4:	4682      	mov	sl, r0
    22c6:	e6e7      	b.n	2098 <__aeabi_dadd+0x1b0>
    22c8:	2800      	cmp	r0, #0
    22ca:	d000      	beq.n	22ce <__aeabi_dadd+0x3e6>
    22cc:	e09e      	b.n	240c <__aeabi_dadd+0x524>
    22ce:	0018      	movs	r0, r3
    22d0:	4310      	orrs	r0, r2
    22d2:	d100      	bne.n	22d6 <__aeabi_dadd+0x3ee>
    22d4:	e0e9      	b.n	24aa <__aeabi_dadd+0x5c2>
    22d6:	001c      	movs	r4, r3
    22d8:	0017      	movs	r7, r2
    22da:	46d8      	mov	r8, fp
    22dc:	4e88      	ldr	r6, [pc, #544]	; (2500 <__aeabi_dadd+0x618>)
    22de:	e687      	b.n	1ff0 <__aeabi_dadd+0x108>
    22e0:	2500      	movs	r5, #0
    22e2:	e772      	b.n	21ca <__aeabi_dadd+0x2e2>
    22e4:	2100      	movs	r1, #0
    22e6:	e782      	b.n	21ee <__aeabi_dadd+0x306>
    22e8:	0023      	movs	r3, r4
    22ea:	433b      	orrs	r3, r7
    22ec:	2e00      	cmp	r6, #0
    22ee:	d000      	beq.n	22f2 <__aeabi_dadd+0x40a>
    22f0:	e0ab      	b.n	244a <__aeabi_dadd+0x562>
    22f2:	2b00      	cmp	r3, #0
    22f4:	d100      	bne.n	22f8 <__aeabi_dadd+0x410>
    22f6:	e0e7      	b.n	24c8 <__aeabi_dadd+0x5e0>
    22f8:	000b      	movs	r3, r1
    22fa:	4313      	orrs	r3, r2
    22fc:	d100      	bne.n	2300 <__aeabi_dadd+0x418>
    22fe:	e677      	b.n	1ff0 <__aeabi_dadd+0x108>
    2300:	18ba      	adds	r2, r7, r2
    2302:	42ba      	cmp	r2, r7
    2304:	41bf      	sbcs	r7, r7
    2306:	1864      	adds	r4, r4, r1
    2308:	427f      	negs	r7, r7
    230a:	19e4      	adds	r4, r4, r7
    230c:	0223      	lsls	r3, r4, #8
    230e:	d400      	bmi.n	2312 <__aeabi_dadd+0x42a>
    2310:	e0f2      	b.n	24f8 <__aeabi_dadd+0x610>
    2312:	4b7c      	ldr	r3, [pc, #496]	; (2504 <__aeabi_dadd+0x61c>)
    2314:	0017      	movs	r7, r2
    2316:	401c      	ands	r4, r3
    2318:	0006      	movs	r6, r0
    231a:	e669      	b.n	1ff0 <__aeabi_dadd+0x108>
    231c:	0020      	movs	r0, r4
    231e:	4338      	orrs	r0, r7
    2320:	2e00      	cmp	r6, #0
    2322:	d1d1      	bne.n	22c8 <__aeabi_dadd+0x3e0>
    2324:	2800      	cmp	r0, #0
    2326:	d15b      	bne.n	23e0 <__aeabi_dadd+0x4f8>
    2328:	001c      	movs	r4, r3
    232a:	4314      	orrs	r4, r2
    232c:	d100      	bne.n	2330 <__aeabi_dadd+0x448>
    232e:	e0a8      	b.n	2482 <__aeabi_dadd+0x59a>
    2330:	001c      	movs	r4, r3
    2332:	0017      	movs	r7, r2
    2334:	46d8      	mov	r8, fp
    2336:	e65b      	b.n	1ff0 <__aeabi_dadd+0x108>
    2338:	0006      	movs	r6, r0
    233a:	2400      	movs	r4, #0
    233c:	2700      	movs	r7, #0
    233e:	e697      	b.n	2070 <__aeabi_dadd+0x188>
    2340:	4650      	mov	r0, sl
    2342:	000b      	movs	r3, r1
    2344:	3820      	subs	r0, #32
    2346:	40c3      	lsrs	r3, r0
    2348:	4699      	mov	r9, r3
    234a:	4653      	mov	r3, sl
    234c:	2b20      	cmp	r3, #32
    234e:	d100      	bne.n	2352 <__aeabi_dadd+0x46a>
    2350:	e095      	b.n	247e <__aeabi_dadd+0x596>
    2352:	2340      	movs	r3, #64	; 0x40
    2354:	4650      	mov	r0, sl
    2356:	1a1b      	subs	r3, r3, r0
    2358:	4099      	lsls	r1, r3
    235a:	430a      	orrs	r2, r1
    235c:	1e51      	subs	r1, r2, #1
    235e:	418a      	sbcs	r2, r1
    2360:	464b      	mov	r3, r9
    2362:	2100      	movs	r1, #0
    2364:	431a      	orrs	r2, r3
    2366:	e69f      	b.n	20a8 <__aeabi_dadd+0x1c0>
    2368:	2e00      	cmp	r6, #0
    236a:	d130      	bne.n	23ce <__aeabi_dadd+0x4e6>
    236c:	0026      	movs	r6, r4
    236e:	433e      	orrs	r6, r7
    2370:	d067      	beq.n	2442 <__aeabi_dadd+0x55a>
    2372:	43db      	mvns	r3, r3
    2374:	469a      	mov	sl, r3
    2376:	2b00      	cmp	r3, #0
    2378:	d01c      	beq.n	23b4 <__aeabi_dadd+0x4cc>
    237a:	4e61      	ldr	r6, [pc, #388]	; (2500 <__aeabi_dadd+0x618>)
    237c:	42b0      	cmp	r0, r6
    237e:	d060      	beq.n	2442 <__aeabi_dadd+0x55a>
    2380:	4653      	mov	r3, sl
    2382:	2b38      	cmp	r3, #56	; 0x38
    2384:	dd00      	ble.n	2388 <__aeabi_dadd+0x4a0>
    2386:	e096      	b.n	24b6 <__aeabi_dadd+0x5ce>
    2388:	2b1f      	cmp	r3, #31
    238a:	dd00      	ble.n	238e <__aeabi_dadd+0x4a6>
    238c:	e09f      	b.n	24ce <__aeabi_dadd+0x5e6>
    238e:	2620      	movs	r6, #32
    2390:	1af3      	subs	r3, r6, r3
    2392:	0026      	movs	r6, r4
    2394:	409e      	lsls	r6, r3
    2396:	469c      	mov	ip, r3
    2398:	46b3      	mov	fp, r6
    239a:	4653      	mov	r3, sl
    239c:	003e      	movs	r6, r7
    239e:	40de      	lsrs	r6, r3
    23a0:	0033      	movs	r3, r6
    23a2:	465e      	mov	r6, fp
    23a4:	431e      	orrs	r6, r3
    23a6:	4663      	mov	r3, ip
    23a8:	409f      	lsls	r7, r3
    23aa:	1e7b      	subs	r3, r7, #1
    23ac:	419f      	sbcs	r7, r3
    23ae:	4653      	mov	r3, sl
    23b0:	40dc      	lsrs	r4, r3
    23b2:	4337      	orrs	r7, r6
    23b4:	18bf      	adds	r7, r7, r2
    23b6:	4297      	cmp	r7, r2
    23b8:	4192      	sbcs	r2, r2
    23ba:	1864      	adds	r4, r4, r1
    23bc:	4252      	negs	r2, r2
    23be:	18a4      	adds	r4, r4, r2
    23c0:	0006      	movs	r6, r0
    23c2:	e678      	b.n	20b6 <__aeabi_dadd+0x1ce>
    23c4:	4327      	orrs	r7, r4
    23c6:	1e7c      	subs	r4, r7, #1
    23c8:	41a7      	sbcs	r7, r4
    23ca:	2400      	movs	r4, #0
    23cc:	e737      	b.n	223e <__aeabi_dadd+0x356>
    23ce:	4e4c      	ldr	r6, [pc, #304]	; (2500 <__aeabi_dadd+0x618>)
    23d0:	42b0      	cmp	r0, r6
    23d2:	d036      	beq.n	2442 <__aeabi_dadd+0x55a>
    23d4:	2680      	movs	r6, #128	; 0x80
    23d6:	425b      	negs	r3, r3
    23d8:	0436      	lsls	r6, r6, #16
    23da:	469a      	mov	sl, r3
    23dc:	4334      	orrs	r4, r6
    23de:	e7cf      	b.n	2380 <__aeabi_dadd+0x498>
    23e0:	0018      	movs	r0, r3
    23e2:	4310      	orrs	r0, r2
    23e4:	d100      	bne.n	23e8 <__aeabi_dadd+0x500>
    23e6:	e603      	b.n	1ff0 <__aeabi_dadd+0x108>
    23e8:	1ab8      	subs	r0, r7, r2
    23ea:	4684      	mov	ip, r0
    23ec:	4567      	cmp	r7, ip
    23ee:	41ad      	sbcs	r5, r5
    23f0:	1ae0      	subs	r0, r4, r3
    23f2:	426d      	negs	r5, r5
    23f4:	1b40      	subs	r0, r0, r5
    23f6:	0205      	lsls	r5, r0, #8
    23f8:	d400      	bmi.n	23fc <__aeabi_dadd+0x514>
    23fa:	e62c      	b.n	2056 <__aeabi_dadd+0x16e>
    23fc:	1bd7      	subs	r7, r2, r7
    23fe:	42ba      	cmp	r2, r7
    2400:	4192      	sbcs	r2, r2
    2402:	1b1c      	subs	r4, r3, r4
    2404:	4252      	negs	r2, r2
    2406:	1aa4      	subs	r4, r4, r2
    2408:	46d8      	mov	r8, fp
    240a:	e5f1      	b.n	1ff0 <__aeabi_dadd+0x108>
    240c:	0018      	movs	r0, r3
    240e:	4310      	orrs	r0, r2
    2410:	d100      	bne.n	2414 <__aeabi_dadd+0x52c>
    2412:	e763      	b.n	22dc <__aeabi_dadd+0x3f4>
    2414:	08f8      	lsrs	r0, r7, #3
    2416:	0767      	lsls	r7, r4, #29
    2418:	4307      	orrs	r7, r0
    241a:	2080      	movs	r0, #128	; 0x80
    241c:	08e4      	lsrs	r4, r4, #3
    241e:	0300      	lsls	r0, r0, #12
    2420:	4204      	tst	r4, r0
    2422:	d008      	beq.n	2436 <__aeabi_dadd+0x54e>
    2424:	08dd      	lsrs	r5, r3, #3
    2426:	4205      	tst	r5, r0
    2428:	d105      	bne.n	2436 <__aeabi_dadd+0x54e>
    242a:	08d2      	lsrs	r2, r2, #3
    242c:	0759      	lsls	r1, r3, #29
    242e:	4311      	orrs	r1, r2
    2430:	000f      	movs	r7, r1
    2432:	002c      	movs	r4, r5
    2434:	46d8      	mov	r8, fp
    2436:	0f7b      	lsrs	r3, r7, #29
    2438:	00e4      	lsls	r4, r4, #3
    243a:	431c      	orrs	r4, r3
    243c:	00ff      	lsls	r7, r7, #3
    243e:	4e30      	ldr	r6, [pc, #192]	; (2500 <__aeabi_dadd+0x618>)
    2440:	e5d6      	b.n	1ff0 <__aeabi_dadd+0x108>
    2442:	000c      	movs	r4, r1
    2444:	0017      	movs	r7, r2
    2446:	0006      	movs	r6, r0
    2448:	e5d2      	b.n	1ff0 <__aeabi_dadd+0x108>
    244a:	2b00      	cmp	r3, #0
    244c:	d038      	beq.n	24c0 <__aeabi_dadd+0x5d8>
    244e:	000b      	movs	r3, r1
    2450:	4313      	orrs	r3, r2
    2452:	d100      	bne.n	2456 <__aeabi_dadd+0x56e>
    2454:	e742      	b.n	22dc <__aeabi_dadd+0x3f4>
    2456:	08f8      	lsrs	r0, r7, #3
    2458:	0767      	lsls	r7, r4, #29
    245a:	4307      	orrs	r7, r0
    245c:	2080      	movs	r0, #128	; 0x80
    245e:	08e4      	lsrs	r4, r4, #3
    2460:	0300      	lsls	r0, r0, #12
    2462:	4204      	tst	r4, r0
    2464:	d0e7      	beq.n	2436 <__aeabi_dadd+0x54e>
    2466:	08cb      	lsrs	r3, r1, #3
    2468:	4203      	tst	r3, r0
    246a:	d1e4      	bne.n	2436 <__aeabi_dadd+0x54e>
    246c:	08d2      	lsrs	r2, r2, #3
    246e:	0749      	lsls	r1, r1, #29
    2470:	4311      	orrs	r1, r2
    2472:	000f      	movs	r7, r1
    2474:	001c      	movs	r4, r3
    2476:	e7de      	b.n	2436 <__aeabi_dadd+0x54e>
    2478:	2700      	movs	r7, #0
    247a:	2400      	movs	r4, #0
    247c:	e5d5      	b.n	202a <__aeabi_dadd+0x142>
    247e:	2100      	movs	r1, #0
    2480:	e76b      	b.n	235a <__aeabi_dadd+0x472>
    2482:	2500      	movs	r5, #0
    2484:	2700      	movs	r7, #0
    2486:	e5f3      	b.n	2070 <__aeabi_dadd+0x188>
    2488:	464e      	mov	r6, r9
    248a:	0025      	movs	r5, r4
    248c:	3e20      	subs	r6, #32
    248e:	40f5      	lsrs	r5, r6
    2490:	464b      	mov	r3, r9
    2492:	002e      	movs	r6, r5
    2494:	2b20      	cmp	r3, #32
    2496:	d02d      	beq.n	24f4 <__aeabi_dadd+0x60c>
    2498:	2540      	movs	r5, #64	; 0x40
    249a:	1aed      	subs	r5, r5, r3
    249c:	40ac      	lsls	r4, r5
    249e:	4327      	orrs	r7, r4
    24a0:	1e7c      	subs	r4, r7, #1
    24a2:	41a7      	sbcs	r7, r4
    24a4:	2400      	movs	r4, #0
    24a6:	4337      	orrs	r7, r6
    24a8:	e6c9      	b.n	223e <__aeabi_dadd+0x356>
    24aa:	2480      	movs	r4, #128	; 0x80
    24ac:	2500      	movs	r5, #0
    24ae:	0324      	lsls	r4, r4, #12
    24b0:	4e13      	ldr	r6, [pc, #76]	; (2500 <__aeabi_dadd+0x618>)
    24b2:	2700      	movs	r7, #0
    24b4:	e5dc      	b.n	2070 <__aeabi_dadd+0x188>
    24b6:	4327      	orrs	r7, r4
    24b8:	1e7c      	subs	r4, r7, #1
    24ba:	41a7      	sbcs	r7, r4
    24bc:	2400      	movs	r4, #0
    24be:	e779      	b.n	23b4 <__aeabi_dadd+0x4cc>
    24c0:	000c      	movs	r4, r1
    24c2:	0017      	movs	r7, r2
    24c4:	4e0e      	ldr	r6, [pc, #56]	; (2500 <__aeabi_dadd+0x618>)
    24c6:	e593      	b.n	1ff0 <__aeabi_dadd+0x108>
    24c8:	000c      	movs	r4, r1
    24ca:	0017      	movs	r7, r2
    24cc:	e590      	b.n	1ff0 <__aeabi_dadd+0x108>
    24ce:	4656      	mov	r6, sl
    24d0:	0023      	movs	r3, r4
    24d2:	3e20      	subs	r6, #32
    24d4:	40f3      	lsrs	r3, r6
    24d6:	4699      	mov	r9, r3
    24d8:	4653      	mov	r3, sl
    24da:	2b20      	cmp	r3, #32
    24dc:	d00e      	beq.n	24fc <__aeabi_dadd+0x614>
    24de:	2340      	movs	r3, #64	; 0x40
    24e0:	4656      	mov	r6, sl
    24e2:	1b9b      	subs	r3, r3, r6
    24e4:	409c      	lsls	r4, r3
    24e6:	4327      	orrs	r7, r4
    24e8:	1e7c      	subs	r4, r7, #1
    24ea:	41a7      	sbcs	r7, r4
    24ec:	464b      	mov	r3, r9
    24ee:	2400      	movs	r4, #0
    24f0:	431f      	orrs	r7, r3
    24f2:	e75f      	b.n	23b4 <__aeabi_dadd+0x4cc>
    24f4:	2400      	movs	r4, #0
    24f6:	e7d2      	b.n	249e <__aeabi_dadd+0x5b6>
    24f8:	0017      	movs	r7, r2
    24fa:	e5b2      	b.n	2062 <__aeabi_dadd+0x17a>
    24fc:	2400      	movs	r4, #0
    24fe:	e7f2      	b.n	24e6 <__aeabi_dadd+0x5fe>
    2500:	000007ff 	.word	0x000007ff
    2504:	ff7fffff 	.word	0xff7fffff

00002508 <__aeabi_ddiv>:
    2508:	b5f0      	push	{r4, r5, r6, r7, lr}
    250a:	4657      	mov	r7, sl
    250c:	4645      	mov	r5, r8
    250e:	46de      	mov	lr, fp
    2510:	464e      	mov	r6, r9
    2512:	b5e0      	push	{r5, r6, r7, lr}
    2514:	004c      	lsls	r4, r1, #1
    2516:	030e      	lsls	r6, r1, #12
    2518:	b087      	sub	sp, #28
    251a:	4683      	mov	fp, r0
    251c:	4692      	mov	sl, r2
    251e:	001d      	movs	r5, r3
    2520:	4680      	mov	r8, r0
    2522:	0b36      	lsrs	r6, r6, #12
    2524:	0d64      	lsrs	r4, r4, #21
    2526:	0fcf      	lsrs	r7, r1, #31
    2528:	2c00      	cmp	r4, #0
    252a:	d04f      	beq.n	25cc <__aeabi_ddiv+0xc4>
    252c:	4b6f      	ldr	r3, [pc, #444]	; (26ec <__aeabi_ddiv+0x1e4>)
    252e:	429c      	cmp	r4, r3
    2530:	d035      	beq.n	259e <__aeabi_ddiv+0x96>
    2532:	2380      	movs	r3, #128	; 0x80
    2534:	0f42      	lsrs	r2, r0, #29
    2536:	041b      	lsls	r3, r3, #16
    2538:	00f6      	lsls	r6, r6, #3
    253a:	4313      	orrs	r3, r2
    253c:	4333      	orrs	r3, r6
    253e:	4699      	mov	r9, r3
    2540:	00c3      	lsls	r3, r0, #3
    2542:	4698      	mov	r8, r3
    2544:	4b6a      	ldr	r3, [pc, #424]	; (26f0 <__aeabi_ddiv+0x1e8>)
    2546:	2600      	movs	r6, #0
    2548:	469c      	mov	ip, r3
    254a:	2300      	movs	r3, #0
    254c:	4464      	add	r4, ip
    254e:	9303      	str	r3, [sp, #12]
    2550:	032b      	lsls	r3, r5, #12
    2552:	0b1b      	lsrs	r3, r3, #12
    2554:	469b      	mov	fp, r3
    2556:	006b      	lsls	r3, r5, #1
    2558:	0fed      	lsrs	r5, r5, #31
    255a:	4650      	mov	r0, sl
    255c:	0d5b      	lsrs	r3, r3, #21
    255e:	9501      	str	r5, [sp, #4]
    2560:	d05e      	beq.n	2620 <__aeabi_ddiv+0x118>
    2562:	4a62      	ldr	r2, [pc, #392]	; (26ec <__aeabi_ddiv+0x1e4>)
    2564:	4293      	cmp	r3, r2
    2566:	d053      	beq.n	2610 <__aeabi_ddiv+0x108>
    2568:	465a      	mov	r2, fp
    256a:	00d1      	lsls	r1, r2, #3
    256c:	2280      	movs	r2, #128	; 0x80
    256e:	0f40      	lsrs	r0, r0, #29
    2570:	0412      	lsls	r2, r2, #16
    2572:	4302      	orrs	r2, r0
    2574:	430a      	orrs	r2, r1
    2576:	4693      	mov	fp, r2
    2578:	4652      	mov	r2, sl
    257a:	00d1      	lsls	r1, r2, #3
    257c:	4a5c      	ldr	r2, [pc, #368]	; (26f0 <__aeabi_ddiv+0x1e8>)
    257e:	4694      	mov	ip, r2
    2580:	2200      	movs	r2, #0
    2582:	4463      	add	r3, ip
    2584:	0038      	movs	r0, r7
    2586:	4068      	eors	r0, r5
    2588:	4684      	mov	ip, r0
    258a:	9002      	str	r0, [sp, #8]
    258c:	1ae4      	subs	r4, r4, r3
    258e:	4316      	orrs	r6, r2
    2590:	2e0f      	cmp	r6, #15
    2592:	d900      	bls.n	2596 <__aeabi_ddiv+0x8e>
    2594:	e0b4      	b.n	2700 <__aeabi_ddiv+0x1f8>
    2596:	4b57      	ldr	r3, [pc, #348]	; (26f4 <__aeabi_ddiv+0x1ec>)
    2598:	00b6      	lsls	r6, r6, #2
    259a:	599b      	ldr	r3, [r3, r6]
    259c:	469f      	mov	pc, r3
    259e:	0003      	movs	r3, r0
    25a0:	4333      	orrs	r3, r6
    25a2:	4699      	mov	r9, r3
    25a4:	d16c      	bne.n	2680 <__aeabi_ddiv+0x178>
    25a6:	2300      	movs	r3, #0
    25a8:	4698      	mov	r8, r3
    25aa:	3302      	adds	r3, #2
    25ac:	2608      	movs	r6, #8
    25ae:	9303      	str	r3, [sp, #12]
    25b0:	e7ce      	b.n	2550 <__aeabi_ddiv+0x48>
    25b2:	46cb      	mov	fp, r9
    25b4:	4641      	mov	r1, r8
    25b6:	9a03      	ldr	r2, [sp, #12]
    25b8:	9701      	str	r7, [sp, #4]
    25ba:	2a02      	cmp	r2, #2
    25bc:	d165      	bne.n	268a <__aeabi_ddiv+0x182>
    25be:	9b01      	ldr	r3, [sp, #4]
    25c0:	4c4a      	ldr	r4, [pc, #296]	; (26ec <__aeabi_ddiv+0x1e4>)
    25c2:	469c      	mov	ip, r3
    25c4:	2300      	movs	r3, #0
    25c6:	2200      	movs	r2, #0
    25c8:	4698      	mov	r8, r3
    25ca:	e06b      	b.n	26a4 <__aeabi_ddiv+0x19c>
    25cc:	0003      	movs	r3, r0
    25ce:	4333      	orrs	r3, r6
    25d0:	4699      	mov	r9, r3
    25d2:	d04e      	beq.n	2672 <__aeabi_ddiv+0x16a>
    25d4:	2e00      	cmp	r6, #0
    25d6:	d100      	bne.n	25da <__aeabi_ddiv+0xd2>
    25d8:	e1bc      	b.n	2954 <__aeabi_ddiv+0x44c>
    25da:	0030      	movs	r0, r6
    25dc:	f001 f8ca 	bl	3774 <__clzsi2>
    25e0:	0003      	movs	r3, r0
    25e2:	3b0b      	subs	r3, #11
    25e4:	2b1c      	cmp	r3, #28
    25e6:	dd00      	ble.n	25ea <__aeabi_ddiv+0xe2>
    25e8:	e1ac      	b.n	2944 <__aeabi_ddiv+0x43c>
    25ea:	221d      	movs	r2, #29
    25ec:	1ad3      	subs	r3, r2, r3
    25ee:	465a      	mov	r2, fp
    25f0:	0001      	movs	r1, r0
    25f2:	40da      	lsrs	r2, r3
    25f4:	3908      	subs	r1, #8
    25f6:	408e      	lsls	r6, r1
    25f8:	0013      	movs	r3, r2
    25fa:	4333      	orrs	r3, r6
    25fc:	4699      	mov	r9, r3
    25fe:	465b      	mov	r3, fp
    2600:	408b      	lsls	r3, r1
    2602:	4698      	mov	r8, r3
    2604:	2300      	movs	r3, #0
    2606:	4c3c      	ldr	r4, [pc, #240]	; (26f8 <__aeabi_ddiv+0x1f0>)
    2608:	2600      	movs	r6, #0
    260a:	1a24      	subs	r4, r4, r0
    260c:	9303      	str	r3, [sp, #12]
    260e:	e79f      	b.n	2550 <__aeabi_ddiv+0x48>
    2610:	4651      	mov	r1, sl
    2612:	465a      	mov	r2, fp
    2614:	4311      	orrs	r1, r2
    2616:	d129      	bne.n	266c <__aeabi_ddiv+0x164>
    2618:	2200      	movs	r2, #0
    261a:	4693      	mov	fp, r2
    261c:	3202      	adds	r2, #2
    261e:	e7b1      	b.n	2584 <__aeabi_ddiv+0x7c>
    2620:	4659      	mov	r1, fp
    2622:	4301      	orrs	r1, r0
    2624:	d01e      	beq.n	2664 <__aeabi_ddiv+0x15c>
    2626:	465b      	mov	r3, fp
    2628:	2b00      	cmp	r3, #0
    262a:	d100      	bne.n	262e <__aeabi_ddiv+0x126>
    262c:	e19e      	b.n	296c <__aeabi_ddiv+0x464>
    262e:	4658      	mov	r0, fp
    2630:	f001 f8a0 	bl	3774 <__clzsi2>
    2634:	0003      	movs	r3, r0
    2636:	3b0b      	subs	r3, #11
    2638:	2b1c      	cmp	r3, #28
    263a:	dd00      	ble.n	263e <__aeabi_ddiv+0x136>
    263c:	e18f      	b.n	295e <__aeabi_ddiv+0x456>
    263e:	0002      	movs	r2, r0
    2640:	4659      	mov	r1, fp
    2642:	3a08      	subs	r2, #8
    2644:	4091      	lsls	r1, r2
    2646:	468b      	mov	fp, r1
    2648:	211d      	movs	r1, #29
    264a:	1acb      	subs	r3, r1, r3
    264c:	4651      	mov	r1, sl
    264e:	40d9      	lsrs	r1, r3
    2650:	000b      	movs	r3, r1
    2652:	4659      	mov	r1, fp
    2654:	430b      	orrs	r3, r1
    2656:	4651      	mov	r1, sl
    2658:	469b      	mov	fp, r3
    265a:	4091      	lsls	r1, r2
    265c:	4b26      	ldr	r3, [pc, #152]	; (26f8 <__aeabi_ddiv+0x1f0>)
    265e:	2200      	movs	r2, #0
    2660:	1a1b      	subs	r3, r3, r0
    2662:	e78f      	b.n	2584 <__aeabi_ddiv+0x7c>
    2664:	2300      	movs	r3, #0
    2666:	2201      	movs	r2, #1
    2668:	469b      	mov	fp, r3
    266a:	e78b      	b.n	2584 <__aeabi_ddiv+0x7c>
    266c:	4651      	mov	r1, sl
    266e:	2203      	movs	r2, #3
    2670:	e788      	b.n	2584 <__aeabi_ddiv+0x7c>
    2672:	2300      	movs	r3, #0
    2674:	4698      	mov	r8, r3
    2676:	3301      	adds	r3, #1
    2678:	2604      	movs	r6, #4
    267a:	2400      	movs	r4, #0
    267c:	9303      	str	r3, [sp, #12]
    267e:	e767      	b.n	2550 <__aeabi_ddiv+0x48>
    2680:	2303      	movs	r3, #3
    2682:	46b1      	mov	r9, r6
    2684:	9303      	str	r3, [sp, #12]
    2686:	260c      	movs	r6, #12
    2688:	e762      	b.n	2550 <__aeabi_ddiv+0x48>
    268a:	2a03      	cmp	r2, #3
    268c:	d100      	bne.n	2690 <__aeabi_ddiv+0x188>
    268e:	e25c      	b.n	2b4a <__aeabi_ddiv+0x642>
    2690:	9b01      	ldr	r3, [sp, #4]
    2692:	2a01      	cmp	r2, #1
    2694:	d000      	beq.n	2698 <__aeabi_ddiv+0x190>
    2696:	e1e4      	b.n	2a62 <__aeabi_ddiv+0x55a>
    2698:	4013      	ands	r3, r2
    269a:	469c      	mov	ip, r3
    269c:	2300      	movs	r3, #0
    269e:	2400      	movs	r4, #0
    26a0:	2200      	movs	r2, #0
    26a2:	4698      	mov	r8, r3
    26a4:	2100      	movs	r1, #0
    26a6:	0312      	lsls	r2, r2, #12
    26a8:	0b13      	lsrs	r3, r2, #12
    26aa:	0d0a      	lsrs	r2, r1, #20
    26ac:	0512      	lsls	r2, r2, #20
    26ae:	431a      	orrs	r2, r3
    26b0:	0523      	lsls	r3, r4, #20
    26b2:	4c12      	ldr	r4, [pc, #72]	; (26fc <__aeabi_ddiv+0x1f4>)
    26b4:	4640      	mov	r0, r8
    26b6:	4022      	ands	r2, r4
    26b8:	4313      	orrs	r3, r2
    26ba:	4662      	mov	r2, ip
    26bc:	005b      	lsls	r3, r3, #1
    26be:	07d2      	lsls	r2, r2, #31
    26c0:	085b      	lsrs	r3, r3, #1
    26c2:	4313      	orrs	r3, r2
    26c4:	0019      	movs	r1, r3
    26c6:	b007      	add	sp, #28
    26c8:	bc3c      	pop	{r2, r3, r4, r5}
    26ca:	4690      	mov	r8, r2
    26cc:	4699      	mov	r9, r3
    26ce:	46a2      	mov	sl, r4
    26d0:	46ab      	mov	fp, r5
    26d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26d4:	2300      	movs	r3, #0
    26d6:	2280      	movs	r2, #128	; 0x80
    26d8:	469c      	mov	ip, r3
    26da:	0312      	lsls	r2, r2, #12
    26dc:	4698      	mov	r8, r3
    26de:	4c03      	ldr	r4, [pc, #12]	; (26ec <__aeabi_ddiv+0x1e4>)
    26e0:	e7e0      	b.n	26a4 <__aeabi_ddiv+0x19c>
    26e2:	2300      	movs	r3, #0
    26e4:	4c01      	ldr	r4, [pc, #4]	; (26ec <__aeabi_ddiv+0x1e4>)
    26e6:	2200      	movs	r2, #0
    26e8:	4698      	mov	r8, r3
    26ea:	e7db      	b.n	26a4 <__aeabi_ddiv+0x19c>
    26ec:	000007ff 	.word	0x000007ff
    26f0:	fffffc01 	.word	0xfffffc01
    26f4:	00003838 	.word	0x00003838
    26f8:	fffffc0d 	.word	0xfffffc0d
    26fc:	800fffff 	.word	0x800fffff
    2700:	45d9      	cmp	r9, fp
    2702:	d900      	bls.n	2706 <__aeabi_ddiv+0x1fe>
    2704:	e139      	b.n	297a <__aeabi_ddiv+0x472>
    2706:	d100      	bne.n	270a <__aeabi_ddiv+0x202>
    2708:	e134      	b.n	2974 <__aeabi_ddiv+0x46c>
    270a:	2300      	movs	r3, #0
    270c:	4646      	mov	r6, r8
    270e:	464d      	mov	r5, r9
    2710:	469a      	mov	sl, r3
    2712:	3c01      	subs	r4, #1
    2714:	465b      	mov	r3, fp
    2716:	0e0a      	lsrs	r2, r1, #24
    2718:	021b      	lsls	r3, r3, #8
    271a:	431a      	orrs	r2, r3
    271c:	020b      	lsls	r3, r1, #8
    271e:	0c17      	lsrs	r7, r2, #16
    2720:	9303      	str	r3, [sp, #12]
    2722:	0413      	lsls	r3, r2, #16
    2724:	0c1b      	lsrs	r3, r3, #16
    2726:	0039      	movs	r1, r7
    2728:	0028      	movs	r0, r5
    272a:	4690      	mov	r8, r2
    272c:	9301      	str	r3, [sp, #4]
    272e:	f7ff fb4f 	bl	1dd0 <__udivsi3>
    2732:	0002      	movs	r2, r0
    2734:	9b01      	ldr	r3, [sp, #4]
    2736:	4683      	mov	fp, r0
    2738:	435a      	muls	r2, r3
    273a:	0028      	movs	r0, r5
    273c:	0039      	movs	r1, r7
    273e:	4691      	mov	r9, r2
    2740:	f7ff fbcc 	bl	1edc <__aeabi_uidivmod>
    2744:	0c35      	lsrs	r5, r6, #16
    2746:	0409      	lsls	r1, r1, #16
    2748:	430d      	orrs	r5, r1
    274a:	45a9      	cmp	r9, r5
    274c:	d90d      	bls.n	276a <__aeabi_ddiv+0x262>
    274e:	465b      	mov	r3, fp
    2750:	4445      	add	r5, r8
    2752:	3b01      	subs	r3, #1
    2754:	45a8      	cmp	r8, r5
    2756:	d900      	bls.n	275a <__aeabi_ddiv+0x252>
    2758:	e13a      	b.n	29d0 <__aeabi_ddiv+0x4c8>
    275a:	45a9      	cmp	r9, r5
    275c:	d800      	bhi.n	2760 <__aeabi_ddiv+0x258>
    275e:	e137      	b.n	29d0 <__aeabi_ddiv+0x4c8>
    2760:	2302      	movs	r3, #2
    2762:	425b      	negs	r3, r3
    2764:	469c      	mov	ip, r3
    2766:	4445      	add	r5, r8
    2768:	44e3      	add	fp, ip
    276a:	464b      	mov	r3, r9
    276c:	1aeb      	subs	r3, r5, r3
    276e:	0039      	movs	r1, r7
    2770:	0018      	movs	r0, r3
    2772:	9304      	str	r3, [sp, #16]
    2774:	f7ff fb2c 	bl	1dd0 <__udivsi3>
    2778:	9b01      	ldr	r3, [sp, #4]
    277a:	0005      	movs	r5, r0
    277c:	4343      	muls	r3, r0
    277e:	0039      	movs	r1, r7
    2780:	9804      	ldr	r0, [sp, #16]
    2782:	4699      	mov	r9, r3
    2784:	f7ff fbaa 	bl	1edc <__aeabi_uidivmod>
    2788:	0433      	lsls	r3, r6, #16
    278a:	0409      	lsls	r1, r1, #16
    278c:	0c1b      	lsrs	r3, r3, #16
    278e:	430b      	orrs	r3, r1
    2790:	4599      	cmp	r9, r3
    2792:	d909      	bls.n	27a8 <__aeabi_ddiv+0x2a0>
    2794:	4443      	add	r3, r8
    2796:	1e6a      	subs	r2, r5, #1
    2798:	4598      	cmp	r8, r3
    279a:	d900      	bls.n	279e <__aeabi_ddiv+0x296>
    279c:	e11a      	b.n	29d4 <__aeabi_ddiv+0x4cc>
    279e:	4599      	cmp	r9, r3
    27a0:	d800      	bhi.n	27a4 <__aeabi_ddiv+0x29c>
    27a2:	e117      	b.n	29d4 <__aeabi_ddiv+0x4cc>
    27a4:	3d02      	subs	r5, #2
    27a6:	4443      	add	r3, r8
    27a8:	464a      	mov	r2, r9
    27aa:	1a9b      	subs	r3, r3, r2
    27ac:	465a      	mov	r2, fp
    27ae:	0412      	lsls	r2, r2, #16
    27b0:	432a      	orrs	r2, r5
    27b2:	9903      	ldr	r1, [sp, #12]
    27b4:	4693      	mov	fp, r2
    27b6:	0c10      	lsrs	r0, r2, #16
    27b8:	0c0a      	lsrs	r2, r1, #16
    27ba:	4691      	mov	r9, r2
    27bc:	0409      	lsls	r1, r1, #16
    27be:	465a      	mov	r2, fp
    27c0:	0c09      	lsrs	r1, r1, #16
    27c2:	464e      	mov	r6, r9
    27c4:	000d      	movs	r5, r1
    27c6:	0412      	lsls	r2, r2, #16
    27c8:	0c12      	lsrs	r2, r2, #16
    27ca:	4345      	muls	r5, r0
    27cc:	9105      	str	r1, [sp, #20]
    27ce:	4351      	muls	r1, r2
    27d0:	4372      	muls	r2, r6
    27d2:	4370      	muls	r0, r6
    27d4:	1952      	adds	r2, r2, r5
    27d6:	0c0e      	lsrs	r6, r1, #16
    27d8:	18b2      	adds	r2, r6, r2
    27da:	4295      	cmp	r5, r2
    27dc:	d903      	bls.n	27e6 <__aeabi_ddiv+0x2de>
    27de:	2580      	movs	r5, #128	; 0x80
    27e0:	026d      	lsls	r5, r5, #9
    27e2:	46ac      	mov	ip, r5
    27e4:	4460      	add	r0, ip
    27e6:	0c15      	lsrs	r5, r2, #16
    27e8:	0409      	lsls	r1, r1, #16
    27ea:	0412      	lsls	r2, r2, #16
    27ec:	0c09      	lsrs	r1, r1, #16
    27ee:	1828      	adds	r0, r5, r0
    27f0:	1852      	adds	r2, r2, r1
    27f2:	4283      	cmp	r3, r0
    27f4:	d200      	bcs.n	27f8 <__aeabi_ddiv+0x2f0>
    27f6:	e0ce      	b.n	2996 <__aeabi_ddiv+0x48e>
    27f8:	d100      	bne.n	27fc <__aeabi_ddiv+0x2f4>
    27fa:	e0c8      	b.n	298e <__aeabi_ddiv+0x486>
    27fc:	1a1d      	subs	r5, r3, r0
    27fe:	4653      	mov	r3, sl
    2800:	1a9e      	subs	r6, r3, r2
    2802:	45b2      	cmp	sl, r6
    2804:	4192      	sbcs	r2, r2
    2806:	4252      	negs	r2, r2
    2808:	1aab      	subs	r3, r5, r2
    280a:	469a      	mov	sl, r3
    280c:	4598      	cmp	r8, r3
    280e:	d100      	bne.n	2812 <__aeabi_ddiv+0x30a>
    2810:	e117      	b.n	2a42 <__aeabi_ddiv+0x53a>
    2812:	0039      	movs	r1, r7
    2814:	0018      	movs	r0, r3
    2816:	f7ff fadb 	bl	1dd0 <__udivsi3>
    281a:	9b01      	ldr	r3, [sp, #4]
    281c:	0005      	movs	r5, r0
    281e:	4343      	muls	r3, r0
    2820:	0039      	movs	r1, r7
    2822:	4650      	mov	r0, sl
    2824:	9304      	str	r3, [sp, #16]
    2826:	f7ff fb59 	bl	1edc <__aeabi_uidivmod>
    282a:	9804      	ldr	r0, [sp, #16]
    282c:	040b      	lsls	r3, r1, #16
    282e:	0c31      	lsrs	r1, r6, #16
    2830:	4319      	orrs	r1, r3
    2832:	4288      	cmp	r0, r1
    2834:	d909      	bls.n	284a <__aeabi_ddiv+0x342>
    2836:	4441      	add	r1, r8
    2838:	1e6b      	subs	r3, r5, #1
    283a:	4588      	cmp	r8, r1
    283c:	d900      	bls.n	2840 <__aeabi_ddiv+0x338>
    283e:	e107      	b.n	2a50 <__aeabi_ddiv+0x548>
    2840:	4288      	cmp	r0, r1
    2842:	d800      	bhi.n	2846 <__aeabi_ddiv+0x33e>
    2844:	e104      	b.n	2a50 <__aeabi_ddiv+0x548>
    2846:	3d02      	subs	r5, #2
    2848:	4441      	add	r1, r8
    284a:	9b04      	ldr	r3, [sp, #16]
    284c:	1acb      	subs	r3, r1, r3
    284e:	0018      	movs	r0, r3
    2850:	0039      	movs	r1, r7
    2852:	9304      	str	r3, [sp, #16]
    2854:	f7ff fabc 	bl	1dd0 <__udivsi3>
    2858:	9b01      	ldr	r3, [sp, #4]
    285a:	4682      	mov	sl, r0
    285c:	4343      	muls	r3, r0
    285e:	0039      	movs	r1, r7
    2860:	9804      	ldr	r0, [sp, #16]
    2862:	9301      	str	r3, [sp, #4]
    2864:	f7ff fb3a 	bl	1edc <__aeabi_uidivmod>
    2868:	9801      	ldr	r0, [sp, #4]
    286a:	040b      	lsls	r3, r1, #16
    286c:	0431      	lsls	r1, r6, #16
    286e:	0c09      	lsrs	r1, r1, #16
    2870:	4319      	orrs	r1, r3
    2872:	4288      	cmp	r0, r1
    2874:	d90d      	bls.n	2892 <__aeabi_ddiv+0x38a>
    2876:	4653      	mov	r3, sl
    2878:	4441      	add	r1, r8
    287a:	3b01      	subs	r3, #1
    287c:	4588      	cmp	r8, r1
    287e:	d900      	bls.n	2882 <__aeabi_ddiv+0x37a>
    2880:	e0e8      	b.n	2a54 <__aeabi_ddiv+0x54c>
    2882:	4288      	cmp	r0, r1
    2884:	d800      	bhi.n	2888 <__aeabi_ddiv+0x380>
    2886:	e0e5      	b.n	2a54 <__aeabi_ddiv+0x54c>
    2888:	2302      	movs	r3, #2
    288a:	425b      	negs	r3, r3
    288c:	469c      	mov	ip, r3
    288e:	4441      	add	r1, r8
    2890:	44e2      	add	sl, ip
    2892:	9b01      	ldr	r3, [sp, #4]
    2894:	042d      	lsls	r5, r5, #16
    2896:	1ace      	subs	r6, r1, r3
    2898:	4651      	mov	r1, sl
    289a:	4329      	orrs	r1, r5
    289c:	9d05      	ldr	r5, [sp, #20]
    289e:	464f      	mov	r7, r9
    28a0:	002a      	movs	r2, r5
    28a2:	040b      	lsls	r3, r1, #16
    28a4:	0c08      	lsrs	r0, r1, #16
    28a6:	0c1b      	lsrs	r3, r3, #16
    28a8:	435a      	muls	r2, r3
    28aa:	4345      	muls	r5, r0
    28ac:	437b      	muls	r3, r7
    28ae:	4378      	muls	r0, r7
    28b0:	195b      	adds	r3, r3, r5
    28b2:	0c17      	lsrs	r7, r2, #16
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	429d      	cmp	r5, r3
    28b8:	d903      	bls.n	28c2 <__aeabi_ddiv+0x3ba>
    28ba:	2580      	movs	r5, #128	; 0x80
    28bc:	026d      	lsls	r5, r5, #9
    28be:	46ac      	mov	ip, r5
    28c0:	4460      	add	r0, ip
    28c2:	0c1d      	lsrs	r5, r3, #16
    28c4:	0412      	lsls	r2, r2, #16
    28c6:	041b      	lsls	r3, r3, #16
    28c8:	0c12      	lsrs	r2, r2, #16
    28ca:	1828      	adds	r0, r5, r0
    28cc:	189b      	adds	r3, r3, r2
    28ce:	4286      	cmp	r6, r0
    28d0:	d200      	bcs.n	28d4 <__aeabi_ddiv+0x3cc>
    28d2:	e093      	b.n	29fc <__aeabi_ddiv+0x4f4>
    28d4:	d100      	bne.n	28d8 <__aeabi_ddiv+0x3d0>
    28d6:	e08e      	b.n	29f6 <__aeabi_ddiv+0x4ee>
    28d8:	2301      	movs	r3, #1
    28da:	4319      	orrs	r1, r3
    28dc:	4ba0      	ldr	r3, [pc, #640]	; (2b60 <__aeabi_ddiv+0x658>)
    28de:	18e3      	adds	r3, r4, r3
    28e0:	2b00      	cmp	r3, #0
    28e2:	dc00      	bgt.n	28e6 <__aeabi_ddiv+0x3de>
    28e4:	e099      	b.n	2a1a <__aeabi_ddiv+0x512>
    28e6:	074a      	lsls	r2, r1, #29
    28e8:	d000      	beq.n	28ec <__aeabi_ddiv+0x3e4>
    28ea:	e09e      	b.n	2a2a <__aeabi_ddiv+0x522>
    28ec:	465a      	mov	r2, fp
    28ee:	01d2      	lsls	r2, r2, #7
    28f0:	d506      	bpl.n	2900 <__aeabi_ddiv+0x3f8>
    28f2:	465a      	mov	r2, fp
    28f4:	4b9b      	ldr	r3, [pc, #620]	; (2b64 <__aeabi_ddiv+0x65c>)
    28f6:	401a      	ands	r2, r3
    28f8:	2380      	movs	r3, #128	; 0x80
    28fa:	4693      	mov	fp, r2
    28fc:	00db      	lsls	r3, r3, #3
    28fe:	18e3      	adds	r3, r4, r3
    2900:	4a99      	ldr	r2, [pc, #612]	; (2b68 <__aeabi_ddiv+0x660>)
    2902:	4293      	cmp	r3, r2
    2904:	dd68      	ble.n	29d8 <__aeabi_ddiv+0x4d0>
    2906:	2301      	movs	r3, #1
    2908:	9a02      	ldr	r2, [sp, #8]
    290a:	4c98      	ldr	r4, [pc, #608]	; (2b6c <__aeabi_ddiv+0x664>)
    290c:	401a      	ands	r2, r3
    290e:	2300      	movs	r3, #0
    2910:	4694      	mov	ip, r2
    2912:	4698      	mov	r8, r3
    2914:	2200      	movs	r2, #0
    2916:	e6c5      	b.n	26a4 <__aeabi_ddiv+0x19c>
    2918:	2280      	movs	r2, #128	; 0x80
    291a:	464b      	mov	r3, r9
    291c:	0312      	lsls	r2, r2, #12
    291e:	4213      	tst	r3, r2
    2920:	d00a      	beq.n	2938 <__aeabi_ddiv+0x430>
    2922:	465b      	mov	r3, fp
    2924:	4213      	tst	r3, r2
    2926:	d106      	bne.n	2936 <__aeabi_ddiv+0x42e>
    2928:	431a      	orrs	r2, r3
    292a:	0312      	lsls	r2, r2, #12
    292c:	0b12      	lsrs	r2, r2, #12
    292e:	46ac      	mov	ip, r5
    2930:	4688      	mov	r8, r1
    2932:	4c8e      	ldr	r4, [pc, #568]	; (2b6c <__aeabi_ddiv+0x664>)
    2934:	e6b6      	b.n	26a4 <__aeabi_ddiv+0x19c>
    2936:	464b      	mov	r3, r9
    2938:	431a      	orrs	r2, r3
    293a:	0312      	lsls	r2, r2, #12
    293c:	0b12      	lsrs	r2, r2, #12
    293e:	46bc      	mov	ip, r7
    2940:	4c8a      	ldr	r4, [pc, #552]	; (2b6c <__aeabi_ddiv+0x664>)
    2942:	e6af      	b.n	26a4 <__aeabi_ddiv+0x19c>
    2944:	0003      	movs	r3, r0
    2946:	465a      	mov	r2, fp
    2948:	3b28      	subs	r3, #40	; 0x28
    294a:	409a      	lsls	r2, r3
    294c:	2300      	movs	r3, #0
    294e:	4691      	mov	r9, r2
    2950:	4698      	mov	r8, r3
    2952:	e657      	b.n	2604 <__aeabi_ddiv+0xfc>
    2954:	4658      	mov	r0, fp
    2956:	f000 ff0d 	bl	3774 <__clzsi2>
    295a:	3020      	adds	r0, #32
    295c:	e640      	b.n	25e0 <__aeabi_ddiv+0xd8>
    295e:	0003      	movs	r3, r0
    2960:	4652      	mov	r2, sl
    2962:	3b28      	subs	r3, #40	; 0x28
    2964:	409a      	lsls	r2, r3
    2966:	2100      	movs	r1, #0
    2968:	4693      	mov	fp, r2
    296a:	e677      	b.n	265c <__aeabi_ddiv+0x154>
    296c:	f000 ff02 	bl	3774 <__clzsi2>
    2970:	3020      	adds	r0, #32
    2972:	e65f      	b.n	2634 <__aeabi_ddiv+0x12c>
    2974:	4588      	cmp	r8, r1
    2976:	d200      	bcs.n	297a <__aeabi_ddiv+0x472>
    2978:	e6c7      	b.n	270a <__aeabi_ddiv+0x202>
    297a:	464b      	mov	r3, r9
    297c:	07de      	lsls	r6, r3, #31
    297e:	085d      	lsrs	r5, r3, #1
    2980:	4643      	mov	r3, r8
    2982:	085b      	lsrs	r3, r3, #1
    2984:	431e      	orrs	r6, r3
    2986:	4643      	mov	r3, r8
    2988:	07db      	lsls	r3, r3, #31
    298a:	469a      	mov	sl, r3
    298c:	e6c2      	b.n	2714 <__aeabi_ddiv+0x20c>
    298e:	2500      	movs	r5, #0
    2990:	4592      	cmp	sl, r2
    2992:	d300      	bcc.n	2996 <__aeabi_ddiv+0x48e>
    2994:	e733      	b.n	27fe <__aeabi_ddiv+0x2f6>
    2996:	9e03      	ldr	r6, [sp, #12]
    2998:	4659      	mov	r1, fp
    299a:	46b4      	mov	ip, r6
    299c:	44e2      	add	sl, ip
    299e:	45b2      	cmp	sl, r6
    29a0:	41ad      	sbcs	r5, r5
    29a2:	426d      	negs	r5, r5
    29a4:	4445      	add	r5, r8
    29a6:	18eb      	adds	r3, r5, r3
    29a8:	3901      	subs	r1, #1
    29aa:	4598      	cmp	r8, r3
    29ac:	d207      	bcs.n	29be <__aeabi_ddiv+0x4b6>
    29ae:	4298      	cmp	r0, r3
    29b0:	d900      	bls.n	29b4 <__aeabi_ddiv+0x4ac>
    29b2:	e07f      	b.n	2ab4 <__aeabi_ddiv+0x5ac>
    29b4:	d100      	bne.n	29b8 <__aeabi_ddiv+0x4b0>
    29b6:	e0bc      	b.n	2b32 <__aeabi_ddiv+0x62a>
    29b8:	1a1d      	subs	r5, r3, r0
    29ba:	468b      	mov	fp, r1
    29bc:	e71f      	b.n	27fe <__aeabi_ddiv+0x2f6>
    29be:	4598      	cmp	r8, r3
    29c0:	d1fa      	bne.n	29b8 <__aeabi_ddiv+0x4b0>
    29c2:	9d03      	ldr	r5, [sp, #12]
    29c4:	4555      	cmp	r5, sl
    29c6:	d9f2      	bls.n	29ae <__aeabi_ddiv+0x4a6>
    29c8:	4643      	mov	r3, r8
    29ca:	468b      	mov	fp, r1
    29cc:	1a1d      	subs	r5, r3, r0
    29ce:	e716      	b.n	27fe <__aeabi_ddiv+0x2f6>
    29d0:	469b      	mov	fp, r3
    29d2:	e6ca      	b.n	276a <__aeabi_ddiv+0x262>
    29d4:	0015      	movs	r5, r2
    29d6:	e6e7      	b.n	27a8 <__aeabi_ddiv+0x2a0>
    29d8:	465a      	mov	r2, fp
    29da:	08c9      	lsrs	r1, r1, #3
    29dc:	0752      	lsls	r2, r2, #29
    29de:	430a      	orrs	r2, r1
    29e0:	055b      	lsls	r3, r3, #21
    29e2:	4690      	mov	r8, r2
    29e4:	0d5c      	lsrs	r4, r3, #21
    29e6:	465a      	mov	r2, fp
    29e8:	2301      	movs	r3, #1
    29ea:	9902      	ldr	r1, [sp, #8]
    29ec:	0252      	lsls	r2, r2, #9
    29ee:	4019      	ands	r1, r3
    29f0:	0b12      	lsrs	r2, r2, #12
    29f2:	468c      	mov	ip, r1
    29f4:	e656      	b.n	26a4 <__aeabi_ddiv+0x19c>
    29f6:	2b00      	cmp	r3, #0
    29f8:	d100      	bne.n	29fc <__aeabi_ddiv+0x4f4>
    29fa:	e76f      	b.n	28dc <__aeabi_ddiv+0x3d4>
    29fc:	4446      	add	r6, r8
    29fe:	1e4a      	subs	r2, r1, #1
    2a00:	45b0      	cmp	r8, r6
    2a02:	d929      	bls.n	2a58 <__aeabi_ddiv+0x550>
    2a04:	0011      	movs	r1, r2
    2a06:	4286      	cmp	r6, r0
    2a08:	d000      	beq.n	2a0c <__aeabi_ddiv+0x504>
    2a0a:	e765      	b.n	28d8 <__aeabi_ddiv+0x3d0>
    2a0c:	9a03      	ldr	r2, [sp, #12]
    2a0e:	4293      	cmp	r3, r2
    2a10:	d000      	beq.n	2a14 <__aeabi_ddiv+0x50c>
    2a12:	e761      	b.n	28d8 <__aeabi_ddiv+0x3d0>
    2a14:	e762      	b.n	28dc <__aeabi_ddiv+0x3d4>
    2a16:	2101      	movs	r1, #1
    2a18:	4249      	negs	r1, r1
    2a1a:	2001      	movs	r0, #1
    2a1c:	1ac2      	subs	r2, r0, r3
    2a1e:	2a38      	cmp	r2, #56	; 0x38
    2a20:	dd21      	ble.n	2a66 <__aeabi_ddiv+0x55e>
    2a22:	9b02      	ldr	r3, [sp, #8]
    2a24:	4003      	ands	r3, r0
    2a26:	469c      	mov	ip, r3
    2a28:	e638      	b.n	269c <__aeabi_ddiv+0x194>
    2a2a:	220f      	movs	r2, #15
    2a2c:	400a      	ands	r2, r1
    2a2e:	2a04      	cmp	r2, #4
    2a30:	d100      	bne.n	2a34 <__aeabi_ddiv+0x52c>
    2a32:	e75b      	b.n	28ec <__aeabi_ddiv+0x3e4>
    2a34:	000a      	movs	r2, r1
    2a36:	1d11      	adds	r1, r2, #4
    2a38:	4291      	cmp	r1, r2
    2a3a:	4192      	sbcs	r2, r2
    2a3c:	4252      	negs	r2, r2
    2a3e:	4493      	add	fp, r2
    2a40:	e754      	b.n	28ec <__aeabi_ddiv+0x3e4>
    2a42:	4b47      	ldr	r3, [pc, #284]	; (2b60 <__aeabi_ddiv+0x658>)
    2a44:	18e3      	adds	r3, r4, r3
    2a46:	2b00      	cmp	r3, #0
    2a48:	dde5      	ble.n	2a16 <__aeabi_ddiv+0x50e>
    2a4a:	2201      	movs	r2, #1
    2a4c:	4252      	negs	r2, r2
    2a4e:	e7f2      	b.n	2a36 <__aeabi_ddiv+0x52e>
    2a50:	001d      	movs	r5, r3
    2a52:	e6fa      	b.n	284a <__aeabi_ddiv+0x342>
    2a54:	469a      	mov	sl, r3
    2a56:	e71c      	b.n	2892 <__aeabi_ddiv+0x38a>
    2a58:	42b0      	cmp	r0, r6
    2a5a:	d839      	bhi.n	2ad0 <__aeabi_ddiv+0x5c8>
    2a5c:	d06e      	beq.n	2b3c <__aeabi_ddiv+0x634>
    2a5e:	0011      	movs	r1, r2
    2a60:	e73a      	b.n	28d8 <__aeabi_ddiv+0x3d0>
    2a62:	9302      	str	r3, [sp, #8]
    2a64:	e73a      	b.n	28dc <__aeabi_ddiv+0x3d4>
    2a66:	2a1f      	cmp	r2, #31
    2a68:	dc3c      	bgt.n	2ae4 <__aeabi_ddiv+0x5dc>
    2a6a:	2320      	movs	r3, #32
    2a6c:	1a9b      	subs	r3, r3, r2
    2a6e:	000c      	movs	r4, r1
    2a70:	4658      	mov	r0, fp
    2a72:	4099      	lsls	r1, r3
    2a74:	4098      	lsls	r0, r3
    2a76:	1e4b      	subs	r3, r1, #1
    2a78:	4199      	sbcs	r1, r3
    2a7a:	465b      	mov	r3, fp
    2a7c:	40d4      	lsrs	r4, r2
    2a7e:	40d3      	lsrs	r3, r2
    2a80:	4320      	orrs	r0, r4
    2a82:	4308      	orrs	r0, r1
    2a84:	001a      	movs	r2, r3
    2a86:	0743      	lsls	r3, r0, #29
    2a88:	d009      	beq.n	2a9e <__aeabi_ddiv+0x596>
    2a8a:	230f      	movs	r3, #15
    2a8c:	4003      	ands	r3, r0
    2a8e:	2b04      	cmp	r3, #4
    2a90:	d005      	beq.n	2a9e <__aeabi_ddiv+0x596>
    2a92:	0001      	movs	r1, r0
    2a94:	1d08      	adds	r0, r1, #4
    2a96:	4288      	cmp	r0, r1
    2a98:	419b      	sbcs	r3, r3
    2a9a:	425b      	negs	r3, r3
    2a9c:	18d2      	adds	r2, r2, r3
    2a9e:	0213      	lsls	r3, r2, #8
    2aa0:	d53a      	bpl.n	2b18 <__aeabi_ddiv+0x610>
    2aa2:	2301      	movs	r3, #1
    2aa4:	9a02      	ldr	r2, [sp, #8]
    2aa6:	2401      	movs	r4, #1
    2aa8:	401a      	ands	r2, r3
    2aaa:	2300      	movs	r3, #0
    2aac:	4694      	mov	ip, r2
    2aae:	4698      	mov	r8, r3
    2ab0:	2200      	movs	r2, #0
    2ab2:	e5f7      	b.n	26a4 <__aeabi_ddiv+0x19c>
    2ab4:	2102      	movs	r1, #2
    2ab6:	4249      	negs	r1, r1
    2ab8:	468c      	mov	ip, r1
    2aba:	9d03      	ldr	r5, [sp, #12]
    2abc:	44e3      	add	fp, ip
    2abe:	46ac      	mov	ip, r5
    2ac0:	44e2      	add	sl, ip
    2ac2:	45aa      	cmp	sl, r5
    2ac4:	41ad      	sbcs	r5, r5
    2ac6:	426d      	negs	r5, r5
    2ac8:	4445      	add	r5, r8
    2aca:	18ed      	adds	r5, r5, r3
    2acc:	1a2d      	subs	r5, r5, r0
    2ace:	e696      	b.n	27fe <__aeabi_ddiv+0x2f6>
    2ad0:	1e8a      	subs	r2, r1, #2
    2ad2:	9903      	ldr	r1, [sp, #12]
    2ad4:	004d      	lsls	r5, r1, #1
    2ad6:	428d      	cmp	r5, r1
    2ad8:	4189      	sbcs	r1, r1
    2ada:	4249      	negs	r1, r1
    2adc:	4441      	add	r1, r8
    2ade:	1876      	adds	r6, r6, r1
    2ae0:	9503      	str	r5, [sp, #12]
    2ae2:	e78f      	b.n	2a04 <__aeabi_ddiv+0x4fc>
    2ae4:	201f      	movs	r0, #31
    2ae6:	4240      	negs	r0, r0
    2ae8:	1ac3      	subs	r3, r0, r3
    2aea:	4658      	mov	r0, fp
    2aec:	40d8      	lsrs	r0, r3
    2aee:	0003      	movs	r3, r0
    2af0:	2a20      	cmp	r2, #32
    2af2:	d028      	beq.n	2b46 <__aeabi_ddiv+0x63e>
    2af4:	2040      	movs	r0, #64	; 0x40
    2af6:	465d      	mov	r5, fp
    2af8:	1a82      	subs	r2, r0, r2
    2afa:	4095      	lsls	r5, r2
    2afc:	4329      	orrs	r1, r5
    2afe:	1e4a      	subs	r2, r1, #1
    2b00:	4191      	sbcs	r1, r2
    2b02:	4319      	orrs	r1, r3
    2b04:	2307      	movs	r3, #7
    2b06:	2200      	movs	r2, #0
    2b08:	400b      	ands	r3, r1
    2b0a:	d009      	beq.n	2b20 <__aeabi_ddiv+0x618>
    2b0c:	230f      	movs	r3, #15
    2b0e:	2200      	movs	r2, #0
    2b10:	400b      	ands	r3, r1
    2b12:	0008      	movs	r0, r1
    2b14:	2b04      	cmp	r3, #4
    2b16:	d1bd      	bne.n	2a94 <__aeabi_ddiv+0x58c>
    2b18:	0001      	movs	r1, r0
    2b1a:	0753      	lsls	r3, r2, #29
    2b1c:	0252      	lsls	r2, r2, #9
    2b1e:	0b12      	lsrs	r2, r2, #12
    2b20:	08c9      	lsrs	r1, r1, #3
    2b22:	4319      	orrs	r1, r3
    2b24:	2301      	movs	r3, #1
    2b26:	4688      	mov	r8, r1
    2b28:	9902      	ldr	r1, [sp, #8]
    2b2a:	2400      	movs	r4, #0
    2b2c:	4019      	ands	r1, r3
    2b2e:	468c      	mov	ip, r1
    2b30:	e5b8      	b.n	26a4 <__aeabi_ddiv+0x19c>
    2b32:	4552      	cmp	r2, sl
    2b34:	d8be      	bhi.n	2ab4 <__aeabi_ddiv+0x5ac>
    2b36:	468b      	mov	fp, r1
    2b38:	2500      	movs	r5, #0
    2b3a:	e660      	b.n	27fe <__aeabi_ddiv+0x2f6>
    2b3c:	9d03      	ldr	r5, [sp, #12]
    2b3e:	429d      	cmp	r5, r3
    2b40:	d3c6      	bcc.n	2ad0 <__aeabi_ddiv+0x5c8>
    2b42:	0011      	movs	r1, r2
    2b44:	e762      	b.n	2a0c <__aeabi_ddiv+0x504>
    2b46:	2500      	movs	r5, #0
    2b48:	e7d8      	b.n	2afc <__aeabi_ddiv+0x5f4>
    2b4a:	2280      	movs	r2, #128	; 0x80
    2b4c:	465b      	mov	r3, fp
    2b4e:	0312      	lsls	r2, r2, #12
    2b50:	431a      	orrs	r2, r3
    2b52:	9b01      	ldr	r3, [sp, #4]
    2b54:	0312      	lsls	r2, r2, #12
    2b56:	0b12      	lsrs	r2, r2, #12
    2b58:	469c      	mov	ip, r3
    2b5a:	4688      	mov	r8, r1
    2b5c:	4c03      	ldr	r4, [pc, #12]	; (2b6c <__aeabi_ddiv+0x664>)
    2b5e:	e5a1      	b.n	26a4 <__aeabi_ddiv+0x19c>
    2b60:	000003ff 	.word	0x000003ff
    2b64:	feffffff 	.word	0xfeffffff
    2b68:	000007fe 	.word	0x000007fe
    2b6c:	000007ff 	.word	0x000007ff

00002b70 <__aeabi_dmul>:
    2b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b72:	4657      	mov	r7, sl
    2b74:	4645      	mov	r5, r8
    2b76:	46de      	mov	lr, fp
    2b78:	464e      	mov	r6, r9
    2b7a:	b5e0      	push	{r5, r6, r7, lr}
    2b7c:	030c      	lsls	r4, r1, #12
    2b7e:	4698      	mov	r8, r3
    2b80:	004e      	lsls	r6, r1, #1
    2b82:	0b23      	lsrs	r3, r4, #12
    2b84:	b087      	sub	sp, #28
    2b86:	0007      	movs	r7, r0
    2b88:	4692      	mov	sl, r2
    2b8a:	469b      	mov	fp, r3
    2b8c:	0d76      	lsrs	r6, r6, #21
    2b8e:	0fcd      	lsrs	r5, r1, #31
    2b90:	2e00      	cmp	r6, #0
    2b92:	d06b      	beq.n	2c6c <__aeabi_dmul+0xfc>
    2b94:	4b6d      	ldr	r3, [pc, #436]	; (2d4c <__aeabi_dmul+0x1dc>)
    2b96:	429e      	cmp	r6, r3
    2b98:	d035      	beq.n	2c06 <__aeabi_dmul+0x96>
    2b9a:	2480      	movs	r4, #128	; 0x80
    2b9c:	465b      	mov	r3, fp
    2b9e:	0f42      	lsrs	r2, r0, #29
    2ba0:	0424      	lsls	r4, r4, #16
    2ba2:	00db      	lsls	r3, r3, #3
    2ba4:	4314      	orrs	r4, r2
    2ba6:	431c      	orrs	r4, r3
    2ba8:	00c3      	lsls	r3, r0, #3
    2baa:	4699      	mov	r9, r3
    2bac:	4b68      	ldr	r3, [pc, #416]	; (2d50 <__aeabi_dmul+0x1e0>)
    2bae:	46a3      	mov	fp, r4
    2bb0:	469c      	mov	ip, r3
    2bb2:	2300      	movs	r3, #0
    2bb4:	2700      	movs	r7, #0
    2bb6:	4466      	add	r6, ip
    2bb8:	9302      	str	r3, [sp, #8]
    2bba:	4643      	mov	r3, r8
    2bbc:	031c      	lsls	r4, r3, #12
    2bbe:	005a      	lsls	r2, r3, #1
    2bc0:	0fdb      	lsrs	r3, r3, #31
    2bc2:	4650      	mov	r0, sl
    2bc4:	0b24      	lsrs	r4, r4, #12
    2bc6:	0d52      	lsrs	r2, r2, #21
    2bc8:	4698      	mov	r8, r3
    2bca:	d100      	bne.n	2bce <__aeabi_dmul+0x5e>
    2bcc:	e076      	b.n	2cbc <__aeabi_dmul+0x14c>
    2bce:	4b5f      	ldr	r3, [pc, #380]	; (2d4c <__aeabi_dmul+0x1dc>)
    2bd0:	429a      	cmp	r2, r3
    2bd2:	d06d      	beq.n	2cb0 <__aeabi_dmul+0x140>
    2bd4:	2380      	movs	r3, #128	; 0x80
    2bd6:	0f41      	lsrs	r1, r0, #29
    2bd8:	041b      	lsls	r3, r3, #16
    2bda:	430b      	orrs	r3, r1
    2bdc:	495c      	ldr	r1, [pc, #368]	; (2d50 <__aeabi_dmul+0x1e0>)
    2bde:	00e4      	lsls	r4, r4, #3
    2be0:	468c      	mov	ip, r1
    2be2:	431c      	orrs	r4, r3
    2be4:	00c3      	lsls	r3, r0, #3
    2be6:	2000      	movs	r0, #0
    2be8:	4462      	add	r2, ip
    2bea:	4641      	mov	r1, r8
    2bec:	18b6      	adds	r6, r6, r2
    2bee:	4069      	eors	r1, r5
    2bf0:	1c72      	adds	r2, r6, #1
    2bf2:	9101      	str	r1, [sp, #4]
    2bf4:	4694      	mov	ip, r2
    2bf6:	4307      	orrs	r7, r0
    2bf8:	2f0f      	cmp	r7, #15
    2bfa:	d900      	bls.n	2bfe <__aeabi_dmul+0x8e>
    2bfc:	e0b0      	b.n	2d60 <__aeabi_dmul+0x1f0>
    2bfe:	4a55      	ldr	r2, [pc, #340]	; (2d54 <__aeabi_dmul+0x1e4>)
    2c00:	00bf      	lsls	r7, r7, #2
    2c02:	59d2      	ldr	r2, [r2, r7]
    2c04:	4697      	mov	pc, r2
    2c06:	465b      	mov	r3, fp
    2c08:	4303      	orrs	r3, r0
    2c0a:	4699      	mov	r9, r3
    2c0c:	d000      	beq.n	2c10 <__aeabi_dmul+0xa0>
    2c0e:	e087      	b.n	2d20 <__aeabi_dmul+0x1b0>
    2c10:	2300      	movs	r3, #0
    2c12:	469b      	mov	fp, r3
    2c14:	3302      	adds	r3, #2
    2c16:	2708      	movs	r7, #8
    2c18:	9302      	str	r3, [sp, #8]
    2c1a:	e7ce      	b.n	2bba <__aeabi_dmul+0x4a>
    2c1c:	4642      	mov	r2, r8
    2c1e:	9201      	str	r2, [sp, #4]
    2c20:	2802      	cmp	r0, #2
    2c22:	d067      	beq.n	2cf4 <__aeabi_dmul+0x184>
    2c24:	2803      	cmp	r0, #3
    2c26:	d100      	bne.n	2c2a <__aeabi_dmul+0xba>
    2c28:	e20e      	b.n	3048 <__aeabi_dmul+0x4d8>
    2c2a:	2801      	cmp	r0, #1
    2c2c:	d000      	beq.n	2c30 <__aeabi_dmul+0xc0>
    2c2e:	e162      	b.n	2ef6 <__aeabi_dmul+0x386>
    2c30:	2300      	movs	r3, #0
    2c32:	2400      	movs	r4, #0
    2c34:	2200      	movs	r2, #0
    2c36:	4699      	mov	r9, r3
    2c38:	9901      	ldr	r1, [sp, #4]
    2c3a:	4001      	ands	r1, r0
    2c3c:	b2cd      	uxtb	r5, r1
    2c3e:	2100      	movs	r1, #0
    2c40:	0312      	lsls	r2, r2, #12
    2c42:	0d0b      	lsrs	r3, r1, #20
    2c44:	0b12      	lsrs	r2, r2, #12
    2c46:	051b      	lsls	r3, r3, #20
    2c48:	4313      	orrs	r3, r2
    2c4a:	4a43      	ldr	r2, [pc, #268]	; (2d58 <__aeabi_dmul+0x1e8>)
    2c4c:	0524      	lsls	r4, r4, #20
    2c4e:	4013      	ands	r3, r2
    2c50:	431c      	orrs	r4, r3
    2c52:	0064      	lsls	r4, r4, #1
    2c54:	07ed      	lsls	r5, r5, #31
    2c56:	0864      	lsrs	r4, r4, #1
    2c58:	432c      	orrs	r4, r5
    2c5a:	4648      	mov	r0, r9
    2c5c:	0021      	movs	r1, r4
    2c5e:	b007      	add	sp, #28
    2c60:	bc3c      	pop	{r2, r3, r4, r5}
    2c62:	4690      	mov	r8, r2
    2c64:	4699      	mov	r9, r3
    2c66:	46a2      	mov	sl, r4
    2c68:	46ab      	mov	fp, r5
    2c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c6c:	4303      	orrs	r3, r0
    2c6e:	4699      	mov	r9, r3
    2c70:	d04f      	beq.n	2d12 <__aeabi_dmul+0x1a2>
    2c72:	465b      	mov	r3, fp
    2c74:	2b00      	cmp	r3, #0
    2c76:	d100      	bne.n	2c7a <__aeabi_dmul+0x10a>
    2c78:	e189      	b.n	2f8e <__aeabi_dmul+0x41e>
    2c7a:	4658      	mov	r0, fp
    2c7c:	f000 fd7a 	bl	3774 <__clzsi2>
    2c80:	0003      	movs	r3, r0
    2c82:	3b0b      	subs	r3, #11
    2c84:	2b1c      	cmp	r3, #28
    2c86:	dd00      	ble.n	2c8a <__aeabi_dmul+0x11a>
    2c88:	e17a      	b.n	2f80 <__aeabi_dmul+0x410>
    2c8a:	221d      	movs	r2, #29
    2c8c:	1ad3      	subs	r3, r2, r3
    2c8e:	003a      	movs	r2, r7
    2c90:	0001      	movs	r1, r0
    2c92:	465c      	mov	r4, fp
    2c94:	40da      	lsrs	r2, r3
    2c96:	3908      	subs	r1, #8
    2c98:	408c      	lsls	r4, r1
    2c9a:	0013      	movs	r3, r2
    2c9c:	408f      	lsls	r7, r1
    2c9e:	4323      	orrs	r3, r4
    2ca0:	469b      	mov	fp, r3
    2ca2:	46b9      	mov	r9, r7
    2ca4:	2300      	movs	r3, #0
    2ca6:	4e2d      	ldr	r6, [pc, #180]	; (2d5c <__aeabi_dmul+0x1ec>)
    2ca8:	2700      	movs	r7, #0
    2caa:	1a36      	subs	r6, r6, r0
    2cac:	9302      	str	r3, [sp, #8]
    2cae:	e784      	b.n	2bba <__aeabi_dmul+0x4a>
    2cb0:	4653      	mov	r3, sl
    2cb2:	4323      	orrs	r3, r4
    2cb4:	d12a      	bne.n	2d0c <__aeabi_dmul+0x19c>
    2cb6:	2400      	movs	r4, #0
    2cb8:	2002      	movs	r0, #2
    2cba:	e796      	b.n	2bea <__aeabi_dmul+0x7a>
    2cbc:	4653      	mov	r3, sl
    2cbe:	4323      	orrs	r3, r4
    2cc0:	d020      	beq.n	2d04 <__aeabi_dmul+0x194>
    2cc2:	2c00      	cmp	r4, #0
    2cc4:	d100      	bne.n	2cc8 <__aeabi_dmul+0x158>
    2cc6:	e157      	b.n	2f78 <__aeabi_dmul+0x408>
    2cc8:	0020      	movs	r0, r4
    2cca:	f000 fd53 	bl	3774 <__clzsi2>
    2cce:	0003      	movs	r3, r0
    2cd0:	3b0b      	subs	r3, #11
    2cd2:	2b1c      	cmp	r3, #28
    2cd4:	dd00      	ble.n	2cd8 <__aeabi_dmul+0x168>
    2cd6:	e149      	b.n	2f6c <__aeabi_dmul+0x3fc>
    2cd8:	211d      	movs	r1, #29
    2cda:	1acb      	subs	r3, r1, r3
    2cdc:	4651      	mov	r1, sl
    2cde:	0002      	movs	r2, r0
    2ce0:	40d9      	lsrs	r1, r3
    2ce2:	4653      	mov	r3, sl
    2ce4:	3a08      	subs	r2, #8
    2ce6:	4094      	lsls	r4, r2
    2ce8:	4093      	lsls	r3, r2
    2cea:	430c      	orrs	r4, r1
    2cec:	4a1b      	ldr	r2, [pc, #108]	; (2d5c <__aeabi_dmul+0x1ec>)
    2cee:	1a12      	subs	r2, r2, r0
    2cf0:	2000      	movs	r0, #0
    2cf2:	e77a      	b.n	2bea <__aeabi_dmul+0x7a>
    2cf4:	2501      	movs	r5, #1
    2cf6:	9b01      	ldr	r3, [sp, #4]
    2cf8:	4c14      	ldr	r4, [pc, #80]	; (2d4c <__aeabi_dmul+0x1dc>)
    2cfa:	401d      	ands	r5, r3
    2cfc:	2300      	movs	r3, #0
    2cfe:	2200      	movs	r2, #0
    2d00:	4699      	mov	r9, r3
    2d02:	e79c      	b.n	2c3e <__aeabi_dmul+0xce>
    2d04:	2400      	movs	r4, #0
    2d06:	2200      	movs	r2, #0
    2d08:	2001      	movs	r0, #1
    2d0a:	e76e      	b.n	2bea <__aeabi_dmul+0x7a>
    2d0c:	4653      	mov	r3, sl
    2d0e:	2003      	movs	r0, #3
    2d10:	e76b      	b.n	2bea <__aeabi_dmul+0x7a>
    2d12:	2300      	movs	r3, #0
    2d14:	469b      	mov	fp, r3
    2d16:	3301      	adds	r3, #1
    2d18:	2704      	movs	r7, #4
    2d1a:	2600      	movs	r6, #0
    2d1c:	9302      	str	r3, [sp, #8]
    2d1e:	e74c      	b.n	2bba <__aeabi_dmul+0x4a>
    2d20:	2303      	movs	r3, #3
    2d22:	4681      	mov	r9, r0
    2d24:	270c      	movs	r7, #12
    2d26:	9302      	str	r3, [sp, #8]
    2d28:	e747      	b.n	2bba <__aeabi_dmul+0x4a>
    2d2a:	2280      	movs	r2, #128	; 0x80
    2d2c:	2300      	movs	r3, #0
    2d2e:	2500      	movs	r5, #0
    2d30:	0312      	lsls	r2, r2, #12
    2d32:	4699      	mov	r9, r3
    2d34:	4c05      	ldr	r4, [pc, #20]	; (2d4c <__aeabi_dmul+0x1dc>)
    2d36:	e782      	b.n	2c3e <__aeabi_dmul+0xce>
    2d38:	465c      	mov	r4, fp
    2d3a:	464b      	mov	r3, r9
    2d3c:	9802      	ldr	r0, [sp, #8]
    2d3e:	e76f      	b.n	2c20 <__aeabi_dmul+0xb0>
    2d40:	465c      	mov	r4, fp
    2d42:	464b      	mov	r3, r9
    2d44:	9501      	str	r5, [sp, #4]
    2d46:	9802      	ldr	r0, [sp, #8]
    2d48:	e76a      	b.n	2c20 <__aeabi_dmul+0xb0>
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	000007ff 	.word	0x000007ff
    2d50:	fffffc01 	.word	0xfffffc01
    2d54:	00003878 	.word	0x00003878
    2d58:	800fffff 	.word	0x800fffff
    2d5c:	fffffc0d 	.word	0xfffffc0d
    2d60:	464a      	mov	r2, r9
    2d62:	4649      	mov	r1, r9
    2d64:	0c17      	lsrs	r7, r2, #16
    2d66:	0c1a      	lsrs	r2, r3, #16
    2d68:	041b      	lsls	r3, r3, #16
    2d6a:	0c1b      	lsrs	r3, r3, #16
    2d6c:	0408      	lsls	r0, r1, #16
    2d6e:	0019      	movs	r1, r3
    2d70:	0c00      	lsrs	r0, r0, #16
    2d72:	4341      	muls	r1, r0
    2d74:	0015      	movs	r5, r2
    2d76:	4688      	mov	r8, r1
    2d78:	0019      	movs	r1, r3
    2d7a:	437d      	muls	r5, r7
    2d7c:	4379      	muls	r1, r7
    2d7e:	9503      	str	r5, [sp, #12]
    2d80:	4689      	mov	r9, r1
    2d82:	0029      	movs	r1, r5
    2d84:	0015      	movs	r5, r2
    2d86:	4345      	muls	r5, r0
    2d88:	444d      	add	r5, r9
    2d8a:	9502      	str	r5, [sp, #8]
    2d8c:	4645      	mov	r5, r8
    2d8e:	0c2d      	lsrs	r5, r5, #16
    2d90:	46aa      	mov	sl, r5
    2d92:	9d02      	ldr	r5, [sp, #8]
    2d94:	4455      	add	r5, sl
    2d96:	45a9      	cmp	r9, r5
    2d98:	d906      	bls.n	2da8 <__aeabi_dmul+0x238>
    2d9a:	468a      	mov	sl, r1
    2d9c:	2180      	movs	r1, #128	; 0x80
    2d9e:	0249      	lsls	r1, r1, #9
    2da0:	4689      	mov	r9, r1
    2da2:	44ca      	add	sl, r9
    2da4:	4651      	mov	r1, sl
    2da6:	9103      	str	r1, [sp, #12]
    2da8:	0c29      	lsrs	r1, r5, #16
    2daa:	9104      	str	r1, [sp, #16]
    2dac:	4641      	mov	r1, r8
    2dae:	0409      	lsls	r1, r1, #16
    2db0:	042d      	lsls	r5, r5, #16
    2db2:	0c09      	lsrs	r1, r1, #16
    2db4:	4688      	mov	r8, r1
    2db6:	0029      	movs	r1, r5
    2db8:	0c25      	lsrs	r5, r4, #16
    2dba:	0424      	lsls	r4, r4, #16
    2dbc:	4441      	add	r1, r8
    2dbe:	0c24      	lsrs	r4, r4, #16
    2dc0:	9105      	str	r1, [sp, #20]
    2dc2:	0021      	movs	r1, r4
    2dc4:	4341      	muls	r1, r0
    2dc6:	4688      	mov	r8, r1
    2dc8:	0021      	movs	r1, r4
    2dca:	4379      	muls	r1, r7
    2dcc:	468a      	mov	sl, r1
    2dce:	4368      	muls	r0, r5
    2dd0:	4641      	mov	r1, r8
    2dd2:	4450      	add	r0, sl
    2dd4:	4681      	mov	r9, r0
    2dd6:	0c08      	lsrs	r0, r1, #16
    2dd8:	4448      	add	r0, r9
    2dda:	436f      	muls	r7, r5
    2ddc:	4582      	cmp	sl, r0
    2dde:	d903      	bls.n	2de8 <__aeabi_dmul+0x278>
    2de0:	2180      	movs	r1, #128	; 0x80
    2de2:	0249      	lsls	r1, r1, #9
    2de4:	4689      	mov	r9, r1
    2de6:	444f      	add	r7, r9
    2de8:	0c01      	lsrs	r1, r0, #16
    2dea:	4689      	mov	r9, r1
    2dec:	0039      	movs	r1, r7
    2dee:	4449      	add	r1, r9
    2df0:	9102      	str	r1, [sp, #8]
    2df2:	4641      	mov	r1, r8
    2df4:	040f      	lsls	r7, r1, #16
    2df6:	9904      	ldr	r1, [sp, #16]
    2df8:	0c3f      	lsrs	r7, r7, #16
    2dfa:	4688      	mov	r8, r1
    2dfc:	0400      	lsls	r0, r0, #16
    2dfe:	19c0      	adds	r0, r0, r7
    2e00:	4480      	add	r8, r0
    2e02:	4641      	mov	r1, r8
    2e04:	9104      	str	r1, [sp, #16]
    2e06:	4659      	mov	r1, fp
    2e08:	0c0f      	lsrs	r7, r1, #16
    2e0a:	0409      	lsls	r1, r1, #16
    2e0c:	0c09      	lsrs	r1, r1, #16
    2e0e:	4688      	mov	r8, r1
    2e10:	4359      	muls	r1, r3
    2e12:	468a      	mov	sl, r1
    2e14:	0039      	movs	r1, r7
    2e16:	4351      	muls	r1, r2
    2e18:	4689      	mov	r9, r1
    2e1a:	4641      	mov	r1, r8
    2e1c:	434a      	muls	r2, r1
    2e1e:	4651      	mov	r1, sl
    2e20:	0c09      	lsrs	r1, r1, #16
    2e22:	468b      	mov	fp, r1
    2e24:	437b      	muls	r3, r7
    2e26:	18d2      	adds	r2, r2, r3
    2e28:	445a      	add	r2, fp
    2e2a:	4293      	cmp	r3, r2
    2e2c:	d903      	bls.n	2e36 <__aeabi_dmul+0x2c6>
    2e2e:	2380      	movs	r3, #128	; 0x80
    2e30:	025b      	lsls	r3, r3, #9
    2e32:	469b      	mov	fp, r3
    2e34:	44d9      	add	r9, fp
    2e36:	4651      	mov	r1, sl
    2e38:	0409      	lsls	r1, r1, #16
    2e3a:	0c09      	lsrs	r1, r1, #16
    2e3c:	468a      	mov	sl, r1
    2e3e:	4641      	mov	r1, r8
    2e40:	4361      	muls	r1, r4
    2e42:	437c      	muls	r4, r7
    2e44:	0c13      	lsrs	r3, r2, #16
    2e46:	0412      	lsls	r2, r2, #16
    2e48:	444b      	add	r3, r9
    2e4a:	4452      	add	r2, sl
    2e4c:	46a1      	mov	r9, r4
    2e4e:	468a      	mov	sl, r1
    2e50:	003c      	movs	r4, r7
    2e52:	4641      	mov	r1, r8
    2e54:	436c      	muls	r4, r5
    2e56:	434d      	muls	r5, r1
    2e58:	4651      	mov	r1, sl
    2e5a:	444d      	add	r5, r9
    2e5c:	0c0f      	lsrs	r7, r1, #16
    2e5e:	197d      	adds	r5, r7, r5
    2e60:	45a9      	cmp	r9, r5
    2e62:	d903      	bls.n	2e6c <__aeabi_dmul+0x2fc>
    2e64:	2180      	movs	r1, #128	; 0x80
    2e66:	0249      	lsls	r1, r1, #9
    2e68:	4688      	mov	r8, r1
    2e6a:	4444      	add	r4, r8
    2e6c:	9f04      	ldr	r7, [sp, #16]
    2e6e:	9903      	ldr	r1, [sp, #12]
    2e70:	46b8      	mov	r8, r7
    2e72:	4441      	add	r1, r8
    2e74:	468b      	mov	fp, r1
    2e76:	4583      	cmp	fp, r0
    2e78:	4180      	sbcs	r0, r0
    2e7a:	4241      	negs	r1, r0
    2e7c:	4688      	mov	r8, r1
    2e7e:	4651      	mov	r1, sl
    2e80:	0408      	lsls	r0, r1, #16
    2e82:	042f      	lsls	r7, r5, #16
    2e84:	0c00      	lsrs	r0, r0, #16
    2e86:	183f      	adds	r7, r7, r0
    2e88:	4658      	mov	r0, fp
    2e8a:	9902      	ldr	r1, [sp, #8]
    2e8c:	1810      	adds	r0, r2, r0
    2e8e:	4689      	mov	r9, r1
    2e90:	4290      	cmp	r0, r2
    2e92:	4192      	sbcs	r2, r2
    2e94:	444f      	add	r7, r9
    2e96:	46ba      	mov	sl, r7
    2e98:	4252      	negs	r2, r2
    2e9a:	4699      	mov	r9, r3
    2e9c:	4693      	mov	fp, r2
    2e9e:	44c2      	add	sl, r8
    2ea0:	44d1      	add	r9, sl
    2ea2:	44cb      	add	fp, r9
    2ea4:	428f      	cmp	r7, r1
    2ea6:	41bf      	sbcs	r7, r7
    2ea8:	45c2      	cmp	sl, r8
    2eaa:	4189      	sbcs	r1, r1
    2eac:	4599      	cmp	r9, r3
    2eae:	419b      	sbcs	r3, r3
    2eb0:	4593      	cmp	fp, r2
    2eb2:	4192      	sbcs	r2, r2
    2eb4:	427f      	negs	r7, r7
    2eb6:	4249      	negs	r1, r1
    2eb8:	0c2d      	lsrs	r5, r5, #16
    2eba:	4252      	negs	r2, r2
    2ebc:	430f      	orrs	r7, r1
    2ebe:	425b      	negs	r3, r3
    2ec0:	4313      	orrs	r3, r2
    2ec2:	197f      	adds	r7, r7, r5
    2ec4:	18ff      	adds	r7, r7, r3
    2ec6:	465b      	mov	r3, fp
    2ec8:	193c      	adds	r4, r7, r4
    2eca:	0ddb      	lsrs	r3, r3, #23
    2ecc:	9a05      	ldr	r2, [sp, #20]
    2ece:	0264      	lsls	r4, r4, #9
    2ed0:	431c      	orrs	r4, r3
    2ed2:	0243      	lsls	r3, r0, #9
    2ed4:	4313      	orrs	r3, r2
    2ed6:	1e5d      	subs	r5, r3, #1
    2ed8:	41ab      	sbcs	r3, r5
    2eda:	465a      	mov	r2, fp
    2edc:	0dc0      	lsrs	r0, r0, #23
    2ede:	4303      	orrs	r3, r0
    2ee0:	0252      	lsls	r2, r2, #9
    2ee2:	4313      	orrs	r3, r2
    2ee4:	01e2      	lsls	r2, r4, #7
    2ee6:	d556      	bpl.n	2f96 <__aeabi_dmul+0x426>
    2ee8:	2001      	movs	r0, #1
    2eea:	085a      	lsrs	r2, r3, #1
    2eec:	4003      	ands	r3, r0
    2eee:	4313      	orrs	r3, r2
    2ef0:	07e2      	lsls	r2, r4, #31
    2ef2:	4313      	orrs	r3, r2
    2ef4:	0864      	lsrs	r4, r4, #1
    2ef6:	485a      	ldr	r0, [pc, #360]	; (3060 <__aeabi_dmul+0x4f0>)
    2ef8:	4460      	add	r0, ip
    2efa:	2800      	cmp	r0, #0
    2efc:	dd4d      	ble.n	2f9a <__aeabi_dmul+0x42a>
    2efe:	075a      	lsls	r2, r3, #29
    2f00:	d009      	beq.n	2f16 <__aeabi_dmul+0x3a6>
    2f02:	220f      	movs	r2, #15
    2f04:	401a      	ands	r2, r3
    2f06:	2a04      	cmp	r2, #4
    2f08:	d005      	beq.n	2f16 <__aeabi_dmul+0x3a6>
    2f0a:	1d1a      	adds	r2, r3, #4
    2f0c:	429a      	cmp	r2, r3
    2f0e:	419b      	sbcs	r3, r3
    2f10:	425b      	negs	r3, r3
    2f12:	18e4      	adds	r4, r4, r3
    2f14:	0013      	movs	r3, r2
    2f16:	01e2      	lsls	r2, r4, #7
    2f18:	d504      	bpl.n	2f24 <__aeabi_dmul+0x3b4>
    2f1a:	2080      	movs	r0, #128	; 0x80
    2f1c:	4a51      	ldr	r2, [pc, #324]	; (3064 <__aeabi_dmul+0x4f4>)
    2f1e:	00c0      	lsls	r0, r0, #3
    2f20:	4014      	ands	r4, r2
    2f22:	4460      	add	r0, ip
    2f24:	4a50      	ldr	r2, [pc, #320]	; (3068 <__aeabi_dmul+0x4f8>)
    2f26:	4290      	cmp	r0, r2
    2f28:	dd00      	ble.n	2f2c <__aeabi_dmul+0x3bc>
    2f2a:	e6e3      	b.n	2cf4 <__aeabi_dmul+0x184>
    2f2c:	2501      	movs	r5, #1
    2f2e:	08db      	lsrs	r3, r3, #3
    2f30:	0762      	lsls	r2, r4, #29
    2f32:	431a      	orrs	r2, r3
    2f34:	0264      	lsls	r4, r4, #9
    2f36:	9b01      	ldr	r3, [sp, #4]
    2f38:	4691      	mov	r9, r2
    2f3a:	0b22      	lsrs	r2, r4, #12
    2f3c:	0544      	lsls	r4, r0, #21
    2f3e:	0d64      	lsrs	r4, r4, #21
    2f40:	401d      	ands	r5, r3
    2f42:	e67c      	b.n	2c3e <__aeabi_dmul+0xce>
    2f44:	2280      	movs	r2, #128	; 0x80
    2f46:	4659      	mov	r1, fp
    2f48:	0312      	lsls	r2, r2, #12
    2f4a:	4211      	tst	r1, r2
    2f4c:	d008      	beq.n	2f60 <__aeabi_dmul+0x3f0>
    2f4e:	4214      	tst	r4, r2
    2f50:	d106      	bne.n	2f60 <__aeabi_dmul+0x3f0>
    2f52:	4322      	orrs	r2, r4
    2f54:	0312      	lsls	r2, r2, #12
    2f56:	0b12      	lsrs	r2, r2, #12
    2f58:	4645      	mov	r5, r8
    2f5a:	4699      	mov	r9, r3
    2f5c:	4c43      	ldr	r4, [pc, #268]	; (306c <__aeabi_dmul+0x4fc>)
    2f5e:	e66e      	b.n	2c3e <__aeabi_dmul+0xce>
    2f60:	465b      	mov	r3, fp
    2f62:	431a      	orrs	r2, r3
    2f64:	0312      	lsls	r2, r2, #12
    2f66:	0b12      	lsrs	r2, r2, #12
    2f68:	4c40      	ldr	r4, [pc, #256]	; (306c <__aeabi_dmul+0x4fc>)
    2f6a:	e668      	b.n	2c3e <__aeabi_dmul+0xce>
    2f6c:	0003      	movs	r3, r0
    2f6e:	4654      	mov	r4, sl
    2f70:	3b28      	subs	r3, #40	; 0x28
    2f72:	409c      	lsls	r4, r3
    2f74:	2300      	movs	r3, #0
    2f76:	e6b9      	b.n	2cec <__aeabi_dmul+0x17c>
    2f78:	f000 fbfc 	bl	3774 <__clzsi2>
    2f7c:	3020      	adds	r0, #32
    2f7e:	e6a6      	b.n	2cce <__aeabi_dmul+0x15e>
    2f80:	0003      	movs	r3, r0
    2f82:	3b28      	subs	r3, #40	; 0x28
    2f84:	409f      	lsls	r7, r3
    2f86:	2300      	movs	r3, #0
    2f88:	46bb      	mov	fp, r7
    2f8a:	4699      	mov	r9, r3
    2f8c:	e68a      	b.n	2ca4 <__aeabi_dmul+0x134>
    2f8e:	f000 fbf1 	bl	3774 <__clzsi2>
    2f92:	3020      	adds	r0, #32
    2f94:	e674      	b.n	2c80 <__aeabi_dmul+0x110>
    2f96:	46b4      	mov	ip, r6
    2f98:	e7ad      	b.n	2ef6 <__aeabi_dmul+0x386>
    2f9a:	2501      	movs	r5, #1
    2f9c:	1a2a      	subs	r2, r5, r0
    2f9e:	2a38      	cmp	r2, #56	; 0x38
    2fa0:	dd06      	ble.n	2fb0 <__aeabi_dmul+0x440>
    2fa2:	9b01      	ldr	r3, [sp, #4]
    2fa4:	2400      	movs	r4, #0
    2fa6:	401d      	ands	r5, r3
    2fa8:	2300      	movs	r3, #0
    2faa:	2200      	movs	r2, #0
    2fac:	4699      	mov	r9, r3
    2fae:	e646      	b.n	2c3e <__aeabi_dmul+0xce>
    2fb0:	2a1f      	cmp	r2, #31
    2fb2:	dc21      	bgt.n	2ff8 <__aeabi_dmul+0x488>
    2fb4:	2520      	movs	r5, #32
    2fb6:	0020      	movs	r0, r4
    2fb8:	1aad      	subs	r5, r5, r2
    2fba:	001e      	movs	r6, r3
    2fbc:	40ab      	lsls	r3, r5
    2fbe:	40a8      	lsls	r0, r5
    2fc0:	40d6      	lsrs	r6, r2
    2fc2:	1e5d      	subs	r5, r3, #1
    2fc4:	41ab      	sbcs	r3, r5
    2fc6:	4330      	orrs	r0, r6
    2fc8:	4318      	orrs	r0, r3
    2fca:	40d4      	lsrs	r4, r2
    2fcc:	0743      	lsls	r3, r0, #29
    2fce:	d009      	beq.n	2fe4 <__aeabi_dmul+0x474>
    2fd0:	230f      	movs	r3, #15
    2fd2:	4003      	ands	r3, r0
    2fd4:	2b04      	cmp	r3, #4
    2fd6:	d005      	beq.n	2fe4 <__aeabi_dmul+0x474>
    2fd8:	0003      	movs	r3, r0
    2fda:	1d18      	adds	r0, r3, #4
    2fdc:	4298      	cmp	r0, r3
    2fde:	419b      	sbcs	r3, r3
    2fe0:	425b      	negs	r3, r3
    2fe2:	18e4      	adds	r4, r4, r3
    2fe4:	0223      	lsls	r3, r4, #8
    2fe6:	d521      	bpl.n	302c <__aeabi_dmul+0x4bc>
    2fe8:	2501      	movs	r5, #1
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	2401      	movs	r4, #1
    2fee:	401d      	ands	r5, r3
    2ff0:	2300      	movs	r3, #0
    2ff2:	2200      	movs	r2, #0
    2ff4:	4699      	mov	r9, r3
    2ff6:	e622      	b.n	2c3e <__aeabi_dmul+0xce>
    2ff8:	251f      	movs	r5, #31
    2ffa:	0021      	movs	r1, r4
    2ffc:	426d      	negs	r5, r5
    2ffe:	1a28      	subs	r0, r5, r0
    3000:	40c1      	lsrs	r1, r0
    3002:	0008      	movs	r0, r1
    3004:	2a20      	cmp	r2, #32
    3006:	d01d      	beq.n	3044 <__aeabi_dmul+0x4d4>
    3008:	355f      	adds	r5, #95	; 0x5f
    300a:	1aaa      	subs	r2, r5, r2
    300c:	4094      	lsls	r4, r2
    300e:	4323      	orrs	r3, r4
    3010:	1e5c      	subs	r4, r3, #1
    3012:	41a3      	sbcs	r3, r4
    3014:	2507      	movs	r5, #7
    3016:	4303      	orrs	r3, r0
    3018:	401d      	ands	r5, r3
    301a:	2200      	movs	r2, #0
    301c:	2d00      	cmp	r5, #0
    301e:	d009      	beq.n	3034 <__aeabi_dmul+0x4c4>
    3020:	220f      	movs	r2, #15
    3022:	2400      	movs	r4, #0
    3024:	401a      	ands	r2, r3
    3026:	0018      	movs	r0, r3
    3028:	2a04      	cmp	r2, #4
    302a:	d1d6      	bne.n	2fda <__aeabi_dmul+0x46a>
    302c:	0003      	movs	r3, r0
    302e:	0765      	lsls	r5, r4, #29
    3030:	0264      	lsls	r4, r4, #9
    3032:	0b22      	lsrs	r2, r4, #12
    3034:	08db      	lsrs	r3, r3, #3
    3036:	432b      	orrs	r3, r5
    3038:	2501      	movs	r5, #1
    303a:	4699      	mov	r9, r3
    303c:	9b01      	ldr	r3, [sp, #4]
    303e:	2400      	movs	r4, #0
    3040:	401d      	ands	r5, r3
    3042:	e5fc      	b.n	2c3e <__aeabi_dmul+0xce>
    3044:	2400      	movs	r4, #0
    3046:	e7e2      	b.n	300e <__aeabi_dmul+0x49e>
    3048:	2280      	movs	r2, #128	; 0x80
    304a:	2501      	movs	r5, #1
    304c:	0312      	lsls	r2, r2, #12
    304e:	4322      	orrs	r2, r4
    3050:	9901      	ldr	r1, [sp, #4]
    3052:	0312      	lsls	r2, r2, #12
    3054:	0b12      	lsrs	r2, r2, #12
    3056:	400d      	ands	r5, r1
    3058:	4699      	mov	r9, r3
    305a:	4c04      	ldr	r4, [pc, #16]	; (306c <__aeabi_dmul+0x4fc>)
    305c:	e5ef      	b.n	2c3e <__aeabi_dmul+0xce>
    305e:	46c0      	nop			; (mov r8, r8)
    3060:	000003ff 	.word	0x000003ff
    3064:	feffffff 	.word	0xfeffffff
    3068:	000007fe 	.word	0x000007fe
    306c:	000007ff 	.word	0x000007ff

00003070 <__aeabi_dsub>:
    3070:	b5f0      	push	{r4, r5, r6, r7, lr}
    3072:	4646      	mov	r6, r8
    3074:	46d6      	mov	lr, sl
    3076:	464f      	mov	r7, r9
    3078:	030c      	lsls	r4, r1, #12
    307a:	b5c0      	push	{r6, r7, lr}
    307c:	0fcd      	lsrs	r5, r1, #31
    307e:	004e      	lsls	r6, r1, #1
    3080:	0a61      	lsrs	r1, r4, #9
    3082:	0f44      	lsrs	r4, r0, #29
    3084:	430c      	orrs	r4, r1
    3086:	00c1      	lsls	r1, r0, #3
    3088:	0058      	lsls	r0, r3, #1
    308a:	0d40      	lsrs	r0, r0, #21
    308c:	4684      	mov	ip, r0
    308e:	468a      	mov	sl, r1
    3090:	000f      	movs	r7, r1
    3092:	0319      	lsls	r1, r3, #12
    3094:	0f50      	lsrs	r0, r2, #29
    3096:	0a49      	lsrs	r1, r1, #9
    3098:	4301      	orrs	r1, r0
    309a:	48c6      	ldr	r0, [pc, #792]	; (33b4 <__aeabi_dsub+0x344>)
    309c:	0d76      	lsrs	r6, r6, #21
    309e:	46a8      	mov	r8, r5
    30a0:	0fdb      	lsrs	r3, r3, #31
    30a2:	00d2      	lsls	r2, r2, #3
    30a4:	4584      	cmp	ip, r0
    30a6:	d100      	bne.n	30aa <__aeabi_dsub+0x3a>
    30a8:	e0d8      	b.n	325c <__aeabi_dsub+0x1ec>
    30aa:	2001      	movs	r0, #1
    30ac:	4043      	eors	r3, r0
    30ae:	42ab      	cmp	r3, r5
    30b0:	d100      	bne.n	30b4 <__aeabi_dsub+0x44>
    30b2:	e0a6      	b.n	3202 <__aeabi_dsub+0x192>
    30b4:	4660      	mov	r0, ip
    30b6:	1a35      	subs	r5, r6, r0
    30b8:	2d00      	cmp	r5, #0
    30ba:	dc00      	bgt.n	30be <__aeabi_dsub+0x4e>
    30bc:	e105      	b.n	32ca <__aeabi_dsub+0x25a>
    30be:	2800      	cmp	r0, #0
    30c0:	d110      	bne.n	30e4 <__aeabi_dsub+0x74>
    30c2:	000b      	movs	r3, r1
    30c4:	4313      	orrs	r3, r2
    30c6:	d100      	bne.n	30ca <__aeabi_dsub+0x5a>
    30c8:	e0d7      	b.n	327a <__aeabi_dsub+0x20a>
    30ca:	1e6b      	subs	r3, r5, #1
    30cc:	2b00      	cmp	r3, #0
    30ce:	d000      	beq.n	30d2 <__aeabi_dsub+0x62>
    30d0:	e14b      	b.n	336a <__aeabi_dsub+0x2fa>
    30d2:	4653      	mov	r3, sl
    30d4:	1a9f      	subs	r7, r3, r2
    30d6:	45ba      	cmp	sl, r7
    30d8:	4180      	sbcs	r0, r0
    30da:	1a64      	subs	r4, r4, r1
    30dc:	4240      	negs	r0, r0
    30de:	1a24      	subs	r4, r4, r0
    30e0:	2601      	movs	r6, #1
    30e2:	e01e      	b.n	3122 <__aeabi_dsub+0xb2>
    30e4:	4bb3      	ldr	r3, [pc, #716]	; (33b4 <__aeabi_dsub+0x344>)
    30e6:	429e      	cmp	r6, r3
    30e8:	d048      	beq.n	317c <__aeabi_dsub+0x10c>
    30ea:	2380      	movs	r3, #128	; 0x80
    30ec:	041b      	lsls	r3, r3, #16
    30ee:	4319      	orrs	r1, r3
    30f0:	2d38      	cmp	r5, #56	; 0x38
    30f2:	dd00      	ble.n	30f6 <__aeabi_dsub+0x86>
    30f4:	e119      	b.n	332a <__aeabi_dsub+0x2ba>
    30f6:	2d1f      	cmp	r5, #31
    30f8:	dd00      	ble.n	30fc <__aeabi_dsub+0x8c>
    30fa:	e14c      	b.n	3396 <__aeabi_dsub+0x326>
    30fc:	2320      	movs	r3, #32
    30fe:	000f      	movs	r7, r1
    3100:	1b5b      	subs	r3, r3, r5
    3102:	0010      	movs	r0, r2
    3104:	409a      	lsls	r2, r3
    3106:	409f      	lsls	r7, r3
    3108:	40e8      	lsrs	r0, r5
    310a:	1e53      	subs	r3, r2, #1
    310c:	419a      	sbcs	r2, r3
    310e:	40e9      	lsrs	r1, r5
    3110:	4307      	orrs	r7, r0
    3112:	4317      	orrs	r7, r2
    3114:	4653      	mov	r3, sl
    3116:	1bdf      	subs	r7, r3, r7
    3118:	1a61      	subs	r1, r4, r1
    311a:	45ba      	cmp	sl, r7
    311c:	41a4      	sbcs	r4, r4
    311e:	4264      	negs	r4, r4
    3120:	1b0c      	subs	r4, r1, r4
    3122:	0223      	lsls	r3, r4, #8
    3124:	d400      	bmi.n	3128 <__aeabi_dsub+0xb8>
    3126:	e0c5      	b.n	32b4 <__aeabi_dsub+0x244>
    3128:	0264      	lsls	r4, r4, #9
    312a:	0a65      	lsrs	r5, r4, #9
    312c:	2d00      	cmp	r5, #0
    312e:	d100      	bne.n	3132 <__aeabi_dsub+0xc2>
    3130:	e0f6      	b.n	3320 <__aeabi_dsub+0x2b0>
    3132:	0028      	movs	r0, r5
    3134:	f000 fb1e 	bl	3774 <__clzsi2>
    3138:	0003      	movs	r3, r0
    313a:	3b08      	subs	r3, #8
    313c:	2b1f      	cmp	r3, #31
    313e:	dd00      	ble.n	3142 <__aeabi_dsub+0xd2>
    3140:	e0e9      	b.n	3316 <__aeabi_dsub+0x2a6>
    3142:	2220      	movs	r2, #32
    3144:	003c      	movs	r4, r7
    3146:	1ad2      	subs	r2, r2, r3
    3148:	409d      	lsls	r5, r3
    314a:	40d4      	lsrs	r4, r2
    314c:	409f      	lsls	r7, r3
    314e:	4325      	orrs	r5, r4
    3150:	429e      	cmp	r6, r3
    3152:	dd00      	ble.n	3156 <__aeabi_dsub+0xe6>
    3154:	e0db      	b.n	330e <__aeabi_dsub+0x29e>
    3156:	1b9e      	subs	r6, r3, r6
    3158:	1c73      	adds	r3, r6, #1
    315a:	2b1f      	cmp	r3, #31
    315c:	dd00      	ble.n	3160 <__aeabi_dsub+0xf0>
    315e:	e10a      	b.n	3376 <__aeabi_dsub+0x306>
    3160:	2220      	movs	r2, #32
    3162:	0038      	movs	r0, r7
    3164:	1ad2      	subs	r2, r2, r3
    3166:	0029      	movs	r1, r5
    3168:	4097      	lsls	r7, r2
    316a:	002c      	movs	r4, r5
    316c:	4091      	lsls	r1, r2
    316e:	40d8      	lsrs	r0, r3
    3170:	1e7a      	subs	r2, r7, #1
    3172:	4197      	sbcs	r7, r2
    3174:	40dc      	lsrs	r4, r3
    3176:	2600      	movs	r6, #0
    3178:	4301      	orrs	r1, r0
    317a:	430f      	orrs	r7, r1
    317c:	077b      	lsls	r3, r7, #29
    317e:	d009      	beq.n	3194 <__aeabi_dsub+0x124>
    3180:	230f      	movs	r3, #15
    3182:	403b      	ands	r3, r7
    3184:	2b04      	cmp	r3, #4
    3186:	d005      	beq.n	3194 <__aeabi_dsub+0x124>
    3188:	1d3b      	adds	r3, r7, #4
    318a:	42bb      	cmp	r3, r7
    318c:	41bf      	sbcs	r7, r7
    318e:	427f      	negs	r7, r7
    3190:	19e4      	adds	r4, r4, r7
    3192:	001f      	movs	r7, r3
    3194:	0223      	lsls	r3, r4, #8
    3196:	d525      	bpl.n	31e4 <__aeabi_dsub+0x174>
    3198:	4b86      	ldr	r3, [pc, #536]	; (33b4 <__aeabi_dsub+0x344>)
    319a:	3601      	adds	r6, #1
    319c:	429e      	cmp	r6, r3
    319e:	d100      	bne.n	31a2 <__aeabi_dsub+0x132>
    31a0:	e0af      	b.n	3302 <__aeabi_dsub+0x292>
    31a2:	4b85      	ldr	r3, [pc, #532]	; (33b8 <__aeabi_dsub+0x348>)
    31a4:	2501      	movs	r5, #1
    31a6:	401c      	ands	r4, r3
    31a8:	4643      	mov	r3, r8
    31aa:	0762      	lsls	r2, r4, #29
    31ac:	08ff      	lsrs	r7, r7, #3
    31ae:	0264      	lsls	r4, r4, #9
    31b0:	0576      	lsls	r6, r6, #21
    31b2:	4317      	orrs	r7, r2
    31b4:	0b24      	lsrs	r4, r4, #12
    31b6:	0d76      	lsrs	r6, r6, #21
    31b8:	401d      	ands	r5, r3
    31ba:	2100      	movs	r1, #0
    31bc:	0324      	lsls	r4, r4, #12
    31be:	0b23      	lsrs	r3, r4, #12
    31c0:	0d0c      	lsrs	r4, r1, #20
    31c2:	4a7e      	ldr	r2, [pc, #504]	; (33bc <__aeabi_dsub+0x34c>)
    31c4:	0524      	lsls	r4, r4, #20
    31c6:	431c      	orrs	r4, r3
    31c8:	4014      	ands	r4, r2
    31ca:	0533      	lsls	r3, r6, #20
    31cc:	4323      	orrs	r3, r4
    31ce:	005b      	lsls	r3, r3, #1
    31d0:	07ed      	lsls	r5, r5, #31
    31d2:	085b      	lsrs	r3, r3, #1
    31d4:	432b      	orrs	r3, r5
    31d6:	0038      	movs	r0, r7
    31d8:	0019      	movs	r1, r3
    31da:	bc1c      	pop	{r2, r3, r4}
    31dc:	4690      	mov	r8, r2
    31de:	4699      	mov	r9, r3
    31e0:	46a2      	mov	sl, r4
    31e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31e4:	2501      	movs	r5, #1
    31e6:	4643      	mov	r3, r8
    31e8:	0762      	lsls	r2, r4, #29
    31ea:	08ff      	lsrs	r7, r7, #3
    31ec:	4317      	orrs	r7, r2
    31ee:	08e4      	lsrs	r4, r4, #3
    31f0:	401d      	ands	r5, r3
    31f2:	4b70      	ldr	r3, [pc, #448]	; (33b4 <__aeabi_dsub+0x344>)
    31f4:	429e      	cmp	r6, r3
    31f6:	d036      	beq.n	3266 <__aeabi_dsub+0x1f6>
    31f8:	0324      	lsls	r4, r4, #12
    31fa:	0576      	lsls	r6, r6, #21
    31fc:	0b24      	lsrs	r4, r4, #12
    31fe:	0d76      	lsrs	r6, r6, #21
    3200:	e7db      	b.n	31ba <__aeabi_dsub+0x14a>
    3202:	4663      	mov	r3, ip
    3204:	1af3      	subs	r3, r6, r3
    3206:	2b00      	cmp	r3, #0
    3208:	dc00      	bgt.n	320c <__aeabi_dsub+0x19c>
    320a:	e094      	b.n	3336 <__aeabi_dsub+0x2c6>
    320c:	4660      	mov	r0, ip
    320e:	2800      	cmp	r0, #0
    3210:	d035      	beq.n	327e <__aeabi_dsub+0x20e>
    3212:	4868      	ldr	r0, [pc, #416]	; (33b4 <__aeabi_dsub+0x344>)
    3214:	4286      	cmp	r6, r0
    3216:	d0b1      	beq.n	317c <__aeabi_dsub+0x10c>
    3218:	2780      	movs	r7, #128	; 0x80
    321a:	043f      	lsls	r7, r7, #16
    321c:	4339      	orrs	r1, r7
    321e:	2b38      	cmp	r3, #56	; 0x38
    3220:	dc00      	bgt.n	3224 <__aeabi_dsub+0x1b4>
    3222:	e0fd      	b.n	3420 <__aeabi_dsub+0x3b0>
    3224:	430a      	orrs	r2, r1
    3226:	0017      	movs	r7, r2
    3228:	2100      	movs	r1, #0
    322a:	1e7a      	subs	r2, r7, #1
    322c:	4197      	sbcs	r7, r2
    322e:	4457      	add	r7, sl
    3230:	4557      	cmp	r7, sl
    3232:	4180      	sbcs	r0, r0
    3234:	1909      	adds	r1, r1, r4
    3236:	4244      	negs	r4, r0
    3238:	190c      	adds	r4, r1, r4
    323a:	0223      	lsls	r3, r4, #8
    323c:	d53a      	bpl.n	32b4 <__aeabi_dsub+0x244>
    323e:	4b5d      	ldr	r3, [pc, #372]	; (33b4 <__aeabi_dsub+0x344>)
    3240:	3601      	adds	r6, #1
    3242:	429e      	cmp	r6, r3
    3244:	d100      	bne.n	3248 <__aeabi_dsub+0x1d8>
    3246:	e14b      	b.n	34e0 <__aeabi_dsub+0x470>
    3248:	2201      	movs	r2, #1
    324a:	4b5b      	ldr	r3, [pc, #364]	; (33b8 <__aeabi_dsub+0x348>)
    324c:	401c      	ands	r4, r3
    324e:	087b      	lsrs	r3, r7, #1
    3250:	4017      	ands	r7, r2
    3252:	431f      	orrs	r7, r3
    3254:	07e2      	lsls	r2, r4, #31
    3256:	4317      	orrs	r7, r2
    3258:	0864      	lsrs	r4, r4, #1
    325a:	e78f      	b.n	317c <__aeabi_dsub+0x10c>
    325c:	0008      	movs	r0, r1
    325e:	4310      	orrs	r0, r2
    3260:	d000      	beq.n	3264 <__aeabi_dsub+0x1f4>
    3262:	e724      	b.n	30ae <__aeabi_dsub+0x3e>
    3264:	e721      	b.n	30aa <__aeabi_dsub+0x3a>
    3266:	0023      	movs	r3, r4
    3268:	433b      	orrs	r3, r7
    326a:	d100      	bne.n	326e <__aeabi_dsub+0x1fe>
    326c:	e1b9      	b.n	35e2 <__aeabi_dsub+0x572>
    326e:	2280      	movs	r2, #128	; 0x80
    3270:	0312      	lsls	r2, r2, #12
    3272:	4314      	orrs	r4, r2
    3274:	0324      	lsls	r4, r4, #12
    3276:	0b24      	lsrs	r4, r4, #12
    3278:	e79f      	b.n	31ba <__aeabi_dsub+0x14a>
    327a:	002e      	movs	r6, r5
    327c:	e77e      	b.n	317c <__aeabi_dsub+0x10c>
    327e:	0008      	movs	r0, r1
    3280:	4310      	orrs	r0, r2
    3282:	d100      	bne.n	3286 <__aeabi_dsub+0x216>
    3284:	e0ca      	b.n	341c <__aeabi_dsub+0x3ac>
    3286:	1e58      	subs	r0, r3, #1
    3288:	4684      	mov	ip, r0
    328a:	2800      	cmp	r0, #0
    328c:	d000      	beq.n	3290 <__aeabi_dsub+0x220>
    328e:	e0e7      	b.n	3460 <__aeabi_dsub+0x3f0>
    3290:	4452      	add	r2, sl
    3292:	4552      	cmp	r2, sl
    3294:	4180      	sbcs	r0, r0
    3296:	1864      	adds	r4, r4, r1
    3298:	4240      	negs	r0, r0
    329a:	1824      	adds	r4, r4, r0
    329c:	0017      	movs	r7, r2
    329e:	2601      	movs	r6, #1
    32a0:	0223      	lsls	r3, r4, #8
    32a2:	d507      	bpl.n	32b4 <__aeabi_dsub+0x244>
    32a4:	2602      	movs	r6, #2
    32a6:	e7cf      	b.n	3248 <__aeabi_dsub+0x1d8>
    32a8:	4664      	mov	r4, ip
    32aa:	432c      	orrs	r4, r5
    32ac:	d100      	bne.n	32b0 <__aeabi_dsub+0x240>
    32ae:	e1b3      	b.n	3618 <__aeabi_dsub+0x5a8>
    32b0:	002c      	movs	r4, r5
    32b2:	4667      	mov	r7, ip
    32b4:	077b      	lsls	r3, r7, #29
    32b6:	d000      	beq.n	32ba <__aeabi_dsub+0x24a>
    32b8:	e762      	b.n	3180 <__aeabi_dsub+0x110>
    32ba:	0763      	lsls	r3, r4, #29
    32bc:	08ff      	lsrs	r7, r7, #3
    32be:	431f      	orrs	r7, r3
    32c0:	2501      	movs	r5, #1
    32c2:	4643      	mov	r3, r8
    32c4:	08e4      	lsrs	r4, r4, #3
    32c6:	401d      	ands	r5, r3
    32c8:	e793      	b.n	31f2 <__aeabi_dsub+0x182>
    32ca:	2d00      	cmp	r5, #0
    32cc:	d178      	bne.n	33c0 <__aeabi_dsub+0x350>
    32ce:	1c75      	adds	r5, r6, #1
    32d0:	056d      	lsls	r5, r5, #21
    32d2:	0d6d      	lsrs	r5, r5, #21
    32d4:	2d01      	cmp	r5, #1
    32d6:	dc00      	bgt.n	32da <__aeabi_dsub+0x26a>
    32d8:	e0f2      	b.n	34c0 <__aeabi_dsub+0x450>
    32da:	4650      	mov	r0, sl
    32dc:	1a80      	subs	r0, r0, r2
    32de:	4582      	cmp	sl, r0
    32e0:	41bf      	sbcs	r7, r7
    32e2:	1a65      	subs	r5, r4, r1
    32e4:	427f      	negs	r7, r7
    32e6:	1bed      	subs	r5, r5, r7
    32e8:	4684      	mov	ip, r0
    32ea:	0228      	lsls	r0, r5, #8
    32ec:	d400      	bmi.n	32f0 <__aeabi_dsub+0x280>
    32ee:	e08c      	b.n	340a <__aeabi_dsub+0x39a>
    32f0:	4650      	mov	r0, sl
    32f2:	1a17      	subs	r7, r2, r0
    32f4:	42ba      	cmp	r2, r7
    32f6:	4192      	sbcs	r2, r2
    32f8:	1b0c      	subs	r4, r1, r4
    32fa:	4255      	negs	r5, r2
    32fc:	1b65      	subs	r5, r4, r5
    32fe:	4698      	mov	r8, r3
    3300:	e714      	b.n	312c <__aeabi_dsub+0xbc>
    3302:	2501      	movs	r5, #1
    3304:	4643      	mov	r3, r8
    3306:	2400      	movs	r4, #0
    3308:	401d      	ands	r5, r3
    330a:	2700      	movs	r7, #0
    330c:	e755      	b.n	31ba <__aeabi_dsub+0x14a>
    330e:	4c2a      	ldr	r4, [pc, #168]	; (33b8 <__aeabi_dsub+0x348>)
    3310:	1af6      	subs	r6, r6, r3
    3312:	402c      	ands	r4, r5
    3314:	e732      	b.n	317c <__aeabi_dsub+0x10c>
    3316:	003d      	movs	r5, r7
    3318:	3828      	subs	r0, #40	; 0x28
    331a:	4085      	lsls	r5, r0
    331c:	2700      	movs	r7, #0
    331e:	e717      	b.n	3150 <__aeabi_dsub+0xe0>
    3320:	0038      	movs	r0, r7
    3322:	f000 fa27 	bl	3774 <__clzsi2>
    3326:	3020      	adds	r0, #32
    3328:	e706      	b.n	3138 <__aeabi_dsub+0xc8>
    332a:	430a      	orrs	r2, r1
    332c:	0017      	movs	r7, r2
    332e:	2100      	movs	r1, #0
    3330:	1e7a      	subs	r2, r7, #1
    3332:	4197      	sbcs	r7, r2
    3334:	e6ee      	b.n	3114 <__aeabi_dsub+0xa4>
    3336:	2b00      	cmp	r3, #0
    3338:	d000      	beq.n	333c <__aeabi_dsub+0x2cc>
    333a:	e0e5      	b.n	3508 <__aeabi_dsub+0x498>
    333c:	1c73      	adds	r3, r6, #1
    333e:	469c      	mov	ip, r3
    3340:	055b      	lsls	r3, r3, #21
    3342:	0d5b      	lsrs	r3, r3, #21
    3344:	2b01      	cmp	r3, #1
    3346:	dc00      	bgt.n	334a <__aeabi_dsub+0x2da>
    3348:	e09f      	b.n	348a <__aeabi_dsub+0x41a>
    334a:	4b1a      	ldr	r3, [pc, #104]	; (33b4 <__aeabi_dsub+0x344>)
    334c:	459c      	cmp	ip, r3
    334e:	d100      	bne.n	3352 <__aeabi_dsub+0x2e2>
    3350:	e0c5      	b.n	34de <__aeabi_dsub+0x46e>
    3352:	4452      	add	r2, sl
    3354:	4552      	cmp	r2, sl
    3356:	4180      	sbcs	r0, r0
    3358:	1864      	adds	r4, r4, r1
    335a:	4240      	negs	r0, r0
    335c:	1824      	adds	r4, r4, r0
    335e:	07e7      	lsls	r7, r4, #31
    3360:	0852      	lsrs	r2, r2, #1
    3362:	4317      	orrs	r7, r2
    3364:	0864      	lsrs	r4, r4, #1
    3366:	4666      	mov	r6, ip
    3368:	e708      	b.n	317c <__aeabi_dsub+0x10c>
    336a:	4812      	ldr	r0, [pc, #72]	; (33b4 <__aeabi_dsub+0x344>)
    336c:	4285      	cmp	r5, r0
    336e:	d100      	bne.n	3372 <__aeabi_dsub+0x302>
    3370:	e085      	b.n	347e <__aeabi_dsub+0x40e>
    3372:	001d      	movs	r5, r3
    3374:	e6bc      	b.n	30f0 <__aeabi_dsub+0x80>
    3376:	0029      	movs	r1, r5
    3378:	3e1f      	subs	r6, #31
    337a:	40f1      	lsrs	r1, r6
    337c:	2b20      	cmp	r3, #32
    337e:	d100      	bne.n	3382 <__aeabi_dsub+0x312>
    3380:	e07f      	b.n	3482 <__aeabi_dsub+0x412>
    3382:	2240      	movs	r2, #64	; 0x40
    3384:	1ad3      	subs	r3, r2, r3
    3386:	409d      	lsls	r5, r3
    3388:	432f      	orrs	r7, r5
    338a:	1e7d      	subs	r5, r7, #1
    338c:	41af      	sbcs	r7, r5
    338e:	2400      	movs	r4, #0
    3390:	430f      	orrs	r7, r1
    3392:	2600      	movs	r6, #0
    3394:	e78e      	b.n	32b4 <__aeabi_dsub+0x244>
    3396:	002b      	movs	r3, r5
    3398:	000f      	movs	r7, r1
    339a:	3b20      	subs	r3, #32
    339c:	40df      	lsrs	r7, r3
    339e:	2d20      	cmp	r5, #32
    33a0:	d071      	beq.n	3486 <__aeabi_dsub+0x416>
    33a2:	2340      	movs	r3, #64	; 0x40
    33a4:	1b5d      	subs	r5, r3, r5
    33a6:	40a9      	lsls	r1, r5
    33a8:	430a      	orrs	r2, r1
    33aa:	1e51      	subs	r1, r2, #1
    33ac:	418a      	sbcs	r2, r1
    33ae:	2100      	movs	r1, #0
    33b0:	4317      	orrs	r7, r2
    33b2:	e6af      	b.n	3114 <__aeabi_dsub+0xa4>
    33b4:	000007ff 	.word	0x000007ff
    33b8:	ff7fffff 	.word	0xff7fffff
    33bc:	800fffff 	.word	0x800fffff
    33c0:	2e00      	cmp	r6, #0
    33c2:	d03e      	beq.n	3442 <__aeabi_dsub+0x3d2>
    33c4:	4eb3      	ldr	r6, [pc, #716]	; (3694 <__aeabi_dsub+0x624>)
    33c6:	45b4      	cmp	ip, r6
    33c8:	d045      	beq.n	3456 <__aeabi_dsub+0x3e6>
    33ca:	2680      	movs	r6, #128	; 0x80
    33cc:	0436      	lsls	r6, r6, #16
    33ce:	426d      	negs	r5, r5
    33d0:	4334      	orrs	r4, r6
    33d2:	2d38      	cmp	r5, #56	; 0x38
    33d4:	dd00      	ble.n	33d8 <__aeabi_dsub+0x368>
    33d6:	e0a8      	b.n	352a <__aeabi_dsub+0x4ba>
    33d8:	2d1f      	cmp	r5, #31
    33da:	dd00      	ble.n	33de <__aeabi_dsub+0x36e>
    33dc:	e11f      	b.n	361e <__aeabi_dsub+0x5ae>
    33de:	2620      	movs	r6, #32
    33e0:	0027      	movs	r7, r4
    33e2:	4650      	mov	r0, sl
    33e4:	1b76      	subs	r6, r6, r5
    33e6:	40b7      	lsls	r7, r6
    33e8:	40e8      	lsrs	r0, r5
    33ea:	4307      	orrs	r7, r0
    33ec:	4650      	mov	r0, sl
    33ee:	40b0      	lsls	r0, r6
    33f0:	1e46      	subs	r6, r0, #1
    33f2:	41b0      	sbcs	r0, r6
    33f4:	40ec      	lsrs	r4, r5
    33f6:	4338      	orrs	r0, r7
    33f8:	1a17      	subs	r7, r2, r0
    33fa:	42ba      	cmp	r2, r7
    33fc:	4192      	sbcs	r2, r2
    33fe:	1b0c      	subs	r4, r1, r4
    3400:	4252      	negs	r2, r2
    3402:	1aa4      	subs	r4, r4, r2
    3404:	4666      	mov	r6, ip
    3406:	4698      	mov	r8, r3
    3408:	e68b      	b.n	3122 <__aeabi_dsub+0xb2>
    340a:	4664      	mov	r4, ip
    340c:	4667      	mov	r7, ip
    340e:	432c      	orrs	r4, r5
    3410:	d000      	beq.n	3414 <__aeabi_dsub+0x3a4>
    3412:	e68b      	b.n	312c <__aeabi_dsub+0xbc>
    3414:	2500      	movs	r5, #0
    3416:	2600      	movs	r6, #0
    3418:	2700      	movs	r7, #0
    341a:	e6ea      	b.n	31f2 <__aeabi_dsub+0x182>
    341c:	001e      	movs	r6, r3
    341e:	e6ad      	b.n	317c <__aeabi_dsub+0x10c>
    3420:	2b1f      	cmp	r3, #31
    3422:	dc60      	bgt.n	34e6 <__aeabi_dsub+0x476>
    3424:	2720      	movs	r7, #32
    3426:	1af8      	subs	r0, r7, r3
    3428:	000f      	movs	r7, r1
    342a:	4684      	mov	ip, r0
    342c:	4087      	lsls	r7, r0
    342e:	0010      	movs	r0, r2
    3430:	40d8      	lsrs	r0, r3
    3432:	4307      	orrs	r7, r0
    3434:	4660      	mov	r0, ip
    3436:	4082      	lsls	r2, r0
    3438:	1e50      	subs	r0, r2, #1
    343a:	4182      	sbcs	r2, r0
    343c:	40d9      	lsrs	r1, r3
    343e:	4317      	orrs	r7, r2
    3440:	e6f5      	b.n	322e <__aeabi_dsub+0x1be>
    3442:	0026      	movs	r6, r4
    3444:	4650      	mov	r0, sl
    3446:	4306      	orrs	r6, r0
    3448:	d005      	beq.n	3456 <__aeabi_dsub+0x3e6>
    344a:	43ed      	mvns	r5, r5
    344c:	2d00      	cmp	r5, #0
    344e:	d0d3      	beq.n	33f8 <__aeabi_dsub+0x388>
    3450:	4e90      	ldr	r6, [pc, #576]	; (3694 <__aeabi_dsub+0x624>)
    3452:	45b4      	cmp	ip, r6
    3454:	d1bd      	bne.n	33d2 <__aeabi_dsub+0x362>
    3456:	000c      	movs	r4, r1
    3458:	0017      	movs	r7, r2
    345a:	4666      	mov	r6, ip
    345c:	4698      	mov	r8, r3
    345e:	e68d      	b.n	317c <__aeabi_dsub+0x10c>
    3460:	488c      	ldr	r0, [pc, #560]	; (3694 <__aeabi_dsub+0x624>)
    3462:	4283      	cmp	r3, r0
    3464:	d00b      	beq.n	347e <__aeabi_dsub+0x40e>
    3466:	4663      	mov	r3, ip
    3468:	e6d9      	b.n	321e <__aeabi_dsub+0x1ae>
    346a:	2d00      	cmp	r5, #0
    346c:	d000      	beq.n	3470 <__aeabi_dsub+0x400>
    346e:	e096      	b.n	359e <__aeabi_dsub+0x52e>
    3470:	0008      	movs	r0, r1
    3472:	4310      	orrs	r0, r2
    3474:	d100      	bne.n	3478 <__aeabi_dsub+0x408>
    3476:	e0e2      	b.n	363e <__aeabi_dsub+0x5ce>
    3478:	000c      	movs	r4, r1
    347a:	0017      	movs	r7, r2
    347c:	4698      	mov	r8, r3
    347e:	4e85      	ldr	r6, [pc, #532]	; (3694 <__aeabi_dsub+0x624>)
    3480:	e67c      	b.n	317c <__aeabi_dsub+0x10c>
    3482:	2500      	movs	r5, #0
    3484:	e780      	b.n	3388 <__aeabi_dsub+0x318>
    3486:	2100      	movs	r1, #0
    3488:	e78e      	b.n	33a8 <__aeabi_dsub+0x338>
    348a:	0023      	movs	r3, r4
    348c:	4650      	mov	r0, sl
    348e:	4303      	orrs	r3, r0
    3490:	2e00      	cmp	r6, #0
    3492:	d000      	beq.n	3496 <__aeabi_dsub+0x426>
    3494:	e0a8      	b.n	35e8 <__aeabi_dsub+0x578>
    3496:	2b00      	cmp	r3, #0
    3498:	d100      	bne.n	349c <__aeabi_dsub+0x42c>
    349a:	e0de      	b.n	365a <__aeabi_dsub+0x5ea>
    349c:	000b      	movs	r3, r1
    349e:	4313      	orrs	r3, r2
    34a0:	d100      	bne.n	34a4 <__aeabi_dsub+0x434>
    34a2:	e66b      	b.n	317c <__aeabi_dsub+0x10c>
    34a4:	4452      	add	r2, sl
    34a6:	4552      	cmp	r2, sl
    34a8:	4180      	sbcs	r0, r0
    34aa:	1864      	adds	r4, r4, r1
    34ac:	4240      	negs	r0, r0
    34ae:	1824      	adds	r4, r4, r0
    34b0:	0017      	movs	r7, r2
    34b2:	0223      	lsls	r3, r4, #8
    34b4:	d400      	bmi.n	34b8 <__aeabi_dsub+0x448>
    34b6:	e6fd      	b.n	32b4 <__aeabi_dsub+0x244>
    34b8:	4b77      	ldr	r3, [pc, #476]	; (3698 <__aeabi_dsub+0x628>)
    34ba:	4666      	mov	r6, ip
    34bc:	401c      	ands	r4, r3
    34be:	e65d      	b.n	317c <__aeabi_dsub+0x10c>
    34c0:	0025      	movs	r5, r4
    34c2:	4650      	mov	r0, sl
    34c4:	4305      	orrs	r5, r0
    34c6:	2e00      	cmp	r6, #0
    34c8:	d1cf      	bne.n	346a <__aeabi_dsub+0x3fa>
    34ca:	2d00      	cmp	r5, #0
    34cc:	d14f      	bne.n	356e <__aeabi_dsub+0x4fe>
    34ce:	000c      	movs	r4, r1
    34d0:	4314      	orrs	r4, r2
    34d2:	d100      	bne.n	34d6 <__aeabi_dsub+0x466>
    34d4:	e0a0      	b.n	3618 <__aeabi_dsub+0x5a8>
    34d6:	000c      	movs	r4, r1
    34d8:	0017      	movs	r7, r2
    34da:	4698      	mov	r8, r3
    34dc:	e64e      	b.n	317c <__aeabi_dsub+0x10c>
    34de:	4666      	mov	r6, ip
    34e0:	2400      	movs	r4, #0
    34e2:	2700      	movs	r7, #0
    34e4:	e685      	b.n	31f2 <__aeabi_dsub+0x182>
    34e6:	001f      	movs	r7, r3
    34e8:	0008      	movs	r0, r1
    34ea:	3f20      	subs	r7, #32
    34ec:	40f8      	lsrs	r0, r7
    34ee:	0007      	movs	r7, r0
    34f0:	2b20      	cmp	r3, #32
    34f2:	d100      	bne.n	34f6 <__aeabi_dsub+0x486>
    34f4:	e08e      	b.n	3614 <__aeabi_dsub+0x5a4>
    34f6:	2040      	movs	r0, #64	; 0x40
    34f8:	1ac3      	subs	r3, r0, r3
    34fa:	4099      	lsls	r1, r3
    34fc:	430a      	orrs	r2, r1
    34fe:	1e51      	subs	r1, r2, #1
    3500:	418a      	sbcs	r2, r1
    3502:	2100      	movs	r1, #0
    3504:	4317      	orrs	r7, r2
    3506:	e692      	b.n	322e <__aeabi_dsub+0x1be>
    3508:	2e00      	cmp	r6, #0
    350a:	d114      	bne.n	3536 <__aeabi_dsub+0x4c6>
    350c:	0026      	movs	r6, r4
    350e:	4650      	mov	r0, sl
    3510:	4306      	orrs	r6, r0
    3512:	d062      	beq.n	35da <__aeabi_dsub+0x56a>
    3514:	43db      	mvns	r3, r3
    3516:	2b00      	cmp	r3, #0
    3518:	d15c      	bne.n	35d4 <__aeabi_dsub+0x564>
    351a:	1887      	adds	r7, r0, r2
    351c:	4297      	cmp	r7, r2
    351e:	4192      	sbcs	r2, r2
    3520:	1864      	adds	r4, r4, r1
    3522:	4252      	negs	r2, r2
    3524:	18a4      	adds	r4, r4, r2
    3526:	4666      	mov	r6, ip
    3528:	e687      	b.n	323a <__aeabi_dsub+0x1ca>
    352a:	4650      	mov	r0, sl
    352c:	4320      	orrs	r0, r4
    352e:	1e44      	subs	r4, r0, #1
    3530:	41a0      	sbcs	r0, r4
    3532:	2400      	movs	r4, #0
    3534:	e760      	b.n	33f8 <__aeabi_dsub+0x388>
    3536:	4e57      	ldr	r6, [pc, #348]	; (3694 <__aeabi_dsub+0x624>)
    3538:	45b4      	cmp	ip, r6
    353a:	d04e      	beq.n	35da <__aeabi_dsub+0x56a>
    353c:	2680      	movs	r6, #128	; 0x80
    353e:	0436      	lsls	r6, r6, #16
    3540:	425b      	negs	r3, r3
    3542:	4334      	orrs	r4, r6
    3544:	2b38      	cmp	r3, #56	; 0x38
    3546:	dd00      	ble.n	354a <__aeabi_dsub+0x4da>
    3548:	e07f      	b.n	364a <__aeabi_dsub+0x5da>
    354a:	2b1f      	cmp	r3, #31
    354c:	dd00      	ble.n	3550 <__aeabi_dsub+0x4e0>
    354e:	e08b      	b.n	3668 <__aeabi_dsub+0x5f8>
    3550:	2620      	movs	r6, #32
    3552:	0027      	movs	r7, r4
    3554:	4650      	mov	r0, sl
    3556:	1af6      	subs	r6, r6, r3
    3558:	40b7      	lsls	r7, r6
    355a:	40d8      	lsrs	r0, r3
    355c:	4307      	orrs	r7, r0
    355e:	4650      	mov	r0, sl
    3560:	40b0      	lsls	r0, r6
    3562:	1e46      	subs	r6, r0, #1
    3564:	41b0      	sbcs	r0, r6
    3566:	4307      	orrs	r7, r0
    3568:	40dc      	lsrs	r4, r3
    356a:	18bf      	adds	r7, r7, r2
    356c:	e7d6      	b.n	351c <__aeabi_dsub+0x4ac>
    356e:	000d      	movs	r5, r1
    3570:	4315      	orrs	r5, r2
    3572:	d100      	bne.n	3576 <__aeabi_dsub+0x506>
    3574:	e602      	b.n	317c <__aeabi_dsub+0x10c>
    3576:	4650      	mov	r0, sl
    3578:	1a80      	subs	r0, r0, r2
    357a:	4582      	cmp	sl, r0
    357c:	41bf      	sbcs	r7, r7
    357e:	1a65      	subs	r5, r4, r1
    3580:	427f      	negs	r7, r7
    3582:	1bed      	subs	r5, r5, r7
    3584:	4684      	mov	ip, r0
    3586:	0228      	lsls	r0, r5, #8
    3588:	d400      	bmi.n	358c <__aeabi_dsub+0x51c>
    358a:	e68d      	b.n	32a8 <__aeabi_dsub+0x238>
    358c:	4650      	mov	r0, sl
    358e:	1a17      	subs	r7, r2, r0
    3590:	42ba      	cmp	r2, r7
    3592:	4192      	sbcs	r2, r2
    3594:	1b0c      	subs	r4, r1, r4
    3596:	4252      	negs	r2, r2
    3598:	1aa4      	subs	r4, r4, r2
    359a:	4698      	mov	r8, r3
    359c:	e5ee      	b.n	317c <__aeabi_dsub+0x10c>
    359e:	000d      	movs	r5, r1
    35a0:	4315      	orrs	r5, r2
    35a2:	d100      	bne.n	35a6 <__aeabi_dsub+0x536>
    35a4:	e76b      	b.n	347e <__aeabi_dsub+0x40e>
    35a6:	4650      	mov	r0, sl
    35a8:	0767      	lsls	r7, r4, #29
    35aa:	08c0      	lsrs	r0, r0, #3
    35ac:	4307      	orrs	r7, r0
    35ae:	2080      	movs	r0, #128	; 0x80
    35b0:	08e4      	lsrs	r4, r4, #3
    35b2:	0300      	lsls	r0, r0, #12
    35b4:	4204      	tst	r4, r0
    35b6:	d007      	beq.n	35c8 <__aeabi_dsub+0x558>
    35b8:	08cd      	lsrs	r5, r1, #3
    35ba:	4205      	tst	r5, r0
    35bc:	d104      	bne.n	35c8 <__aeabi_dsub+0x558>
    35be:	002c      	movs	r4, r5
    35c0:	4698      	mov	r8, r3
    35c2:	08d7      	lsrs	r7, r2, #3
    35c4:	0749      	lsls	r1, r1, #29
    35c6:	430f      	orrs	r7, r1
    35c8:	0f7b      	lsrs	r3, r7, #29
    35ca:	00e4      	lsls	r4, r4, #3
    35cc:	431c      	orrs	r4, r3
    35ce:	00ff      	lsls	r7, r7, #3
    35d0:	4e30      	ldr	r6, [pc, #192]	; (3694 <__aeabi_dsub+0x624>)
    35d2:	e5d3      	b.n	317c <__aeabi_dsub+0x10c>
    35d4:	4e2f      	ldr	r6, [pc, #188]	; (3694 <__aeabi_dsub+0x624>)
    35d6:	45b4      	cmp	ip, r6
    35d8:	d1b4      	bne.n	3544 <__aeabi_dsub+0x4d4>
    35da:	000c      	movs	r4, r1
    35dc:	0017      	movs	r7, r2
    35de:	4666      	mov	r6, ip
    35e0:	e5cc      	b.n	317c <__aeabi_dsub+0x10c>
    35e2:	2700      	movs	r7, #0
    35e4:	2400      	movs	r4, #0
    35e6:	e5e8      	b.n	31ba <__aeabi_dsub+0x14a>
    35e8:	2b00      	cmp	r3, #0
    35ea:	d039      	beq.n	3660 <__aeabi_dsub+0x5f0>
    35ec:	000b      	movs	r3, r1
    35ee:	4313      	orrs	r3, r2
    35f0:	d100      	bne.n	35f4 <__aeabi_dsub+0x584>
    35f2:	e744      	b.n	347e <__aeabi_dsub+0x40e>
    35f4:	08c0      	lsrs	r0, r0, #3
    35f6:	0767      	lsls	r7, r4, #29
    35f8:	4307      	orrs	r7, r0
    35fa:	2080      	movs	r0, #128	; 0x80
    35fc:	08e4      	lsrs	r4, r4, #3
    35fe:	0300      	lsls	r0, r0, #12
    3600:	4204      	tst	r4, r0
    3602:	d0e1      	beq.n	35c8 <__aeabi_dsub+0x558>
    3604:	08cb      	lsrs	r3, r1, #3
    3606:	4203      	tst	r3, r0
    3608:	d1de      	bne.n	35c8 <__aeabi_dsub+0x558>
    360a:	08d7      	lsrs	r7, r2, #3
    360c:	0749      	lsls	r1, r1, #29
    360e:	430f      	orrs	r7, r1
    3610:	001c      	movs	r4, r3
    3612:	e7d9      	b.n	35c8 <__aeabi_dsub+0x558>
    3614:	2100      	movs	r1, #0
    3616:	e771      	b.n	34fc <__aeabi_dsub+0x48c>
    3618:	2500      	movs	r5, #0
    361a:	2700      	movs	r7, #0
    361c:	e5e9      	b.n	31f2 <__aeabi_dsub+0x182>
    361e:	002e      	movs	r6, r5
    3620:	0027      	movs	r7, r4
    3622:	3e20      	subs	r6, #32
    3624:	40f7      	lsrs	r7, r6
    3626:	2d20      	cmp	r5, #32
    3628:	d02f      	beq.n	368a <__aeabi_dsub+0x61a>
    362a:	2640      	movs	r6, #64	; 0x40
    362c:	1b75      	subs	r5, r6, r5
    362e:	40ac      	lsls	r4, r5
    3630:	4650      	mov	r0, sl
    3632:	4320      	orrs	r0, r4
    3634:	1e44      	subs	r4, r0, #1
    3636:	41a0      	sbcs	r0, r4
    3638:	2400      	movs	r4, #0
    363a:	4338      	orrs	r0, r7
    363c:	e6dc      	b.n	33f8 <__aeabi_dsub+0x388>
    363e:	2480      	movs	r4, #128	; 0x80
    3640:	2500      	movs	r5, #0
    3642:	0324      	lsls	r4, r4, #12
    3644:	4e13      	ldr	r6, [pc, #76]	; (3694 <__aeabi_dsub+0x624>)
    3646:	2700      	movs	r7, #0
    3648:	e5d3      	b.n	31f2 <__aeabi_dsub+0x182>
    364a:	4650      	mov	r0, sl
    364c:	4320      	orrs	r0, r4
    364e:	0007      	movs	r7, r0
    3650:	1e78      	subs	r0, r7, #1
    3652:	4187      	sbcs	r7, r0
    3654:	2400      	movs	r4, #0
    3656:	18bf      	adds	r7, r7, r2
    3658:	e760      	b.n	351c <__aeabi_dsub+0x4ac>
    365a:	000c      	movs	r4, r1
    365c:	0017      	movs	r7, r2
    365e:	e58d      	b.n	317c <__aeabi_dsub+0x10c>
    3660:	000c      	movs	r4, r1
    3662:	0017      	movs	r7, r2
    3664:	4e0b      	ldr	r6, [pc, #44]	; (3694 <__aeabi_dsub+0x624>)
    3666:	e589      	b.n	317c <__aeabi_dsub+0x10c>
    3668:	001e      	movs	r6, r3
    366a:	0027      	movs	r7, r4
    366c:	3e20      	subs	r6, #32
    366e:	40f7      	lsrs	r7, r6
    3670:	2b20      	cmp	r3, #32
    3672:	d00c      	beq.n	368e <__aeabi_dsub+0x61e>
    3674:	2640      	movs	r6, #64	; 0x40
    3676:	1af3      	subs	r3, r6, r3
    3678:	409c      	lsls	r4, r3
    367a:	4650      	mov	r0, sl
    367c:	4320      	orrs	r0, r4
    367e:	1e44      	subs	r4, r0, #1
    3680:	41a0      	sbcs	r0, r4
    3682:	4307      	orrs	r7, r0
    3684:	2400      	movs	r4, #0
    3686:	18bf      	adds	r7, r7, r2
    3688:	e748      	b.n	351c <__aeabi_dsub+0x4ac>
    368a:	2400      	movs	r4, #0
    368c:	e7d0      	b.n	3630 <__aeabi_dsub+0x5c0>
    368e:	2400      	movs	r4, #0
    3690:	e7f3      	b.n	367a <__aeabi_dsub+0x60a>
    3692:	46c0      	nop			; (mov r8, r8)
    3694:	000007ff 	.word	0x000007ff
    3698:	ff7fffff 	.word	0xff7fffff

0000369c <__aeabi_d2iz>:
    369c:	b530      	push	{r4, r5, lr}
    369e:	4d13      	ldr	r5, [pc, #76]	; (36ec <__aeabi_d2iz+0x50>)
    36a0:	030a      	lsls	r2, r1, #12
    36a2:	004b      	lsls	r3, r1, #1
    36a4:	0b12      	lsrs	r2, r2, #12
    36a6:	0d5b      	lsrs	r3, r3, #21
    36a8:	0fc9      	lsrs	r1, r1, #31
    36aa:	2400      	movs	r4, #0
    36ac:	42ab      	cmp	r3, r5
    36ae:	dd10      	ble.n	36d2 <__aeabi_d2iz+0x36>
    36b0:	4c0f      	ldr	r4, [pc, #60]	; (36f0 <__aeabi_d2iz+0x54>)
    36b2:	42a3      	cmp	r3, r4
    36b4:	dc0f      	bgt.n	36d6 <__aeabi_d2iz+0x3a>
    36b6:	2480      	movs	r4, #128	; 0x80
    36b8:	4d0e      	ldr	r5, [pc, #56]	; (36f4 <__aeabi_d2iz+0x58>)
    36ba:	0364      	lsls	r4, r4, #13
    36bc:	4322      	orrs	r2, r4
    36be:	1aed      	subs	r5, r5, r3
    36c0:	2d1f      	cmp	r5, #31
    36c2:	dd0b      	ble.n	36dc <__aeabi_d2iz+0x40>
    36c4:	480c      	ldr	r0, [pc, #48]	; (36f8 <__aeabi_d2iz+0x5c>)
    36c6:	1ac3      	subs	r3, r0, r3
    36c8:	40da      	lsrs	r2, r3
    36ca:	4254      	negs	r4, r2
    36cc:	2900      	cmp	r1, #0
    36ce:	d100      	bne.n	36d2 <__aeabi_d2iz+0x36>
    36d0:	0014      	movs	r4, r2
    36d2:	0020      	movs	r0, r4
    36d4:	bd30      	pop	{r4, r5, pc}
    36d6:	4b09      	ldr	r3, [pc, #36]	; (36fc <__aeabi_d2iz+0x60>)
    36d8:	18cc      	adds	r4, r1, r3
    36da:	e7fa      	b.n	36d2 <__aeabi_d2iz+0x36>
    36dc:	4c08      	ldr	r4, [pc, #32]	; (3700 <__aeabi_d2iz+0x64>)
    36de:	40e8      	lsrs	r0, r5
    36e0:	46a4      	mov	ip, r4
    36e2:	4463      	add	r3, ip
    36e4:	409a      	lsls	r2, r3
    36e6:	4302      	orrs	r2, r0
    36e8:	e7ef      	b.n	36ca <__aeabi_d2iz+0x2e>
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	000003fe 	.word	0x000003fe
    36f0:	0000041d 	.word	0x0000041d
    36f4:	00000433 	.word	0x00000433
    36f8:	00000413 	.word	0x00000413
    36fc:	7fffffff 	.word	0x7fffffff
    3700:	fffffbed 	.word	0xfffffbed

00003704 <__aeabi_ui2d>:
    3704:	b510      	push	{r4, lr}
    3706:	1e04      	subs	r4, r0, #0
    3708:	d028      	beq.n	375c <__aeabi_ui2d+0x58>
    370a:	f000 f833 	bl	3774 <__clzsi2>
    370e:	4b15      	ldr	r3, [pc, #84]	; (3764 <__aeabi_ui2d+0x60>)
    3710:	4a15      	ldr	r2, [pc, #84]	; (3768 <__aeabi_ui2d+0x64>)
    3712:	1a1b      	subs	r3, r3, r0
    3714:	1ad2      	subs	r2, r2, r3
    3716:	2a1f      	cmp	r2, #31
    3718:	dd15      	ble.n	3746 <__aeabi_ui2d+0x42>
    371a:	4a14      	ldr	r2, [pc, #80]	; (376c <__aeabi_ui2d+0x68>)
    371c:	1ad2      	subs	r2, r2, r3
    371e:	4094      	lsls	r4, r2
    3720:	2200      	movs	r2, #0
    3722:	0324      	lsls	r4, r4, #12
    3724:	055b      	lsls	r3, r3, #21
    3726:	0b24      	lsrs	r4, r4, #12
    3728:	0d5b      	lsrs	r3, r3, #21
    372a:	2100      	movs	r1, #0
    372c:	0010      	movs	r0, r2
    372e:	0324      	lsls	r4, r4, #12
    3730:	0d0a      	lsrs	r2, r1, #20
    3732:	0b24      	lsrs	r4, r4, #12
    3734:	0512      	lsls	r2, r2, #20
    3736:	4322      	orrs	r2, r4
    3738:	4c0d      	ldr	r4, [pc, #52]	; (3770 <__aeabi_ui2d+0x6c>)
    373a:	051b      	lsls	r3, r3, #20
    373c:	4022      	ands	r2, r4
    373e:	4313      	orrs	r3, r2
    3740:	005b      	lsls	r3, r3, #1
    3742:	0859      	lsrs	r1, r3, #1
    3744:	bd10      	pop	{r4, pc}
    3746:	0021      	movs	r1, r4
    3748:	4091      	lsls	r1, r2
    374a:	000a      	movs	r2, r1
    374c:	210b      	movs	r1, #11
    374e:	1a08      	subs	r0, r1, r0
    3750:	40c4      	lsrs	r4, r0
    3752:	055b      	lsls	r3, r3, #21
    3754:	0324      	lsls	r4, r4, #12
    3756:	0b24      	lsrs	r4, r4, #12
    3758:	0d5b      	lsrs	r3, r3, #21
    375a:	e7e6      	b.n	372a <__aeabi_ui2d+0x26>
    375c:	2300      	movs	r3, #0
    375e:	2400      	movs	r4, #0
    3760:	2200      	movs	r2, #0
    3762:	e7e2      	b.n	372a <__aeabi_ui2d+0x26>
    3764:	0000041e 	.word	0x0000041e
    3768:	00000433 	.word	0x00000433
    376c:	00000413 	.word	0x00000413
    3770:	800fffff 	.word	0x800fffff

00003774 <__clzsi2>:
    3774:	211c      	movs	r1, #28
    3776:	2301      	movs	r3, #1
    3778:	041b      	lsls	r3, r3, #16
    377a:	4298      	cmp	r0, r3
    377c:	d301      	bcc.n	3782 <__clzsi2+0xe>
    377e:	0c00      	lsrs	r0, r0, #16
    3780:	3910      	subs	r1, #16
    3782:	0a1b      	lsrs	r3, r3, #8
    3784:	4298      	cmp	r0, r3
    3786:	d301      	bcc.n	378c <__clzsi2+0x18>
    3788:	0a00      	lsrs	r0, r0, #8
    378a:	3908      	subs	r1, #8
    378c:	091b      	lsrs	r3, r3, #4
    378e:	4298      	cmp	r0, r3
    3790:	d301      	bcc.n	3796 <__clzsi2+0x22>
    3792:	0900      	lsrs	r0, r0, #4
    3794:	3904      	subs	r1, #4
    3796:	a202      	add	r2, pc, #8	; (adr r2, 37a0 <__clzsi2+0x2c>)
    3798:	5c10      	ldrb	r0, [r2, r0]
    379a:	1840      	adds	r0, r0, r1
    379c:	4770      	bx	lr
    379e:	46c0      	nop			; (mov r8, r8)
    37a0:	02020304 	.word	0x02020304
    37a4:	01010101 	.word	0x01010101
	...

000037b0 <__libc_init_array>:
    37b0:	b570      	push	{r4, r5, r6, lr}
    37b2:	2600      	movs	r6, #0
    37b4:	4d0c      	ldr	r5, [pc, #48]	; (37e8 <__libc_init_array+0x38>)
    37b6:	4c0d      	ldr	r4, [pc, #52]	; (37ec <__libc_init_array+0x3c>)
    37b8:	1b64      	subs	r4, r4, r5
    37ba:	10a4      	asrs	r4, r4, #2
    37bc:	42a6      	cmp	r6, r4
    37be:	d109      	bne.n	37d4 <__libc_init_array+0x24>
    37c0:	2600      	movs	r6, #0
    37c2:	f000 f879 	bl	38b8 <_init>
    37c6:	4d0a      	ldr	r5, [pc, #40]	; (37f0 <__libc_init_array+0x40>)
    37c8:	4c0a      	ldr	r4, [pc, #40]	; (37f4 <__libc_init_array+0x44>)
    37ca:	1b64      	subs	r4, r4, r5
    37cc:	10a4      	asrs	r4, r4, #2
    37ce:	42a6      	cmp	r6, r4
    37d0:	d105      	bne.n	37de <__libc_init_array+0x2e>
    37d2:	bd70      	pop	{r4, r5, r6, pc}
    37d4:	00b3      	lsls	r3, r6, #2
    37d6:	58eb      	ldr	r3, [r5, r3]
    37d8:	4798      	blx	r3
    37da:	3601      	adds	r6, #1
    37dc:	e7ee      	b.n	37bc <__libc_init_array+0xc>
    37de:	00b3      	lsls	r3, r6, #2
    37e0:	58eb      	ldr	r3, [r5, r3]
    37e2:	4798      	blx	r3
    37e4:	3601      	adds	r6, #1
    37e6:	e7f2      	b.n	37ce <__libc_init_array+0x1e>
    37e8:	000038c4 	.word	0x000038c4
    37ec:	000038c4 	.word	0x000038c4
    37f0:	000038c4 	.word	0x000038c4
    37f4:	000038c8 	.word	0x000038c8
    37f8:	42000800 	.word	0x42000800
    37fc:	42000c00 	.word	0x42000c00
    3800:	42001000 	.word	0x42001000

00003804 <_tcc_intflag>:
    3804:	00000001 00000002 00000004 00000008     ................
    3814:	00001000 00002000 00004000 00008000     ..... ...@......
    3824:	00010000 00020000 00040000 00080000     ................

00003834 <tc_interrupt_vectors.12207>:
    3834:	00000e0d 00002700 000026e2 0000269c     .....'...&...&..
    3844:	000025ba 0000269c 000026d4 0000269c     .%...&...&...&..
    3854:	000025ba 000026e2 000026e2 000026d4     .%...&...&...&..
    3864:	000025ba 000025b2 000025b2 000025b2     .%...%...%...%..
    3874:	00002918 00002d60 00002c20 00002c20     .)..`-.. ,.. ,..
    3884:	00002c1c 00002d38 00002d38 00002d2a     .,..8-..8-..*-..
    3894:	00002c1c 00002d38 00002d2a 00002d38     .,..8-..*-..8-..
    38a4:	00002c1c 00002d40 00002d40 00002d40     .,..@-..@-..@-..
    38b4:	00002f44                                D/..

000038b8 <_init>:
    38b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38be:	bc08      	pop	{r3}
    38c0:	469e      	mov	lr, r3
    38c2:	4770      	bx	lr

000038c4 <__init_array_start>:
    38c4:	000000b5 	.word	0x000000b5

000038c8 <_fini>:
    38c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38ce:	bc08      	pop	{r3}
    38d0:	469e      	mov	lr, r3
    38d2:	4770      	bx	lr

000038d4 <__fini_array_start>:
    38d4:	0000008d 	.word	0x0000008d
