
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003400  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00003400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  2000000c  0000340c  0002000c  2**2
                  ALLOC
  3 .stack        00000400  200000f0  000034f0  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029309  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bd5  00000000  00000000  00049398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000005c0  00000000  00000000  0004cf6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000958  00000000  00000000  0004d52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000066d0  00000000  00000000  0004de85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c3bf  00000000  00000000  00054555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000796b5  00000000  00000000  00060914  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000fd8  00000000  00000000  000d9fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004c4d  00000000  00000000  000dafa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 04 00 20 31 13 00 00 2f 13 00 00 2f 13 00 00     ... 1.../.../...
	...
      2c:	2f 13 00 00 00 00 00 00 00 00 00 00 2f 13 00 00     /.........../...
      3c:	2f 13 00 00 2f 13 00 00 2f 13 00 00 2f 13 00 00     /.../.../.../...
      4c:	2f 13 00 00 2f 13 00 00 2f 13 00 00 2f 13 00 00     /.../.../.../...
      5c:	2f 13 00 00 2f 13 00 00 49 08 00 00 59 08 00 00     /.../...I...Y...
      6c:	69 08 00 00 d5 0f 00 00 69 10 00 00 79 10 00 00     i.......i...y...
      7c:	2f 13 00 00 2f 13 00 00 2f 13 00 00 2f 13 00 00     /.../.../.../...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000000c 	.word	0x2000000c
      ac:	00000000 	.word	0x00000000
      b0:	00003400 	.word	0x00003400

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000010 	.word	0x20000010
      e0:	00003400 	.word	0x00003400
      e4:	00003400 	.word	0x00003400
      e8:	00000000 	.word	0x00000000

000000ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
      ec:	4b09      	ldr	r3, [pc, #36]	; (114 <cpu_irq_enter_critical+0x28>)
      ee:	6819      	ldr	r1, [r3, #0]
      f0:	2900      	cmp	r1, #0
      f2:	d10b      	bne.n	10c <cpu_irq_enter_critical+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      f4:	f3ef 8010 	mrs	r0, PRIMASK
      f8:	4a07      	ldr	r2, [pc, #28]	; (118 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
      fa:	2800      	cmp	r0, #0
      fc:	d105      	bne.n	10a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
      fe:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     100:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     104:	4905      	ldr	r1, [pc, #20]	; (11c <cpu_irq_enter_critical+0x30>)
     106:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     108:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     10a:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     10c:	681a      	ldr	r2, [r3, #0]
     10e:	3201      	adds	r2, #1
     110:	601a      	str	r2, [r3, #0]
}
     112:	4770      	bx	lr
     114:	20000028 	.word	0x20000028
     118:	2000002c 	.word	0x2000002c
     11c:	20000000 	.word	0x20000000

00000120 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     120:	4b08      	ldr	r3, [pc, #32]	; (144 <cpu_irq_leave_critical+0x24>)
     122:	681a      	ldr	r2, [r3, #0]
     124:	3a01      	subs	r2, #1
     126:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     128:	681b      	ldr	r3, [r3, #0]
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_leave_critical+0x22>
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <cpu_irq_leave_critical+0x28>)
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d005      	beq.n	142 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     136:	2201      	movs	r2, #1
     138:	4b04      	ldr	r3, [pc, #16]	; (14c <cpu_irq_leave_critical+0x2c>)
     13a:	701a      	strb	r2, [r3, #0]
     13c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     140:	b662      	cpsie	i
	}
}
     142:	4770      	bx	lr
     144:	20000028 	.word	0x20000028
     148:	2000002c 	.word	0x2000002c
     14c:	20000000 	.word	0x20000000

00000150 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     152:	2501      	movs	r5, #1
	config->powersave  = false;
     154:	2700      	movs	r7, #0
	config->input_pull = PORT_PIN_PULL_UP;
     156:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
     158:	4e08      	ldr	r6, [pc, #32]	; (17c <system_board_init+0x2c>)
     15a:	0021      	movs	r1, r4
     15c:	2010      	movs	r0, #16
     15e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     160:	70a7      	strb	r7, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     162:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     164:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     166:	2280      	movs	r2, #128	; 0x80
     168:	4b05      	ldr	r3, [pc, #20]	; (180 <system_board_init+0x30>)
     16a:	0252      	lsls	r2, r2, #9
     16c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     16e:	0021      	movs	r1, r4
     170:	200e      	movs	r0, #14
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     172:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     174:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     176:	47b0      	blx	r6
}
     178:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	00000185 	.word	0x00000185
     180:	41004400 	.word	0x41004400

00000184 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     184:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     186:	2280      	movs	r2, #128	; 0x80
     188:	ab01      	add	r3, sp, #4
     18a:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     18c:	780a      	ldrb	r2, [r1, #0]
     18e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     190:	784a      	ldrb	r2, [r1, #1]
     192:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     194:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     196:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     198:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     19a:	4b01      	ldr	r3, [pc, #4]	; (1a0 <port_pin_set_config+0x1c>)
     19c:	4798      	blx	r3
}
     19e:	bd07      	pop	{r0, r1, r2, pc}
     1a0:	00000f3d 	.word	0x00000f3d

000001a4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1a6:	0007      	movs	r7, r0
     1a8:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     1aa:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1ac:	0008      	movs	r0, r1
     1ae:	4b9b      	ldr	r3, [pc, #620]	; (41c <STACK_SIZE+0x1c>)
{
     1b0:	0014      	movs	r4, r2
     1b2:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1b4:	4798      	blx	r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1b6:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1b8:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1ba:	409d      	lsls	r5, r3
     1bc:	002b      	movs	r3, r5
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1be:	4a98      	ldr	r2, [pc, #608]	; (420 <STACK_SIZE+0x20>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     1c0:	300e      	adds	r0, #14
     1c2:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1c4:	b2c5      	uxtb	r5, r0
     1c6:	430b      	orrs	r3, r1
     1c8:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     1ca:	7b23      	ldrb	r3, [r4, #12]
     1cc:	aa08      	add	r2, sp, #32
     1ce:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1d0:	0011      	movs	r1, r2
     1d2:	0028      	movs	r0, r5
     1d4:	4b93      	ldr	r3, [pc, #588]	; (424 <STACK_SIZE+0x24>)
     1d6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1d8:	0028      	movs	r0, r5
     1da:	4b93      	ldr	r3, [pc, #588]	; (428 <STACK_SIZE+0x28>)
     1dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1de:	4b93      	ldr	r3, [pc, #588]	; (42c <STACK_SIZE+0x2c>)
     1e0:	7b20      	ldrb	r0, [r4, #12]
     1e2:	2100      	movs	r1, #0
     1e4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1e6:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     1e8:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1ea:	079b      	lsls	r3, r3, #30
     1ec:	d500      	bpl.n	1f0 <i2c_master_init+0x4c>
     1ee:	e109      	b.n	404 <STACK_SIZE+0x4>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1f0:	2301      	movs	r3, #1
     1f2:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     1f4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1f6:	401d      	ands	r5, r3
     1f8:	d000      	beq.n	1fc <i2c_master_init+0x58>
     1fa:	e103      	b.n	404 <STACK_SIZE+0x4>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     1fc:	4b87      	ldr	r3, [pc, #540]	; (41c <STACK_SIZE+0x1c>)
     1fe:	6838      	ldr	r0, [r7, #0]
     200:	4798      	blx	r3
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     202:	498b      	ldr	r1, [pc, #556]	; (430 <STACK_SIZE+0x30>)
     204:	4b8b      	ldr	r3, [pc, #556]	; (434 <STACK_SIZE+0x34>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     206:	9004      	str	r0, [sp, #16]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     208:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     20a:	9b04      	ldr	r3, [sp, #16]

	/* Initialize values in module. */
	module->registered_callback = 0;
     20c:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     20e:	009a      	lsls	r2, r3, #2
     210:	4b89      	ldr	r3, [pc, #548]	; (438 <STACK_SIZE+0x38>)
	module->enabled_callback = 0;
     212:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     214:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     216:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     218:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     21a:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     21c:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     21e:	2314      	movs	r3, #20
	module->buffer = NULL;
     220:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     222:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     224:	683b      	ldr	r3, [r7, #0]
     226:	ae09      	add	r6, sp, #36	; 0x24
     228:	9304      	str	r3, [sp, #16]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     22a:	0018      	movs	r0, r3
     22c:	4b7b      	ldr	r3, [pc, #492]	; (41c <STACK_SIZE+0x1c>)
     22e:	4798      	blx	r3
     230:	2380      	movs	r3, #128	; 0x80
     232:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
     234:	69e0      	ldr	r0, [r4, #28]
     236:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     238:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     23a:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     23c:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     23e:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     240:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     242:	2800      	cmp	r0, #0
     244:	d103      	bne.n	24e <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     246:	0001      	movs	r1, r0
     248:	4b7c      	ldr	r3, [pc, #496]	; (43c <STACK_SIZE+0x3c>)
     24a:	9804      	ldr	r0, [sp, #16]
     24c:	4798      	blx	r3
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     24e:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     250:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     252:	0c00      	lsrs	r0, r0, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     254:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     256:	b2c0      	uxtb	r0, r0
     258:	0031      	movs	r1, r6
     25a:	4b79      	ldr	r3, [pc, #484]	; (440 <STACK_SIZE+0x40>)
     25c:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     25e:	2d00      	cmp	r5, #0
     260:	d104      	bne.n	26c <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     262:	2101      	movs	r1, #1
     264:	9804      	ldr	r0, [sp, #16]
     266:	4b75      	ldr	r3, [pc, #468]	; (43c <STACK_SIZE+0x3c>)
     268:	4798      	blx	r3
     26a:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     26c:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     26e:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     270:	0c2d      	lsrs	r5, r5, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     272:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     274:	b2e8      	uxtb	r0, r5
     276:	4b72      	ldr	r3, [pc, #456]	; (440 <STACK_SIZE+0x40>)
     278:	0031      	movs	r1, r6
     27a:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     27c:	8aa3      	ldrh	r3, [r4, #20]
     27e:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     280:	8ae3      	ldrh	r3, [r4, #22]
     282:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     284:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     286:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     288:	2a00      	cmp	r2, #0
     28a:	d106      	bne.n	29a <i2c_master_init+0xf6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     28c:	4b6d      	ldr	r3, [pc, #436]	; (444 <STACK_SIZE+0x44>)
     28e:	3202      	adds	r2, #2
     290:	789b      	ldrb	r3, [r3, #2]
     292:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     294:	1e5f      	subs	r7, r3, #1
     296:	41bb      	sbcs	r3, r7
     298:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     29a:	68a2      	ldr	r2, [r4, #8]
     29c:	6927      	ldr	r7, [r4, #16]
     29e:	4317      	orrs	r7, r2
     2a0:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     2a2:	1d63      	adds	r3, r4, #5
     2a4:	7fdb      	ldrb	r3, [r3, #31]
     2a6:	2b00      	cmp	r3, #0
     2a8:	d002      	beq.n	2b0 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2aa:	2380      	movs	r3, #128	; 0x80
     2ac:	05db      	lsls	r3, r3, #23
     2ae:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     2b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     2b2:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     2b4:	0023      	movs	r3, r4
     2b6:	332c      	adds	r3, #44	; 0x2c
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	2b00      	cmp	r3, #0
     2bc:	d103      	bne.n	2c6 <i2c_master_init+0x122>
     2be:	2380      	movs	r3, #128	; 0x80
     2c0:	049b      	lsls	r3, r3, #18
     2c2:	429a      	cmp	r2, r3
     2c4:	d102      	bne.n	2cc <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2c6:	2380      	movs	r3, #128	; 0x80
     2c8:	051b      	lsls	r3, r3, #20
     2ca:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     2cc:	0023      	movs	r3, r4
     2ce:	332d      	adds	r3, #45	; 0x2d
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	2b00      	cmp	r3, #0
     2d4:	d002      	beq.n	2dc <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     2d6:	2380      	movs	r3, #128	; 0x80
     2d8:	041b      	lsls	r3, r3, #16
     2da:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     2dc:	0023      	movs	r3, r4
     2de:	332e      	adds	r3, #46	; 0x2e
     2e0:	781b      	ldrb	r3, [r3, #0]
     2e2:	2b00      	cmp	r3, #0
     2e4:	d002      	beq.n	2ec <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     2e6:	2380      	movs	r3, #128	; 0x80
     2e8:	03db      	lsls	r3, r3, #15
     2ea:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2ec:	9b04      	ldr	r3, [sp, #16]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     2ee:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2f0:	681b      	ldr	r3, [r3, #0]
	uint32_t fscl        = 1000 * config->baud_rate;
     2f2:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2f4:	431f      	orrs	r7, r3
     2f6:	9b04      	ldr	r3, [sp, #16]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     2f8:	9a04      	ldr	r2, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2fa:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     2fc:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     2fe:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     300:	005b      	lsls	r3, r3, #1
     302:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     304:	b2c0      	uxtb	r0, r0
     306:	4b50      	ldr	r3, [pc, #320]	; (448 <STACK_SIZE+0x48>)
     308:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
     30a:	6823      	ldr	r3, [r4, #0]
     30c:	00ad      	lsls	r5, r5, #2
     30e:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     310:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     312:	0007      	movs	r7, r0
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     314:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     316:	4b4d      	ldr	r3, [pc, #308]	; (44c <STACK_SIZE+0x4c>)
     318:	4798      	blx	r3
     31a:	4b4c      	ldr	r3, [pc, #304]	; (44c <STACK_SIZE+0x4c>)
     31c:	9000      	str	r0, [sp, #0]
     31e:	9101      	str	r1, [sp, #4]
     320:	0068      	lsls	r0, r5, #1
     322:	4798      	blx	r3
     324:	9002      	str	r0, [sp, #8]
     326:	9103      	str	r1, [sp, #12]
     328:	4b48      	ldr	r3, [pc, #288]	; (44c <STACK_SIZE+0x4c>)
     32a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     32c:	4798      	blx	r3
     32e:	4e48      	ldr	r6, [pc, #288]	; (450 <STACK_SIZE+0x50>)
     330:	9006      	str	r0, [sp, #24]
     332:	9107      	str	r1, [sp, #28]
     334:	9800      	ldr	r0, [sp, #0]
     336:	9901      	ldr	r1, [sp, #4]
     338:	4a46      	ldr	r2, [pc, #280]	; (454 <STACK_SIZE+0x54>)
     33a:	4b47      	ldr	r3, [pc, #284]	; (458 <STACK_SIZE+0x58>)
     33c:	47b0      	blx	r6
     33e:	0002      	movs	r2, r0
     340:	000b      	movs	r3, r1
     342:	9806      	ldr	r0, [sp, #24]
     344:	9907      	ldr	r1, [sp, #28]
     346:	47b0      	blx	r6
     348:	4e44      	ldr	r6, [pc, #272]	; (45c <STACK_SIZE+0x5c>)
     34a:	2200      	movs	r2, #0
     34c:	4b44      	ldr	r3, [pc, #272]	; (460 <STACK_SIZE+0x60>)
     34e:	47b0      	blx	r6
     350:	4b3e      	ldr	r3, [pc, #248]	; (44c <STACK_SIZE+0x4c>)
     352:	9006      	str	r0, [sp, #24]
     354:	9107      	str	r1, [sp, #28]
     356:	0028      	movs	r0, r5
     358:	4798      	blx	r3
     35a:	4d3d      	ldr	r5, [pc, #244]	; (450 <STACK_SIZE+0x50>)
     35c:	0002      	movs	r2, r0
     35e:	000b      	movs	r3, r1
     360:	9806      	ldr	r0, [sp, #24]
     362:	9907      	ldr	r1, [sp, #28]
     364:	47a8      	blx	r5
     366:	4d3f      	ldr	r5, [pc, #252]	; (464 <STACK_SIZE+0x64>)
     368:	0002      	movs	r2, r0
     36a:	000b      	movs	r3, r1
     36c:	9800      	ldr	r0, [sp, #0]
     36e:	9901      	ldr	r1, [sp, #4]
     370:	47a8      	blx	r5
     372:	9a02      	ldr	r2, [sp, #8]
     374:	9b03      	ldr	r3, [sp, #12]
     376:	47b0      	blx	r6
     378:	2200      	movs	r2, #0
     37a:	4b3b      	ldr	r3, [pc, #236]	; (468 <STACK_SIZE+0x68>)
     37c:	47a8      	blx	r5
     37e:	9a02      	ldr	r2, [sp, #8]
     380:	9b03      	ldr	r3, [sp, #12]
     382:	4e3a      	ldr	r6, [pc, #232]	; (46c <STACK_SIZE+0x6c>)
     384:	47b0      	blx	r6
     386:	4b3a      	ldr	r3, [pc, #232]	; (470 <STACK_SIZE+0x70>)
     388:	4798      	blx	r3
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     38a:	2380      	movs	r3, #128	; 0x80
	tmp_baud = (int32_t)(div_ceil(
     38c:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     38e:	68a2      	ldr	r2, [r4, #8]
     390:	049b      	lsls	r3, r3, #18
     392:	429a      	cmp	r2, r3
     394:	d13e      	bne.n	414 <STACK_SIZE+0x14>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     396:	23fa      	movs	r3, #250	; 0xfa
     398:	9c05      	ldr	r4, [sp, #20]
     39a:	009b      	lsls	r3, r3, #2
     39c:	435c      	muls	r4, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     39e:	9a00      	ldr	r2, [sp, #0]
     3a0:	9b01      	ldr	r3, [sp, #4]
     3a2:	4e2e      	ldr	r6, [pc, #184]	; (45c <STACK_SIZE+0x5c>)
     3a4:	0010      	movs	r0, r2
     3a6:	0019      	movs	r1, r3
     3a8:	47b0      	blx	r6
     3aa:	4b28      	ldr	r3, [pc, #160]	; (44c <STACK_SIZE+0x4c>)
     3ac:	9000      	str	r0, [sp, #0]
     3ae:	9101      	str	r1, [sp, #4]
     3b0:	0020      	movs	r0, r4
     3b2:	4798      	blx	r3
     3b4:	2200      	movs	r2, #0
     3b6:	4b2f      	ldr	r3, [pc, #188]	; (474 <STACK_SIZE+0x74>)
     3b8:	4e25      	ldr	r6, [pc, #148]	; (450 <STACK_SIZE+0x50>)
     3ba:	47b0      	blx	r6
     3bc:	4e2b      	ldr	r6, [pc, #172]	; (46c <STACK_SIZE+0x6c>)
     3be:	0002      	movs	r2, r0
     3c0:	000b      	movs	r3, r1
     3c2:	9800      	ldr	r0, [sp, #0]
     3c4:	9901      	ldr	r1, [sp, #4]
     3c6:	47b0      	blx	r6
     3c8:	2200      	movs	r2, #0
     3ca:	4b27      	ldr	r3, [pc, #156]	; (468 <STACK_SIZE+0x68>)
     3cc:	47a8      	blx	r5
     3ce:	4b28      	ldr	r3, [pc, #160]	; (470 <STACK_SIZE+0x70>)
     3d0:	4798      	blx	r3
     3d2:	4b29      	ldr	r3, [pc, #164]	; (478 <STACK_SIZE+0x78>)
     3d4:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     3d6:	d017      	beq.n	408 <STACK_SIZE+0x8>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     3d8:	0021      	movs	r1, r4
     3da:	0038      	movs	r0, r7
     3dc:	4798      	blx	r3
     3de:	3802      	subs	r0, #2
     3e0:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3e2:	9a02      	ldr	r2, [sp, #8]
     3e4:	2040      	movs	r0, #64	; 0x40
     3e6:	2aff      	cmp	r2, #255	; 0xff
     3e8:	d80c      	bhi.n	404 <STACK_SIZE+0x4>
     3ea:	2bff      	cmp	r3, #255	; 0xff
     3ec:	d80a      	bhi.n	404 <STACK_SIZE+0x4>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3ee:	20ff      	movs	r0, #255	; 0xff
     3f0:	0015      	movs	r5, r2
     3f2:	0400      	lsls	r0, r0, #16
     3f4:	041b      	lsls	r3, r3, #16
     3f6:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     3f8:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3fa:	0636      	lsls	r6, r6, #24
     3fc:	4335      	orrs	r5, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3fe:	9a04      	ldr	r2, [sp, #16]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     400:	432b      	orrs	r3, r5
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     402:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     404:	b00b      	add	sp, #44	; 0x2c
     406:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     408:	0061      	lsls	r1, r4, #1
     40a:	1e48      	subs	r0, r1, #1
     40c:	19c0      	adds	r0, r0, r7
     40e:	4798      	blx	r3
     410:	1e43      	subs	r3, r0, #1
     412:	e7e6      	b.n	3e2 <i2c_master_init+0x23e>
	int32_t tmp_baudlow_hs = 0;
     414:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     416:	0033      	movs	r3, r6
     418:	e7e3      	b.n	3e2 <i2c_master_init+0x23e>
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	000007b9 	.word	0x000007b9
     420:	40000400 	.word	0x40000400
     424:	00000e69 	.word	0x00000e69
     428:	00000de1 	.word	0x00000de1
     42c:	000006c1 	.word	0x000006c1
     430:	00000535 	.word	0x00000535
     434:	000007f5 	.word	0x000007f5
     438:	20000078 	.word	0x20000078
     43c:	00000705 	.word	0x00000705
     440:	00000f3d 	.word	0x00000f3d
     444:	41002000 	.word	0x41002000
     448:	00000e85 	.word	0x00000e85
     44c:	0000322d 	.word	0x0000322d
     450:	00002699 	.word	0x00002699
     454:	e826d695 	.word	0xe826d695
     458:	3e112e0b 	.word	0x3e112e0b
     45c:	00001a11 	.word	0x00001a11
     460:	40240000 	.word	0x40240000
     464:	00002b99 	.word	0x00002b99
     468:	3ff00000 	.word	0x3ff00000
     46c:	00002031 	.word	0x00002031
     470:	000031c5 	.word	0x000031c5
     474:	40080000 	.word	0x40080000
     478:	000018f9 	.word	0x000018f9

0000047c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     47c:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     47e:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     480:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     482:	421a      	tst	r2, r3
     484:	d1fc      	bne.n	480 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     486:	4770      	bx	lr

00000488 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     48a:	6805      	ldr	r5, [r0, #0]
{
     48c:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     48e:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     490:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     492:	8b83      	ldrh	r3, [r0, #28]
     494:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
     496:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     498:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     49a:	3b01      	subs	r3, #1
     49c:	b29b      	uxth	r3, r3
     49e:	8383      	strh	r3, [r0, #28]
     4a0:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
     4a2:	0112      	lsls	r2, r2, #4
     4a4:	d50a      	bpl.n	4bc <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
     4a6:	2b00      	cmp	r3, #0
     4a8:	d00d      	beq.n	4c6 <_i2c_master_read+0x3e>
     4aa:	8b83      	ldrh	r3, [r0, #28]
     4ac:	2b01      	cmp	r3, #1
     4ae:	d10a      	bne.n	4c6 <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4b0:	2380      	movs	r3, #128	; 0x80
     4b2:	686a      	ldr	r2, [r5, #4]
     4b4:	02db      	lsls	r3, r3, #11
     4b6:	4313      	orrs	r3, r2
     4b8:	606b      	str	r3, [r5, #4]
     4ba:	e004      	b.n	4c6 <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
     4bc:	2b00      	cmp	r3, #0
     4be:	d002      	beq.n	4c6 <_i2c_master_read+0x3e>
     4c0:	8b83      	ldrh	r3, [r0, #28]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d0f4      	beq.n	4b0 <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
     4c6:	8ba3      	ldrh	r3, [r4, #28]
     4c8:	4f0a      	ldr	r7, [pc, #40]	; (4f4 <_i2c_master_read+0x6c>)
     4ca:	2b00      	cmp	r3, #0
     4cc:	d109      	bne.n	4e2 <_i2c_master_read+0x5a>
		if (module->send_stop) {
     4ce:	7aa3      	ldrb	r3, [r4, #10]
     4d0:	2b00      	cmp	r3, #0
     4d2:	d006      	beq.n	4e2 <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     4d4:	0020      	movs	r0, r4
     4d6:	47b8      	blx	r7
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4d8:	23c0      	movs	r3, #192	; 0xc0
     4da:	686a      	ldr	r2, [r5, #4]
     4dc:	029b      	lsls	r3, r3, #10
     4de:	4313      	orrs	r3, r2
     4e0:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     4e2:	0020      	movs	r0, r4
     4e4:	47b8      	blx	r7
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     4e6:	6a23      	ldr	r3, [r4, #32]
     4e8:	3528      	adds	r5, #40	; 0x28
     4ea:	199e      	adds	r6, r3, r6
     4ec:	782b      	ldrb	r3, [r5, #0]
     4ee:	b2db      	uxtb	r3, r3
     4f0:	7033      	strb	r3, [r6, #0]
}
     4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4f4:	0000047d 	.word	0x0000047d

000004f8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     4f8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4fa:	6806      	ldr	r6, [r0, #0]
{
     4fc:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     4fe:	8b73      	ldrh	r3, [r6, #26]
     500:	075b      	lsls	r3, r3, #29
     502:	d503      	bpl.n	50c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     504:	231e      	movs	r3, #30
     506:	3406      	adds	r4, #6
     508:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     50a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     50c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     50e:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
     510:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
     512:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
     514:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
     516:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
     518:	3b01      	subs	r3, #1
     51a:	b29b      	uxth	r3, r3
     51c:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     51e:	4b04      	ldr	r3, [pc, #16]	; (530 <_i2c_master_write+0x38>)
     520:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     522:	6a23      	ldr	r3, [r4, #32]
     524:	195d      	adds	r5, r3, r5
     526:	782b      	ldrb	r3, [r5, #0]
     528:	b2db      	uxtb	r3, r3
     52a:	7033      	strb	r3, [r6, #0]
     52c:	e7ed      	b.n	50a <_i2c_master_write+0x12>
     52e:	46c0      	nop			; (mov r8, r8)
     530:	0000047d 	.word	0x0000047d

00000534 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     536:	4b5e      	ldr	r3, [pc, #376]	; (6b0 <_i2c_master_interrupt_handler+0x17c>)
     538:	0080      	lsls	r0, r0, #2
     53a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     53c:	6825      	ldr	r5, [r4, #0]
     53e:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     540:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     542:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
     544:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     546:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
     548:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     54a:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     54c:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     54e:	2a00      	cmp	r2, #0
     550:	d12e      	bne.n	5b0 <_i2c_master_interrupt_handler+0x7c>
     552:	8ba2      	ldrh	r2, [r4, #28]
     554:	2a00      	cmp	r2, #0
     556:	d02b      	beq.n	5b0 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     558:	2301      	movs	r3, #1
     55a:	7e2a      	ldrb	r2, [r5, #24]
     55c:	421a      	tst	r2, r3
     55e:	d006      	beq.n	56e <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     560:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     562:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     564:	8b6b      	ldrh	r3, [r5, #26]
     566:	4013      	ands	r3, r2
     568:	d010      	beq.n	58c <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
     56a:	2341      	movs	r3, #65	; 0x41
     56c:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
     56e:	8ba3      	ldrh	r3, [r4, #28]
     570:	b29b      	uxth	r3, r3
     572:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     574:	7ff3      	ldrb	r3, [r6, #31]
     576:	2b05      	cmp	r3, #5
     578:	d13c      	bne.n	5f4 <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     57a:	1d63      	adds	r3, r4, #5
     57c:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
     57e:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     580:	2b00      	cmp	r3, #0
     582:	d000      	beq.n	586 <_i2c_master_interrupt_handler+0x52>
     584:	e08a      	b.n	69c <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
     586:	4b4b      	ldr	r3, [pc, #300]	; (6b4 <_i2c_master_interrupt_handler+0x180>)
		} else {
			_i2c_master_read(module);
     588:	4798      	blx	r3
     58a:	e033      	b.n	5f4 <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     58c:	8b6a      	ldrh	r2, [r5, #26]
     58e:	0752      	lsls	r2, r2, #29
     590:	d5ed      	bpl.n	56e <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     592:	2218      	movs	r2, #24
     594:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
     596:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     598:	7aa3      	ldrb	r3, [r4, #10]
     59a:	2b00      	cmp	r3, #0
     59c:	d0e7      	beq.n	56e <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
     59e:	4b46      	ldr	r3, [pc, #280]	; (6b8 <_i2c_master_interrupt_handler+0x184>)
     5a0:	0020      	movs	r0, r4
     5a2:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5a4:	23c0      	movs	r3, #192	; 0xc0
     5a6:	686a      	ldr	r2, [r5, #4]
     5a8:	029b      	lsls	r3, r3, #10
     5aa:	4313      	orrs	r3, r2
     5ac:	606b      	str	r3, [r5, #4]
     5ae:	e7de      	b.n	56e <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5b0:	8b62      	ldrh	r2, [r4, #26]
     5b2:	2a00      	cmp	r2, #0
     5b4:	d05f      	beq.n	676 <_i2c_master_interrupt_handler+0x142>
     5b6:	8ba2      	ldrh	r2, [r4, #28]
     5b8:	2a00      	cmp	r2, #0
     5ba:	d15c      	bne.n	676 <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
     5bc:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5be:	2a05      	cmp	r2, #5
     5c0:	d159      	bne.n	676 <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     5c2:	1d62      	adds	r2, r4, #5
     5c4:	7fd2      	ldrb	r2, [r2, #31]
     5c6:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
     5c8:	2a00      	cmp	r2, #0
     5ca:	d154      	bne.n	676 <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
     5cc:	2303      	movs	r3, #3
     5ce:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     5d0:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     5d2:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
     5d4:	7aa3      	ldrb	r3, [r4, #10]
     5d6:	2b00      	cmp	r3, #0
     5d8:	d04a      	beq.n	670 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
     5da:	4b37      	ldr	r3, [pc, #220]	; (6b8 <_i2c_master_interrupt_handler+0x184>)
     5dc:	0020      	movs	r0, r4
     5de:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5e0:	23c0      	movs	r3, #192	; 0xc0
     5e2:	686a      	ldr	r2, [r5, #4]
     5e4:	029b      	lsls	r3, r3, #10
     5e6:	4313      	orrs	r3, r2
     5e8:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     5ea:	07fb      	lsls	r3, r7, #31
     5ec:	d502      	bpl.n	5f4 <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     5ee:	68e3      	ldr	r3, [r4, #12]
     5f0:	0020      	movs	r0, r4
     5f2:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     5f4:	8b63      	ldrh	r3, [r4, #26]
     5f6:	2b00      	cmp	r3, #0
     5f8:	d01b      	beq.n	632 <_i2c_master_interrupt_handler+0xfe>
     5fa:	8ba3      	ldrh	r3, [r4, #28]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d118      	bne.n	632 <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
     600:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     602:	2b05      	cmp	r3, #5
     604:	d115      	bne.n	632 <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     606:	1d63      	adds	r3, r4, #5
     608:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
     60a:	2a01      	cmp	r2, #1
     60c:	d111      	bne.n	632 <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     60e:	7e29      	ldrb	r1, [r5, #24]
     610:	3201      	adds	r2, #1
     612:	4211      	tst	r1, r2
     614:	d000      	beq.n	618 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     616:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     618:	2203      	movs	r2, #3
     61a:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     61c:	2200      	movs	r2, #0
     61e:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
     620:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     622:	07ba      	lsls	r2, r7, #30
     624:	d53c      	bpl.n	6a0 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     626:	7fda      	ldrb	r2, [r3, #31]
     628:	2a01      	cmp	r2, #1
     62a:	d139      	bne.n	6a0 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     62c:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     62e:	0020      	movs	r0, r4
     630:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     632:	7ff3      	ldrb	r3, [r6, #31]
     634:	2b05      	cmp	r3, #5
     636:	d01a      	beq.n	66e <_i2c_master_interrupt_handler+0x13a>
     638:	7ff3      	ldrb	r3, [r6, #31]
     63a:	2b00      	cmp	r3, #0
     63c:	d017      	beq.n	66e <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     63e:	2303      	movs	r3, #3
     640:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     642:	2300      	movs	r3, #0
     644:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     646:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     648:	7ff3      	ldrb	r3, [r6, #31]
     64a:	2b41      	cmp	r3, #65	; 0x41
     64c:	d00a      	beq.n	664 <_i2c_master_interrupt_handler+0x130>
     64e:	7aa3      	ldrb	r3, [r4, #10]
     650:	2b00      	cmp	r3, #0
     652:	d007      	beq.n	664 <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     654:	4b18      	ldr	r3, [pc, #96]	; (6b8 <_i2c_master_interrupt_handler+0x184>)
     656:	0020      	movs	r0, r4
     658:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     65a:	23e0      	movs	r3, #224	; 0xe0
     65c:	686a      	ldr	r2, [r5, #4]
     65e:	02db      	lsls	r3, r3, #11
     660:	4313      	orrs	r3, r2
     662:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     664:	077b      	lsls	r3, r7, #29
     666:	d502      	bpl.n	66e <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     668:	6963      	ldr	r3, [r4, #20]
     66a:	0020      	movs	r0, r4
     66c:	4798      	blx	r3
		}
	}
}
     66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     670:	2301      	movs	r3, #1
     672:	762b      	strb	r3, [r5, #24]
     674:	e7b9      	b.n	5ea <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     676:	8b62      	ldrh	r2, [r4, #26]
     678:	2a00      	cmp	r2, #0
     67a:	d0bb      	beq.n	5f4 <_i2c_master_interrupt_handler+0xc0>
     67c:	8ba2      	ldrh	r2, [r4, #28]
     67e:	2a00      	cmp	r2, #0
     680:	d0b8      	beq.n	5f4 <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     682:	8b6a      	ldrh	r2, [r5, #26]
     684:	0692      	lsls	r2, r2, #26
     686:	d500      	bpl.n	68a <_i2c_master_interrupt_handler+0x156>
     688:	e777      	b.n	57a <_i2c_master_interrupt_handler+0x46>
     68a:	2b00      	cmp	r3, #0
     68c:	d003      	beq.n	696 <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     68e:	8ba3      	ldrh	r3, [r4, #28]
     690:	2b01      	cmp	r3, #1
     692:	d100      	bne.n	696 <_i2c_master_interrupt_handler+0x162>
     694:	e771      	b.n	57a <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
     696:	2341      	movs	r3, #65	; 0x41
     698:	77f3      	strb	r3, [r6, #31]
     69a:	e7ab      	b.n	5f4 <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
     69c:	4b07      	ldr	r3, [pc, #28]	; (6bc <_i2c_master_interrupt_handler+0x188>)
     69e:	e773      	b.n	588 <_i2c_master_interrupt_handler+0x54>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     6a0:	07fa      	lsls	r2, r7, #31
     6a2:	d5c6      	bpl.n	632 <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     6a4:	7fdb      	ldrb	r3, [r3, #31]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d1c3      	bne.n	632 <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     6aa:	68e3      	ldr	r3, [r4, #12]
     6ac:	e7bf      	b.n	62e <_i2c_master_interrupt_handler+0xfa>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	20000078 	.word	0x20000078
     6b4:	000004f9 	.word	0x000004f9
     6b8:	0000047d 	.word	0x0000047d
     6bc:	00000489 	.word	0x00000489

000006c0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6c2:	4c0d      	ldr	r4, [pc, #52]	; (6f8 <sercom_set_gclk_generator+0x38>)
{
     6c4:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     6c6:	7823      	ldrb	r3, [r4, #0]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d001      	beq.n	6d0 <sercom_set_gclk_generator+0x10>
     6cc:	2900      	cmp	r1, #0
     6ce:	d00c      	beq.n	6ea <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     6d0:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6d2:	200d      	movs	r0, #13
     6d4:	4b09      	ldr	r3, [pc, #36]	; (6fc <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     6d6:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6d8:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6da:	200d      	movs	r0, #13
     6dc:	4b08      	ldr	r3, [pc, #32]	; (700 <sercom_set_gclk_generator+0x40>)
     6de:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     6e0:	2301      	movs	r3, #1

		return STATUS_OK;
     6e2:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     6e4:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     6e6:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6e8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     6ea:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     6ec:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     6ee:	42ab      	cmp	r3, r5
     6f0:	d0fa      	beq.n	6e8 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     6f2:	201d      	movs	r0, #29
     6f4:	e7f8      	b.n	6e8 <sercom_set_gclk_generator+0x28>
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	2000002d 	.word	0x2000002d
     6fc:	00000e69 	.word	0x00000e69
     700:	00000de1 	.word	0x00000de1

00000704 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     704:	4a1d      	ldr	r2, [pc, #116]	; (77c <_sercom_get_default_pad+0x78>)
{
     706:	0003      	movs	r3, r0
     708:	b500      	push	{lr}
     70a:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     70c:	4293      	cmp	r3, r2
     70e:	d013      	beq.n	738 <_sercom_get_default_pad+0x34>
     710:	4a1b      	ldr	r2, [pc, #108]	; (780 <_sercom_get_default_pad+0x7c>)
     712:	4293      	cmp	r3, r2
     714:	d01d      	beq.n	752 <_sercom_get_default_pad+0x4e>
     716:	4a1b      	ldr	r2, [pc, #108]	; (784 <_sercom_get_default_pad+0x80>)
     718:	4293      	cmp	r3, r2
     71a:	d127      	bne.n	76c <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     71c:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     71e:	2903      	cmp	r1, #3
     720:	d804      	bhi.n	72c <_sercom_get_default_pad+0x28>
     722:	f001 f8df 	bl	18e4 <__gnu_thumb1_case_uqi>
     726:	0225      	.short	0x0225
     728:	0705      	.short	0x0705
     72a:	4b17      	ldr	r3, [pc, #92]	; (788 <_sercom_get_default_pad+0x84>)
}
     72c:	0018      	movs	r0, r3
     72e:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     730:	4b16      	ldr	r3, [pc, #88]	; (78c <_sercom_get_default_pad+0x88>)
     732:	e7fb      	b.n	72c <_sercom_get_default_pad+0x28>
     734:	4b16      	ldr	r3, [pc, #88]	; (790 <_sercom_get_default_pad+0x8c>)
     736:	e7f9      	b.n	72c <_sercom_get_default_pad+0x28>
	return 0;
     738:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     73a:	2903      	cmp	r1, #3
     73c:	d8f6      	bhi.n	72c <_sercom_get_default_pad+0x28>
     73e:	f001 f8d1 	bl	18e4 <__gnu_thumb1_case_uqi>
     742:	0219      	.short	0x0219
     744:	0604      	.short	0x0604
     746:	4b13      	ldr	r3, [pc, #76]	; (794 <_sercom_get_default_pad+0x90>)
     748:	e7f0      	b.n	72c <_sercom_get_default_pad+0x28>
     74a:	4b13      	ldr	r3, [pc, #76]	; (798 <_sercom_get_default_pad+0x94>)
     74c:	e7ee      	b.n	72c <_sercom_get_default_pad+0x28>
     74e:	4b13      	ldr	r3, [pc, #76]	; (79c <_sercom_get_default_pad+0x98>)
     750:	e7ec      	b.n	72c <_sercom_get_default_pad+0x28>
	return 0;
     752:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     754:	2903      	cmp	r1, #3
     756:	d8e9      	bhi.n	72c <_sercom_get_default_pad+0x28>
     758:	f001 f8c4 	bl	18e4 <__gnu_thumb1_case_uqi>
     75c:	0604020e 	.word	0x0604020e
     760:	4b0f      	ldr	r3, [pc, #60]	; (7a0 <_sercom_get_default_pad+0x9c>)
     762:	e7e3      	b.n	72c <_sercom_get_default_pad+0x28>
     764:	4b0f      	ldr	r3, [pc, #60]	; (7a4 <_sercom_get_default_pad+0xa0>)
     766:	e7e1      	b.n	72c <_sercom_get_default_pad+0x28>
     768:	4b0f      	ldr	r3, [pc, #60]	; (7a8 <_sercom_get_default_pad+0xa4>)
     76a:	e7df      	b.n	72c <_sercom_get_default_pad+0x28>
	return 0;
     76c:	2300      	movs	r3, #0
     76e:	e7dd      	b.n	72c <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     770:	4b0e      	ldr	r3, [pc, #56]	; (7ac <_sercom_get_default_pad+0xa8>)
     772:	e7db      	b.n	72c <_sercom_get_default_pad+0x28>
     774:	4b0e      	ldr	r3, [pc, #56]	; (7b0 <_sercom_get_default_pad+0xac>)
     776:	e7d9      	b.n	72c <_sercom_get_default_pad+0x28>
     778:	4b0e      	ldr	r3, [pc, #56]	; (7b4 <_sercom_get_default_pad+0xb0>)
     77a:	e7d7      	b.n	72c <_sercom_get_default_pad+0x28>
     77c:	42000c00 	.word	0x42000c00
     780:	42001000 	.word	0x42001000
     784:	42000800 	.word	0x42000800
     788:	00050003 	.word	0x00050003
     78c:	00060003 	.word	0x00060003
     790:	00070003 	.word	0x00070003
     794:	00170002 	.word	0x00170002
     798:	001e0003 	.word	0x001e0003
     79c:	001f0003 	.word	0x001f0003
     7a0:	00170003 	.word	0x00170003
     7a4:	00100003 	.word	0x00100003
     7a8:	00190003 	.word	0x00190003
     7ac:	00040003 	.word	0x00040003
     7b0:	00160002 	.word	0x00160002
     7b4:	00160003 	.word	0x00160003

000007b8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     7b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     7ba:	4b0c      	ldr	r3, [pc, #48]	; (7ec <_sercom_get_sercom_inst_index+0x34>)
{
     7bc:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     7be:	0018      	movs	r0, r3
     7c0:	aa01      	add	r2, sp, #4
     7c2:	c870      	ldmia	r0!, {r4, r5, r6}
     7c4:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     7c6:	9a01      	ldr	r2, [sp, #4]
     7c8:	428a      	cmp	r2, r1
     7ca:	d00a      	beq.n	7e2 <_sercom_get_sercom_inst_index+0x2a>
     7cc:	685a      	ldr	r2, [r3, #4]
     7ce:	428a      	cmp	r2, r1
     7d0:	d009      	beq.n	7e6 <_sercom_get_sercom_inst_index+0x2e>
     7d2:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     7d4:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     7d6:	428b      	cmp	r3, r1
     7d8:	d101      	bne.n	7de <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7da:	3002      	adds	r0, #2
			return i;
     7dc:	b2c0      	uxtb	r0, r0
}
     7de:	b004      	add	sp, #16
     7e0:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7e2:	2000      	movs	r0, #0
     7e4:	e7fa      	b.n	7dc <_sercom_get_sercom_inst_index+0x24>
     7e6:	2001      	movs	r0, #1
     7e8:	e7f8      	b.n	7dc <_sercom_get_sercom_inst_index+0x24>
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	00003320 	.word	0x00003320

000007f0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     7f0:	4770      	bx	lr
	...

000007f4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     7f4:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     7f6:	4e09      	ldr	r6, [pc, #36]	; (81c <_sercom_set_handler+0x28>)
     7f8:	4b09      	ldr	r3, [pc, #36]	; (820 <_sercom_set_handler+0x2c>)
     7fa:	7832      	ldrb	r2, [r6, #0]
     7fc:	2a00      	cmp	r2, #0
     7fe:	d109      	bne.n	814 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     800:	4c08      	ldr	r4, [pc, #32]	; (824 <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     802:	4d09      	ldr	r5, [pc, #36]	; (828 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     804:	6022      	str	r2, [r4, #0]
     806:	6062      	str	r2, [r4, #4]
     808:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
     80a:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     80c:	601d      	str	r5, [r3, #0]
     80e:	605d      	str	r5, [r3, #4]
     810:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
     812:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     814:	0080      	lsls	r0, r0, #2
     816:	5019      	str	r1, [r3, r0]
}
     818:	bd70      	pop	{r4, r5, r6, pc}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	2000002f 	.word	0x2000002f
     820:	20000030 	.word	0x20000030
     824:	20000078 	.word	0x20000078
     828:	000007f1 	.word	0x000007f1

0000082c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     82c:	2309      	movs	r3, #9
{
     82e:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     830:	ac01      	add	r4, sp, #4
     832:	7023      	strb	r3, [r4, #0]
     834:	3301      	adds	r3, #1
     836:	7063      	strb	r3, [r4, #1]
     838:	3301      	adds	r3, #1
     83a:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     83c:	4b01      	ldr	r3, [pc, #4]	; (844 <_sercom_get_interrupt_vector+0x18>)
     83e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     840:	5620      	ldrsb	r0, [r4, r0]
}
     842:	bd16      	pop	{r1, r2, r4, pc}
     844:	000007b9 	.word	0x000007b9

00000848 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     848:	b510      	push	{r4, lr}
     84a:	4b02      	ldr	r3, [pc, #8]	; (854 <SERCOM0_Handler+0xc>)
     84c:	2000      	movs	r0, #0
     84e:	681b      	ldr	r3, [r3, #0]
     850:	4798      	blx	r3
     852:	bd10      	pop	{r4, pc}
     854:	20000030 	.word	0x20000030

00000858 <SERCOM1_Handler>:
     858:	b510      	push	{r4, lr}
     85a:	4b02      	ldr	r3, [pc, #8]	; (864 <SERCOM1_Handler+0xc>)
     85c:	2001      	movs	r0, #1
     85e:	685b      	ldr	r3, [r3, #4]
     860:	4798      	blx	r3
     862:	bd10      	pop	{r4, pc}
     864:	20000030 	.word	0x20000030

00000868 <SERCOM2_Handler>:
     868:	b510      	push	{r4, lr}
     86a:	4b02      	ldr	r3, [pc, #8]	; (874 <SERCOM2_Handler+0xc>)
     86c:	2002      	movs	r0, #2
     86e:	689b      	ldr	r3, [r3, #8]
     870:	4798      	blx	r3
     872:	bd10      	pop	{r4, pc}
     874:	20000030 	.word	0x20000030

00000878 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     878:	2310      	movs	r3, #16
     87a:	4902      	ldr	r1, [pc, #8]	; (884 <_system_dfll_wait_for_sync+0xc>)
     87c:	68ca      	ldr	r2, [r1, #12]
     87e:	421a      	tst	r2, r3
     880:	d0fc      	beq.n	87c <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     882:	4770      	bx	lr
     884:	40000800 	.word	0x40000800

00000888 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     888:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
     88a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
     88c:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     88e:	4d09      	ldr	r5, [pc, #36]	; (8b4 <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     890:	4c09      	ldr	r4, [pc, #36]	; (8b8 <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     892:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
     894:	4f09      	ldr	r7, [pc, #36]	; (8bc <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     896:	4313      	orrs	r3, r2
     898:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     89a:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     89c:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     89e:	68ab      	ldr	r3, [r5, #8]
     8a0:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     8a2:	686b      	ldr	r3, [r5, #4]
     8a4:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     8a6:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
     8a8:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     8aa:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     8ac:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     8ae:	b29b      	uxth	r3, r3
     8b0:	84a3      	strh	r3, [r4, #36]	; 0x24
}
     8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8b4:	2000003c 	.word	0x2000003c
     8b8:	40000800 	.word	0x40000800
     8bc:	00000879 	.word	0x00000879

000008c0 <system_clock_source_get_hz>:
{
     8c0:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     8c2:	2808      	cmp	r0, #8
     8c4:	d806      	bhi.n	8d4 <system_clock_source_get_hz+0x14>
     8c6:	f001 f80d 	bl	18e4 <__gnu_thumb1_case_uqi>
     8ca:	0508      	.short	0x0508
     8cc:	12303005 	.word	0x12303005
     8d0:	150b      	.short	0x150b
     8d2:	28          	.byte	0x28
     8d3:	00          	.byte	0x00
		return 0;
     8d4:	2400      	movs	r4, #0
}
     8d6:	0020      	movs	r0, r4
     8d8:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     8da:	4b16      	ldr	r3, [pc, #88]	; (934 <system_clock_source_get_hz+0x74>)
     8dc:	691c      	ldr	r4, [r3, #16]
     8de:	e7fa      	b.n	8d6 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     8e0:	4b15      	ldr	r3, [pc, #84]	; (938 <system_clock_source_get_hz+0x78>)
     8e2:	4c16      	ldr	r4, [pc, #88]	; (93c <system_clock_source_get_hz+0x7c>)
     8e4:	6a1b      	ldr	r3, [r3, #32]
     8e6:	059b      	lsls	r3, r3, #22
     8e8:	0f9b      	lsrs	r3, r3, #30
     8ea:	40dc      	lsrs	r4, r3
     8ec:	e7f3      	b.n	8d6 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     8ee:	4b11      	ldr	r3, [pc, #68]	; (934 <system_clock_source_get_hz+0x74>)
     8f0:	695c      	ldr	r4, [r3, #20]
     8f2:	e7f0      	b.n	8d6 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     8f4:	4d0f      	ldr	r5, [pc, #60]	; (934 <system_clock_source_get_hz+0x74>)
			return 0;
     8f6:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     8f8:	682b      	ldr	r3, [r5, #0]
     8fa:	079b      	lsls	r3, r3, #30
     8fc:	d5eb      	bpl.n	8d6 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     8fe:	4b10      	ldr	r3, [pc, #64]	; (940 <system_clock_source_get_hz+0x80>)
     900:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
     902:	2224      	movs	r2, #36	; 0x24
     904:	682b      	ldr	r3, [r5, #0]
     906:	4013      	ands	r3, r2
     908:	2b04      	cmp	r3, #4
     90a:	d111      	bne.n	930 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     90c:	0020      	movs	r0, r4
     90e:	4b0d      	ldr	r3, [pc, #52]	; (944 <system_clock_source_get_hz+0x84>)
     910:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     912:	68ac      	ldr	r4, [r5, #8]
     914:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     916:	4344      	muls	r4, r0
     918:	e7dd      	b.n	8d6 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     91a:	4b0b      	ldr	r3, [pc, #44]	; (948 <system_clock_source_get_hz+0x88>)
			return 0;
     91c:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     91e:	781b      	ldrb	r3, [r3, #0]
     920:	075b      	lsls	r3, r3, #29
     922:	d5d8      	bpl.n	8d6 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     924:	4b03      	ldr	r3, [pc, #12]	; (934 <system_clock_source_get_hz+0x74>)
     926:	68dc      	ldr	r4, [r3, #12]
     928:	e7d5      	b.n	8d6 <system_clock_source_get_hz+0x16>
		return 32768UL;
     92a:	2480      	movs	r4, #128	; 0x80
     92c:	0224      	lsls	r4, r4, #8
     92e:	e7d2      	b.n	8d6 <system_clock_source_get_hz+0x16>
			return 48000000UL;
     930:	4c06      	ldr	r4, [pc, #24]	; (94c <system_clock_source_get_hz+0x8c>)
     932:	e7d0      	b.n	8d6 <system_clock_source_get_hz+0x16>
     934:	2000003c 	.word	0x2000003c
     938:	40000800 	.word	0x40000800
     93c:	007a1200 	.word	0x007a1200
     940:	00000879 	.word	0x00000879
     944:	00000e85 	.word	0x00000e85
     948:	40000850 	.word	0x40000850
     94c:	02dc6c00 	.word	0x02dc6c00

00000950 <system_clock_source_osc8m_set_config>:
{
     950:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
     952:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
     954:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
     956:	7845      	ldrb	r5, [r0, #1]
     958:	2001      	movs	r0, #1
     95a:	2640      	movs	r6, #64	; 0x40
     95c:	4005      	ands	r5, r0
     95e:	4020      	ands	r0, r4
     960:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     962:	4908      	ldr	r1, [pc, #32]	; (984 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     964:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     966:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     968:	01c0      	lsls	r0, r0, #7
     96a:	43b3      	bics	r3, r6
     96c:	432b      	orrs	r3, r5
     96e:	43a3      	bics	r3, r4
     970:	4303      	orrs	r3, r0
     972:	2003      	movs	r0, #3
     974:	4002      	ands	r2, r0
     976:	4804      	ldr	r0, [pc, #16]	; (988 <system_clock_source_osc8m_set_config+0x38>)
     978:	0212      	lsls	r2, r2, #8
     97a:	4003      	ands	r3, r0
     97c:	4313      	orrs	r3, r2
     97e:	620b      	str	r3, [r1, #32]
}
     980:	bd70      	pop	{r4, r5, r6, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	40000800 	.word	0x40000800
     988:	fffffcff 	.word	0xfffffcff

0000098c <system_clock_source_osc32k_set_config>:
{
     98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     98e:	4f18      	ldr	r7, [pc, #96]	; (9f0 <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
     990:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     992:	69bb      	ldr	r3, [r7, #24]
     994:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
     996:	7803      	ldrb	r3, [r0, #0]
     998:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
     99a:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
     99c:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
     99e:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     9a0:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     9a2:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
     9a4:	2201      	movs	r2, #1
     9a6:	4399      	bics	r1, r3
     9a8:	2308      	movs	r3, #8
     9aa:	7880      	ldrb	r0, [r0, #2]
     9ac:	4016      	ands	r6, r2
     9ae:	4010      	ands	r0, r2
     9b0:	0080      	lsls	r0, r0, #2
     9b2:	4308      	orrs	r0, r1
     9b4:	4398      	bics	r0, r3
     9b6:	00f6      	lsls	r6, r6, #3
     9b8:	4306      	orrs	r6, r0
     9ba:	4015      	ands	r5, r2
     9bc:	01a8      	lsls	r0, r5, #6
     9be:	0035      	movs	r5, r6
     9c0:	3338      	adds	r3, #56	; 0x38
     9c2:	439d      	bics	r5, r3
     9c4:	4305      	orrs	r5, r0
     9c6:	4014      	ands	r4, r2
     9c8:	01e3      	lsls	r3, r4, #7
     9ca:	2080      	movs	r0, #128	; 0x80
     9cc:	002c      	movs	r4, r5
     9ce:	4384      	bics	r4, r0
     9d0:	431c      	orrs	r4, r3
     9d2:	2307      	movs	r3, #7
     9d4:	9901      	ldr	r1, [sp, #4]
     9d6:	400b      	ands	r3, r1
     9d8:	4906      	ldr	r1, [pc, #24]	; (9f4 <system_clock_source_osc32k_set_config+0x68>)
     9da:	021b      	lsls	r3, r3, #8
     9dc:	4021      	ands	r1, r4
     9de:	4319      	orrs	r1, r3
     9e0:	9b00      	ldr	r3, [sp, #0]
     9e2:	401a      	ands	r2, r3
     9e4:	0313      	lsls	r3, r2, #12
     9e6:	4a04      	ldr	r2, [pc, #16]	; (9f8 <system_clock_source_osc32k_set_config+0x6c>)
     9e8:	400a      	ands	r2, r1
     9ea:	431a      	orrs	r2, r3
     9ec:	61ba      	str	r2, [r7, #24]
}
     9ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     9f0:	40000800 	.word	0x40000800
     9f4:	fffff8ff 	.word	0xfffff8ff
     9f8:	ffffefff 	.word	0xffffefff

000009fc <system_clock_source_dfll_set_config>:
{
     9fc:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     9fe:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     a00:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     a02:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     a04:	059b      	lsls	r3, r3, #22
     a06:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     a08:	0c12      	lsrs	r2, r2, #16
     a0a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
     a0c:	4b17      	ldr	r3, [pc, #92]	; (a6c <system_clock_source_dfll_set_config+0x70>)
     a0e:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
     a10:	79c1      	ldrb	r1, [r0, #7]
     a12:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
     a14:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
     a16:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
     a18:	8841      	ldrh	r1, [r0, #2]
     a1a:	4321      	orrs	r1, r4
     a1c:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     a1e:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     a20:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     a22:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
     a24:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
     a26:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     a28:	2c04      	cmp	r4, #4
     a2a:	d10d      	bne.n	a48 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     a2c:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     a2e:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     a30:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     a32:	430a      	orrs	r2, r1
     a34:	89c1      	ldrh	r1, [r0, #14]
     a36:	480e      	ldr	r0, [pc, #56]	; (a70 <system_clock_source_dfll_set_config+0x74>)
     a38:	0409      	lsls	r1, r1, #16
     a3a:	4001      	ands	r1, r0
     a3c:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     a3e:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     a40:	681a      	ldr	r2, [r3, #0]
     a42:	4314      	orrs	r4, r2
     a44:	601c      	str	r4, [r3, #0]
}
     a46:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     a48:	2c20      	cmp	r4, #32
     a4a:	d1fc      	bne.n	a46 <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     a4c:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     a4e:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     a50:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     a52:	430a      	orrs	r2, r1
     a54:	89c1      	ldrh	r1, [r0, #14]
     a56:	4806      	ldr	r0, [pc, #24]	; (a70 <system_clock_source_dfll_set_config+0x74>)
     a58:	0409      	lsls	r1, r1, #16
     a5a:	4001      	ands	r1, r0
     a5c:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
     a5e:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
     a60:	6819      	ldr	r1, [r3, #0]
     a62:	4a04      	ldr	r2, [pc, #16]	; (a74 <system_clock_source_dfll_set_config+0x78>)
     a64:	430a      	orrs	r2, r1
     a66:	601a      	str	r2, [r3, #0]
}
     a68:	e7ed      	b.n	a46 <system_clock_source_dfll_set_config+0x4a>
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	2000003c 	.word	0x2000003c
     a70:	03ff0000 	.word	0x03ff0000
     a74:	00000424 	.word	0x00000424

00000a78 <system_clock_source_enable>:
{
     a78:	b510      	push	{r4, lr}
	switch (clock_source) {
     a7a:	2808      	cmp	r0, #8
     a7c:	d806      	bhi.n	a8c <system_clock_source_enable+0x14>
     a7e:	f000 ff31 	bl	18e4 <__gnu_thumb1_case_uqi>
     a82:	0514      	.short	0x0514
     a84:	1a0e0c05 	.word	0x1a0e0c05
     a88:	2007      	.short	0x2007
     a8a:	23          	.byte	0x23
     a8b:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
     a8c:	2017      	movs	r0, #23
}
     a8e:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     a90:	2302      	movs	r3, #2
     a92:	4a10      	ldr	r2, [pc, #64]	; (ad4 <system_clock_source_enable+0x5c>)
     a94:	6a11      	ldr	r1, [r2, #32]
     a96:	430b      	orrs	r3, r1
     a98:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     a9a:	2000      	movs	r0, #0
     a9c:	e7f7      	b.n	a8e <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     a9e:	2302      	movs	r3, #2
     aa0:	4a0c      	ldr	r2, [pc, #48]	; (ad4 <system_clock_source_enable+0x5c>)
     aa2:	6991      	ldr	r1, [r2, #24]
     aa4:	430b      	orrs	r3, r1
     aa6:	6193      	str	r3, [r2, #24]
     aa8:	e7f7      	b.n	a9a <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     aaa:	2302      	movs	r3, #2
     aac:	4a09      	ldr	r2, [pc, #36]	; (ad4 <system_clock_source_enable+0x5c>)
     aae:	8a11      	ldrh	r1, [r2, #16]
     ab0:	430b      	orrs	r3, r1
     ab2:	8213      	strh	r3, [r2, #16]
     ab4:	e7f1      	b.n	a9a <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     ab6:	2302      	movs	r3, #2
     ab8:	4a06      	ldr	r2, [pc, #24]	; (ad4 <system_clock_source_enable+0x5c>)
     aba:	8a91      	ldrh	r1, [r2, #20]
     abc:	430b      	orrs	r3, r1
     abe:	8293      	strh	r3, [r2, #20]
     ac0:	e7eb      	b.n	a9a <system_clock_source_enable+0x22>
     ac2:	4b05      	ldr	r3, [pc, #20]	; (ad8 <system_clock_source_enable+0x60>)
     ac4:	4798      	blx	r3
     ac6:	e7e2      	b.n	a8e <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     ac8:	2302      	movs	r3, #2
     aca:	4a04      	ldr	r2, [pc, #16]	; (adc <system_clock_source_enable+0x64>)
     acc:	7811      	ldrb	r1, [r2, #0]
     ace:	430b      	orrs	r3, r1
     ad0:	7013      	strb	r3, [r2, #0]
     ad2:	e7e2      	b.n	a9a <system_clock_source_enable+0x22>
     ad4:	40000800 	.word	0x40000800
     ad8:	00000889 	.word	0x00000889
     adc:	40000844 	.word	0x40000844

00000ae0 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ae0:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ae2:	221e      	movs	r2, #30
{
     ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ae6:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ae8:	4e48      	ldr	r6, [pc, #288]	; (c0c <system_clock_init+0x12c>)
     aea:	00db      	lsls	r3, r3, #3
     aec:	4948      	ldr	r1, [pc, #288]	; (c10 <system_clock_init+0x130>)
     aee:	60b3      	str	r3, [r6, #8]
     af0:	684b      	ldr	r3, [r1, #4]
{
     af2:	b08d      	sub	sp, #52	; 0x34
     af4:	4393      	bics	r3, r2
     af6:	3a1c      	subs	r2, #28
     af8:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     afa:	ac07      	add	r4, sp, #28
     afc:	604b      	str	r3, [r1, #4]
     afe:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     b00:	b2e8      	uxtb	r0, r5
     b02:	0021      	movs	r1, r4
     b04:	4b43      	ldr	r3, [pc, #268]	; (c14 <system_clock_init+0x134>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     b06:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     b08:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     b0a:	2d18      	cmp	r5, #24
     b0c:	d1f8      	bne.n	b00 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     b0e:	4f42      	ldr	r7, [pc, #264]	; (c18 <system_clock_init+0x138>)
	SYSCTRL->OSC32K.bit.CALIB =
     b10:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     b12:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
     b14:	4941      	ldr	r1, [pc, #260]	; (c1c <system_clock_init+0x13c>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     b16:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     b18:	0e5b      	lsrs	r3, r3, #25
     b1a:	400a      	ands	r2, r1
     b1c:	041b      	lsls	r3, r3, #16
     b1e:	4313      	orrs	r3, r2
     b20:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
     b22:	2301      	movs	r3, #1
	config->run_in_standby      = false;
     b24:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
     b26:	a802      	add	r0, sp, #8
     b28:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     b2a:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
     b2c:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     b2e:	3306      	adds	r3, #6
     b30:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     b32:	4b3b      	ldr	r3, [pc, #236]	; (c20 <system_clock_init+0x140>)
	config->run_in_standby      = false;
     b34:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
     b36:	7145      	strb	r5, [r0, #5]
     b38:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     b3a:	4b3a      	ldr	r3, [pc, #232]	; (c24 <system_clock_init+0x144>)
     b3c:	2004      	movs	r0, #4
     b3e:	4798      	blx	r3
	config->fine_value      = 0xff / 4; /* Midpoint */
     b40:	233f      	movs	r3, #63	; 0x3f
     b42:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     b44:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     b46:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     b48:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     b4a:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     b4c:	71e5      	strb	r5, [r4, #7]
     b4e:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
     b50:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     b52:	683b      	ldr	r3, [r7, #0]
     b54:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     b56:	2b3f      	cmp	r3, #63	; 0x3f
     b58:	d100      	bne.n	b5c <system_clock_init+0x7c>
		coarse = 0x1f;
     b5a:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
     b5c:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     b5e:	23b7      	movs	r3, #183	; 0xb7
     b60:	00db      	lsls	r3, r3, #3
     b62:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     b64:	2307      	movs	r3, #7
     b66:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     b68:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
     b6a:	2500      	movs	r5, #0
	config->on_demand       = true;
     b6c:	2701      	movs	r7, #1
     b6e:	81e3      	strh	r3, [r4, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     b70:	0020      	movs	r0, r4
     b72:	4b2d      	ldr	r3, [pc, #180]	; (c28 <system_clock_init+0x148>)
     b74:	4798      	blx	r3
	config->run_in_standby  = false;
     b76:	a801      	add	r0, sp, #4

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     b78:	4b2c      	ldr	r3, [pc, #176]	; (c2c <system_clock_init+0x14c>)
     b7a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     b7c:	7087      	strb	r7, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     b7e:	7005      	strb	r5, [r0, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
     b80:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     b82:	4b28      	ldr	r3, [pc, #160]	; (c24 <system_clock_init+0x144>)
     b84:	2006      	movs	r0, #6
     b86:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     b88:	4b29      	ldr	r3, [pc, #164]	; (c30 <system_clock_init+0x150>)
     b8a:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     b8c:	2304      	movs	r3, #4
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     b8e:	ac04      	add	r4, sp, #16
     b90:	0021      	movs	r1, r4
     b92:	7023      	strb	r3, [r4, #0]
     b94:	0038      	movs	r0, r7
     b96:	4b27      	ldr	r3, [pc, #156]	; (c34 <system_clock_init+0x154>)
     b98:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     b9a:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     b9c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     b9e:	7265      	strb	r5, [r4, #9]
     ba0:	4798      	blx	r3
     ba2:	0038      	movs	r0, r7
     ba4:	4b24      	ldr	r3, [pc, #144]	; (c38 <system_clock_init+0x158>)
     ba6:	4798      	blx	r3
     ba8:	2307      	movs	r3, #7
     baa:	0021      	movs	r1, r4
     bac:	7023      	strb	r3, [r4, #0]
     bae:	2003      	movs	r0, #3
     bb0:	4b20      	ldr	r3, [pc, #128]	; (c34 <system_clock_init+0x154>)
	config->division_factor    = 1;
     bb2:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
     bb4:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     bb6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     bb8:	7265      	strb	r5, [r4, #9]
     bba:	4798      	blx	r3
     bbc:	2003      	movs	r0, #3
     bbe:	4b1e      	ldr	r3, [pc, #120]	; (c38 <system_clock_init+0x158>)
     bc0:	4798      	blx	r3
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     bc2:	0021      	movs	r1, r4
     bc4:	0028      	movs	r0, r5
     bc6:	4b13      	ldr	r3, [pc, #76]	; (c14 <system_clock_init+0x134>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     bc8:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     bca:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     bcc:	0028      	movs	r0, r5
     bce:	4b1b      	ldr	r3, [pc, #108]	; (c3c <system_clock_init+0x15c>)
     bd0:	4798      	blx	r3
     bd2:	4b1b      	ldr	r3, [pc, #108]	; (c40 <system_clock_init+0x160>)
     bd4:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     bd6:	22d0      	movs	r2, #208	; 0xd0
     bd8:	68f3      	ldr	r3, [r6, #12]
     bda:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     bdc:	2bd0      	cmp	r3, #208	; 0xd0
     bde:	d1fb      	bne.n	bd8 <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
     be0:	2500      	movs	r5, #0
     be2:	4b18      	ldr	r3, [pc, #96]	; (c44 <system_clock_init+0x164>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     be4:	0021      	movs	r1, r4
     be6:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     be8:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     bea:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     bec:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
     bee:	2301      	movs	r3, #1
     bf0:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     bf2:	3305      	adds	r3, #5
     bf4:	7023      	strb	r3, [r4, #0]
     bf6:	0028      	movs	r0, r5
     bf8:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_clock_init+0x154>)
	config->high_when_disabled = false;
     bfa:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     bfc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     bfe:	7265      	strb	r5, [r4, #9]
     c00:	4798      	blx	r3
     c02:	0028      	movs	r0, r5
     c04:	4b0c      	ldr	r3, [pc, #48]	; (c38 <system_clock_init+0x158>)
     c06:	4798      	blx	r3
#endif
}
     c08:	b00d      	add	sp, #52	; 0x34
     c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0c:	40000800 	.word	0x40000800
     c10:	41004000 	.word	0x41004000
     c14:	00000e69 	.word	0x00000e69
     c18:	00806024 	.word	0x00806024
     c1c:	ff80ffff 	.word	0xff80ffff
     c20:	0000098d 	.word	0x0000098d
     c24:	00000a79 	.word	0x00000a79
     c28:	000009fd 	.word	0x000009fd
     c2c:	00000951 	.word	0x00000951
     c30:	00000c55 	.word	0x00000c55
     c34:	00000c75 	.word	0x00000c75
     c38:	00000d19 	.word	0x00000d19
     c3c:	00000de1 	.word	0x00000de1
     c40:	00000889 	.word	0x00000889
     c44:	40000400 	.word	0x40000400

00000c48 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c48:	4b01      	ldr	r3, [pc, #4]	; (c50 <system_gclk_is_syncing+0x8>)
     c4a:	7858      	ldrb	r0, [r3, #1]
     c4c:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
     c4e:	4770      	bx	lr
     c50:	40000c00 	.word	0x40000c00

00000c54 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     c54:	2308      	movs	r3, #8
     c56:	4a05      	ldr	r2, [pc, #20]	; (c6c <system_gclk_init+0x18>)
     c58:	6991      	ldr	r1, [r2, #24]
     c5a:	430b      	orrs	r3, r1
     c5c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     c5e:	2301      	movs	r3, #1
     c60:	4a03      	ldr	r2, [pc, #12]	; (c70 <system_gclk_init+0x1c>)
     c62:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     c64:	7811      	ldrb	r1, [r2, #0]
     c66:	4219      	tst	r1, r3
     c68:	d1fc      	bne.n	c64 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     c6a:	4770      	bx	lr
     c6c:	40000400 	.word	0x40000400
     c70:	40000c00 	.word	0x40000c00

00000c74 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     c76:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     c78:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     c7a:	0224      	lsls	r4, r4, #8
{
     c7c:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     c7e:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     c80:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
     c82:	2b00      	cmp	r3, #0
     c84:	d002      	beq.n	c8c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     c86:	2380      	movs	r3, #128	; 0x80
     c88:	02db      	lsls	r3, r3, #11
     c8a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     c8c:	7a4b      	ldrb	r3, [r1, #9]
     c8e:	2b00      	cmp	r3, #0
     c90:	d002      	beq.n	c98 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     c92:	2380      	movs	r3, #128	; 0x80
     c94:	031b      	lsls	r3, r3, #12
     c96:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     c98:	684b      	ldr	r3, [r1, #4]
     c9a:	2b01      	cmp	r3, #1
     c9c:	d912      	bls.n	cc4 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     c9e:	1e5d      	subs	r5, r3, #1
     ca0:	401d      	ands	r5, r3
     ca2:	2202      	movs	r2, #2
     ca4:	2d00      	cmp	r5, #0
     ca6:	d006      	beq.n	cb6 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     ca8:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     caa:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
     cac:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     cae:	029b      	lsls	r3, r3, #10
     cb0:	e007      	b.n	cc2 <system_gclk_gen_set_config+0x4e>
				div2_count++;
     cb2:	3501      	adds	r5, #1
						mask <<= 1) {
     cb4:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     cb6:	429a      	cmp	r2, r3
     cb8:	d3fb      	bcc.n	cb2 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     cba:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     cbc:	022d      	lsls	r5, r5, #8
     cbe:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     cc0:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     cc2:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     cc4:	7a0b      	ldrb	r3, [r1, #8]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d002      	beq.n	cd0 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     cca:	2380      	movs	r3, #128	; 0x80
     ccc:	039b      	lsls	r3, r3, #14
     cce:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
     cd0:	4f0c      	ldr	r7, [pc, #48]	; (d04 <system_gclk_gen_set_config+0x90>)
     cd2:	47b8      	blx	r7
     cd4:	2800      	cmp	r0, #0
     cd6:	d1fb      	bne.n	cd0 <system_gclk_gen_set_config+0x5c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     cd8:	4b0b      	ldr	r3, [pc, #44]	; (d08 <system_gclk_gen_set_config+0x94>)
     cda:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     cdc:	4b0b      	ldr	r3, [pc, #44]	; (d0c <system_gclk_gen_set_config+0x98>)
     cde:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     ce0:	47b8      	blx	r7
     ce2:	2800      	cmp	r0, #0
     ce4:	d1fc      	bne.n	ce0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     ce6:	4b0a      	ldr	r3, [pc, #40]	; (d10 <system_gclk_gen_set_config+0x9c>)
     ce8:	609d      	str	r5, [r3, #8]
     cea:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
     cec:	47b8      	blx	r7
     cee:	2800      	cmp	r0, #0
     cf0:	d1fc      	bne.n	cec <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     cf2:	2280      	movs	r2, #128	; 0x80
     cf4:	686b      	ldr	r3, [r5, #4]
     cf6:	0252      	lsls	r2, r2, #9
     cf8:	4013      	ands	r3, r2
     cfa:	431c      	orrs	r4, r3
     cfc:	606c      	str	r4, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     cfe:	4b05      	ldr	r3, [pc, #20]	; (d14 <system_gclk_gen_set_config+0xa0>)
     d00:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d04:	00000c49 	.word	0x00000c49
     d08:	000000ed 	.word	0x000000ed
     d0c:	40000c08 	.word	0x40000c08
     d10:	40000c00 	.word	0x40000c00
     d14:	00000121 	.word	0x00000121

00000d18 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     d18:	b570      	push	{r4, r5, r6, lr}
     d1a:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
     d1c:	4c09      	ldr	r4, [pc, #36]	; (d44 <system_gclk_gen_enable+0x2c>)
     d1e:	47a0      	blx	r4
     d20:	2800      	cmp	r0, #0
     d22:	d1fb      	bne.n	d1c <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
     d24:	4b08      	ldr	r3, [pc, #32]	; (d48 <system_gclk_gen_enable+0x30>)
     d26:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     d28:	4b08      	ldr	r3, [pc, #32]	; (d4c <system_gclk_gen_enable+0x34>)
     d2a:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
     d2c:	47a0      	blx	r4
     d2e:	2800      	cmp	r0, #0
     d30:	d1fc      	bne.n	d2c <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     d32:	2380      	movs	r3, #128	; 0x80
     d34:	4a06      	ldr	r2, [pc, #24]	; (d50 <system_gclk_gen_enable+0x38>)
     d36:	025b      	lsls	r3, r3, #9
     d38:	6851      	ldr	r1, [r2, #4]
     d3a:	430b      	orrs	r3, r1
     d3c:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     d3e:	4b05      	ldr	r3, [pc, #20]	; (d54 <system_gclk_gen_enable+0x3c>)
     d40:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d42:	bd70      	pop	{r4, r5, r6, pc}
     d44:	00000c49 	.word	0x00000c49
     d48:	000000ed 	.word	0x000000ed
     d4c:	40000c04 	.word	0x40000c04
     d50:	40000c00 	.word	0x40000c00
     d54:	00000121 	.word	0x00000121

00000d58 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     d5a:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
     d5c:	4e18      	ldr	r6, [pc, #96]	; (dc0 <system_gclk_gen_get_hz+0x68>)
     d5e:	47b0      	blx	r6
     d60:	2800      	cmp	r0, #0
     d62:	d1fb      	bne.n	d5c <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
     d64:	4b17      	ldr	r3, [pc, #92]	; (dc4 <system_gclk_gen_get_hz+0x6c>)
     d66:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     d68:	4b17      	ldr	r3, [pc, #92]	; (dc8 <system_gclk_gen_get_hz+0x70>)
     d6a:	701f      	strb	r7, [r3, #0]
     d6c:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
     d6e:	47b0      	blx	r6
     d70:	2800      	cmp	r0, #0
     d72:	d1fc      	bne.n	d6e <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     d74:	4d15      	ldr	r5, [pc, #84]	; (dcc <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
     d76:	4b16      	ldr	r3, [pc, #88]	; (dd0 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     d78:	6868      	ldr	r0, [r5, #4]
     d7a:	04c0      	lsls	r0, r0, #19
     d7c:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     d7e:	4798      	blx	r3
     d80:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     d82:	9b01      	ldr	r3, [sp, #4]
     d84:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     d86:	686b      	ldr	r3, [r5, #4]
     d88:	02db      	lsls	r3, r3, #11
     d8a:	0fdb      	lsrs	r3, r3, #31
     d8c:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     d8e:	4b11      	ldr	r3, [pc, #68]	; (dd4 <system_gclk_gen_get_hz+0x7c>)
     d90:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
     d92:	47b0      	blx	r6
     d94:	2800      	cmp	r0, #0
     d96:	d1fc      	bne.n	d92 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     d98:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
     d9a:	4b0f      	ldr	r3, [pc, #60]	; (dd8 <system_gclk_gen_get_hz+0x80>)
     d9c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     d9e:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
     da0:	022d      	lsls	r5, r5, #8
     da2:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
     da4:	2b00      	cmp	r3, #0
     da6:	d108      	bne.n	dba <system_gclk_gen_get_hz+0x62>
     da8:	2d01      	cmp	r5, #1
     daa:	d904      	bls.n	db6 <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
     dac:	0020      	movs	r0, r4
     dae:	0029      	movs	r1, r5
     db0:	4b0a      	ldr	r3, [pc, #40]	; (ddc <system_gclk_gen_get_hz+0x84>)
     db2:	4798      	blx	r3
     db4:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
     db6:	0020      	movs	r0, r4
     db8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
     dba:	3501      	adds	r5, #1
     dbc:	40ec      	lsrs	r4, r5
	return gen_input_hz;
     dbe:	e7fa      	b.n	db6 <system_gclk_gen_get_hz+0x5e>
     dc0:	00000c49 	.word	0x00000c49
     dc4:	000000ed 	.word	0x000000ed
     dc8:	40000c04 	.word	0x40000c04
     dcc:	40000c00 	.word	0x40000c00
     dd0:	000008c1 	.word	0x000008c1
     dd4:	40000c08 	.word	0x40000c08
     dd8:	00000121 	.word	0x00000121
     ddc:	000018f9 	.word	0x000018f9

00000de0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     de0:	b510      	push	{r4, lr}
     de2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     de4:	4b06      	ldr	r3, [pc, #24]	; (e00 <system_gclk_chan_enable+0x20>)
     de6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     de8:	4b06      	ldr	r3, [pc, #24]	; (e04 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     dea:	4a07      	ldr	r2, [pc, #28]	; (e08 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     dec:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	8851      	ldrh	r1, [r2, #2]
     df2:	01db      	lsls	r3, r3, #7
     df4:	430b      	orrs	r3, r1
     df6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     df8:	4b04      	ldr	r3, [pc, #16]	; (e0c <system_gclk_chan_enable+0x2c>)
     dfa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     dfc:	bd10      	pop	{r4, pc}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	000000ed 	.word	0x000000ed
     e04:	40000c02 	.word	0x40000c02
     e08:	40000c00 	.word	0x40000c00
     e0c:	00000121 	.word	0x00000121

00000e10 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     e10:	b510      	push	{r4, lr}
     e12:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     e14:	4b0e      	ldr	r3, [pc, #56]	; (e50 <system_gclk_chan_disable+0x40>)
     e16:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     e18:	4b0e      	ldr	r3, [pc, #56]	; (e54 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
     e1a:	4a0f      	ldr	r2, [pc, #60]	; (e58 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     e1c:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     e1e:	4b0f      	ldr	r3, [pc, #60]	; (e5c <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     e20:	4c0f      	ldr	r4, [pc, #60]	; (e60 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     e22:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
     e24:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     e26:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
     e28:	4011      	ands	r1, r2
     e2a:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     e2c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     e2e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     e30:	4021      	ands	r1, r4
     e32:	8059      	strh	r1, [r3, #2]
     e34:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     e36:	2280      	movs	r2, #128	; 0x80
     e38:	01d2      	lsls	r2, r2, #7
     e3a:	885c      	ldrh	r4, [r3, #2]
     e3c:	4214      	tst	r4, r2
     e3e:	d1fc      	bne.n	e3a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     e40:	885a      	ldrh	r2, [r3, #2]
     e42:	0200      	lsls	r0, r0, #8
     e44:	400a      	ands	r2, r1
     e46:	4302      	orrs	r2, r0
     e48:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
     e4a:	4b06      	ldr	r3, [pc, #24]	; (e64 <system_gclk_chan_disable+0x54>)
     e4c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e4e:	bd10      	pop	{r4, pc}
     e50:	000000ed 	.word	0x000000ed
     e54:	40000c02 	.word	0x40000c02
     e58:	fffff0ff 	.word	0xfffff0ff
     e5c:	40000c00 	.word	0x40000c00
     e60:	ffffbfff 	.word	0xffffbfff
     e64:	00000121 	.word	0x00000121

00000e68 <system_gclk_chan_set_config>:
{
     e68:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     e6a:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
     e6c:	4b03      	ldr	r3, [pc, #12]	; (e7c <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     e6e:	0224      	lsls	r4, r4, #8
     e70:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     e72:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     e74:	4b02      	ldr	r3, [pc, #8]	; (e80 <system_gclk_chan_set_config+0x18>)
     e76:	b2a4      	uxth	r4, r4
     e78:	805c      	strh	r4, [r3, #2]
}
     e7a:	bd10      	pop	{r4, pc}
     e7c:	00000e11 	.word	0x00000e11
     e80:	40000c00 	.word	0x40000c00

00000e84 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     e84:	b510      	push	{r4, lr}
     e86:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     e88:	4b06      	ldr	r3, [pc, #24]	; (ea4 <system_gclk_chan_get_hz+0x20>)
     e8a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     e8c:	4b06      	ldr	r3, [pc, #24]	; (ea8 <system_gclk_chan_get_hz+0x24>)
     e8e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     e90:	4b06      	ldr	r3, [pc, #24]	; (eac <system_gclk_chan_get_hz+0x28>)
     e92:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
     e94:	4b06      	ldr	r3, [pc, #24]	; (eb0 <system_gclk_chan_get_hz+0x2c>)
     e96:	0524      	lsls	r4, r4, #20
     e98:	0f24      	lsrs	r4, r4, #28
     e9a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     e9c:	0020      	movs	r0, r4
     e9e:	4b05      	ldr	r3, [pc, #20]	; (eb4 <system_gclk_chan_get_hz+0x30>)
     ea0:	4798      	blx	r3
}
     ea2:	bd10      	pop	{r4, pc}
     ea4:	000000ed 	.word	0x000000ed
     ea8:	40000c02 	.word	0x40000c02
     eac:	40000c00 	.word	0x40000c00
     eb0:	00000121 	.word	0x00000121
     eb4:	00000d59 	.word	0x00000d59

00000eb8 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     eb8:	78d3      	ldrb	r3, [r2, #3]
{
     eba:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
     ebc:	2b00      	cmp	r3, #0
     ebe:	d135      	bne.n	f2c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     ec0:	7814      	ldrb	r4, [r2, #0]
     ec2:	2c80      	cmp	r4, #128	; 0x80
     ec4:	d003      	beq.n	ece <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     ec6:	2380      	movs	r3, #128	; 0x80
     ec8:	0624      	lsls	r4, r4, #24
     eca:	025b      	lsls	r3, r3, #9
     ecc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     ece:	2502      	movs	r5, #2
     ed0:	7854      	ldrb	r4, [r2, #1]
     ed2:	43ac      	bics	r4, r5
     ed4:	d106      	bne.n	ee4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     ed6:	7894      	ldrb	r4, [r2, #2]
     ed8:	2c00      	cmp	r4, #0
     eda:	d124      	bne.n	f26 <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
     edc:	2480      	movs	r4, #128	; 0x80
     ede:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     ee0:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     ee2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     ee4:	7854      	ldrb	r4, [r2, #1]
     ee6:	3c01      	subs	r4, #1
     ee8:	2c01      	cmp	r4, #1
     eea:	d801      	bhi.n	ef0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     eec:	4c12      	ldr	r4, [pc, #72]	; (f38 <_system_pinmux_config+0x80>)
     eee:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     ef0:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     ef2:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     ef4:	05e4      	lsls	r4, r4, #23
     ef6:	432c      	orrs	r4, r5
     ef8:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     efa:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     efc:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
     efe:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     f00:	0624      	lsls	r4, r4, #24
     f02:	432c      	orrs	r4, r5
     f04:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f06:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     f08:	78d4      	ldrb	r4, [r2, #3]
     f0a:	2c00      	cmp	r4, #0
     f0c:	d10a      	bne.n	f24 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     f0e:	035b      	lsls	r3, r3, #13
     f10:	d503      	bpl.n	f1a <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     f12:	7893      	ldrb	r3, [r2, #2]
     f14:	2b01      	cmp	r3, #1
     f16:	d10c      	bne.n	f32 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
     f18:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     f1a:	7853      	ldrb	r3, [r2, #1]
     f1c:	3b01      	subs	r3, #1
     f1e:	2b01      	cmp	r3, #1
     f20:	d800      	bhi.n	f24 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     f22:	6081      	str	r1, [r0, #8]
		}
	}
}
     f24:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     f26:	24c0      	movs	r4, #192	; 0xc0
     f28:	02e4      	lsls	r4, r4, #11
     f2a:	e7d9      	b.n	ee0 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
     f2c:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
     f2e:	2300      	movs	r3, #0
     f30:	e7de      	b.n	ef0 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
     f32:	6141      	str	r1, [r0, #20]
     f34:	e7f1      	b.n	f1a <_system_pinmux_config+0x62>
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	fffbffff 	.word	0xfffbffff

00000f3c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     f3c:	b510      	push	{r4, lr}
     f3e:	0003      	movs	r3, r0
     f40:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
     f42:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f44:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     f46:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
     f48:	4281      	cmp	r1, r0
     f4a:	d102      	bne.n	f52 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     f4c:	4904      	ldr	r1, [pc, #16]	; (f60 <system_pinmux_pin_set_config+0x24>)
     f4e:	01e0      	lsls	r0, r4, #7
     f50:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     f52:	211f      	movs	r1, #31
     f54:	400b      	ands	r3, r1
     f56:	391e      	subs	r1, #30
     f58:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
     f5a:	4b02      	ldr	r3, [pc, #8]	; (f64 <system_pinmux_pin_set_config+0x28>)
     f5c:	4798      	blx	r3
}
     f5e:	bd10      	pop	{r4, pc}
     f60:	41004400 	.word	0x41004400
     f64:	00000eb9 	.word	0x00000eb9

00000f68 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     f68:	4770      	bx	lr
	...

00000f6c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     f6c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     f6e:	4b05      	ldr	r3, [pc, #20]	; (f84 <system_init+0x18>)
     f70:	4798      	blx	r3
	/* Initialize board hardware */
	system_board_init();
     f72:	4b05      	ldr	r3, [pc, #20]	; (f88 <system_init+0x1c>)
     f74:	4798      	blx	r3
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
     f76:	4b05      	ldr	r3, [pc, #20]	; (f8c <system_init+0x20>)
     f78:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     f7a:	4b05      	ldr	r3, [pc, #20]	; (f90 <system_init+0x24>)
     f7c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     f7e:	4b05      	ldr	r3, [pc, #20]	; (f94 <system_init+0x28>)
     f80:	4798      	blx	r3
}
     f82:	bd10      	pop	{r4, pc}
     f84:	00000ae1 	.word	0x00000ae1
     f88:	00000151 	.word	0x00000151
     f8c:	00000f69 	.word	0x00000f69
     f90:	00000f69 	.word	0x00000f69
     f94:	00000f69 	.word	0x00000f69

00000f98 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     f9a:	2500      	movs	r5, #0
	struct tcc_module *module =
     f9c:	4b0b      	ldr	r3, [pc, #44]	; (fcc <_tcc_interrupt_handler+0x34>)
     f9e:	0080      	lsls	r0, r0, #2
     fa0:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     fa2:	6823      	ldr	r3, [r4, #0]
     fa4:	6b62      	ldr	r2, [r4, #52]	; 0x34
     fa6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     fa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     faa:	4013      	ands	r3, r2
     fac:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     fae:	4b08      	ldr	r3, [pc, #32]	; (fd0 <_tcc_interrupt_handler+0x38>)
     fb0:	58ef      	ldr	r7, [r5, r3]
     fb2:	4237      	tst	r7, r6
     fb4:	d005      	beq.n	fc2 <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     fb6:	1963      	adds	r3, r4, r5
     fb8:	685b      	ldr	r3, [r3, #4]
     fba:	0020      	movs	r0, r4
     fbc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     fbe:	6823      	ldr	r3, [r4, #0]
     fc0:	62df      	str	r7, [r3, #44]	; 0x2c
     fc2:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     fc4:	2d30      	cmp	r5, #48	; 0x30
     fc6:	d1f2      	bne.n	fae <_tcc_interrupt_handler+0x16>
		}
	}
}
     fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	20000084 	.word	0x20000084
     fd0:	0000332c 	.word	0x0000332c

00000fd4 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     fd4:	b510      	push	{r4, lr}
     fd6:	2000      	movs	r0, #0
     fd8:	4b01      	ldr	r3, [pc, #4]	; (fe0 <TCC0_Handler+0xc>)
     fda:	4798      	blx	r3
     fdc:	bd10      	pop	{r4, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	00000f99 	.word	0x00000f99

00000fe4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     fe4:	1c93      	adds	r3, r2, #2
     fe6:	009b      	lsls	r3, r3, #2
     fe8:	5019      	str	r1, [r3, r0]
     fea:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     fec:	2a02      	cmp	r2, #2
     fee:	d104      	bne.n	ffa <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     ff0:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     ff2:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     ff4:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     ff6:	2000      	movs	r0, #0
     ff8:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     ffa:	2a03      	cmp	r2, #3
     ffc:	d101      	bne.n	1002 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     ffe:	321d      	adds	r2, #29
    1000:	e7f7      	b.n	ff2 <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    1002:	2101      	movs	r1, #1
    1004:	4091      	lsls	r1, r2
    1006:	430b      	orrs	r3, r1
    1008:	e7f4      	b.n	ff4 <tc_register_callback+0x10>
	...

0000100c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    100c:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    100e:	2601      	movs	r6, #1
	struct tc_module *module
    1010:	4b14      	ldr	r3, [pc, #80]	; (1064 <_tc_interrupt_handler+0x58>)
    1012:	0080      	lsls	r0, r0, #2
    1014:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1016:	6823      	ldr	r3, [r4, #0]
    1018:	7e22      	ldrb	r2, [r4, #24]
    101a:	7e65      	ldrb	r5, [r4, #25]
    101c:	7b9b      	ldrb	r3, [r3, #14]
    101e:	4015      	ands	r5, r2
    1020:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1022:	4235      	tst	r5, r6
    1024:	d004      	beq.n	1030 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1026:	68a3      	ldr	r3, [r4, #8]
    1028:	0020      	movs	r0, r4
    102a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    102c:	6823      	ldr	r3, [r4, #0]
    102e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1030:	2602      	movs	r6, #2
    1032:	4235      	tst	r5, r6
    1034:	d004      	beq.n	1040 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1036:	68e3      	ldr	r3, [r4, #12]
    1038:	0020      	movs	r0, r4
    103a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    103c:	6823      	ldr	r3, [r4, #0]
    103e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1040:	2610      	movs	r6, #16
    1042:	4235      	tst	r5, r6
    1044:	d004      	beq.n	1050 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1046:	6923      	ldr	r3, [r4, #16]
    1048:	0020      	movs	r0, r4
    104a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    104c:	6823      	ldr	r3, [r4, #0]
    104e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1050:	2620      	movs	r6, #32
    1052:	4235      	tst	r5, r6
    1054:	d004      	beq.n	1060 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1056:	6963      	ldr	r3, [r4, #20]
    1058:	0020      	movs	r0, r4
    105a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    105c:	6823      	ldr	r3, [r4, #0]
    105e:	739e      	strb	r6, [r3, #14]
	}
}
    1060:	bd70      	pop	{r4, r5, r6, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	20000088 	.word	0x20000088

00001068 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1068:	b510      	push	{r4, lr}
    106a:	2000      	movs	r0, #0
    106c:	4b01      	ldr	r3, [pc, #4]	; (1074 <TC1_Handler+0xc>)
    106e:	4798      	blx	r3
    1070:	bd10      	pop	{r4, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	0000100d 	.word	0x0000100d

00001078 <TC2_Handler>:
    1078:	b510      	push	{r4, lr}
    107a:	2001      	movs	r0, #1
    107c:	4b01      	ldr	r3, [pc, #4]	; (1084 <TC2_Handler+0xc>)
    107e:	4798      	blx	r3
    1080:	bd10      	pop	{r4, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	0000100d 	.word	0x0000100d

00001088 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1088:	4b06      	ldr	r3, [pc, #24]	; (10a4 <_tc_get_inst_index+0x1c>)
    108a:	4298      	cmp	r0, r3
    108c:	d007      	beq.n	109e <_tc_get_inst_index+0x16>
    108e:	4a06      	ldr	r2, [pc, #24]	; (10a8 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1090:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1092:	4290      	cmp	r0, r2
    1094:	d101      	bne.n	109a <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1096:	3301      	adds	r3, #1
			return i;
    1098:	b2db      	uxtb	r3, r3
}
    109a:	0018      	movs	r0, r3
    109c:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    109e:	2300      	movs	r3, #0
    10a0:	e7fa      	b.n	1098 <_tc_get_inst_index+0x10>
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	42001800 	.word	0x42001800
    10a8:	42001c00 	.word	0x42001c00

000010ac <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    10ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    10ae:	4b87      	ldr	r3, [pc, #540]	; (12cc <tc_init+0x220>)
{
    10b0:	0005      	movs	r5, r0
    10b2:	b085      	sub	sp, #20
	uint8_t instance = _tc_get_inst_index(hw);
    10b4:	0008      	movs	r0, r1
{
    10b6:	0014      	movs	r4, r2
    10b8:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    10ba:	4798      	blx	r3

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    10bc:	466a      	mov	r2, sp
    10be:	2312      	movs	r3, #18
    10c0:	7113      	strb	r3, [r2, #4]
    10c2:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    10c4:	332e      	adds	r3, #46	; 0x2e
    10c6:	8113      	strh	r3, [r2, #8]
    10c8:	3340      	adds	r3, #64	; 0x40
    10ca:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    10cc:	2300      	movs	r3, #0
    10ce:	60ab      	str	r3, [r5, #8]
    10d0:	60eb      	str	r3, [r5, #12]
    10d2:	612b      	str	r3, [r5, #16]
    10d4:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    10d6:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    10d8:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    10da:	4b7d      	ldr	r3, [pc, #500]	; (12d0 <tc_init+0x224>)
    10dc:	0082      	lsls	r2, r0, #2
    10de:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    10e0:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    10e2:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    10e4:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    10e6:	2b08      	cmp	r3, #8
    10e8:	d103      	bne.n	10f2 <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    10ea:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    10ec:	07fa      	lsls	r2, r7, #31
    10ee:	d500      	bpl.n	10f2 <tc_init+0x46>
    10f0:	e0d5      	b.n	129e <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    10f2:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    10f4:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    10f6:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    10f8:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    10fa:	4213      	tst	r3, r2
    10fc:	d000      	beq.n	1100 <tc_init+0x54>
    10fe:	e0ce      	b.n	129e <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1100:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1102:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1104:	06db      	lsls	r3, r3, #27
    1106:	d500      	bpl.n	110a <tc_init+0x5e>
    1108:	e0c9      	b.n	129e <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    110a:	2102      	movs	r1, #2
    110c:	8833      	ldrh	r3, [r6, #0]
    110e:	400b      	ands	r3, r1
    1110:	d000      	beq.n	1114 <tc_init+0x68>
    1112:	e0c4      	b.n	129e <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1114:	7c21      	ldrb	r1, [r4, #16]
    1116:	2900      	cmp	r1, #0
    1118:	d008      	beq.n	112c <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    111a:	a903      	add	r1, sp, #12
	config->powersave    = false;
    111c:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    111e:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1120:	7d20      	ldrb	r0, [r4, #20]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1122:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(
    1124:	4b6b      	ldr	r3, [pc, #428]	; (12d4 <tc_init+0x228>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1126:	708a      	strb	r2, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1128:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    112a:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    112c:	7f23      	ldrb	r3, [r4, #28]
    112e:	2b00      	cmp	r3, #0
    1130:	d00e      	beq.n	1150 <tc_init+0xa4>
	config->powersave    = false;
    1132:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1134:	2301      	movs	r3, #1
    1136:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1138:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    113a:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    113c:	708b      	strb	r3, [r1, #2]
    113e:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1140:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1142:	331f      	adds	r3, #31
    1144:	18e3      	adds	r3, r4, r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1146:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    1148:	7818      	ldrb	r0, [r3, #0]
    114a:	4b62      	ldr	r3, [pc, #392]	; (12d4 <tc_init+0x228>)
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    114c:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    114e:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1150:	007a      	lsls	r2, r7, #1
    1152:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1154:	4668      	mov	r0, sp
    1156:	2208      	movs	r2, #8
    1158:	1880      	adds	r0, r0, r2
    115a:	4662      	mov	r2, ip
			PM->APBCMASK.reg |= mask;
    115c:	4b5e      	ldr	r3, [pc, #376]	; (12d8 <tc_init+0x22c>)
    115e:	5a82      	ldrh	r2, [r0, r2]
    1160:	6a19      	ldr	r1, [r3, #32]
    1162:	430a      	orrs	r2, r1
    1164:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1166:	78a2      	ldrb	r2, [r4, #2]
    1168:	2a08      	cmp	r2, #8
    116a:	d10a      	bne.n	1182 <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    116c:	1c79      	adds	r1, r7, #1
    116e:	004a      	lsls	r2, r1, #1
    1170:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1172:	2108      	movs	r1, #8
    1174:	466a      	mov	r2, sp
    1176:	1852      	adds	r2, r2, r1
    1178:	4661      	mov	r1, ip
    117a:	6a18      	ldr	r0, [r3, #32]
    117c:	5a52      	ldrh	r2, [r2, r1]
    117e:	4302      	orrs	r2, r0
    1180:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1182:	466a      	mov	r2, sp
    1184:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1186:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    1188:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    118a:	466b      	mov	r3, sp
    118c:	3304      	adds	r3, #4
    118e:	5ddf      	ldrb	r7, [r3, r7]
    1190:	4b52      	ldr	r3, [pc, #328]	; (12dc <tc_init+0x230>)
    1192:	0038      	movs	r0, r7
    1194:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1196:	4b52      	ldr	r3, [pc, #328]	; (12e0 <tc_init+0x234>)
    1198:	0038      	movs	r0, r7
    119a:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    119c:	8923      	ldrh	r3, [r4, #8]
    119e:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    11a0:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    11a2:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    11a4:	78a3      	ldrb	r3, [r4, #2]
    11a6:	430b      	orrs	r3, r1
	ctrla_tmp =
    11a8:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    11aa:	7862      	ldrb	r2, [r4, #1]
    11ac:	2a00      	cmp	r2, #0
    11ae:	d002      	beq.n	11b6 <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    11b0:	2280      	movs	r2, #128	; 0x80
    11b2:	0112      	lsls	r2, r2, #4
    11b4:	4313      	orrs	r3, r2
    11b6:	6829      	ldr	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11b8:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    11ba:	b252      	sxtb	r2, r2
    11bc:	2a00      	cmp	r2, #0
    11be:	dbfb      	blt.n	11b8 <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    11c0:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    11c2:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    11c4:	1e5a      	subs	r2, r3, #1
    11c6:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    11c8:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    11ca:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    11cc:	2a00      	cmp	r2, #0
    11ce:	d001      	beq.n	11d4 <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    11d0:	2201      	movs	r2, #1
    11d2:	4313      	orrs	r3, r2
    11d4:	6829      	ldr	r1, [r5, #0]
    11d6:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    11d8:	b252      	sxtb	r2, r2
    11da:	2a00      	cmp	r2, #0
    11dc:	dbfb      	blt.n	11d6 <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    11de:	22ff      	movs	r2, #255	; 0xff
    11e0:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    11e2:	2b00      	cmp	r3, #0
    11e4:	d005      	beq.n	11f2 <tc_init+0x146>
    11e6:	6829      	ldr	r1, [r5, #0]
    11e8:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    11ea:	b252      	sxtb	r2, r2
    11ec:	2a00      	cmp	r2, #0
    11ee:	dbfb      	blt.n	11e8 <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    11f0:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    11f2:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    11f4:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    11f6:	2b00      	cmp	r3, #0
    11f8:	d001      	beq.n	11fe <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    11fa:	2310      	movs	r3, #16
    11fc:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    11fe:	7b23      	ldrb	r3, [r4, #12]
    1200:	2b00      	cmp	r3, #0
    1202:	d001      	beq.n	1208 <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1204:	2320      	movs	r3, #32
    1206:	431a      	orrs	r2, r3
    1208:	6829      	ldr	r1, [r5, #0]
    120a:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    120c:	b25b      	sxtb	r3, r3
    120e:	2b00      	cmp	r3, #0
    1210:	dbfb      	blt.n	120a <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1212:	71b2      	strb	r2, [r6, #6]
    1214:	682b      	ldr	r3, [r5, #0]
    1216:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1218:	b252      	sxtb	r2, r2
    121a:	2a00      	cmp	r2, #0
    121c:	dbfb      	blt.n	1216 <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    121e:	792a      	ldrb	r2, [r5, #4]
    1220:	2a04      	cmp	r2, #4
    1222:	d019      	beq.n	1258 <tc_init+0x1ac>
    1224:	2a08      	cmp	r2, #8
    1226:	d03c      	beq.n	12a2 <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1228:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    122a:	2a00      	cmp	r2, #0
    122c:	d137      	bne.n	129e <tc_init+0x1f2>
    122e:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1230:	b252      	sxtb	r2, r2
    1232:	2a00      	cmp	r2, #0
    1234:	dbfb      	blt.n	122e <tc_init+0x182>
				= config->counter_16_bit.value;
    1236:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1238:	8233      	strh	r3, [r6, #16]
    123a:	682a      	ldr	r2, [r5, #0]
    123c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    123e:	b25b      	sxtb	r3, r3
    1240:	2b00      	cmp	r3, #0
    1242:	dbfb      	blt.n	123c <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    1244:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1246:	8333      	strh	r3, [r6, #24]
    1248:	682a      	ldr	r2, [r5, #0]
    124a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    124c:	b25b      	sxtb	r3, r3
    124e:	2b00      	cmp	r3, #0
    1250:	dbfb      	blt.n	124a <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    1252:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1254:	8373      	strh	r3, [r6, #26]
    1256:	e021      	b.n	129c <tc_init+0x1f0>
    1258:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    125a:	b252      	sxtb	r2, r2
    125c:	2a00      	cmp	r2, #0
    125e:	dbfb      	blt.n	1258 <tc_init+0x1ac>
					config->counter_8_bit.value;
    1260:	0023      	movs	r3, r4
    1262:	3328      	adds	r3, #40	; 0x28
    1264:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    1266:	7433      	strb	r3, [r6, #16]
    1268:	682a      	ldr	r2, [r5, #0]
    126a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    126c:	b25b      	sxtb	r3, r3
    126e:	2b00      	cmp	r3, #0
    1270:	dbfb      	blt.n	126a <tc_init+0x1be>
					config->counter_8_bit.period;
    1272:	0023      	movs	r3, r4
    1274:	3329      	adds	r3, #41	; 0x29
    1276:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    1278:	7533      	strb	r3, [r6, #20]
    127a:	682a      	ldr	r2, [r5, #0]
    127c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    127e:	b25b      	sxtb	r3, r3
    1280:	2b00      	cmp	r3, #0
    1282:	dbfb      	blt.n	127c <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    1284:	0023      	movs	r3, r4
    1286:	332a      	adds	r3, #42	; 0x2a
    1288:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    128a:	7633      	strb	r3, [r6, #24]
    128c:	682a      	ldr	r2, [r5, #0]
    128e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1290:	b25b      	sxtb	r3, r3
    1292:	2b00      	cmp	r3, #0
    1294:	dbfb      	blt.n	128e <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    1296:	342b      	adds	r4, #43	; 0x2b
    1298:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    129a:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    129c:	2000      	movs	r0, #0
}
    129e:	b005      	add	sp, #20
    12a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12a2:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    12a4:	b252      	sxtb	r2, r2
    12a6:	2a00      	cmp	r2, #0
    12a8:	dbfb      	blt.n	12a2 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    12aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    12ac:	6133      	str	r3, [r6, #16]
    12ae:	682a      	ldr	r2, [r5, #0]
    12b0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12b2:	b25b      	sxtb	r3, r3
    12b4:	2b00      	cmp	r3, #0
    12b6:	dbfb      	blt.n	12b0 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    12b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    12ba:	61b3      	str	r3, [r6, #24]
    12bc:	682a      	ldr	r2, [r5, #0]
    12be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12c0:	b25b      	sxtb	r3, r3
    12c2:	2b00      	cmp	r3, #0
    12c4:	dbfb      	blt.n	12be <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    12c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    12c8:	61f3      	str	r3, [r6, #28]
    12ca:	e7e7      	b.n	129c <tc_init+0x1f0>
    12cc:	00001089 	.word	0x00001089
    12d0:	20000088 	.word	0x20000088
    12d4:	00000f3d 	.word	0x00000f3d
    12d8:	40000400 	.word	0x40000400
    12dc:	00000e69 	.word	0x00000e69
    12e0:	00000de1 	.word	0x00000de1

000012e4 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    12e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    12e6:	6804      	ldr	r4, [r0, #0]
    12e8:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    12ea:	b25b      	sxtb	r3, r3
    12ec:	2b00      	cmp	r3, #0
    12ee:	dbfb      	blt.n	12e8 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    12f0:	7903      	ldrb	r3, [r0, #4]
    12f2:	2b04      	cmp	r3, #4
    12f4:	d00c      	beq.n	1310 <tc_set_compare_value+0x2c>
    12f6:	2b08      	cmp	r3, #8
    12f8:	d012      	beq.n	1320 <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    12fa:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    12fc:	2b00      	cmp	r3, #0
    12fe:	d10e      	bne.n	131e <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    1300:	2017      	movs	r0, #23
			if (channel_index <
    1302:	2901      	cmp	r1, #1
    1304:	d80b      	bhi.n	131e <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    1306:	310c      	adds	r1, #12
						(uint16_t)compare;
    1308:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    130a:	0049      	lsls	r1, r1, #1
    130c:	530a      	strh	r2, [r1, r4]
    130e:	e005      	b.n	131c <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    1310:	2017      	movs	r0, #23
			if (channel_index <
    1312:	2901      	cmp	r1, #1
    1314:	d803      	bhi.n	131e <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    1316:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1318:	1861      	adds	r1, r4, r1
    131a:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    131c:	2000      	movs	r0, #0
}
    131e:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1320:	2017      	movs	r0, #23
			if (channel_index <
    1322:	2901      	cmp	r1, #1
    1324:	d8fb      	bhi.n	131e <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    1326:	3106      	adds	r1, #6
    1328:	0089      	lsls	r1, r1, #2
    132a:	510a      	str	r2, [r1, r4]
    132c:	e7f6      	b.n	131c <tc_set_compare_value+0x38>

0000132e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    132e:	e7fe      	b.n	132e <Dummy_Handler>

00001330 <Reset_Handler>:
        if (pSrc != pDest) {
    1330:	4821      	ldr	r0, [pc, #132]	; (13b8 <Reset_Handler+0x88>)
    1332:	4922      	ldr	r1, [pc, #136]	; (13bc <Reset_Handler+0x8c>)
{
    1334:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1336:	4288      	cmp	r0, r1
    1338:	d004      	beq.n	1344 <Reset_Handler+0x14>
    133a:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    133c:	4c20      	ldr	r4, [pc, #128]	; (13c0 <Reset_Handler+0x90>)
    133e:	18ca      	adds	r2, r1, r3
    1340:	42a2      	cmp	r2, r4
    1342:	d332      	bcc.n	13aa <Reset_Handler+0x7a>
                *pDest++ = 0;
    1344:	2100      	movs	r1, #0
    1346:	4b1f      	ldr	r3, [pc, #124]	; (13c4 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1348:	4a1f      	ldr	r2, [pc, #124]	; (13c8 <Reset_Handler+0x98>)
    134a:	4293      	cmp	r3, r2
    134c:	d331      	bcc.n	13b2 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    134e:	21ff      	movs	r1, #255	; 0xff
    1350:	4b1e      	ldr	r3, [pc, #120]	; (13cc <Reset_Handler+0x9c>)
    1352:	4a1f      	ldr	r2, [pc, #124]	; (13d0 <Reset_Handler+0xa0>)
    1354:	438b      	bics	r3, r1
    1356:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1358:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    135a:	250c      	movs	r5, #12
    135c:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    135e:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1360:	4b1c      	ldr	r3, [pc, #112]	; (13d4 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1362:	481d      	ldr	r0, [pc, #116]	; (13d8 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1364:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1366:	78c3      	ldrb	r3, [r0, #3]
    1368:	39fc      	subs	r1, #252	; 0xfc
    136a:	438b      	bics	r3, r1
    136c:	4313      	orrs	r3, r2
    136e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1370:	78c3      	ldrb	r3, [r0, #3]
    1372:	43ab      	bics	r3, r5
    1374:	4323      	orrs	r3, r4
    1376:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1378:	4b18      	ldr	r3, [pc, #96]	; (13dc <Reset_Handler+0xac>)
    137a:	7b98      	ldrb	r0, [r3, #14]
    137c:	43b0      	bics	r0, r6
    137e:	0006      	movs	r6, r0
    1380:	2020      	movs	r0, #32
    1382:	4330      	orrs	r0, r6
    1384:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1386:	7b98      	ldrb	r0, [r3, #14]
    1388:	43a8      	bics	r0, r5
    138a:	4304      	orrs	r4, r0
    138c:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    138e:	7b98      	ldrb	r0, [r3, #14]
    1390:	4388      	bics	r0, r1
    1392:	4302      	orrs	r2, r0
    1394:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1396:	2380      	movs	r3, #128	; 0x80
    1398:	4a11      	ldr	r2, [pc, #68]	; (13e0 <Reset_Handler+0xb0>)
    139a:	6851      	ldr	r1, [r2, #4]
    139c:	430b      	orrs	r3, r1
    139e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    13a0:	4b10      	ldr	r3, [pc, #64]	; (13e4 <Reset_Handler+0xb4>)
    13a2:	4798      	blx	r3
        main();
    13a4:	4b10      	ldr	r3, [pc, #64]	; (13e8 <Reset_Handler+0xb8>)
    13a6:	4798      	blx	r3
    13a8:	e7fe      	b.n	13a8 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    13aa:	58c5      	ldr	r5, [r0, r3]
    13ac:	3304      	adds	r3, #4
    13ae:	6015      	str	r5, [r2, #0]
    13b0:	e7c5      	b.n	133e <Reset_Handler+0xe>
                *pDest++ = 0;
    13b2:	c302      	stmia	r3!, {r1}
    13b4:	e7c9      	b.n	134a <Reset_Handler+0x1a>
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	00003400 	.word	0x00003400
    13bc:	20000000 	.word	0x20000000
    13c0:	2000000c 	.word	0x2000000c
    13c4:	2000000c 	.word	0x2000000c
    13c8:	200000f0 	.word	0x200000f0
    13cc:	00000000 	.word	0x00000000
    13d0:	e000ed00 	.word	0xe000ed00
    13d4:	410070fc 	.word	0x410070fc
    13d8:	41005000 	.word	0x41005000
    13dc:	41004800 	.word	0x41004800
    13e0:	41004000 	.word	0x41004000
    13e4:	000032d9 	.word	0x000032d9
    13e8:	000018c9 	.word	0x000018c9

000013ec <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    13ec:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    13ee:	2364      	movs	r3, #100	; 0x64
	
}



void i2c_master_setup(void){
    13f0:	b570      	push	{r4, r5, r6, lr}
    13f2:	b08e      	sub	sp, #56	; 0x38
    13f4:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    13f6:	0389      	lsls	r1, r1, #14
    13f8:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    13fa:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    13fc:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    13fe:	4b1e      	ldr	r3, [pc, #120]	; (1478 <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    1400:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1402:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1404:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    1406:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1408:	310a      	adds	r1, #10
    140a:	4469      	add	r1, sp
    140c:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    140e:	a90c      	add	r1, sp, #48	; 0x30
    1410:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1412:	2131      	movs	r1, #49	; 0x31
    1414:	4469      	add	r1, sp
    1416:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    1418:	2132      	movs	r1, #50	; 0x32
    141a:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    141c:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    141e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1420:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1422:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1424:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1426:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    1428:	700b      	strb	r3, [r1, #0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    142a:	33d7      	adds	r3, #215	; 0xd7
    142c:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 10000;
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    142e:	4e13      	ldr	r6, [pc, #76]	; (147c <i2c_master_setup+0x90>)
	config_i2c_master.buffer_timeout = 10000;
    1430:	4b13      	ldr	r3, [pc, #76]	; (1480 <i2c_master_setup+0x94>)
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1432:	4914      	ldr	r1, [pc, #80]	; (1484 <i2c_master_setup+0x98>)
	config_i2c_master.buffer_timeout = 10000;
    1434:	82d3      	strh	r3, [r2, #22]
	i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    1436:	0030      	movs	r0, r6
    1438:	4b13      	ldr	r3, [pc, #76]	; (1488 <i2c_master_setup+0x9c>)
    143a:	4798      	blx	r3
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    143c:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    143e:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1440:	69ec      	ldr	r4, [r5, #28]
    1442:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    1444:	d1fc      	bne.n	1440 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1446:	2302      	movs	r3, #2
    1448:	682a      	ldr	r2, [r5, #0]
    144a:	4313      	orrs	r3, r2
    144c:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    144e:	6830      	ldr	r0, [r6, #0]
    1450:	4b0e      	ldr	r3, [pc, #56]	; (148c <i2c_master_setup+0xa0>)
    1452:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1454:	231f      	movs	r3, #31
    1456:	4018      	ands	r0, r3
    1458:	3b1e      	subs	r3, #30
    145a:	4083      	lsls	r3, r0
    145c:	4a0c      	ldr	r2, [pc, #48]	; (1490 <i2c_master_setup+0xa4>)
    145e:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1460:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1462:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1464:	8b69      	ldrh	r1, [r5, #26]
    1466:	4211      	tst	r1, r2
    1468:	d103      	bne.n	1472 <i2c_master_setup+0x86>
		timeout_counter++;
    146a:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    146c:	4284      	cmp	r4, r0
    146e:	d3f9      	bcc.n	1464 <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1470:	836a      	strh	r2, [r5, #26]
	i2c_master_enable(&i2c_master_instance);
	
}
    1472:	b00e      	add	sp, #56	; 0x38
    1474:	bd70      	pop	{r4, r5, r6, pc}
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	00000d48 	.word	0x00000d48
    147c:	20000090 	.word	0x20000090
    1480:	00002710 	.word	0x00002710
    1484:	42001000 	.word	0x42001000
    1488:	000001a5 	.word	0x000001a5
    148c:	0000082d 	.word	0x0000082d
    1490:	e000e100 	.word	0xe000e100

00001494 <sys_tc_callback>:
	static int tick_count_50ms;
	static int tick_count_100ms;
	static int tick_count_200ms;
	
	
	tick_count_1ms++;
    1494:	4916      	ldr	r1, [pc, #88]	; (14f0 <sys_tc_callback+0x5c>)
    1496:	680b      	ldr	r3, [r1, #0]
    1498:	1c5a      	adds	r2, r3, #1
    149a:	600a      	str	r2, [r1, #0]
    149c:	4b15      	ldr	r3, [pc, #84]	; (14f4 <sys_tc_callback+0x60>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
    149e:	2a09      	cmp	r2, #9
    14a0:	dd07      	ble.n	14b2 <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
    14a2:	681a      	ldr	r2, [r3, #0]
    14a4:	3201      	adds	r2, #1
    14a6:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
    14a8:	2200      	movs	r2, #0
    14aa:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
    14ac:	2101      	movs	r1, #1
    14ae:	4a12      	ldr	r2, [pc, #72]	; (14f8 <sys_tc_callback+0x64>)
    14b0:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
    14b2:	6819      	ldr	r1, [r3, #0]
    14b4:	4a11      	ldr	r2, [pc, #68]	; (14fc <sys_tc_callback+0x68>)
    14b6:	2904      	cmp	r1, #4
    14b8:	dd04      	ble.n	14c4 <sys_tc_callback+0x30>
	{
		tick_count_50ms++;
    14ba:	6811      	ldr	r1, [r2, #0]
    14bc:	3101      	adds	r1, #1
    14be:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
    14c0:	2100      	movs	r1, #0
    14c2:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
    14c4:	6811      	ldr	r1, [r2, #0]
    14c6:	4b0e      	ldr	r3, [pc, #56]	; (1500 <sys_tc_callback+0x6c>)
    14c8:	2901      	cmp	r1, #1
    14ca:	dd04      	ble.n	14d6 <sys_tc_callback+0x42>
	{
		tick_count_100ms++;
    14cc:	6819      	ldr	r1, [r3, #0]
    14ce:	3101      	adds	r1, #1
    14d0:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
    14d2:	2100      	movs	r1, #0
    14d4:	6011      	str	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
    14d6:	681a      	ldr	r2, [r3, #0]
    14d8:	2a01      	cmp	r2, #1
    14da:	dd08      	ble.n	14ee <sys_tc_callback+0x5a>
	{
		tick_count_200ms++;
    14dc:	4909      	ldr	r1, [pc, #36]	; (1504 <sys_tc_callback+0x70>)
    14de:	680a      	ldr	r2, [r1, #0]
    14e0:	3201      	adds	r2, #1
    14e2:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
    14e4:	2200      	movs	r2, #0
    14e6:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
    14e8:	4b07      	ldr	r3, [pc, #28]	; (1508 <sys_tc_callback+0x74>)
    14ea:	3201      	adds	r2, #1
    14ec:	701a      	strb	r2, [r3, #0]
	}
	
	
	
	
}
    14ee:	4770      	bx	lr
    14f0:	20000068 	.word	0x20000068
    14f4:	20000064 	.word	0x20000064
    14f8:	20000059 	.word	0x20000059
    14fc:	20000070 	.word	0x20000070
    1500:	20000060 	.word	0x20000060
    1504:	2000006c 	.word	0x2000006c
    1508:	2000005a 	.word	0x2000005a

0000150c <configure_port_pins>:
{
    150c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
    150e:	2300      	movs	r3, #0
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1510:	2602      	movs	r6, #2
    1512:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1514:	4d06      	ldr	r5, [pc, #24]	; (1530 <configure_port_pins+0x24>)
    1516:	0021      	movs	r1, r4
    1518:	201b      	movs	r0, #27
    151a:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    151c:	70a3      	strb	r3, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    151e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    1520:	47a8      	blx	r5
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1522:	2301      	movs	r3, #1
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    1524:	0021      	movs	r1, r4
    1526:	2006      	movs	r0, #6
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;						// START AT PULL DOWN.
    1528:	7066      	strb	r6, [r4, #1]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    152a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    152c:	47a8      	blx	r5
}
    152e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    1530:	00000185 	.word	0x00000185

00001534 <configure_system_tc>:
{
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);
	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1534:	21a0      	movs	r1, #160	; 0xa0
{
    1536:	b510      	push	{r4, lr}
    1538:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    153a:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    153c:	00c9      	lsls	r1, r1, #3
    153e:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
    1540:	212d      	movs	r1, #45	; 0x2d
    1542:	2300      	movs	r3, #0
    1544:	206f      	movs	r0, #111	; 0x6f
    1546:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    1548:	8513      	strh	r3, [r2, #40]	; 0x28
    154a:	7008      	strb	r0, [r1, #0]
	
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    154c:	2101      	movs	r1, #1
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA15E_TC1_WO1; // PA15 FOR TESTING
	
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    154e:	4c12      	ldr	r4, [pc, #72]	; (1598 <configure_system_tc+0x64>)
	config->clock_source               = GCLK_GENERATOR_0;
    1550:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1552:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1554:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1556:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1558:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    155a:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    155c:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    155e:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1560:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1562:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1564:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1566:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1568:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    156a:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    156c:	7411      	strb	r1, [r2, #16]
	config_tc.counter_size = TC_COUNTER_SIZE;
    156e:	3304      	adds	r3, #4
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING
    1570:	310e      	adds	r1, #14
	config_tc.counter_size = TC_COUNTER_SIZE;
    1572:	7093      	strb	r3, [r2, #2]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING
    1574:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA15E_TC1_WO1; // PA15 FOR TESTING
    1576:	6193      	str	r3, [r2, #24]
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1578:	4908      	ldr	r1, [pc, #32]	; (159c <configure_system_tc+0x68>)
    157a:	4b09      	ldr	r3, [pc, #36]	; (15a0 <configure_system_tc+0x6c>)
    157c:	0020      	movs	r0, r4
    157e:	4798      	blx	r3
    1580:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1582:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1584:	b252      	sxtb	r2, r2
    1586:	2a00      	cmp	r2, #0
    1588:	dbfb      	blt.n	1582 <configure_system_tc+0x4e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    158a:	2202      	movs	r2, #2
    158c:	8819      	ldrh	r1, [r3, #0]
    158e:	430a      	orrs	r2, r1
    1590:	801a      	strh	r2, [r3, #0]
	tc_enable (&system_timer_instance);
}
    1592:	b00e      	add	sp, #56	; 0x38
    1594:	bd10      	pop	{r4, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	200000b8 	.word	0x200000b8
    159c:	42001800 	.word	0x42001800
    15a0:	000010ad 	.word	0x000010ad

000015a4 <system_tc_callbacks>:

void system_tc_callbacks (void)
{
    15a4:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
    15a6:	4c0c      	ldr	r4, [pc, #48]	; (15d8 <system_tc_callbacks+0x34>)
    15a8:	2200      	movs	r2, #0
    15aa:	490c      	ldr	r1, [pc, #48]	; (15dc <system_tc_callbacks+0x38>)
    15ac:	0020      	movs	r0, r4
    15ae:	4b0c      	ldr	r3, [pc, #48]	; (15e0 <system_tc_callbacks+0x3c>)
    15b0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    15b2:	6820      	ldr	r0, [r4, #0]
    15b4:	4b0b      	ldr	r3, [pc, #44]	; (15e4 <system_tc_callbacks+0x40>)
    15b6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    15b8:	4b0b      	ldr	r3, [pc, #44]	; (15e8 <system_tc_callbacks+0x44>)
    15ba:	5c1a      	ldrb	r2, [r3, r0]
    15bc:	231f      	movs	r3, #31
    15be:	401a      	ands	r2, r3
    15c0:	3b1e      	subs	r3, #30
    15c2:	0019      	movs	r1, r3
    15c4:	4091      	lsls	r1, r2
    15c6:	4a09      	ldr	r2, [pc, #36]	; (15ec <system_tc_callbacks+0x48>)
    15c8:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    15ca:	7e62      	ldrb	r2, [r4, #25]
    15cc:	431a      	orrs	r2, r3
    15ce:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    15d0:	6822      	ldr	r2, [r4, #0]
    15d2:	7353      	strb	r3, [r2, #13]
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback (&system_timer_instance, TC_CALLBACK_OVERFLOW);
}
    15d4:	bd10      	pop	{r4, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	200000b8 	.word	0x200000b8
    15dc:	00001495 	.word	0x00001495
    15e0:	00000fe5 	.word	0x00000fe5
    15e4:	00001089 	.word	0x00001089
    15e8:	0000335c 	.word	0x0000335c
    15ec:	e000e100 	.word	0xe000e100

000015f0 <is_button_pressed>:
	return (port_base->IN.reg & pin_mask);
    15f0:	4b12      	ldr	r3, [pc, #72]	; (163c <is_button_pressed+0x4c>)
    15f2:	4a13      	ldr	r2, [pc, #76]	; (1640 <is_button_pressed+0x50>)
    15f4:	6a19      	ldr	r1, [r3, #32]
    15f6:	4b13      	ldr	r3, [pc, #76]	; (1644 <is_button_pressed+0x54>)


bool is_button_pressed (void)
{

	if (!port_pin_get_input_level (SW0_PIN))
    15f8:	0449      	lsls	r1, r1, #17
    15fa:	d416      	bmi.n	162a <is_button_pressed+0x3a>
	{
		BUTTON_PRESS_STATUS = true;
		press_delay_count--;
    15fc:	6819      	ldr	r1, [r3, #0]
    15fe:	3901      	subs	r1, #1
    1600:	6019      	str	r1, [r3, #0]
		long_press_delay_count--;
    1602:	6811      	ldr	r1, [r2, #0]
    1604:	3901      	subs	r1, #1
		
	}else
	{
		BUTTON_PRESS_STATUS = false;
		press_delay_count = DELAY_DEBOUNCE_CN;
		long_press_delay_count = DELAY_PRESS_CN;
    1606:	6011      	str	r1, [r2, #0]
		
	}
	
	// long press delay logic
	if (long_press_delay_count <= 0){
    1608:	6811      	ldr	r1, [r2, #0]
    160a:	2900      	cmp	r1, #0
    160c:	dc04      	bgt.n	1618 <is_button_pressed+0x28>
		LongPressFlag = true;
    160e:	2001      	movs	r0, #1
    1610:	490d      	ldr	r1, [pc, #52]	; (1648 <is_button_pressed+0x58>)
    1612:	7008      	strb	r0, [r1, #0]
		long_press_delay_count = 0 ;
    1614:	2100      	movs	r1, #0
    1616:	6011      	str	r1, [r2, #0]
    1618:	2000      	movs	r0, #0
	}
	
	// debounce logic
	if (press_delay_count <= 0)
    161a:	6819      	ldr	r1, [r3, #0]
    161c:	4a0b      	ldr	r2, [pc, #44]	; (164c <is_button_pressed+0x5c>)
    161e:	4281      	cmp	r1, r0
    1620:	dc08      	bgt.n	1634 <is_button_pressed+0x44>
	{
		BUTTON_RELEASE_STATUS = false;
    1622:	7010      	strb	r0, [r2, #0]
		press_delay_count = 0;
    1624:	6018      	str	r0, [r3, #0]
		return true;
    1626:	3001      	adds	r0, #1
	else
	{
		BUTTON_RELEASE_STATUS = true;
		return false;
	}
}
    1628:	4770      	bx	lr
		press_delay_count = DELAY_DEBOUNCE_CN;
    162a:	2102      	movs	r1, #2
    162c:	6019      	str	r1, [r3, #0]
		long_press_delay_count = DELAY_PRESS_CN;
    162e:	318f      	adds	r1, #143	; 0x8f
    1630:	31ff      	adds	r1, #255	; 0xff
    1632:	e7e8      	b.n	1606 <is_button_pressed+0x16>
		BUTTON_RELEASE_STATUS = true;
    1634:	2301      	movs	r3, #1
    1636:	7013      	strb	r3, [r2, #0]
		return false;
    1638:	e7f6      	b.n	1628 <is_button_pressed+0x38>
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	41004400 	.word	0x41004400
    1640:	20000004 	.word	0x20000004
    1644:	20000008 	.word	0x20000008
    1648:	20000055 	.word	0x20000055
    164c:	20000054 	.word	0x20000054

00001650 <pwm_motor_cleanup>:



void pwm_motor_cleanup(void);

void pwm_motor_cleanup(void){
    1650:	b570      	push	{r4, r5, r6, lr}
	PULSATING_MOTOR_ROUTINE = false;
    1652:	2400      	movs	r4, #0
    1654:	4b0d      	ldr	r3, [pc, #52]	; (168c <pwm_motor_cleanup+0x3c>)
	toggle_count = 0;
	tc_set_compare_value (&pwm_generator_instance,
    1656:	4d0e      	ldr	r5, [pc, #56]	; (1690 <pwm_motor_cleanup+0x40>)
	PULSATING_MOTOR_ROUTINE = false;
    1658:	701c      	strb	r4, [r3, #0]
	toggle_count = 0;
    165a:	4b0e      	ldr	r3, [pc, #56]	; (1694 <pwm_motor_cleanup+0x44>)
	tc_set_compare_value (&pwm_generator_instance,
    165c:	2215      	movs	r2, #21
	toggle_count = 0;
    165e:	701c      	strb	r4, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,
    1660:	0021      	movs	r1, r4
    1662:	4b0d      	ldr	r3, [pc, #52]	; (1698 <pwm_motor_cleanup+0x48>)
    1664:	0028      	movs	r0, r5
    1666:	4798      	blx	r3
	TC_COMPARE_CAPTURE_CHANNEL_0,
	INITIAL_DUTY_CYCLE);
	PWM_RUNNING = false;
    1668:	4b0c      	ldr	r3, [pc, #48]	; (169c <pwm_motor_cleanup+0x4c>)
    166a:	701c      	strb	r4, [r3, #0]
    166c:	682b      	ldr	r3, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    166e:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1670:	b252      	sxtb	r2, r2
    1672:	2a00      	cmp	r2, #0
    1674:	dbfb      	blt.n	166e <pwm_motor_cleanup+0x1e>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    1676:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    1678:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    167a:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    167c:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    167e:	881a      	ldrh	r2, [r3, #0]
    1680:	438a      	bics	r2, r1
    1682:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1684:	2240      	movs	r2, #64	; 0x40
    1686:	4b06      	ldr	r3, [pc, #24]	; (16a0 <pwm_motor_cleanup+0x50>)
    1688:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
    168a:	bd70      	pop	{r4, r5, r6, pc}
    168c:	20000057 	.word	0x20000057
    1690:	200000d4 	.word	0x200000d4
    1694:	20000074 	.word	0x20000074
    1698:	000012e5 	.word	0x000012e5
    169c:	20000058 	.word	0x20000058
    16a0:	41004400 	.word	0x41004400

000016a4 <cycle_pwm_duty>:




void cycle_pwm_duty (void)
{
    16a4:	b510      	push	{r4, lr}
	if (PWM_RUNNING)
    16a6:	4b0e      	ldr	r3, [pc, #56]	; (16e0 <cycle_pwm_duty+0x3c>)
    16a8:	781b      	ldrb	r3, [r3, #0]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d00b      	beq.n	16c6 <cycle_pwm_duty+0x22>
	{
		
		if (toggle_count == 2)
    16ae:	4b0d      	ldr	r3, [pc, #52]	; (16e4 <cycle_pwm_duty+0x40>)
		{
			tc_set_compare_value (&pwm_generator_instance,
    16b0:	2222      	movs	r2, #34	; 0x22
		if (toggle_count == 2)
    16b2:	781b      	ldrb	r3, [r3, #0]
    16b4:	2b02      	cmp	r3, #2
    16b6:	d002      	beq.n	16be <cycle_pwm_duty+0x1a>
			TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
		}
		else if (toggle_count == 3)
    16b8:	2b03      	cmp	r3, #3
    16ba:	d105      	bne.n	16c8 <cycle_pwm_duty+0x24>
		{
			tc_set_compare_value (&pwm_generator_instance,
    16bc:	224d      	movs	r2, #77	; 0x4d
    16be:	2100      	movs	r1, #0
    16c0:	4809      	ldr	r0, [pc, #36]	; (16e8 <cycle_pwm_duty+0x44>)
    16c2:	4b0a      	ldr	r3, [pc, #40]	; (16ec <cycle_pwm_duty+0x48>)
    16c4:	4798      	blx	r3
		else if (toggle_count > 4)
		{
			pwm_motor_cleanup();
		}
	}
}
    16c6:	bd10      	pop	{r4, pc}
		else if (toggle_count == 4)
    16c8:	2b04      	cmp	r3, #4
    16ca:	d104      	bne.n	16d6 <cycle_pwm_duty+0x32>
			PULSATING_MOTOR_ROUTINE = true;
    16cc:	2201      	movs	r2, #1
    16ce:	4b08      	ldr	r3, [pc, #32]	; (16f0 <cycle_pwm_duty+0x4c>)
    16d0:	701a      	strb	r2, [r3, #0]
			tc_set_compare_value (&pwm_generator_instance,
    16d2:	324c      	adds	r2, #76	; 0x4c
    16d4:	e7f3      	b.n	16be <cycle_pwm_duty+0x1a>
		else if (toggle_count > 4)
    16d6:	2b04      	cmp	r3, #4
    16d8:	d9f5      	bls.n	16c6 <cycle_pwm_duty+0x22>
			pwm_motor_cleanup();
    16da:	4b06      	ldr	r3, [pc, #24]	; (16f4 <cycle_pwm_duty+0x50>)
    16dc:	4798      	blx	r3
}
    16de:	e7f2      	b.n	16c6 <cycle_pwm_duty+0x22>
    16e0:	20000058 	.word	0x20000058
    16e4:	20000074 	.word	0x20000074
    16e8:	200000d4 	.word	0x200000d4
    16ec:	000012e5 	.word	0x000012e5
    16f0:	20000057 	.word	0x20000057
    16f4:	00001651 	.word	0x00001651

000016f8 <regular_routine>:
{
    16f8:	b510      	push	{r4, lr}
	if (is_button_pressed()){
    16fa:	4b1a      	ldr	r3, [pc, #104]	; (1764 <regular_routine+0x6c>)
    16fc:	4798      	blx	r3
    16fe:	2800      	cmp	r0, #0
    1700:	d026      	beq.n	1750 <regular_routine+0x58>
		if (LongPressFlag){
    1702:	4b19      	ldr	r3, [pc, #100]	; (1768 <regular_routine+0x70>)
    1704:	781b      	ldrb	r3, [r3, #0]
    1706:	2b00      	cmp	r3, #0
    1708:	d006      	beq.n	1718 <regular_routine+0x20>
    170a:	2280      	movs	r2, #128	; 0x80
    170c:	4b17      	ldr	r3, [pc, #92]	; (176c <regular_routine+0x74>)
    170e:	0252      	lsls	r2, r2, #9
    1710:	615a      	str	r2, [r3, #20]
			pwm_motor_cleanup();
    1712:	4b17      	ldr	r3, [pc, #92]	; (1770 <regular_routine+0x78>)
					cycle_pwm_duty ();
    1714:	4798      	blx	r3
    1716:	e01b      	b.n	1750 <regular_routine+0x58>
			if (!motor_status_changed)
    1718:	4916      	ldr	r1, [pc, #88]	; (1774 <regular_routine+0x7c>)
    171a:	780b      	ldrb	r3, [r1, #0]
    171c:	2b00      	cmp	r3, #0
    171e:	d117      	bne.n	1750 <regular_routine+0x58>
				toggle_count++;
    1720:	4a15      	ldr	r2, [pc, #84]	; (1778 <regular_routine+0x80>)
    1722:	7813      	ldrb	r3, [r2, #0]
    1724:	3301      	adds	r3, #1
    1726:	7013      	strb	r3, [r2, #0]
				motor_status_changed = true;
    1728:	2201      	movs	r2, #1
				if (!PWM_RUNNING)
    172a:	4b14      	ldr	r3, [pc, #80]	; (177c <regular_routine+0x84>)
				motor_status_changed = true;
    172c:	700a      	strb	r2, [r1, #0]
				if (!PWM_RUNNING)
    172e:	7819      	ldrb	r1, [r3, #0]
    1730:	2900      	cmp	r1, #0
    1732:	d115      	bne.n	1760 <regular_routine+0x68>
					PWM_RUNNING = true;
    1734:	701a      	strb	r2, [r3, #0]
    1736:	4b12      	ldr	r3, [pc, #72]	; (1780 <regular_routine+0x88>)
    1738:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    173a:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    173c:	b252      	sxtb	r2, r2
    173e:	2a00      	cmp	r2, #0
    1740:	dbfb      	blt.n	173a <regular_routine+0x42>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1742:	2202      	movs	r2, #2
    1744:	8819      	ldrh	r1, [r3, #0]
    1746:	430a      	orrs	r2, r1
    1748:	801a      	strh	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    174a:	2240      	movs	r2, #64	; 0x40
    174c:	4b07      	ldr	r3, [pc, #28]	; (176c <regular_routine+0x74>)
    174e:	619a      	str	r2, [r3, #24]
	if (BUTTON_RELEASE_STATUS)
    1750:	4b0c      	ldr	r3, [pc, #48]	; (1784 <regular_routine+0x8c>)
    1752:	781b      	ldrb	r3, [r3, #0]
    1754:	2b00      	cmp	r3, #0
    1756:	d002      	beq.n	175e <regular_routine+0x66>
		motor_status_changed = false;
    1758:	2200      	movs	r2, #0
    175a:	4b06      	ldr	r3, [pc, #24]	; (1774 <regular_routine+0x7c>)
    175c:	701a      	strb	r2, [r3, #0]
}
    175e:	bd10      	pop	{r4, pc}
					cycle_pwm_duty ();
    1760:	4b09      	ldr	r3, [pc, #36]	; (1788 <regular_routine+0x90>)
    1762:	e7d7      	b.n	1714 <regular_routine+0x1c>
    1764:	000015f1 	.word	0x000015f1
    1768:	20000055 	.word	0x20000055
    176c:	41004400 	.word	0x41004400
    1770:	00001651 	.word	0x00001651
    1774:	2000005c 	.word	0x2000005c
    1778:	20000074 	.word	0x20000074
    177c:	20000058 	.word	0x20000058
    1780:	200000d4 	.word	0x200000d4
    1784:	20000054 	.word	0x20000054
    1788:	000016a5 	.word	0x000016a5

0000178c <get_vbus_state>:
	return (port_base->IN.reg & pin_mask);
    178c:	4b03      	ldr	r3, [pc, #12]	; (179c <get_vbus_state+0x10>)


void get_vbus_state(void);

void get_vbus_state(void){
	VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
    178e:	4a04      	ldr	r2, [pc, #16]	; (17a0 <get_vbus_state+0x14>)
    1790:	6a1b      	ldr	r3, [r3, #32]
    1792:	011b      	lsls	r3, r3, #4
    1794:	0fdb      	lsrs	r3, r3, #31
    1796:	7013      	strb	r3, [r2, #0]
}
    1798:	4770      	bx	lr
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	41004400 	.word	0x41004400
    17a0:	2000005b 	.word	0x2000005b

000017a4 <toggle_nsleep>:
}


void toggle_nsleep(void);

void toggle_nsleep(void){
    17a4:	b510      	push	{r4, lr}
	static bool PULSATING_MOTOR = false;
	if (PULSATING_MOTOR_ROUTINE){
    17a6:	4b0b      	ldr	r3, [pc, #44]	; (17d4 <toggle_nsleep+0x30>)
    17a8:	781b      	ldrb	r3, [r3, #0]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d00b      	beq.n	17c6 <toggle_nsleep+0x22>
    17ae:	2180      	movs	r1, #128	; 0x80
		if (PULSATING_MOTOR){
    17b0:	4a09      	ldr	r2, [pc, #36]	; (17d8 <toggle_nsleep+0x34>)
    17b2:	4b0a      	ldr	r3, [pc, #40]	; (17dc <toggle_nsleep+0x38>)
    17b4:	7814      	ldrb	r4, [r2, #0]
    17b6:	2040      	movs	r0, #64	; 0x40
    17b8:	0249      	lsls	r1, r1, #9
    17ba:	2c00      	cmp	r4, #0
    17bc:	d004      	beq.n	17c8 <toggle_nsleep+0x24>
		port_base->OUTCLR.reg = pin_mask;
    17be:	6158      	str	r0, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    17c0:	6199      	str	r1, [r3, #24]
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			LED_Off(LED0_PIN);
			PULSATING_MOTOR = false;
    17c2:	2300      	movs	r3, #0
    17c4:	7013      	strb	r3, [r2, #0]
			PULSATING_MOTOR = true;
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
			LED_On(LED0_PIN);
		}
	}
}
    17c6:	bd10      	pop	{r4, pc}
			PULSATING_MOTOR = true;
    17c8:	2401      	movs	r4, #1
    17ca:	7014      	strb	r4, [r2, #0]
    17cc:	6198      	str	r0, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    17ce:	6159      	str	r1, [r3, #20]
}
    17d0:	e7f9      	b.n	17c6 <toggle_nsleep+0x22>
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	20000057 	.word	0x20000057
    17d8:	20000056 	.word	0x20000056
    17dc:	41004400 	.word	0x41004400

000017e0 <system_logic>:
/* LOGIC MACHINE		                                                */
/************************************************************************/

void system_logic(void);

void system_logic(void){
    17e0:	b500      	push	{lr}
	if (!VBUS_STATE){
    17e2:	4b1f      	ldr	r3, [pc, #124]	; (1860 <system_logic+0x80>)
void system_logic(void){
    17e4:	b08f      	sub	sp, #60	; 0x3c
	if (!VBUS_STATE){
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	2b00      	cmp	r3, #0
    17ea:	d126      	bne.n	183a <system_logic+0x5a>
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    17ec:	21a0      	movs	r1, #160	; 0xa0
	config->clock_source               = GCLK_GENERATOR_0;
    17ee:	aa01      	add	r2, sp, #4
    17f0:	00c9      	lsls	r1, r1, #3
    17f2:	8091      	strh	r1, [r2, #4]
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
    17f4:	212d      	movs	r1, #45	; 0x2d
    17f6:	2055      	movs	r0, #85	; 0x55
    17f8:	4469      	add	r1, sp
	config->counter_16_bit.value                   = 0x0000;
    17fa:	8513      	strh	r3, [r2, #40]	; 0x28
    17fc:	7008      	strb	r0, [r1, #0]
	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
    17fe:	212e      	movs	r1, #46	; 0x2e
    1800:	3840      	subs	r0, #64	; 0x40
    1802:	4469      	add	r1, sp
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1804:	8553      	strh	r3, [r2, #42]	; 0x2a
    1806:	7008      	strb	r0, [r1, #0]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    1808:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
    180a:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    180c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    180e:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1810:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1812:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1814:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1816:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    1818:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    181a:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    181c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    181e:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1820:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
    1822:	3304      	adds	r3, #4
    1824:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    1826:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
    1828:	6193      	str	r3, [r2, #24]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
    182a:	3936      	subs	r1, #54	; 0x36
	config_tc.pwm_channel[0].enabled = true;
    182c:	3b03      	subs	r3, #3
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
    182e:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].enabled = true;
    1830:	7413      	strb	r3, [r2, #16]
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
    1832:	490c      	ldr	r1, [pc, #48]	; (1864 <system_logic+0x84>)
    1834:	480c      	ldr	r0, [pc, #48]	; (1868 <system_logic+0x88>)
    1836:	4b0d      	ldr	r3, [pc, #52]	; (186c <system_logic+0x8c>)
    1838:	4798      	blx	r3
	
	if (BATTERY_LOWEST){
		display_battery_state();					// Blink Red
	}
	
	if (SYS_TICK_10MS){
    183a:	4b0d      	ldr	r3, [pc, #52]	; (1870 <system_logic+0x90>)
    183c:	781a      	ldrb	r2, [r3, #0]
    183e:	2a00      	cmp	r2, #0
    1840:	d003      	beq.n	184a <system_logic+0x6a>
		SYS_TICK_10MS = false;
    1842:	2200      	movs	r2, #0
    1844:	701a      	strb	r2, [r3, #0]
		regular_routine();
    1846:	4b0b      	ldr	r3, [pc, #44]	; (1874 <system_logic+0x94>)
    1848:	4798      	blx	r3
	}
	
	if (SYS_TICK_200MS){
    184a:	4b0b      	ldr	r3, [pc, #44]	; (1878 <system_logic+0x98>)
    184c:	781a      	ldrb	r2, [r3, #0]
    184e:	2a00      	cmp	r2, #0
    1850:	d003      	beq.n	185a <system_logic+0x7a>
		SYS_TICK_200MS = false;
    1852:	2200      	movs	r2, #0
    1854:	701a      	strb	r2, [r3, #0]
		toggle_nsleep();
    1856:	4b09      	ldr	r3, [pc, #36]	; (187c <system_logic+0x9c>)
    1858:	4798      	blx	r3
	}


}
    185a:	b00f      	add	sp, #60	; 0x3c
    185c:	bd00      	pop	{pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	2000005b 	.word	0x2000005b
    1864:	42001c00 	.word	0x42001c00
    1868:	200000d4 	.word	0x200000d4
    186c:	000010ad 	.word	0x000010ad
    1870:	20000059 	.word	0x20000059
    1874:	000016f9 	.word	0x000016f9
    1878:	2000005a 	.word	0x2000005a
    187c:	000017a5 	.word	0x000017a5

00001880 <startup_sys_configs>:


void startup_sys_configs(void);


void startup_sys_configs(void){
    1880:	b510      	push	{r4, lr}
	system_init ();									// System Initialize
    1882:	4b0a      	ldr	r3, [pc, #40]	; (18ac <startup_sys_configs+0x2c>)
    1884:	4798      	blx	r3
	cpu_irq_enable();
    1886:	2201      	movs	r2, #1
    1888:	4b09      	ldr	r3, [pc, #36]	; (18b0 <startup_sys_configs+0x30>)
    188a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    188c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1890:	b662      	cpsie	i
	system_interrupt_enable_global ();				// System Interrupts
	configure_port_pins ();							// System PORTs
    1892:	4b08      	ldr	r3, [pc, #32]	; (18b4 <startup_sys_configs+0x34>)
    1894:	4798      	blx	r3
    1896:	2240      	movs	r2, #64	; 0x40
    1898:	4b07      	ldr	r3, [pc, #28]	; (18b8 <startup_sys_configs+0x38>)
    189a:	615a      	str	r2, [r3, #20]
	startup_default_pin_state();
	configure_system_tc ();							// System Clock
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <startup_sys_configs+0x3c>)
    189e:	4798      	blx	r3
	system_tc_callbacks ();							// System Clock Callback
    18a0:	4b07      	ldr	r3, [pc, #28]	; (18c0 <startup_sys_configs+0x40>)
    18a2:	4798      	blx	r3
	i2c_master_setup();
    18a4:	4b07      	ldr	r3, [pc, #28]	; (18c4 <startup_sys_configs+0x44>)
    18a6:	4798      	blx	r3
	//reset_chip();
}
    18a8:	bd10      	pop	{r4, pc}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	00000f6d 	.word	0x00000f6d
    18b0:	20000000 	.word	0x20000000
    18b4:	0000150d 	.word	0x0000150d
    18b8:	41004400 	.word	0x41004400
    18bc:	00001535 	.word	0x00001535
    18c0:	000015a5 	.word	0x000015a5
    18c4:	000013ed 	.word	0x000013ed

000018c8 <main>:



int main (void)
{
    18c8:	b510      	push	{r4, lr}
	startup_sys_configs ();
    18ca:	4b03      	ldr	r3, [pc, #12]	; (18d8 <main+0x10>)
    18cc:	4798      	blx	r3
	get_vbus_state();
    18ce:	4b03      	ldr	r3, [pc, #12]	; (18dc <main+0x14>)
    18d0:	4798      	blx	r3
	
	while (true)
	{
		system_state();								// Get latest system_state
		system_logic();								// Invoke System Logic
    18d2:	4b03      	ldr	r3, [pc, #12]	; (18e0 <main+0x18>)
    18d4:	e7fa      	b.n	18cc <main+0x4>
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	00001881 	.word	0x00001881
    18dc:	0000178d 	.word	0x0000178d
    18e0:	000017e1 	.word	0x000017e1

000018e4 <__gnu_thumb1_case_uqi>:
    18e4:	b402      	push	{r1}
    18e6:	4671      	mov	r1, lr
    18e8:	0849      	lsrs	r1, r1, #1
    18ea:	0049      	lsls	r1, r1, #1
    18ec:	5c09      	ldrb	r1, [r1, r0]
    18ee:	0049      	lsls	r1, r1, #1
    18f0:	448e      	add	lr, r1
    18f2:	bc02      	pop	{r1}
    18f4:	4770      	bx	lr
    18f6:	46c0      	nop			; (mov r8, r8)

000018f8 <__udivsi3>:
    18f8:	2200      	movs	r2, #0
    18fa:	0843      	lsrs	r3, r0, #1
    18fc:	428b      	cmp	r3, r1
    18fe:	d374      	bcc.n	19ea <__udivsi3+0xf2>
    1900:	0903      	lsrs	r3, r0, #4
    1902:	428b      	cmp	r3, r1
    1904:	d35f      	bcc.n	19c6 <__udivsi3+0xce>
    1906:	0a03      	lsrs	r3, r0, #8
    1908:	428b      	cmp	r3, r1
    190a:	d344      	bcc.n	1996 <__udivsi3+0x9e>
    190c:	0b03      	lsrs	r3, r0, #12
    190e:	428b      	cmp	r3, r1
    1910:	d328      	bcc.n	1964 <__udivsi3+0x6c>
    1912:	0c03      	lsrs	r3, r0, #16
    1914:	428b      	cmp	r3, r1
    1916:	d30d      	bcc.n	1934 <__udivsi3+0x3c>
    1918:	22ff      	movs	r2, #255	; 0xff
    191a:	0209      	lsls	r1, r1, #8
    191c:	ba12      	rev	r2, r2
    191e:	0c03      	lsrs	r3, r0, #16
    1920:	428b      	cmp	r3, r1
    1922:	d302      	bcc.n	192a <__udivsi3+0x32>
    1924:	1212      	asrs	r2, r2, #8
    1926:	0209      	lsls	r1, r1, #8
    1928:	d065      	beq.n	19f6 <__udivsi3+0xfe>
    192a:	0b03      	lsrs	r3, r0, #12
    192c:	428b      	cmp	r3, r1
    192e:	d319      	bcc.n	1964 <__udivsi3+0x6c>
    1930:	e000      	b.n	1934 <__udivsi3+0x3c>
    1932:	0a09      	lsrs	r1, r1, #8
    1934:	0bc3      	lsrs	r3, r0, #15
    1936:	428b      	cmp	r3, r1
    1938:	d301      	bcc.n	193e <__udivsi3+0x46>
    193a:	03cb      	lsls	r3, r1, #15
    193c:	1ac0      	subs	r0, r0, r3
    193e:	4152      	adcs	r2, r2
    1940:	0b83      	lsrs	r3, r0, #14
    1942:	428b      	cmp	r3, r1
    1944:	d301      	bcc.n	194a <__udivsi3+0x52>
    1946:	038b      	lsls	r3, r1, #14
    1948:	1ac0      	subs	r0, r0, r3
    194a:	4152      	adcs	r2, r2
    194c:	0b43      	lsrs	r3, r0, #13
    194e:	428b      	cmp	r3, r1
    1950:	d301      	bcc.n	1956 <__udivsi3+0x5e>
    1952:	034b      	lsls	r3, r1, #13
    1954:	1ac0      	subs	r0, r0, r3
    1956:	4152      	adcs	r2, r2
    1958:	0b03      	lsrs	r3, r0, #12
    195a:	428b      	cmp	r3, r1
    195c:	d301      	bcc.n	1962 <__udivsi3+0x6a>
    195e:	030b      	lsls	r3, r1, #12
    1960:	1ac0      	subs	r0, r0, r3
    1962:	4152      	adcs	r2, r2
    1964:	0ac3      	lsrs	r3, r0, #11
    1966:	428b      	cmp	r3, r1
    1968:	d301      	bcc.n	196e <__udivsi3+0x76>
    196a:	02cb      	lsls	r3, r1, #11
    196c:	1ac0      	subs	r0, r0, r3
    196e:	4152      	adcs	r2, r2
    1970:	0a83      	lsrs	r3, r0, #10
    1972:	428b      	cmp	r3, r1
    1974:	d301      	bcc.n	197a <__udivsi3+0x82>
    1976:	028b      	lsls	r3, r1, #10
    1978:	1ac0      	subs	r0, r0, r3
    197a:	4152      	adcs	r2, r2
    197c:	0a43      	lsrs	r3, r0, #9
    197e:	428b      	cmp	r3, r1
    1980:	d301      	bcc.n	1986 <__udivsi3+0x8e>
    1982:	024b      	lsls	r3, r1, #9
    1984:	1ac0      	subs	r0, r0, r3
    1986:	4152      	adcs	r2, r2
    1988:	0a03      	lsrs	r3, r0, #8
    198a:	428b      	cmp	r3, r1
    198c:	d301      	bcc.n	1992 <__udivsi3+0x9a>
    198e:	020b      	lsls	r3, r1, #8
    1990:	1ac0      	subs	r0, r0, r3
    1992:	4152      	adcs	r2, r2
    1994:	d2cd      	bcs.n	1932 <__udivsi3+0x3a>
    1996:	09c3      	lsrs	r3, r0, #7
    1998:	428b      	cmp	r3, r1
    199a:	d301      	bcc.n	19a0 <__udivsi3+0xa8>
    199c:	01cb      	lsls	r3, r1, #7
    199e:	1ac0      	subs	r0, r0, r3
    19a0:	4152      	adcs	r2, r2
    19a2:	0983      	lsrs	r3, r0, #6
    19a4:	428b      	cmp	r3, r1
    19a6:	d301      	bcc.n	19ac <__udivsi3+0xb4>
    19a8:	018b      	lsls	r3, r1, #6
    19aa:	1ac0      	subs	r0, r0, r3
    19ac:	4152      	adcs	r2, r2
    19ae:	0943      	lsrs	r3, r0, #5
    19b0:	428b      	cmp	r3, r1
    19b2:	d301      	bcc.n	19b8 <__udivsi3+0xc0>
    19b4:	014b      	lsls	r3, r1, #5
    19b6:	1ac0      	subs	r0, r0, r3
    19b8:	4152      	adcs	r2, r2
    19ba:	0903      	lsrs	r3, r0, #4
    19bc:	428b      	cmp	r3, r1
    19be:	d301      	bcc.n	19c4 <__udivsi3+0xcc>
    19c0:	010b      	lsls	r3, r1, #4
    19c2:	1ac0      	subs	r0, r0, r3
    19c4:	4152      	adcs	r2, r2
    19c6:	08c3      	lsrs	r3, r0, #3
    19c8:	428b      	cmp	r3, r1
    19ca:	d301      	bcc.n	19d0 <__udivsi3+0xd8>
    19cc:	00cb      	lsls	r3, r1, #3
    19ce:	1ac0      	subs	r0, r0, r3
    19d0:	4152      	adcs	r2, r2
    19d2:	0883      	lsrs	r3, r0, #2
    19d4:	428b      	cmp	r3, r1
    19d6:	d301      	bcc.n	19dc <__udivsi3+0xe4>
    19d8:	008b      	lsls	r3, r1, #2
    19da:	1ac0      	subs	r0, r0, r3
    19dc:	4152      	adcs	r2, r2
    19de:	0843      	lsrs	r3, r0, #1
    19e0:	428b      	cmp	r3, r1
    19e2:	d301      	bcc.n	19e8 <__udivsi3+0xf0>
    19e4:	004b      	lsls	r3, r1, #1
    19e6:	1ac0      	subs	r0, r0, r3
    19e8:	4152      	adcs	r2, r2
    19ea:	1a41      	subs	r1, r0, r1
    19ec:	d200      	bcs.n	19f0 <__udivsi3+0xf8>
    19ee:	4601      	mov	r1, r0
    19f0:	4152      	adcs	r2, r2
    19f2:	4610      	mov	r0, r2
    19f4:	4770      	bx	lr
    19f6:	e7ff      	b.n	19f8 <__udivsi3+0x100>
    19f8:	b501      	push	{r0, lr}
    19fa:	2000      	movs	r0, #0
    19fc:	f000 f806 	bl	1a0c <__aeabi_idiv0>
    1a00:	bd02      	pop	{r1, pc}
    1a02:	46c0      	nop			; (mov r8, r8)

00001a04 <__aeabi_uidivmod>:
    1a04:	2900      	cmp	r1, #0
    1a06:	d0f7      	beq.n	19f8 <__udivsi3+0x100>
    1a08:	e776      	b.n	18f8 <__udivsi3>
    1a0a:	4770      	bx	lr

00001a0c <__aeabi_idiv0>:
    1a0c:	4770      	bx	lr
    1a0e:	46c0      	nop			; (mov r8, r8)

00001a10 <__aeabi_dadd>:
    1a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a12:	4645      	mov	r5, r8
    1a14:	46de      	mov	lr, fp
    1a16:	4657      	mov	r7, sl
    1a18:	464e      	mov	r6, r9
    1a1a:	030c      	lsls	r4, r1, #12
    1a1c:	b5e0      	push	{r5, r6, r7, lr}
    1a1e:	004e      	lsls	r6, r1, #1
    1a20:	0fc9      	lsrs	r1, r1, #31
    1a22:	4688      	mov	r8, r1
    1a24:	000d      	movs	r5, r1
    1a26:	0a61      	lsrs	r1, r4, #9
    1a28:	0f44      	lsrs	r4, r0, #29
    1a2a:	430c      	orrs	r4, r1
    1a2c:	00c7      	lsls	r7, r0, #3
    1a2e:	0319      	lsls	r1, r3, #12
    1a30:	0058      	lsls	r0, r3, #1
    1a32:	0fdb      	lsrs	r3, r3, #31
    1a34:	469b      	mov	fp, r3
    1a36:	0a4b      	lsrs	r3, r1, #9
    1a38:	0f51      	lsrs	r1, r2, #29
    1a3a:	430b      	orrs	r3, r1
    1a3c:	0d76      	lsrs	r6, r6, #21
    1a3e:	0d40      	lsrs	r0, r0, #21
    1a40:	0019      	movs	r1, r3
    1a42:	00d2      	lsls	r2, r2, #3
    1a44:	45d8      	cmp	r8, fp
    1a46:	d100      	bne.n	1a4a <__aeabi_dadd+0x3a>
    1a48:	e0ae      	b.n	1ba8 <__aeabi_dadd+0x198>
    1a4a:	1a35      	subs	r5, r6, r0
    1a4c:	2d00      	cmp	r5, #0
    1a4e:	dc00      	bgt.n	1a52 <__aeabi_dadd+0x42>
    1a50:	e0f6      	b.n	1c40 <__aeabi_dadd+0x230>
    1a52:	2800      	cmp	r0, #0
    1a54:	d10f      	bne.n	1a76 <__aeabi_dadd+0x66>
    1a56:	4313      	orrs	r3, r2
    1a58:	d100      	bne.n	1a5c <__aeabi_dadd+0x4c>
    1a5a:	e0db      	b.n	1c14 <__aeabi_dadd+0x204>
    1a5c:	1e6b      	subs	r3, r5, #1
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d000      	beq.n	1a64 <__aeabi_dadd+0x54>
    1a62:	e137      	b.n	1cd4 <__aeabi_dadd+0x2c4>
    1a64:	1aba      	subs	r2, r7, r2
    1a66:	4297      	cmp	r7, r2
    1a68:	41bf      	sbcs	r7, r7
    1a6a:	1a64      	subs	r4, r4, r1
    1a6c:	427f      	negs	r7, r7
    1a6e:	1be4      	subs	r4, r4, r7
    1a70:	2601      	movs	r6, #1
    1a72:	0017      	movs	r7, r2
    1a74:	e024      	b.n	1ac0 <__aeabi_dadd+0xb0>
    1a76:	4bc6      	ldr	r3, [pc, #792]	; (1d90 <__aeabi_dadd+0x380>)
    1a78:	429e      	cmp	r6, r3
    1a7a:	d04d      	beq.n	1b18 <__aeabi_dadd+0x108>
    1a7c:	2380      	movs	r3, #128	; 0x80
    1a7e:	041b      	lsls	r3, r3, #16
    1a80:	4319      	orrs	r1, r3
    1a82:	2d38      	cmp	r5, #56	; 0x38
    1a84:	dd00      	ble.n	1a88 <__aeabi_dadd+0x78>
    1a86:	e107      	b.n	1c98 <__aeabi_dadd+0x288>
    1a88:	2d1f      	cmp	r5, #31
    1a8a:	dd00      	ble.n	1a8e <__aeabi_dadd+0x7e>
    1a8c:	e138      	b.n	1d00 <__aeabi_dadd+0x2f0>
    1a8e:	2020      	movs	r0, #32
    1a90:	1b43      	subs	r3, r0, r5
    1a92:	469a      	mov	sl, r3
    1a94:	000b      	movs	r3, r1
    1a96:	4650      	mov	r0, sl
    1a98:	4083      	lsls	r3, r0
    1a9a:	4699      	mov	r9, r3
    1a9c:	0013      	movs	r3, r2
    1a9e:	4648      	mov	r0, r9
    1aa0:	40eb      	lsrs	r3, r5
    1aa2:	4318      	orrs	r0, r3
    1aa4:	0003      	movs	r3, r0
    1aa6:	4650      	mov	r0, sl
    1aa8:	4082      	lsls	r2, r0
    1aaa:	1e50      	subs	r0, r2, #1
    1aac:	4182      	sbcs	r2, r0
    1aae:	40e9      	lsrs	r1, r5
    1ab0:	431a      	orrs	r2, r3
    1ab2:	1aba      	subs	r2, r7, r2
    1ab4:	1a61      	subs	r1, r4, r1
    1ab6:	4297      	cmp	r7, r2
    1ab8:	41a4      	sbcs	r4, r4
    1aba:	0017      	movs	r7, r2
    1abc:	4264      	negs	r4, r4
    1abe:	1b0c      	subs	r4, r1, r4
    1ac0:	0223      	lsls	r3, r4, #8
    1ac2:	d562      	bpl.n	1b8a <__aeabi_dadd+0x17a>
    1ac4:	0264      	lsls	r4, r4, #9
    1ac6:	0a65      	lsrs	r5, r4, #9
    1ac8:	2d00      	cmp	r5, #0
    1aca:	d100      	bne.n	1ace <__aeabi_dadd+0xbe>
    1acc:	e0df      	b.n	1c8e <__aeabi_dadd+0x27e>
    1ace:	0028      	movs	r0, r5
    1ad0:	f001 fbe4 	bl	329c <__clzsi2>
    1ad4:	0003      	movs	r3, r0
    1ad6:	3b08      	subs	r3, #8
    1ad8:	2b1f      	cmp	r3, #31
    1ada:	dd00      	ble.n	1ade <__aeabi_dadd+0xce>
    1adc:	e0d2      	b.n	1c84 <__aeabi_dadd+0x274>
    1ade:	2220      	movs	r2, #32
    1ae0:	003c      	movs	r4, r7
    1ae2:	1ad2      	subs	r2, r2, r3
    1ae4:	409d      	lsls	r5, r3
    1ae6:	40d4      	lsrs	r4, r2
    1ae8:	409f      	lsls	r7, r3
    1aea:	4325      	orrs	r5, r4
    1aec:	429e      	cmp	r6, r3
    1aee:	dd00      	ble.n	1af2 <__aeabi_dadd+0xe2>
    1af0:	e0c4      	b.n	1c7c <__aeabi_dadd+0x26c>
    1af2:	1b9e      	subs	r6, r3, r6
    1af4:	1c73      	adds	r3, r6, #1
    1af6:	2b1f      	cmp	r3, #31
    1af8:	dd00      	ble.n	1afc <__aeabi_dadd+0xec>
    1afa:	e0f1      	b.n	1ce0 <__aeabi_dadd+0x2d0>
    1afc:	2220      	movs	r2, #32
    1afe:	0038      	movs	r0, r7
    1b00:	0029      	movs	r1, r5
    1b02:	1ad2      	subs	r2, r2, r3
    1b04:	40d8      	lsrs	r0, r3
    1b06:	4091      	lsls	r1, r2
    1b08:	4097      	lsls	r7, r2
    1b0a:	002c      	movs	r4, r5
    1b0c:	4301      	orrs	r1, r0
    1b0e:	1e78      	subs	r0, r7, #1
    1b10:	4187      	sbcs	r7, r0
    1b12:	40dc      	lsrs	r4, r3
    1b14:	2600      	movs	r6, #0
    1b16:	430f      	orrs	r7, r1
    1b18:	077b      	lsls	r3, r7, #29
    1b1a:	d009      	beq.n	1b30 <__aeabi_dadd+0x120>
    1b1c:	230f      	movs	r3, #15
    1b1e:	403b      	ands	r3, r7
    1b20:	2b04      	cmp	r3, #4
    1b22:	d005      	beq.n	1b30 <__aeabi_dadd+0x120>
    1b24:	1d3b      	adds	r3, r7, #4
    1b26:	42bb      	cmp	r3, r7
    1b28:	41bf      	sbcs	r7, r7
    1b2a:	427f      	negs	r7, r7
    1b2c:	19e4      	adds	r4, r4, r7
    1b2e:	001f      	movs	r7, r3
    1b30:	0223      	lsls	r3, r4, #8
    1b32:	d52c      	bpl.n	1b8e <__aeabi_dadd+0x17e>
    1b34:	4b96      	ldr	r3, [pc, #600]	; (1d90 <__aeabi_dadd+0x380>)
    1b36:	3601      	adds	r6, #1
    1b38:	429e      	cmp	r6, r3
    1b3a:	d100      	bne.n	1b3e <__aeabi_dadd+0x12e>
    1b3c:	e09a      	b.n	1c74 <__aeabi_dadd+0x264>
    1b3e:	4645      	mov	r5, r8
    1b40:	4b94      	ldr	r3, [pc, #592]	; (1d94 <__aeabi_dadd+0x384>)
    1b42:	08ff      	lsrs	r7, r7, #3
    1b44:	401c      	ands	r4, r3
    1b46:	0760      	lsls	r0, r4, #29
    1b48:	0576      	lsls	r6, r6, #21
    1b4a:	0264      	lsls	r4, r4, #9
    1b4c:	4307      	orrs	r7, r0
    1b4e:	0b24      	lsrs	r4, r4, #12
    1b50:	0d76      	lsrs	r6, r6, #21
    1b52:	2100      	movs	r1, #0
    1b54:	0324      	lsls	r4, r4, #12
    1b56:	0b23      	lsrs	r3, r4, #12
    1b58:	0d0c      	lsrs	r4, r1, #20
    1b5a:	4a8f      	ldr	r2, [pc, #572]	; (1d98 <__aeabi_dadd+0x388>)
    1b5c:	0524      	lsls	r4, r4, #20
    1b5e:	431c      	orrs	r4, r3
    1b60:	4014      	ands	r4, r2
    1b62:	0533      	lsls	r3, r6, #20
    1b64:	4323      	orrs	r3, r4
    1b66:	005b      	lsls	r3, r3, #1
    1b68:	07ed      	lsls	r5, r5, #31
    1b6a:	085b      	lsrs	r3, r3, #1
    1b6c:	432b      	orrs	r3, r5
    1b6e:	0038      	movs	r0, r7
    1b70:	0019      	movs	r1, r3
    1b72:	bc3c      	pop	{r2, r3, r4, r5}
    1b74:	4690      	mov	r8, r2
    1b76:	4699      	mov	r9, r3
    1b78:	46a2      	mov	sl, r4
    1b7a:	46ab      	mov	fp, r5
    1b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b7e:	4664      	mov	r4, ip
    1b80:	4304      	orrs	r4, r0
    1b82:	d100      	bne.n	1b86 <__aeabi_dadd+0x176>
    1b84:	e211      	b.n	1faa <__aeabi_dadd+0x59a>
    1b86:	0004      	movs	r4, r0
    1b88:	4667      	mov	r7, ip
    1b8a:	077b      	lsls	r3, r7, #29
    1b8c:	d1c6      	bne.n	1b1c <__aeabi_dadd+0x10c>
    1b8e:	4645      	mov	r5, r8
    1b90:	0760      	lsls	r0, r4, #29
    1b92:	08ff      	lsrs	r7, r7, #3
    1b94:	4307      	orrs	r7, r0
    1b96:	08e4      	lsrs	r4, r4, #3
    1b98:	4b7d      	ldr	r3, [pc, #500]	; (1d90 <__aeabi_dadd+0x380>)
    1b9a:	429e      	cmp	r6, r3
    1b9c:	d030      	beq.n	1c00 <__aeabi_dadd+0x1f0>
    1b9e:	0324      	lsls	r4, r4, #12
    1ba0:	0576      	lsls	r6, r6, #21
    1ba2:	0b24      	lsrs	r4, r4, #12
    1ba4:	0d76      	lsrs	r6, r6, #21
    1ba6:	e7d4      	b.n	1b52 <__aeabi_dadd+0x142>
    1ba8:	1a33      	subs	r3, r6, r0
    1baa:	469a      	mov	sl, r3
    1bac:	2b00      	cmp	r3, #0
    1bae:	dd78      	ble.n	1ca2 <__aeabi_dadd+0x292>
    1bb0:	2800      	cmp	r0, #0
    1bb2:	d031      	beq.n	1c18 <__aeabi_dadd+0x208>
    1bb4:	4876      	ldr	r0, [pc, #472]	; (1d90 <__aeabi_dadd+0x380>)
    1bb6:	4286      	cmp	r6, r0
    1bb8:	d0ae      	beq.n	1b18 <__aeabi_dadd+0x108>
    1bba:	2080      	movs	r0, #128	; 0x80
    1bbc:	0400      	lsls	r0, r0, #16
    1bbe:	4301      	orrs	r1, r0
    1bc0:	4653      	mov	r3, sl
    1bc2:	2b38      	cmp	r3, #56	; 0x38
    1bc4:	dc00      	bgt.n	1bc8 <__aeabi_dadd+0x1b8>
    1bc6:	e0e9      	b.n	1d9c <__aeabi_dadd+0x38c>
    1bc8:	430a      	orrs	r2, r1
    1bca:	1e51      	subs	r1, r2, #1
    1bcc:	418a      	sbcs	r2, r1
    1bce:	2100      	movs	r1, #0
    1bd0:	19d2      	adds	r2, r2, r7
    1bd2:	42ba      	cmp	r2, r7
    1bd4:	41bf      	sbcs	r7, r7
    1bd6:	1909      	adds	r1, r1, r4
    1bd8:	427c      	negs	r4, r7
    1bda:	0017      	movs	r7, r2
    1bdc:	190c      	adds	r4, r1, r4
    1bde:	0223      	lsls	r3, r4, #8
    1be0:	d5d3      	bpl.n	1b8a <__aeabi_dadd+0x17a>
    1be2:	4b6b      	ldr	r3, [pc, #428]	; (1d90 <__aeabi_dadd+0x380>)
    1be4:	3601      	adds	r6, #1
    1be6:	429e      	cmp	r6, r3
    1be8:	d100      	bne.n	1bec <__aeabi_dadd+0x1dc>
    1bea:	e13a      	b.n	1e62 <__aeabi_dadd+0x452>
    1bec:	2001      	movs	r0, #1
    1bee:	4b69      	ldr	r3, [pc, #420]	; (1d94 <__aeabi_dadd+0x384>)
    1bf0:	401c      	ands	r4, r3
    1bf2:	087b      	lsrs	r3, r7, #1
    1bf4:	4007      	ands	r7, r0
    1bf6:	431f      	orrs	r7, r3
    1bf8:	07e0      	lsls	r0, r4, #31
    1bfa:	4307      	orrs	r7, r0
    1bfc:	0864      	lsrs	r4, r4, #1
    1bfe:	e78b      	b.n	1b18 <__aeabi_dadd+0x108>
    1c00:	0023      	movs	r3, r4
    1c02:	433b      	orrs	r3, r7
    1c04:	d100      	bne.n	1c08 <__aeabi_dadd+0x1f8>
    1c06:	e1cb      	b.n	1fa0 <__aeabi_dadd+0x590>
    1c08:	2280      	movs	r2, #128	; 0x80
    1c0a:	0312      	lsls	r2, r2, #12
    1c0c:	4314      	orrs	r4, r2
    1c0e:	0324      	lsls	r4, r4, #12
    1c10:	0b24      	lsrs	r4, r4, #12
    1c12:	e79e      	b.n	1b52 <__aeabi_dadd+0x142>
    1c14:	002e      	movs	r6, r5
    1c16:	e77f      	b.n	1b18 <__aeabi_dadd+0x108>
    1c18:	0008      	movs	r0, r1
    1c1a:	4310      	orrs	r0, r2
    1c1c:	d100      	bne.n	1c20 <__aeabi_dadd+0x210>
    1c1e:	e0b4      	b.n	1d8a <__aeabi_dadd+0x37a>
    1c20:	1e58      	subs	r0, r3, #1
    1c22:	2800      	cmp	r0, #0
    1c24:	d000      	beq.n	1c28 <__aeabi_dadd+0x218>
    1c26:	e0de      	b.n	1de6 <__aeabi_dadd+0x3d6>
    1c28:	18ba      	adds	r2, r7, r2
    1c2a:	42ba      	cmp	r2, r7
    1c2c:	419b      	sbcs	r3, r3
    1c2e:	1864      	adds	r4, r4, r1
    1c30:	425b      	negs	r3, r3
    1c32:	18e4      	adds	r4, r4, r3
    1c34:	0017      	movs	r7, r2
    1c36:	2601      	movs	r6, #1
    1c38:	0223      	lsls	r3, r4, #8
    1c3a:	d5a6      	bpl.n	1b8a <__aeabi_dadd+0x17a>
    1c3c:	2602      	movs	r6, #2
    1c3e:	e7d5      	b.n	1bec <__aeabi_dadd+0x1dc>
    1c40:	2d00      	cmp	r5, #0
    1c42:	d16e      	bne.n	1d22 <__aeabi_dadd+0x312>
    1c44:	1c70      	adds	r0, r6, #1
    1c46:	0540      	lsls	r0, r0, #21
    1c48:	0d40      	lsrs	r0, r0, #21
    1c4a:	2801      	cmp	r0, #1
    1c4c:	dc00      	bgt.n	1c50 <__aeabi_dadd+0x240>
    1c4e:	e0f9      	b.n	1e44 <__aeabi_dadd+0x434>
    1c50:	1ab8      	subs	r0, r7, r2
    1c52:	4684      	mov	ip, r0
    1c54:	4287      	cmp	r7, r0
    1c56:	4180      	sbcs	r0, r0
    1c58:	1ae5      	subs	r5, r4, r3
    1c5a:	4240      	negs	r0, r0
    1c5c:	1a2d      	subs	r5, r5, r0
    1c5e:	0228      	lsls	r0, r5, #8
    1c60:	d400      	bmi.n	1c64 <__aeabi_dadd+0x254>
    1c62:	e089      	b.n	1d78 <__aeabi_dadd+0x368>
    1c64:	1bd7      	subs	r7, r2, r7
    1c66:	42ba      	cmp	r2, r7
    1c68:	4192      	sbcs	r2, r2
    1c6a:	1b1c      	subs	r4, r3, r4
    1c6c:	4252      	negs	r2, r2
    1c6e:	1aa5      	subs	r5, r4, r2
    1c70:	46d8      	mov	r8, fp
    1c72:	e729      	b.n	1ac8 <__aeabi_dadd+0xb8>
    1c74:	4645      	mov	r5, r8
    1c76:	2400      	movs	r4, #0
    1c78:	2700      	movs	r7, #0
    1c7a:	e76a      	b.n	1b52 <__aeabi_dadd+0x142>
    1c7c:	4c45      	ldr	r4, [pc, #276]	; (1d94 <__aeabi_dadd+0x384>)
    1c7e:	1af6      	subs	r6, r6, r3
    1c80:	402c      	ands	r4, r5
    1c82:	e749      	b.n	1b18 <__aeabi_dadd+0x108>
    1c84:	003d      	movs	r5, r7
    1c86:	3828      	subs	r0, #40	; 0x28
    1c88:	4085      	lsls	r5, r0
    1c8a:	2700      	movs	r7, #0
    1c8c:	e72e      	b.n	1aec <__aeabi_dadd+0xdc>
    1c8e:	0038      	movs	r0, r7
    1c90:	f001 fb04 	bl	329c <__clzsi2>
    1c94:	3020      	adds	r0, #32
    1c96:	e71d      	b.n	1ad4 <__aeabi_dadd+0xc4>
    1c98:	430a      	orrs	r2, r1
    1c9a:	1e51      	subs	r1, r2, #1
    1c9c:	418a      	sbcs	r2, r1
    1c9e:	2100      	movs	r1, #0
    1ca0:	e707      	b.n	1ab2 <__aeabi_dadd+0xa2>
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d000      	beq.n	1ca8 <__aeabi_dadd+0x298>
    1ca6:	e0f3      	b.n	1e90 <__aeabi_dadd+0x480>
    1ca8:	1c70      	adds	r0, r6, #1
    1caa:	0543      	lsls	r3, r0, #21
    1cac:	0d5b      	lsrs	r3, r3, #21
    1cae:	2b01      	cmp	r3, #1
    1cb0:	dc00      	bgt.n	1cb4 <__aeabi_dadd+0x2a4>
    1cb2:	e0ad      	b.n	1e10 <__aeabi_dadd+0x400>
    1cb4:	4b36      	ldr	r3, [pc, #216]	; (1d90 <__aeabi_dadd+0x380>)
    1cb6:	4298      	cmp	r0, r3
    1cb8:	d100      	bne.n	1cbc <__aeabi_dadd+0x2ac>
    1cba:	e0d1      	b.n	1e60 <__aeabi_dadd+0x450>
    1cbc:	18ba      	adds	r2, r7, r2
    1cbe:	42ba      	cmp	r2, r7
    1cc0:	41bf      	sbcs	r7, r7
    1cc2:	1864      	adds	r4, r4, r1
    1cc4:	427f      	negs	r7, r7
    1cc6:	19e4      	adds	r4, r4, r7
    1cc8:	07e7      	lsls	r7, r4, #31
    1cca:	0852      	lsrs	r2, r2, #1
    1ccc:	4317      	orrs	r7, r2
    1cce:	0864      	lsrs	r4, r4, #1
    1cd0:	0006      	movs	r6, r0
    1cd2:	e721      	b.n	1b18 <__aeabi_dadd+0x108>
    1cd4:	482e      	ldr	r0, [pc, #184]	; (1d90 <__aeabi_dadd+0x380>)
    1cd6:	4285      	cmp	r5, r0
    1cd8:	d100      	bne.n	1cdc <__aeabi_dadd+0x2cc>
    1cda:	e093      	b.n	1e04 <__aeabi_dadd+0x3f4>
    1cdc:	001d      	movs	r5, r3
    1cde:	e6d0      	b.n	1a82 <__aeabi_dadd+0x72>
    1ce0:	0029      	movs	r1, r5
    1ce2:	3e1f      	subs	r6, #31
    1ce4:	40f1      	lsrs	r1, r6
    1ce6:	2b20      	cmp	r3, #32
    1ce8:	d100      	bne.n	1cec <__aeabi_dadd+0x2dc>
    1cea:	e08d      	b.n	1e08 <__aeabi_dadd+0x3f8>
    1cec:	2240      	movs	r2, #64	; 0x40
    1cee:	1ad3      	subs	r3, r2, r3
    1cf0:	409d      	lsls	r5, r3
    1cf2:	432f      	orrs	r7, r5
    1cf4:	1e7d      	subs	r5, r7, #1
    1cf6:	41af      	sbcs	r7, r5
    1cf8:	2400      	movs	r4, #0
    1cfa:	430f      	orrs	r7, r1
    1cfc:	2600      	movs	r6, #0
    1cfe:	e744      	b.n	1b8a <__aeabi_dadd+0x17a>
    1d00:	002b      	movs	r3, r5
    1d02:	0008      	movs	r0, r1
    1d04:	3b20      	subs	r3, #32
    1d06:	40d8      	lsrs	r0, r3
    1d08:	0003      	movs	r3, r0
    1d0a:	2d20      	cmp	r5, #32
    1d0c:	d100      	bne.n	1d10 <__aeabi_dadd+0x300>
    1d0e:	e07d      	b.n	1e0c <__aeabi_dadd+0x3fc>
    1d10:	2040      	movs	r0, #64	; 0x40
    1d12:	1b45      	subs	r5, r0, r5
    1d14:	40a9      	lsls	r1, r5
    1d16:	430a      	orrs	r2, r1
    1d18:	1e51      	subs	r1, r2, #1
    1d1a:	418a      	sbcs	r2, r1
    1d1c:	2100      	movs	r1, #0
    1d1e:	431a      	orrs	r2, r3
    1d20:	e6c7      	b.n	1ab2 <__aeabi_dadd+0xa2>
    1d22:	2e00      	cmp	r6, #0
    1d24:	d050      	beq.n	1dc8 <__aeabi_dadd+0x3b8>
    1d26:	4e1a      	ldr	r6, [pc, #104]	; (1d90 <__aeabi_dadd+0x380>)
    1d28:	42b0      	cmp	r0, r6
    1d2a:	d057      	beq.n	1ddc <__aeabi_dadd+0x3cc>
    1d2c:	2680      	movs	r6, #128	; 0x80
    1d2e:	426b      	negs	r3, r5
    1d30:	4699      	mov	r9, r3
    1d32:	0436      	lsls	r6, r6, #16
    1d34:	4334      	orrs	r4, r6
    1d36:	464b      	mov	r3, r9
    1d38:	2b38      	cmp	r3, #56	; 0x38
    1d3a:	dd00      	ble.n	1d3e <__aeabi_dadd+0x32e>
    1d3c:	e0d6      	b.n	1eec <__aeabi_dadd+0x4dc>
    1d3e:	2b1f      	cmp	r3, #31
    1d40:	dd00      	ble.n	1d44 <__aeabi_dadd+0x334>
    1d42:	e135      	b.n	1fb0 <__aeabi_dadd+0x5a0>
    1d44:	2620      	movs	r6, #32
    1d46:	1af5      	subs	r5, r6, r3
    1d48:	0026      	movs	r6, r4
    1d4a:	40ae      	lsls	r6, r5
    1d4c:	46b2      	mov	sl, r6
    1d4e:	003e      	movs	r6, r7
    1d50:	40de      	lsrs	r6, r3
    1d52:	46ac      	mov	ip, r5
    1d54:	0035      	movs	r5, r6
    1d56:	4656      	mov	r6, sl
    1d58:	432e      	orrs	r6, r5
    1d5a:	4665      	mov	r5, ip
    1d5c:	40af      	lsls	r7, r5
    1d5e:	1e7d      	subs	r5, r7, #1
    1d60:	41af      	sbcs	r7, r5
    1d62:	40dc      	lsrs	r4, r3
    1d64:	4337      	orrs	r7, r6
    1d66:	1bd7      	subs	r7, r2, r7
    1d68:	42ba      	cmp	r2, r7
    1d6a:	4192      	sbcs	r2, r2
    1d6c:	1b0c      	subs	r4, r1, r4
    1d6e:	4252      	negs	r2, r2
    1d70:	1aa4      	subs	r4, r4, r2
    1d72:	0006      	movs	r6, r0
    1d74:	46d8      	mov	r8, fp
    1d76:	e6a3      	b.n	1ac0 <__aeabi_dadd+0xb0>
    1d78:	4664      	mov	r4, ip
    1d7a:	4667      	mov	r7, ip
    1d7c:	432c      	orrs	r4, r5
    1d7e:	d000      	beq.n	1d82 <__aeabi_dadd+0x372>
    1d80:	e6a2      	b.n	1ac8 <__aeabi_dadd+0xb8>
    1d82:	2500      	movs	r5, #0
    1d84:	2600      	movs	r6, #0
    1d86:	2700      	movs	r7, #0
    1d88:	e706      	b.n	1b98 <__aeabi_dadd+0x188>
    1d8a:	001e      	movs	r6, r3
    1d8c:	e6c4      	b.n	1b18 <__aeabi_dadd+0x108>
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	000007ff 	.word	0x000007ff
    1d94:	ff7fffff 	.word	0xff7fffff
    1d98:	800fffff 	.word	0x800fffff
    1d9c:	2b1f      	cmp	r3, #31
    1d9e:	dc63      	bgt.n	1e68 <__aeabi_dadd+0x458>
    1da0:	2020      	movs	r0, #32
    1da2:	1ac3      	subs	r3, r0, r3
    1da4:	0008      	movs	r0, r1
    1da6:	4098      	lsls	r0, r3
    1da8:	469c      	mov	ip, r3
    1daa:	4683      	mov	fp, r0
    1dac:	4653      	mov	r3, sl
    1dae:	0010      	movs	r0, r2
    1db0:	40d8      	lsrs	r0, r3
    1db2:	0003      	movs	r3, r0
    1db4:	4658      	mov	r0, fp
    1db6:	4318      	orrs	r0, r3
    1db8:	4663      	mov	r3, ip
    1dba:	409a      	lsls	r2, r3
    1dbc:	1e53      	subs	r3, r2, #1
    1dbe:	419a      	sbcs	r2, r3
    1dc0:	4653      	mov	r3, sl
    1dc2:	4302      	orrs	r2, r0
    1dc4:	40d9      	lsrs	r1, r3
    1dc6:	e703      	b.n	1bd0 <__aeabi_dadd+0x1c0>
    1dc8:	0026      	movs	r6, r4
    1dca:	433e      	orrs	r6, r7
    1dcc:	d006      	beq.n	1ddc <__aeabi_dadd+0x3cc>
    1dce:	43eb      	mvns	r3, r5
    1dd0:	4699      	mov	r9, r3
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d0c7      	beq.n	1d66 <__aeabi_dadd+0x356>
    1dd6:	4e94      	ldr	r6, [pc, #592]	; (2028 <__aeabi_dadd+0x618>)
    1dd8:	42b0      	cmp	r0, r6
    1dda:	d1ac      	bne.n	1d36 <__aeabi_dadd+0x326>
    1ddc:	000c      	movs	r4, r1
    1dde:	0017      	movs	r7, r2
    1de0:	0006      	movs	r6, r0
    1de2:	46d8      	mov	r8, fp
    1de4:	e698      	b.n	1b18 <__aeabi_dadd+0x108>
    1de6:	4b90      	ldr	r3, [pc, #576]	; (2028 <__aeabi_dadd+0x618>)
    1de8:	459a      	cmp	sl, r3
    1dea:	d00b      	beq.n	1e04 <__aeabi_dadd+0x3f4>
    1dec:	4682      	mov	sl, r0
    1dee:	e6e7      	b.n	1bc0 <__aeabi_dadd+0x1b0>
    1df0:	2800      	cmp	r0, #0
    1df2:	d000      	beq.n	1df6 <__aeabi_dadd+0x3e6>
    1df4:	e09e      	b.n	1f34 <__aeabi_dadd+0x524>
    1df6:	0018      	movs	r0, r3
    1df8:	4310      	orrs	r0, r2
    1dfa:	d100      	bne.n	1dfe <__aeabi_dadd+0x3ee>
    1dfc:	e0e9      	b.n	1fd2 <__aeabi_dadd+0x5c2>
    1dfe:	001c      	movs	r4, r3
    1e00:	0017      	movs	r7, r2
    1e02:	46d8      	mov	r8, fp
    1e04:	4e88      	ldr	r6, [pc, #544]	; (2028 <__aeabi_dadd+0x618>)
    1e06:	e687      	b.n	1b18 <__aeabi_dadd+0x108>
    1e08:	2500      	movs	r5, #0
    1e0a:	e772      	b.n	1cf2 <__aeabi_dadd+0x2e2>
    1e0c:	2100      	movs	r1, #0
    1e0e:	e782      	b.n	1d16 <__aeabi_dadd+0x306>
    1e10:	0023      	movs	r3, r4
    1e12:	433b      	orrs	r3, r7
    1e14:	2e00      	cmp	r6, #0
    1e16:	d000      	beq.n	1e1a <__aeabi_dadd+0x40a>
    1e18:	e0ab      	b.n	1f72 <__aeabi_dadd+0x562>
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d100      	bne.n	1e20 <__aeabi_dadd+0x410>
    1e1e:	e0e7      	b.n	1ff0 <__aeabi_dadd+0x5e0>
    1e20:	000b      	movs	r3, r1
    1e22:	4313      	orrs	r3, r2
    1e24:	d100      	bne.n	1e28 <__aeabi_dadd+0x418>
    1e26:	e677      	b.n	1b18 <__aeabi_dadd+0x108>
    1e28:	18ba      	adds	r2, r7, r2
    1e2a:	42ba      	cmp	r2, r7
    1e2c:	41bf      	sbcs	r7, r7
    1e2e:	1864      	adds	r4, r4, r1
    1e30:	427f      	negs	r7, r7
    1e32:	19e4      	adds	r4, r4, r7
    1e34:	0223      	lsls	r3, r4, #8
    1e36:	d400      	bmi.n	1e3a <__aeabi_dadd+0x42a>
    1e38:	e0f2      	b.n	2020 <__aeabi_dadd+0x610>
    1e3a:	4b7c      	ldr	r3, [pc, #496]	; (202c <__aeabi_dadd+0x61c>)
    1e3c:	0017      	movs	r7, r2
    1e3e:	401c      	ands	r4, r3
    1e40:	0006      	movs	r6, r0
    1e42:	e669      	b.n	1b18 <__aeabi_dadd+0x108>
    1e44:	0020      	movs	r0, r4
    1e46:	4338      	orrs	r0, r7
    1e48:	2e00      	cmp	r6, #0
    1e4a:	d1d1      	bne.n	1df0 <__aeabi_dadd+0x3e0>
    1e4c:	2800      	cmp	r0, #0
    1e4e:	d15b      	bne.n	1f08 <__aeabi_dadd+0x4f8>
    1e50:	001c      	movs	r4, r3
    1e52:	4314      	orrs	r4, r2
    1e54:	d100      	bne.n	1e58 <__aeabi_dadd+0x448>
    1e56:	e0a8      	b.n	1faa <__aeabi_dadd+0x59a>
    1e58:	001c      	movs	r4, r3
    1e5a:	0017      	movs	r7, r2
    1e5c:	46d8      	mov	r8, fp
    1e5e:	e65b      	b.n	1b18 <__aeabi_dadd+0x108>
    1e60:	0006      	movs	r6, r0
    1e62:	2400      	movs	r4, #0
    1e64:	2700      	movs	r7, #0
    1e66:	e697      	b.n	1b98 <__aeabi_dadd+0x188>
    1e68:	4650      	mov	r0, sl
    1e6a:	000b      	movs	r3, r1
    1e6c:	3820      	subs	r0, #32
    1e6e:	40c3      	lsrs	r3, r0
    1e70:	4699      	mov	r9, r3
    1e72:	4653      	mov	r3, sl
    1e74:	2b20      	cmp	r3, #32
    1e76:	d100      	bne.n	1e7a <__aeabi_dadd+0x46a>
    1e78:	e095      	b.n	1fa6 <__aeabi_dadd+0x596>
    1e7a:	2340      	movs	r3, #64	; 0x40
    1e7c:	4650      	mov	r0, sl
    1e7e:	1a1b      	subs	r3, r3, r0
    1e80:	4099      	lsls	r1, r3
    1e82:	430a      	orrs	r2, r1
    1e84:	1e51      	subs	r1, r2, #1
    1e86:	418a      	sbcs	r2, r1
    1e88:	464b      	mov	r3, r9
    1e8a:	2100      	movs	r1, #0
    1e8c:	431a      	orrs	r2, r3
    1e8e:	e69f      	b.n	1bd0 <__aeabi_dadd+0x1c0>
    1e90:	2e00      	cmp	r6, #0
    1e92:	d130      	bne.n	1ef6 <__aeabi_dadd+0x4e6>
    1e94:	0026      	movs	r6, r4
    1e96:	433e      	orrs	r6, r7
    1e98:	d067      	beq.n	1f6a <__aeabi_dadd+0x55a>
    1e9a:	43db      	mvns	r3, r3
    1e9c:	469a      	mov	sl, r3
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d01c      	beq.n	1edc <__aeabi_dadd+0x4cc>
    1ea2:	4e61      	ldr	r6, [pc, #388]	; (2028 <__aeabi_dadd+0x618>)
    1ea4:	42b0      	cmp	r0, r6
    1ea6:	d060      	beq.n	1f6a <__aeabi_dadd+0x55a>
    1ea8:	4653      	mov	r3, sl
    1eaa:	2b38      	cmp	r3, #56	; 0x38
    1eac:	dd00      	ble.n	1eb0 <__aeabi_dadd+0x4a0>
    1eae:	e096      	b.n	1fde <__aeabi_dadd+0x5ce>
    1eb0:	2b1f      	cmp	r3, #31
    1eb2:	dd00      	ble.n	1eb6 <__aeabi_dadd+0x4a6>
    1eb4:	e09f      	b.n	1ff6 <__aeabi_dadd+0x5e6>
    1eb6:	2620      	movs	r6, #32
    1eb8:	1af3      	subs	r3, r6, r3
    1eba:	0026      	movs	r6, r4
    1ebc:	409e      	lsls	r6, r3
    1ebe:	469c      	mov	ip, r3
    1ec0:	46b3      	mov	fp, r6
    1ec2:	4653      	mov	r3, sl
    1ec4:	003e      	movs	r6, r7
    1ec6:	40de      	lsrs	r6, r3
    1ec8:	0033      	movs	r3, r6
    1eca:	465e      	mov	r6, fp
    1ecc:	431e      	orrs	r6, r3
    1ece:	4663      	mov	r3, ip
    1ed0:	409f      	lsls	r7, r3
    1ed2:	1e7b      	subs	r3, r7, #1
    1ed4:	419f      	sbcs	r7, r3
    1ed6:	4653      	mov	r3, sl
    1ed8:	40dc      	lsrs	r4, r3
    1eda:	4337      	orrs	r7, r6
    1edc:	18bf      	adds	r7, r7, r2
    1ede:	4297      	cmp	r7, r2
    1ee0:	4192      	sbcs	r2, r2
    1ee2:	1864      	adds	r4, r4, r1
    1ee4:	4252      	negs	r2, r2
    1ee6:	18a4      	adds	r4, r4, r2
    1ee8:	0006      	movs	r6, r0
    1eea:	e678      	b.n	1bde <__aeabi_dadd+0x1ce>
    1eec:	4327      	orrs	r7, r4
    1eee:	1e7c      	subs	r4, r7, #1
    1ef0:	41a7      	sbcs	r7, r4
    1ef2:	2400      	movs	r4, #0
    1ef4:	e737      	b.n	1d66 <__aeabi_dadd+0x356>
    1ef6:	4e4c      	ldr	r6, [pc, #304]	; (2028 <__aeabi_dadd+0x618>)
    1ef8:	42b0      	cmp	r0, r6
    1efa:	d036      	beq.n	1f6a <__aeabi_dadd+0x55a>
    1efc:	2680      	movs	r6, #128	; 0x80
    1efe:	425b      	negs	r3, r3
    1f00:	0436      	lsls	r6, r6, #16
    1f02:	469a      	mov	sl, r3
    1f04:	4334      	orrs	r4, r6
    1f06:	e7cf      	b.n	1ea8 <__aeabi_dadd+0x498>
    1f08:	0018      	movs	r0, r3
    1f0a:	4310      	orrs	r0, r2
    1f0c:	d100      	bne.n	1f10 <__aeabi_dadd+0x500>
    1f0e:	e603      	b.n	1b18 <__aeabi_dadd+0x108>
    1f10:	1ab8      	subs	r0, r7, r2
    1f12:	4684      	mov	ip, r0
    1f14:	4567      	cmp	r7, ip
    1f16:	41ad      	sbcs	r5, r5
    1f18:	1ae0      	subs	r0, r4, r3
    1f1a:	426d      	negs	r5, r5
    1f1c:	1b40      	subs	r0, r0, r5
    1f1e:	0205      	lsls	r5, r0, #8
    1f20:	d400      	bmi.n	1f24 <__aeabi_dadd+0x514>
    1f22:	e62c      	b.n	1b7e <__aeabi_dadd+0x16e>
    1f24:	1bd7      	subs	r7, r2, r7
    1f26:	42ba      	cmp	r2, r7
    1f28:	4192      	sbcs	r2, r2
    1f2a:	1b1c      	subs	r4, r3, r4
    1f2c:	4252      	negs	r2, r2
    1f2e:	1aa4      	subs	r4, r4, r2
    1f30:	46d8      	mov	r8, fp
    1f32:	e5f1      	b.n	1b18 <__aeabi_dadd+0x108>
    1f34:	0018      	movs	r0, r3
    1f36:	4310      	orrs	r0, r2
    1f38:	d100      	bne.n	1f3c <__aeabi_dadd+0x52c>
    1f3a:	e763      	b.n	1e04 <__aeabi_dadd+0x3f4>
    1f3c:	08f8      	lsrs	r0, r7, #3
    1f3e:	0767      	lsls	r7, r4, #29
    1f40:	4307      	orrs	r7, r0
    1f42:	2080      	movs	r0, #128	; 0x80
    1f44:	08e4      	lsrs	r4, r4, #3
    1f46:	0300      	lsls	r0, r0, #12
    1f48:	4204      	tst	r4, r0
    1f4a:	d008      	beq.n	1f5e <__aeabi_dadd+0x54e>
    1f4c:	08dd      	lsrs	r5, r3, #3
    1f4e:	4205      	tst	r5, r0
    1f50:	d105      	bne.n	1f5e <__aeabi_dadd+0x54e>
    1f52:	08d2      	lsrs	r2, r2, #3
    1f54:	0759      	lsls	r1, r3, #29
    1f56:	4311      	orrs	r1, r2
    1f58:	000f      	movs	r7, r1
    1f5a:	002c      	movs	r4, r5
    1f5c:	46d8      	mov	r8, fp
    1f5e:	0f7b      	lsrs	r3, r7, #29
    1f60:	00e4      	lsls	r4, r4, #3
    1f62:	431c      	orrs	r4, r3
    1f64:	00ff      	lsls	r7, r7, #3
    1f66:	4e30      	ldr	r6, [pc, #192]	; (2028 <__aeabi_dadd+0x618>)
    1f68:	e5d6      	b.n	1b18 <__aeabi_dadd+0x108>
    1f6a:	000c      	movs	r4, r1
    1f6c:	0017      	movs	r7, r2
    1f6e:	0006      	movs	r6, r0
    1f70:	e5d2      	b.n	1b18 <__aeabi_dadd+0x108>
    1f72:	2b00      	cmp	r3, #0
    1f74:	d038      	beq.n	1fe8 <__aeabi_dadd+0x5d8>
    1f76:	000b      	movs	r3, r1
    1f78:	4313      	orrs	r3, r2
    1f7a:	d100      	bne.n	1f7e <__aeabi_dadd+0x56e>
    1f7c:	e742      	b.n	1e04 <__aeabi_dadd+0x3f4>
    1f7e:	08f8      	lsrs	r0, r7, #3
    1f80:	0767      	lsls	r7, r4, #29
    1f82:	4307      	orrs	r7, r0
    1f84:	2080      	movs	r0, #128	; 0x80
    1f86:	08e4      	lsrs	r4, r4, #3
    1f88:	0300      	lsls	r0, r0, #12
    1f8a:	4204      	tst	r4, r0
    1f8c:	d0e7      	beq.n	1f5e <__aeabi_dadd+0x54e>
    1f8e:	08cb      	lsrs	r3, r1, #3
    1f90:	4203      	tst	r3, r0
    1f92:	d1e4      	bne.n	1f5e <__aeabi_dadd+0x54e>
    1f94:	08d2      	lsrs	r2, r2, #3
    1f96:	0749      	lsls	r1, r1, #29
    1f98:	4311      	orrs	r1, r2
    1f9a:	000f      	movs	r7, r1
    1f9c:	001c      	movs	r4, r3
    1f9e:	e7de      	b.n	1f5e <__aeabi_dadd+0x54e>
    1fa0:	2700      	movs	r7, #0
    1fa2:	2400      	movs	r4, #0
    1fa4:	e5d5      	b.n	1b52 <__aeabi_dadd+0x142>
    1fa6:	2100      	movs	r1, #0
    1fa8:	e76b      	b.n	1e82 <__aeabi_dadd+0x472>
    1faa:	2500      	movs	r5, #0
    1fac:	2700      	movs	r7, #0
    1fae:	e5f3      	b.n	1b98 <__aeabi_dadd+0x188>
    1fb0:	464e      	mov	r6, r9
    1fb2:	0025      	movs	r5, r4
    1fb4:	3e20      	subs	r6, #32
    1fb6:	40f5      	lsrs	r5, r6
    1fb8:	464b      	mov	r3, r9
    1fba:	002e      	movs	r6, r5
    1fbc:	2b20      	cmp	r3, #32
    1fbe:	d02d      	beq.n	201c <__aeabi_dadd+0x60c>
    1fc0:	2540      	movs	r5, #64	; 0x40
    1fc2:	1aed      	subs	r5, r5, r3
    1fc4:	40ac      	lsls	r4, r5
    1fc6:	4327      	orrs	r7, r4
    1fc8:	1e7c      	subs	r4, r7, #1
    1fca:	41a7      	sbcs	r7, r4
    1fcc:	2400      	movs	r4, #0
    1fce:	4337      	orrs	r7, r6
    1fd0:	e6c9      	b.n	1d66 <__aeabi_dadd+0x356>
    1fd2:	2480      	movs	r4, #128	; 0x80
    1fd4:	2500      	movs	r5, #0
    1fd6:	0324      	lsls	r4, r4, #12
    1fd8:	4e13      	ldr	r6, [pc, #76]	; (2028 <__aeabi_dadd+0x618>)
    1fda:	2700      	movs	r7, #0
    1fdc:	e5dc      	b.n	1b98 <__aeabi_dadd+0x188>
    1fde:	4327      	orrs	r7, r4
    1fe0:	1e7c      	subs	r4, r7, #1
    1fe2:	41a7      	sbcs	r7, r4
    1fe4:	2400      	movs	r4, #0
    1fe6:	e779      	b.n	1edc <__aeabi_dadd+0x4cc>
    1fe8:	000c      	movs	r4, r1
    1fea:	0017      	movs	r7, r2
    1fec:	4e0e      	ldr	r6, [pc, #56]	; (2028 <__aeabi_dadd+0x618>)
    1fee:	e593      	b.n	1b18 <__aeabi_dadd+0x108>
    1ff0:	000c      	movs	r4, r1
    1ff2:	0017      	movs	r7, r2
    1ff4:	e590      	b.n	1b18 <__aeabi_dadd+0x108>
    1ff6:	4656      	mov	r6, sl
    1ff8:	0023      	movs	r3, r4
    1ffa:	3e20      	subs	r6, #32
    1ffc:	40f3      	lsrs	r3, r6
    1ffe:	4699      	mov	r9, r3
    2000:	4653      	mov	r3, sl
    2002:	2b20      	cmp	r3, #32
    2004:	d00e      	beq.n	2024 <__aeabi_dadd+0x614>
    2006:	2340      	movs	r3, #64	; 0x40
    2008:	4656      	mov	r6, sl
    200a:	1b9b      	subs	r3, r3, r6
    200c:	409c      	lsls	r4, r3
    200e:	4327      	orrs	r7, r4
    2010:	1e7c      	subs	r4, r7, #1
    2012:	41a7      	sbcs	r7, r4
    2014:	464b      	mov	r3, r9
    2016:	2400      	movs	r4, #0
    2018:	431f      	orrs	r7, r3
    201a:	e75f      	b.n	1edc <__aeabi_dadd+0x4cc>
    201c:	2400      	movs	r4, #0
    201e:	e7d2      	b.n	1fc6 <__aeabi_dadd+0x5b6>
    2020:	0017      	movs	r7, r2
    2022:	e5b2      	b.n	1b8a <__aeabi_dadd+0x17a>
    2024:	2400      	movs	r4, #0
    2026:	e7f2      	b.n	200e <__aeabi_dadd+0x5fe>
    2028:	000007ff 	.word	0x000007ff
    202c:	ff7fffff 	.word	0xff7fffff

00002030 <__aeabi_ddiv>:
    2030:	b5f0      	push	{r4, r5, r6, r7, lr}
    2032:	4657      	mov	r7, sl
    2034:	4645      	mov	r5, r8
    2036:	46de      	mov	lr, fp
    2038:	464e      	mov	r6, r9
    203a:	b5e0      	push	{r5, r6, r7, lr}
    203c:	004c      	lsls	r4, r1, #1
    203e:	030e      	lsls	r6, r1, #12
    2040:	b087      	sub	sp, #28
    2042:	4683      	mov	fp, r0
    2044:	4692      	mov	sl, r2
    2046:	001d      	movs	r5, r3
    2048:	4680      	mov	r8, r0
    204a:	0b36      	lsrs	r6, r6, #12
    204c:	0d64      	lsrs	r4, r4, #21
    204e:	0fcf      	lsrs	r7, r1, #31
    2050:	2c00      	cmp	r4, #0
    2052:	d04f      	beq.n	20f4 <__aeabi_ddiv+0xc4>
    2054:	4b6f      	ldr	r3, [pc, #444]	; (2214 <__aeabi_ddiv+0x1e4>)
    2056:	429c      	cmp	r4, r3
    2058:	d035      	beq.n	20c6 <__aeabi_ddiv+0x96>
    205a:	2380      	movs	r3, #128	; 0x80
    205c:	0f42      	lsrs	r2, r0, #29
    205e:	041b      	lsls	r3, r3, #16
    2060:	00f6      	lsls	r6, r6, #3
    2062:	4313      	orrs	r3, r2
    2064:	4333      	orrs	r3, r6
    2066:	4699      	mov	r9, r3
    2068:	00c3      	lsls	r3, r0, #3
    206a:	4698      	mov	r8, r3
    206c:	4b6a      	ldr	r3, [pc, #424]	; (2218 <__aeabi_ddiv+0x1e8>)
    206e:	2600      	movs	r6, #0
    2070:	469c      	mov	ip, r3
    2072:	2300      	movs	r3, #0
    2074:	4464      	add	r4, ip
    2076:	9303      	str	r3, [sp, #12]
    2078:	032b      	lsls	r3, r5, #12
    207a:	0b1b      	lsrs	r3, r3, #12
    207c:	469b      	mov	fp, r3
    207e:	006b      	lsls	r3, r5, #1
    2080:	0fed      	lsrs	r5, r5, #31
    2082:	4650      	mov	r0, sl
    2084:	0d5b      	lsrs	r3, r3, #21
    2086:	9501      	str	r5, [sp, #4]
    2088:	d05e      	beq.n	2148 <__aeabi_ddiv+0x118>
    208a:	4a62      	ldr	r2, [pc, #392]	; (2214 <__aeabi_ddiv+0x1e4>)
    208c:	4293      	cmp	r3, r2
    208e:	d053      	beq.n	2138 <__aeabi_ddiv+0x108>
    2090:	465a      	mov	r2, fp
    2092:	00d1      	lsls	r1, r2, #3
    2094:	2280      	movs	r2, #128	; 0x80
    2096:	0f40      	lsrs	r0, r0, #29
    2098:	0412      	lsls	r2, r2, #16
    209a:	4302      	orrs	r2, r0
    209c:	430a      	orrs	r2, r1
    209e:	4693      	mov	fp, r2
    20a0:	4652      	mov	r2, sl
    20a2:	00d1      	lsls	r1, r2, #3
    20a4:	4a5c      	ldr	r2, [pc, #368]	; (2218 <__aeabi_ddiv+0x1e8>)
    20a6:	4694      	mov	ip, r2
    20a8:	2200      	movs	r2, #0
    20aa:	4463      	add	r3, ip
    20ac:	0038      	movs	r0, r7
    20ae:	4068      	eors	r0, r5
    20b0:	4684      	mov	ip, r0
    20b2:	9002      	str	r0, [sp, #8]
    20b4:	1ae4      	subs	r4, r4, r3
    20b6:	4316      	orrs	r6, r2
    20b8:	2e0f      	cmp	r6, #15
    20ba:	d900      	bls.n	20be <__aeabi_ddiv+0x8e>
    20bc:	e0b4      	b.n	2228 <__aeabi_ddiv+0x1f8>
    20be:	4b57      	ldr	r3, [pc, #348]	; (221c <__aeabi_ddiv+0x1ec>)
    20c0:	00b6      	lsls	r6, r6, #2
    20c2:	599b      	ldr	r3, [r3, r6]
    20c4:	469f      	mov	pc, r3
    20c6:	0003      	movs	r3, r0
    20c8:	4333      	orrs	r3, r6
    20ca:	4699      	mov	r9, r3
    20cc:	d16c      	bne.n	21a8 <__aeabi_ddiv+0x178>
    20ce:	2300      	movs	r3, #0
    20d0:	4698      	mov	r8, r3
    20d2:	3302      	adds	r3, #2
    20d4:	2608      	movs	r6, #8
    20d6:	9303      	str	r3, [sp, #12]
    20d8:	e7ce      	b.n	2078 <__aeabi_ddiv+0x48>
    20da:	46cb      	mov	fp, r9
    20dc:	4641      	mov	r1, r8
    20de:	9a03      	ldr	r2, [sp, #12]
    20e0:	9701      	str	r7, [sp, #4]
    20e2:	2a02      	cmp	r2, #2
    20e4:	d165      	bne.n	21b2 <__aeabi_ddiv+0x182>
    20e6:	9b01      	ldr	r3, [sp, #4]
    20e8:	4c4a      	ldr	r4, [pc, #296]	; (2214 <__aeabi_ddiv+0x1e4>)
    20ea:	469c      	mov	ip, r3
    20ec:	2300      	movs	r3, #0
    20ee:	2200      	movs	r2, #0
    20f0:	4698      	mov	r8, r3
    20f2:	e06b      	b.n	21cc <__aeabi_ddiv+0x19c>
    20f4:	0003      	movs	r3, r0
    20f6:	4333      	orrs	r3, r6
    20f8:	4699      	mov	r9, r3
    20fa:	d04e      	beq.n	219a <__aeabi_ddiv+0x16a>
    20fc:	2e00      	cmp	r6, #0
    20fe:	d100      	bne.n	2102 <__aeabi_ddiv+0xd2>
    2100:	e1bc      	b.n	247c <__aeabi_ddiv+0x44c>
    2102:	0030      	movs	r0, r6
    2104:	f001 f8ca 	bl	329c <__clzsi2>
    2108:	0003      	movs	r3, r0
    210a:	3b0b      	subs	r3, #11
    210c:	2b1c      	cmp	r3, #28
    210e:	dd00      	ble.n	2112 <__aeabi_ddiv+0xe2>
    2110:	e1ac      	b.n	246c <__aeabi_ddiv+0x43c>
    2112:	221d      	movs	r2, #29
    2114:	1ad3      	subs	r3, r2, r3
    2116:	465a      	mov	r2, fp
    2118:	0001      	movs	r1, r0
    211a:	40da      	lsrs	r2, r3
    211c:	3908      	subs	r1, #8
    211e:	408e      	lsls	r6, r1
    2120:	0013      	movs	r3, r2
    2122:	4333      	orrs	r3, r6
    2124:	4699      	mov	r9, r3
    2126:	465b      	mov	r3, fp
    2128:	408b      	lsls	r3, r1
    212a:	4698      	mov	r8, r3
    212c:	2300      	movs	r3, #0
    212e:	4c3c      	ldr	r4, [pc, #240]	; (2220 <__aeabi_ddiv+0x1f0>)
    2130:	2600      	movs	r6, #0
    2132:	1a24      	subs	r4, r4, r0
    2134:	9303      	str	r3, [sp, #12]
    2136:	e79f      	b.n	2078 <__aeabi_ddiv+0x48>
    2138:	4651      	mov	r1, sl
    213a:	465a      	mov	r2, fp
    213c:	4311      	orrs	r1, r2
    213e:	d129      	bne.n	2194 <__aeabi_ddiv+0x164>
    2140:	2200      	movs	r2, #0
    2142:	4693      	mov	fp, r2
    2144:	3202      	adds	r2, #2
    2146:	e7b1      	b.n	20ac <__aeabi_ddiv+0x7c>
    2148:	4659      	mov	r1, fp
    214a:	4301      	orrs	r1, r0
    214c:	d01e      	beq.n	218c <__aeabi_ddiv+0x15c>
    214e:	465b      	mov	r3, fp
    2150:	2b00      	cmp	r3, #0
    2152:	d100      	bne.n	2156 <__aeabi_ddiv+0x126>
    2154:	e19e      	b.n	2494 <__aeabi_ddiv+0x464>
    2156:	4658      	mov	r0, fp
    2158:	f001 f8a0 	bl	329c <__clzsi2>
    215c:	0003      	movs	r3, r0
    215e:	3b0b      	subs	r3, #11
    2160:	2b1c      	cmp	r3, #28
    2162:	dd00      	ble.n	2166 <__aeabi_ddiv+0x136>
    2164:	e18f      	b.n	2486 <__aeabi_ddiv+0x456>
    2166:	0002      	movs	r2, r0
    2168:	4659      	mov	r1, fp
    216a:	3a08      	subs	r2, #8
    216c:	4091      	lsls	r1, r2
    216e:	468b      	mov	fp, r1
    2170:	211d      	movs	r1, #29
    2172:	1acb      	subs	r3, r1, r3
    2174:	4651      	mov	r1, sl
    2176:	40d9      	lsrs	r1, r3
    2178:	000b      	movs	r3, r1
    217a:	4659      	mov	r1, fp
    217c:	430b      	orrs	r3, r1
    217e:	4651      	mov	r1, sl
    2180:	469b      	mov	fp, r3
    2182:	4091      	lsls	r1, r2
    2184:	4b26      	ldr	r3, [pc, #152]	; (2220 <__aeabi_ddiv+0x1f0>)
    2186:	2200      	movs	r2, #0
    2188:	1a1b      	subs	r3, r3, r0
    218a:	e78f      	b.n	20ac <__aeabi_ddiv+0x7c>
    218c:	2300      	movs	r3, #0
    218e:	2201      	movs	r2, #1
    2190:	469b      	mov	fp, r3
    2192:	e78b      	b.n	20ac <__aeabi_ddiv+0x7c>
    2194:	4651      	mov	r1, sl
    2196:	2203      	movs	r2, #3
    2198:	e788      	b.n	20ac <__aeabi_ddiv+0x7c>
    219a:	2300      	movs	r3, #0
    219c:	4698      	mov	r8, r3
    219e:	3301      	adds	r3, #1
    21a0:	2604      	movs	r6, #4
    21a2:	2400      	movs	r4, #0
    21a4:	9303      	str	r3, [sp, #12]
    21a6:	e767      	b.n	2078 <__aeabi_ddiv+0x48>
    21a8:	2303      	movs	r3, #3
    21aa:	46b1      	mov	r9, r6
    21ac:	9303      	str	r3, [sp, #12]
    21ae:	260c      	movs	r6, #12
    21b0:	e762      	b.n	2078 <__aeabi_ddiv+0x48>
    21b2:	2a03      	cmp	r2, #3
    21b4:	d100      	bne.n	21b8 <__aeabi_ddiv+0x188>
    21b6:	e25c      	b.n	2672 <__aeabi_ddiv+0x642>
    21b8:	9b01      	ldr	r3, [sp, #4]
    21ba:	2a01      	cmp	r2, #1
    21bc:	d000      	beq.n	21c0 <__aeabi_ddiv+0x190>
    21be:	e1e4      	b.n	258a <__aeabi_ddiv+0x55a>
    21c0:	4013      	ands	r3, r2
    21c2:	469c      	mov	ip, r3
    21c4:	2300      	movs	r3, #0
    21c6:	2400      	movs	r4, #0
    21c8:	2200      	movs	r2, #0
    21ca:	4698      	mov	r8, r3
    21cc:	2100      	movs	r1, #0
    21ce:	0312      	lsls	r2, r2, #12
    21d0:	0b13      	lsrs	r3, r2, #12
    21d2:	0d0a      	lsrs	r2, r1, #20
    21d4:	0512      	lsls	r2, r2, #20
    21d6:	431a      	orrs	r2, r3
    21d8:	0523      	lsls	r3, r4, #20
    21da:	4c12      	ldr	r4, [pc, #72]	; (2224 <__aeabi_ddiv+0x1f4>)
    21dc:	4640      	mov	r0, r8
    21de:	4022      	ands	r2, r4
    21e0:	4313      	orrs	r3, r2
    21e2:	4662      	mov	r2, ip
    21e4:	005b      	lsls	r3, r3, #1
    21e6:	07d2      	lsls	r2, r2, #31
    21e8:	085b      	lsrs	r3, r3, #1
    21ea:	4313      	orrs	r3, r2
    21ec:	0019      	movs	r1, r3
    21ee:	b007      	add	sp, #28
    21f0:	bc3c      	pop	{r2, r3, r4, r5}
    21f2:	4690      	mov	r8, r2
    21f4:	4699      	mov	r9, r3
    21f6:	46a2      	mov	sl, r4
    21f8:	46ab      	mov	fp, r5
    21fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21fc:	2300      	movs	r3, #0
    21fe:	2280      	movs	r2, #128	; 0x80
    2200:	469c      	mov	ip, r3
    2202:	0312      	lsls	r2, r2, #12
    2204:	4698      	mov	r8, r3
    2206:	4c03      	ldr	r4, [pc, #12]	; (2214 <__aeabi_ddiv+0x1e4>)
    2208:	e7e0      	b.n	21cc <__aeabi_ddiv+0x19c>
    220a:	2300      	movs	r3, #0
    220c:	4c01      	ldr	r4, [pc, #4]	; (2214 <__aeabi_ddiv+0x1e4>)
    220e:	2200      	movs	r2, #0
    2210:	4698      	mov	r8, r3
    2212:	e7db      	b.n	21cc <__aeabi_ddiv+0x19c>
    2214:	000007ff 	.word	0x000007ff
    2218:	fffffc01 	.word	0xfffffc01
    221c:	00003360 	.word	0x00003360
    2220:	fffffc0d 	.word	0xfffffc0d
    2224:	800fffff 	.word	0x800fffff
    2228:	45d9      	cmp	r9, fp
    222a:	d900      	bls.n	222e <__aeabi_ddiv+0x1fe>
    222c:	e139      	b.n	24a2 <__aeabi_ddiv+0x472>
    222e:	d100      	bne.n	2232 <__aeabi_ddiv+0x202>
    2230:	e134      	b.n	249c <__aeabi_ddiv+0x46c>
    2232:	2300      	movs	r3, #0
    2234:	4646      	mov	r6, r8
    2236:	464d      	mov	r5, r9
    2238:	469a      	mov	sl, r3
    223a:	3c01      	subs	r4, #1
    223c:	465b      	mov	r3, fp
    223e:	0e0a      	lsrs	r2, r1, #24
    2240:	021b      	lsls	r3, r3, #8
    2242:	431a      	orrs	r2, r3
    2244:	020b      	lsls	r3, r1, #8
    2246:	0c17      	lsrs	r7, r2, #16
    2248:	9303      	str	r3, [sp, #12]
    224a:	0413      	lsls	r3, r2, #16
    224c:	0c1b      	lsrs	r3, r3, #16
    224e:	0039      	movs	r1, r7
    2250:	0028      	movs	r0, r5
    2252:	4690      	mov	r8, r2
    2254:	9301      	str	r3, [sp, #4]
    2256:	f7ff fb4f 	bl	18f8 <__udivsi3>
    225a:	0002      	movs	r2, r0
    225c:	9b01      	ldr	r3, [sp, #4]
    225e:	4683      	mov	fp, r0
    2260:	435a      	muls	r2, r3
    2262:	0028      	movs	r0, r5
    2264:	0039      	movs	r1, r7
    2266:	4691      	mov	r9, r2
    2268:	f7ff fbcc 	bl	1a04 <__aeabi_uidivmod>
    226c:	0c35      	lsrs	r5, r6, #16
    226e:	0409      	lsls	r1, r1, #16
    2270:	430d      	orrs	r5, r1
    2272:	45a9      	cmp	r9, r5
    2274:	d90d      	bls.n	2292 <__aeabi_ddiv+0x262>
    2276:	465b      	mov	r3, fp
    2278:	4445      	add	r5, r8
    227a:	3b01      	subs	r3, #1
    227c:	45a8      	cmp	r8, r5
    227e:	d900      	bls.n	2282 <__aeabi_ddiv+0x252>
    2280:	e13a      	b.n	24f8 <__aeabi_ddiv+0x4c8>
    2282:	45a9      	cmp	r9, r5
    2284:	d800      	bhi.n	2288 <__aeabi_ddiv+0x258>
    2286:	e137      	b.n	24f8 <__aeabi_ddiv+0x4c8>
    2288:	2302      	movs	r3, #2
    228a:	425b      	negs	r3, r3
    228c:	469c      	mov	ip, r3
    228e:	4445      	add	r5, r8
    2290:	44e3      	add	fp, ip
    2292:	464b      	mov	r3, r9
    2294:	1aeb      	subs	r3, r5, r3
    2296:	0039      	movs	r1, r7
    2298:	0018      	movs	r0, r3
    229a:	9304      	str	r3, [sp, #16]
    229c:	f7ff fb2c 	bl	18f8 <__udivsi3>
    22a0:	9b01      	ldr	r3, [sp, #4]
    22a2:	0005      	movs	r5, r0
    22a4:	4343      	muls	r3, r0
    22a6:	0039      	movs	r1, r7
    22a8:	9804      	ldr	r0, [sp, #16]
    22aa:	4699      	mov	r9, r3
    22ac:	f7ff fbaa 	bl	1a04 <__aeabi_uidivmod>
    22b0:	0433      	lsls	r3, r6, #16
    22b2:	0409      	lsls	r1, r1, #16
    22b4:	0c1b      	lsrs	r3, r3, #16
    22b6:	430b      	orrs	r3, r1
    22b8:	4599      	cmp	r9, r3
    22ba:	d909      	bls.n	22d0 <__aeabi_ddiv+0x2a0>
    22bc:	4443      	add	r3, r8
    22be:	1e6a      	subs	r2, r5, #1
    22c0:	4598      	cmp	r8, r3
    22c2:	d900      	bls.n	22c6 <__aeabi_ddiv+0x296>
    22c4:	e11a      	b.n	24fc <__aeabi_ddiv+0x4cc>
    22c6:	4599      	cmp	r9, r3
    22c8:	d800      	bhi.n	22cc <__aeabi_ddiv+0x29c>
    22ca:	e117      	b.n	24fc <__aeabi_ddiv+0x4cc>
    22cc:	3d02      	subs	r5, #2
    22ce:	4443      	add	r3, r8
    22d0:	464a      	mov	r2, r9
    22d2:	1a9b      	subs	r3, r3, r2
    22d4:	465a      	mov	r2, fp
    22d6:	0412      	lsls	r2, r2, #16
    22d8:	432a      	orrs	r2, r5
    22da:	9903      	ldr	r1, [sp, #12]
    22dc:	4693      	mov	fp, r2
    22de:	0c10      	lsrs	r0, r2, #16
    22e0:	0c0a      	lsrs	r2, r1, #16
    22e2:	4691      	mov	r9, r2
    22e4:	0409      	lsls	r1, r1, #16
    22e6:	465a      	mov	r2, fp
    22e8:	0c09      	lsrs	r1, r1, #16
    22ea:	464e      	mov	r6, r9
    22ec:	000d      	movs	r5, r1
    22ee:	0412      	lsls	r2, r2, #16
    22f0:	0c12      	lsrs	r2, r2, #16
    22f2:	4345      	muls	r5, r0
    22f4:	9105      	str	r1, [sp, #20]
    22f6:	4351      	muls	r1, r2
    22f8:	4372      	muls	r2, r6
    22fa:	4370      	muls	r0, r6
    22fc:	1952      	adds	r2, r2, r5
    22fe:	0c0e      	lsrs	r6, r1, #16
    2300:	18b2      	adds	r2, r6, r2
    2302:	4295      	cmp	r5, r2
    2304:	d903      	bls.n	230e <__aeabi_ddiv+0x2de>
    2306:	2580      	movs	r5, #128	; 0x80
    2308:	026d      	lsls	r5, r5, #9
    230a:	46ac      	mov	ip, r5
    230c:	4460      	add	r0, ip
    230e:	0c15      	lsrs	r5, r2, #16
    2310:	0409      	lsls	r1, r1, #16
    2312:	0412      	lsls	r2, r2, #16
    2314:	0c09      	lsrs	r1, r1, #16
    2316:	1828      	adds	r0, r5, r0
    2318:	1852      	adds	r2, r2, r1
    231a:	4283      	cmp	r3, r0
    231c:	d200      	bcs.n	2320 <__aeabi_ddiv+0x2f0>
    231e:	e0ce      	b.n	24be <__aeabi_ddiv+0x48e>
    2320:	d100      	bne.n	2324 <__aeabi_ddiv+0x2f4>
    2322:	e0c8      	b.n	24b6 <__aeabi_ddiv+0x486>
    2324:	1a1d      	subs	r5, r3, r0
    2326:	4653      	mov	r3, sl
    2328:	1a9e      	subs	r6, r3, r2
    232a:	45b2      	cmp	sl, r6
    232c:	4192      	sbcs	r2, r2
    232e:	4252      	negs	r2, r2
    2330:	1aab      	subs	r3, r5, r2
    2332:	469a      	mov	sl, r3
    2334:	4598      	cmp	r8, r3
    2336:	d100      	bne.n	233a <__aeabi_ddiv+0x30a>
    2338:	e117      	b.n	256a <__aeabi_ddiv+0x53a>
    233a:	0039      	movs	r1, r7
    233c:	0018      	movs	r0, r3
    233e:	f7ff fadb 	bl	18f8 <__udivsi3>
    2342:	9b01      	ldr	r3, [sp, #4]
    2344:	0005      	movs	r5, r0
    2346:	4343      	muls	r3, r0
    2348:	0039      	movs	r1, r7
    234a:	4650      	mov	r0, sl
    234c:	9304      	str	r3, [sp, #16]
    234e:	f7ff fb59 	bl	1a04 <__aeabi_uidivmod>
    2352:	9804      	ldr	r0, [sp, #16]
    2354:	040b      	lsls	r3, r1, #16
    2356:	0c31      	lsrs	r1, r6, #16
    2358:	4319      	orrs	r1, r3
    235a:	4288      	cmp	r0, r1
    235c:	d909      	bls.n	2372 <__aeabi_ddiv+0x342>
    235e:	4441      	add	r1, r8
    2360:	1e6b      	subs	r3, r5, #1
    2362:	4588      	cmp	r8, r1
    2364:	d900      	bls.n	2368 <__aeabi_ddiv+0x338>
    2366:	e107      	b.n	2578 <__aeabi_ddiv+0x548>
    2368:	4288      	cmp	r0, r1
    236a:	d800      	bhi.n	236e <__aeabi_ddiv+0x33e>
    236c:	e104      	b.n	2578 <__aeabi_ddiv+0x548>
    236e:	3d02      	subs	r5, #2
    2370:	4441      	add	r1, r8
    2372:	9b04      	ldr	r3, [sp, #16]
    2374:	1acb      	subs	r3, r1, r3
    2376:	0018      	movs	r0, r3
    2378:	0039      	movs	r1, r7
    237a:	9304      	str	r3, [sp, #16]
    237c:	f7ff fabc 	bl	18f8 <__udivsi3>
    2380:	9b01      	ldr	r3, [sp, #4]
    2382:	4682      	mov	sl, r0
    2384:	4343      	muls	r3, r0
    2386:	0039      	movs	r1, r7
    2388:	9804      	ldr	r0, [sp, #16]
    238a:	9301      	str	r3, [sp, #4]
    238c:	f7ff fb3a 	bl	1a04 <__aeabi_uidivmod>
    2390:	9801      	ldr	r0, [sp, #4]
    2392:	040b      	lsls	r3, r1, #16
    2394:	0431      	lsls	r1, r6, #16
    2396:	0c09      	lsrs	r1, r1, #16
    2398:	4319      	orrs	r1, r3
    239a:	4288      	cmp	r0, r1
    239c:	d90d      	bls.n	23ba <__aeabi_ddiv+0x38a>
    239e:	4653      	mov	r3, sl
    23a0:	4441      	add	r1, r8
    23a2:	3b01      	subs	r3, #1
    23a4:	4588      	cmp	r8, r1
    23a6:	d900      	bls.n	23aa <__aeabi_ddiv+0x37a>
    23a8:	e0e8      	b.n	257c <__aeabi_ddiv+0x54c>
    23aa:	4288      	cmp	r0, r1
    23ac:	d800      	bhi.n	23b0 <__aeabi_ddiv+0x380>
    23ae:	e0e5      	b.n	257c <__aeabi_ddiv+0x54c>
    23b0:	2302      	movs	r3, #2
    23b2:	425b      	negs	r3, r3
    23b4:	469c      	mov	ip, r3
    23b6:	4441      	add	r1, r8
    23b8:	44e2      	add	sl, ip
    23ba:	9b01      	ldr	r3, [sp, #4]
    23bc:	042d      	lsls	r5, r5, #16
    23be:	1ace      	subs	r6, r1, r3
    23c0:	4651      	mov	r1, sl
    23c2:	4329      	orrs	r1, r5
    23c4:	9d05      	ldr	r5, [sp, #20]
    23c6:	464f      	mov	r7, r9
    23c8:	002a      	movs	r2, r5
    23ca:	040b      	lsls	r3, r1, #16
    23cc:	0c08      	lsrs	r0, r1, #16
    23ce:	0c1b      	lsrs	r3, r3, #16
    23d0:	435a      	muls	r2, r3
    23d2:	4345      	muls	r5, r0
    23d4:	437b      	muls	r3, r7
    23d6:	4378      	muls	r0, r7
    23d8:	195b      	adds	r3, r3, r5
    23da:	0c17      	lsrs	r7, r2, #16
    23dc:	18fb      	adds	r3, r7, r3
    23de:	429d      	cmp	r5, r3
    23e0:	d903      	bls.n	23ea <__aeabi_ddiv+0x3ba>
    23e2:	2580      	movs	r5, #128	; 0x80
    23e4:	026d      	lsls	r5, r5, #9
    23e6:	46ac      	mov	ip, r5
    23e8:	4460      	add	r0, ip
    23ea:	0c1d      	lsrs	r5, r3, #16
    23ec:	0412      	lsls	r2, r2, #16
    23ee:	041b      	lsls	r3, r3, #16
    23f0:	0c12      	lsrs	r2, r2, #16
    23f2:	1828      	adds	r0, r5, r0
    23f4:	189b      	adds	r3, r3, r2
    23f6:	4286      	cmp	r6, r0
    23f8:	d200      	bcs.n	23fc <__aeabi_ddiv+0x3cc>
    23fa:	e093      	b.n	2524 <__aeabi_ddiv+0x4f4>
    23fc:	d100      	bne.n	2400 <__aeabi_ddiv+0x3d0>
    23fe:	e08e      	b.n	251e <__aeabi_ddiv+0x4ee>
    2400:	2301      	movs	r3, #1
    2402:	4319      	orrs	r1, r3
    2404:	4ba0      	ldr	r3, [pc, #640]	; (2688 <__aeabi_ddiv+0x658>)
    2406:	18e3      	adds	r3, r4, r3
    2408:	2b00      	cmp	r3, #0
    240a:	dc00      	bgt.n	240e <__aeabi_ddiv+0x3de>
    240c:	e099      	b.n	2542 <__aeabi_ddiv+0x512>
    240e:	074a      	lsls	r2, r1, #29
    2410:	d000      	beq.n	2414 <__aeabi_ddiv+0x3e4>
    2412:	e09e      	b.n	2552 <__aeabi_ddiv+0x522>
    2414:	465a      	mov	r2, fp
    2416:	01d2      	lsls	r2, r2, #7
    2418:	d506      	bpl.n	2428 <__aeabi_ddiv+0x3f8>
    241a:	465a      	mov	r2, fp
    241c:	4b9b      	ldr	r3, [pc, #620]	; (268c <__aeabi_ddiv+0x65c>)
    241e:	401a      	ands	r2, r3
    2420:	2380      	movs	r3, #128	; 0x80
    2422:	4693      	mov	fp, r2
    2424:	00db      	lsls	r3, r3, #3
    2426:	18e3      	adds	r3, r4, r3
    2428:	4a99      	ldr	r2, [pc, #612]	; (2690 <__aeabi_ddiv+0x660>)
    242a:	4293      	cmp	r3, r2
    242c:	dd68      	ble.n	2500 <__aeabi_ddiv+0x4d0>
    242e:	2301      	movs	r3, #1
    2430:	9a02      	ldr	r2, [sp, #8]
    2432:	4c98      	ldr	r4, [pc, #608]	; (2694 <__aeabi_ddiv+0x664>)
    2434:	401a      	ands	r2, r3
    2436:	2300      	movs	r3, #0
    2438:	4694      	mov	ip, r2
    243a:	4698      	mov	r8, r3
    243c:	2200      	movs	r2, #0
    243e:	e6c5      	b.n	21cc <__aeabi_ddiv+0x19c>
    2440:	2280      	movs	r2, #128	; 0x80
    2442:	464b      	mov	r3, r9
    2444:	0312      	lsls	r2, r2, #12
    2446:	4213      	tst	r3, r2
    2448:	d00a      	beq.n	2460 <__aeabi_ddiv+0x430>
    244a:	465b      	mov	r3, fp
    244c:	4213      	tst	r3, r2
    244e:	d106      	bne.n	245e <__aeabi_ddiv+0x42e>
    2450:	431a      	orrs	r2, r3
    2452:	0312      	lsls	r2, r2, #12
    2454:	0b12      	lsrs	r2, r2, #12
    2456:	46ac      	mov	ip, r5
    2458:	4688      	mov	r8, r1
    245a:	4c8e      	ldr	r4, [pc, #568]	; (2694 <__aeabi_ddiv+0x664>)
    245c:	e6b6      	b.n	21cc <__aeabi_ddiv+0x19c>
    245e:	464b      	mov	r3, r9
    2460:	431a      	orrs	r2, r3
    2462:	0312      	lsls	r2, r2, #12
    2464:	0b12      	lsrs	r2, r2, #12
    2466:	46bc      	mov	ip, r7
    2468:	4c8a      	ldr	r4, [pc, #552]	; (2694 <__aeabi_ddiv+0x664>)
    246a:	e6af      	b.n	21cc <__aeabi_ddiv+0x19c>
    246c:	0003      	movs	r3, r0
    246e:	465a      	mov	r2, fp
    2470:	3b28      	subs	r3, #40	; 0x28
    2472:	409a      	lsls	r2, r3
    2474:	2300      	movs	r3, #0
    2476:	4691      	mov	r9, r2
    2478:	4698      	mov	r8, r3
    247a:	e657      	b.n	212c <__aeabi_ddiv+0xfc>
    247c:	4658      	mov	r0, fp
    247e:	f000 ff0d 	bl	329c <__clzsi2>
    2482:	3020      	adds	r0, #32
    2484:	e640      	b.n	2108 <__aeabi_ddiv+0xd8>
    2486:	0003      	movs	r3, r0
    2488:	4652      	mov	r2, sl
    248a:	3b28      	subs	r3, #40	; 0x28
    248c:	409a      	lsls	r2, r3
    248e:	2100      	movs	r1, #0
    2490:	4693      	mov	fp, r2
    2492:	e677      	b.n	2184 <__aeabi_ddiv+0x154>
    2494:	f000 ff02 	bl	329c <__clzsi2>
    2498:	3020      	adds	r0, #32
    249a:	e65f      	b.n	215c <__aeabi_ddiv+0x12c>
    249c:	4588      	cmp	r8, r1
    249e:	d200      	bcs.n	24a2 <__aeabi_ddiv+0x472>
    24a0:	e6c7      	b.n	2232 <__aeabi_ddiv+0x202>
    24a2:	464b      	mov	r3, r9
    24a4:	07de      	lsls	r6, r3, #31
    24a6:	085d      	lsrs	r5, r3, #1
    24a8:	4643      	mov	r3, r8
    24aa:	085b      	lsrs	r3, r3, #1
    24ac:	431e      	orrs	r6, r3
    24ae:	4643      	mov	r3, r8
    24b0:	07db      	lsls	r3, r3, #31
    24b2:	469a      	mov	sl, r3
    24b4:	e6c2      	b.n	223c <__aeabi_ddiv+0x20c>
    24b6:	2500      	movs	r5, #0
    24b8:	4592      	cmp	sl, r2
    24ba:	d300      	bcc.n	24be <__aeabi_ddiv+0x48e>
    24bc:	e733      	b.n	2326 <__aeabi_ddiv+0x2f6>
    24be:	9e03      	ldr	r6, [sp, #12]
    24c0:	4659      	mov	r1, fp
    24c2:	46b4      	mov	ip, r6
    24c4:	44e2      	add	sl, ip
    24c6:	45b2      	cmp	sl, r6
    24c8:	41ad      	sbcs	r5, r5
    24ca:	426d      	negs	r5, r5
    24cc:	4445      	add	r5, r8
    24ce:	18eb      	adds	r3, r5, r3
    24d0:	3901      	subs	r1, #1
    24d2:	4598      	cmp	r8, r3
    24d4:	d207      	bcs.n	24e6 <__aeabi_ddiv+0x4b6>
    24d6:	4298      	cmp	r0, r3
    24d8:	d900      	bls.n	24dc <__aeabi_ddiv+0x4ac>
    24da:	e07f      	b.n	25dc <__aeabi_ddiv+0x5ac>
    24dc:	d100      	bne.n	24e0 <__aeabi_ddiv+0x4b0>
    24de:	e0bc      	b.n	265a <__aeabi_ddiv+0x62a>
    24e0:	1a1d      	subs	r5, r3, r0
    24e2:	468b      	mov	fp, r1
    24e4:	e71f      	b.n	2326 <__aeabi_ddiv+0x2f6>
    24e6:	4598      	cmp	r8, r3
    24e8:	d1fa      	bne.n	24e0 <__aeabi_ddiv+0x4b0>
    24ea:	9d03      	ldr	r5, [sp, #12]
    24ec:	4555      	cmp	r5, sl
    24ee:	d9f2      	bls.n	24d6 <__aeabi_ddiv+0x4a6>
    24f0:	4643      	mov	r3, r8
    24f2:	468b      	mov	fp, r1
    24f4:	1a1d      	subs	r5, r3, r0
    24f6:	e716      	b.n	2326 <__aeabi_ddiv+0x2f6>
    24f8:	469b      	mov	fp, r3
    24fa:	e6ca      	b.n	2292 <__aeabi_ddiv+0x262>
    24fc:	0015      	movs	r5, r2
    24fe:	e6e7      	b.n	22d0 <__aeabi_ddiv+0x2a0>
    2500:	465a      	mov	r2, fp
    2502:	08c9      	lsrs	r1, r1, #3
    2504:	0752      	lsls	r2, r2, #29
    2506:	430a      	orrs	r2, r1
    2508:	055b      	lsls	r3, r3, #21
    250a:	4690      	mov	r8, r2
    250c:	0d5c      	lsrs	r4, r3, #21
    250e:	465a      	mov	r2, fp
    2510:	2301      	movs	r3, #1
    2512:	9902      	ldr	r1, [sp, #8]
    2514:	0252      	lsls	r2, r2, #9
    2516:	4019      	ands	r1, r3
    2518:	0b12      	lsrs	r2, r2, #12
    251a:	468c      	mov	ip, r1
    251c:	e656      	b.n	21cc <__aeabi_ddiv+0x19c>
    251e:	2b00      	cmp	r3, #0
    2520:	d100      	bne.n	2524 <__aeabi_ddiv+0x4f4>
    2522:	e76f      	b.n	2404 <__aeabi_ddiv+0x3d4>
    2524:	4446      	add	r6, r8
    2526:	1e4a      	subs	r2, r1, #1
    2528:	45b0      	cmp	r8, r6
    252a:	d929      	bls.n	2580 <__aeabi_ddiv+0x550>
    252c:	0011      	movs	r1, r2
    252e:	4286      	cmp	r6, r0
    2530:	d000      	beq.n	2534 <__aeabi_ddiv+0x504>
    2532:	e765      	b.n	2400 <__aeabi_ddiv+0x3d0>
    2534:	9a03      	ldr	r2, [sp, #12]
    2536:	4293      	cmp	r3, r2
    2538:	d000      	beq.n	253c <__aeabi_ddiv+0x50c>
    253a:	e761      	b.n	2400 <__aeabi_ddiv+0x3d0>
    253c:	e762      	b.n	2404 <__aeabi_ddiv+0x3d4>
    253e:	2101      	movs	r1, #1
    2540:	4249      	negs	r1, r1
    2542:	2001      	movs	r0, #1
    2544:	1ac2      	subs	r2, r0, r3
    2546:	2a38      	cmp	r2, #56	; 0x38
    2548:	dd21      	ble.n	258e <__aeabi_ddiv+0x55e>
    254a:	9b02      	ldr	r3, [sp, #8]
    254c:	4003      	ands	r3, r0
    254e:	469c      	mov	ip, r3
    2550:	e638      	b.n	21c4 <__aeabi_ddiv+0x194>
    2552:	220f      	movs	r2, #15
    2554:	400a      	ands	r2, r1
    2556:	2a04      	cmp	r2, #4
    2558:	d100      	bne.n	255c <__aeabi_ddiv+0x52c>
    255a:	e75b      	b.n	2414 <__aeabi_ddiv+0x3e4>
    255c:	000a      	movs	r2, r1
    255e:	1d11      	adds	r1, r2, #4
    2560:	4291      	cmp	r1, r2
    2562:	4192      	sbcs	r2, r2
    2564:	4252      	negs	r2, r2
    2566:	4493      	add	fp, r2
    2568:	e754      	b.n	2414 <__aeabi_ddiv+0x3e4>
    256a:	4b47      	ldr	r3, [pc, #284]	; (2688 <__aeabi_ddiv+0x658>)
    256c:	18e3      	adds	r3, r4, r3
    256e:	2b00      	cmp	r3, #0
    2570:	dde5      	ble.n	253e <__aeabi_ddiv+0x50e>
    2572:	2201      	movs	r2, #1
    2574:	4252      	negs	r2, r2
    2576:	e7f2      	b.n	255e <__aeabi_ddiv+0x52e>
    2578:	001d      	movs	r5, r3
    257a:	e6fa      	b.n	2372 <__aeabi_ddiv+0x342>
    257c:	469a      	mov	sl, r3
    257e:	e71c      	b.n	23ba <__aeabi_ddiv+0x38a>
    2580:	42b0      	cmp	r0, r6
    2582:	d839      	bhi.n	25f8 <__aeabi_ddiv+0x5c8>
    2584:	d06e      	beq.n	2664 <__aeabi_ddiv+0x634>
    2586:	0011      	movs	r1, r2
    2588:	e73a      	b.n	2400 <__aeabi_ddiv+0x3d0>
    258a:	9302      	str	r3, [sp, #8]
    258c:	e73a      	b.n	2404 <__aeabi_ddiv+0x3d4>
    258e:	2a1f      	cmp	r2, #31
    2590:	dc3c      	bgt.n	260c <__aeabi_ddiv+0x5dc>
    2592:	2320      	movs	r3, #32
    2594:	1a9b      	subs	r3, r3, r2
    2596:	000c      	movs	r4, r1
    2598:	4658      	mov	r0, fp
    259a:	4099      	lsls	r1, r3
    259c:	4098      	lsls	r0, r3
    259e:	1e4b      	subs	r3, r1, #1
    25a0:	4199      	sbcs	r1, r3
    25a2:	465b      	mov	r3, fp
    25a4:	40d4      	lsrs	r4, r2
    25a6:	40d3      	lsrs	r3, r2
    25a8:	4320      	orrs	r0, r4
    25aa:	4308      	orrs	r0, r1
    25ac:	001a      	movs	r2, r3
    25ae:	0743      	lsls	r3, r0, #29
    25b0:	d009      	beq.n	25c6 <__aeabi_ddiv+0x596>
    25b2:	230f      	movs	r3, #15
    25b4:	4003      	ands	r3, r0
    25b6:	2b04      	cmp	r3, #4
    25b8:	d005      	beq.n	25c6 <__aeabi_ddiv+0x596>
    25ba:	0001      	movs	r1, r0
    25bc:	1d08      	adds	r0, r1, #4
    25be:	4288      	cmp	r0, r1
    25c0:	419b      	sbcs	r3, r3
    25c2:	425b      	negs	r3, r3
    25c4:	18d2      	adds	r2, r2, r3
    25c6:	0213      	lsls	r3, r2, #8
    25c8:	d53a      	bpl.n	2640 <__aeabi_ddiv+0x610>
    25ca:	2301      	movs	r3, #1
    25cc:	9a02      	ldr	r2, [sp, #8]
    25ce:	2401      	movs	r4, #1
    25d0:	401a      	ands	r2, r3
    25d2:	2300      	movs	r3, #0
    25d4:	4694      	mov	ip, r2
    25d6:	4698      	mov	r8, r3
    25d8:	2200      	movs	r2, #0
    25da:	e5f7      	b.n	21cc <__aeabi_ddiv+0x19c>
    25dc:	2102      	movs	r1, #2
    25de:	4249      	negs	r1, r1
    25e0:	468c      	mov	ip, r1
    25e2:	9d03      	ldr	r5, [sp, #12]
    25e4:	44e3      	add	fp, ip
    25e6:	46ac      	mov	ip, r5
    25e8:	44e2      	add	sl, ip
    25ea:	45aa      	cmp	sl, r5
    25ec:	41ad      	sbcs	r5, r5
    25ee:	426d      	negs	r5, r5
    25f0:	4445      	add	r5, r8
    25f2:	18ed      	adds	r5, r5, r3
    25f4:	1a2d      	subs	r5, r5, r0
    25f6:	e696      	b.n	2326 <__aeabi_ddiv+0x2f6>
    25f8:	1e8a      	subs	r2, r1, #2
    25fa:	9903      	ldr	r1, [sp, #12]
    25fc:	004d      	lsls	r5, r1, #1
    25fe:	428d      	cmp	r5, r1
    2600:	4189      	sbcs	r1, r1
    2602:	4249      	negs	r1, r1
    2604:	4441      	add	r1, r8
    2606:	1876      	adds	r6, r6, r1
    2608:	9503      	str	r5, [sp, #12]
    260a:	e78f      	b.n	252c <__aeabi_ddiv+0x4fc>
    260c:	201f      	movs	r0, #31
    260e:	4240      	negs	r0, r0
    2610:	1ac3      	subs	r3, r0, r3
    2612:	4658      	mov	r0, fp
    2614:	40d8      	lsrs	r0, r3
    2616:	0003      	movs	r3, r0
    2618:	2a20      	cmp	r2, #32
    261a:	d028      	beq.n	266e <__aeabi_ddiv+0x63e>
    261c:	2040      	movs	r0, #64	; 0x40
    261e:	465d      	mov	r5, fp
    2620:	1a82      	subs	r2, r0, r2
    2622:	4095      	lsls	r5, r2
    2624:	4329      	orrs	r1, r5
    2626:	1e4a      	subs	r2, r1, #1
    2628:	4191      	sbcs	r1, r2
    262a:	4319      	orrs	r1, r3
    262c:	2307      	movs	r3, #7
    262e:	2200      	movs	r2, #0
    2630:	400b      	ands	r3, r1
    2632:	d009      	beq.n	2648 <__aeabi_ddiv+0x618>
    2634:	230f      	movs	r3, #15
    2636:	2200      	movs	r2, #0
    2638:	400b      	ands	r3, r1
    263a:	0008      	movs	r0, r1
    263c:	2b04      	cmp	r3, #4
    263e:	d1bd      	bne.n	25bc <__aeabi_ddiv+0x58c>
    2640:	0001      	movs	r1, r0
    2642:	0753      	lsls	r3, r2, #29
    2644:	0252      	lsls	r2, r2, #9
    2646:	0b12      	lsrs	r2, r2, #12
    2648:	08c9      	lsrs	r1, r1, #3
    264a:	4319      	orrs	r1, r3
    264c:	2301      	movs	r3, #1
    264e:	4688      	mov	r8, r1
    2650:	9902      	ldr	r1, [sp, #8]
    2652:	2400      	movs	r4, #0
    2654:	4019      	ands	r1, r3
    2656:	468c      	mov	ip, r1
    2658:	e5b8      	b.n	21cc <__aeabi_ddiv+0x19c>
    265a:	4552      	cmp	r2, sl
    265c:	d8be      	bhi.n	25dc <__aeabi_ddiv+0x5ac>
    265e:	468b      	mov	fp, r1
    2660:	2500      	movs	r5, #0
    2662:	e660      	b.n	2326 <__aeabi_ddiv+0x2f6>
    2664:	9d03      	ldr	r5, [sp, #12]
    2666:	429d      	cmp	r5, r3
    2668:	d3c6      	bcc.n	25f8 <__aeabi_ddiv+0x5c8>
    266a:	0011      	movs	r1, r2
    266c:	e762      	b.n	2534 <__aeabi_ddiv+0x504>
    266e:	2500      	movs	r5, #0
    2670:	e7d8      	b.n	2624 <__aeabi_ddiv+0x5f4>
    2672:	2280      	movs	r2, #128	; 0x80
    2674:	465b      	mov	r3, fp
    2676:	0312      	lsls	r2, r2, #12
    2678:	431a      	orrs	r2, r3
    267a:	9b01      	ldr	r3, [sp, #4]
    267c:	0312      	lsls	r2, r2, #12
    267e:	0b12      	lsrs	r2, r2, #12
    2680:	469c      	mov	ip, r3
    2682:	4688      	mov	r8, r1
    2684:	4c03      	ldr	r4, [pc, #12]	; (2694 <__aeabi_ddiv+0x664>)
    2686:	e5a1      	b.n	21cc <__aeabi_ddiv+0x19c>
    2688:	000003ff 	.word	0x000003ff
    268c:	feffffff 	.word	0xfeffffff
    2690:	000007fe 	.word	0x000007fe
    2694:	000007ff 	.word	0x000007ff

00002698 <__aeabi_dmul>:
    2698:	b5f0      	push	{r4, r5, r6, r7, lr}
    269a:	4657      	mov	r7, sl
    269c:	4645      	mov	r5, r8
    269e:	46de      	mov	lr, fp
    26a0:	464e      	mov	r6, r9
    26a2:	b5e0      	push	{r5, r6, r7, lr}
    26a4:	030c      	lsls	r4, r1, #12
    26a6:	4698      	mov	r8, r3
    26a8:	004e      	lsls	r6, r1, #1
    26aa:	0b23      	lsrs	r3, r4, #12
    26ac:	b087      	sub	sp, #28
    26ae:	0007      	movs	r7, r0
    26b0:	4692      	mov	sl, r2
    26b2:	469b      	mov	fp, r3
    26b4:	0d76      	lsrs	r6, r6, #21
    26b6:	0fcd      	lsrs	r5, r1, #31
    26b8:	2e00      	cmp	r6, #0
    26ba:	d06b      	beq.n	2794 <__aeabi_dmul+0xfc>
    26bc:	4b6d      	ldr	r3, [pc, #436]	; (2874 <__aeabi_dmul+0x1dc>)
    26be:	429e      	cmp	r6, r3
    26c0:	d035      	beq.n	272e <__aeabi_dmul+0x96>
    26c2:	2480      	movs	r4, #128	; 0x80
    26c4:	465b      	mov	r3, fp
    26c6:	0f42      	lsrs	r2, r0, #29
    26c8:	0424      	lsls	r4, r4, #16
    26ca:	00db      	lsls	r3, r3, #3
    26cc:	4314      	orrs	r4, r2
    26ce:	431c      	orrs	r4, r3
    26d0:	00c3      	lsls	r3, r0, #3
    26d2:	4699      	mov	r9, r3
    26d4:	4b68      	ldr	r3, [pc, #416]	; (2878 <__aeabi_dmul+0x1e0>)
    26d6:	46a3      	mov	fp, r4
    26d8:	469c      	mov	ip, r3
    26da:	2300      	movs	r3, #0
    26dc:	2700      	movs	r7, #0
    26de:	4466      	add	r6, ip
    26e0:	9302      	str	r3, [sp, #8]
    26e2:	4643      	mov	r3, r8
    26e4:	031c      	lsls	r4, r3, #12
    26e6:	005a      	lsls	r2, r3, #1
    26e8:	0fdb      	lsrs	r3, r3, #31
    26ea:	4650      	mov	r0, sl
    26ec:	0b24      	lsrs	r4, r4, #12
    26ee:	0d52      	lsrs	r2, r2, #21
    26f0:	4698      	mov	r8, r3
    26f2:	d100      	bne.n	26f6 <__aeabi_dmul+0x5e>
    26f4:	e076      	b.n	27e4 <__aeabi_dmul+0x14c>
    26f6:	4b5f      	ldr	r3, [pc, #380]	; (2874 <__aeabi_dmul+0x1dc>)
    26f8:	429a      	cmp	r2, r3
    26fa:	d06d      	beq.n	27d8 <__aeabi_dmul+0x140>
    26fc:	2380      	movs	r3, #128	; 0x80
    26fe:	0f41      	lsrs	r1, r0, #29
    2700:	041b      	lsls	r3, r3, #16
    2702:	430b      	orrs	r3, r1
    2704:	495c      	ldr	r1, [pc, #368]	; (2878 <__aeabi_dmul+0x1e0>)
    2706:	00e4      	lsls	r4, r4, #3
    2708:	468c      	mov	ip, r1
    270a:	431c      	orrs	r4, r3
    270c:	00c3      	lsls	r3, r0, #3
    270e:	2000      	movs	r0, #0
    2710:	4462      	add	r2, ip
    2712:	4641      	mov	r1, r8
    2714:	18b6      	adds	r6, r6, r2
    2716:	4069      	eors	r1, r5
    2718:	1c72      	adds	r2, r6, #1
    271a:	9101      	str	r1, [sp, #4]
    271c:	4694      	mov	ip, r2
    271e:	4307      	orrs	r7, r0
    2720:	2f0f      	cmp	r7, #15
    2722:	d900      	bls.n	2726 <__aeabi_dmul+0x8e>
    2724:	e0b0      	b.n	2888 <__aeabi_dmul+0x1f0>
    2726:	4a55      	ldr	r2, [pc, #340]	; (287c <__aeabi_dmul+0x1e4>)
    2728:	00bf      	lsls	r7, r7, #2
    272a:	59d2      	ldr	r2, [r2, r7]
    272c:	4697      	mov	pc, r2
    272e:	465b      	mov	r3, fp
    2730:	4303      	orrs	r3, r0
    2732:	4699      	mov	r9, r3
    2734:	d000      	beq.n	2738 <__aeabi_dmul+0xa0>
    2736:	e087      	b.n	2848 <__aeabi_dmul+0x1b0>
    2738:	2300      	movs	r3, #0
    273a:	469b      	mov	fp, r3
    273c:	3302      	adds	r3, #2
    273e:	2708      	movs	r7, #8
    2740:	9302      	str	r3, [sp, #8]
    2742:	e7ce      	b.n	26e2 <__aeabi_dmul+0x4a>
    2744:	4642      	mov	r2, r8
    2746:	9201      	str	r2, [sp, #4]
    2748:	2802      	cmp	r0, #2
    274a:	d067      	beq.n	281c <__aeabi_dmul+0x184>
    274c:	2803      	cmp	r0, #3
    274e:	d100      	bne.n	2752 <__aeabi_dmul+0xba>
    2750:	e20e      	b.n	2b70 <__aeabi_dmul+0x4d8>
    2752:	2801      	cmp	r0, #1
    2754:	d000      	beq.n	2758 <__aeabi_dmul+0xc0>
    2756:	e162      	b.n	2a1e <__aeabi_dmul+0x386>
    2758:	2300      	movs	r3, #0
    275a:	2400      	movs	r4, #0
    275c:	2200      	movs	r2, #0
    275e:	4699      	mov	r9, r3
    2760:	9901      	ldr	r1, [sp, #4]
    2762:	4001      	ands	r1, r0
    2764:	b2cd      	uxtb	r5, r1
    2766:	2100      	movs	r1, #0
    2768:	0312      	lsls	r2, r2, #12
    276a:	0d0b      	lsrs	r3, r1, #20
    276c:	0b12      	lsrs	r2, r2, #12
    276e:	051b      	lsls	r3, r3, #20
    2770:	4313      	orrs	r3, r2
    2772:	4a43      	ldr	r2, [pc, #268]	; (2880 <__aeabi_dmul+0x1e8>)
    2774:	0524      	lsls	r4, r4, #20
    2776:	4013      	ands	r3, r2
    2778:	431c      	orrs	r4, r3
    277a:	0064      	lsls	r4, r4, #1
    277c:	07ed      	lsls	r5, r5, #31
    277e:	0864      	lsrs	r4, r4, #1
    2780:	432c      	orrs	r4, r5
    2782:	4648      	mov	r0, r9
    2784:	0021      	movs	r1, r4
    2786:	b007      	add	sp, #28
    2788:	bc3c      	pop	{r2, r3, r4, r5}
    278a:	4690      	mov	r8, r2
    278c:	4699      	mov	r9, r3
    278e:	46a2      	mov	sl, r4
    2790:	46ab      	mov	fp, r5
    2792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2794:	4303      	orrs	r3, r0
    2796:	4699      	mov	r9, r3
    2798:	d04f      	beq.n	283a <__aeabi_dmul+0x1a2>
    279a:	465b      	mov	r3, fp
    279c:	2b00      	cmp	r3, #0
    279e:	d100      	bne.n	27a2 <__aeabi_dmul+0x10a>
    27a0:	e189      	b.n	2ab6 <__aeabi_dmul+0x41e>
    27a2:	4658      	mov	r0, fp
    27a4:	f000 fd7a 	bl	329c <__clzsi2>
    27a8:	0003      	movs	r3, r0
    27aa:	3b0b      	subs	r3, #11
    27ac:	2b1c      	cmp	r3, #28
    27ae:	dd00      	ble.n	27b2 <__aeabi_dmul+0x11a>
    27b0:	e17a      	b.n	2aa8 <__aeabi_dmul+0x410>
    27b2:	221d      	movs	r2, #29
    27b4:	1ad3      	subs	r3, r2, r3
    27b6:	003a      	movs	r2, r7
    27b8:	0001      	movs	r1, r0
    27ba:	465c      	mov	r4, fp
    27bc:	40da      	lsrs	r2, r3
    27be:	3908      	subs	r1, #8
    27c0:	408c      	lsls	r4, r1
    27c2:	0013      	movs	r3, r2
    27c4:	408f      	lsls	r7, r1
    27c6:	4323      	orrs	r3, r4
    27c8:	469b      	mov	fp, r3
    27ca:	46b9      	mov	r9, r7
    27cc:	2300      	movs	r3, #0
    27ce:	4e2d      	ldr	r6, [pc, #180]	; (2884 <__aeabi_dmul+0x1ec>)
    27d0:	2700      	movs	r7, #0
    27d2:	1a36      	subs	r6, r6, r0
    27d4:	9302      	str	r3, [sp, #8]
    27d6:	e784      	b.n	26e2 <__aeabi_dmul+0x4a>
    27d8:	4653      	mov	r3, sl
    27da:	4323      	orrs	r3, r4
    27dc:	d12a      	bne.n	2834 <__aeabi_dmul+0x19c>
    27de:	2400      	movs	r4, #0
    27e0:	2002      	movs	r0, #2
    27e2:	e796      	b.n	2712 <__aeabi_dmul+0x7a>
    27e4:	4653      	mov	r3, sl
    27e6:	4323      	orrs	r3, r4
    27e8:	d020      	beq.n	282c <__aeabi_dmul+0x194>
    27ea:	2c00      	cmp	r4, #0
    27ec:	d100      	bne.n	27f0 <__aeabi_dmul+0x158>
    27ee:	e157      	b.n	2aa0 <__aeabi_dmul+0x408>
    27f0:	0020      	movs	r0, r4
    27f2:	f000 fd53 	bl	329c <__clzsi2>
    27f6:	0003      	movs	r3, r0
    27f8:	3b0b      	subs	r3, #11
    27fa:	2b1c      	cmp	r3, #28
    27fc:	dd00      	ble.n	2800 <__aeabi_dmul+0x168>
    27fe:	e149      	b.n	2a94 <__aeabi_dmul+0x3fc>
    2800:	211d      	movs	r1, #29
    2802:	1acb      	subs	r3, r1, r3
    2804:	4651      	mov	r1, sl
    2806:	0002      	movs	r2, r0
    2808:	40d9      	lsrs	r1, r3
    280a:	4653      	mov	r3, sl
    280c:	3a08      	subs	r2, #8
    280e:	4094      	lsls	r4, r2
    2810:	4093      	lsls	r3, r2
    2812:	430c      	orrs	r4, r1
    2814:	4a1b      	ldr	r2, [pc, #108]	; (2884 <__aeabi_dmul+0x1ec>)
    2816:	1a12      	subs	r2, r2, r0
    2818:	2000      	movs	r0, #0
    281a:	e77a      	b.n	2712 <__aeabi_dmul+0x7a>
    281c:	2501      	movs	r5, #1
    281e:	9b01      	ldr	r3, [sp, #4]
    2820:	4c14      	ldr	r4, [pc, #80]	; (2874 <__aeabi_dmul+0x1dc>)
    2822:	401d      	ands	r5, r3
    2824:	2300      	movs	r3, #0
    2826:	2200      	movs	r2, #0
    2828:	4699      	mov	r9, r3
    282a:	e79c      	b.n	2766 <__aeabi_dmul+0xce>
    282c:	2400      	movs	r4, #0
    282e:	2200      	movs	r2, #0
    2830:	2001      	movs	r0, #1
    2832:	e76e      	b.n	2712 <__aeabi_dmul+0x7a>
    2834:	4653      	mov	r3, sl
    2836:	2003      	movs	r0, #3
    2838:	e76b      	b.n	2712 <__aeabi_dmul+0x7a>
    283a:	2300      	movs	r3, #0
    283c:	469b      	mov	fp, r3
    283e:	3301      	adds	r3, #1
    2840:	2704      	movs	r7, #4
    2842:	2600      	movs	r6, #0
    2844:	9302      	str	r3, [sp, #8]
    2846:	e74c      	b.n	26e2 <__aeabi_dmul+0x4a>
    2848:	2303      	movs	r3, #3
    284a:	4681      	mov	r9, r0
    284c:	270c      	movs	r7, #12
    284e:	9302      	str	r3, [sp, #8]
    2850:	e747      	b.n	26e2 <__aeabi_dmul+0x4a>
    2852:	2280      	movs	r2, #128	; 0x80
    2854:	2300      	movs	r3, #0
    2856:	2500      	movs	r5, #0
    2858:	0312      	lsls	r2, r2, #12
    285a:	4699      	mov	r9, r3
    285c:	4c05      	ldr	r4, [pc, #20]	; (2874 <__aeabi_dmul+0x1dc>)
    285e:	e782      	b.n	2766 <__aeabi_dmul+0xce>
    2860:	465c      	mov	r4, fp
    2862:	464b      	mov	r3, r9
    2864:	9802      	ldr	r0, [sp, #8]
    2866:	e76f      	b.n	2748 <__aeabi_dmul+0xb0>
    2868:	465c      	mov	r4, fp
    286a:	464b      	mov	r3, r9
    286c:	9501      	str	r5, [sp, #4]
    286e:	9802      	ldr	r0, [sp, #8]
    2870:	e76a      	b.n	2748 <__aeabi_dmul+0xb0>
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	000007ff 	.word	0x000007ff
    2878:	fffffc01 	.word	0xfffffc01
    287c:	000033a0 	.word	0x000033a0
    2880:	800fffff 	.word	0x800fffff
    2884:	fffffc0d 	.word	0xfffffc0d
    2888:	464a      	mov	r2, r9
    288a:	4649      	mov	r1, r9
    288c:	0c17      	lsrs	r7, r2, #16
    288e:	0c1a      	lsrs	r2, r3, #16
    2890:	041b      	lsls	r3, r3, #16
    2892:	0c1b      	lsrs	r3, r3, #16
    2894:	0408      	lsls	r0, r1, #16
    2896:	0019      	movs	r1, r3
    2898:	0c00      	lsrs	r0, r0, #16
    289a:	4341      	muls	r1, r0
    289c:	0015      	movs	r5, r2
    289e:	4688      	mov	r8, r1
    28a0:	0019      	movs	r1, r3
    28a2:	437d      	muls	r5, r7
    28a4:	4379      	muls	r1, r7
    28a6:	9503      	str	r5, [sp, #12]
    28a8:	4689      	mov	r9, r1
    28aa:	0029      	movs	r1, r5
    28ac:	0015      	movs	r5, r2
    28ae:	4345      	muls	r5, r0
    28b0:	444d      	add	r5, r9
    28b2:	9502      	str	r5, [sp, #8]
    28b4:	4645      	mov	r5, r8
    28b6:	0c2d      	lsrs	r5, r5, #16
    28b8:	46aa      	mov	sl, r5
    28ba:	9d02      	ldr	r5, [sp, #8]
    28bc:	4455      	add	r5, sl
    28be:	45a9      	cmp	r9, r5
    28c0:	d906      	bls.n	28d0 <__aeabi_dmul+0x238>
    28c2:	468a      	mov	sl, r1
    28c4:	2180      	movs	r1, #128	; 0x80
    28c6:	0249      	lsls	r1, r1, #9
    28c8:	4689      	mov	r9, r1
    28ca:	44ca      	add	sl, r9
    28cc:	4651      	mov	r1, sl
    28ce:	9103      	str	r1, [sp, #12]
    28d0:	0c29      	lsrs	r1, r5, #16
    28d2:	9104      	str	r1, [sp, #16]
    28d4:	4641      	mov	r1, r8
    28d6:	0409      	lsls	r1, r1, #16
    28d8:	042d      	lsls	r5, r5, #16
    28da:	0c09      	lsrs	r1, r1, #16
    28dc:	4688      	mov	r8, r1
    28de:	0029      	movs	r1, r5
    28e0:	0c25      	lsrs	r5, r4, #16
    28e2:	0424      	lsls	r4, r4, #16
    28e4:	4441      	add	r1, r8
    28e6:	0c24      	lsrs	r4, r4, #16
    28e8:	9105      	str	r1, [sp, #20]
    28ea:	0021      	movs	r1, r4
    28ec:	4341      	muls	r1, r0
    28ee:	4688      	mov	r8, r1
    28f0:	0021      	movs	r1, r4
    28f2:	4379      	muls	r1, r7
    28f4:	468a      	mov	sl, r1
    28f6:	4368      	muls	r0, r5
    28f8:	4641      	mov	r1, r8
    28fa:	4450      	add	r0, sl
    28fc:	4681      	mov	r9, r0
    28fe:	0c08      	lsrs	r0, r1, #16
    2900:	4448      	add	r0, r9
    2902:	436f      	muls	r7, r5
    2904:	4582      	cmp	sl, r0
    2906:	d903      	bls.n	2910 <__aeabi_dmul+0x278>
    2908:	2180      	movs	r1, #128	; 0x80
    290a:	0249      	lsls	r1, r1, #9
    290c:	4689      	mov	r9, r1
    290e:	444f      	add	r7, r9
    2910:	0c01      	lsrs	r1, r0, #16
    2912:	4689      	mov	r9, r1
    2914:	0039      	movs	r1, r7
    2916:	4449      	add	r1, r9
    2918:	9102      	str	r1, [sp, #8]
    291a:	4641      	mov	r1, r8
    291c:	040f      	lsls	r7, r1, #16
    291e:	9904      	ldr	r1, [sp, #16]
    2920:	0c3f      	lsrs	r7, r7, #16
    2922:	4688      	mov	r8, r1
    2924:	0400      	lsls	r0, r0, #16
    2926:	19c0      	adds	r0, r0, r7
    2928:	4480      	add	r8, r0
    292a:	4641      	mov	r1, r8
    292c:	9104      	str	r1, [sp, #16]
    292e:	4659      	mov	r1, fp
    2930:	0c0f      	lsrs	r7, r1, #16
    2932:	0409      	lsls	r1, r1, #16
    2934:	0c09      	lsrs	r1, r1, #16
    2936:	4688      	mov	r8, r1
    2938:	4359      	muls	r1, r3
    293a:	468a      	mov	sl, r1
    293c:	0039      	movs	r1, r7
    293e:	4351      	muls	r1, r2
    2940:	4689      	mov	r9, r1
    2942:	4641      	mov	r1, r8
    2944:	434a      	muls	r2, r1
    2946:	4651      	mov	r1, sl
    2948:	0c09      	lsrs	r1, r1, #16
    294a:	468b      	mov	fp, r1
    294c:	437b      	muls	r3, r7
    294e:	18d2      	adds	r2, r2, r3
    2950:	445a      	add	r2, fp
    2952:	4293      	cmp	r3, r2
    2954:	d903      	bls.n	295e <__aeabi_dmul+0x2c6>
    2956:	2380      	movs	r3, #128	; 0x80
    2958:	025b      	lsls	r3, r3, #9
    295a:	469b      	mov	fp, r3
    295c:	44d9      	add	r9, fp
    295e:	4651      	mov	r1, sl
    2960:	0409      	lsls	r1, r1, #16
    2962:	0c09      	lsrs	r1, r1, #16
    2964:	468a      	mov	sl, r1
    2966:	4641      	mov	r1, r8
    2968:	4361      	muls	r1, r4
    296a:	437c      	muls	r4, r7
    296c:	0c13      	lsrs	r3, r2, #16
    296e:	0412      	lsls	r2, r2, #16
    2970:	444b      	add	r3, r9
    2972:	4452      	add	r2, sl
    2974:	46a1      	mov	r9, r4
    2976:	468a      	mov	sl, r1
    2978:	003c      	movs	r4, r7
    297a:	4641      	mov	r1, r8
    297c:	436c      	muls	r4, r5
    297e:	434d      	muls	r5, r1
    2980:	4651      	mov	r1, sl
    2982:	444d      	add	r5, r9
    2984:	0c0f      	lsrs	r7, r1, #16
    2986:	197d      	adds	r5, r7, r5
    2988:	45a9      	cmp	r9, r5
    298a:	d903      	bls.n	2994 <__aeabi_dmul+0x2fc>
    298c:	2180      	movs	r1, #128	; 0x80
    298e:	0249      	lsls	r1, r1, #9
    2990:	4688      	mov	r8, r1
    2992:	4444      	add	r4, r8
    2994:	9f04      	ldr	r7, [sp, #16]
    2996:	9903      	ldr	r1, [sp, #12]
    2998:	46b8      	mov	r8, r7
    299a:	4441      	add	r1, r8
    299c:	468b      	mov	fp, r1
    299e:	4583      	cmp	fp, r0
    29a0:	4180      	sbcs	r0, r0
    29a2:	4241      	negs	r1, r0
    29a4:	4688      	mov	r8, r1
    29a6:	4651      	mov	r1, sl
    29a8:	0408      	lsls	r0, r1, #16
    29aa:	042f      	lsls	r7, r5, #16
    29ac:	0c00      	lsrs	r0, r0, #16
    29ae:	183f      	adds	r7, r7, r0
    29b0:	4658      	mov	r0, fp
    29b2:	9902      	ldr	r1, [sp, #8]
    29b4:	1810      	adds	r0, r2, r0
    29b6:	4689      	mov	r9, r1
    29b8:	4290      	cmp	r0, r2
    29ba:	4192      	sbcs	r2, r2
    29bc:	444f      	add	r7, r9
    29be:	46ba      	mov	sl, r7
    29c0:	4252      	negs	r2, r2
    29c2:	4699      	mov	r9, r3
    29c4:	4693      	mov	fp, r2
    29c6:	44c2      	add	sl, r8
    29c8:	44d1      	add	r9, sl
    29ca:	44cb      	add	fp, r9
    29cc:	428f      	cmp	r7, r1
    29ce:	41bf      	sbcs	r7, r7
    29d0:	45c2      	cmp	sl, r8
    29d2:	4189      	sbcs	r1, r1
    29d4:	4599      	cmp	r9, r3
    29d6:	419b      	sbcs	r3, r3
    29d8:	4593      	cmp	fp, r2
    29da:	4192      	sbcs	r2, r2
    29dc:	427f      	negs	r7, r7
    29de:	4249      	negs	r1, r1
    29e0:	0c2d      	lsrs	r5, r5, #16
    29e2:	4252      	negs	r2, r2
    29e4:	430f      	orrs	r7, r1
    29e6:	425b      	negs	r3, r3
    29e8:	4313      	orrs	r3, r2
    29ea:	197f      	adds	r7, r7, r5
    29ec:	18ff      	adds	r7, r7, r3
    29ee:	465b      	mov	r3, fp
    29f0:	193c      	adds	r4, r7, r4
    29f2:	0ddb      	lsrs	r3, r3, #23
    29f4:	9a05      	ldr	r2, [sp, #20]
    29f6:	0264      	lsls	r4, r4, #9
    29f8:	431c      	orrs	r4, r3
    29fa:	0243      	lsls	r3, r0, #9
    29fc:	4313      	orrs	r3, r2
    29fe:	1e5d      	subs	r5, r3, #1
    2a00:	41ab      	sbcs	r3, r5
    2a02:	465a      	mov	r2, fp
    2a04:	0dc0      	lsrs	r0, r0, #23
    2a06:	4303      	orrs	r3, r0
    2a08:	0252      	lsls	r2, r2, #9
    2a0a:	4313      	orrs	r3, r2
    2a0c:	01e2      	lsls	r2, r4, #7
    2a0e:	d556      	bpl.n	2abe <__aeabi_dmul+0x426>
    2a10:	2001      	movs	r0, #1
    2a12:	085a      	lsrs	r2, r3, #1
    2a14:	4003      	ands	r3, r0
    2a16:	4313      	orrs	r3, r2
    2a18:	07e2      	lsls	r2, r4, #31
    2a1a:	4313      	orrs	r3, r2
    2a1c:	0864      	lsrs	r4, r4, #1
    2a1e:	485a      	ldr	r0, [pc, #360]	; (2b88 <__aeabi_dmul+0x4f0>)
    2a20:	4460      	add	r0, ip
    2a22:	2800      	cmp	r0, #0
    2a24:	dd4d      	ble.n	2ac2 <__aeabi_dmul+0x42a>
    2a26:	075a      	lsls	r2, r3, #29
    2a28:	d009      	beq.n	2a3e <__aeabi_dmul+0x3a6>
    2a2a:	220f      	movs	r2, #15
    2a2c:	401a      	ands	r2, r3
    2a2e:	2a04      	cmp	r2, #4
    2a30:	d005      	beq.n	2a3e <__aeabi_dmul+0x3a6>
    2a32:	1d1a      	adds	r2, r3, #4
    2a34:	429a      	cmp	r2, r3
    2a36:	419b      	sbcs	r3, r3
    2a38:	425b      	negs	r3, r3
    2a3a:	18e4      	adds	r4, r4, r3
    2a3c:	0013      	movs	r3, r2
    2a3e:	01e2      	lsls	r2, r4, #7
    2a40:	d504      	bpl.n	2a4c <__aeabi_dmul+0x3b4>
    2a42:	2080      	movs	r0, #128	; 0x80
    2a44:	4a51      	ldr	r2, [pc, #324]	; (2b8c <__aeabi_dmul+0x4f4>)
    2a46:	00c0      	lsls	r0, r0, #3
    2a48:	4014      	ands	r4, r2
    2a4a:	4460      	add	r0, ip
    2a4c:	4a50      	ldr	r2, [pc, #320]	; (2b90 <__aeabi_dmul+0x4f8>)
    2a4e:	4290      	cmp	r0, r2
    2a50:	dd00      	ble.n	2a54 <__aeabi_dmul+0x3bc>
    2a52:	e6e3      	b.n	281c <__aeabi_dmul+0x184>
    2a54:	2501      	movs	r5, #1
    2a56:	08db      	lsrs	r3, r3, #3
    2a58:	0762      	lsls	r2, r4, #29
    2a5a:	431a      	orrs	r2, r3
    2a5c:	0264      	lsls	r4, r4, #9
    2a5e:	9b01      	ldr	r3, [sp, #4]
    2a60:	4691      	mov	r9, r2
    2a62:	0b22      	lsrs	r2, r4, #12
    2a64:	0544      	lsls	r4, r0, #21
    2a66:	0d64      	lsrs	r4, r4, #21
    2a68:	401d      	ands	r5, r3
    2a6a:	e67c      	b.n	2766 <__aeabi_dmul+0xce>
    2a6c:	2280      	movs	r2, #128	; 0x80
    2a6e:	4659      	mov	r1, fp
    2a70:	0312      	lsls	r2, r2, #12
    2a72:	4211      	tst	r1, r2
    2a74:	d008      	beq.n	2a88 <__aeabi_dmul+0x3f0>
    2a76:	4214      	tst	r4, r2
    2a78:	d106      	bne.n	2a88 <__aeabi_dmul+0x3f0>
    2a7a:	4322      	orrs	r2, r4
    2a7c:	0312      	lsls	r2, r2, #12
    2a7e:	0b12      	lsrs	r2, r2, #12
    2a80:	4645      	mov	r5, r8
    2a82:	4699      	mov	r9, r3
    2a84:	4c43      	ldr	r4, [pc, #268]	; (2b94 <__aeabi_dmul+0x4fc>)
    2a86:	e66e      	b.n	2766 <__aeabi_dmul+0xce>
    2a88:	465b      	mov	r3, fp
    2a8a:	431a      	orrs	r2, r3
    2a8c:	0312      	lsls	r2, r2, #12
    2a8e:	0b12      	lsrs	r2, r2, #12
    2a90:	4c40      	ldr	r4, [pc, #256]	; (2b94 <__aeabi_dmul+0x4fc>)
    2a92:	e668      	b.n	2766 <__aeabi_dmul+0xce>
    2a94:	0003      	movs	r3, r0
    2a96:	4654      	mov	r4, sl
    2a98:	3b28      	subs	r3, #40	; 0x28
    2a9a:	409c      	lsls	r4, r3
    2a9c:	2300      	movs	r3, #0
    2a9e:	e6b9      	b.n	2814 <__aeabi_dmul+0x17c>
    2aa0:	f000 fbfc 	bl	329c <__clzsi2>
    2aa4:	3020      	adds	r0, #32
    2aa6:	e6a6      	b.n	27f6 <__aeabi_dmul+0x15e>
    2aa8:	0003      	movs	r3, r0
    2aaa:	3b28      	subs	r3, #40	; 0x28
    2aac:	409f      	lsls	r7, r3
    2aae:	2300      	movs	r3, #0
    2ab0:	46bb      	mov	fp, r7
    2ab2:	4699      	mov	r9, r3
    2ab4:	e68a      	b.n	27cc <__aeabi_dmul+0x134>
    2ab6:	f000 fbf1 	bl	329c <__clzsi2>
    2aba:	3020      	adds	r0, #32
    2abc:	e674      	b.n	27a8 <__aeabi_dmul+0x110>
    2abe:	46b4      	mov	ip, r6
    2ac0:	e7ad      	b.n	2a1e <__aeabi_dmul+0x386>
    2ac2:	2501      	movs	r5, #1
    2ac4:	1a2a      	subs	r2, r5, r0
    2ac6:	2a38      	cmp	r2, #56	; 0x38
    2ac8:	dd06      	ble.n	2ad8 <__aeabi_dmul+0x440>
    2aca:	9b01      	ldr	r3, [sp, #4]
    2acc:	2400      	movs	r4, #0
    2ace:	401d      	ands	r5, r3
    2ad0:	2300      	movs	r3, #0
    2ad2:	2200      	movs	r2, #0
    2ad4:	4699      	mov	r9, r3
    2ad6:	e646      	b.n	2766 <__aeabi_dmul+0xce>
    2ad8:	2a1f      	cmp	r2, #31
    2ada:	dc21      	bgt.n	2b20 <__aeabi_dmul+0x488>
    2adc:	2520      	movs	r5, #32
    2ade:	0020      	movs	r0, r4
    2ae0:	1aad      	subs	r5, r5, r2
    2ae2:	001e      	movs	r6, r3
    2ae4:	40ab      	lsls	r3, r5
    2ae6:	40a8      	lsls	r0, r5
    2ae8:	40d6      	lsrs	r6, r2
    2aea:	1e5d      	subs	r5, r3, #1
    2aec:	41ab      	sbcs	r3, r5
    2aee:	4330      	orrs	r0, r6
    2af0:	4318      	orrs	r0, r3
    2af2:	40d4      	lsrs	r4, r2
    2af4:	0743      	lsls	r3, r0, #29
    2af6:	d009      	beq.n	2b0c <__aeabi_dmul+0x474>
    2af8:	230f      	movs	r3, #15
    2afa:	4003      	ands	r3, r0
    2afc:	2b04      	cmp	r3, #4
    2afe:	d005      	beq.n	2b0c <__aeabi_dmul+0x474>
    2b00:	0003      	movs	r3, r0
    2b02:	1d18      	adds	r0, r3, #4
    2b04:	4298      	cmp	r0, r3
    2b06:	419b      	sbcs	r3, r3
    2b08:	425b      	negs	r3, r3
    2b0a:	18e4      	adds	r4, r4, r3
    2b0c:	0223      	lsls	r3, r4, #8
    2b0e:	d521      	bpl.n	2b54 <__aeabi_dmul+0x4bc>
    2b10:	2501      	movs	r5, #1
    2b12:	9b01      	ldr	r3, [sp, #4]
    2b14:	2401      	movs	r4, #1
    2b16:	401d      	ands	r5, r3
    2b18:	2300      	movs	r3, #0
    2b1a:	2200      	movs	r2, #0
    2b1c:	4699      	mov	r9, r3
    2b1e:	e622      	b.n	2766 <__aeabi_dmul+0xce>
    2b20:	251f      	movs	r5, #31
    2b22:	0021      	movs	r1, r4
    2b24:	426d      	negs	r5, r5
    2b26:	1a28      	subs	r0, r5, r0
    2b28:	40c1      	lsrs	r1, r0
    2b2a:	0008      	movs	r0, r1
    2b2c:	2a20      	cmp	r2, #32
    2b2e:	d01d      	beq.n	2b6c <__aeabi_dmul+0x4d4>
    2b30:	355f      	adds	r5, #95	; 0x5f
    2b32:	1aaa      	subs	r2, r5, r2
    2b34:	4094      	lsls	r4, r2
    2b36:	4323      	orrs	r3, r4
    2b38:	1e5c      	subs	r4, r3, #1
    2b3a:	41a3      	sbcs	r3, r4
    2b3c:	2507      	movs	r5, #7
    2b3e:	4303      	orrs	r3, r0
    2b40:	401d      	ands	r5, r3
    2b42:	2200      	movs	r2, #0
    2b44:	2d00      	cmp	r5, #0
    2b46:	d009      	beq.n	2b5c <__aeabi_dmul+0x4c4>
    2b48:	220f      	movs	r2, #15
    2b4a:	2400      	movs	r4, #0
    2b4c:	401a      	ands	r2, r3
    2b4e:	0018      	movs	r0, r3
    2b50:	2a04      	cmp	r2, #4
    2b52:	d1d6      	bne.n	2b02 <__aeabi_dmul+0x46a>
    2b54:	0003      	movs	r3, r0
    2b56:	0765      	lsls	r5, r4, #29
    2b58:	0264      	lsls	r4, r4, #9
    2b5a:	0b22      	lsrs	r2, r4, #12
    2b5c:	08db      	lsrs	r3, r3, #3
    2b5e:	432b      	orrs	r3, r5
    2b60:	2501      	movs	r5, #1
    2b62:	4699      	mov	r9, r3
    2b64:	9b01      	ldr	r3, [sp, #4]
    2b66:	2400      	movs	r4, #0
    2b68:	401d      	ands	r5, r3
    2b6a:	e5fc      	b.n	2766 <__aeabi_dmul+0xce>
    2b6c:	2400      	movs	r4, #0
    2b6e:	e7e2      	b.n	2b36 <__aeabi_dmul+0x49e>
    2b70:	2280      	movs	r2, #128	; 0x80
    2b72:	2501      	movs	r5, #1
    2b74:	0312      	lsls	r2, r2, #12
    2b76:	4322      	orrs	r2, r4
    2b78:	9901      	ldr	r1, [sp, #4]
    2b7a:	0312      	lsls	r2, r2, #12
    2b7c:	0b12      	lsrs	r2, r2, #12
    2b7e:	400d      	ands	r5, r1
    2b80:	4699      	mov	r9, r3
    2b82:	4c04      	ldr	r4, [pc, #16]	; (2b94 <__aeabi_dmul+0x4fc>)
    2b84:	e5ef      	b.n	2766 <__aeabi_dmul+0xce>
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	000003ff 	.word	0x000003ff
    2b8c:	feffffff 	.word	0xfeffffff
    2b90:	000007fe 	.word	0x000007fe
    2b94:	000007ff 	.word	0x000007ff

00002b98 <__aeabi_dsub>:
    2b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b9a:	4646      	mov	r6, r8
    2b9c:	46d6      	mov	lr, sl
    2b9e:	464f      	mov	r7, r9
    2ba0:	030c      	lsls	r4, r1, #12
    2ba2:	b5c0      	push	{r6, r7, lr}
    2ba4:	0fcd      	lsrs	r5, r1, #31
    2ba6:	004e      	lsls	r6, r1, #1
    2ba8:	0a61      	lsrs	r1, r4, #9
    2baa:	0f44      	lsrs	r4, r0, #29
    2bac:	430c      	orrs	r4, r1
    2bae:	00c1      	lsls	r1, r0, #3
    2bb0:	0058      	lsls	r0, r3, #1
    2bb2:	0d40      	lsrs	r0, r0, #21
    2bb4:	4684      	mov	ip, r0
    2bb6:	468a      	mov	sl, r1
    2bb8:	000f      	movs	r7, r1
    2bba:	0319      	lsls	r1, r3, #12
    2bbc:	0f50      	lsrs	r0, r2, #29
    2bbe:	0a49      	lsrs	r1, r1, #9
    2bc0:	4301      	orrs	r1, r0
    2bc2:	48c6      	ldr	r0, [pc, #792]	; (2edc <__aeabi_dsub+0x344>)
    2bc4:	0d76      	lsrs	r6, r6, #21
    2bc6:	46a8      	mov	r8, r5
    2bc8:	0fdb      	lsrs	r3, r3, #31
    2bca:	00d2      	lsls	r2, r2, #3
    2bcc:	4584      	cmp	ip, r0
    2bce:	d100      	bne.n	2bd2 <__aeabi_dsub+0x3a>
    2bd0:	e0d8      	b.n	2d84 <__aeabi_dsub+0x1ec>
    2bd2:	2001      	movs	r0, #1
    2bd4:	4043      	eors	r3, r0
    2bd6:	42ab      	cmp	r3, r5
    2bd8:	d100      	bne.n	2bdc <__aeabi_dsub+0x44>
    2bda:	e0a6      	b.n	2d2a <__aeabi_dsub+0x192>
    2bdc:	4660      	mov	r0, ip
    2bde:	1a35      	subs	r5, r6, r0
    2be0:	2d00      	cmp	r5, #0
    2be2:	dc00      	bgt.n	2be6 <__aeabi_dsub+0x4e>
    2be4:	e105      	b.n	2df2 <__aeabi_dsub+0x25a>
    2be6:	2800      	cmp	r0, #0
    2be8:	d110      	bne.n	2c0c <__aeabi_dsub+0x74>
    2bea:	000b      	movs	r3, r1
    2bec:	4313      	orrs	r3, r2
    2bee:	d100      	bne.n	2bf2 <__aeabi_dsub+0x5a>
    2bf0:	e0d7      	b.n	2da2 <__aeabi_dsub+0x20a>
    2bf2:	1e6b      	subs	r3, r5, #1
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d000      	beq.n	2bfa <__aeabi_dsub+0x62>
    2bf8:	e14b      	b.n	2e92 <__aeabi_dsub+0x2fa>
    2bfa:	4653      	mov	r3, sl
    2bfc:	1a9f      	subs	r7, r3, r2
    2bfe:	45ba      	cmp	sl, r7
    2c00:	4180      	sbcs	r0, r0
    2c02:	1a64      	subs	r4, r4, r1
    2c04:	4240      	negs	r0, r0
    2c06:	1a24      	subs	r4, r4, r0
    2c08:	2601      	movs	r6, #1
    2c0a:	e01e      	b.n	2c4a <__aeabi_dsub+0xb2>
    2c0c:	4bb3      	ldr	r3, [pc, #716]	; (2edc <__aeabi_dsub+0x344>)
    2c0e:	429e      	cmp	r6, r3
    2c10:	d048      	beq.n	2ca4 <__aeabi_dsub+0x10c>
    2c12:	2380      	movs	r3, #128	; 0x80
    2c14:	041b      	lsls	r3, r3, #16
    2c16:	4319      	orrs	r1, r3
    2c18:	2d38      	cmp	r5, #56	; 0x38
    2c1a:	dd00      	ble.n	2c1e <__aeabi_dsub+0x86>
    2c1c:	e119      	b.n	2e52 <__aeabi_dsub+0x2ba>
    2c1e:	2d1f      	cmp	r5, #31
    2c20:	dd00      	ble.n	2c24 <__aeabi_dsub+0x8c>
    2c22:	e14c      	b.n	2ebe <__aeabi_dsub+0x326>
    2c24:	2320      	movs	r3, #32
    2c26:	000f      	movs	r7, r1
    2c28:	1b5b      	subs	r3, r3, r5
    2c2a:	0010      	movs	r0, r2
    2c2c:	409a      	lsls	r2, r3
    2c2e:	409f      	lsls	r7, r3
    2c30:	40e8      	lsrs	r0, r5
    2c32:	1e53      	subs	r3, r2, #1
    2c34:	419a      	sbcs	r2, r3
    2c36:	40e9      	lsrs	r1, r5
    2c38:	4307      	orrs	r7, r0
    2c3a:	4317      	orrs	r7, r2
    2c3c:	4653      	mov	r3, sl
    2c3e:	1bdf      	subs	r7, r3, r7
    2c40:	1a61      	subs	r1, r4, r1
    2c42:	45ba      	cmp	sl, r7
    2c44:	41a4      	sbcs	r4, r4
    2c46:	4264      	negs	r4, r4
    2c48:	1b0c      	subs	r4, r1, r4
    2c4a:	0223      	lsls	r3, r4, #8
    2c4c:	d400      	bmi.n	2c50 <__aeabi_dsub+0xb8>
    2c4e:	e0c5      	b.n	2ddc <__aeabi_dsub+0x244>
    2c50:	0264      	lsls	r4, r4, #9
    2c52:	0a65      	lsrs	r5, r4, #9
    2c54:	2d00      	cmp	r5, #0
    2c56:	d100      	bne.n	2c5a <__aeabi_dsub+0xc2>
    2c58:	e0f6      	b.n	2e48 <__aeabi_dsub+0x2b0>
    2c5a:	0028      	movs	r0, r5
    2c5c:	f000 fb1e 	bl	329c <__clzsi2>
    2c60:	0003      	movs	r3, r0
    2c62:	3b08      	subs	r3, #8
    2c64:	2b1f      	cmp	r3, #31
    2c66:	dd00      	ble.n	2c6a <__aeabi_dsub+0xd2>
    2c68:	e0e9      	b.n	2e3e <__aeabi_dsub+0x2a6>
    2c6a:	2220      	movs	r2, #32
    2c6c:	003c      	movs	r4, r7
    2c6e:	1ad2      	subs	r2, r2, r3
    2c70:	409d      	lsls	r5, r3
    2c72:	40d4      	lsrs	r4, r2
    2c74:	409f      	lsls	r7, r3
    2c76:	4325      	orrs	r5, r4
    2c78:	429e      	cmp	r6, r3
    2c7a:	dd00      	ble.n	2c7e <__aeabi_dsub+0xe6>
    2c7c:	e0db      	b.n	2e36 <__aeabi_dsub+0x29e>
    2c7e:	1b9e      	subs	r6, r3, r6
    2c80:	1c73      	adds	r3, r6, #1
    2c82:	2b1f      	cmp	r3, #31
    2c84:	dd00      	ble.n	2c88 <__aeabi_dsub+0xf0>
    2c86:	e10a      	b.n	2e9e <__aeabi_dsub+0x306>
    2c88:	2220      	movs	r2, #32
    2c8a:	0038      	movs	r0, r7
    2c8c:	1ad2      	subs	r2, r2, r3
    2c8e:	0029      	movs	r1, r5
    2c90:	4097      	lsls	r7, r2
    2c92:	002c      	movs	r4, r5
    2c94:	4091      	lsls	r1, r2
    2c96:	40d8      	lsrs	r0, r3
    2c98:	1e7a      	subs	r2, r7, #1
    2c9a:	4197      	sbcs	r7, r2
    2c9c:	40dc      	lsrs	r4, r3
    2c9e:	2600      	movs	r6, #0
    2ca0:	4301      	orrs	r1, r0
    2ca2:	430f      	orrs	r7, r1
    2ca4:	077b      	lsls	r3, r7, #29
    2ca6:	d009      	beq.n	2cbc <__aeabi_dsub+0x124>
    2ca8:	230f      	movs	r3, #15
    2caa:	403b      	ands	r3, r7
    2cac:	2b04      	cmp	r3, #4
    2cae:	d005      	beq.n	2cbc <__aeabi_dsub+0x124>
    2cb0:	1d3b      	adds	r3, r7, #4
    2cb2:	42bb      	cmp	r3, r7
    2cb4:	41bf      	sbcs	r7, r7
    2cb6:	427f      	negs	r7, r7
    2cb8:	19e4      	adds	r4, r4, r7
    2cba:	001f      	movs	r7, r3
    2cbc:	0223      	lsls	r3, r4, #8
    2cbe:	d525      	bpl.n	2d0c <__aeabi_dsub+0x174>
    2cc0:	4b86      	ldr	r3, [pc, #536]	; (2edc <__aeabi_dsub+0x344>)
    2cc2:	3601      	adds	r6, #1
    2cc4:	429e      	cmp	r6, r3
    2cc6:	d100      	bne.n	2cca <__aeabi_dsub+0x132>
    2cc8:	e0af      	b.n	2e2a <__aeabi_dsub+0x292>
    2cca:	4b85      	ldr	r3, [pc, #532]	; (2ee0 <__aeabi_dsub+0x348>)
    2ccc:	2501      	movs	r5, #1
    2cce:	401c      	ands	r4, r3
    2cd0:	4643      	mov	r3, r8
    2cd2:	0762      	lsls	r2, r4, #29
    2cd4:	08ff      	lsrs	r7, r7, #3
    2cd6:	0264      	lsls	r4, r4, #9
    2cd8:	0576      	lsls	r6, r6, #21
    2cda:	4317      	orrs	r7, r2
    2cdc:	0b24      	lsrs	r4, r4, #12
    2cde:	0d76      	lsrs	r6, r6, #21
    2ce0:	401d      	ands	r5, r3
    2ce2:	2100      	movs	r1, #0
    2ce4:	0324      	lsls	r4, r4, #12
    2ce6:	0b23      	lsrs	r3, r4, #12
    2ce8:	0d0c      	lsrs	r4, r1, #20
    2cea:	4a7e      	ldr	r2, [pc, #504]	; (2ee4 <__aeabi_dsub+0x34c>)
    2cec:	0524      	lsls	r4, r4, #20
    2cee:	431c      	orrs	r4, r3
    2cf0:	4014      	ands	r4, r2
    2cf2:	0533      	lsls	r3, r6, #20
    2cf4:	4323      	orrs	r3, r4
    2cf6:	005b      	lsls	r3, r3, #1
    2cf8:	07ed      	lsls	r5, r5, #31
    2cfa:	085b      	lsrs	r3, r3, #1
    2cfc:	432b      	orrs	r3, r5
    2cfe:	0038      	movs	r0, r7
    2d00:	0019      	movs	r1, r3
    2d02:	bc1c      	pop	{r2, r3, r4}
    2d04:	4690      	mov	r8, r2
    2d06:	4699      	mov	r9, r3
    2d08:	46a2      	mov	sl, r4
    2d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d0c:	2501      	movs	r5, #1
    2d0e:	4643      	mov	r3, r8
    2d10:	0762      	lsls	r2, r4, #29
    2d12:	08ff      	lsrs	r7, r7, #3
    2d14:	4317      	orrs	r7, r2
    2d16:	08e4      	lsrs	r4, r4, #3
    2d18:	401d      	ands	r5, r3
    2d1a:	4b70      	ldr	r3, [pc, #448]	; (2edc <__aeabi_dsub+0x344>)
    2d1c:	429e      	cmp	r6, r3
    2d1e:	d036      	beq.n	2d8e <__aeabi_dsub+0x1f6>
    2d20:	0324      	lsls	r4, r4, #12
    2d22:	0576      	lsls	r6, r6, #21
    2d24:	0b24      	lsrs	r4, r4, #12
    2d26:	0d76      	lsrs	r6, r6, #21
    2d28:	e7db      	b.n	2ce2 <__aeabi_dsub+0x14a>
    2d2a:	4663      	mov	r3, ip
    2d2c:	1af3      	subs	r3, r6, r3
    2d2e:	2b00      	cmp	r3, #0
    2d30:	dc00      	bgt.n	2d34 <__aeabi_dsub+0x19c>
    2d32:	e094      	b.n	2e5e <__aeabi_dsub+0x2c6>
    2d34:	4660      	mov	r0, ip
    2d36:	2800      	cmp	r0, #0
    2d38:	d035      	beq.n	2da6 <__aeabi_dsub+0x20e>
    2d3a:	4868      	ldr	r0, [pc, #416]	; (2edc <__aeabi_dsub+0x344>)
    2d3c:	4286      	cmp	r6, r0
    2d3e:	d0b1      	beq.n	2ca4 <__aeabi_dsub+0x10c>
    2d40:	2780      	movs	r7, #128	; 0x80
    2d42:	043f      	lsls	r7, r7, #16
    2d44:	4339      	orrs	r1, r7
    2d46:	2b38      	cmp	r3, #56	; 0x38
    2d48:	dc00      	bgt.n	2d4c <__aeabi_dsub+0x1b4>
    2d4a:	e0fd      	b.n	2f48 <__aeabi_dsub+0x3b0>
    2d4c:	430a      	orrs	r2, r1
    2d4e:	0017      	movs	r7, r2
    2d50:	2100      	movs	r1, #0
    2d52:	1e7a      	subs	r2, r7, #1
    2d54:	4197      	sbcs	r7, r2
    2d56:	4457      	add	r7, sl
    2d58:	4557      	cmp	r7, sl
    2d5a:	4180      	sbcs	r0, r0
    2d5c:	1909      	adds	r1, r1, r4
    2d5e:	4244      	negs	r4, r0
    2d60:	190c      	adds	r4, r1, r4
    2d62:	0223      	lsls	r3, r4, #8
    2d64:	d53a      	bpl.n	2ddc <__aeabi_dsub+0x244>
    2d66:	4b5d      	ldr	r3, [pc, #372]	; (2edc <__aeabi_dsub+0x344>)
    2d68:	3601      	adds	r6, #1
    2d6a:	429e      	cmp	r6, r3
    2d6c:	d100      	bne.n	2d70 <__aeabi_dsub+0x1d8>
    2d6e:	e14b      	b.n	3008 <__aeabi_dsub+0x470>
    2d70:	2201      	movs	r2, #1
    2d72:	4b5b      	ldr	r3, [pc, #364]	; (2ee0 <__aeabi_dsub+0x348>)
    2d74:	401c      	ands	r4, r3
    2d76:	087b      	lsrs	r3, r7, #1
    2d78:	4017      	ands	r7, r2
    2d7a:	431f      	orrs	r7, r3
    2d7c:	07e2      	lsls	r2, r4, #31
    2d7e:	4317      	orrs	r7, r2
    2d80:	0864      	lsrs	r4, r4, #1
    2d82:	e78f      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2d84:	0008      	movs	r0, r1
    2d86:	4310      	orrs	r0, r2
    2d88:	d000      	beq.n	2d8c <__aeabi_dsub+0x1f4>
    2d8a:	e724      	b.n	2bd6 <__aeabi_dsub+0x3e>
    2d8c:	e721      	b.n	2bd2 <__aeabi_dsub+0x3a>
    2d8e:	0023      	movs	r3, r4
    2d90:	433b      	orrs	r3, r7
    2d92:	d100      	bne.n	2d96 <__aeabi_dsub+0x1fe>
    2d94:	e1b9      	b.n	310a <__aeabi_dsub+0x572>
    2d96:	2280      	movs	r2, #128	; 0x80
    2d98:	0312      	lsls	r2, r2, #12
    2d9a:	4314      	orrs	r4, r2
    2d9c:	0324      	lsls	r4, r4, #12
    2d9e:	0b24      	lsrs	r4, r4, #12
    2da0:	e79f      	b.n	2ce2 <__aeabi_dsub+0x14a>
    2da2:	002e      	movs	r6, r5
    2da4:	e77e      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2da6:	0008      	movs	r0, r1
    2da8:	4310      	orrs	r0, r2
    2daa:	d100      	bne.n	2dae <__aeabi_dsub+0x216>
    2dac:	e0ca      	b.n	2f44 <__aeabi_dsub+0x3ac>
    2dae:	1e58      	subs	r0, r3, #1
    2db0:	4684      	mov	ip, r0
    2db2:	2800      	cmp	r0, #0
    2db4:	d000      	beq.n	2db8 <__aeabi_dsub+0x220>
    2db6:	e0e7      	b.n	2f88 <__aeabi_dsub+0x3f0>
    2db8:	4452      	add	r2, sl
    2dba:	4552      	cmp	r2, sl
    2dbc:	4180      	sbcs	r0, r0
    2dbe:	1864      	adds	r4, r4, r1
    2dc0:	4240      	negs	r0, r0
    2dc2:	1824      	adds	r4, r4, r0
    2dc4:	0017      	movs	r7, r2
    2dc6:	2601      	movs	r6, #1
    2dc8:	0223      	lsls	r3, r4, #8
    2dca:	d507      	bpl.n	2ddc <__aeabi_dsub+0x244>
    2dcc:	2602      	movs	r6, #2
    2dce:	e7cf      	b.n	2d70 <__aeabi_dsub+0x1d8>
    2dd0:	4664      	mov	r4, ip
    2dd2:	432c      	orrs	r4, r5
    2dd4:	d100      	bne.n	2dd8 <__aeabi_dsub+0x240>
    2dd6:	e1b3      	b.n	3140 <__aeabi_dsub+0x5a8>
    2dd8:	002c      	movs	r4, r5
    2dda:	4667      	mov	r7, ip
    2ddc:	077b      	lsls	r3, r7, #29
    2dde:	d000      	beq.n	2de2 <__aeabi_dsub+0x24a>
    2de0:	e762      	b.n	2ca8 <__aeabi_dsub+0x110>
    2de2:	0763      	lsls	r3, r4, #29
    2de4:	08ff      	lsrs	r7, r7, #3
    2de6:	431f      	orrs	r7, r3
    2de8:	2501      	movs	r5, #1
    2dea:	4643      	mov	r3, r8
    2dec:	08e4      	lsrs	r4, r4, #3
    2dee:	401d      	ands	r5, r3
    2df0:	e793      	b.n	2d1a <__aeabi_dsub+0x182>
    2df2:	2d00      	cmp	r5, #0
    2df4:	d178      	bne.n	2ee8 <__aeabi_dsub+0x350>
    2df6:	1c75      	adds	r5, r6, #1
    2df8:	056d      	lsls	r5, r5, #21
    2dfa:	0d6d      	lsrs	r5, r5, #21
    2dfc:	2d01      	cmp	r5, #1
    2dfe:	dc00      	bgt.n	2e02 <__aeabi_dsub+0x26a>
    2e00:	e0f2      	b.n	2fe8 <__aeabi_dsub+0x450>
    2e02:	4650      	mov	r0, sl
    2e04:	1a80      	subs	r0, r0, r2
    2e06:	4582      	cmp	sl, r0
    2e08:	41bf      	sbcs	r7, r7
    2e0a:	1a65      	subs	r5, r4, r1
    2e0c:	427f      	negs	r7, r7
    2e0e:	1bed      	subs	r5, r5, r7
    2e10:	4684      	mov	ip, r0
    2e12:	0228      	lsls	r0, r5, #8
    2e14:	d400      	bmi.n	2e18 <__aeabi_dsub+0x280>
    2e16:	e08c      	b.n	2f32 <__aeabi_dsub+0x39a>
    2e18:	4650      	mov	r0, sl
    2e1a:	1a17      	subs	r7, r2, r0
    2e1c:	42ba      	cmp	r2, r7
    2e1e:	4192      	sbcs	r2, r2
    2e20:	1b0c      	subs	r4, r1, r4
    2e22:	4255      	negs	r5, r2
    2e24:	1b65      	subs	r5, r4, r5
    2e26:	4698      	mov	r8, r3
    2e28:	e714      	b.n	2c54 <__aeabi_dsub+0xbc>
    2e2a:	2501      	movs	r5, #1
    2e2c:	4643      	mov	r3, r8
    2e2e:	2400      	movs	r4, #0
    2e30:	401d      	ands	r5, r3
    2e32:	2700      	movs	r7, #0
    2e34:	e755      	b.n	2ce2 <__aeabi_dsub+0x14a>
    2e36:	4c2a      	ldr	r4, [pc, #168]	; (2ee0 <__aeabi_dsub+0x348>)
    2e38:	1af6      	subs	r6, r6, r3
    2e3a:	402c      	ands	r4, r5
    2e3c:	e732      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2e3e:	003d      	movs	r5, r7
    2e40:	3828      	subs	r0, #40	; 0x28
    2e42:	4085      	lsls	r5, r0
    2e44:	2700      	movs	r7, #0
    2e46:	e717      	b.n	2c78 <__aeabi_dsub+0xe0>
    2e48:	0038      	movs	r0, r7
    2e4a:	f000 fa27 	bl	329c <__clzsi2>
    2e4e:	3020      	adds	r0, #32
    2e50:	e706      	b.n	2c60 <__aeabi_dsub+0xc8>
    2e52:	430a      	orrs	r2, r1
    2e54:	0017      	movs	r7, r2
    2e56:	2100      	movs	r1, #0
    2e58:	1e7a      	subs	r2, r7, #1
    2e5a:	4197      	sbcs	r7, r2
    2e5c:	e6ee      	b.n	2c3c <__aeabi_dsub+0xa4>
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d000      	beq.n	2e64 <__aeabi_dsub+0x2cc>
    2e62:	e0e5      	b.n	3030 <__aeabi_dsub+0x498>
    2e64:	1c73      	adds	r3, r6, #1
    2e66:	469c      	mov	ip, r3
    2e68:	055b      	lsls	r3, r3, #21
    2e6a:	0d5b      	lsrs	r3, r3, #21
    2e6c:	2b01      	cmp	r3, #1
    2e6e:	dc00      	bgt.n	2e72 <__aeabi_dsub+0x2da>
    2e70:	e09f      	b.n	2fb2 <__aeabi_dsub+0x41a>
    2e72:	4b1a      	ldr	r3, [pc, #104]	; (2edc <__aeabi_dsub+0x344>)
    2e74:	459c      	cmp	ip, r3
    2e76:	d100      	bne.n	2e7a <__aeabi_dsub+0x2e2>
    2e78:	e0c5      	b.n	3006 <__aeabi_dsub+0x46e>
    2e7a:	4452      	add	r2, sl
    2e7c:	4552      	cmp	r2, sl
    2e7e:	4180      	sbcs	r0, r0
    2e80:	1864      	adds	r4, r4, r1
    2e82:	4240      	negs	r0, r0
    2e84:	1824      	adds	r4, r4, r0
    2e86:	07e7      	lsls	r7, r4, #31
    2e88:	0852      	lsrs	r2, r2, #1
    2e8a:	4317      	orrs	r7, r2
    2e8c:	0864      	lsrs	r4, r4, #1
    2e8e:	4666      	mov	r6, ip
    2e90:	e708      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2e92:	4812      	ldr	r0, [pc, #72]	; (2edc <__aeabi_dsub+0x344>)
    2e94:	4285      	cmp	r5, r0
    2e96:	d100      	bne.n	2e9a <__aeabi_dsub+0x302>
    2e98:	e085      	b.n	2fa6 <__aeabi_dsub+0x40e>
    2e9a:	001d      	movs	r5, r3
    2e9c:	e6bc      	b.n	2c18 <__aeabi_dsub+0x80>
    2e9e:	0029      	movs	r1, r5
    2ea0:	3e1f      	subs	r6, #31
    2ea2:	40f1      	lsrs	r1, r6
    2ea4:	2b20      	cmp	r3, #32
    2ea6:	d100      	bne.n	2eaa <__aeabi_dsub+0x312>
    2ea8:	e07f      	b.n	2faa <__aeabi_dsub+0x412>
    2eaa:	2240      	movs	r2, #64	; 0x40
    2eac:	1ad3      	subs	r3, r2, r3
    2eae:	409d      	lsls	r5, r3
    2eb0:	432f      	orrs	r7, r5
    2eb2:	1e7d      	subs	r5, r7, #1
    2eb4:	41af      	sbcs	r7, r5
    2eb6:	2400      	movs	r4, #0
    2eb8:	430f      	orrs	r7, r1
    2eba:	2600      	movs	r6, #0
    2ebc:	e78e      	b.n	2ddc <__aeabi_dsub+0x244>
    2ebe:	002b      	movs	r3, r5
    2ec0:	000f      	movs	r7, r1
    2ec2:	3b20      	subs	r3, #32
    2ec4:	40df      	lsrs	r7, r3
    2ec6:	2d20      	cmp	r5, #32
    2ec8:	d071      	beq.n	2fae <__aeabi_dsub+0x416>
    2eca:	2340      	movs	r3, #64	; 0x40
    2ecc:	1b5d      	subs	r5, r3, r5
    2ece:	40a9      	lsls	r1, r5
    2ed0:	430a      	orrs	r2, r1
    2ed2:	1e51      	subs	r1, r2, #1
    2ed4:	418a      	sbcs	r2, r1
    2ed6:	2100      	movs	r1, #0
    2ed8:	4317      	orrs	r7, r2
    2eda:	e6af      	b.n	2c3c <__aeabi_dsub+0xa4>
    2edc:	000007ff 	.word	0x000007ff
    2ee0:	ff7fffff 	.word	0xff7fffff
    2ee4:	800fffff 	.word	0x800fffff
    2ee8:	2e00      	cmp	r6, #0
    2eea:	d03e      	beq.n	2f6a <__aeabi_dsub+0x3d2>
    2eec:	4eb3      	ldr	r6, [pc, #716]	; (31bc <__aeabi_dsub+0x624>)
    2eee:	45b4      	cmp	ip, r6
    2ef0:	d045      	beq.n	2f7e <__aeabi_dsub+0x3e6>
    2ef2:	2680      	movs	r6, #128	; 0x80
    2ef4:	0436      	lsls	r6, r6, #16
    2ef6:	426d      	negs	r5, r5
    2ef8:	4334      	orrs	r4, r6
    2efa:	2d38      	cmp	r5, #56	; 0x38
    2efc:	dd00      	ble.n	2f00 <__aeabi_dsub+0x368>
    2efe:	e0a8      	b.n	3052 <__aeabi_dsub+0x4ba>
    2f00:	2d1f      	cmp	r5, #31
    2f02:	dd00      	ble.n	2f06 <__aeabi_dsub+0x36e>
    2f04:	e11f      	b.n	3146 <__aeabi_dsub+0x5ae>
    2f06:	2620      	movs	r6, #32
    2f08:	0027      	movs	r7, r4
    2f0a:	4650      	mov	r0, sl
    2f0c:	1b76      	subs	r6, r6, r5
    2f0e:	40b7      	lsls	r7, r6
    2f10:	40e8      	lsrs	r0, r5
    2f12:	4307      	orrs	r7, r0
    2f14:	4650      	mov	r0, sl
    2f16:	40b0      	lsls	r0, r6
    2f18:	1e46      	subs	r6, r0, #1
    2f1a:	41b0      	sbcs	r0, r6
    2f1c:	40ec      	lsrs	r4, r5
    2f1e:	4338      	orrs	r0, r7
    2f20:	1a17      	subs	r7, r2, r0
    2f22:	42ba      	cmp	r2, r7
    2f24:	4192      	sbcs	r2, r2
    2f26:	1b0c      	subs	r4, r1, r4
    2f28:	4252      	negs	r2, r2
    2f2a:	1aa4      	subs	r4, r4, r2
    2f2c:	4666      	mov	r6, ip
    2f2e:	4698      	mov	r8, r3
    2f30:	e68b      	b.n	2c4a <__aeabi_dsub+0xb2>
    2f32:	4664      	mov	r4, ip
    2f34:	4667      	mov	r7, ip
    2f36:	432c      	orrs	r4, r5
    2f38:	d000      	beq.n	2f3c <__aeabi_dsub+0x3a4>
    2f3a:	e68b      	b.n	2c54 <__aeabi_dsub+0xbc>
    2f3c:	2500      	movs	r5, #0
    2f3e:	2600      	movs	r6, #0
    2f40:	2700      	movs	r7, #0
    2f42:	e6ea      	b.n	2d1a <__aeabi_dsub+0x182>
    2f44:	001e      	movs	r6, r3
    2f46:	e6ad      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2f48:	2b1f      	cmp	r3, #31
    2f4a:	dc60      	bgt.n	300e <__aeabi_dsub+0x476>
    2f4c:	2720      	movs	r7, #32
    2f4e:	1af8      	subs	r0, r7, r3
    2f50:	000f      	movs	r7, r1
    2f52:	4684      	mov	ip, r0
    2f54:	4087      	lsls	r7, r0
    2f56:	0010      	movs	r0, r2
    2f58:	40d8      	lsrs	r0, r3
    2f5a:	4307      	orrs	r7, r0
    2f5c:	4660      	mov	r0, ip
    2f5e:	4082      	lsls	r2, r0
    2f60:	1e50      	subs	r0, r2, #1
    2f62:	4182      	sbcs	r2, r0
    2f64:	40d9      	lsrs	r1, r3
    2f66:	4317      	orrs	r7, r2
    2f68:	e6f5      	b.n	2d56 <__aeabi_dsub+0x1be>
    2f6a:	0026      	movs	r6, r4
    2f6c:	4650      	mov	r0, sl
    2f6e:	4306      	orrs	r6, r0
    2f70:	d005      	beq.n	2f7e <__aeabi_dsub+0x3e6>
    2f72:	43ed      	mvns	r5, r5
    2f74:	2d00      	cmp	r5, #0
    2f76:	d0d3      	beq.n	2f20 <__aeabi_dsub+0x388>
    2f78:	4e90      	ldr	r6, [pc, #576]	; (31bc <__aeabi_dsub+0x624>)
    2f7a:	45b4      	cmp	ip, r6
    2f7c:	d1bd      	bne.n	2efa <__aeabi_dsub+0x362>
    2f7e:	000c      	movs	r4, r1
    2f80:	0017      	movs	r7, r2
    2f82:	4666      	mov	r6, ip
    2f84:	4698      	mov	r8, r3
    2f86:	e68d      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2f88:	488c      	ldr	r0, [pc, #560]	; (31bc <__aeabi_dsub+0x624>)
    2f8a:	4283      	cmp	r3, r0
    2f8c:	d00b      	beq.n	2fa6 <__aeabi_dsub+0x40e>
    2f8e:	4663      	mov	r3, ip
    2f90:	e6d9      	b.n	2d46 <__aeabi_dsub+0x1ae>
    2f92:	2d00      	cmp	r5, #0
    2f94:	d000      	beq.n	2f98 <__aeabi_dsub+0x400>
    2f96:	e096      	b.n	30c6 <__aeabi_dsub+0x52e>
    2f98:	0008      	movs	r0, r1
    2f9a:	4310      	orrs	r0, r2
    2f9c:	d100      	bne.n	2fa0 <__aeabi_dsub+0x408>
    2f9e:	e0e2      	b.n	3166 <__aeabi_dsub+0x5ce>
    2fa0:	000c      	movs	r4, r1
    2fa2:	0017      	movs	r7, r2
    2fa4:	4698      	mov	r8, r3
    2fa6:	4e85      	ldr	r6, [pc, #532]	; (31bc <__aeabi_dsub+0x624>)
    2fa8:	e67c      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2faa:	2500      	movs	r5, #0
    2fac:	e780      	b.n	2eb0 <__aeabi_dsub+0x318>
    2fae:	2100      	movs	r1, #0
    2fb0:	e78e      	b.n	2ed0 <__aeabi_dsub+0x338>
    2fb2:	0023      	movs	r3, r4
    2fb4:	4650      	mov	r0, sl
    2fb6:	4303      	orrs	r3, r0
    2fb8:	2e00      	cmp	r6, #0
    2fba:	d000      	beq.n	2fbe <__aeabi_dsub+0x426>
    2fbc:	e0a8      	b.n	3110 <__aeabi_dsub+0x578>
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d100      	bne.n	2fc4 <__aeabi_dsub+0x42c>
    2fc2:	e0de      	b.n	3182 <__aeabi_dsub+0x5ea>
    2fc4:	000b      	movs	r3, r1
    2fc6:	4313      	orrs	r3, r2
    2fc8:	d100      	bne.n	2fcc <__aeabi_dsub+0x434>
    2fca:	e66b      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2fcc:	4452      	add	r2, sl
    2fce:	4552      	cmp	r2, sl
    2fd0:	4180      	sbcs	r0, r0
    2fd2:	1864      	adds	r4, r4, r1
    2fd4:	4240      	negs	r0, r0
    2fd6:	1824      	adds	r4, r4, r0
    2fd8:	0017      	movs	r7, r2
    2fda:	0223      	lsls	r3, r4, #8
    2fdc:	d400      	bmi.n	2fe0 <__aeabi_dsub+0x448>
    2fde:	e6fd      	b.n	2ddc <__aeabi_dsub+0x244>
    2fe0:	4b77      	ldr	r3, [pc, #476]	; (31c0 <__aeabi_dsub+0x628>)
    2fe2:	4666      	mov	r6, ip
    2fe4:	401c      	ands	r4, r3
    2fe6:	e65d      	b.n	2ca4 <__aeabi_dsub+0x10c>
    2fe8:	0025      	movs	r5, r4
    2fea:	4650      	mov	r0, sl
    2fec:	4305      	orrs	r5, r0
    2fee:	2e00      	cmp	r6, #0
    2ff0:	d1cf      	bne.n	2f92 <__aeabi_dsub+0x3fa>
    2ff2:	2d00      	cmp	r5, #0
    2ff4:	d14f      	bne.n	3096 <__aeabi_dsub+0x4fe>
    2ff6:	000c      	movs	r4, r1
    2ff8:	4314      	orrs	r4, r2
    2ffa:	d100      	bne.n	2ffe <__aeabi_dsub+0x466>
    2ffc:	e0a0      	b.n	3140 <__aeabi_dsub+0x5a8>
    2ffe:	000c      	movs	r4, r1
    3000:	0017      	movs	r7, r2
    3002:	4698      	mov	r8, r3
    3004:	e64e      	b.n	2ca4 <__aeabi_dsub+0x10c>
    3006:	4666      	mov	r6, ip
    3008:	2400      	movs	r4, #0
    300a:	2700      	movs	r7, #0
    300c:	e685      	b.n	2d1a <__aeabi_dsub+0x182>
    300e:	001f      	movs	r7, r3
    3010:	0008      	movs	r0, r1
    3012:	3f20      	subs	r7, #32
    3014:	40f8      	lsrs	r0, r7
    3016:	0007      	movs	r7, r0
    3018:	2b20      	cmp	r3, #32
    301a:	d100      	bne.n	301e <__aeabi_dsub+0x486>
    301c:	e08e      	b.n	313c <__aeabi_dsub+0x5a4>
    301e:	2040      	movs	r0, #64	; 0x40
    3020:	1ac3      	subs	r3, r0, r3
    3022:	4099      	lsls	r1, r3
    3024:	430a      	orrs	r2, r1
    3026:	1e51      	subs	r1, r2, #1
    3028:	418a      	sbcs	r2, r1
    302a:	2100      	movs	r1, #0
    302c:	4317      	orrs	r7, r2
    302e:	e692      	b.n	2d56 <__aeabi_dsub+0x1be>
    3030:	2e00      	cmp	r6, #0
    3032:	d114      	bne.n	305e <__aeabi_dsub+0x4c6>
    3034:	0026      	movs	r6, r4
    3036:	4650      	mov	r0, sl
    3038:	4306      	orrs	r6, r0
    303a:	d062      	beq.n	3102 <__aeabi_dsub+0x56a>
    303c:	43db      	mvns	r3, r3
    303e:	2b00      	cmp	r3, #0
    3040:	d15c      	bne.n	30fc <__aeabi_dsub+0x564>
    3042:	1887      	adds	r7, r0, r2
    3044:	4297      	cmp	r7, r2
    3046:	4192      	sbcs	r2, r2
    3048:	1864      	adds	r4, r4, r1
    304a:	4252      	negs	r2, r2
    304c:	18a4      	adds	r4, r4, r2
    304e:	4666      	mov	r6, ip
    3050:	e687      	b.n	2d62 <__aeabi_dsub+0x1ca>
    3052:	4650      	mov	r0, sl
    3054:	4320      	orrs	r0, r4
    3056:	1e44      	subs	r4, r0, #1
    3058:	41a0      	sbcs	r0, r4
    305a:	2400      	movs	r4, #0
    305c:	e760      	b.n	2f20 <__aeabi_dsub+0x388>
    305e:	4e57      	ldr	r6, [pc, #348]	; (31bc <__aeabi_dsub+0x624>)
    3060:	45b4      	cmp	ip, r6
    3062:	d04e      	beq.n	3102 <__aeabi_dsub+0x56a>
    3064:	2680      	movs	r6, #128	; 0x80
    3066:	0436      	lsls	r6, r6, #16
    3068:	425b      	negs	r3, r3
    306a:	4334      	orrs	r4, r6
    306c:	2b38      	cmp	r3, #56	; 0x38
    306e:	dd00      	ble.n	3072 <__aeabi_dsub+0x4da>
    3070:	e07f      	b.n	3172 <__aeabi_dsub+0x5da>
    3072:	2b1f      	cmp	r3, #31
    3074:	dd00      	ble.n	3078 <__aeabi_dsub+0x4e0>
    3076:	e08b      	b.n	3190 <__aeabi_dsub+0x5f8>
    3078:	2620      	movs	r6, #32
    307a:	0027      	movs	r7, r4
    307c:	4650      	mov	r0, sl
    307e:	1af6      	subs	r6, r6, r3
    3080:	40b7      	lsls	r7, r6
    3082:	40d8      	lsrs	r0, r3
    3084:	4307      	orrs	r7, r0
    3086:	4650      	mov	r0, sl
    3088:	40b0      	lsls	r0, r6
    308a:	1e46      	subs	r6, r0, #1
    308c:	41b0      	sbcs	r0, r6
    308e:	4307      	orrs	r7, r0
    3090:	40dc      	lsrs	r4, r3
    3092:	18bf      	adds	r7, r7, r2
    3094:	e7d6      	b.n	3044 <__aeabi_dsub+0x4ac>
    3096:	000d      	movs	r5, r1
    3098:	4315      	orrs	r5, r2
    309a:	d100      	bne.n	309e <__aeabi_dsub+0x506>
    309c:	e602      	b.n	2ca4 <__aeabi_dsub+0x10c>
    309e:	4650      	mov	r0, sl
    30a0:	1a80      	subs	r0, r0, r2
    30a2:	4582      	cmp	sl, r0
    30a4:	41bf      	sbcs	r7, r7
    30a6:	1a65      	subs	r5, r4, r1
    30a8:	427f      	negs	r7, r7
    30aa:	1bed      	subs	r5, r5, r7
    30ac:	4684      	mov	ip, r0
    30ae:	0228      	lsls	r0, r5, #8
    30b0:	d400      	bmi.n	30b4 <__aeabi_dsub+0x51c>
    30b2:	e68d      	b.n	2dd0 <__aeabi_dsub+0x238>
    30b4:	4650      	mov	r0, sl
    30b6:	1a17      	subs	r7, r2, r0
    30b8:	42ba      	cmp	r2, r7
    30ba:	4192      	sbcs	r2, r2
    30bc:	1b0c      	subs	r4, r1, r4
    30be:	4252      	negs	r2, r2
    30c0:	1aa4      	subs	r4, r4, r2
    30c2:	4698      	mov	r8, r3
    30c4:	e5ee      	b.n	2ca4 <__aeabi_dsub+0x10c>
    30c6:	000d      	movs	r5, r1
    30c8:	4315      	orrs	r5, r2
    30ca:	d100      	bne.n	30ce <__aeabi_dsub+0x536>
    30cc:	e76b      	b.n	2fa6 <__aeabi_dsub+0x40e>
    30ce:	4650      	mov	r0, sl
    30d0:	0767      	lsls	r7, r4, #29
    30d2:	08c0      	lsrs	r0, r0, #3
    30d4:	4307      	orrs	r7, r0
    30d6:	2080      	movs	r0, #128	; 0x80
    30d8:	08e4      	lsrs	r4, r4, #3
    30da:	0300      	lsls	r0, r0, #12
    30dc:	4204      	tst	r4, r0
    30de:	d007      	beq.n	30f0 <__aeabi_dsub+0x558>
    30e0:	08cd      	lsrs	r5, r1, #3
    30e2:	4205      	tst	r5, r0
    30e4:	d104      	bne.n	30f0 <__aeabi_dsub+0x558>
    30e6:	002c      	movs	r4, r5
    30e8:	4698      	mov	r8, r3
    30ea:	08d7      	lsrs	r7, r2, #3
    30ec:	0749      	lsls	r1, r1, #29
    30ee:	430f      	orrs	r7, r1
    30f0:	0f7b      	lsrs	r3, r7, #29
    30f2:	00e4      	lsls	r4, r4, #3
    30f4:	431c      	orrs	r4, r3
    30f6:	00ff      	lsls	r7, r7, #3
    30f8:	4e30      	ldr	r6, [pc, #192]	; (31bc <__aeabi_dsub+0x624>)
    30fa:	e5d3      	b.n	2ca4 <__aeabi_dsub+0x10c>
    30fc:	4e2f      	ldr	r6, [pc, #188]	; (31bc <__aeabi_dsub+0x624>)
    30fe:	45b4      	cmp	ip, r6
    3100:	d1b4      	bne.n	306c <__aeabi_dsub+0x4d4>
    3102:	000c      	movs	r4, r1
    3104:	0017      	movs	r7, r2
    3106:	4666      	mov	r6, ip
    3108:	e5cc      	b.n	2ca4 <__aeabi_dsub+0x10c>
    310a:	2700      	movs	r7, #0
    310c:	2400      	movs	r4, #0
    310e:	e5e8      	b.n	2ce2 <__aeabi_dsub+0x14a>
    3110:	2b00      	cmp	r3, #0
    3112:	d039      	beq.n	3188 <__aeabi_dsub+0x5f0>
    3114:	000b      	movs	r3, r1
    3116:	4313      	orrs	r3, r2
    3118:	d100      	bne.n	311c <__aeabi_dsub+0x584>
    311a:	e744      	b.n	2fa6 <__aeabi_dsub+0x40e>
    311c:	08c0      	lsrs	r0, r0, #3
    311e:	0767      	lsls	r7, r4, #29
    3120:	4307      	orrs	r7, r0
    3122:	2080      	movs	r0, #128	; 0x80
    3124:	08e4      	lsrs	r4, r4, #3
    3126:	0300      	lsls	r0, r0, #12
    3128:	4204      	tst	r4, r0
    312a:	d0e1      	beq.n	30f0 <__aeabi_dsub+0x558>
    312c:	08cb      	lsrs	r3, r1, #3
    312e:	4203      	tst	r3, r0
    3130:	d1de      	bne.n	30f0 <__aeabi_dsub+0x558>
    3132:	08d7      	lsrs	r7, r2, #3
    3134:	0749      	lsls	r1, r1, #29
    3136:	430f      	orrs	r7, r1
    3138:	001c      	movs	r4, r3
    313a:	e7d9      	b.n	30f0 <__aeabi_dsub+0x558>
    313c:	2100      	movs	r1, #0
    313e:	e771      	b.n	3024 <__aeabi_dsub+0x48c>
    3140:	2500      	movs	r5, #0
    3142:	2700      	movs	r7, #0
    3144:	e5e9      	b.n	2d1a <__aeabi_dsub+0x182>
    3146:	002e      	movs	r6, r5
    3148:	0027      	movs	r7, r4
    314a:	3e20      	subs	r6, #32
    314c:	40f7      	lsrs	r7, r6
    314e:	2d20      	cmp	r5, #32
    3150:	d02f      	beq.n	31b2 <__aeabi_dsub+0x61a>
    3152:	2640      	movs	r6, #64	; 0x40
    3154:	1b75      	subs	r5, r6, r5
    3156:	40ac      	lsls	r4, r5
    3158:	4650      	mov	r0, sl
    315a:	4320      	orrs	r0, r4
    315c:	1e44      	subs	r4, r0, #1
    315e:	41a0      	sbcs	r0, r4
    3160:	2400      	movs	r4, #0
    3162:	4338      	orrs	r0, r7
    3164:	e6dc      	b.n	2f20 <__aeabi_dsub+0x388>
    3166:	2480      	movs	r4, #128	; 0x80
    3168:	2500      	movs	r5, #0
    316a:	0324      	lsls	r4, r4, #12
    316c:	4e13      	ldr	r6, [pc, #76]	; (31bc <__aeabi_dsub+0x624>)
    316e:	2700      	movs	r7, #0
    3170:	e5d3      	b.n	2d1a <__aeabi_dsub+0x182>
    3172:	4650      	mov	r0, sl
    3174:	4320      	orrs	r0, r4
    3176:	0007      	movs	r7, r0
    3178:	1e78      	subs	r0, r7, #1
    317a:	4187      	sbcs	r7, r0
    317c:	2400      	movs	r4, #0
    317e:	18bf      	adds	r7, r7, r2
    3180:	e760      	b.n	3044 <__aeabi_dsub+0x4ac>
    3182:	000c      	movs	r4, r1
    3184:	0017      	movs	r7, r2
    3186:	e58d      	b.n	2ca4 <__aeabi_dsub+0x10c>
    3188:	000c      	movs	r4, r1
    318a:	0017      	movs	r7, r2
    318c:	4e0b      	ldr	r6, [pc, #44]	; (31bc <__aeabi_dsub+0x624>)
    318e:	e589      	b.n	2ca4 <__aeabi_dsub+0x10c>
    3190:	001e      	movs	r6, r3
    3192:	0027      	movs	r7, r4
    3194:	3e20      	subs	r6, #32
    3196:	40f7      	lsrs	r7, r6
    3198:	2b20      	cmp	r3, #32
    319a:	d00c      	beq.n	31b6 <__aeabi_dsub+0x61e>
    319c:	2640      	movs	r6, #64	; 0x40
    319e:	1af3      	subs	r3, r6, r3
    31a0:	409c      	lsls	r4, r3
    31a2:	4650      	mov	r0, sl
    31a4:	4320      	orrs	r0, r4
    31a6:	1e44      	subs	r4, r0, #1
    31a8:	41a0      	sbcs	r0, r4
    31aa:	4307      	orrs	r7, r0
    31ac:	2400      	movs	r4, #0
    31ae:	18bf      	adds	r7, r7, r2
    31b0:	e748      	b.n	3044 <__aeabi_dsub+0x4ac>
    31b2:	2400      	movs	r4, #0
    31b4:	e7d0      	b.n	3158 <__aeabi_dsub+0x5c0>
    31b6:	2400      	movs	r4, #0
    31b8:	e7f3      	b.n	31a2 <__aeabi_dsub+0x60a>
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	000007ff 	.word	0x000007ff
    31c0:	ff7fffff 	.word	0xff7fffff

000031c4 <__aeabi_d2iz>:
    31c4:	b530      	push	{r4, r5, lr}
    31c6:	4d13      	ldr	r5, [pc, #76]	; (3214 <__aeabi_d2iz+0x50>)
    31c8:	030a      	lsls	r2, r1, #12
    31ca:	004b      	lsls	r3, r1, #1
    31cc:	0b12      	lsrs	r2, r2, #12
    31ce:	0d5b      	lsrs	r3, r3, #21
    31d0:	0fc9      	lsrs	r1, r1, #31
    31d2:	2400      	movs	r4, #0
    31d4:	42ab      	cmp	r3, r5
    31d6:	dd10      	ble.n	31fa <__aeabi_d2iz+0x36>
    31d8:	4c0f      	ldr	r4, [pc, #60]	; (3218 <__aeabi_d2iz+0x54>)
    31da:	42a3      	cmp	r3, r4
    31dc:	dc0f      	bgt.n	31fe <__aeabi_d2iz+0x3a>
    31de:	2480      	movs	r4, #128	; 0x80
    31e0:	4d0e      	ldr	r5, [pc, #56]	; (321c <__aeabi_d2iz+0x58>)
    31e2:	0364      	lsls	r4, r4, #13
    31e4:	4322      	orrs	r2, r4
    31e6:	1aed      	subs	r5, r5, r3
    31e8:	2d1f      	cmp	r5, #31
    31ea:	dd0b      	ble.n	3204 <__aeabi_d2iz+0x40>
    31ec:	480c      	ldr	r0, [pc, #48]	; (3220 <__aeabi_d2iz+0x5c>)
    31ee:	1ac3      	subs	r3, r0, r3
    31f0:	40da      	lsrs	r2, r3
    31f2:	4254      	negs	r4, r2
    31f4:	2900      	cmp	r1, #0
    31f6:	d100      	bne.n	31fa <__aeabi_d2iz+0x36>
    31f8:	0014      	movs	r4, r2
    31fa:	0020      	movs	r0, r4
    31fc:	bd30      	pop	{r4, r5, pc}
    31fe:	4b09      	ldr	r3, [pc, #36]	; (3224 <__aeabi_d2iz+0x60>)
    3200:	18cc      	adds	r4, r1, r3
    3202:	e7fa      	b.n	31fa <__aeabi_d2iz+0x36>
    3204:	4c08      	ldr	r4, [pc, #32]	; (3228 <__aeabi_d2iz+0x64>)
    3206:	40e8      	lsrs	r0, r5
    3208:	46a4      	mov	ip, r4
    320a:	4463      	add	r3, ip
    320c:	409a      	lsls	r2, r3
    320e:	4302      	orrs	r2, r0
    3210:	e7ef      	b.n	31f2 <__aeabi_d2iz+0x2e>
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	000003fe 	.word	0x000003fe
    3218:	0000041d 	.word	0x0000041d
    321c:	00000433 	.word	0x00000433
    3220:	00000413 	.word	0x00000413
    3224:	7fffffff 	.word	0x7fffffff
    3228:	fffffbed 	.word	0xfffffbed

0000322c <__aeabi_ui2d>:
    322c:	b510      	push	{r4, lr}
    322e:	1e04      	subs	r4, r0, #0
    3230:	d028      	beq.n	3284 <__aeabi_ui2d+0x58>
    3232:	f000 f833 	bl	329c <__clzsi2>
    3236:	4b15      	ldr	r3, [pc, #84]	; (328c <__aeabi_ui2d+0x60>)
    3238:	4a15      	ldr	r2, [pc, #84]	; (3290 <__aeabi_ui2d+0x64>)
    323a:	1a1b      	subs	r3, r3, r0
    323c:	1ad2      	subs	r2, r2, r3
    323e:	2a1f      	cmp	r2, #31
    3240:	dd15      	ble.n	326e <__aeabi_ui2d+0x42>
    3242:	4a14      	ldr	r2, [pc, #80]	; (3294 <__aeabi_ui2d+0x68>)
    3244:	1ad2      	subs	r2, r2, r3
    3246:	4094      	lsls	r4, r2
    3248:	2200      	movs	r2, #0
    324a:	0324      	lsls	r4, r4, #12
    324c:	055b      	lsls	r3, r3, #21
    324e:	0b24      	lsrs	r4, r4, #12
    3250:	0d5b      	lsrs	r3, r3, #21
    3252:	2100      	movs	r1, #0
    3254:	0010      	movs	r0, r2
    3256:	0324      	lsls	r4, r4, #12
    3258:	0d0a      	lsrs	r2, r1, #20
    325a:	0b24      	lsrs	r4, r4, #12
    325c:	0512      	lsls	r2, r2, #20
    325e:	4322      	orrs	r2, r4
    3260:	4c0d      	ldr	r4, [pc, #52]	; (3298 <__aeabi_ui2d+0x6c>)
    3262:	051b      	lsls	r3, r3, #20
    3264:	4022      	ands	r2, r4
    3266:	4313      	orrs	r3, r2
    3268:	005b      	lsls	r3, r3, #1
    326a:	0859      	lsrs	r1, r3, #1
    326c:	bd10      	pop	{r4, pc}
    326e:	0021      	movs	r1, r4
    3270:	4091      	lsls	r1, r2
    3272:	000a      	movs	r2, r1
    3274:	210b      	movs	r1, #11
    3276:	1a08      	subs	r0, r1, r0
    3278:	40c4      	lsrs	r4, r0
    327a:	055b      	lsls	r3, r3, #21
    327c:	0324      	lsls	r4, r4, #12
    327e:	0b24      	lsrs	r4, r4, #12
    3280:	0d5b      	lsrs	r3, r3, #21
    3282:	e7e6      	b.n	3252 <__aeabi_ui2d+0x26>
    3284:	2300      	movs	r3, #0
    3286:	2400      	movs	r4, #0
    3288:	2200      	movs	r2, #0
    328a:	e7e2      	b.n	3252 <__aeabi_ui2d+0x26>
    328c:	0000041e 	.word	0x0000041e
    3290:	00000433 	.word	0x00000433
    3294:	00000413 	.word	0x00000413
    3298:	800fffff 	.word	0x800fffff

0000329c <__clzsi2>:
    329c:	211c      	movs	r1, #28
    329e:	2301      	movs	r3, #1
    32a0:	041b      	lsls	r3, r3, #16
    32a2:	4298      	cmp	r0, r3
    32a4:	d301      	bcc.n	32aa <__clzsi2+0xe>
    32a6:	0c00      	lsrs	r0, r0, #16
    32a8:	3910      	subs	r1, #16
    32aa:	0a1b      	lsrs	r3, r3, #8
    32ac:	4298      	cmp	r0, r3
    32ae:	d301      	bcc.n	32b4 <__clzsi2+0x18>
    32b0:	0a00      	lsrs	r0, r0, #8
    32b2:	3908      	subs	r1, #8
    32b4:	091b      	lsrs	r3, r3, #4
    32b6:	4298      	cmp	r0, r3
    32b8:	d301      	bcc.n	32be <__clzsi2+0x22>
    32ba:	0900      	lsrs	r0, r0, #4
    32bc:	3904      	subs	r1, #4
    32be:	a202      	add	r2, pc, #8	; (adr r2, 32c8 <__clzsi2+0x2c>)
    32c0:	5c10      	ldrb	r0, [r2, r0]
    32c2:	1840      	adds	r0, r0, r1
    32c4:	4770      	bx	lr
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	02020304 	.word	0x02020304
    32cc:	01010101 	.word	0x01010101
	...

000032d8 <__libc_init_array>:
    32d8:	b570      	push	{r4, r5, r6, lr}
    32da:	2600      	movs	r6, #0
    32dc:	4d0c      	ldr	r5, [pc, #48]	; (3310 <__libc_init_array+0x38>)
    32de:	4c0d      	ldr	r4, [pc, #52]	; (3314 <__libc_init_array+0x3c>)
    32e0:	1b64      	subs	r4, r4, r5
    32e2:	10a4      	asrs	r4, r4, #2
    32e4:	42a6      	cmp	r6, r4
    32e6:	d109      	bne.n	32fc <__libc_init_array+0x24>
    32e8:	2600      	movs	r6, #0
    32ea:	f000 f879 	bl	33e0 <_init>
    32ee:	4d0a      	ldr	r5, [pc, #40]	; (3318 <__libc_init_array+0x40>)
    32f0:	4c0a      	ldr	r4, [pc, #40]	; (331c <__libc_init_array+0x44>)
    32f2:	1b64      	subs	r4, r4, r5
    32f4:	10a4      	asrs	r4, r4, #2
    32f6:	42a6      	cmp	r6, r4
    32f8:	d105      	bne.n	3306 <__libc_init_array+0x2e>
    32fa:	bd70      	pop	{r4, r5, r6, pc}
    32fc:	00b3      	lsls	r3, r6, #2
    32fe:	58eb      	ldr	r3, [r5, r3]
    3300:	4798      	blx	r3
    3302:	3601      	adds	r6, #1
    3304:	e7ee      	b.n	32e4 <__libc_init_array+0xc>
    3306:	00b3      	lsls	r3, r6, #2
    3308:	58eb      	ldr	r3, [r5, r3]
    330a:	4798      	blx	r3
    330c:	3601      	adds	r6, #1
    330e:	e7f2      	b.n	32f6 <__libc_init_array+0x1e>
    3310:	000033ec 	.word	0x000033ec
    3314:	000033ec 	.word	0x000033ec
    3318:	000033ec 	.word	0x000033ec
    331c:	000033f0 	.word	0x000033f0
    3320:	42000800 	.word	0x42000800
    3324:	42000c00 	.word	0x42000c00
    3328:	42001000 	.word	0x42001000

0000332c <_tcc_intflag>:
    332c:	00000001 00000002 00000004 00000008     ................
    333c:	00001000 00002000 00004000 00008000     ..... ...@......
    334c:	00010000 00020000 00040000 00080000     ................

0000335c <tc_interrupt_vectors.12207>:
    335c:	00000e0d 00002228 0000220a 000021c4     ....("..."...!..
    336c:	000020e2 000021c4 000021fc 000021c4     . ...!...!...!..
    337c:	000020e2 0000220a 0000220a 000021fc     . ..."..."...!..
    338c:	000020e2 000020da 000020da 000020da     . ... ... ... ..
    339c:	00002440 00002888 00002748 00002748     @$...(..H'..H'..
    33ac:	00002744 00002860 00002860 00002852     D'..`(..`(..R(..
    33bc:	00002744 00002860 00002852 00002860     D'..`(..R(..`(..
    33cc:	00002744 00002868 00002868 00002868     D'..h(..h(..h(..
    33dc:	00002a6c                                l*..

000033e0 <_init>:
    33e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33e6:	bc08      	pop	{r3}
    33e8:	469e      	mov	lr, r3
    33ea:	4770      	bx	lr

000033ec <__init_array_start>:
    33ec:	000000b5 	.word	0x000000b5

000033f0 <_fini>:
    33f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33f6:	bc08      	pop	{r3}
    33f8:	469e      	mov	lr, r3
    33fa:	4770      	bx	lr

000033fc <__fini_array_start>:
    33fc:	0000008d 	.word	0x0000008d
