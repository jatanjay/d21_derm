
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000289c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000024  20000000  0000289c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f4  20000024  000028c0  00020024  2**2
                  ALLOC
  3 .stack        00000400  20000118  000029b4  00020024  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021857  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032b8  00000000  00000000  000418fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000025ca  00000000  00000000  00044bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000740  00000000  00000000  0004717e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000630  00000000  00000000  000478be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006456  00000000  00000000  00047eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b82d  00000000  00000000  0004e344  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00079306  00000000  00000000  00059b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001740  00000000  00000000  000d2e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 05 00 20 45 1d 00 00 3d 1e 00 00 3d 1e 00 00     ... E...=...=...
	...
      2c:	3d 1e 00 00 00 00 00 00 00 00 00 00 3d 1e 00 00     =...........=...
      3c:	3d 1e 00 00 3d 1e 00 00 3d 1e 00 00 3d 1e 00 00     =...=...=...=...
      4c:	3d 1e 00 00 8d 04 00 00 3d 1e 00 00 3d 1e 00 00     =.......=...=...
      5c:	3d 1e 00 00 cd 02 00 00 ad 07 00 00 c5 07 00 00     =...............
      6c:	dd 07 00 00 69 15 00 00 6d 16 00 00 81 16 00 00     ....i...m.......
      7c:	3d 1e 00 00 3d 1e 00 00 3d 1e 00 00 3d 1e 00 00     =...=...=...=...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000024 	.word	0x20000024
      ac:	00000000 	.word	0x00000000
      b0:	0000289c 	.word	0x0000289c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000028 	.word	0x20000028
      e0:	0000289c 	.word	0x0000289c
      e4:	0000289c 	.word	0x0000289c
      e8:	00000000 	.word	0x00000000

000000ec <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
      ec:	b580      	push	{r7, lr}
      ee:	b082      	sub	sp, #8
      f0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
      f2:	4b10      	ldr	r3, [pc, #64]	; (134 <cpu_irq_enter_critical+0x48>)
      f4:	681b      	ldr	r3, [r3, #0]
      f6:	2b00      	cmp	r3, #0
      f8:	d112      	bne.n	120 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      fa:	f3ef 8310 	mrs	r3, PRIMASK
      fe:	607b      	str	r3, [r7, #4]
  return(result);
     100:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     102:	2b00      	cmp	r3, #0
     104:	d109      	bne.n	11a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     106:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     108:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     10c:	4b0a      	ldr	r3, [pc, #40]	; (138 <cpu_irq_enter_critical+0x4c>)
     10e:	2200      	movs	r2, #0
     110:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     112:	4b0a      	ldr	r3, [pc, #40]	; (13c <cpu_irq_enter_critical+0x50>)
     114:	2201      	movs	r2, #1
     116:	701a      	strb	r2, [r3, #0]
     118:	e002      	b.n	120 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     11a:	4b08      	ldr	r3, [pc, #32]	; (13c <cpu_irq_enter_critical+0x50>)
     11c:	2200      	movs	r2, #0
     11e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     120:	4b04      	ldr	r3, [pc, #16]	; (134 <cpu_irq_enter_critical+0x48>)
     122:	681b      	ldr	r3, [r3, #0]
     124:	1c5a      	adds	r2, r3, #1
     126:	4b03      	ldr	r3, [pc, #12]	; (134 <cpu_irq_enter_critical+0x48>)
     128:	601a      	str	r2, [r3, #0]
}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	46bd      	mov	sp, r7
     12e:	b002      	add	sp, #8
     130:	bd80      	pop	{r7, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	20000040 	.word	0x20000040
     138:	20000000 	.word	0x20000000
     13c:	20000044 	.word	0x20000044

00000140 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     140:	b580      	push	{r7, lr}
     142:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     144:	4b0b      	ldr	r3, [pc, #44]	; (174 <cpu_irq_leave_critical+0x34>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	1e5a      	subs	r2, r3, #1
     14a:	4b0a      	ldr	r3, [pc, #40]	; (174 <cpu_irq_leave_critical+0x34>)
     14c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     14e:	4b09      	ldr	r3, [pc, #36]	; (174 <cpu_irq_leave_critical+0x34>)
     150:	681b      	ldr	r3, [r3, #0]
     152:	2b00      	cmp	r3, #0
     154:	d10a      	bne.n	16c <cpu_irq_leave_critical+0x2c>
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x38>)
     158:	781b      	ldrb	r3, [r3, #0]
     15a:	b2db      	uxtb	r3, r3
     15c:	2b00      	cmp	r3, #0
     15e:	d005      	beq.n	16c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     160:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x3c>)
     162:	2201      	movs	r2, #1
     164:	701a      	strb	r2, [r3, #0]
     166:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     16a:	b662      	cpsie	i
	}
}
     16c:	46c0      	nop			; (mov r8, r8)
     16e:	46bd      	mov	sp, r7
     170:	bd80      	pop	{r7, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	20000040 	.word	0x20000040
     178:	20000044 	.word	0x20000044
     17c:	20000000 	.word	0x20000000

00000180 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     180:	b580      	push	{r7, lr}
     182:	b084      	sub	sp, #16
     184:	af00      	add	r7, sp, #0
     186:	0002      	movs	r2, r0
     188:	1dfb      	adds	r3, r7, #7
     18a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     18c:	230f      	movs	r3, #15
     18e:	18fb      	adds	r3, r7, r3
     190:	1dfa      	adds	r2, r7, #7
     192:	7812      	ldrb	r2, [r2, #0]
     194:	09d2      	lsrs	r2, r2, #7
     196:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     198:	230e      	movs	r3, #14
     19a:	18fb      	adds	r3, r7, r3
     19c:	1dfa      	adds	r2, r7, #7
     19e:	7812      	ldrb	r2, [r2, #0]
     1a0:	0952      	lsrs	r2, r2, #5
     1a2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1a4:	4b0d      	ldr	r3, [pc, #52]	; (1dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1a6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1a8:	230f      	movs	r3, #15
     1aa:	18fb      	adds	r3, r7, r3
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	2b00      	cmp	r3, #0
     1b0:	d10f      	bne.n	1d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     1b2:	230f      	movs	r3, #15
     1b4:	18fb      	adds	r3, r7, r3
     1b6:	781b      	ldrb	r3, [r3, #0]
     1b8:	009b      	lsls	r3, r3, #2
     1ba:	2210      	movs	r2, #16
     1bc:	4694      	mov	ip, r2
     1be:	44bc      	add	ip, r7
     1c0:	4463      	add	r3, ip
     1c2:	3b08      	subs	r3, #8
     1c4:	681a      	ldr	r2, [r3, #0]
     1c6:	230e      	movs	r3, #14
     1c8:	18fb      	adds	r3, r7, r3
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	01db      	lsls	r3, r3, #7
     1ce:	18d3      	adds	r3, r2, r3
     1d0:	e000      	b.n	1d4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     1d2:	2300      	movs	r3, #0
	}
}
     1d4:	0018      	movs	r0, r3
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	41004400 	.word	0x41004400

000001e0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1e0:	b580      	push	{r7, lr}
     1e2:	b082      	sub	sp, #8
     1e4:	af00      	add	r7, sp, #0
     1e6:	0002      	movs	r2, r0
     1e8:	1dfb      	adds	r3, r7, #7
     1ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     1ec:	1dfb      	adds	r3, r7, #7
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	0018      	movs	r0, r3
     1f2:	4b03      	ldr	r3, [pc, #12]	; (200 <port_get_group_from_gpio_pin+0x20>)
     1f4:	4798      	blx	r3
     1f6:	0003      	movs	r3, r0
}
     1f8:	0018      	movs	r0, r3
     1fa:	46bd      	mov	sp, r7
     1fc:	b002      	add	sp, #8
     1fe:	bd80      	pop	{r7, pc}
     200:	00000181 	.word	0x00000181

00000204 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     204:	b580      	push	{r7, lr}
     206:	b082      	sub	sp, #8
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	2200      	movs	r2, #0
     210:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     212:	687b      	ldr	r3, [r7, #4]
     214:	2201      	movs	r2, #1
     216:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	2200      	movs	r2, #0
     21c:	709a      	strb	r2, [r3, #2]
}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46bd      	mov	sp, r7
     222:	b002      	add	sp, #8
     224:	bd80      	pop	{r7, pc}
	...

00000228 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     228:	b580      	push	{r7, lr}
     22a:	b084      	sub	sp, #16
     22c:	af00      	add	r7, sp, #0
     22e:	0002      	movs	r2, r0
     230:	1dfb      	adds	r3, r7, #7
     232:	701a      	strb	r2, [r3, #0]
     234:	1dbb      	adds	r3, r7, #6
     236:	1c0a      	adds	r2, r1, #0
     238:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     23a:	1dfb      	adds	r3, r7, #7
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	0018      	movs	r0, r3
     240:	4b0d      	ldr	r3, [pc, #52]	; (278 <port_pin_set_output_level+0x50>)
     242:	4798      	blx	r3
     244:	0003      	movs	r3, r0
     246:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     248:	1dfb      	adds	r3, r7, #7
     24a:	781b      	ldrb	r3, [r3, #0]
     24c:	221f      	movs	r2, #31
     24e:	4013      	ands	r3, r2
     250:	2201      	movs	r2, #1
     252:	409a      	lsls	r2, r3
     254:	0013      	movs	r3, r2
     256:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     258:	1dbb      	adds	r3, r7, #6
     25a:	781b      	ldrb	r3, [r3, #0]
     25c:	2b00      	cmp	r3, #0
     25e:	d003      	beq.n	268 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     260:	68fb      	ldr	r3, [r7, #12]
     262:	68ba      	ldr	r2, [r7, #8]
     264:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     266:	e002      	b.n	26e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     268:	68fb      	ldr	r3, [r7, #12]
     26a:	68ba      	ldr	r2, [r7, #8]
     26c:	615a      	str	r2, [r3, #20]
}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	46bd      	mov	sp, r7
     272:	b004      	add	sp, #16
     274:	bd80      	pop	{r7, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	000001e1 	.word	0x000001e1

0000027c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     27c:	b580      	push	{r7, lr}
     27e:	b082      	sub	sp, #8
     280:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     282:	1d3b      	adds	r3, r7, #4
     284:	0018      	movs	r0, r3
     286:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <system_board_init+0x44>)
     288:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     28a:	1d3b      	adds	r3, r7, #4
     28c:	2201      	movs	r2, #1
     28e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     290:	1d3b      	adds	r3, r7, #4
     292:	0019      	movs	r1, r3
     294:	2010      	movs	r0, #16
     296:	4b0b      	ldr	r3, [pc, #44]	; (2c4 <system_board_init+0x48>)
     298:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     29a:	2101      	movs	r1, #1
     29c:	2010      	movs	r0, #16
     29e:	4b0a      	ldr	r3, [pc, #40]	; (2c8 <system_board_init+0x4c>)
     2a0:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2a2:	1d3b      	adds	r3, r7, #4
     2a4:	2200      	movs	r2, #0
     2a6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2a8:	1d3b      	adds	r3, r7, #4
     2aa:	2201      	movs	r2, #1
     2ac:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2ae:	1d3b      	adds	r3, r7, #4
     2b0:	0019      	movs	r1, r3
     2b2:	200e      	movs	r0, #14
     2b4:	4b03      	ldr	r3, [pc, #12]	; (2c4 <system_board_init+0x48>)
     2b6:	4798      	blx	r3
}
     2b8:	46c0      	nop			; (mov r8, r8)
     2ba:	46bd      	mov	sp, r7
     2bc:	b002      	add	sp, #8
     2be:	bd80      	pop	{r7, pc}
     2c0:	00000205 	.word	0x00000205
     2c4:	0000074d 	.word	0x0000074d
     2c8:	00000229 	.word	0x00000229

000002cc <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b082      	sub	sp, #8
     2d0:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
     2d2:	4b15      	ldr	r3, [pc, #84]	; (328 <EVSYS_Handler+0x5c>)
     2d4:	691b      	ldr	r3, [r3, #16]
     2d6:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <EVSYS_Handler+0x60>)
     2da:	699b      	ldr	r3, [r3, #24]
     2dc:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
     2de:	4b12      	ldr	r3, [pc, #72]	; (328 <EVSYS_Handler+0x5c>)
     2e0:	689a      	ldr	r2, [r3, #8]
     2e2:	683b      	ldr	r3, [r7, #0]
     2e4:	431a      	orrs	r2, r3
     2e6:	4b10      	ldr	r3, [pc, #64]	; (328 <EVSYS_Handler+0x5c>)
     2e8:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     2ea:	4b10      	ldr	r3, [pc, #64]	; (32c <EVSYS_Handler+0x60>)
     2ec:	4a10      	ldr	r2, [pc, #64]	; (330 <EVSYS_Handler+0x64>)
     2ee:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     2f0:	e008      	b.n	304 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	685a      	ldr	r2, [r3, #4]
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	0018      	movs	r0, r3
     2fc:	4790      	blx	r2
		current_hook = current_hook->next;
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	689b      	ldr	r3, [r3, #8]
     302:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
     304:	687b      	ldr	r3, [r7, #4]
     306:	2b00      	cmp	r3, #0
     308:	d1f3      	bne.n	2f2 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     30a:	4b07      	ldr	r3, [pc, #28]	; (328 <EVSYS_Handler+0x5c>)
     30c:	68db      	ldr	r3, [r3, #12]
     30e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
     310:	4b05      	ldr	r3, [pc, #20]	; (328 <EVSYS_Handler+0x5c>)
     312:	689b      	ldr	r3, [r3, #8]
     314:	683a      	ldr	r2, [r7, #0]
     316:	43d2      	mvns	r2, r2
     318:	401a      	ands	r2, r3
     31a:	4b03      	ldr	r3, [pc, #12]	; (328 <EVSYS_Handler+0x5c>)
     31c:	609a      	str	r2, [r3, #8]
}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	46bd      	mov	sp, r7
     322:	b002      	add	sp, #8
     324:	bd80      	pop	{r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	20000004 	.word	0x20000004
     32c:	42000400 	.word	0x42000400
     330:	0f0fffff 	.word	0x0f0fffff

00000334 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     334:	b580      	push	{r7, lr}
     336:	b082      	sub	sp, #8
     338:	af00      	add	r7, sp, #0
     33a:	0002      	movs	r2, r0
     33c:	6039      	str	r1, [r7, #0]
     33e:	1dfb      	adds	r3, r7, #7
     340:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     342:	1dfb      	adds	r3, r7, #7
     344:	781b      	ldrb	r3, [r3, #0]
     346:	2b01      	cmp	r3, #1
     348:	d00a      	beq.n	360 <system_apb_clock_set_mask+0x2c>
     34a:	2b02      	cmp	r3, #2
     34c:	d00f      	beq.n	36e <system_apb_clock_set_mask+0x3a>
     34e:	2b00      	cmp	r3, #0
     350:	d114      	bne.n	37c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     352:	4b0e      	ldr	r3, [pc, #56]	; (38c <system_apb_clock_set_mask+0x58>)
     354:	4a0d      	ldr	r2, [pc, #52]	; (38c <system_apb_clock_set_mask+0x58>)
     356:	6991      	ldr	r1, [r2, #24]
     358:	683a      	ldr	r2, [r7, #0]
     35a:	430a      	orrs	r2, r1
     35c:	619a      	str	r2, [r3, #24]
			break;
     35e:	e00f      	b.n	380 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     360:	4b0a      	ldr	r3, [pc, #40]	; (38c <system_apb_clock_set_mask+0x58>)
     362:	4a0a      	ldr	r2, [pc, #40]	; (38c <system_apb_clock_set_mask+0x58>)
     364:	69d1      	ldr	r1, [r2, #28]
     366:	683a      	ldr	r2, [r7, #0]
     368:	430a      	orrs	r2, r1
     36a:	61da      	str	r2, [r3, #28]
			break;
     36c:	e008      	b.n	380 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     36e:	4b07      	ldr	r3, [pc, #28]	; (38c <system_apb_clock_set_mask+0x58>)
     370:	4a06      	ldr	r2, [pc, #24]	; (38c <system_apb_clock_set_mask+0x58>)
     372:	6a11      	ldr	r1, [r2, #32]
     374:	683a      	ldr	r2, [r7, #0]
     376:	430a      	orrs	r2, r1
     378:	621a      	str	r2, [r3, #32]
			break;
     37a:	e001      	b.n	380 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     37c:	2317      	movs	r3, #23
     37e:	e000      	b.n	382 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     380:	2300      	movs	r3, #0
}
     382:	0018      	movs	r0, r3
     384:	46bd      	mov	sp, r7
     386:	b002      	add	sp, #8
     388:	bd80      	pop	{r7, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	40000400 	.word	0x40000400

00000390 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
     390:	b580      	push	{r7, lr}
     392:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
     394:	2102      	movs	r1, #2
     396:	2002      	movs	r0, #2
     398:	4b07      	ldr	r3, [pc, #28]	; (3b8 <_system_events_init+0x28>)
     39a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     39c:	4b07      	ldr	r3, [pc, #28]	; (3bc <_system_events_init+0x2c>)
     39e:	2201      	movs	r2, #1
     3a0:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	4b05      	ldr	r3, [pc, #20]	; (3bc <_system_events_init+0x2c>)
     3a6:	781b      	ldrb	r3, [r3, #0]
     3a8:	b2db      	uxtb	r3, r3
     3aa:	001a      	movs	r2, r3
     3ac:	2301      	movs	r3, #1
     3ae:	4013      	ands	r3, r2
     3b0:	d1f8      	bne.n	3a4 <_system_events_init+0x14>
	}
}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	46bd      	mov	sp, r7
     3b6:	bd80      	pop	{r7, pc}
     3b8:	00000335 	.word	0x00000335
     3bc:	42000400 	.word	0x42000400

000003c0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     3c0:	b580      	push	{r7, lr}
     3c2:	b084      	sub	sp, #16
     3c4:	af00      	add	r7, sp, #0
     3c6:	0002      	movs	r2, r0
     3c8:	1dfb      	adds	r3, r7, #7
     3ca:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     3cc:	230f      	movs	r3, #15
     3ce:	18fb      	adds	r3, r7, r3
     3d0:	1dfa      	adds	r2, r7, #7
     3d2:	7812      	ldrb	r2, [r2, #0]
     3d4:	0952      	lsrs	r2, r2, #5
     3d6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     3d8:	230f      	movs	r3, #15
     3da:	18fb      	adds	r3, r7, r3
     3dc:	781b      	ldrb	r3, [r3, #0]
     3de:	2b00      	cmp	r3, #0
     3e0:	d10c      	bne.n	3fc <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3e2:	4b09      	ldr	r3, [pc, #36]	; (408 <STACK_SIZE+0x8>)
     3e4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     3e6:	230f      	movs	r3, #15
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	781b      	ldrb	r3, [r3, #0]
     3ec:	009b      	lsls	r3, r3, #2
     3ee:	2210      	movs	r2, #16
     3f0:	4694      	mov	ip, r2
     3f2:	44bc      	add	ip, r7
     3f4:	4463      	add	r3, ip
     3f6:	3b08      	subs	r3, #8
     3f8:	681b      	ldr	r3, [r3, #0]
     3fa:	e000      	b.n	3fe <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     3fc:	2300      	movs	r3, #0
	}
}
     3fe:	0018      	movs	r0, r3
     400:	46bd      	mov	sp, r7
     402:	b004      	add	sp, #16
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	40001800 	.word	0x40001800

0000040c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     40c:	b580      	push	{r7, lr}
     40e:	b084      	sub	sp, #16
     410:	af00      	add	r7, sp, #0
     412:	0002      	movs	r2, r0
     414:	1dfb      	adds	r3, r7, #7
     416:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     418:	1dfb      	adds	r3, r7, #7
     41a:	781b      	ldrb	r3, [r3, #0]
     41c:	0018      	movs	r0, r3
     41e:	4b0b      	ldr	r3, [pc, #44]	; (44c <extint_chan_is_detected+0x40>)
     420:	4798      	blx	r3
     422:	0003      	movs	r3, r0
     424:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     426:	1dfb      	adds	r3, r7, #7
     428:	781b      	ldrb	r3, [r3, #0]
     42a:	221f      	movs	r2, #31
     42c:	4013      	ands	r3, r2
     42e:	2201      	movs	r2, #1
     430:	409a      	lsls	r2, r3
     432:	0013      	movs	r3, r2
     434:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     436:	68fb      	ldr	r3, [r7, #12]
     438:	691b      	ldr	r3, [r3, #16]
     43a:	68ba      	ldr	r2, [r7, #8]
     43c:	4013      	ands	r3, r2
     43e:	1e5a      	subs	r2, r3, #1
     440:	4193      	sbcs	r3, r2
     442:	b2db      	uxtb	r3, r3
}
     444:	0018      	movs	r0, r3
     446:	46bd      	mov	sp, r7
     448:	b004      	add	sp, #16
     44a:	bd80      	pop	{r7, pc}
     44c:	000003c1 	.word	0x000003c1

00000450 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     450:	b580      	push	{r7, lr}
     452:	b084      	sub	sp, #16
     454:	af00      	add	r7, sp, #0
     456:	0002      	movs	r2, r0
     458:	1dfb      	adds	r3, r7, #7
     45a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     45c:	1dfb      	adds	r3, r7, #7
     45e:	781b      	ldrb	r3, [r3, #0]
     460:	0018      	movs	r0, r3
     462:	4b09      	ldr	r3, [pc, #36]	; (488 <extint_chan_clear_detected+0x38>)
     464:	4798      	blx	r3
     466:	0003      	movs	r3, r0
     468:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     46a:	1dfb      	adds	r3, r7, #7
     46c:	781b      	ldrb	r3, [r3, #0]
     46e:	221f      	movs	r2, #31
     470:	4013      	ands	r3, r2
     472:	2201      	movs	r2, #1
     474:	409a      	lsls	r2, r3
     476:	0013      	movs	r3, r2
     478:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     47a:	68fb      	ldr	r3, [r7, #12]
     47c:	68ba      	ldr	r2, [r7, #8]
     47e:	611a      	str	r2, [r3, #16]
}
     480:	46c0      	nop			; (mov r8, r8)
     482:	46bd      	mov	sp, r7
     484:	b004      	add	sp, #16
     486:	bd80      	pop	{r7, pc}
     488:	000003c1 	.word	0x000003c1

0000048c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     48c:	b580      	push	{r7, lr}
     48e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     490:	4b15      	ldr	r3, [pc, #84]	; (4e8 <EIC_Handler+0x5c>)
     492:	2200      	movs	r2, #0
     494:	701a      	strb	r2, [r3, #0]
     496:	e020      	b.n	4da <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     498:	4b13      	ldr	r3, [pc, #76]	; (4e8 <EIC_Handler+0x5c>)
     49a:	781b      	ldrb	r3, [r3, #0]
     49c:	0018      	movs	r0, r3
     49e:	4b13      	ldr	r3, [pc, #76]	; (4ec <EIC_Handler+0x60>)
     4a0:	4798      	blx	r3
     4a2:	1e03      	subs	r3, r0, #0
     4a4:	d013      	beq.n	4ce <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     4a6:	4b10      	ldr	r3, [pc, #64]	; (4e8 <EIC_Handler+0x5c>)
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	0018      	movs	r0, r3
     4ac:	4b10      	ldr	r3, [pc, #64]	; (4f0 <EIC_Handler+0x64>)
     4ae:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     4b0:	4b0d      	ldr	r3, [pc, #52]	; (4e8 <EIC_Handler+0x5c>)
     4b2:	781b      	ldrb	r3, [r3, #0]
     4b4:	001a      	movs	r2, r3
     4b6:	4b0f      	ldr	r3, [pc, #60]	; (4f4 <EIC_Handler+0x68>)
     4b8:	0092      	lsls	r2, r2, #2
     4ba:	58d3      	ldr	r3, [r2, r3]
     4bc:	2b00      	cmp	r3, #0
     4be:	d006      	beq.n	4ce <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     4c0:	4b09      	ldr	r3, [pc, #36]	; (4e8 <EIC_Handler+0x5c>)
     4c2:	781b      	ldrb	r3, [r3, #0]
     4c4:	001a      	movs	r2, r3
     4c6:	4b0b      	ldr	r3, [pc, #44]	; (4f4 <EIC_Handler+0x68>)
     4c8:	0092      	lsls	r2, r2, #2
     4ca:	58d3      	ldr	r3, [r2, r3]
     4cc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4ce:	4b06      	ldr	r3, [pc, #24]	; (4e8 <EIC_Handler+0x5c>)
     4d0:	781b      	ldrb	r3, [r3, #0]
     4d2:	3301      	adds	r3, #1
     4d4:	b2da      	uxtb	r2, r3
     4d6:	4b04      	ldr	r3, [pc, #16]	; (4e8 <EIC_Handler+0x5c>)
     4d8:	701a      	strb	r2, [r3, #0]
     4da:	4b03      	ldr	r3, [pc, #12]	; (4e8 <EIC_Handler+0x5c>)
     4dc:	781b      	ldrb	r3, [r3, #0]
     4de:	2b0f      	cmp	r3, #15
     4e0:	d9da      	bls.n	498 <EIC_Handler+0xc>
			}
		}
	}
}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	46bd      	mov	sp, r7
     4e6:	bd80      	pop	{r7, pc}
     4e8:	20000092 	.word	0x20000092
     4ec:	0000040d 	.word	0x0000040d
     4f0:	00000451 	.word	0x00000451
     4f4:	20000094 	.word	0x20000094

000004f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4f8:	b580      	push	{r7, lr}
     4fa:	b082      	sub	sp, #8
     4fc:	af00      	add	r7, sp, #0
     4fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     500:	687b      	ldr	r3, [r7, #4]
     502:	2200      	movs	r2, #0
     504:	701a      	strb	r2, [r3, #0]
}
     506:	46c0      	nop			; (mov r8, r8)
     508:	46bd      	mov	sp, r7
     50a:	b002      	add	sp, #8
     50c:	bd80      	pop	{r7, pc}
	...

00000510 <system_apb_clock_set_mask>:
{
     510:	b580      	push	{r7, lr}
     512:	b082      	sub	sp, #8
     514:	af00      	add	r7, sp, #0
     516:	0002      	movs	r2, r0
     518:	6039      	str	r1, [r7, #0]
     51a:	1dfb      	adds	r3, r7, #7
     51c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     51e:	1dfb      	adds	r3, r7, #7
     520:	781b      	ldrb	r3, [r3, #0]
     522:	2b01      	cmp	r3, #1
     524:	d00a      	beq.n	53c <system_apb_clock_set_mask+0x2c>
     526:	2b02      	cmp	r3, #2
     528:	d00f      	beq.n	54a <system_apb_clock_set_mask+0x3a>
     52a:	2b00      	cmp	r3, #0
     52c:	d114      	bne.n	558 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     52e:	4b0e      	ldr	r3, [pc, #56]	; (568 <system_apb_clock_set_mask+0x58>)
     530:	4a0d      	ldr	r2, [pc, #52]	; (568 <system_apb_clock_set_mask+0x58>)
     532:	6991      	ldr	r1, [r2, #24]
     534:	683a      	ldr	r2, [r7, #0]
     536:	430a      	orrs	r2, r1
     538:	619a      	str	r2, [r3, #24]
			break;
     53a:	e00f      	b.n	55c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     53c:	4b0a      	ldr	r3, [pc, #40]	; (568 <system_apb_clock_set_mask+0x58>)
     53e:	4a0a      	ldr	r2, [pc, #40]	; (568 <system_apb_clock_set_mask+0x58>)
     540:	69d1      	ldr	r1, [r2, #28]
     542:	683a      	ldr	r2, [r7, #0]
     544:	430a      	orrs	r2, r1
     546:	61da      	str	r2, [r3, #28]
			break;
     548:	e008      	b.n	55c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     54a:	4b07      	ldr	r3, [pc, #28]	; (568 <system_apb_clock_set_mask+0x58>)
     54c:	4a06      	ldr	r2, [pc, #24]	; (568 <system_apb_clock_set_mask+0x58>)
     54e:	6a11      	ldr	r1, [r2, #32]
     550:	683a      	ldr	r2, [r7, #0]
     552:	430a      	orrs	r2, r1
     554:	621a      	str	r2, [r3, #32]
			break;
     556:	e001      	b.n	55c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     558:	2317      	movs	r3, #23
     55a:	e000      	b.n	55e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     55c:	2300      	movs	r3, #0
}
     55e:	0018      	movs	r0, r3
     560:	46bd      	mov	sp, r7
     562:	b002      	add	sp, #8
     564:	bd80      	pop	{r7, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	40000400 	.word	0x40000400

0000056c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     56c:	b580      	push	{r7, lr}
     56e:	b082      	sub	sp, #8
     570:	af00      	add	r7, sp, #0
     572:	0002      	movs	r2, r0
     574:	1dfb      	adds	r3, r7, #7
     576:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     578:	4b06      	ldr	r3, [pc, #24]	; (594 <system_interrupt_enable+0x28>)
     57a:	1dfa      	adds	r2, r7, #7
     57c:	7812      	ldrb	r2, [r2, #0]
     57e:	0011      	movs	r1, r2
     580:	221f      	movs	r2, #31
     582:	400a      	ands	r2, r1
     584:	2101      	movs	r1, #1
     586:	4091      	lsls	r1, r2
     588:	000a      	movs	r2, r1
     58a:	601a      	str	r2, [r3, #0]
}
     58c:	46c0      	nop			; (mov r8, r8)
     58e:	46bd      	mov	sp, r7
     590:	b002      	add	sp, #8
     592:	bd80      	pop	{r7, pc}
     594:	e000e100 	.word	0xe000e100

00000598 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     59e:	4b0f      	ldr	r3, [pc, #60]	; (5dc <extint_is_syncing+0x44>)
     5a0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     5a2:	2300      	movs	r3, #0
     5a4:	607b      	str	r3, [r7, #4]
     5a6:	e011      	b.n	5cc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	009b      	lsls	r3, r3, #2
     5ac:	2208      	movs	r2, #8
     5ae:	4694      	mov	ip, r2
     5b0:	44bc      	add	ip, r7
     5b2:	4463      	add	r3, ip
     5b4:	3b08      	subs	r3, #8
     5b6:	681b      	ldr	r3, [r3, #0]
     5b8:	785b      	ldrb	r3, [r3, #1]
     5ba:	b2db      	uxtb	r3, r3
     5bc:	b25b      	sxtb	r3, r3
     5be:	2b00      	cmp	r3, #0
     5c0:	da01      	bge.n	5c6 <extint_is_syncing+0x2e>
			return true;
     5c2:	2301      	movs	r3, #1
     5c4:	e006      	b.n	5d4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	3301      	adds	r3, #1
     5ca:	607b      	str	r3, [r7, #4]
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	2b00      	cmp	r3, #0
     5d0:	d0ea      	beq.n	5a8 <extint_is_syncing+0x10>
		}
	}
	return false;
     5d2:	2300      	movs	r3, #0
}
     5d4:	0018      	movs	r0, r3
     5d6:	46bd      	mov	sp, r7
     5d8:	b002      	add	sp, #8
     5da:	bd80      	pop	{r7, pc}
     5dc:	40001800 	.word	0x40001800

000005e0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	b084      	sub	sp, #16
     5e4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     5e6:	4b2d      	ldr	r3, [pc, #180]	; (69c <_system_extint_init+0xbc>)
     5e8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     5ea:	2140      	movs	r1, #64	; 0x40
     5ec:	2000      	movs	r0, #0
     5ee:	4b2c      	ldr	r3, [pc, #176]	; (6a0 <_system_extint_init+0xc0>)
     5f0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     5f2:	003b      	movs	r3, r7
     5f4:	0018      	movs	r0, r3
     5f6:	4b2b      	ldr	r3, [pc, #172]	; (6a4 <_system_extint_init+0xc4>)
     5f8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     5fa:	003b      	movs	r3, r7
     5fc:	2201      	movs	r2, #1
     5fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     600:	003b      	movs	r3, r7
     602:	0019      	movs	r1, r3
     604:	2005      	movs	r0, #5
     606:	4b28      	ldr	r3, [pc, #160]	; (6a8 <_system_extint_init+0xc8>)
     608:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     60a:	2005      	movs	r0, #5
     60c:	4b27      	ldr	r3, [pc, #156]	; (6ac <_system_extint_init+0xcc>)
     60e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     610:	2300      	movs	r3, #0
     612:	60fb      	str	r3, [r7, #12]
     614:	e018      	b.n	648 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     616:	68fb      	ldr	r3, [r7, #12]
     618:	009b      	lsls	r3, r3, #2
     61a:	2210      	movs	r2, #16
     61c:	4694      	mov	ip, r2
     61e:	44bc      	add	ip, r7
     620:	4463      	add	r3, ip
     622:	3b0c      	subs	r3, #12
     624:	681a      	ldr	r2, [r3, #0]
     626:	68fb      	ldr	r3, [r7, #12]
     628:	009b      	lsls	r3, r3, #2
     62a:	2110      	movs	r1, #16
     62c:	468c      	mov	ip, r1
     62e:	44bc      	add	ip, r7
     630:	4463      	add	r3, ip
     632:	3b0c      	subs	r3, #12
     634:	681b      	ldr	r3, [r3, #0]
     636:	781b      	ldrb	r3, [r3, #0]
     638:	b2db      	uxtb	r3, r3
     63a:	2101      	movs	r1, #1
     63c:	430b      	orrs	r3, r1
     63e:	b2db      	uxtb	r3, r3
     640:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     642:	68fb      	ldr	r3, [r7, #12]
     644:	3301      	adds	r3, #1
     646:	60fb      	str	r3, [r7, #12]
     648:	68fb      	ldr	r3, [r7, #12]
     64a:	2b00      	cmp	r3, #0
     64c:	d0e3      	beq.n	616 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     64e:	46c0      	nop			; (mov r8, r8)
     650:	4b17      	ldr	r3, [pc, #92]	; (6b0 <_system_extint_init+0xd0>)
     652:	4798      	blx	r3
     654:	1e03      	subs	r3, r0, #0
     656:	d1fb      	bne.n	650 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     658:	230b      	movs	r3, #11
     65a:	18fb      	adds	r3, r7, r3
     65c:	2200      	movs	r2, #0
     65e:	701a      	strb	r2, [r3, #0]
     660:	e00d      	b.n	67e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     662:	230b      	movs	r3, #11
     664:	18fb      	adds	r3, r7, r3
     666:	781a      	ldrb	r2, [r3, #0]
     668:	4b12      	ldr	r3, [pc, #72]	; (6b4 <_system_extint_init+0xd4>)
     66a:	0092      	lsls	r2, r2, #2
     66c:	2100      	movs	r1, #0
     66e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     670:	230b      	movs	r3, #11
     672:	18fb      	adds	r3, r7, r3
     674:	781a      	ldrb	r2, [r3, #0]
     676:	230b      	movs	r3, #11
     678:	18fb      	adds	r3, r7, r3
     67a:	3201      	adds	r2, #1
     67c:	701a      	strb	r2, [r3, #0]
     67e:	230b      	movs	r3, #11
     680:	18fb      	adds	r3, r7, r3
     682:	781b      	ldrb	r3, [r3, #0]
     684:	2b0f      	cmp	r3, #15
     686:	d9ec      	bls.n	662 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     688:	2004      	movs	r0, #4
     68a:	4b0b      	ldr	r3, [pc, #44]	; (6b8 <_system_extint_init+0xd8>)
     68c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     68e:	4b0b      	ldr	r3, [pc, #44]	; (6bc <_system_extint_init+0xdc>)
     690:	4798      	blx	r3
}
     692:	46c0      	nop			; (mov r8, r8)
     694:	46bd      	mov	sp, r7
     696:	b004      	add	sp, #16
     698:	bd80      	pop	{r7, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	40001800 	.word	0x40001800
     6a0:	00000511 	.word	0x00000511
     6a4:	000004f9 	.word	0x000004f9
     6a8:	0000124d 	.word	0x0000124d
     6ac:	00001291 	.word	0x00001291
     6b0:	00000599 	.word	0x00000599
     6b4:	20000094 	.word	0x20000094
     6b8:	0000056d 	.word	0x0000056d
     6bc:	000006c1 	.word	0x000006c1

000006c0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     6c0:	b580      	push	{r7, lr}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     6c6:	4b15      	ldr	r3, [pc, #84]	; (71c <_extint_enable+0x5c>)
     6c8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     6ca:	2300      	movs	r3, #0
     6cc:	607b      	str	r3, [r7, #4]
     6ce:	e018      	b.n	702 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	009b      	lsls	r3, r3, #2
     6d4:	2208      	movs	r2, #8
     6d6:	4694      	mov	ip, r2
     6d8:	44bc      	add	ip, r7
     6da:	4463      	add	r3, ip
     6dc:	3b08      	subs	r3, #8
     6de:	681a      	ldr	r2, [r3, #0]
     6e0:	687b      	ldr	r3, [r7, #4]
     6e2:	009b      	lsls	r3, r3, #2
     6e4:	2108      	movs	r1, #8
     6e6:	468c      	mov	ip, r1
     6e8:	44bc      	add	ip, r7
     6ea:	4463      	add	r3, ip
     6ec:	3b08      	subs	r3, #8
     6ee:	681b      	ldr	r3, [r3, #0]
     6f0:	781b      	ldrb	r3, [r3, #0]
     6f2:	b2db      	uxtb	r3, r3
     6f4:	2102      	movs	r1, #2
     6f6:	430b      	orrs	r3, r1
     6f8:	b2db      	uxtb	r3, r3
     6fa:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	3301      	adds	r3, #1
     700:	607b      	str	r3, [r7, #4]
     702:	687b      	ldr	r3, [r7, #4]
     704:	2b00      	cmp	r3, #0
     706:	d0e3      	beq.n	6d0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     708:	46c0      	nop			; (mov r8, r8)
     70a:	4b05      	ldr	r3, [pc, #20]	; (720 <_extint_enable+0x60>)
     70c:	4798      	blx	r3
     70e:	1e03      	subs	r3, r0, #0
     710:	d1fb      	bne.n	70a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     712:	46c0      	nop			; (mov r8, r8)
     714:	46bd      	mov	sp, r7
     716:	b002      	add	sp, #8
     718:	bd80      	pop	{r7, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	40001800 	.word	0x40001800
     720:	00000599 	.word	0x00000599

00000724 <system_pinmux_get_config_defaults>:
{
     724:	b580      	push	{r7, lr}
     726:	b082      	sub	sp, #8
     728:	af00      	add	r7, sp, #0
     72a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	2280      	movs	r2, #128	; 0x80
     730:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     732:	687b      	ldr	r3, [r7, #4]
     734:	2200      	movs	r2, #0
     736:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     738:	687b      	ldr	r3, [r7, #4]
     73a:	2201      	movs	r2, #1
     73c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     73e:	687b      	ldr	r3, [r7, #4]
     740:	2200      	movs	r2, #0
     742:	70da      	strb	r2, [r3, #3]
}
     744:	46c0      	nop			; (mov r8, r8)
     746:	46bd      	mov	sp, r7
     748:	b002      	add	sp, #8
     74a:	bd80      	pop	{r7, pc}

0000074c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     74c:	b580      	push	{r7, lr}
     74e:	b084      	sub	sp, #16
     750:	af00      	add	r7, sp, #0
     752:	0002      	movs	r2, r0
     754:	6039      	str	r1, [r7, #0]
     756:	1dfb      	adds	r3, r7, #7
     758:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     75a:	230c      	movs	r3, #12
     75c:	18fb      	adds	r3, r7, r3
     75e:	0018      	movs	r0, r3
     760:	4b10      	ldr	r3, [pc, #64]	; (7a4 <port_pin_set_config+0x58>)
     762:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     764:	230c      	movs	r3, #12
     766:	18fb      	adds	r3, r7, r3
     768:	2280      	movs	r2, #128	; 0x80
     76a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     76c:	683b      	ldr	r3, [r7, #0]
     76e:	781a      	ldrb	r2, [r3, #0]
     770:	230c      	movs	r3, #12
     772:	18fb      	adds	r3, r7, r3
     774:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     776:	683b      	ldr	r3, [r7, #0]
     778:	785a      	ldrb	r2, [r3, #1]
     77a:	230c      	movs	r3, #12
     77c:	18fb      	adds	r3, r7, r3
     77e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     780:	683b      	ldr	r3, [r7, #0]
     782:	789a      	ldrb	r2, [r3, #2]
     784:	230c      	movs	r3, #12
     786:	18fb      	adds	r3, r7, r3
     788:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     78a:	230c      	movs	r3, #12
     78c:	18fa      	adds	r2, r7, r3
     78e:	1dfb      	adds	r3, r7, #7
     790:	781b      	ldrb	r3, [r3, #0]
     792:	0011      	movs	r1, r2
     794:	0018      	movs	r0, r3
     796:	4b04      	ldr	r3, [pc, #16]	; (7a8 <port_pin_set_config+0x5c>)
     798:	4798      	blx	r3
}
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	46bd      	mov	sp, r7
     79e:	b004      	add	sp, #16
     7a0:	bd80      	pop	{r7, pc}
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	00000725 	.word	0x00000725
     7a8:	000014e1 	.word	0x000014e1

000007ac <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     7ac:	b580      	push	{r7, lr}
     7ae:	af00      	add	r7, sp, #0
     7b0:	4b03      	ldr	r3, [pc, #12]	; (7c0 <SERCOM0_Handler+0x14>)
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	2000      	movs	r0, #0
     7b6:	4798      	blx	r3
     7b8:	46c0      	nop			; (mov r8, r8)
     7ba:	46bd      	mov	sp, r7
     7bc:	bd80      	pop	{r7, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	20000048 	.word	0x20000048

000007c4 <SERCOM1_Handler>:
     7c4:	b580      	push	{r7, lr}
     7c6:	af00      	add	r7, sp, #0
     7c8:	4b03      	ldr	r3, [pc, #12]	; (7d8 <SERCOM1_Handler+0x14>)
     7ca:	685b      	ldr	r3, [r3, #4]
     7cc:	2001      	movs	r0, #1
     7ce:	4798      	blx	r3
     7d0:	46c0      	nop			; (mov r8, r8)
     7d2:	46bd      	mov	sp, r7
     7d4:	bd80      	pop	{r7, pc}
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	20000048 	.word	0x20000048

000007dc <SERCOM2_Handler>:
     7dc:	b580      	push	{r7, lr}
     7de:	af00      	add	r7, sp, #0
     7e0:	4b03      	ldr	r3, [pc, #12]	; (7f0 <SERCOM2_Handler+0x14>)
     7e2:	689b      	ldr	r3, [r3, #8]
     7e4:	2002      	movs	r0, #2
     7e6:	4798      	blx	r3
     7e8:	46c0      	nop			; (mov r8, r8)
     7ea:	46bd      	mov	sp, r7
     7ec:	bd80      	pop	{r7, pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	20000048 	.word	0x20000048

000007f4 <system_gclk_gen_get_config_defaults>:
{
     7f4:	b580      	push	{r7, lr}
     7f6:	b082      	sub	sp, #8
     7f8:	af00      	add	r7, sp, #0
     7fa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	2201      	movs	r2, #1
     800:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
     802:	687b      	ldr	r3, [r7, #4]
     804:	2200      	movs	r2, #0
     806:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	2206      	movs	r2, #6
     80c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
     80e:	687b      	ldr	r3, [r7, #4]
     810:	2200      	movs	r2, #0
     812:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
     814:	687b      	ldr	r3, [r7, #4]
     816:	2200      	movs	r2, #0
     818:	725a      	strb	r2, [r3, #9]
}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	46bd      	mov	sp, r7
     81e:	b002      	add	sp, #8
     820:	bd80      	pop	{r7, pc}

00000822 <system_gclk_chan_get_config_defaults>:
{
     822:	b580      	push	{r7, lr}
     824:	b082      	sub	sp, #8
     826:	af00      	add	r7, sp, #0
     828:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	2200      	movs	r2, #0
     82e:	701a      	strb	r2, [r3, #0]
}
     830:	46c0      	nop			; (mov r8, r8)
     832:	46bd      	mov	sp, r7
     834:	b002      	add	sp, #8
     836:	bd80      	pop	{r7, pc}

00000838 <system_clock_source_osc32k_get_config_defaults>:
{
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
     840:	687b      	ldr	r3, [r7, #4]
     842:	2201      	movs	r2, #1
     844:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
     846:	687b      	ldr	r3, [r7, #4]
     848:	2201      	movs	r2, #1
     84a:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	2200      	movs	r2, #0
     850:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
     852:	687b      	ldr	r3, [r7, #4]
     854:	2201      	movs	r2, #1
     856:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	2207      	movs	r2, #7
     85c:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
     85e:	687b      	ldr	r3, [r7, #4]
     860:	2200      	movs	r2, #0
     862:	715a      	strb	r2, [r3, #5]
}
     864:	46c0      	nop			; (mov r8, r8)
     866:	46bd      	mov	sp, r7
     868:	b002      	add	sp, #8
     86a:	bd80      	pop	{r7, pc}

0000086c <system_clock_source_osc8m_get_config_defaults>:
{
     86c:	b580      	push	{r7, lr}
     86e:	b082      	sub	sp, #8
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
     874:	687b      	ldr	r3, [r7, #4]
     876:	2203      	movs	r2, #3
     878:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	2200      	movs	r2, #0
     87e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
     880:	687b      	ldr	r3, [r7, #4]
     882:	2201      	movs	r2, #1
     884:	709a      	strb	r2, [r3, #2]
}
     886:	46c0      	nop			; (mov r8, r8)
     888:	46bd      	mov	sp, r7
     88a:	b002      	add	sp, #8
     88c:	bd80      	pop	{r7, pc}

0000088e <system_clock_source_dfll_get_config_defaults>:
{
     88e:	b580      	push	{r7, lr}
     890:	b082      	sub	sp, #8
     892:	af00      	add	r7, sp, #0
     894:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
     896:	687b      	ldr	r3, [r7, #4]
     898:	2200      	movs	r2, #0
     89a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	2200      	movs	r2, #0
     8a0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	2200      	movs	r2, #0
     8a6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	2200      	movs	r2, #0
     8ac:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	2200      	movs	r2, #0
     8b2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	2201      	movs	r2, #1
     8b8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	2207      	movs	r2, #7
     8be:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	223f      	movs	r2, #63	; 0x3f
     8c4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	2201      	movs	r2, #1
     8ca:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	2201      	movs	r2, #1
     8d0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	2206      	movs	r2, #6
     8d6:	821a      	strh	r2, [r3, #16]
}
     8d8:	46c0      	nop			; (mov r8, r8)
     8da:	46bd      	mov	sp, r7
     8dc:	b002      	add	sp, #8
     8de:	bd80      	pop	{r7, pc}

000008e0 <system_cpu_clock_set_divider>:
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b082      	sub	sp, #8
     8e4:	af00      	add	r7, sp, #0
     8e6:	0002      	movs	r2, r0
     8e8:	1dfb      	adds	r3, r7, #7
     8ea:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
     8ec:	4a03      	ldr	r2, [pc, #12]	; (8fc <system_cpu_clock_set_divider+0x1c>)
     8ee:	1dfb      	adds	r3, r7, #7
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	7213      	strb	r3, [r2, #8]
}
     8f4:	46c0      	nop			; (mov r8, r8)
     8f6:	46bd      	mov	sp, r7
     8f8:	b002      	add	sp, #8
     8fa:	bd80      	pop	{r7, pc}
     8fc:	40000400 	.word	0x40000400

00000900 <system_apb_clock_set_divider>:
{
     900:	b580      	push	{r7, lr}
     902:	b082      	sub	sp, #8
     904:	af00      	add	r7, sp, #0
     906:	0002      	movs	r2, r0
     908:	1dfb      	adds	r3, r7, #7
     90a:	701a      	strb	r2, [r3, #0]
     90c:	1dbb      	adds	r3, r7, #6
     90e:	1c0a      	adds	r2, r1, #0
     910:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     912:	1dfb      	adds	r3, r7, #7
     914:	781b      	ldrb	r3, [r3, #0]
     916:	2b01      	cmp	r3, #1
     918:	d008      	beq.n	92c <system_apb_clock_set_divider+0x2c>
     91a:	2b02      	cmp	r3, #2
     91c:	d00b      	beq.n	936 <system_apb_clock_set_divider+0x36>
     91e:	2b00      	cmp	r3, #0
     920:	d10e      	bne.n	940 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
     922:	4a0b      	ldr	r2, [pc, #44]	; (950 <system_apb_clock_set_divider+0x50>)
     924:	1dbb      	adds	r3, r7, #6
     926:	781b      	ldrb	r3, [r3, #0]
     928:	7253      	strb	r3, [r2, #9]
			break;
     92a:	e00b      	b.n	944 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
     92c:	4a08      	ldr	r2, [pc, #32]	; (950 <system_apb_clock_set_divider+0x50>)
     92e:	1dbb      	adds	r3, r7, #6
     930:	781b      	ldrb	r3, [r3, #0]
     932:	7293      	strb	r3, [r2, #10]
			break;
     934:	e006      	b.n	944 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
     936:	4a06      	ldr	r2, [pc, #24]	; (950 <system_apb_clock_set_divider+0x50>)
     938:	1dbb      	adds	r3, r7, #6
     93a:	781b      	ldrb	r3, [r3, #0]
     93c:	72d3      	strb	r3, [r2, #11]
			break;
     93e:	e001      	b.n	944 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
     940:	2317      	movs	r3, #23
     942:	e000      	b.n	946 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
     944:	2300      	movs	r3, #0
}
     946:	0018      	movs	r0, r3
     948:	46bd      	mov	sp, r7
     94a:	b002      	add	sp, #8
     94c:	bd80      	pop	{r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	40000400 	.word	0x40000400

00000954 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
     954:	b580      	push	{r7, lr}
     956:	b082      	sub	sp, #8
     958:	af00      	add	r7, sp, #0
     95a:	0002      	movs	r2, r0
     95c:	1dfb      	adds	r3, r7, #7
     95e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     960:	4a08      	ldr	r2, [pc, #32]	; (984 <system_flash_set_waitstates+0x30>)
     962:	1dfb      	adds	r3, r7, #7
     964:	781b      	ldrb	r3, [r3, #0]
     966:	210f      	movs	r1, #15
     968:	400b      	ands	r3, r1
     96a:	b2d9      	uxtb	r1, r3
     96c:	6853      	ldr	r3, [r2, #4]
     96e:	200f      	movs	r0, #15
     970:	4001      	ands	r1, r0
     972:	0049      	lsls	r1, r1, #1
     974:	201e      	movs	r0, #30
     976:	4383      	bics	r3, r0
     978:	430b      	orrs	r3, r1
     97a:	6053      	str	r3, [r2, #4]
}
     97c:	46c0      	nop			; (mov r8, r8)
     97e:	46bd      	mov	sp, r7
     980:	b002      	add	sp, #8
     982:	bd80      	pop	{r7, pc}
     984:	41004000 	.word	0x41004000

00000988 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
     988:	b580      	push	{r7, lr}
     98a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     98c:	46c0      	nop			; (mov r8, r8)
     98e:	4b04      	ldr	r3, [pc, #16]	; (9a0 <_system_dfll_wait_for_sync+0x18>)
     990:	68db      	ldr	r3, [r3, #12]
     992:	2210      	movs	r2, #16
     994:	4013      	ands	r3, r2
     996:	d0fa      	beq.n	98e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
     998:	46c0      	nop			; (mov r8, r8)
     99a:	46bd      	mov	sp, r7
     99c:	bd80      	pop	{r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	40000800 	.word	0x40000800

000009a4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     9a8:	4b0c      	ldr	r3, [pc, #48]	; (9dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     9aa:	2202      	movs	r2, #2
     9ac:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
     9ae:	4b0c      	ldr	r3, [pc, #48]	; (9e0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
     9b0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     9b2:	4a0a      	ldr	r2, [pc, #40]	; (9dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     9b4:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     9b6:	689b      	ldr	r3, [r3, #8]
     9b8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     9ba:	4a08      	ldr	r2, [pc, #32]	; (9dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     9bc:	4b09      	ldr	r3, [pc, #36]	; (9e4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     9be:	685b      	ldr	r3, [r3, #4]
     9c0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
     9c2:	4b06      	ldr	r3, [pc, #24]	; (9dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     9c4:	2200      	movs	r2, #0
     9c6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
     9c8:	4b05      	ldr	r3, [pc, #20]	; (9e0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
     9ca:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     9cc:	4a03      	ldr	r2, [pc, #12]	; (9dc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     9ce:	4b05      	ldr	r3, [pc, #20]	; (9e4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     9d0:	681b      	ldr	r3, [r3, #0]
     9d2:	b29b      	uxth	r3, r3
     9d4:	8493      	strh	r3, [r2, #36]	; 0x24
}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	46bd      	mov	sp, r7
     9da:	bd80      	pop	{r7, pc}
     9dc:	40000800 	.word	0x40000800
     9e0:	00000989 	.word	0x00000989
     9e4:	20000054 	.word	0x20000054

000009e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     9e8:	b580      	push	{r7, lr}
     9ea:	b084      	sub	sp, #16
     9ec:	af00      	add	r7, sp, #0
     9ee:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     9f0:	4b1a      	ldr	r3, [pc, #104]	; (a5c <system_clock_source_osc8m_set_config+0x74>)
     9f2:	6a1b      	ldr	r3, [r3, #32]
     9f4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	781b      	ldrb	r3, [r3, #0]
     9fa:	1c1a      	adds	r2, r3, #0
     9fc:	2303      	movs	r3, #3
     9fe:	4013      	ands	r3, r2
     a00:	b2da      	uxtb	r2, r3
     a02:	230d      	movs	r3, #13
     a04:	18fb      	adds	r3, r7, r3
     a06:	2103      	movs	r1, #3
     a08:	400a      	ands	r2, r1
     a0a:	0010      	movs	r0, r2
     a0c:	781a      	ldrb	r2, [r3, #0]
     a0e:	2103      	movs	r1, #3
     a10:	438a      	bics	r2, r1
     a12:	1c11      	adds	r1, r2, #0
     a14:	1c02      	adds	r2, r0, #0
     a16:	430a      	orrs	r2, r1
     a18:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	789a      	ldrb	r2, [r3, #2]
     a1e:	230c      	movs	r3, #12
     a20:	18fb      	adds	r3, r7, r3
     a22:	01d0      	lsls	r0, r2, #7
     a24:	781a      	ldrb	r2, [r3, #0]
     a26:	217f      	movs	r1, #127	; 0x7f
     a28:	400a      	ands	r2, r1
     a2a:	1c11      	adds	r1, r2, #0
     a2c:	1c02      	adds	r2, r0, #0
     a2e:	430a      	orrs	r2, r1
     a30:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
     a32:	687b      	ldr	r3, [r7, #4]
     a34:	785a      	ldrb	r2, [r3, #1]
     a36:	230c      	movs	r3, #12
     a38:	18fb      	adds	r3, r7, r3
     a3a:	2101      	movs	r1, #1
     a3c:	400a      	ands	r2, r1
     a3e:	0190      	lsls	r0, r2, #6
     a40:	781a      	ldrb	r2, [r3, #0]
     a42:	2140      	movs	r1, #64	; 0x40
     a44:	438a      	bics	r2, r1
     a46:	1c11      	adds	r1, r2, #0
     a48:	1c02      	adds	r2, r0, #0
     a4a:	430a      	orrs	r2, r1
     a4c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
     a4e:	4b03      	ldr	r3, [pc, #12]	; (a5c <system_clock_source_osc8m_set_config+0x74>)
     a50:	68fa      	ldr	r2, [r7, #12]
     a52:	621a      	str	r2, [r3, #32]
}
     a54:	46c0      	nop			; (mov r8, r8)
     a56:	46bd      	mov	sp, r7
     a58:	b004      	add	sp, #16
     a5a:	bd80      	pop	{r7, pc}
     a5c:	40000800 	.word	0x40000800

00000a60 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     a60:	b580      	push	{r7, lr}
     a62:	b084      	sub	sp, #16
     a64:	af00      	add	r7, sp, #0
     a66:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     a68:	4b2f      	ldr	r3, [pc, #188]	; (b28 <system_clock_source_osc32k_set_config+0xc8>)
     a6a:	699b      	ldr	r3, [r3, #24]
     a6c:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	785a      	ldrb	r2, [r3, #1]
     a72:	230c      	movs	r3, #12
     a74:	18fb      	adds	r3, r7, r3
     a76:	2101      	movs	r1, #1
     a78:	400a      	ands	r2, r1
     a7a:	00d0      	lsls	r0, r2, #3
     a7c:	781a      	ldrb	r2, [r3, #0]
     a7e:	2108      	movs	r1, #8
     a80:	438a      	bics	r2, r1
     a82:	1c11      	adds	r1, r2, #0
     a84:	1c02      	adds	r2, r0, #0
     a86:	430a      	orrs	r2, r1
     a88:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	789a      	ldrb	r2, [r3, #2]
     a8e:	230c      	movs	r3, #12
     a90:	18fb      	adds	r3, r7, r3
     a92:	2101      	movs	r1, #1
     a94:	400a      	ands	r2, r1
     a96:	0090      	lsls	r0, r2, #2
     a98:	781a      	ldrb	r2, [r3, #0]
     a9a:	2104      	movs	r1, #4
     a9c:	438a      	bics	r2, r1
     a9e:	1c11      	adds	r1, r2, #0
     aa0:	1c02      	adds	r2, r0, #0
     aa2:	430a      	orrs	r2, r1
     aa4:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	781b      	ldrb	r3, [r3, #0]
     aaa:	1c1a      	adds	r2, r3, #0
     aac:	2307      	movs	r3, #7
     aae:	4013      	ands	r3, r2
     ab0:	b2da      	uxtb	r2, r3
     ab2:	230d      	movs	r3, #13
     ab4:	18fb      	adds	r3, r7, r3
     ab6:	2107      	movs	r1, #7
     ab8:	400a      	ands	r2, r1
     aba:	0010      	movs	r0, r2
     abc:	781a      	ldrb	r2, [r3, #0]
     abe:	2107      	movs	r1, #7
     ac0:	438a      	bics	r2, r1
     ac2:	1c11      	adds	r1, r2, #0
     ac4:	1c02      	adds	r2, r0, #0
     ac6:	430a      	orrs	r2, r1
     ac8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	791a      	ldrb	r2, [r3, #4]
     ace:	230c      	movs	r3, #12
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	01d0      	lsls	r0, r2, #7
     ad4:	781a      	ldrb	r2, [r3, #0]
     ad6:	217f      	movs	r1, #127	; 0x7f
     ad8:	400a      	ands	r2, r1
     ada:	1c11      	adds	r1, r2, #0
     adc:	1c02      	adds	r2, r0, #0
     ade:	430a      	orrs	r2, r1
     ae0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	78da      	ldrb	r2, [r3, #3]
     ae6:	230c      	movs	r3, #12
     ae8:	18fb      	adds	r3, r7, r3
     aea:	2101      	movs	r1, #1
     aec:	400a      	ands	r2, r1
     aee:	0190      	lsls	r0, r2, #6
     af0:	781a      	ldrb	r2, [r3, #0]
     af2:	2140      	movs	r1, #64	; 0x40
     af4:	438a      	bics	r2, r1
     af6:	1c11      	adds	r1, r2, #0
     af8:	1c02      	adds	r2, r0, #0
     afa:	430a      	orrs	r2, r1
     afc:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	795a      	ldrb	r2, [r3, #5]
     b02:	230d      	movs	r3, #13
     b04:	18fb      	adds	r3, r7, r3
     b06:	2101      	movs	r1, #1
     b08:	400a      	ands	r2, r1
     b0a:	0110      	lsls	r0, r2, #4
     b0c:	781a      	ldrb	r2, [r3, #0]
     b0e:	2110      	movs	r1, #16
     b10:	438a      	bics	r2, r1
     b12:	1c11      	adds	r1, r2, #0
     b14:	1c02      	adds	r2, r0, #0
     b16:	430a      	orrs	r2, r1
     b18:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
     b1a:	4b03      	ldr	r3, [pc, #12]	; (b28 <system_clock_source_osc32k_set_config+0xc8>)
     b1c:	68fa      	ldr	r2, [r7, #12]
     b1e:	619a      	str	r2, [r3, #24]
}
     b20:	46c0      	nop			; (mov r8, r8)
     b22:	46bd      	mov	sp, r7
     b24:	b004      	add	sp, #16
     b26:	bd80      	pop	{r7, pc}
     b28:	40000800 	.word	0x40000800

00000b2c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     b2c:	b580      	push	{r7, lr}
     b2e:	b082      	sub	sp, #8
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	7a1b      	ldrb	r3, [r3, #8]
     b38:	029b      	lsls	r3, r3, #10
     b3a:	041b      	lsls	r3, r3, #16
     b3c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	895b      	ldrh	r3, [r3, #10]
     b42:	059b      	lsls	r3, r3, #22
     b44:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     b46:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
     b48:	4b2a      	ldr	r3, [pc, #168]	; (bf4 <system_clock_source_dfll_set_config+0xc8>)
     b4a:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
     b50:	687b      	ldr	r3, [r7, #4]
     b52:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
     b54:	4313      	orrs	r3, r2
     b56:	b2db      	uxtb	r3, r3
     b58:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
     b5e:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
     b60:	687a      	ldr	r2, [r7, #4]
     b62:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
     b64:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	785b      	ldrb	r3, [r3, #1]
     b6a:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
     b6c:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
     b6e:	4b21      	ldr	r3, [pc, #132]	; (bf4 <system_clock_source_dfll_set_config+0xc8>)
     b70:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     b72:	687b      	ldr	r3, [r7, #4]
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	2b04      	cmp	r3, #4
     b78:	d116      	bne.n	ba8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     b7a:	687b      	ldr	r3, [r7, #4]
     b7c:	7b1b      	ldrb	r3, [r3, #12]
     b7e:	069b      	lsls	r3, r3, #26
     b80:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	89db      	ldrh	r3, [r3, #14]
     b86:	041b      	lsls	r3, r3, #16
     b88:	0019      	movs	r1, r3
     b8a:	4b1b      	ldr	r3, [pc, #108]	; (bf8 <system_clock_source_dfll_set_config+0xcc>)
     b8c:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     b8e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     b90:	687a      	ldr	r2, [r7, #4]
     b92:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     b94:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
     b96:	4b17      	ldr	r3, [pc, #92]	; (bf4 <system_clock_source_dfll_set_config+0xc8>)
     b98:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
     b9a:	4b16      	ldr	r3, [pc, #88]	; (bf4 <system_clock_source_dfll_set_config+0xc8>)
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	687a      	ldr	r2, [r7, #4]
     ba0:	7812      	ldrb	r2, [r2, #0]
     ba2:	431a      	orrs	r2, r3
     ba4:	4b13      	ldr	r3, [pc, #76]	; (bf4 <system_clock_source_dfll_set_config+0xc8>)
     ba6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	781b      	ldrb	r3, [r3, #0]
     bac:	2b20      	cmp	r3, #32
     bae:	d11c      	bne.n	bea <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	7b1b      	ldrb	r3, [r3, #12]
     bb4:	069b      	lsls	r3, r3, #26
     bb6:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	89db      	ldrh	r3, [r3, #14]
     bbc:	041b      	lsls	r3, r3, #16
     bbe:	0019      	movs	r1, r3
     bc0:	4b0d      	ldr	r3, [pc, #52]	; (bf8 <system_clock_source_dfll_set_config+0xcc>)
     bc2:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     bc4:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     bc6:	687a      	ldr	r2, [r7, #4]
     bc8:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     bca:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
     bcc:	4b09      	ldr	r3, [pc, #36]	; (bf4 <system_clock_source_dfll_set_config+0xc8>)
     bce:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     bd0:	4b08      	ldr	r3, [pc, #32]	; (bf4 <system_clock_source_dfll_set_config+0xc8>)
     bd2:	681b      	ldr	r3, [r3, #0]
     bd4:	687a      	ldr	r2, [r7, #4]
     bd6:	7812      	ldrb	r2, [r2, #0]
     bd8:	2104      	movs	r1, #4
     bda:	430a      	orrs	r2, r1
     bdc:	b2d2      	uxtb	r2, r2
     bde:	4313      	orrs	r3, r2
     be0:	2280      	movs	r2, #128	; 0x80
     be2:	00d2      	lsls	r2, r2, #3
     be4:	431a      	orrs	r2, r3
     be6:	4b03      	ldr	r3, [pc, #12]	; (bf4 <system_clock_source_dfll_set_config+0xc8>)
     be8:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	46bd      	mov	sp, r7
     bee:	b002      	add	sp, #8
     bf0:	bd80      	pop	{r7, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	20000054 	.word	0x20000054
     bf8:	03ff0000 	.word	0x03ff0000

00000bfc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
     bfc:	b580      	push	{r7, lr}
     bfe:	b082      	sub	sp, #8
     c00:	af00      	add	r7, sp, #0
     c02:	0002      	movs	r2, r0
     c04:	1dfb      	adds	r3, r7, #7
     c06:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
     c08:	1dfb      	adds	r3, r7, #7
     c0a:	781b      	ldrb	r3, [r3, #0]
     c0c:	2b08      	cmp	r3, #8
     c0e:	d83b      	bhi.n	c88 <system_clock_source_enable+0x8c>
     c10:	009a      	lsls	r2, r3, #2
     c12:	4b21      	ldr	r3, [pc, #132]	; (c98 <system_clock_source_enable+0x9c>)
     c14:	18d3      	adds	r3, r2, r3
     c16:	681b      	ldr	r3, [r3, #0]
     c18:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c1a:	4b20      	ldr	r3, [pc, #128]	; (c9c <system_clock_source_enable+0xa0>)
     c1c:	4a1f      	ldr	r2, [pc, #124]	; (c9c <system_clock_source_enable+0xa0>)
     c1e:	6a12      	ldr	r2, [r2, #32]
     c20:	2102      	movs	r1, #2
     c22:	430a      	orrs	r2, r1
     c24:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     c26:	2300      	movs	r3, #0
     c28:	e031      	b.n	c8e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c2a:	4b1c      	ldr	r3, [pc, #112]	; (c9c <system_clock_source_enable+0xa0>)
     c2c:	4a1b      	ldr	r2, [pc, #108]	; (c9c <system_clock_source_enable+0xa0>)
     c2e:	6992      	ldr	r2, [r2, #24]
     c30:	2102      	movs	r1, #2
     c32:	430a      	orrs	r2, r1
     c34:	619a      	str	r2, [r3, #24]
		break;
     c36:	e029      	b.n	c8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c38:	4a18      	ldr	r2, [pc, #96]	; (c9c <system_clock_source_enable+0xa0>)
     c3a:	4b18      	ldr	r3, [pc, #96]	; (c9c <system_clock_source_enable+0xa0>)
     c3c:	8a1b      	ldrh	r3, [r3, #16]
     c3e:	b29b      	uxth	r3, r3
     c40:	2102      	movs	r1, #2
     c42:	430b      	orrs	r3, r1
     c44:	b29b      	uxth	r3, r3
     c46:	8213      	strh	r3, [r2, #16]
		break;
     c48:	e020      	b.n	c8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c4a:	4a14      	ldr	r2, [pc, #80]	; (c9c <system_clock_source_enable+0xa0>)
     c4c:	4b13      	ldr	r3, [pc, #76]	; (c9c <system_clock_source_enable+0xa0>)
     c4e:	8a9b      	ldrh	r3, [r3, #20]
     c50:	b29b      	uxth	r3, r3
     c52:	2102      	movs	r1, #2
     c54:	430b      	orrs	r3, r1
     c56:	b29b      	uxth	r3, r3
     c58:	8293      	strh	r3, [r2, #20]
		break;
     c5a:	e017      	b.n	c8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c5c:	4b10      	ldr	r3, [pc, #64]	; (ca0 <system_clock_source_enable+0xa4>)
     c5e:	681b      	ldr	r3, [r3, #0]
     c60:	2202      	movs	r2, #2
     c62:	431a      	orrs	r2, r3
     c64:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <system_clock_source_enable+0xa4>)
     c66:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
     c68:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <system_clock_source_enable+0xa8>)
     c6a:	4798      	blx	r3
		break;
     c6c:	e00e      	b.n	c8c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     c6e:	4a0b      	ldr	r2, [pc, #44]	; (c9c <system_clock_source_enable+0xa0>)
     c70:	490a      	ldr	r1, [pc, #40]	; (c9c <system_clock_source_enable+0xa0>)
     c72:	2344      	movs	r3, #68	; 0x44
     c74:	5ccb      	ldrb	r3, [r1, r3]
     c76:	b2db      	uxtb	r3, r3
     c78:	2102      	movs	r1, #2
     c7a:	430b      	orrs	r3, r1
     c7c:	b2d9      	uxtb	r1, r3
     c7e:	2344      	movs	r3, #68	; 0x44
     c80:	54d1      	strb	r1, [r2, r3]
		break;
     c82:	e003      	b.n	c8c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     c84:	2300      	movs	r3, #0
     c86:	e002      	b.n	c8e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c88:	2317      	movs	r3, #23
     c8a:	e000      	b.n	c8e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
     c8c:	2300      	movs	r3, #0
}
     c8e:	0018      	movs	r0, r3
     c90:	46bd      	mov	sp, r7
     c92:	b002      	add	sp, #8
     c94:	bd80      	pop	{r7, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	000027f4 	.word	0x000027f4
     c9c:	40000800 	.word	0x40000800
     ca0:	20000054 	.word	0x20000054
     ca4:	000009a5 	.word	0x000009a5

00000ca8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
     ca8:	b580      	push	{r7, lr}
     caa:	b084      	sub	sp, #16
     cac:	af00      	add	r7, sp, #0
     cae:	0002      	movs	r2, r0
     cb0:	1dfb      	adds	r3, r7, #7
     cb2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
     cb4:	2300      	movs	r3, #0
     cb6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
     cb8:	1dfb      	adds	r3, r7, #7
     cba:	781b      	ldrb	r3, [r3, #0]
     cbc:	2b08      	cmp	r3, #8
     cbe:	d821      	bhi.n	d04 <system_clock_source_is_ready+0x5c>
     cc0:	009a      	lsls	r2, r3, #2
     cc2:	4b18      	ldr	r3, [pc, #96]	; (d24 <system_clock_source_is_ready+0x7c>)
     cc4:	18d3      	adds	r3, r2, r3
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
     cca:	2308      	movs	r3, #8
     ccc:	60fb      	str	r3, [r7, #12]
		break;
     cce:	e01b      	b.n	d08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
     cd0:	2304      	movs	r3, #4
     cd2:	60fb      	str	r3, [r7, #12]
		break;
     cd4:	e018      	b.n	d08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
     cd6:	2301      	movs	r3, #1
     cd8:	60fb      	str	r3, [r7, #12]
		break;
     cda:	e015      	b.n	d08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
     cdc:	2302      	movs	r3, #2
     cde:	60fb      	str	r3, [r7, #12]
		break;
     ce0:	e012      	b.n	d08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
     ce2:	23d0      	movs	r3, #208	; 0xd0
     ce4:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
     ce6:	e00f      	b.n	d08 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
     ce8:	4a0f      	ldr	r2, [pc, #60]	; (d28 <system_clock_source_is_ready+0x80>)
     cea:	2350      	movs	r3, #80	; 0x50
     cec:	5cd3      	ldrb	r3, [r2, r3]
     cee:	b2db      	uxtb	r3, r3
     cf0:	001a      	movs	r2, r3
     cf2:	2303      	movs	r3, #3
     cf4:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
     cf6:	3b03      	subs	r3, #3
     cf8:	425a      	negs	r2, r3
     cfa:	4153      	adcs	r3, r2
     cfc:	b2db      	uxtb	r3, r3
     cfe:	e00c      	b.n	d1a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
     d00:	2301      	movs	r3, #1
     d02:	e00a      	b.n	d1a <system_clock_source_is_ready+0x72>

	default:
		return false;
     d04:	2300      	movs	r3, #0
     d06:	e008      	b.n	d1a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     d08:	4b07      	ldr	r3, [pc, #28]	; (d28 <system_clock_source_is_ready+0x80>)
     d0a:	68db      	ldr	r3, [r3, #12]
     d0c:	68fa      	ldr	r2, [r7, #12]
     d0e:	401a      	ands	r2, r3
     d10:	68fb      	ldr	r3, [r7, #12]
     d12:	1ad3      	subs	r3, r2, r3
     d14:	425a      	negs	r2, r3
     d16:	4153      	adcs	r3, r2
     d18:	b2db      	uxtb	r3, r3
}
     d1a:	0018      	movs	r0, r3
     d1c:	46bd      	mov	sp, r7
     d1e:	b004      	add	sp, #16
     d20:	bd80      	pop	{r7, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	00002818 	.word	0x00002818
     d28:	40000800 	.word	0x40000800

00000d2c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
     d2c:	b580      	push	{r7, lr}
     d2e:	b082      	sub	sp, #8
     d30:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     d32:	003b      	movs	r3, r7
     d34:	2202      	movs	r2, #2
     d36:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d38:	2300      	movs	r3, #0
     d3a:	607b      	str	r3, [r7, #4]
     d3c:	e009      	b.n	d52 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	b2db      	uxtb	r3, r3
     d42:	003a      	movs	r2, r7
     d44:	0011      	movs	r1, r2
     d46:	0018      	movs	r0, r3
     d48:	4b05      	ldr	r3, [pc, #20]	; (d60 <_switch_peripheral_gclk+0x34>)
     d4a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	3301      	adds	r3, #1
     d50:	607b      	str	r3, [r7, #4]
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	2b17      	cmp	r3, #23
     d56:	d9f2      	bls.n	d3e <_switch_peripheral_gclk+0x12>
	}
}
     d58:	46c0      	nop			; (mov r8, r8)
     d5a:	46bd      	mov	sp, r7
     d5c:	b002      	add	sp, #8
     d5e:	bd80      	pop	{r7, pc}
     d60:	0000124d 	.word	0x0000124d

00000d64 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     d64:	b580      	push	{r7, lr}
     d66:	b0a0      	sub	sp, #128	; 0x80
     d68:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d6a:	4b8d      	ldr	r3, [pc, #564]	; (fa0 <system_clock_init+0x23c>)
     d6c:	22c2      	movs	r2, #194	; 0xc2
     d6e:	00d2      	lsls	r2, r2, #3
     d70:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
     d72:	2001      	movs	r0, #1
     d74:	4b8b      	ldr	r3, [pc, #556]	; (fa4 <system_clock_init+0x240>)
     d76:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
     d78:	4b8b      	ldr	r3, [pc, #556]	; (fa8 <system_clock_init+0x244>)
     d7a:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
     d7c:	4a88      	ldr	r2, [pc, #544]	; (fa0 <system_clock_init+0x23c>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
     d7e:	4b8b      	ldr	r3, [pc, #556]	; (fac <system_clock_init+0x248>)
     d80:	681b      	ldr	r3, [r3, #0]
     d82:	099b      	lsrs	r3, r3, #6
     d84:	b2db      	uxtb	r3, r3
     d86:	1c19      	adds	r1, r3, #0
     d88:	237f      	movs	r3, #127	; 0x7f
     d8a:	400b      	ands	r3, r1
     d8c:	b2d9      	uxtb	r1, r3
	SYSCTRL->OSC32K.bit.CALIB =
     d8e:	6993      	ldr	r3, [r2, #24]
     d90:	207f      	movs	r0, #127	; 0x7f
     d92:	4001      	ands	r1, r0
     d94:	0409      	lsls	r1, r1, #16
     d96:	4886      	ldr	r0, [pc, #536]	; (fb0 <system_clock_init+0x24c>)
     d98:	4003      	ands	r3, r0
     d9a:	430b      	orrs	r3, r1
     d9c:	6193      	str	r3, [r2, #24]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
     d9e:	2374      	movs	r3, #116	; 0x74
     da0:	18fb      	adds	r3, r7, r3
     da2:	0018      	movs	r0, r3
     da4:	4b83      	ldr	r3, [pc, #524]	; (fb4 <system_clock_init+0x250>)
     da6:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
     da8:	2374      	movs	r3, #116	; 0x74
     daa:	18fb      	adds	r3, r7, r3
     dac:	2207      	movs	r2, #7
     dae:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
     db0:	2374      	movs	r3, #116	; 0x74
     db2:	18fb      	adds	r3, r7, r3
     db4:	2201      	movs	r2, #1
     db6:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
     db8:	2374      	movs	r3, #116	; 0x74
     dba:	18fb      	adds	r3, r7, r3
     dbc:	2201      	movs	r2, #1
     dbe:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
     dc0:	2374      	movs	r3, #116	; 0x74
     dc2:	18fb      	adds	r3, r7, r3
     dc4:	2201      	movs	r2, #1
     dc6:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
     dc8:	2374      	movs	r3, #116	; 0x74
     dca:	18fb      	adds	r3, r7, r3
     dcc:	2200      	movs	r2, #0
     dce:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
     dd0:	2374      	movs	r3, #116	; 0x74
     dd2:	18fb      	adds	r3, r7, r3
     dd4:	0018      	movs	r0, r3
     dd6:	4b78      	ldr	r3, [pc, #480]	; (fb8 <system_clock_init+0x254>)
     dd8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     dda:	2004      	movs	r0, #4
     ddc:	4b77      	ldr	r3, [pc, #476]	; (fbc <system_clock_init+0x258>)
     dde:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
     de0:	2360      	movs	r3, #96	; 0x60
     de2:	18fb      	adds	r3, r7, r3
     de4:	0018      	movs	r0, r3
     de6:	4b76      	ldr	r3, [pc, #472]	; (fc0 <system_clock_init+0x25c>)
     de8:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     dea:	2360      	movs	r3, #96	; 0x60
     dec:	18fb      	adds	r3, r7, r3
     dee:	2204      	movs	r2, #4
     df0:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
     df2:	2360      	movs	r3, #96	; 0x60
     df4:	18fb      	adds	r3, r7, r3
     df6:	2200      	movs	r2, #0
     df8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     dfa:	4b6c      	ldr	r3, [pc, #432]	; (fac <system_clock_init+0x248>)
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	0e9b      	lsrs	r3, r3, #26
     e00:	67fb      	str	r3, [r7, #124]	; 0x7c
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     e02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     e04:	2b3f      	cmp	r3, #63	; 0x3f
     e06:	d101      	bne.n	e0c <system_clock_init+0xa8>
		coarse = 0x1f;
     e08:	231f      	movs	r3, #31
     e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	dfll_conf.coarse_value = coarse;
     e0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     e0e:	b2da      	uxtb	r2, r3
     e10:	2360      	movs	r3, #96	; 0x60
     e12:	18fb      	adds	r3, r7, r3
     e14:	721a      	strb	r2, [r3, #8]
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}


#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     e16:	2360      	movs	r3, #96	; 0x60
     e18:	18fb      	adds	r3, r7, r3
     e1a:	2200      	movs	r2, #0
     e1c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     e1e:	2360      	movs	r3, #96	; 0x60
     e20:	18fb      	adds	r3, r7, r3
     e22:	2200      	movs	r2, #0
     e24:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     e26:	2360      	movs	r3, #96	; 0x60
     e28:	18fb      	adds	r3, r7, r3
     e2a:	2200      	movs	r2, #0
     e2c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     e2e:	2360      	movs	r3, #96	; 0x60
     e30:	18fb      	adds	r3, r7, r3
     e32:	2200      	movs	r2, #0
     e34:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     e36:	2360      	movs	r3, #96	; 0x60
     e38:	18fb      	adds	r3, r7, r3
     e3a:	22b7      	movs	r2, #183	; 0xb7
     e3c:	00d2      	lsls	r2, r2, #3
     e3e:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     e40:	2360      	movs	r3, #96	; 0x60
     e42:	18fb      	adds	r3, r7, r3
     e44:	2207      	movs	r2, #7
     e46:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     e48:	2360      	movs	r3, #96	; 0x60
     e4a:	18fb      	adds	r3, r7, r3
     e4c:	223f      	movs	r2, #63	; 0x3f
     e4e:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     e50:	2360      	movs	r3, #96	; 0x60
     e52:	18fb      	adds	r3, r7, r3
     e54:	0018      	movs	r0, r3
     e56:	4b5b      	ldr	r3, [pc, #364]	; (fc4 <system_clock_init+0x260>)
     e58:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
     e5a:	235c      	movs	r3, #92	; 0x5c
     e5c:	18fb      	adds	r3, r7, r3
     e5e:	0018      	movs	r0, r3
     e60:	4b59      	ldr	r3, [pc, #356]	; (fc8 <system_clock_init+0x264>)
     e62:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e64:	235c      	movs	r3, #92	; 0x5c
     e66:	18fb      	adds	r3, r7, r3
     e68:	2200      	movs	r2, #0
     e6a:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
     e6c:	235c      	movs	r3, #92	; 0x5c
     e6e:	18fb      	adds	r3, r7, r3
     e70:	2201      	movs	r2, #1
     e72:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
     e74:	235c      	movs	r3, #92	; 0x5c
     e76:	18fb      	adds	r3, r7, r3
     e78:	2200      	movs	r2, #0
     e7a:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e7c:	235c      	movs	r3, #92	; 0x5c
     e7e:	18fb      	adds	r3, r7, r3
     e80:	0018      	movs	r0, r3
     e82:	4b52      	ldr	r3, [pc, #328]	; (fcc <system_clock_init+0x268>)
     e84:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e86:	2006      	movs	r0, #6
     e88:	4b4c      	ldr	r3, [pc, #304]	; (fbc <system_clock_init+0x258>)
     e8a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e8c:	4b50      	ldr	r3, [pc, #320]	; (fd0 <system_clock_init+0x26c>)
     e8e:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     e90:	2344      	movs	r3, #68	; 0x44
     e92:	18fb      	adds	r3, r7, r3
     e94:	0018      	movs	r0, r3
     e96:	4b4f      	ldr	r3, [pc, #316]	; (fd4 <system_clock_init+0x270>)
     e98:	4798      	blx	r3
     e9a:	2344      	movs	r3, #68	; 0x44
     e9c:	18fb      	adds	r3, r7, r3
     e9e:	2204      	movs	r2, #4
     ea0:	701a      	strb	r2, [r3, #0]
     ea2:	2344      	movs	r3, #68	; 0x44
     ea4:	18fb      	adds	r3, r7, r3
     ea6:	2201      	movs	r2, #1
     ea8:	605a      	str	r2, [r3, #4]
     eaa:	2344      	movs	r3, #68	; 0x44
     eac:	18fb      	adds	r3, r7, r3
     eae:	2200      	movs	r2, #0
     eb0:	721a      	strb	r2, [r3, #8]
     eb2:	2344      	movs	r3, #68	; 0x44
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	2200      	movs	r2, #0
     eb8:	725a      	strb	r2, [r3, #9]
     eba:	2344      	movs	r3, #68	; 0x44
     ebc:	18fb      	adds	r3, r7, r3
     ebe:	0019      	movs	r1, r3
     ec0:	2001      	movs	r0, #1
     ec2:	4b45      	ldr	r3, [pc, #276]	; (fd8 <system_clock_init+0x274>)
     ec4:	4798      	blx	r3
     ec6:	2001      	movs	r0, #1
     ec8:	4b44      	ldr	r3, [pc, #272]	; (fdc <system_clock_init+0x278>)
     eca:	4798      	blx	r3
     ecc:	232c      	movs	r3, #44	; 0x2c
     ece:	18fb      	adds	r3, r7, r3
     ed0:	0018      	movs	r0, r3
     ed2:	4b40      	ldr	r3, [pc, #256]	; (fd4 <system_clock_init+0x270>)
     ed4:	4798      	blx	r3
     ed6:	232c      	movs	r3, #44	; 0x2c
     ed8:	18fb      	adds	r3, r7, r3
     eda:	2207      	movs	r2, #7
     edc:	701a      	strb	r2, [r3, #0]
     ede:	232c      	movs	r3, #44	; 0x2c
     ee0:	18fb      	adds	r3, r7, r3
     ee2:	2201      	movs	r2, #1
     ee4:	605a      	str	r2, [r3, #4]
     ee6:	232c      	movs	r3, #44	; 0x2c
     ee8:	18fb      	adds	r3, r7, r3
     eea:	2200      	movs	r2, #0
     eec:	721a      	strb	r2, [r3, #8]
     eee:	232c      	movs	r3, #44	; 0x2c
     ef0:	18fb      	adds	r3, r7, r3
     ef2:	2200      	movs	r2, #0
     ef4:	725a      	strb	r2, [r3, #9]
     ef6:	232c      	movs	r3, #44	; 0x2c
     ef8:	18fb      	adds	r3, r7, r3
     efa:	0019      	movs	r1, r3
     efc:	2003      	movs	r0, #3
     efe:	4b36      	ldr	r3, [pc, #216]	; (fd8 <system_clock_init+0x274>)
     f00:	4798      	blx	r3
     f02:	2003      	movs	r0, #3
     f04:	4b35      	ldr	r3, [pc, #212]	; (fdc <system_clock_init+0x278>)
     f06:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
     f08:	2310      	movs	r3, #16
     f0a:	18fb      	adds	r3, r7, r3
     f0c:	0018      	movs	r0, r3
     f0e:	4b34      	ldr	r3, [pc, #208]	; (fe0 <system_clock_init+0x27c>)
     f10:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     f12:	2310      	movs	r3, #16
     f14:	18fb      	adds	r3, r7, r3
     f16:	2201      	movs	r2, #1
     f18:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     f1a:	2310      	movs	r3, #16
     f1c:	18fb      	adds	r3, r7, r3
     f1e:	0019      	movs	r1, r3
     f20:	2000      	movs	r0, #0
     f22:	4b30      	ldr	r3, [pc, #192]	; (fe4 <system_clock_init+0x280>)
     f24:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     f26:	2000      	movs	r0, #0
     f28:	4b2f      	ldr	r3, [pc, #188]	; (fe8 <system_clock_init+0x284>)
     f2a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     f2c:	2007      	movs	r0, #7
     f2e:	4b23      	ldr	r3, [pc, #140]	; (fbc <system_clock_init+0x258>)
     f30:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	2007      	movs	r0, #7
     f36:	4b2d      	ldr	r3, [pc, #180]	; (fec <system_clock_init+0x288>)
     f38:	4798      	blx	r3
     f3a:	0003      	movs	r3, r0
     f3c:	001a      	movs	r2, r3
     f3e:	2301      	movs	r3, #1
     f40:	4053      	eors	r3, r2
     f42:	b2db      	uxtb	r3, r3
     f44:	2b00      	cmp	r3, #0
     f46:	d1f5      	bne.n	f34 <system_clock_init+0x1d0>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
     f48:	2000      	movs	r0, #0
     f4a:	4b29      	ldr	r3, [pc, #164]	; (ff0 <system_clock_init+0x28c>)
     f4c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
     f4e:	2100      	movs	r1, #0
     f50:	2000      	movs	r0, #0
     f52:	4b28      	ldr	r3, [pc, #160]	; (ff4 <system_clock_init+0x290>)
     f54:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
     f56:	2100      	movs	r1, #0
     f58:	2001      	movs	r0, #1
     f5a:	4b26      	ldr	r3, [pc, #152]	; (ff4 <system_clock_init+0x290>)
     f5c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
     f5e:	2100      	movs	r1, #0
     f60:	2002      	movs	r0, #2
     f62:	4b24      	ldr	r3, [pc, #144]	; (ff4 <system_clock_init+0x290>)
     f64:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f66:	1d3b      	adds	r3, r7, #4
     f68:	0018      	movs	r0, r3
     f6a:	4b1a      	ldr	r3, [pc, #104]	; (fd4 <system_clock_init+0x270>)
     f6c:	4798      	blx	r3
     f6e:	1d3b      	adds	r3, r7, #4
     f70:	2206      	movs	r2, #6
     f72:	701a      	strb	r2, [r3, #0]
     f74:	1d3b      	adds	r3, r7, #4
     f76:	2201      	movs	r2, #1
     f78:	605a      	str	r2, [r3, #4]
     f7a:	1d3b      	adds	r3, r7, #4
     f7c:	2200      	movs	r2, #0
     f7e:	721a      	strb	r2, [r3, #8]
     f80:	1d3b      	adds	r3, r7, #4
     f82:	2200      	movs	r2, #0
     f84:	725a      	strb	r2, [r3, #9]
     f86:	1d3b      	adds	r3, r7, #4
     f88:	0019      	movs	r1, r3
     f8a:	2000      	movs	r0, #0
     f8c:	4b12      	ldr	r3, [pc, #72]	; (fd8 <system_clock_init+0x274>)
     f8e:	4798      	blx	r3
     f90:	2000      	movs	r0, #0
     f92:	4b12      	ldr	r3, [pc, #72]	; (fdc <system_clock_init+0x278>)
     f94:	4798      	blx	r3
#endif
}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	46bd      	mov	sp, r7
     f9a:	b020      	add	sp, #128	; 0x80
     f9c:	bd80      	pop	{r7, pc}
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	40000800 	.word	0x40000800
     fa4:	00000955 	.word	0x00000955
     fa8:	00000d2d 	.word	0x00000d2d
     fac:	00806024 	.word	0x00806024
     fb0:	ff80ffff 	.word	0xff80ffff
     fb4:	00000839 	.word	0x00000839
     fb8:	00000a61 	.word	0x00000a61
     fbc:	00000bfd 	.word	0x00000bfd
     fc0:	0000088f 	.word	0x0000088f
     fc4:	00000b2d 	.word	0x00000b2d
     fc8:	0000086d 	.word	0x0000086d
     fcc:	000009e9 	.word	0x000009e9
     fd0:	0000109d 	.word	0x0000109d
     fd4:	000007f5 	.word	0x000007f5
     fd8:	000010cd 	.word	0x000010cd
     fdc:	000011f1 	.word	0x000011f1
     fe0:	00000823 	.word	0x00000823
     fe4:	0000124d 	.word	0x0000124d
     fe8:	00001291 	.word	0x00001291
     fec:	00000ca9 	.word	0x00000ca9
     ff0:	000008e1 	.word	0x000008e1
     ff4:	00000901 	.word	0x00000901

00000ff8 <system_apb_clock_set_mask>:
{
     ff8:	b580      	push	{r7, lr}
     ffa:	b082      	sub	sp, #8
     ffc:	af00      	add	r7, sp, #0
     ffe:	0002      	movs	r2, r0
    1000:	6039      	str	r1, [r7, #0]
    1002:	1dfb      	adds	r3, r7, #7
    1004:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1006:	1dfb      	adds	r3, r7, #7
    1008:	781b      	ldrb	r3, [r3, #0]
    100a:	2b01      	cmp	r3, #1
    100c:	d00a      	beq.n	1024 <system_apb_clock_set_mask+0x2c>
    100e:	2b02      	cmp	r3, #2
    1010:	d00f      	beq.n	1032 <system_apb_clock_set_mask+0x3a>
    1012:	2b00      	cmp	r3, #0
    1014:	d114      	bne.n	1040 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1016:	4b0e      	ldr	r3, [pc, #56]	; (1050 <system_apb_clock_set_mask+0x58>)
    1018:	4a0d      	ldr	r2, [pc, #52]	; (1050 <system_apb_clock_set_mask+0x58>)
    101a:	6991      	ldr	r1, [r2, #24]
    101c:	683a      	ldr	r2, [r7, #0]
    101e:	430a      	orrs	r2, r1
    1020:	619a      	str	r2, [r3, #24]
			break;
    1022:	e00f      	b.n	1044 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1024:	4b0a      	ldr	r3, [pc, #40]	; (1050 <system_apb_clock_set_mask+0x58>)
    1026:	4a0a      	ldr	r2, [pc, #40]	; (1050 <system_apb_clock_set_mask+0x58>)
    1028:	69d1      	ldr	r1, [r2, #28]
    102a:	683a      	ldr	r2, [r7, #0]
    102c:	430a      	orrs	r2, r1
    102e:	61da      	str	r2, [r3, #28]
			break;
    1030:	e008      	b.n	1044 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1032:	4b07      	ldr	r3, [pc, #28]	; (1050 <system_apb_clock_set_mask+0x58>)
    1034:	4a06      	ldr	r2, [pc, #24]	; (1050 <system_apb_clock_set_mask+0x58>)
    1036:	6a11      	ldr	r1, [r2, #32]
    1038:	683a      	ldr	r2, [r7, #0]
    103a:	430a      	orrs	r2, r1
    103c:	621a      	str	r2, [r3, #32]
			break;
    103e:	e001      	b.n	1044 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1040:	2317      	movs	r3, #23
    1042:	e000      	b.n	1046 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1044:	2300      	movs	r3, #0
}
    1046:	0018      	movs	r0, r3
    1048:	46bd      	mov	sp, r7
    104a:	b002      	add	sp, #8
    104c:	bd80      	pop	{r7, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	40000400 	.word	0x40000400

00001054 <system_interrupt_enter_critical_section>:
{
    1054:	b580      	push	{r7, lr}
    1056:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1058:	4b02      	ldr	r3, [pc, #8]	; (1064 <system_interrupt_enter_critical_section+0x10>)
    105a:	4798      	blx	r3
}
    105c:	46c0      	nop			; (mov r8, r8)
    105e:	46bd      	mov	sp, r7
    1060:	bd80      	pop	{r7, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	000000ed 	.word	0x000000ed

00001068 <system_interrupt_leave_critical_section>:
{
    1068:	b580      	push	{r7, lr}
    106a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    106c:	4b02      	ldr	r3, [pc, #8]	; (1078 <system_interrupt_leave_critical_section+0x10>)
    106e:	4798      	blx	r3
}
    1070:	46c0      	nop			; (mov r8, r8)
    1072:	46bd      	mov	sp, r7
    1074:	bd80      	pop	{r7, pc}
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	00000141 	.word	0x00000141

0000107c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    107c:	b580      	push	{r7, lr}
    107e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1080:	4b05      	ldr	r3, [pc, #20]	; (1098 <system_gclk_is_syncing+0x1c>)
    1082:	785b      	ldrb	r3, [r3, #1]
    1084:	b2db      	uxtb	r3, r3
    1086:	b25b      	sxtb	r3, r3
    1088:	2b00      	cmp	r3, #0
    108a:	da01      	bge.n	1090 <system_gclk_is_syncing+0x14>
		return true;
    108c:	2301      	movs	r3, #1
    108e:	e000      	b.n	1092 <system_gclk_is_syncing+0x16>
	}

	return false;
    1090:	2300      	movs	r3, #0
}
    1092:	0018      	movs	r0, r3
    1094:	46bd      	mov	sp, r7
    1096:	bd80      	pop	{r7, pc}
    1098:	40000c00 	.word	0x40000c00

0000109c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    109c:	b580      	push	{r7, lr}
    109e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    10a0:	2108      	movs	r1, #8
    10a2:	2000      	movs	r0, #0
    10a4:	4b07      	ldr	r3, [pc, #28]	; (10c4 <system_gclk_init+0x28>)
    10a6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10a8:	4b07      	ldr	r3, [pc, #28]	; (10c8 <system_gclk_init+0x2c>)
    10aa:	2201      	movs	r2, #1
    10ac:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	4b05      	ldr	r3, [pc, #20]	; (10c8 <system_gclk_init+0x2c>)
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	b2db      	uxtb	r3, r3
    10b6:	001a      	movs	r2, r3
    10b8:	2301      	movs	r3, #1
    10ba:	4013      	ands	r3, r2
    10bc:	d1f8      	bne.n	10b0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	46bd      	mov	sp, r7
    10c2:	bd80      	pop	{r7, pc}
    10c4:	00000ff9 	.word	0x00000ff9
    10c8:	40000c00 	.word	0x40000c00

000010cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    10cc:	b580      	push	{r7, lr}
    10ce:	b086      	sub	sp, #24
    10d0:	af00      	add	r7, sp, #0
    10d2:	0002      	movs	r2, r0
    10d4:	6039      	str	r1, [r7, #0]
    10d6:	1dfb      	adds	r3, r7, #7
    10d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    10da:	1dfb      	adds	r3, r7, #7
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    10e0:	1dfb      	adds	r3, r7, #7
    10e2:	781b      	ldrb	r3, [r3, #0]
    10e4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    10e6:	683b      	ldr	r3, [r7, #0]
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	021b      	lsls	r3, r3, #8
    10ec:	001a      	movs	r2, r3
    10ee:	697b      	ldr	r3, [r7, #20]
    10f0:	4313      	orrs	r3, r2
    10f2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    10f4:	683b      	ldr	r3, [r7, #0]
    10f6:	785b      	ldrb	r3, [r3, #1]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d004      	beq.n	1106 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    10fc:	697b      	ldr	r3, [r7, #20]
    10fe:	2280      	movs	r2, #128	; 0x80
    1100:	02d2      	lsls	r2, r2, #11
    1102:	4313      	orrs	r3, r2
    1104:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1106:	683b      	ldr	r3, [r7, #0]
    1108:	7a5b      	ldrb	r3, [r3, #9]
    110a:	2b00      	cmp	r3, #0
    110c:	d004      	beq.n	1118 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    110e:	697b      	ldr	r3, [r7, #20]
    1110:	2280      	movs	r2, #128	; 0x80
    1112:	0312      	lsls	r2, r2, #12
    1114:	4313      	orrs	r3, r2
    1116:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1118:	683b      	ldr	r3, [r7, #0]
    111a:	685b      	ldr	r3, [r3, #4]
    111c:	2b01      	cmp	r3, #1
    111e:	d92c      	bls.n	117a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1120:	683b      	ldr	r3, [r7, #0]
    1122:	685a      	ldr	r2, [r3, #4]
    1124:	683b      	ldr	r3, [r7, #0]
    1126:	685b      	ldr	r3, [r3, #4]
    1128:	3b01      	subs	r3, #1
    112a:	4013      	ands	r3, r2
    112c:	d11a      	bne.n	1164 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    112e:	2300      	movs	r3, #0
    1130:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1132:	2302      	movs	r3, #2
    1134:	60bb      	str	r3, [r7, #8]
    1136:	e005      	b.n	1144 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1138:	68fb      	ldr	r3, [r7, #12]
    113a:	3301      	adds	r3, #1
    113c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    113e:	68bb      	ldr	r3, [r7, #8]
    1140:	005b      	lsls	r3, r3, #1
    1142:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    1144:	683b      	ldr	r3, [r7, #0]
    1146:	685a      	ldr	r2, [r3, #4]
    1148:	68bb      	ldr	r3, [r7, #8]
    114a:	429a      	cmp	r2, r3
    114c:	d8f4      	bhi.n	1138 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    114e:	68fb      	ldr	r3, [r7, #12]
    1150:	021b      	lsls	r3, r3, #8
    1152:	693a      	ldr	r2, [r7, #16]
    1154:	4313      	orrs	r3, r2
    1156:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1158:	697b      	ldr	r3, [r7, #20]
    115a:	2280      	movs	r2, #128	; 0x80
    115c:	0352      	lsls	r2, r2, #13
    115e:	4313      	orrs	r3, r2
    1160:	617b      	str	r3, [r7, #20]
    1162:	e00a      	b.n	117a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1164:	683b      	ldr	r3, [r7, #0]
    1166:	685b      	ldr	r3, [r3, #4]
    1168:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    116a:	693a      	ldr	r2, [r7, #16]
    116c:	4313      	orrs	r3, r2
    116e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1170:	697b      	ldr	r3, [r7, #20]
    1172:	2280      	movs	r2, #128	; 0x80
    1174:	0292      	lsls	r2, r2, #10
    1176:	4313      	orrs	r3, r2
    1178:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    117a:	683b      	ldr	r3, [r7, #0]
    117c:	7a1b      	ldrb	r3, [r3, #8]
    117e:	2b00      	cmp	r3, #0
    1180:	d004      	beq.n	118c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1182:	697b      	ldr	r3, [r7, #20]
    1184:	2280      	movs	r2, #128	; 0x80
    1186:	0392      	lsls	r2, r2, #14
    1188:	4313      	orrs	r3, r2
    118a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    118c:	46c0      	nop			; (mov r8, r8)
    118e:	4b13      	ldr	r3, [pc, #76]	; (11dc <system_gclk_gen_set_config+0x110>)
    1190:	4798      	blx	r3
    1192:	1e03      	subs	r3, r0, #0
    1194:	d1fb      	bne.n	118e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1196:	4b12      	ldr	r3, [pc, #72]	; (11e0 <system_gclk_gen_set_config+0x114>)
    1198:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    119a:	4a12      	ldr	r2, [pc, #72]	; (11e4 <system_gclk_gen_set_config+0x118>)
    119c:	1dfb      	adds	r3, r7, #7
    119e:	781b      	ldrb	r3, [r3, #0]
    11a0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	4b0d      	ldr	r3, [pc, #52]	; (11dc <system_gclk_gen_set_config+0x110>)
    11a6:	4798      	blx	r3
    11a8:	1e03      	subs	r3, r0, #0
    11aa:	d1fb      	bne.n	11a4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    11ac:	4b0e      	ldr	r3, [pc, #56]	; (11e8 <system_gclk_gen_set_config+0x11c>)
    11ae:	693a      	ldr	r2, [r7, #16]
    11b0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	4b09      	ldr	r3, [pc, #36]	; (11dc <system_gclk_gen_set_config+0x110>)
    11b6:	4798      	blx	r3
    11b8:	1e03      	subs	r3, r0, #0
    11ba:	d1fb      	bne.n	11b4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    11bc:	4b0a      	ldr	r3, [pc, #40]	; (11e8 <system_gclk_gen_set_config+0x11c>)
    11be:	4a0a      	ldr	r2, [pc, #40]	; (11e8 <system_gclk_gen_set_config+0x11c>)
    11c0:	6851      	ldr	r1, [r2, #4]
    11c2:	2280      	movs	r2, #128	; 0x80
    11c4:	0252      	lsls	r2, r2, #9
    11c6:	4011      	ands	r1, r2
    11c8:	697a      	ldr	r2, [r7, #20]
    11ca:	430a      	orrs	r2, r1
    11cc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    11ce:	4b07      	ldr	r3, [pc, #28]	; (11ec <system_gclk_gen_set_config+0x120>)
    11d0:	4798      	blx	r3
}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	46bd      	mov	sp, r7
    11d6:	b006      	add	sp, #24
    11d8:	bd80      	pop	{r7, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	0000107d 	.word	0x0000107d
    11e0:	00001055 	.word	0x00001055
    11e4:	40000c08 	.word	0x40000c08
    11e8:	40000c00 	.word	0x40000c00
    11ec:	00001069 	.word	0x00001069

000011f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    11f0:	b580      	push	{r7, lr}
    11f2:	b082      	sub	sp, #8
    11f4:	af00      	add	r7, sp, #0
    11f6:	0002      	movs	r2, r0
    11f8:	1dfb      	adds	r3, r7, #7
    11fa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    11fc:	46c0      	nop			; (mov r8, r8)
    11fe:	4b0e      	ldr	r3, [pc, #56]	; (1238 <system_gclk_gen_enable+0x48>)
    1200:	4798      	blx	r3
    1202:	1e03      	subs	r3, r0, #0
    1204:	d1fb      	bne.n	11fe <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1206:	4b0d      	ldr	r3, [pc, #52]	; (123c <system_gclk_gen_enable+0x4c>)
    1208:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    120a:	4a0d      	ldr	r2, [pc, #52]	; (1240 <system_gclk_gen_enable+0x50>)
    120c:	1dfb      	adds	r3, r7, #7
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	4b08      	ldr	r3, [pc, #32]	; (1238 <system_gclk_gen_enable+0x48>)
    1216:	4798      	blx	r3
    1218:	1e03      	subs	r3, r0, #0
    121a:	d1fb      	bne.n	1214 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    121c:	4b09      	ldr	r3, [pc, #36]	; (1244 <system_gclk_gen_enable+0x54>)
    121e:	4a09      	ldr	r2, [pc, #36]	; (1244 <system_gclk_gen_enable+0x54>)
    1220:	6852      	ldr	r2, [r2, #4]
    1222:	2180      	movs	r1, #128	; 0x80
    1224:	0249      	lsls	r1, r1, #9
    1226:	430a      	orrs	r2, r1
    1228:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    122a:	4b07      	ldr	r3, [pc, #28]	; (1248 <system_gclk_gen_enable+0x58>)
    122c:	4798      	blx	r3
}
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	46bd      	mov	sp, r7
    1232:	b002      	add	sp, #8
    1234:	bd80      	pop	{r7, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	0000107d 	.word	0x0000107d
    123c:	00001055 	.word	0x00001055
    1240:	40000c04 	.word	0x40000c04
    1244:	40000c00 	.word	0x40000c00
    1248:	00001069 	.word	0x00001069

0000124c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    124c:	b580      	push	{r7, lr}
    124e:	b084      	sub	sp, #16
    1250:	af00      	add	r7, sp, #0
    1252:	0002      	movs	r2, r0
    1254:	6039      	str	r1, [r7, #0]
    1256:	1dfb      	adds	r3, r7, #7
    1258:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    125a:	1dfb      	adds	r3, r7, #7
    125c:	781b      	ldrb	r3, [r3, #0]
    125e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1260:	683b      	ldr	r3, [r7, #0]
    1262:	781b      	ldrb	r3, [r3, #0]
    1264:	021b      	lsls	r3, r3, #8
    1266:	001a      	movs	r2, r3
    1268:	68fb      	ldr	r3, [r7, #12]
    126a:	4313      	orrs	r3, r2
    126c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    126e:	1dfb      	adds	r3, r7, #7
    1270:	781b      	ldrb	r3, [r3, #0]
    1272:	0018      	movs	r0, r3
    1274:	4b04      	ldr	r3, [pc, #16]	; (1288 <system_gclk_chan_set_config+0x3c>)
    1276:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1278:	4b04      	ldr	r3, [pc, #16]	; (128c <system_gclk_chan_set_config+0x40>)
    127a:	68fa      	ldr	r2, [r7, #12]
    127c:	b292      	uxth	r2, r2
    127e:	805a      	strh	r2, [r3, #2]
}
    1280:	46c0      	nop			; (mov r8, r8)
    1282:	46bd      	mov	sp, r7
    1284:	b004      	add	sp, #16
    1286:	bd80      	pop	{r7, pc}
    1288:	000012d9 	.word	0x000012d9
    128c:	40000c00 	.word	0x40000c00

00001290 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1290:	b580      	push	{r7, lr}
    1292:	b082      	sub	sp, #8
    1294:	af00      	add	r7, sp, #0
    1296:	0002      	movs	r2, r0
    1298:	1dfb      	adds	r3, r7, #7
    129a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    129c:	4b0a      	ldr	r3, [pc, #40]	; (12c8 <system_gclk_chan_enable+0x38>)
    129e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12a0:	4a0a      	ldr	r2, [pc, #40]	; (12cc <system_gclk_chan_enable+0x3c>)
    12a2:	1dfb      	adds	r3, r7, #7
    12a4:	781b      	ldrb	r3, [r3, #0]
    12a6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    12a8:	4909      	ldr	r1, [pc, #36]	; (12d0 <system_gclk_chan_enable+0x40>)
    12aa:	4b09      	ldr	r3, [pc, #36]	; (12d0 <system_gclk_chan_enable+0x40>)
    12ac:	885b      	ldrh	r3, [r3, #2]
    12ae:	b29b      	uxth	r3, r3
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	01d2      	lsls	r2, r2, #7
    12b4:	4313      	orrs	r3, r2
    12b6:	b29b      	uxth	r3, r3
    12b8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    12ba:	4b06      	ldr	r3, [pc, #24]	; (12d4 <system_gclk_chan_enable+0x44>)
    12bc:	4798      	blx	r3
}
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	46bd      	mov	sp, r7
    12c2:	b002      	add	sp, #8
    12c4:	bd80      	pop	{r7, pc}
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	00001055 	.word	0x00001055
    12cc:	40000c02 	.word	0x40000c02
    12d0:	40000c00 	.word	0x40000c00
    12d4:	00001069 	.word	0x00001069

000012d8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    12d8:	b580      	push	{r7, lr}
    12da:	b084      	sub	sp, #16
    12dc:	af00      	add	r7, sp, #0
    12de:	0002      	movs	r2, r0
    12e0:	1dfb      	adds	r3, r7, #7
    12e2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    12e4:	4b1c      	ldr	r3, [pc, #112]	; (1358 <system_gclk_chan_disable+0x80>)
    12e6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12e8:	4a1c      	ldr	r2, [pc, #112]	; (135c <system_gclk_chan_disable+0x84>)
    12ea:	1dfb      	adds	r3, r7, #7
    12ec:	781b      	ldrb	r3, [r3, #0]
    12ee:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    12f0:	4b1b      	ldr	r3, [pc, #108]	; (1360 <system_gclk_chan_disable+0x88>)
    12f2:	885b      	ldrh	r3, [r3, #2]
    12f4:	051b      	lsls	r3, r3, #20
    12f6:	0f1b      	lsrs	r3, r3, #28
    12f8:	b2db      	uxtb	r3, r3
    12fa:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    12fc:	4a18      	ldr	r2, [pc, #96]	; (1360 <system_gclk_chan_disable+0x88>)
    12fe:	8853      	ldrh	r3, [r2, #2]
    1300:	4918      	ldr	r1, [pc, #96]	; (1364 <system_gclk_chan_disable+0x8c>)
    1302:	400b      	ands	r3, r1
    1304:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1306:	4a16      	ldr	r2, [pc, #88]	; (1360 <system_gclk_chan_disable+0x88>)
    1308:	4b15      	ldr	r3, [pc, #84]	; (1360 <system_gclk_chan_disable+0x88>)
    130a:	885b      	ldrh	r3, [r3, #2]
    130c:	b29b      	uxth	r3, r3
    130e:	4916      	ldr	r1, [pc, #88]	; (1368 <system_gclk_chan_disable+0x90>)
    1310:	400b      	ands	r3, r1
    1312:	b29b      	uxth	r3, r3
    1314:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	4b11      	ldr	r3, [pc, #68]	; (1360 <system_gclk_chan_disable+0x88>)
    131a:	885b      	ldrh	r3, [r3, #2]
    131c:	b29b      	uxth	r3, r3
    131e:	001a      	movs	r2, r3
    1320:	2380      	movs	r3, #128	; 0x80
    1322:	01db      	lsls	r3, r3, #7
    1324:	4013      	ands	r3, r2
    1326:	d1f7      	bne.n	1318 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1328:	4a0d      	ldr	r2, [pc, #52]	; (1360 <system_gclk_chan_disable+0x88>)
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	b2db      	uxtb	r3, r3
    132e:	1c19      	adds	r1, r3, #0
    1330:	230f      	movs	r3, #15
    1332:	400b      	ands	r3, r1
    1334:	b2d9      	uxtb	r1, r3
    1336:	8853      	ldrh	r3, [r2, #2]
    1338:	1c08      	adds	r0, r1, #0
    133a:	210f      	movs	r1, #15
    133c:	4001      	ands	r1, r0
    133e:	0208      	lsls	r0, r1, #8
    1340:	4908      	ldr	r1, [pc, #32]	; (1364 <system_gclk_chan_disable+0x8c>)
    1342:	400b      	ands	r3, r1
    1344:	1c19      	adds	r1, r3, #0
    1346:	1c03      	adds	r3, r0, #0
    1348:	430b      	orrs	r3, r1
    134a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    134c:	4b07      	ldr	r3, [pc, #28]	; (136c <system_gclk_chan_disable+0x94>)
    134e:	4798      	blx	r3
}
    1350:	46c0      	nop			; (mov r8, r8)
    1352:	46bd      	mov	sp, r7
    1354:	b004      	add	sp, #16
    1356:	bd80      	pop	{r7, pc}
    1358:	00001055 	.word	0x00001055
    135c:	40000c02 	.word	0x40000c02
    1360:	40000c00 	.word	0x40000c00
    1364:	fffff0ff 	.word	0xfffff0ff
    1368:	ffffbfff 	.word	0xffffbfff
    136c:	00001069 	.word	0x00001069

00001370 <system_pinmux_get_group_from_gpio_pin>:
{
    1370:	b580      	push	{r7, lr}
    1372:	b084      	sub	sp, #16
    1374:	af00      	add	r7, sp, #0
    1376:	0002      	movs	r2, r0
    1378:	1dfb      	adds	r3, r7, #7
    137a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    137c:	230f      	movs	r3, #15
    137e:	18fb      	adds	r3, r7, r3
    1380:	1dfa      	adds	r2, r7, #7
    1382:	7812      	ldrb	r2, [r2, #0]
    1384:	09d2      	lsrs	r2, r2, #7
    1386:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1388:	230e      	movs	r3, #14
    138a:	18fb      	adds	r3, r7, r3
    138c:	1dfa      	adds	r2, r7, #7
    138e:	7812      	ldrb	r2, [r2, #0]
    1390:	0952      	lsrs	r2, r2, #5
    1392:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1394:	4b0d      	ldr	r3, [pc, #52]	; (13cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1396:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1398:	230f      	movs	r3, #15
    139a:	18fb      	adds	r3, r7, r3
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	2b00      	cmp	r3, #0
    13a0:	d10f      	bne.n	13c2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    13a2:	230f      	movs	r3, #15
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	781b      	ldrb	r3, [r3, #0]
    13a8:	009b      	lsls	r3, r3, #2
    13aa:	2210      	movs	r2, #16
    13ac:	4694      	mov	ip, r2
    13ae:	44bc      	add	ip, r7
    13b0:	4463      	add	r3, ip
    13b2:	3b08      	subs	r3, #8
    13b4:	681a      	ldr	r2, [r3, #0]
    13b6:	230e      	movs	r3, #14
    13b8:	18fb      	adds	r3, r7, r3
    13ba:	781b      	ldrb	r3, [r3, #0]
    13bc:	01db      	lsls	r3, r3, #7
    13be:	18d3      	adds	r3, r2, r3
    13c0:	e000      	b.n	13c4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    13c2:	2300      	movs	r3, #0
}
    13c4:	0018      	movs	r0, r3
    13c6:	46bd      	mov	sp, r7
    13c8:	b004      	add	sp, #16
    13ca:	bd80      	pop	{r7, pc}
    13cc:	41004400 	.word	0x41004400

000013d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	b088      	sub	sp, #32
    13d4:	af00      	add	r7, sp, #0
    13d6:	60f8      	str	r0, [r7, #12]
    13d8:	60b9      	str	r1, [r7, #8]
    13da:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    13dc:	2300      	movs	r3, #0
    13de:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    13e0:	687b      	ldr	r3, [r7, #4]
    13e2:	78db      	ldrb	r3, [r3, #3]
    13e4:	2201      	movs	r2, #1
    13e6:	4053      	eors	r3, r2
    13e8:	b2db      	uxtb	r3, r3
    13ea:	2b00      	cmp	r3, #0
    13ec:	d035      	beq.n	145a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    13ee:	687b      	ldr	r3, [r7, #4]
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	2b80      	cmp	r3, #128	; 0x80
    13f4:	d00b      	beq.n	140e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    13f6:	69fb      	ldr	r3, [r7, #28]
    13f8:	2280      	movs	r2, #128	; 0x80
    13fa:	0252      	lsls	r2, r2, #9
    13fc:	4313      	orrs	r3, r2
    13fe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	781b      	ldrb	r3, [r3, #0]
    1404:	061b      	lsls	r3, r3, #24
    1406:	001a      	movs	r2, r3
    1408:	69fb      	ldr	r3, [r7, #28]
    140a:	4313      	orrs	r3, r2
    140c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    140e:	687b      	ldr	r3, [r7, #4]
    1410:	785b      	ldrb	r3, [r3, #1]
    1412:	2b00      	cmp	r3, #0
    1414:	d003      	beq.n	141e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    141a:	2b02      	cmp	r3, #2
    141c:	d110      	bne.n	1440 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    141e:	69fb      	ldr	r3, [r7, #28]
    1420:	2280      	movs	r2, #128	; 0x80
    1422:	0292      	lsls	r2, r2, #10
    1424:	4313      	orrs	r3, r2
    1426:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	789b      	ldrb	r3, [r3, #2]
    142c:	2b00      	cmp	r3, #0
    142e:	d004      	beq.n	143a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1430:	69fb      	ldr	r3, [r7, #28]
    1432:	2280      	movs	r2, #128	; 0x80
    1434:	02d2      	lsls	r2, r2, #11
    1436:	4313      	orrs	r3, r2
    1438:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    143a:	68fb      	ldr	r3, [r7, #12]
    143c:	68ba      	ldr	r2, [r7, #8]
    143e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1440:	687b      	ldr	r3, [r7, #4]
    1442:	785b      	ldrb	r3, [r3, #1]
    1444:	2b01      	cmp	r3, #1
    1446:	d003      	beq.n	1450 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    144c:	2b02      	cmp	r3, #2
    144e:	d107      	bne.n	1460 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1450:	69fb      	ldr	r3, [r7, #28]
    1452:	4a22      	ldr	r2, [pc, #136]	; (14dc <_system_pinmux_config+0x10c>)
    1454:	4013      	ands	r3, r2
    1456:	61fb      	str	r3, [r7, #28]
    1458:	e002      	b.n	1460 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    145a:	68fb      	ldr	r3, [r7, #12]
    145c:	68ba      	ldr	r2, [r7, #8]
    145e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1460:	68bb      	ldr	r3, [r7, #8]
    1462:	041b      	lsls	r3, r3, #16
    1464:	0c1b      	lsrs	r3, r3, #16
    1466:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1468:	68bb      	ldr	r3, [r7, #8]
    146a:	0c1b      	lsrs	r3, r3, #16
    146c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    146e:	69ba      	ldr	r2, [r7, #24]
    1470:	69fb      	ldr	r3, [r7, #28]
    1472:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1474:	22a0      	movs	r2, #160	; 0xa0
    1476:	05d2      	lsls	r2, r2, #23
    1478:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    147a:	68fb      	ldr	r3, [r7, #12]
    147c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    147e:	697a      	ldr	r2, [r7, #20]
    1480:	69fb      	ldr	r3, [r7, #28]
    1482:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1484:	22d0      	movs	r2, #208	; 0xd0
    1486:	0612      	lsls	r2, r2, #24
    1488:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    148a:	68fb      	ldr	r3, [r7, #12]
    148c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	78db      	ldrb	r3, [r3, #3]
    1492:	2201      	movs	r2, #1
    1494:	4053      	eors	r3, r2
    1496:	b2db      	uxtb	r3, r3
    1498:	2b00      	cmp	r3, #0
    149a:	d01a      	beq.n	14d2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    149c:	69fa      	ldr	r2, [r7, #28]
    149e:	2380      	movs	r3, #128	; 0x80
    14a0:	02db      	lsls	r3, r3, #11
    14a2:	4013      	ands	r3, r2
    14a4:	d00a      	beq.n	14bc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    14a6:	687b      	ldr	r3, [r7, #4]
    14a8:	789b      	ldrb	r3, [r3, #2]
    14aa:	2b01      	cmp	r3, #1
    14ac:	d103      	bne.n	14b6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	68ba      	ldr	r2, [r7, #8]
    14b2:	619a      	str	r2, [r3, #24]
    14b4:	e002      	b.n	14bc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	68ba      	ldr	r2, [r7, #8]
    14ba:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	785b      	ldrb	r3, [r3, #1]
    14c0:	2b01      	cmp	r3, #1
    14c2:	d003      	beq.n	14cc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    14c8:	2b02      	cmp	r3, #2
    14ca:	d102      	bne.n	14d2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    14cc:	68fb      	ldr	r3, [r7, #12]
    14ce:	68ba      	ldr	r2, [r7, #8]
    14d0:	609a      	str	r2, [r3, #8]
		}
	}
}
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	46bd      	mov	sp, r7
    14d6:	b008      	add	sp, #32
    14d8:	bd80      	pop	{r7, pc}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	fffbffff 	.word	0xfffbffff

000014e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	b084      	sub	sp, #16
    14e4:	af00      	add	r7, sp, #0
    14e6:	0002      	movs	r2, r0
    14e8:	6039      	str	r1, [r7, #0]
    14ea:	1dfb      	adds	r3, r7, #7
    14ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    14ee:	1dfb      	adds	r3, r7, #7
    14f0:	781b      	ldrb	r3, [r3, #0]
    14f2:	0018      	movs	r0, r3
    14f4:	4b0a      	ldr	r3, [pc, #40]	; (1520 <system_pinmux_pin_set_config+0x40>)
    14f6:	4798      	blx	r3
    14f8:	0003      	movs	r3, r0
    14fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    14fc:	1dfb      	adds	r3, r7, #7
    14fe:	781b      	ldrb	r3, [r3, #0]
    1500:	221f      	movs	r2, #31
    1502:	4013      	ands	r3, r2
    1504:	2201      	movs	r2, #1
    1506:	409a      	lsls	r2, r3
    1508:	0013      	movs	r3, r2
    150a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    150c:	683a      	ldr	r2, [r7, #0]
    150e:	68b9      	ldr	r1, [r7, #8]
    1510:	68fb      	ldr	r3, [r7, #12]
    1512:	0018      	movs	r0, r3
    1514:	4b03      	ldr	r3, [pc, #12]	; (1524 <system_pinmux_pin_set_config+0x44>)
    1516:	4798      	blx	r3
}
    1518:	46c0      	nop			; (mov r8, r8)
    151a:	46bd      	mov	sp, r7
    151c:	b004      	add	sp, #16
    151e:	bd80      	pop	{r7, pc}
    1520:	00001371 	.word	0x00001371
    1524:	000013d1 	.word	0x000013d1

00001528 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1528:	b580      	push	{r7, lr}
    152a:	af00      	add	r7, sp, #0
	return;
    152c:	46c0      	nop			; (mov r8, r8)
}
    152e:	46bd      	mov	sp, r7
    1530:	bd80      	pop	{r7, pc}
	...

00001534 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1534:	b580      	push	{r7, lr}
    1536:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <system_init+0x20>)
    153a:	4798      	blx	r3
	/* Initialize board hardware */
	system_board_init();
    153c:	4b06      	ldr	r3, [pc, #24]	; (1558 <system_init+0x24>)
    153e:	4798      	blx	r3
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1540:	4b06      	ldr	r3, [pc, #24]	; (155c <system_init+0x28>)
    1542:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1544:	4b06      	ldr	r3, [pc, #24]	; (1560 <system_init+0x2c>)
    1546:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1548:	4b06      	ldr	r3, [pc, #24]	; (1564 <system_init+0x30>)
    154a:	4798      	blx	r3
}
    154c:	46c0      	nop			; (mov r8, r8)
    154e:	46bd      	mov	sp, r7
    1550:	bd80      	pop	{r7, pc}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	00000d65 	.word	0x00000d65
    1558:	0000027d 	.word	0x0000027d
    155c:	00000391 	.word	0x00000391
    1560:	000005e1 	.word	0x000005e1
    1564:	00001529 	.word	0x00001529

00001568 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1568:	b580      	push	{r7, lr}
    156a:	af00      	add	r7, sp, #0
    156c:	2000      	movs	r0, #0
    156e:	4b02      	ldr	r3, [pc, #8]	; (1578 <TCC0_Handler+0x10>)
    1570:	4798      	blx	r3
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	46bd      	mov	sp, r7
    1576:	bd80      	pop	{r7, pc}
    1578:	0000157d 	.word	0x0000157d

0000157c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    157c:	b580      	push	{r7, lr}
    157e:	b086      	sub	sp, #24
    1580:	af00      	add	r7, sp, #0
    1582:	0002      	movs	r2, r0
    1584:	1dfb      	adds	r3, r7, #7
    1586:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    1588:	1dfb      	adds	r3, r7, #7
    158a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    158c:	4b18      	ldr	r3, [pc, #96]	; (15f0 <_tcc_interrupt_handler+0x74>)
    158e:	0092      	lsls	r2, r2, #2
    1590:	58d3      	ldr	r3, [r2, r3]
    1592:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1594:	693b      	ldr	r3, [r7, #16]
    1596:	681b      	ldr	r3, [r3, #0]
    1598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    159a:	693b      	ldr	r3, [r7, #16]
    159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    159e:	401a      	ands	r2, r3
			module->enable_callback_mask);
    15a0:	693b      	ldr	r3, [r7, #16]
    15a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    15a4:	4013      	ands	r3, r2
    15a6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    15a8:	2300      	movs	r3, #0
    15aa:	617b      	str	r3, [r7, #20]
    15ac:	e019      	b.n	15e2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    15ae:	4b11      	ldr	r3, [pc, #68]	; (15f4 <_tcc_interrupt_handler+0x78>)
    15b0:	697a      	ldr	r2, [r7, #20]
    15b2:	0092      	lsls	r2, r2, #2
    15b4:	58d3      	ldr	r3, [r2, r3]
    15b6:	68fa      	ldr	r2, [r7, #12]
    15b8:	4013      	ands	r3, r2
    15ba:	d00f      	beq.n	15dc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    15bc:	693a      	ldr	r2, [r7, #16]
    15be:	697b      	ldr	r3, [r7, #20]
    15c0:	009b      	lsls	r3, r3, #2
    15c2:	18d3      	adds	r3, r2, r3
    15c4:	3304      	adds	r3, #4
    15c6:	681b      	ldr	r3, [r3, #0]
    15c8:	693a      	ldr	r2, [r7, #16]
    15ca:	0010      	movs	r0, r2
    15cc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    15ce:	693b      	ldr	r3, [r7, #16]
    15d0:	681b      	ldr	r3, [r3, #0]
    15d2:	4a08      	ldr	r2, [pc, #32]	; (15f4 <_tcc_interrupt_handler+0x78>)
    15d4:	6979      	ldr	r1, [r7, #20]
    15d6:	0089      	lsls	r1, r1, #2
    15d8:	588a      	ldr	r2, [r1, r2]
    15da:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    15dc:	697b      	ldr	r3, [r7, #20]
    15de:	3301      	adds	r3, #1
    15e0:	617b      	str	r3, [r7, #20]
    15e2:	697b      	ldr	r3, [r7, #20]
    15e4:	2b0b      	cmp	r3, #11
    15e6:	dde2      	ble.n	15ae <_tcc_interrupt_handler+0x32>
		}
	}
}
    15e8:	46c0      	nop			; (mov r8, r8)
    15ea:	46bd      	mov	sp, r7
    15ec:	b006      	add	sp, #24
    15ee:	bd80      	pop	{r7, pc}
    15f0:	200000d4 	.word	0x200000d4
    15f4:	0000283c 	.word	0x0000283c

000015f8 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	b084      	sub	sp, #16
    15fc:	af00      	add	r7, sp, #0
    15fe:	60f8      	str	r0, [r7, #12]
    1600:	60b9      	str	r1, [r7, #8]
    1602:	1dfb      	adds	r3, r7, #7
    1604:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1606:	1dfb      	adds	r3, r7, #7
    1608:	781a      	ldrb	r2, [r3, #0]
    160a:	68fb      	ldr	r3, [r7, #12]
    160c:	3202      	adds	r2, #2
    160e:	0092      	lsls	r2, r2, #2
    1610:	68b9      	ldr	r1, [r7, #8]
    1612:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1614:	1dfb      	adds	r3, r7, #7
    1616:	781b      	ldrb	r3, [r3, #0]
    1618:	2b02      	cmp	r3, #2
    161a:	d107      	bne.n	162c <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    161c:	68fb      	ldr	r3, [r7, #12]
    161e:	7e1b      	ldrb	r3, [r3, #24]
    1620:	2210      	movs	r2, #16
    1622:	4313      	orrs	r3, r2
    1624:	b2da      	uxtb	r2, r3
    1626:	68fb      	ldr	r3, [r7, #12]
    1628:	761a      	strb	r2, [r3, #24]
    162a:	e019      	b.n	1660 <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    162c:	1dfb      	adds	r3, r7, #7
    162e:	781b      	ldrb	r3, [r3, #0]
    1630:	2b03      	cmp	r3, #3
    1632:	d107      	bne.n	1644 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1634:	68fb      	ldr	r3, [r7, #12]
    1636:	7e1b      	ldrb	r3, [r3, #24]
    1638:	2220      	movs	r2, #32
    163a:	4313      	orrs	r3, r2
    163c:	b2da      	uxtb	r2, r3
    163e:	68fb      	ldr	r3, [r7, #12]
    1640:	761a      	strb	r2, [r3, #24]
    1642:	e00d      	b.n	1660 <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1644:	68fb      	ldr	r3, [r7, #12]
    1646:	7e1b      	ldrb	r3, [r3, #24]
    1648:	b25a      	sxtb	r2, r3
    164a:	1dfb      	adds	r3, r7, #7
    164c:	781b      	ldrb	r3, [r3, #0]
    164e:	2101      	movs	r1, #1
    1650:	4099      	lsls	r1, r3
    1652:	000b      	movs	r3, r1
    1654:	b25b      	sxtb	r3, r3
    1656:	4313      	orrs	r3, r2
    1658:	b25b      	sxtb	r3, r3
    165a:	b2da      	uxtb	r2, r3
    165c:	68fb      	ldr	r3, [r7, #12]
    165e:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    1660:	2300      	movs	r3, #0
}
    1662:	0018      	movs	r0, r3
    1664:	46bd      	mov	sp, r7
    1666:	b004      	add	sp, #16
    1668:	bd80      	pop	{r7, pc}
	...

0000166c <TC1_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    166c:	b580      	push	{r7, lr}
    166e:	af00      	add	r7, sp, #0
    1670:	2000      	movs	r0, #0
    1672:	4b02      	ldr	r3, [pc, #8]	; (167c <TC1_Handler+0x10>)
    1674:	4798      	blx	r3
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	46bd      	mov	sp, r7
    167a:	bd80      	pop	{r7, pc}
    167c:	00001695 	.word	0x00001695

00001680 <TC2_Handler>:
    1680:	b580      	push	{r7, lr}
    1682:	af00      	add	r7, sp, #0
    1684:	2001      	movs	r0, #1
    1686:	4b02      	ldr	r3, [pc, #8]	; (1690 <TC2_Handler+0x10>)
    1688:	4798      	blx	r3
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	46bd      	mov	sp, r7
    168e:	bd80      	pop	{r7, pc}
    1690:	00001695 	.word	0x00001695

00001694 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1694:	b580      	push	{r7, lr}
    1696:	b084      	sub	sp, #16
    1698:	af00      	add	r7, sp, #0
    169a:	0002      	movs	r2, r0
    169c:	1dfb      	adds	r3, r7, #7
    169e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    16a0:	1dfb      	adds	r3, r7, #7
    16a2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    16a4:	4b28      	ldr	r3, [pc, #160]	; (1748 <_tc_interrupt_handler+0xb4>)
    16a6:	0092      	lsls	r2, r2, #2
    16a8:	58d3      	ldr	r3, [r2, r3]
    16aa:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    16ac:	68fb      	ldr	r3, [r7, #12]
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	7b9b      	ldrb	r3, [r3, #14]
    16b2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    16b4:	68fa      	ldr	r2, [r7, #12]
    16b6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    16b8:	4013      	ands	r3, r2
    16ba:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    16c0:	230b      	movs	r3, #11
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	400a      	ands	r2, r1
    16c6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    16c8:	230b      	movs	r3, #11
    16ca:	18fb      	adds	r3, r7, r3
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	2201      	movs	r2, #1
    16d0:	4013      	ands	r3, r2
    16d2:	d008      	beq.n	16e6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    16d4:	68fb      	ldr	r3, [r7, #12]
    16d6:	689b      	ldr	r3, [r3, #8]
    16d8:	68fa      	ldr	r2, [r7, #12]
    16da:	0010      	movs	r0, r2
    16dc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    16de:	68fb      	ldr	r3, [r7, #12]
    16e0:	681b      	ldr	r3, [r3, #0]
    16e2:	2201      	movs	r2, #1
    16e4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    16e6:	230b      	movs	r3, #11
    16e8:	18fb      	adds	r3, r7, r3
    16ea:	781b      	ldrb	r3, [r3, #0]
    16ec:	2202      	movs	r2, #2
    16ee:	4013      	ands	r3, r2
    16f0:	d008      	beq.n	1704 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    16f2:	68fb      	ldr	r3, [r7, #12]
    16f4:	68db      	ldr	r3, [r3, #12]
    16f6:	68fa      	ldr	r2, [r7, #12]
    16f8:	0010      	movs	r0, r2
    16fa:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    16fc:	68fb      	ldr	r3, [r7, #12]
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	2202      	movs	r2, #2
    1702:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1704:	230b      	movs	r3, #11
    1706:	18fb      	adds	r3, r7, r3
    1708:	781b      	ldrb	r3, [r3, #0]
    170a:	2210      	movs	r2, #16
    170c:	4013      	ands	r3, r2
    170e:	d008      	beq.n	1722 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1710:	68fb      	ldr	r3, [r7, #12]
    1712:	691b      	ldr	r3, [r3, #16]
    1714:	68fa      	ldr	r2, [r7, #12]
    1716:	0010      	movs	r0, r2
    1718:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    171a:	68fb      	ldr	r3, [r7, #12]
    171c:	681b      	ldr	r3, [r3, #0]
    171e:	2210      	movs	r2, #16
    1720:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1722:	230b      	movs	r3, #11
    1724:	18fb      	adds	r3, r7, r3
    1726:	781b      	ldrb	r3, [r3, #0]
    1728:	2220      	movs	r2, #32
    172a:	4013      	ands	r3, r2
    172c:	d008      	beq.n	1740 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    172e:	68fb      	ldr	r3, [r7, #12]
    1730:	695b      	ldr	r3, [r3, #20]
    1732:	68fa      	ldr	r2, [r7, #12]
    1734:	0010      	movs	r0, r2
    1736:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1738:	68fb      	ldr	r3, [r7, #12]
    173a:	681b      	ldr	r3, [r3, #0]
    173c:	2220      	movs	r2, #32
    173e:	739a      	strb	r2, [r3, #14]
	}
}
    1740:	46c0      	nop			; (mov r8, r8)
    1742:	46bd      	mov	sp, r7
    1744:	b004      	add	sp, #16
    1746:	bd80      	pop	{r7, pc}
    1748:	200000d8 	.word	0x200000d8

0000174c <system_gclk_chan_get_config_defaults>:
{
    174c:	b580      	push	{r7, lr}
    174e:	b082      	sub	sp, #8
    1750:	af00      	add	r7, sp, #0
    1752:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	2200      	movs	r2, #0
    1758:	701a      	strb	r2, [r3, #0]
}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	46bd      	mov	sp, r7
    175e:	b002      	add	sp, #8
    1760:	bd80      	pop	{r7, pc}
	...

00001764 <system_apb_clock_set_mask>:
{
    1764:	b580      	push	{r7, lr}
    1766:	b082      	sub	sp, #8
    1768:	af00      	add	r7, sp, #0
    176a:	0002      	movs	r2, r0
    176c:	6039      	str	r1, [r7, #0]
    176e:	1dfb      	adds	r3, r7, #7
    1770:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1772:	1dfb      	adds	r3, r7, #7
    1774:	781b      	ldrb	r3, [r3, #0]
    1776:	2b01      	cmp	r3, #1
    1778:	d00a      	beq.n	1790 <system_apb_clock_set_mask+0x2c>
    177a:	2b02      	cmp	r3, #2
    177c:	d00f      	beq.n	179e <system_apb_clock_set_mask+0x3a>
    177e:	2b00      	cmp	r3, #0
    1780:	d114      	bne.n	17ac <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1782:	4b0e      	ldr	r3, [pc, #56]	; (17bc <system_apb_clock_set_mask+0x58>)
    1784:	4a0d      	ldr	r2, [pc, #52]	; (17bc <system_apb_clock_set_mask+0x58>)
    1786:	6991      	ldr	r1, [r2, #24]
    1788:	683a      	ldr	r2, [r7, #0]
    178a:	430a      	orrs	r2, r1
    178c:	619a      	str	r2, [r3, #24]
			break;
    178e:	e00f      	b.n	17b0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1790:	4b0a      	ldr	r3, [pc, #40]	; (17bc <system_apb_clock_set_mask+0x58>)
    1792:	4a0a      	ldr	r2, [pc, #40]	; (17bc <system_apb_clock_set_mask+0x58>)
    1794:	69d1      	ldr	r1, [r2, #28]
    1796:	683a      	ldr	r2, [r7, #0]
    1798:	430a      	orrs	r2, r1
    179a:	61da      	str	r2, [r3, #28]
			break;
    179c:	e008      	b.n	17b0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    179e:	4b07      	ldr	r3, [pc, #28]	; (17bc <system_apb_clock_set_mask+0x58>)
    17a0:	4a06      	ldr	r2, [pc, #24]	; (17bc <system_apb_clock_set_mask+0x58>)
    17a2:	6a11      	ldr	r1, [r2, #32]
    17a4:	683a      	ldr	r2, [r7, #0]
    17a6:	430a      	orrs	r2, r1
    17a8:	621a      	str	r2, [r3, #32]
			break;
    17aa:	e001      	b.n	17b0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    17ac:	2317      	movs	r3, #23
    17ae:	e000      	b.n	17b2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    17b0:	2300      	movs	r3, #0
}
    17b2:	0018      	movs	r0, r3
    17b4:	46bd      	mov	sp, r7
    17b6:	b002      	add	sp, #8
    17b8:	bd80      	pop	{r7, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	40000400 	.word	0x40000400

000017c0 <system_pinmux_get_config_defaults>:
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b082      	sub	sp, #8
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	2280      	movs	r2, #128	; 0x80
    17cc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	2200      	movs	r2, #0
    17d2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	2201      	movs	r2, #1
    17d8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	2200      	movs	r2, #0
    17de:	70da      	strb	r2, [r3, #3]
}
    17e0:	46c0      	nop			; (mov r8, r8)
    17e2:	46bd      	mov	sp, r7
    17e4:	b002      	add	sp, #8
    17e6:	bd80      	pop	{r7, pc}

000017e8 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    17e8:	b580      	push	{r7, lr}
    17ea:	b084      	sub	sp, #16
    17ec:	af00      	add	r7, sp, #0
    17ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17f6:	68fb      	ldr	r3, [r7, #12]
    17f8:	7bdb      	ldrb	r3, [r3, #15]
    17fa:	b2db      	uxtb	r3, r3
    17fc:	001a      	movs	r2, r3
    17fe:	2380      	movs	r3, #128	; 0x80
    1800:	4013      	ands	r3, r2
    1802:	1e5a      	subs	r2, r3, #1
    1804:	4193      	sbcs	r3, r2
    1806:	b2db      	uxtb	r3, r3
#endif
}
    1808:	0018      	movs	r0, r3
    180a:	46bd      	mov	sp, r7
    180c:	b004      	add	sp, #16
    180e:	bd80      	pop	{r7, pc}

00001810 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1810:	b580      	push	{r7, lr}
    1812:	b086      	sub	sp, #24
    1814:	af00      	add	r7, sp, #0
    1816:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1818:	230c      	movs	r3, #12
    181a:	18fb      	adds	r3, r7, r3
    181c:	4a0d      	ldr	r2, [pc, #52]	; (1854 <_tc_get_inst_index+0x44>)
    181e:	ca03      	ldmia	r2!, {r0, r1}
    1820:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1822:	2300      	movs	r3, #0
    1824:	617b      	str	r3, [r7, #20]
    1826:	e00d      	b.n	1844 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    1828:	230c      	movs	r3, #12
    182a:	18fb      	adds	r3, r7, r3
    182c:	697a      	ldr	r2, [r7, #20]
    182e:	0092      	lsls	r2, r2, #2
    1830:	58d2      	ldr	r2, [r2, r3]
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	429a      	cmp	r2, r3
    1836:	d102      	bne.n	183e <_tc_get_inst_index+0x2e>
			return i;
    1838:	697b      	ldr	r3, [r7, #20]
    183a:	b2db      	uxtb	r3, r3
    183c:	e006      	b.n	184c <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    183e:	697b      	ldr	r3, [r7, #20]
    1840:	3301      	adds	r3, #1
    1842:	617b      	str	r3, [r7, #20]
    1844:	697b      	ldr	r3, [r7, #20]
    1846:	2b01      	cmp	r3, #1
    1848:	d9ee      	bls.n	1828 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    184a:	2300      	movs	r3, #0
}
    184c:	0018      	movs	r0, r3
    184e:	46bd      	mov	sp, r7
    1850:	b006      	add	sp, #24
    1852:	bd80      	pop	{r7, pc}
    1854:	0000286c 	.word	0x0000286c

00001858 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1858:	b590      	push	{r4, r7, lr}
    185a:	b08b      	sub	sp, #44	; 0x2c
    185c:	af00      	add	r7, sp, #0
    185e:	60f8      	str	r0, [r7, #12]
    1860:	60b9      	str	r1, [r7, #8]
    1862:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    1864:	2326      	movs	r3, #38	; 0x26
    1866:	18fb      	adds	r3, r7, r3
    1868:	2200      	movs	r2, #0
    186a:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    186c:	2325      	movs	r3, #37	; 0x25
    186e:	18fb      	adds	r3, r7, r3
    1870:	2200      	movs	r2, #0
    1872:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    1874:	2324      	movs	r3, #36	; 0x24
    1876:	18fb      	adds	r3, r7, r3
    1878:	2200      	movs	r2, #0
    187a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    187c:	2321      	movs	r3, #33	; 0x21
    187e:	18fc      	adds	r4, r7, r3
    1880:	68bb      	ldr	r3, [r7, #8]
    1882:	0018      	movs	r0, r3
    1884:	4bd4      	ldr	r3, [pc, #848]	; (1bd8 <tc_init+0x380>)
    1886:	4798      	blx	r3
    1888:	0003      	movs	r3, r0
    188a:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    188c:	231c      	movs	r3, #28
    188e:	18fb      	adds	r3, r7, r3
    1890:	4ad2      	ldr	r2, [pc, #840]	; (1bdc <tc_init+0x384>)
    1892:	8812      	ldrh	r2, [r2, #0]
    1894:	801a      	strh	r2, [r3, #0]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1896:	2318      	movs	r3, #24
    1898:	18fb      	adds	r3, r7, r3
    189a:	4ad1      	ldr	r2, [pc, #836]	; (1be0 <tc_init+0x388>)
    189c:	6812      	ldr	r2, [r2, #0]
    189e:	601a      	str	r2, [r3, #0]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    18a0:	2323      	movs	r3, #35	; 0x23
    18a2:	18fb      	adds	r3, r7, r3
    18a4:	2200      	movs	r2, #0
    18a6:	701a      	strb	r2, [r3, #0]
    18a8:	e00e      	b.n	18c8 <tc_init+0x70>
		module_inst->callback[i]        = NULL;
    18aa:	2323      	movs	r3, #35	; 0x23
    18ac:	18fb      	adds	r3, r7, r3
    18ae:	781a      	ldrb	r2, [r3, #0]
    18b0:	68fb      	ldr	r3, [r7, #12]
    18b2:	3202      	adds	r2, #2
    18b4:	0092      	lsls	r2, r2, #2
    18b6:	2100      	movs	r1, #0
    18b8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    18ba:	2323      	movs	r3, #35	; 0x23
    18bc:	18fb      	adds	r3, r7, r3
    18be:	781a      	ldrb	r2, [r3, #0]
    18c0:	2323      	movs	r3, #35	; 0x23
    18c2:	18fb      	adds	r3, r7, r3
    18c4:	3201      	adds	r2, #1
    18c6:	701a      	strb	r2, [r3, #0]
    18c8:	2323      	movs	r3, #35	; 0x23
    18ca:	18fb      	adds	r3, r7, r3
    18cc:	781b      	ldrb	r3, [r3, #0]
    18ce:	2b03      	cmp	r3, #3
    18d0:	d9eb      	bls.n	18aa <tc_init+0x52>
	}
	module_inst->register_callback_mask     = 0x00;
    18d2:	68fb      	ldr	r3, [r7, #12]
    18d4:	2200      	movs	r2, #0
    18d6:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    18d8:	68fb      	ldr	r3, [r7, #12]
    18da:	2200      	movs	r2, #0
    18dc:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    18de:	2321      	movs	r3, #33	; 0x21
    18e0:	18fb      	adds	r3, r7, r3
    18e2:	781a      	ldrb	r2, [r3, #0]
    18e4:	4bbf      	ldr	r3, [pc, #764]	; (1be4 <tc_init+0x38c>)
    18e6:	0092      	lsls	r2, r2, #2
    18e8:	68f9      	ldr	r1, [r7, #12]
    18ea:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    18ec:	68fb      	ldr	r3, [r7, #12]
    18ee:	68ba      	ldr	r2, [r7, #8]
    18f0:	601a      	str	r2, [r3, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	789b      	ldrb	r3, [r3, #2]
    18f6:	2b08      	cmp	r3, #8
    18f8:	d108      	bne.n	190c <tc_init+0xb4>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    18fa:	2321      	movs	r3, #33	; 0x21
    18fc:	18fb      	adds	r3, r7, r3
    18fe:	781b      	ldrb	r3, [r3, #0]
    1900:	3301      	adds	r3, #1
    1902:	2201      	movs	r2, #1
    1904:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1906:	d101      	bne.n	190c <tc_init+0xb4>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1908:	2317      	movs	r3, #23
    190a:	e1c2      	b.n	1c92 <tc_init+0x43a>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	789a      	ldrb	r2, [r3, #2]
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1914:	68bb      	ldr	r3, [r7, #8]
    1916:	881b      	ldrh	r3, [r3, #0]
    1918:	b29b      	uxth	r3, r3
    191a:	001a      	movs	r2, r3
    191c:	2301      	movs	r3, #1
    191e:	4013      	ands	r3, r2
    1920:	d001      	beq.n	1926 <tc_init+0xce>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1922:	2305      	movs	r3, #5
    1924:	e1b5      	b.n	1c92 <tc_init+0x43a>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1926:	68bb      	ldr	r3, [r7, #8]
    1928:	7bdb      	ldrb	r3, [r3, #15]
    192a:	b2db      	uxtb	r3, r3
    192c:	001a      	movs	r2, r3
    192e:	2310      	movs	r3, #16
    1930:	4013      	ands	r3, r2
    1932:	d001      	beq.n	1938 <tc_init+0xe0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1934:	231c      	movs	r3, #28
    1936:	e1ac      	b.n	1c92 <tc_init+0x43a>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1938:	68bb      	ldr	r3, [r7, #8]
    193a:	881b      	ldrh	r3, [r3, #0]
    193c:	b29b      	uxth	r3, r3
    193e:	001a      	movs	r2, r3
    1940:	2302      	movs	r3, #2
    1942:	4013      	ands	r3, r2
    1944:	d001      	beq.n	194a <tc_init+0xf2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    1946:	231c      	movs	r3, #28
    1948:	e1a3      	b.n	1c92 <tc_init+0x43a>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    194a:	687b      	ldr	r3, [r7, #4]
    194c:	7c1b      	ldrb	r3, [r3, #16]
    194e:	2b00      	cmp	r3, #0
    1950:	d017      	beq.n	1982 <tc_init+0x12a>
		system_pinmux_get_config_defaults(&pin_config);
    1952:	2314      	movs	r3, #20
    1954:	18fb      	adds	r3, r7, r3
    1956:	0018      	movs	r0, r3
    1958:	4ba3      	ldr	r3, [pc, #652]	; (1be8 <tc_init+0x390>)
    195a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	699b      	ldr	r3, [r3, #24]
    1960:	b2da      	uxtb	r2, r3
    1962:	2314      	movs	r3, #20
    1964:	18fb      	adds	r3, r7, r3
    1966:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1968:	2314      	movs	r3, #20
    196a:	18fb      	adds	r3, r7, r3
    196c:	2201      	movs	r2, #1
    196e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    1974:	b2db      	uxtb	r3, r3
    1976:	2214      	movs	r2, #20
    1978:	18ba      	adds	r2, r7, r2
    197a:	0011      	movs	r1, r2
    197c:	0018      	movs	r0, r3
    197e:	4b9b      	ldr	r3, [pc, #620]	; (1bec <tc_init+0x394>)
    1980:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	7f1b      	ldrb	r3, [r3, #28]
    1986:	2b00      	cmp	r3, #0
    1988:	d017      	beq.n	19ba <tc_init+0x162>
		system_pinmux_get_config_defaults(&pin_config);
    198a:	2314      	movs	r3, #20
    198c:	18fb      	adds	r3, r7, r3
    198e:	0018      	movs	r0, r3
    1990:	4b95      	ldr	r3, [pc, #596]	; (1be8 <tc_init+0x390>)
    1992:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1994:	687b      	ldr	r3, [r7, #4]
    1996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1998:	b2da      	uxtb	r2, r3
    199a:	2314      	movs	r3, #20
    199c:	18fb      	adds	r3, r7, r3
    199e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    19a0:	2314      	movs	r3, #20
    19a2:	18fb      	adds	r3, r7, r3
    19a4:	2201      	movs	r2, #1
    19a6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    19a8:	687b      	ldr	r3, [r7, #4]
    19aa:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    19ac:	b2db      	uxtb	r3, r3
    19ae:	2214      	movs	r2, #20
    19b0:	18ba      	adds	r2, r7, r2
    19b2:	0011      	movs	r1, r2
    19b4:	0018      	movs	r0, r3
    19b6:	4b8d      	ldr	r3, [pc, #564]	; (1bec <tc_init+0x394>)
    19b8:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    19ba:	2321      	movs	r3, #33	; 0x21
    19bc:	18fb      	adds	r3, r7, r3
    19be:	781a      	ldrb	r2, [r3, #0]
    19c0:	2318      	movs	r3, #24
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	0052      	lsls	r2, r2, #1
    19c6:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    19c8:	0019      	movs	r1, r3
    19ca:	2002      	movs	r0, #2
    19cc:	4b88      	ldr	r3, [pc, #544]	; (1bf0 <tc_init+0x398>)
    19ce:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	789b      	ldrb	r3, [r3, #2]
    19d4:	2b08      	cmp	r3, #8
    19d6:	d10b      	bne.n	19f0 <tc_init+0x198>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    19d8:	2321      	movs	r3, #33	; 0x21
    19da:	18fb      	adds	r3, r7, r3
    19dc:	781b      	ldrb	r3, [r3, #0]
    19de:	1c5a      	adds	r2, r3, #1
    19e0:	2318      	movs	r3, #24
    19e2:	18fb      	adds	r3, r7, r3
    19e4:	0052      	lsls	r2, r2, #1
    19e6:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    19e8:	0019      	movs	r1, r3
    19ea:	2002      	movs	r0, #2
    19ec:	4b80      	ldr	r3, [pc, #512]	; (1bf0 <tc_init+0x398>)
    19ee:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    19f0:	2310      	movs	r3, #16
    19f2:	18fb      	adds	r3, r7, r3
    19f4:	0018      	movs	r0, r3
    19f6:	4b7f      	ldr	r3, [pc, #508]	; (1bf4 <tc_init+0x39c>)
    19f8:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	781a      	ldrb	r2, [r3, #0]
    19fe:	2310      	movs	r3, #16
    1a00:	18fb      	adds	r3, r7, r3
    1a02:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1a04:	2321      	movs	r3, #33	; 0x21
    1a06:	18fb      	adds	r3, r7, r3
    1a08:	781b      	ldrb	r3, [r3, #0]
    1a0a:	221c      	movs	r2, #28
    1a0c:	18ba      	adds	r2, r7, r2
    1a0e:	5cd3      	ldrb	r3, [r2, r3]
    1a10:	2210      	movs	r2, #16
    1a12:	18ba      	adds	r2, r7, r2
    1a14:	0011      	movs	r1, r2
    1a16:	0018      	movs	r0, r3
    1a18:	4b77      	ldr	r3, [pc, #476]	; (1bf8 <tc_init+0x3a0>)
    1a1a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1a1c:	2321      	movs	r3, #33	; 0x21
    1a1e:	18fb      	adds	r3, r7, r3
    1a20:	781b      	ldrb	r3, [r3, #0]
    1a22:	221c      	movs	r2, #28
    1a24:	18ba      	adds	r2, r7, r2
    1a26:	5cd3      	ldrb	r3, [r2, r3]
    1a28:	0018      	movs	r0, r3
    1a2a:	4b74      	ldr	r3, [pc, #464]	; (1bfc <tc_init+0x3a4>)
    1a2c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    1a2e:	687b      	ldr	r3, [r7, #4]
    1a30:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    1a32:	687b      	ldr	r3, [r7, #4]
    1a34:	799b      	ldrb	r3, [r3, #6]
    1a36:	4313      	orrs	r3, r2
    1a38:	b2db      	uxtb	r3, r3
    1a3a:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    1a40:	4313      	orrs	r3, r2
    1a42:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    1a48:	2326      	movs	r3, #38	; 0x26
    1a4a:	18fb      	adds	r3, r7, r3
    1a4c:	430a      	orrs	r2, r1
    1a4e:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	785b      	ldrb	r3, [r3, #1]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d008      	beq.n	1a6a <tc_init+0x212>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1a58:	2326      	movs	r3, #38	; 0x26
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	2226      	movs	r2, #38	; 0x26
    1a5e:	18ba      	adds	r2, r7, r2
    1a60:	8812      	ldrh	r2, [r2, #0]
    1a62:	2180      	movs	r1, #128	; 0x80
    1a64:	0109      	lsls	r1, r1, #4
    1a66:	430a      	orrs	r2, r1
    1a68:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	68fb      	ldr	r3, [r7, #12]
    1a6e:	0018      	movs	r0, r3
    1a70:	4b63      	ldr	r3, [pc, #396]	; (1c00 <tc_init+0x3a8>)
    1a72:	4798      	blx	r3
    1a74:	1e03      	subs	r3, r0, #0
    1a76:	d1f9      	bne.n	1a6c <tc_init+0x214>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1a78:	68bb      	ldr	r3, [r7, #8]
    1a7a:	2226      	movs	r2, #38	; 0x26
    1a7c:	18ba      	adds	r2, r7, r2
    1a7e:	8812      	ldrh	r2, [r2, #0]
    1a80:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	7b5b      	ldrb	r3, [r3, #13]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d003      	beq.n	1a92 <tc_init+0x23a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1a8a:	2325      	movs	r3, #37	; 0x25
    1a8c:	18fb      	adds	r3, r7, r3
    1a8e:	2204      	movs	r2, #4
    1a90:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    1a92:	687b      	ldr	r3, [r7, #4]
    1a94:	7b9b      	ldrb	r3, [r3, #14]
    1a96:	2b00      	cmp	r3, #0
    1a98:	d007      	beq.n	1aaa <tc_init+0x252>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1a9a:	2325      	movs	r3, #37	; 0x25
    1a9c:	18fb      	adds	r3, r7, r3
    1a9e:	2225      	movs	r2, #37	; 0x25
    1aa0:	18ba      	adds	r2, r7, r2
    1aa2:	7812      	ldrb	r2, [r2, #0]
    1aa4:	2101      	movs	r1, #1
    1aa6:	430a      	orrs	r2, r1
    1aa8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	68fb      	ldr	r3, [r7, #12]
    1aae:	0018      	movs	r0, r3
    1ab0:	4b53      	ldr	r3, [pc, #332]	; (1c00 <tc_init+0x3a8>)
    1ab2:	4798      	blx	r3
    1ab4:	1e03      	subs	r3, r0, #0
    1ab6:	d1f9      	bne.n	1aac <tc_init+0x254>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1ab8:	68bb      	ldr	r3, [r7, #8]
    1aba:	22ff      	movs	r2, #255	; 0xff
    1abc:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1abe:	2325      	movs	r3, #37	; 0x25
    1ac0:	18fb      	adds	r3, r7, r3
    1ac2:	781b      	ldrb	r3, [r3, #0]
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d00b      	beq.n	1ae0 <tc_init+0x288>
		while (tc_is_syncing(module_inst)) {
    1ac8:	46c0      	nop			; (mov r8, r8)
    1aca:	68fb      	ldr	r3, [r7, #12]
    1acc:	0018      	movs	r0, r3
    1ace:	4b4c      	ldr	r3, [pc, #304]	; (1c00 <tc_init+0x3a8>)
    1ad0:	4798      	blx	r3
    1ad2:	1e03      	subs	r3, r0, #0
    1ad4:	d1f9      	bne.n	1aca <tc_init+0x272>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1ad6:	68bb      	ldr	r3, [r7, #8]
    1ad8:	2225      	movs	r2, #37	; 0x25
    1ada:	18ba      	adds	r2, r7, r2
    1adc:	7812      	ldrb	r2, [r2, #0]
    1ade:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1ae0:	2324      	movs	r3, #36	; 0x24
    1ae2:	18fb      	adds	r3, r7, r3
    1ae4:	687a      	ldr	r2, [r7, #4]
    1ae6:	7a92      	ldrb	r2, [r2, #10]
    1ae8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1aea:	2322      	movs	r3, #34	; 0x22
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	2200      	movs	r2, #0
    1af0:	701a      	strb	r2, [r3, #0]
    1af2:	e01c      	b.n	1b2e <tc_init+0x2d6>
		if (config->enable_capture_on_channel[i] == true) {
    1af4:	2322      	movs	r3, #34	; 0x22
    1af6:	18fb      	adds	r3, r7, r3
    1af8:	781b      	ldrb	r3, [r3, #0]
    1afa:	687a      	ldr	r2, [r7, #4]
    1afc:	18d3      	adds	r3, r2, r3
    1afe:	7adb      	ldrb	r3, [r3, #11]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d00d      	beq.n	1b20 <tc_init+0x2c8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1b04:	2322      	movs	r3, #34	; 0x22
    1b06:	18fb      	adds	r3, r7, r3
    1b08:	781b      	ldrb	r3, [r3, #0]
    1b0a:	2210      	movs	r2, #16
    1b0c:	409a      	lsls	r2, r3
    1b0e:	0013      	movs	r3, r2
    1b10:	b2d9      	uxtb	r1, r3
    1b12:	2324      	movs	r3, #36	; 0x24
    1b14:	18fb      	adds	r3, r7, r3
    1b16:	2224      	movs	r2, #36	; 0x24
    1b18:	18ba      	adds	r2, r7, r2
    1b1a:	7812      	ldrb	r2, [r2, #0]
    1b1c:	430a      	orrs	r2, r1
    1b1e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1b20:	2322      	movs	r3, #34	; 0x22
    1b22:	18fb      	adds	r3, r7, r3
    1b24:	781a      	ldrb	r2, [r3, #0]
    1b26:	2322      	movs	r3, #34	; 0x22
    1b28:	18fb      	adds	r3, r7, r3
    1b2a:	3201      	adds	r2, #1
    1b2c:	701a      	strb	r2, [r3, #0]
    1b2e:	2322      	movs	r3, #34	; 0x22
    1b30:	18fb      	adds	r3, r7, r3
    1b32:	781b      	ldrb	r3, [r3, #0]
    1b34:	2b01      	cmp	r3, #1
    1b36:	d9dd      	bls.n	1af4 <tc_init+0x29c>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1b38:	46c0      	nop			; (mov r8, r8)
    1b3a:	68fb      	ldr	r3, [r7, #12]
    1b3c:	0018      	movs	r0, r3
    1b3e:	4b30      	ldr	r3, [pc, #192]	; (1c00 <tc_init+0x3a8>)
    1b40:	4798      	blx	r3
    1b42:	1e03      	subs	r3, r0, #0
    1b44:	d1f9      	bne.n	1b3a <tc_init+0x2e2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1b46:	68bb      	ldr	r3, [r7, #8]
    1b48:	2224      	movs	r2, #36	; 0x24
    1b4a:	18ba      	adds	r2, r7, r2
    1b4c:	7812      	ldrb	r2, [r2, #0]
    1b4e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1b50:	46c0      	nop			; (mov r8, r8)
    1b52:	68fb      	ldr	r3, [r7, #12]
    1b54:	0018      	movs	r0, r3
    1b56:	4b2a      	ldr	r3, [pc, #168]	; (1c00 <tc_init+0x3a8>)
    1b58:	4798      	blx	r3
    1b5a:	1e03      	subs	r3, r0, #0
    1b5c:	d1f9      	bne.n	1b52 <tc_init+0x2fa>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1b5e:	68fb      	ldr	r3, [r7, #12]
    1b60:	791b      	ldrb	r3, [r3, #4]
    1b62:	2b04      	cmp	r3, #4
    1b64:	d005      	beq.n	1b72 <tc_init+0x31a>
    1b66:	2b08      	cmp	r3, #8
    1b68:	d100      	bne.n	1b6c <tc_init+0x314>
    1b6a:	e06e      	b.n	1c4a <tc_init+0x3f2>
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d049      	beq.n	1c04 <tc_init+0x3ac>
    1b70:	e08e      	b.n	1c90 <tc_init+0x438>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	68fb      	ldr	r3, [r7, #12]
    1b76:	0018      	movs	r0, r3
    1b78:	4b21      	ldr	r3, [pc, #132]	; (1c00 <tc_init+0x3a8>)
    1b7a:	4798      	blx	r3
    1b7c:	1e03      	subs	r3, r0, #0
    1b7e:	d1f9      	bne.n	1b74 <tc_init+0x31c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	2228      	movs	r2, #40	; 0x28
    1b84:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    1b86:	68bb      	ldr	r3, [r7, #8]
    1b88:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	68fb      	ldr	r3, [r7, #12]
    1b8e:	0018      	movs	r0, r3
    1b90:	4b1b      	ldr	r3, [pc, #108]	; (1c00 <tc_init+0x3a8>)
    1b92:	4798      	blx	r3
    1b94:	1e03      	subs	r3, r0, #0
    1b96:	d1f9      	bne.n	1b8c <tc_init+0x334>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	2229      	movs	r2, #41	; 0x29
    1b9c:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    1b9e:	68bb      	ldr	r3, [r7, #8]
    1ba0:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	68fb      	ldr	r3, [r7, #12]
    1ba6:	0018      	movs	r0, r3
    1ba8:	4b15      	ldr	r3, [pc, #84]	; (1c00 <tc_init+0x3a8>)
    1baa:	4798      	blx	r3
    1bac:	1e03      	subs	r3, r0, #0
    1bae:	d1f9      	bne.n	1ba4 <tc_init+0x34c>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1bb0:	687b      	ldr	r3, [r7, #4]
    1bb2:	222a      	movs	r2, #42	; 0x2a
    1bb4:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    1bb6:	68bb      	ldr	r3, [r7, #8]
    1bb8:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	0018      	movs	r0, r3
    1bc0:	4b0f      	ldr	r3, [pc, #60]	; (1c00 <tc_init+0x3a8>)
    1bc2:	4798      	blx	r3
    1bc4:	1e03      	subs	r3, r0, #0
    1bc6:	d1f9      	bne.n	1bbc <tc_init+0x364>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	222b      	movs	r2, #43	; 0x2b
    1bcc:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    1bce:	68bb      	ldr	r3, [r7, #8]
    1bd0:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    1bd2:	2300      	movs	r3, #0
    1bd4:	e05d      	b.n	1c92 <tc_init+0x43a>
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	00001811 	.word	0x00001811
    1bdc:	00002874 	.word	0x00002874
    1be0:	00002878 	.word	0x00002878
    1be4:	200000d8 	.word	0x200000d8
    1be8:	000017c1 	.word	0x000017c1
    1bec:	000014e1 	.word	0x000014e1
    1bf0:	00001765 	.word	0x00001765
    1bf4:	0000174d 	.word	0x0000174d
    1bf8:	0000124d 	.word	0x0000124d
    1bfc:	00001291 	.word	0x00001291
    1c00:	000017e9 	.word	0x000017e9

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1c04:	46c0      	nop			; (mov r8, r8)
    1c06:	68fb      	ldr	r3, [r7, #12]
    1c08:	0018      	movs	r0, r3
    1c0a:	4b24      	ldr	r3, [pc, #144]	; (1c9c <tc_init+0x444>)
    1c0c:	4798      	blx	r3
    1c0e:	1e03      	subs	r3, r0, #0
    1c10:	d1f9      	bne.n	1c06 <tc_init+0x3ae>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1c16:	68bb      	ldr	r3, [r7, #8]
    1c18:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	0018      	movs	r0, r3
    1c20:	4b1e      	ldr	r3, [pc, #120]	; (1c9c <tc_init+0x444>)
    1c22:	4798      	blx	r3
    1c24:	1e03      	subs	r3, r0, #0
    1c26:	d1f9      	bne.n	1c1c <tc_init+0x3c4>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1c2c:	68bb      	ldr	r3, [r7, #8]
    1c2e:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1c30:	46c0      	nop			; (mov r8, r8)
    1c32:	68fb      	ldr	r3, [r7, #12]
    1c34:	0018      	movs	r0, r3
    1c36:	4b19      	ldr	r3, [pc, #100]	; (1c9c <tc_init+0x444>)
    1c38:	4798      	blx	r3
    1c3a:	1e03      	subs	r3, r0, #0
    1c3c:	d1f9      	bne.n	1c32 <tc_init+0x3da>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1c42:	68bb      	ldr	r3, [r7, #8]
    1c44:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    1c46:	2300      	movs	r3, #0
    1c48:	e023      	b.n	1c92 <tc_init+0x43a>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	68fb      	ldr	r3, [r7, #12]
    1c4e:	0018      	movs	r0, r3
    1c50:	4b12      	ldr	r3, [pc, #72]	; (1c9c <tc_init+0x444>)
    1c52:	4798      	blx	r3
    1c54:	1e03      	subs	r3, r0, #0
    1c56:	d1f9      	bne.n	1c4c <tc_init+0x3f4>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c5c:	68bb      	ldr	r3, [r7, #8]
    1c5e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1c60:	46c0      	nop			; (mov r8, r8)
    1c62:	68fb      	ldr	r3, [r7, #12]
    1c64:	0018      	movs	r0, r3
    1c66:	4b0d      	ldr	r3, [pc, #52]	; (1c9c <tc_init+0x444>)
    1c68:	4798      	blx	r3
    1c6a:	1e03      	subs	r3, r0, #0
    1c6c:	d1f9      	bne.n	1c62 <tc_init+0x40a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    1c72:	68bb      	ldr	r3, [r7, #8]
    1c74:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	68fb      	ldr	r3, [r7, #12]
    1c7a:	0018      	movs	r0, r3
    1c7c:	4b07      	ldr	r3, [pc, #28]	; (1c9c <tc_init+0x444>)
    1c7e:	4798      	blx	r3
    1c80:	1e03      	subs	r3, r0, #0
    1c82:	d1f9      	bne.n	1c78 <tc_init+0x420>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1c88:	68bb      	ldr	r3, [r7, #8]
    1c8a:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    1c8c:	2300      	movs	r3, #0
    1c8e:	e000      	b.n	1c92 <tc_init+0x43a>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1c90:	2317      	movs	r3, #23
}
    1c92:	0018      	movs	r0, r3
    1c94:	46bd      	mov	sp, r7
    1c96:	b00b      	add	sp, #44	; 0x2c
    1c98:	bd90      	pop	{r4, r7, pc}
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	000017e9 	.word	0x000017e9

00001ca0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	b086      	sub	sp, #24
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	60f8      	str	r0, [r7, #12]
    1ca8:	607a      	str	r2, [r7, #4]
    1caa:	230b      	movs	r3, #11
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	1c0a      	adds	r2, r1, #0
    1cb0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1cb2:	68fb      	ldr	r3, [r7, #12]
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
    1cb8:	46c0      	nop			; (mov r8, r8)
    1cba:	68fb      	ldr	r3, [r7, #12]
    1cbc:	0018      	movs	r0, r3
    1cbe:	4b20      	ldr	r3, [pc, #128]	; (1d40 <tc_set_compare_value+0xa0>)
    1cc0:	4798      	blx	r3
    1cc2:	1e03      	subs	r3, r0, #0
    1cc4:	d1f9      	bne.n	1cba <tc_set_compare_value+0x1a>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1cc6:	68fb      	ldr	r3, [r7, #12]
    1cc8:	791b      	ldrb	r3, [r3, #4]
    1cca:	2b04      	cmp	r3, #4
    1ccc:	d004      	beq.n	1cd8 <tc_set_compare_value+0x38>
    1cce:	2b08      	cmp	r3, #8
    1cd0:	d022      	beq.n	1d18 <tc_set_compare_value+0x78>
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d010      	beq.n	1cf8 <tc_set_compare_value+0x58>
    1cd6:	e02e      	b.n	1d36 <tc_set_compare_value+0x96>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    1cd8:	230b      	movs	r3, #11
    1cda:	18fb      	adds	r3, r7, r3
    1cdc:	781b      	ldrb	r3, [r3, #0]
    1cde:	2b01      	cmp	r3, #1
    1ce0:	d80a      	bhi.n	1cf8 <tc_set_compare_value+0x58>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    1ce2:	230b      	movs	r3, #11
    1ce4:	18fb      	adds	r3, r7, r3
    1ce6:	781b      	ldrb	r3, [r3, #0]
						(uint8_t)compare;
    1ce8:	687a      	ldr	r2, [r7, #4]
    1cea:	b2d1      	uxtb	r1, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1cec:	697a      	ldr	r2, [r7, #20]
    1cee:	18d3      	adds	r3, r2, r3
    1cf0:	1c0a      	adds	r2, r1, #0
    1cf2:	761a      	strb	r2, [r3, #24]
				return STATUS_OK;
    1cf4:	2300      	movs	r3, #0
    1cf6:	e01f      	b.n	1d38 <tc_set_compare_value+0x98>
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    1cf8:	230b      	movs	r3, #11
    1cfa:	18fb      	adds	r3, r7, r3
    1cfc:	781b      	ldrb	r3, [r3, #0]
    1cfe:	2b01      	cmp	r3, #1
    1d00:	d80a      	bhi.n	1d18 <tc_set_compare_value+0x78>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    1d02:	230b      	movs	r3, #11
    1d04:	18fb      	adds	r3, r7, r3
    1d06:	781a      	ldrb	r2, [r3, #0]
						(uint16_t)compare;
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	b299      	uxth	r1, r3
				tc_module->COUNT16.CC[channel_index].reg =
    1d0c:	697b      	ldr	r3, [r7, #20]
    1d0e:	320c      	adds	r2, #12
    1d10:	0052      	lsls	r2, r2, #1
    1d12:	52d1      	strh	r1, [r2, r3]
				return STATUS_OK;
    1d14:	2300      	movs	r3, #0
    1d16:	e00f      	b.n	1d38 <tc_set_compare_value+0x98>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    1d18:	230b      	movs	r3, #11
    1d1a:	18fb      	adds	r3, r7, r3
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	2b01      	cmp	r3, #1
    1d20:	d809      	bhi.n	1d36 <tc_set_compare_value+0x96>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    1d22:	230b      	movs	r3, #11
    1d24:	18fb      	adds	r3, r7, r3
    1d26:	781a      	ldrb	r2, [r3, #0]
    1d28:	697b      	ldr	r3, [r7, #20]
    1d2a:	3206      	adds	r2, #6
    1d2c:	0092      	lsls	r2, r2, #2
    1d2e:	6879      	ldr	r1, [r7, #4]
    1d30:	50d1      	str	r1, [r2, r3]
						(uint32_t)compare;
				return STATUS_OK;
    1d32:	2300      	movs	r3, #0
    1d34:	e000      	b.n	1d38 <tc_set_compare_value+0x98>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1d36:	2317      	movs	r3, #23
}
    1d38:	0018      	movs	r0, r3
    1d3a:	46bd      	mov	sp, r7
    1d3c:	b006      	add	sp, #24
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	000017e9 	.word	0x000017e9

00001d44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1d4a:	4b2f      	ldr	r3, [pc, #188]	; (1e08 <Reset_Handler+0xc4>)
    1d4c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1d4e:	4b2f      	ldr	r3, [pc, #188]	; (1e0c <Reset_Handler+0xc8>)
    1d50:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1d52:	687a      	ldr	r2, [r7, #4]
    1d54:	683b      	ldr	r3, [r7, #0]
    1d56:	429a      	cmp	r2, r3
    1d58:	d00c      	beq.n	1d74 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1d5a:	e007      	b.n	1d6c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1d5c:	683b      	ldr	r3, [r7, #0]
    1d5e:	1d1a      	adds	r2, r3, #4
    1d60:	603a      	str	r2, [r7, #0]
    1d62:	687a      	ldr	r2, [r7, #4]
    1d64:	1d11      	adds	r1, r2, #4
    1d66:	6079      	str	r1, [r7, #4]
    1d68:	6812      	ldr	r2, [r2, #0]
    1d6a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1d6c:	683a      	ldr	r2, [r7, #0]
    1d6e:	4b28      	ldr	r3, [pc, #160]	; (1e10 <Reset_Handler+0xcc>)
    1d70:	429a      	cmp	r2, r3
    1d72:	d3f3      	bcc.n	1d5c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1d74:	4b27      	ldr	r3, [pc, #156]	; (1e14 <Reset_Handler+0xd0>)
    1d76:	603b      	str	r3, [r7, #0]
    1d78:	e004      	b.n	1d84 <Reset_Handler+0x40>
                *pDest++ = 0;
    1d7a:	683b      	ldr	r3, [r7, #0]
    1d7c:	1d1a      	adds	r2, r3, #4
    1d7e:	603a      	str	r2, [r7, #0]
    1d80:	2200      	movs	r2, #0
    1d82:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1d84:	683a      	ldr	r2, [r7, #0]
    1d86:	4b24      	ldr	r3, [pc, #144]	; (1e18 <Reset_Handler+0xd4>)
    1d88:	429a      	cmp	r2, r3
    1d8a:	d3f6      	bcc.n	1d7a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1d8c:	4b23      	ldr	r3, [pc, #140]	; (1e1c <Reset_Handler+0xd8>)
    1d8e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d90:	4b23      	ldr	r3, [pc, #140]	; (1e20 <Reset_Handler+0xdc>)
    1d92:	687a      	ldr	r2, [r7, #4]
    1d94:	21ff      	movs	r1, #255	; 0xff
    1d96:	438a      	bics	r2, r1
    1d98:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1d9a:	4a22      	ldr	r2, [pc, #136]	; (1e24 <Reset_Handler+0xe0>)
    1d9c:	2390      	movs	r3, #144	; 0x90
    1d9e:	005b      	lsls	r3, r3, #1
    1da0:	2102      	movs	r1, #2
    1da2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1da4:	4a20      	ldr	r2, [pc, #128]	; (1e28 <Reset_Handler+0xe4>)
    1da6:	78d3      	ldrb	r3, [r2, #3]
    1da8:	2103      	movs	r1, #3
    1daa:	438b      	bics	r3, r1
    1dac:	1c19      	adds	r1, r3, #0
    1dae:	2302      	movs	r3, #2
    1db0:	430b      	orrs	r3, r1
    1db2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1db4:	4a1c      	ldr	r2, [pc, #112]	; (1e28 <Reset_Handler+0xe4>)
    1db6:	78d3      	ldrb	r3, [r2, #3]
    1db8:	210c      	movs	r1, #12
    1dba:	438b      	bics	r3, r1
    1dbc:	1c19      	adds	r1, r3, #0
    1dbe:	2308      	movs	r3, #8
    1dc0:	430b      	orrs	r3, r1
    1dc2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1dc4:	4a19      	ldr	r2, [pc, #100]	; (1e2c <Reset_Handler+0xe8>)
    1dc6:	7b93      	ldrb	r3, [r2, #14]
    1dc8:	2130      	movs	r1, #48	; 0x30
    1dca:	438b      	bics	r3, r1
    1dcc:	1c19      	adds	r1, r3, #0
    1dce:	2320      	movs	r3, #32
    1dd0:	430b      	orrs	r3, r1
    1dd2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1dd4:	4a15      	ldr	r2, [pc, #84]	; (1e2c <Reset_Handler+0xe8>)
    1dd6:	7b93      	ldrb	r3, [r2, #14]
    1dd8:	210c      	movs	r1, #12
    1dda:	438b      	bics	r3, r1
    1ddc:	1c19      	adds	r1, r3, #0
    1dde:	2308      	movs	r3, #8
    1de0:	430b      	orrs	r3, r1
    1de2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1de4:	4a11      	ldr	r2, [pc, #68]	; (1e2c <Reset_Handler+0xe8>)
    1de6:	7b93      	ldrb	r3, [r2, #14]
    1de8:	2103      	movs	r1, #3
    1dea:	438b      	bics	r3, r1
    1dec:	1c19      	adds	r1, r3, #0
    1dee:	2302      	movs	r3, #2
    1df0:	430b      	orrs	r3, r1
    1df2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1df4:	4a0e      	ldr	r2, [pc, #56]	; (1e30 <Reset_Handler+0xec>)
    1df6:	6853      	ldr	r3, [r2, #4]
    1df8:	2180      	movs	r1, #128	; 0x80
    1dfa:	430b      	orrs	r3, r1
    1dfc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1dfe:	4b0d      	ldr	r3, [pc, #52]	; (1e34 <Reset_Handler+0xf0>)
    1e00:	4798      	blx	r3

        /* Branch to main function */
        main();
    1e02:	4b0d      	ldr	r3, [pc, #52]	; (1e38 <Reset_Handler+0xf4>)
    1e04:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1e06:	e7fe      	b.n	1e06 <Reset_Handler+0xc2>
    1e08:	0000289c 	.word	0x0000289c
    1e0c:	20000000 	.word	0x20000000
    1e10:	20000024 	.word	0x20000024
    1e14:	20000024 	.word	0x20000024
    1e18:	20000118 	.word	0x20000118
    1e1c:	00000000 	.word	0x00000000
    1e20:	e000ed00 	.word	0xe000ed00
    1e24:	41007000 	.word	0x41007000
    1e28:	41005000 	.word	0x41005000
    1e2c:	41004800 	.word	0x41004800
    1e30:	41004000 	.word	0x41004000
    1e34:	000027ad 	.word	0x000027ad
    1e38:	0000278d 	.word	0x0000278d

00001e3c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1e3c:	b580      	push	{r7, lr}
    1e3e:	af00      	add	r7, sp, #0
        while (1) {
    1e40:	e7fe      	b.n	1e40 <Dummy_Handler+0x4>
	...

00001e44 <system_pinmux_get_group_from_gpio_pin>:
{
    1e44:	b580      	push	{r7, lr}
    1e46:	b084      	sub	sp, #16
    1e48:	af00      	add	r7, sp, #0
    1e4a:	0002      	movs	r2, r0
    1e4c:	1dfb      	adds	r3, r7, #7
    1e4e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1e50:	230f      	movs	r3, #15
    1e52:	18fb      	adds	r3, r7, r3
    1e54:	1dfa      	adds	r2, r7, #7
    1e56:	7812      	ldrb	r2, [r2, #0]
    1e58:	09d2      	lsrs	r2, r2, #7
    1e5a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1e5c:	230e      	movs	r3, #14
    1e5e:	18fb      	adds	r3, r7, r3
    1e60:	1dfa      	adds	r2, r7, #7
    1e62:	7812      	ldrb	r2, [r2, #0]
    1e64:	0952      	lsrs	r2, r2, #5
    1e66:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1e68:	4b0d      	ldr	r3, [pc, #52]	; (1ea0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1e6a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1e6c:	230f      	movs	r3, #15
    1e6e:	18fb      	adds	r3, r7, r3
    1e70:	781b      	ldrb	r3, [r3, #0]
    1e72:	2b00      	cmp	r3, #0
    1e74:	d10f      	bne.n	1e96 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1e76:	230f      	movs	r3, #15
    1e78:	18fb      	adds	r3, r7, r3
    1e7a:	781b      	ldrb	r3, [r3, #0]
    1e7c:	009b      	lsls	r3, r3, #2
    1e7e:	2210      	movs	r2, #16
    1e80:	4694      	mov	ip, r2
    1e82:	44bc      	add	ip, r7
    1e84:	4463      	add	r3, ip
    1e86:	3b08      	subs	r3, #8
    1e88:	681a      	ldr	r2, [r3, #0]
    1e8a:	230e      	movs	r3, #14
    1e8c:	18fb      	adds	r3, r7, r3
    1e8e:	781b      	ldrb	r3, [r3, #0]
    1e90:	01db      	lsls	r3, r3, #7
    1e92:	18d3      	adds	r3, r2, r3
    1e94:	e000      	b.n	1e98 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1e96:	2300      	movs	r3, #0
}
    1e98:	0018      	movs	r0, r3
    1e9a:	46bd      	mov	sp, r7
    1e9c:	b004      	add	sp, #16
    1e9e:	bd80      	pop	{r7, pc}
    1ea0:	41004400 	.word	0x41004400

00001ea4 <port_get_group_from_gpio_pin>:
{
    1ea4:	b580      	push	{r7, lr}
    1ea6:	b082      	sub	sp, #8
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	0002      	movs	r2, r0
    1eac:	1dfb      	adds	r3, r7, #7
    1eae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1eb0:	1dfb      	adds	r3, r7, #7
    1eb2:	781b      	ldrb	r3, [r3, #0]
    1eb4:	0018      	movs	r0, r3
    1eb6:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <port_get_group_from_gpio_pin+0x20>)
    1eb8:	4798      	blx	r3
    1eba:	0003      	movs	r3, r0
}
    1ebc:	0018      	movs	r0, r3
    1ebe:	46bd      	mov	sp, r7
    1ec0:	b002      	add	sp, #8
    1ec2:	bd80      	pop	{r7, pc}
    1ec4:	00001e45 	.word	0x00001e45

00001ec8 <port_get_config_defaults>:
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	b082      	sub	sp, #8
    1ecc:	af00      	add	r7, sp, #0
    1ece:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	2200      	movs	r2, #0
    1ed4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	2201      	movs	r2, #1
    1eda:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1edc:	687b      	ldr	r3, [r7, #4]
    1ede:	2200      	movs	r2, #0
    1ee0:	709a      	strb	r2, [r3, #2]
}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	46bd      	mov	sp, r7
    1ee6:	b002      	add	sp, #8
    1ee8:	bd80      	pop	{r7, pc}
	...

00001eec <port_pin_get_input_level>:
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b084      	sub	sp, #16
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	0002      	movs	r2, r0
    1ef4:	1dfb      	adds	r3, r7, #7
    1ef6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1ef8:	1dfb      	adds	r3, r7, #7
    1efa:	781b      	ldrb	r3, [r3, #0]
    1efc:	0018      	movs	r0, r3
    1efe:	4b0b      	ldr	r3, [pc, #44]	; (1f2c <port_pin_get_input_level+0x40>)
    1f00:	4798      	blx	r3
    1f02:	0003      	movs	r3, r0
    1f04:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1f06:	1dfb      	adds	r3, r7, #7
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	221f      	movs	r2, #31
    1f0c:	4013      	ands	r3, r2
    1f0e:	2201      	movs	r2, #1
    1f10:	409a      	lsls	r2, r3
    1f12:	0013      	movs	r3, r2
    1f14:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	6a1b      	ldr	r3, [r3, #32]
    1f1a:	68ba      	ldr	r2, [r7, #8]
    1f1c:	4013      	ands	r3, r2
    1f1e:	1e5a      	subs	r2, r3, #1
    1f20:	4193      	sbcs	r3, r2
    1f22:	b2db      	uxtb	r3, r3
}
    1f24:	0018      	movs	r0, r3
    1f26:	46bd      	mov	sp, r7
    1f28:	b004      	add	sp, #16
    1f2a:	bd80      	pop	{r7, pc}
    1f2c:	00001ea5 	.word	0x00001ea5

00001f30 <port_pin_set_output_level>:
{
    1f30:	b580      	push	{r7, lr}
    1f32:	b084      	sub	sp, #16
    1f34:	af00      	add	r7, sp, #0
    1f36:	0002      	movs	r2, r0
    1f38:	1dfb      	adds	r3, r7, #7
    1f3a:	701a      	strb	r2, [r3, #0]
    1f3c:	1dbb      	adds	r3, r7, #6
    1f3e:	1c0a      	adds	r2, r1, #0
    1f40:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1f42:	1dfb      	adds	r3, r7, #7
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	0018      	movs	r0, r3
    1f48:	4b0d      	ldr	r3, [pc, #52]	; (1f80 <port_pin_set_output_level+0x50>)
    1f4a:	4798      	blx	r3
    1f4c:	0003      	movs	r3, r0
    1f4e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1f50:	1dfb      	adds	r3, r7, #7
    1f52:	781b      	ldrb	r3, [r3, #0]
    1f54:	221f      	movs	r2, #31
    1f56:	4013      	ands	r3, r2
    1f58:	2201      	movs	r2, #1
    1f5a:	409a      	lsls	r2, r3
    1f5c:	0013      	movs	r3, r2
    1f5e:	60bb      	str	r3, [r7, #8]
	if (level) {
    1f60:	1dbb      	adds	r3, r7, #6
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d003      	beq.n	1f70 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	68ba      	ldr	r2, [r7, #8]
    1f6c:	619a      	str	r2, [r3, #24]
}
    1f6e:	e002      	b.n	1f76 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1f70:	68fb      	ldr	r3, [r7, #12]
    1f72:	68ba      	ldr	r2, [r7, #8]
    1f74:	615a      	str	r2, [r3, #20]
}
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	46bd      	mov	sp, r7
    1f7a:	b004      	add	sp, #16
    1f7c:	bd80      	pop	{r7, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	00001ea5 	.word	0x00001ea5

00001f84 <system_interrupt_enable_global>:
{
    1f84:	b580      	push	{r7, lr}
    1f86:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1f88:	4b04      	ldr	r3, [pc, #16]	; (1f9c <system_interrupt_enable_global+0x18>)
    1f8a:	2201      	movs	r2, #1
    1f8c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1f8e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f92:	b662      	cpsie	i
}
    1f94:	46c0      	nop			; (mov r8, r8)
    1f96:	46bd      	mov	sp, r7
    1f98:	bd80      	pop	{r7, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	20000000 	.word	0x20000000

00001fa0 <system_interrupt_enable>:
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	b082      	sub	sp, #8
    1fa4:	af00      	add	r7, sp, #0
    1fa6:	0002      	movs	r2, r0
    1fa8:	1dfb      	adds	r3, r7, #7
    1faa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1fac:	4b06      	ldr	r3, [pc, #24]	; (1fc8 <system_interrupt_enable+0x28>)
    1fae:	1dfa      	adds	r2, r7, #7
    1fb0:	7812      	ldrb	r2, [r2, #0]
    1fb2:	0011      	movs	r1, r2
    1fb4:	221f      	movs	r2, #31
    1fb6:	400a      	ands	r2, r1
    1fb8:	2101      	movs	r1, #1
    1fba:	4091      	lsls	r1, r2
    1fbc:	000a      	movs	r2, r1
    1fbe:	601a      	str	r2, [r3, #0]
}
    1fc0:	46c0      	nop			; (mov r8, r8)
    1fc2:	46bd      	mov	sp, r7
    1fc4:	b002      	add	sp, #8
    1fc6:	bd80      	pop	{r7, pc}
    1fc8:	e000e100 	.word	0xe000e100

00001fcc <tc_is_syncing>:
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	b084      	sub	sp, #16
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1fda:	68fb      	ldr	r3, [r7, #12]
    1fdc:	7bdb      	ldrb	r3, [r3, #15]
    1fde:	b2db      	uxtb	r3, r3
    1fe0:	001a      	movs	r2, r3
    1fe2:	2380      	movs	r3, #128	; 0x80
    1fe4:	4013      	ands	r3, r2
    1fe6:	1e5a      	subs	r2, r3, #1
    1fe8:	4193      	sbcs	r3, r2
    1fea:	b2db      	uxtb	r3, r3
}
    1fec:	0018      	movs	r0, r3
    1fee:	46bd      	mov	sp, r7
    1ff0:	b004      	add	sp, #16
    1ff2:	bd80      	pop	{r7, pc}

00001ff4 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    1ff4:	b580      	push	{r7, lr}
    1ff6:	b082      	sub	sp, #8
    1ff8:	af00      	add	r7, sp, #0
    1ffa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1ffc:	687b      	ldr	r3, [r7, #4]
    1ffe:	2200      	movs	r2, #0
    2000:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2002:	687b      	ldr	r3, [r7, #4]
    2004:	2200      	movs	r2, #0
    2006:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	2200      	movs	r2, #0
    200c:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    200e:	687b      	ldr	r3, [r7, #4]
    2010:	2200      	movs	r2, #0
    2012:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	2200      	movs	r2, #0
    2018:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	2200      	movs	r2, #0
    201e:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	2200      	movs	r2, #0
    2024:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2026:	687b      	ldr	r3, [r7, #4]
    2028:	2200      	movs	r2, #0
    202a:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	2200      	movs	r2, #0
    2030:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	2200      	movs	r2, #0
    2036:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	2200      	movs	r2, #0
    203c:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	2200      	movs	r2, #0
    2042:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	2200      	movs	r2, #0
    2048:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	2200      	movs	r2, #0
    204e:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2050:	687b      	ldr	r3, [r7, #4]
    2052:	2200      	movs	r2, #0
    2054:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2056:	687b      	ldr	r3, [r7, #4]
    2058:	2200      	movs	r2, #0
    205a:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	2200      	movs	r2, #0
    2060:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2062:	687b      	ldr	r3, [r7, #4]
    2064:	2200      	movs	r2, #0
    2066:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	2200      	movs	r2, #0
    206c:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    206e:	687b      	ldr	r3, [r7, #4]
    2070:	2200      	movs	r2, #0
    2072:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    2074:	46c0      	nop			; (mov r8, r8)
    2076:	46bd      	mov	sp, r7
    2078:	b002      	add	sp, #8
    207a:	bd80      	pop	{r7, pc}

0000207c <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    207c:	b580      	push	{r7, lr}
    207e:	b084      	sub	sp, #16
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	681b      	ldr	r3, [r3, #0]
    2088:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	0018      	movs	r0, r3
    2090:	4b07      	ldr	r3, [pc, #28]	; (20b0 <tc_enable+0x34>)
    2092:	4798      	blx	r3
    2094:	1e03      	subs	r3, r0, #0
    2096:	d1f9      	bne.n	208c <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2098:	68fb      	ldr	r3, [r7, #12]
    209a:	881b      	ldrh	r3, [r3, #0]
    209c:	b29b      	uxth	r3, r3
    209e:	2202      	movs	r2, #2
    20a0:	4313      	orrs	r3, r2
    20a2:	b29a      	uxth	r2, r3
    20a4:	68fb      	ldr	r3, [r7, #12]
    20a6:	801a      	strh	r2, [r3, #0]
}
    20a8:	46c0      	nop			; (mov r8, r8)
    20aa:	46bd      	mov	sp, r7
    20ac:	b004      	add	sp, #16
    20ae:	bd80      	pop	{r7, pc}
    20b0:	00001fcd 	.word	0x00001fcd

000020b4 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    20b4:	b580      	push	{r7, lr}
    20b6:	b084      	sub	sp, #16
    20b8:	af00      	add	r7, sp, #0
    20ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    20bc:	687b      	ldr	r3, [r7, #4]
    20be:	681b      	ldr	r3, [r3, #0]
    20c0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	0018      	movs	r0, r3
    20c8:	4b0a      	ldr	r3, [pc, #40]	; (20f4 <tc_disable+0x40>)
    20ca:	4798      	blx	r3
    20cc:	1e03      	subs	r3, r0, #0
    20ce:	d1f9      	bne.n	20c4 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    20d0:	68fb      	ldr	r3, [r7, #12]
    20d2:	223b      	movs	r2, #59	; 0x3b
    20d4:	731a      	strb	r2, [r3, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    20d6:	68fb      	ldr	r3, [r7, #12]
    20d8:	223b      	movs	r2, #59	; 0x3b
    20da:	739a      	strb	r2, [r3, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    20dc:	68fb      	ldr	r3, [r7, #12]
    20de:	881b      	ldrh	r3, [r3, #0]
    20e0:	b29b      	uxth	r3, r3
    20e2:	2202      	movs	r2, #2
    20e4:	4393      	bics	r3, r2
    20e6:	b29a      	uxth	r2, r3
    20e8:	68fb      	ldr	r3, [r7, #12]
    20ea:	801a      	strh	r2, [r3, #0]
}
    20ec:	46c0      	nop			; (mov r8, r8)
    20ee:	46bd      	mov	sp, r7
    20f0:	b004      	add	sp, #16
    20f2:	bd80      	pop	{r7, pc}
    20f4:	00001fcd 	.word	0x00001fcd

000020f8 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	b082      	sub	sp, #8
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2100:	4a04      	ldr	r2, [pc, #16]	; (2114 <_tc_interrupt_get_interrupt_vector+0x1c>)
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	18d3      	adds	r3, r2, r3
    2106:	781b      	ldrb	r3, [r3, #0]
    2108:	b25b      	sxtb	r3, r3
}
    210a:	0018      	movs	r0, r3
    210c:	46bd      	mov	sp, r7
    210e:	b002      	add	sp, #8
    2110:	bd80      	pop	{r7, pc}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	20000020 	.word	0x20000020

00002118 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    2118:	b580      	push	{r7, lr}
    211a:	b082      	sub	sp, #8
    211c:	af00      	add	r7, sp, #0
    211e:	6078      	str	r0, [r7, #4]
    2120:	000a      	movs	r2, r1
    2122:	1cfb      	adds	r3, r7, #3
    2124:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	0018      	movs	r0, r3
    212c:	4b22      	ldr	r3, [pc, #136]	; (21b8 <tc_enable_callback+0xa0>)
    212e:	4798      	blx	r3
    2130:	0003      	movs	r3, r0
    2132:	0018      	movs	r0, r3
    2134:	4b21      	ldr	r3, [pc, #132]	; (21bc <tc_enable_callback+0xa4>)
    2136:	4798      	blx	r3
    2138:	0003      	movs	r3, r0
    213a:	0018      	movs	r0, r3
    213c:	4b20      	ldr	r3, [pc, #128]	; (21c0 <tc_enable_callback+0xa8>)
    213e:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2140:	1cfb      	adds	r3, r7, #3
    2142:	781b      	ldrb	r3, [r3, #0]
    2144:	2b02      	cmp	r3, #2
    2146:	d10b      	bne.n	2160 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	7e5b      	ldrb	r3, [r3, #25]
    214c:	2210      	movs	r2, #16
    214e:	4313      	orrs	r3, r2
    2150:	b2da      	uxtb	r2, r3
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	2210      	movs	r2, #16
    215c:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    215e:	e026      	b.n	21ae <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2160:	1cfb      	adds	r3, r7, #3
    2162:	781b      	ldrb	r3, [r3, #0]
    2164:	2b03      	cmp	r3, #3
    2166:	d10b      	bne.n	2180 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	7e5b      	ldrb	r3, [r3, #25]
    216c:	2220      	movs	r2, #32
    216e:	4313      	orrs	r3, r2
    2170:	b2da      	uxtb	r2, r3
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	681b      	ldr	r3, [r3, #0]
    217a:	2220      	movs	r2, #32
    217c:	735a      	strb	r2, [r3, #13]
}
    217e:	e016      	b.n	21ae <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	7e5b      	ldrb	r3, [r3, #25]
    2184:	b25a      	sxtb	r2, r3
    2186:	1cfb      	adds	r3, r7, #3
    2188:	781b      	ldrb	r3, [r3, #0]
    218a:	2101      	movs	r1, #1
    218c:	4099      	lsls	r1, r3
    218e:	000b      	movs	r3, r1
    2190:	b25b      	sxtb	r3, r3
    2192:	4313      	orrs	r3, r2
    2194:	b25b      	sxtb	r3, r3
    2196:	b2da      	uxtb	r2, r3
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	681b      	ldr	r3, [r3, #0]
    21a0:	1cfa      	adds	r2, r7, #3
    21a2:	7812      	ldrb	r2, [r2, #0]
    21a4:	2101      	movs	r1, #1
    21a6:	4091      	lsls	r1, r2
    21a8:	000a      	movs	r2, r1
    21aa:	b2d2      	uxtb	r2, r2
    21ac:	735a      	strb	r2, [r3, #13]
}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	46bd      	mov	sp, r7
    21b2:	b002      	add	sp, #8
    21b4:	bd80      	pop	{r7, pc}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	00001811 	.word	0x00001811
    21bc:	000020f9 	.word	0x000020f9
    21c0:	00001fa1 	.word	0x00001fa1

000021c4 <configure_port_pins>:
/************************************************************************/

void configure_port_pins(void);

void configure_port_pins(void)
{
    21c4:	b580      	push	{r7, lr}
    21c6:	b082      	sub	sp, #8
    21c8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    21ca:	1d3b      	adds	r3, r7, #4
    21cc:	0018      	movs	r0, r3
    21ce:	4b0e      	ldr	r3, [pc, #56]	; (2208 <configure_port_pins+0x44>)
    21d0:	4798      	blx	r3
	-Disable pull-up
	- check level on line to detect if VBUS is high and USB cable is present.
	
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    21d2:	1d3b      	adds	r3, r7, #4
    21d4:	2200      	movs	r2, #0
    21d6:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    21d8:	1d3b      	adds	r3, r7, #4
    21da:	2202      	movs	r2, #2
    21dc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
    21de:	1d3b      	adds	r3, r7, #4
    21e0:	0019      	movs	r1, r3
    21e2:	201b      	movs	r0, #27
    21e4:	4b09      	ldr	r3, [pc, #36]	; (220c <configure_port_pins+0x48>)
    21e6:	4798      	blx	r3
	
	MOTOR'S NSLEEP PIN
	
	*/
	
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    21e8:	1d3b      	adds	r3, r7, #4
    21ea:	2201      	movs	r2, #1
    21ec:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;						// START AT PULL DOWN.
    21ee:	1d3b      	adds	r3, r7, #4
    21f0:	2202      	movs	r2, #2
    21f2:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
    21f4:	1d3b      	adds	r3, r7, #4
    21f6:	0019      	movs	r1, r3
    21f8:	2006      	movs	r0, #6
    21fa:	4b04      	ldr	r3, [pc, #16]	; (220c <configure_port_pins+0x48>)
    21fc:	4798      	blx	r3
	
}
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	46bd      	mov	sp, r7
    2202:	b002      	add	sp, #8
    2204:	bd80      	pop	{r7, pc}
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	00001ec9 	.word	0x00001ec9
    220c:	0000074d 	.word	0x0000074d

00002210 <sys_tc_callback>:
void configure_system_tc (void);
void system_tc_callbacks (void);
void sys_tc_callback (struct tc_module *const module_inst);

void sys_tc_callback(struct tc_module *const module_inst)
{
    2210:	b580      	push	{r7, lr}
    2212:	b082      	sub	sp, #8
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
	static int tick_count_50ms;
	static int tick_count_100ms;
	static int tick_count_200ms;
	
	
	tick_count_1ms++;
    2218:	4b22      	ldr	r3, [pc, #136]	; (22a4 <sys_tc_callback+0x94>)
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	1c5a      	adds	r2, r3, #1
    221e:	4b21      	ldr	r3, [pc, #132]	; (22a4 <sys_tc_callback+0x94>)
    2220:	601a      	str	r2, [r3, #0]
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
    2222:	4b20      	ldr	r3, [pc, #128]	; (22a4 <sys_tc_callback+0x94>)
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	2b09      	cmp	r3, #9
    2228:	dd0a      	ble.n	2240 <sys_tc_callback+0x30>
	{
		tick_count_10ms++;
    222a:	4b1f      	ldr	r3, [pc, #124]	; (22a8 <sys_tc_callback+0x98>)
    222c:	681b      	ldr	r3, [r3, #0]
    222e:	1c5a      	adds	r2, r3, #1
    2230:	4b1d      	ldr	r3, [pc, #116]	; (22a8 <sys_tc_callback+0x98>)
    2232:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
    2234:	4b1b      	ldr	r3, [pc, #108]	; (22a4 <sys_tc_callback+0x94>)
    2236:	2200      	movs	r2, #0
    2238:	601a      	str	r2, [r3, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
    223a:	4b1c      	ldr	r3, [pc, #112]	; (22ac <sys_tc_callback+0x9c>)
    223c:	2201      	movs	r2, #1
    223e:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
    2240:	4b19      	ldr	r3, [pc, #100]	; (22a8 <sys_tc_callback+0x98>)
    2242:	681b      	ldr	r3, [r3, #0]
    2244:	2b04      	cmp	r3, #4
    2246:	dd0a      	ble.n	225e <sys_tc_callback+0x4e>
	{
		tick_count_50ms++;
    2248:	4b19      	ldr	r3, [pc, #100]	; (22b0 <sys_tc_callback+0xa0>)
    224a:	681b      	ldr	r3, [r3, #0]
    224c:	1c5a      	adds	r2, r3, #1
    224e:	4b18      	ldr	r3, [pc, #96]	; (22b0 <sys_tc_callback+0xa0>)
    2250:	601a      	str	r2, [r3, #0]
		tick_count_10ms = 0;
    2252:	4b15      	ldr	r3, [pc, #84]	; (22a8 <sys_tc_callback+0x98>)
    2254:	2200      	movs	r2, #0
    2256:	601a      	str	r2, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
    2258:	4b16      	ldr	r3, [pc, #88]	; (22b4 <sys_tc_callback+0xa4>)
    225a:	2201      	movs	r2, #1
    225c:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
    225e:	4b14      	ldr	r3, [pc, #80]	; (22b0 <sys_tc_callback+0xa0>)
    2260:	681b      	ldr	r3, [r3, #0]
    2262:	2b01      	cmp	r3, #1
    2264:	dd0a      	ble.n	227c <sys_tc_callback+0x6c>
	{
		tick_count_100ms++;
    2266:	4b14      	ldr	r3, [pc, #80]	; (22b8 <sys_tc_callback+0xa8>)
    2268:	681b      	ldr	r3, [r3, #0]
    226a:	1c5a      	adds	r2, r3, #1
    226c:	4b12      	ldr	r3, [pc, #72]	; (22b8 <sys_tc_callback+0xa8>)
    226e:	601a      	str	r2, [r3, #0]
		tick_count_50ms = 0;
    2270:	4b0f      	ldr	r3, [pc, #60]	; (22b0 <sys_tc_callback+0xa0>)
    2272:	2200      	movs	r2, #0
    2274:	601a      	str	r2, [r3, #0]
		SYS_TICK_100MS = true;									// Flag for 100ms interval
    2276:	4b11      	ldr	r3, [pc, #68]	; (22bc <sys_tc_callback+0xac>)
    2278:	2201      	movs	r2, #1
    227a:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
    227c:	4b0e      	ldr	r3, [pc, #56]	; (22b8 <sys_tc_callback+0xa8>)
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	2b01      	cmp	r3, #1
    2282:	dd0a      	ble.n	229a <sys_tc_callback+0x8a>
	{
		tick_count_200ms++;
    2284:	4b0e      	ldr	r3, [pc, #56]	; (22c0 <sys_tc_callback+0xb0>)
    2286:	681b      	ldr	r3, [r3, #0]
    2288:	1c5a      	adds	r2, r3, #1
    228a:	4b0d      	ldr	r3, [pc, #52]	; (22c0 <sys_tc_callback+0xb0>)
    228c:	601a      	str	r2, [r3, #0]
		tick_count_100ms = 0;
    228e:	4b0a      	ldr	r3, [pc, #40]	; (22b8 <sys_tc_callback+0xa8>)
    2290:	2200      	movs	r2, #0
    2292:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
    2294:	4b0b      	ldr	r3, [pc, #44]	; (22c4 <sys_tc_callback+0xb4>)
    2296:	2201      	movs	r2, #1
    2298:	701a      	strb	r2, [r3, #0]
	}
	
	
	
	
}
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	46bd      	mov	sp, r7
    229e:	b002      	add	sp, #8
    22a0:	bd80      	pop	{r7, pc}
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	2000007c 	.word	0x2000007c
    22a8:	20000080 	.word	0x20000080
    22ac:	20000074 	.word	0x20000074
    22b0:	20000084 	.word	0x20000084
    22b4:	20000075 	.word	0x20000075
    22b8:	20000088 	.word	0x20000088
    22bc:	20000076 	.word	0x20000076
    22c0:	2000008c 	.word	0x2000008c
    22c4:	20000077 	.word	0x20000077

000022c8 <configure_system_tc>:

void configure_system_tc (void)
{
    22c8:	b580      	push	{r7, lr}
    22ca:	b08e      	sub	sp, #56	; 0x38
    22cc:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);
    22ce:	1d3b      	adds	r3, r7, #4
    22d0:	0018      	movs	r0, r3
    22d2:	4b13      	ldr	r3, [pc, #76]	; (2320 <configure_system_tc+0x58>)
    22d4:	4798      	blx	r3
	config_tc.clock_source = TC_CLOCK_SOURCE;
    22d6:	1d3b      	adds	r3, r7, #4
    22d8:	2200      	movs	r2, #0
    22da:	701a      	strb	r2, [r3, #0]
	config_tc.counter_size = TC_COUNTER_SIZE;
    22dc:	1d3b      	adds	r3, r7, #4
    22de:	2204      	movs	r2, #4
    22e0:	709a      	strb	r2, [r3, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    22e2:	1d3b      	adds	r3, r7, #4
    22e4:	22a0      	movs	r2, #160	; 0xa0
    22e6:	00d2      	lsls	r2, r2, #3
    22e8:	809a      	strh	r2, [r3, #4]
	config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
    22ea:	1d3b      	adds	r3, r7, #4
    22ec:	2229      	movs	r2, #41	; 0x29
    22ee:	216f      	movs	r1, #111	; 0x6f
    22f0:	5499      	strb	r1, [r3, r2]
	
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    22f2:	1d3b      	adds	r3, r7, #4
    22f4:	2201      	movs	r2, #1
    22f6:	741a      	strb	r2, [r3, #16]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = PIN_PA15E_TC1_WO1; // PA15 FOR TESTING
    22f8:	1d3b      	adds	r3, r7, #4
    22fa:	220f      	movs	r2, #15
    22fc:	615a      	str	r2, [r3, #20]
	config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = MUX_PA15E_TC1_WO1; // PA15 FOR TESTING
    22fe:	1d3b      	adds	r3, r7, #4
    2300:	2204      	movs	r2, #4
    2302:	619a      	str	r2, [r3, #24]
	
	tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    2304:	1d3a      	adds	r2, r7, #4
    2306:	4907      	ldr	r1, [pc, #28]	; (2324 <configure_system_tc+0x5c>)
    2308:	4b07      	ldr	r3, [pc, #28]	; (2328 <configure_system_tc+0x60>)
    230a:	0018      	movs	r0, r3
    230c:	4b07      	ldr	r3, [pc, #28]	; (232c <configure_system_tc+0x64>)
    230e:	4798      	blx	r3
	tc_enable (&system_timer_instance);
    2310:	4b05      	ldr	r3, [pc, #20]	; (2328 <configure_system_tc+0x60>)
    2312:	0018      	movs	r0, r3
    2314:	4b06      	ldr	r3, [pc, #24]	; (2330 <configure_system_tc+0x68>)
    2316:	4798      	blx	r3
}
    2318:	46c0      	nop			; (mov r8, r8)
    231a:	46bd      	mov	sp, r7
    231c:	b00e      	add	sp, #56	; 0x38
    231e:	bd80      	pop	{r7, pc}
    2320:	00001ff5 	.word	0x00001ff5
    2324:	42001800 	.word	0x42001800
    2328:	200000e0 	.word	0x200000e0
    232c:	00001859 	.word	0x00001859
    2330:	0000207d 	.word	0x0000207d

00002334 <system_tc_callbacks>:

void system_tc_callbacks (void)
{
    2334:	b580      	push	{r7, lr}
    2336:	af00      	add	r7, sp, #0
	tc_register_callback (&system_timer_instance, sys_tc_callback,
    2338:	4906      	ldr	r1, [pc, #24]	; (2354 <system_tc_callbacks+0x20>)
    233a:	4b07      	ldr	r3, [pc, #28]	; (2358 <system_tc_callbacks+0x24>)
    233c:	2200      	movs	r2, #0
    233e:	0018      	movs	r0, r3
    2340:	4b06      	ldr	r3, [pc, #24]	; (235c <system_tc_callbacks+0x28>)
    2342:	4798      	blx	r3
	TC_CALLBACK_OVERFLOW);
	tc_enable_callback (&system_timer_instance, TC_CALLBACK_OVERFLOW);
    2344:	4b04      	ldr	r3, [pc, #16]	; (2358 <system_tc_callbacks+0x24>)
    2346:	2100      	movs	r1, #0
    2348:	0018      	movs	r0, r3
    234a:	4b05      	ldr	r3, [pc, #20]	; (2360 <system_tc_callbacks+0x2c>)
    234c:	4798      	blx	r3
}
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	46bd      	mov	sp, r7
    2352:	bd80      	pop	{r7, pc}
    2354:	00002211 	.word	0x00002211
    2358:	200000e0 	.word	0x200000e0
    235c:	000015f9 	.word	0x000015f9
    2360:	00002119 	.word	0x00002119

00002364 <configure_pwm_generator>:
/* TC - SYSTEM TIMER													*/
/************************************************************************/


static void configure_pwm_generator (void)
{
    2364:	b580      	push	{r7, lr}
    2366:	b08e      	sub	sp, #56	; 0x38
    2368:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);
    236a:	1d3b      	adds	r3, r7, #4
    236c:	0018      	movs	r0, r3
    236e:	4b17      	ldr	r3, [pc, #92]	; (23cc <configure_pwm_generator+0x68>)
    2370:	4798      	blx	r3

	config_tc.clock_source = TC_CLOCK_SOURCE;
    2372:	1d3b      	adds	r3, r7, #4
    2374:	2200      	movs	r2, #0
    2376:	701a      	strb	r2, [r3, #0]
	config_tc.counter_size = TC_COUNTER_SIZE;
    2378:	1d3b      	adds	r3, r7, #4
    237a:	2204      	movs	r2, #4
    237c:	709a      	strb	r2, [r3, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    237e:	1d3b      	adds	r3, r7, #4
    2380:	22a0      	movs	r2, #160	; 0xa0
    2382:	00d2      	lsls	r2, r2, #3
    2384:	809a      	strh	r2, [r3, #4]

	config_tc.counter_8_bit.value = 0;
    2386:	1d3b      	adds	r3, r7, #4
    2388:	2228      	movs	r2, #40	; 0x28
    238a:	2100      	movs	r1, #0
    238c:	5499      	strb	r1, [r3, r2]
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
    238e:	1d3b      	adds	r3, r7, #4
    2390:	2229      	movs	r2, #41	; 0x29
    2392:	2155      	movs	r1, #85	; 0x55
    2394:	5499      	strb	r1, [r3, r2]

	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
    2396:	1d3b      	adds	r3, r7, #4
    2398:	222a      	movs	r2, #42	; 0x2a
    239a:	2115      	movs	r1, #21
    239c:	5499      	strb	r1, [r3, r2]

	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    239e:	1d3b      	adds	r3, r7, #4
    23a0:	2240      	movs	r2, #64	; 0x40
    23a2:	719a      	strb	r2, [r3, #6]
	config_tc.pwm_channel[0].pin_out = PIN_PA10E_TC2_WO0;
    23a4:	1d3b      	adds	r3, r7, #4
    23a6:	220a      	movs	r2, #10
    23a8:	615a      	str	r2, [r3, #20]
	config_tc.pwm_channel[0].pin_mux = MUX_PA10E_TC2_WO0;
    23aa:	1d3b      	adds	r3, r7, #4
    23ac:	2204      	movs	r2, #4
    23ae:	619a      	str	r2, [r3, #24]

	config_tc.pwm_channel[0].enabled = true;
    23b0:	1d3b      	adds	r3, r7, #4
    23b2:	2201      	movs	r2, #1
    23b4:	741a      	strb	r2, [r3, #16]
	
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
    23b6:	1d3a      	adds	r2, r7, #4
    23b8:	4905      	ldr	r1, [pc, #20]	; (23d0 <configure_pwm_generator+0x6c>)
    23ba:	4b06      	ldr	r3, [pc, #24]	; (23d4 <configure_pwm_generator+0x70>)
    23bc:	0018      	movs	r0, r3
    23be:	4b06      	ldr	r3, [pc, #24]	; (23d8 <configure_pwm_generator+0x74>)
    23c0:	4798      	blx	r3

	
}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	46bd      	mov	sp, r7
    23c6:	b00e      	add	sp, #56	; 0x38
    23c8:	bd80      	pop	{r7, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	00001ff5 	.word	0x00001ff5
    23d0:	42001c00 	.word	0x42001c00
    23d4:	200000fc 	.word	0x200000fc
    23d8:	00001859 	.word	0x00001859

000023dc <is_button_pressed>:



bool is_button_pressed (void)
{
    23dc:	b580      	push	{r7, lr}
    23de:	af00      	add	r7, sp, #0

	if (!port_pin_get_input_level (SW0_PIN))
    23e0:	200e      	movs	r0, #14
    23e2:	4b1f      	ldr	r3, [pc, #124]	; (2460 <is_button_pressed+0x84>)
    23e4:	4798      	blx	r3
    23e6:	0003      	movs	r3, r0
    23e8:	001a      	movs	r2, r3
    23ea:	2301      	movs	r3, #1
    23ec:	4053      	eors	r3, r2
    23ee:	b2db      	uxtb	r3, r3
    23f0:	2b00      	cmp	r3, #0
    23f2:	d00d      	beq.n	2410 <is_button_pressed+0x34>
	{
		BUTTON_PRESS_STATUS = true;
    23f4:	4b1b      	ldr	r3, [pc, #108]	; (2464 <is_button_pressed+0x88>)
    23f6:	2201      	movs	r2, #1
    23f8:	701a      	strb	r2, [r3, #0]
		press_delay_count--;
    23fa:	4b1b      	ldr	r3, [pc, #108]	; (2468 <is_button_pressed+0x8c>)
    23fc:	681b      	ldr	r3, [r3, #0]
    23fe:	1e5a      	subs	r2, r3, #1
    2400:	4b19      	ldr	r3, [pc, #100]	; (2468 <is_button_pressed+0x8c>)
    2402:	601a      	str	r2, [r3, #0]
		long_press_delay_count--;
    2404:	4b19      	ldr	r3, [pc, #100]	; (246c <is_button_pressed+0x90>)
    2406:	681b      	ldr	r3, [r3, #0]
    2408:	1e5a      	subs	r2, r3, #1
    240a:	4b18      	ldr	r3, [pc, #96]	; (246c <is_button_pressed+0x90>)
    240c:	601a      	str	r2, [r3, #0]
    240e:	e009      	b.n	2424 <is_button_pressed+0x48>
		
	}else
	{
		BUTTON_PRESS_STATUS = false;
    2410:	4b14      	ldr	r3, [pc, #80]	; (2464 <is_button_pressed+0x88>)
    2412:	2200      	movs	r2, #0
    2414:	701a      	strb	r2, [r3, #0]
		press_delay_count = DELAY_DEBOUNCE_CN;
    2416:	4b14      	ldr	r3, [pc, #80]	; (2468 <is_button_pressed+0x8c>)
    2418:	2202      	movs	r2, #2
    241a:	601a      	str	r2, [r3, #0]
		long_press_delay_count = DELAY_PRESS_CN;
    241c:	4b13      	ldr	r3, [pc, #76]	; (246c <is_button_pressed+0x90>)
    241e:	22c8      	movs	r2, #200	; 0xc8
    2420:	0052      	lsls	r2, r2, #1
    2422:	601a      	str	r2, [r3, #0]
		
	}
	
	// long press delay logic
	if (long_press_delay_count <= 0){
    2424:	4b11      	ldr	r3, [pc, #68]	; (246c <is_button_pressed+0x90>)
    2426:	681b      	ldr	r3, [r3, #0]
    2428:	2b00      	cmp	r3, #0
    242a:	dc05      	bgt.n	2438 <is_button_pressed+0x5c>
		LongPressFlag = true;
    242c:	4b10      	ldr	r3, [pc, #64]	; (2470 <is_button_pressed+0x94>)
    242e:	2201      	movs	r2, #1
    2430:	701a      	strb	r2, [r3, #0]
		long_press_delay_count = 0 ;
    2432:	4b0e      	ldr	r3, [pc, #56]	; (246c <is_button_pressed+0x90>)
    2434:	2200      	movs	r2, #0
    2436:	601a      	str	r2, [r3, #0]
	}
	
	// debounce logic
	if (press_delay_count <= 0)
    2438:	4b0b      	ldr	r3, [pc, #44]	; (2468 <is_button_pressed+0x8c>)
    243a:	681b      	ldr	r3, [r3, #0]
    243c:	2b00      	cmp	r3, #0
    243e:	dc07      	bgt.n	2450 <is_button_pressed+0x74>
	{
		BUTTON_RELEASE_STATUS = false;
    2440:	4b0c      	ldr	r3, [pc, #48]	; (2474 <is_button_pressed+0x98>)
    2442:	2200      	movs	r2, #0
    2444:	701a      	strb	r2, [r3, #0]
		press_delay_count = 0;
    2446:	4b08      	ldr	r3, [pc, #32]	; (2468 <is_button_pressed+0x8c>)
    2448:	2200      	movs	r2, #0
    244a:	601a      	str	r2, [r3, #0]
		return true;
    244c:	2301      	movs	r3, #1
    244e:	e003      	b.n	2458 <is_button_pressed+0x7c>

	}
	else
	{
		BUTTON_RELEASE_STATUS = true;
    2450:	4b08      	ldr	r3, [pc, #32]	; (2474 <is_button_pressed+0x98>)
    2452:	2201      	movs	r2, #1
    2454:	701a      	strb	r2, [r3, #0]
		return false;
    2456:	2300      	movs	r3, #0
	}
	

	
}
    2458:	0018      	movs	r0, r3
    245a:	46bd      	mov	sp, r7
    245c:	bd80      	pop	{r7, pc}
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	00001eed 	.word	0x00001eed
    2464:	2000006d 	.word	0x2000006d
    2468:	20000018 	.word	0x20000018
    246c:	2000001c 	.word	0x2000001c
    2470:	20000078 	.word	0x20000078
    2474:	2000006e 	.word	0x2000006e

00002478 <pwm_motor_cleanup>:


void pwm_motor_cleanup(void);

void pwm_motor_cleanup(void){
    2478:	b580      	push	{r7, lr}
    247a:	af00      	add	r7, sp, #0
	PULSATING_MOTOR_ROUTINE = false;
    247c:	4b0c      	ldr	r3, [pc, #48]	; (24b0 <pwm_motor_cleanup+0x38>)
    247e:	2200      	movs	r2, #0
    2480:	701a      	strb	r2, [r3, #0]
	toggle_count = 0;
    2482:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <pwm_motor_cleanup+0x3c>)
    2484:	2200      	movs	r2, #0
    2486:	701a      	strb	r2, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,
    2488:	4b0b      	ldr	r3, [pc, #44]	; (24b8 <pwm_motor_cleanup+0x40>)
    248a:	2215      	movs	r2, #21
    248c:	2100      	movs	r1, #0
    248e:	0018      	movs	r0, r3
    2490:	4b0a      	ldr	r3, [pc, #40]	; (24bc <pwm_motor_cleanup+0x44>)
    2492:	4798      	blx	r3
	TC_COMPARE_CAPTURE_CHANNEL_0,
	INITIAL_DUTY_CYCLE);
	PWM_RUNNING = false;
    2494:	4b0a      	ldr	r3, [pc, #40]	; (24c0 <pwm_motor_cleanup+0x48>)
    2496:	2200      	movs	r2, #0
    2498:	701a      	strb	r2, [r3, #0]
	tc_disable (&pwm_generator_instance);
    249a:	4b07      	ldr	r3, [pc, #28]	; (24b8 <pwm_motor_cleanup+0x40>)
    249c:	0018      	movs	r0, r3
    249e:	4b09      	ldr	r3, [pc, #36]	; (24c4 <pwm_motor_cleanup+0x4c>)
    24a0:	4798      	blx	r3
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
    24a2:	2100      	movs	r1, #0
    24a4:	2006      	movs	r0, #6
    24a6:	4b08      	ldr	r3, [pc, #32]	; (24c8 <pwm_motor_cleanup+0x50>)
    24a8:	4798      	blx	r3
}
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	46bd      	mov	sp, r7
    24ae:	bd80      	pop	{r7, pc}
    24b0:	20000073 	.word	0x20000073
    24b4:	2000006c 	.word	0x2000006c
    24b8:	200000fc 	.word	0x200000fc
    24bc:	00001ca1 	.word	0x00001ca1
    24c0:	2000006f 	.word	0x2000006f
    24c4:	000020b5 	.word	0x000020b5
    24c8:	00001f31 	.word	0x00001f31

000024cc <regular_routine>:


void regular_routine (void)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	af00      	add	r7, sp, #0
	static bool motor_status_changed = false;
	
	if (is_button_pressed()){
    24d0:	4b1e      	ldr	r3, [pc, #120]	; (254c <regular_routine+0x80>)
    24d2:	4798      	blx	r3
    24d4:	1e03      	subs	r3, r0, #0
    24d6:	d02f      	beq.n	2538 <regular_routine+0x6c>
		if (LongPressFlag){
    24d8:	4b1d      	ldr	r3, [pc, #116]	; (2550 <regular_routine+0x84>)
    24da:	781b      	ldrb	r3, [r3, #0]
    24dc:	2b00      	cmp	r3, #0
    24de:	d006      	beq.n	24ee <regular_routine+0x22>
			LED_On(LED0_PIN);
    24e0:	2100      	movs	r1, #0
    24e2:	2010      	movs	r0, #16
    24e4:	4b1b      	ldr	r3, [pc, #108]	; (2554 <regular_routine+0x88>)
    24e6:	4798      	blx	r3
			pwm_motor_cleanup();
    24e8:	4b1b      	ldr	r3, [pc, #108]	; (2558 <regular_routine+0x8c>)
    24ea:	4798      	blx	r3
    24ec:	e024      	b.n	2538 <regular_routine+0x6c>
			*/
			
			} else {
			
			// routine for motor (regular)
			if (!motor_status_changed)
    24ee:	4b1b      	ldr	r3, [pc, #108]	; (255c <regular_routine+0x90>)
    24f0:	781b      	ldrb	r3, [r3, #0]
    24f2:	2201      	movs	r2, #1
    24f4:	4053      	eors	r3, r2
    24f6:	b2db      	uxtb	r3, r3
    24f8:	2b00      	cmp	r3, #0
    24fa:	d01d      	beq.n	2538 <regular_routine+0x6c>
			{
				toggle_count++;
    24fc:	4b18      	ldr	r3, [pc, #96]	; (2560 <regular_routine+0x94>)
    24fe:	781b      	ldrb	r3, [r3, #0]
    2500:	3301      	adds	r3, #1
    2502:	b2da      	uxtb	r2, r3
    2504:	4b16      	ldr	r3, [pc, #88]	; (2560 <regular_routine+0x94>)
    2506:	701a      	strb	r2, [r3, #0]
				motor_status_changed = true;
    2508:	4b14      	ldr	r3, [pc, #80]	; (255c <regular_routine+0x90>)
    250a:	2201      	movs	r2, #1
    250c:	701a      	strb	r2, [r3, #0]
				if (!PWM_RUNNING)
    250e:	4b15      	ldr	r3, [pc, #84]	; (2564 <regular_routine+0x98>)
    2510:	781b      	ldrb	r3, [r3, #0]
    2512:	2201      	movs	r2, #1
    2514:	4053      	eors	r3, r2
    2516:	b2db      	uxtb	r3, r3
    2518:	2b00      	cmp	r3, #0
    251a:	d00b      	beq.n	2534 <regular_routine+0x68>
				{
					PWM_RUNNING = true;
    251c:	4b11      	ldr	r3, [pc, #68]	; (2564 <regular_routine+0x98>)
    251e:	2201      	movs	r2, #1
    2520:	701a      	strb	r2, [r3, #0]
					tc_enable (&pwm_generator_instance);
    2522:	4b11      	ldr	r3, [pc, #68]	; (2568 <regular_routine+0x9c>)
    2524:	0018      	movs	r0, r3
    2526:	4b11      	ldr	r3, [pc, #68]	; (256c <regular_routine+0xa0>)
    2528:	4798      	blx	r3
					port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
    252a:	2101      	movs	r1, #1
    252c:	2006      	movs	r0, #6
    252e:	4b09      	ldr	r3, [pc, #36]	; (2554 <regular_routine+0x88>)
    2530:	4798      	blx	r3
    2532:	e001      	b.n	2538 <regular_routine+0x6c>
				}
				else
				{
					cycle_pwm_duty ();
    2534:	4b0e      	ldr	r3, [pc, #56]	; (2570 <regular_routine+0xa4>)
    2536:	4798      	blx	r3
			}
		}
		
	}

	if (BUTTON_RELEASE_STATUS)
    2538:	4b0e      	ldr	r3, [pc, #56]	; (2574 <regular_routine+0xa8>)
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	2b00      	cmp	r3, #0
    253e:	d002      	beq.n	2546 <regular_routine+0x7a>
	{
		motor_status_changed = false;
    2540:	4b06      	ldr	r3, [pc, #24]	; (255c <regular_routine+0x90>)
    2542:	2200      	movs	r2, #0
    2544:	701a      	strb	r2, [r3, #0]
	}
}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	46bd      	mov	sp, r7
    254a:	bd80      	pop	{r7, pc}
    254c:	000023dd 	.word	0x000023dd
    2550:	20000078 	.word	0x20000078
    2554:	00001f31 	.word	0x00001f31
    2558:	00002479 	.word	0x00002479
    255c:	20000090 	.word	0x20000090
    2560:	2000006c 	.word	0x2000006c
    2564:	2000006f 	.word	0x2000006f
    2568:	200000fc 	.word	0x200000fc
    256c:	0000207d 	.word	0x0000207d
    2570:	00002579 	.word	0x00002579
    2574:	2000006e 	.word	0x2000006e

00002578 <cycle_pwm_duty>:




void cycle_pwm_duty (void)
{
    2578:	b580      	push	{r7, lr}
    257a:	af00      	add	r7, sp, #0
	if (PWM_RUNNING)
    257c:	4b18      	ldr	r3, [pc, #96]	; (25e0 <cycle_pwm_duty+0x68>)
    257e:	781b      	ldrb	r3, [r3, #0]
    2580:	2b00      	cmp	r3, #0
    2582:	d029      	beq.n	25d8 <cycle_pwm_duty+0x60>
	{
		
		if (toggle_count == 2)
    2584:	4b17      	ldr	r3, [pc, #92]	; (25e4 <cycle_pwm_duty+0x6c>)
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	2b02      	cmp	r3, #2
    258a:	d106      	bne.n	259a <cycle_pwm_duty+0x22>
		{
			tc_set_compare_value (&pwm_generator_instance,
    258c:	4b16      	ldr	r3, [pc, #88]	; (25e8 <cycle_pwm_duty+0x70>)
    258e:	2222      	movs	r2, #34	; 0x22
    2590:	2100      	movs	r1, #0
    2592:	0018      	movs	r0, r3
    2594:	4b15      	ldr	r3, [pc, #84]	; (25ec <cycle_pwm_duty+0x74>)
    2596:	4798      	blx	r3
		else if (toggle_count > 4)
		{
			pwm_motor_cleanup();
		}
	}
}
    2598:	e01e      	b.n	25d8 <cycle_pwm_duty+0x60>
		else if (toggle_count == 3)
    259a:	4b12      	ldr	r3, [pc, #72]	; (25e4 <cycle_pwm_duty+0x6c>)
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	2b03      	cmp	r3, #3
    25a0:	d106      	bne.n	25b0 <cycle_pwm_duty+0x38>
			tc_set_compare_value (&pwm_generator_instance,
    25a2:	4b11      	ldr	r3, [pc, #68]	; (25e8 <cycle_pwm_duty+0x70>)
    25a4:	224d      	movs	r2, #77	; 0x4d
    25a6:	2100      	movs	r1, #0
    25a8:	0018      	movs	r0, r3
    25aa:	4b10      	ldr	r3, [pc, #64]	; (25ec <cycle_pwm_duty+0x74>)
    25ac:	4798      	blx	r3
}
    25ae:	e013      	b.n	25d8 <cycle_pwm_duty+0x60>
		else if (toggle_count == 4)
    25b0:	4b0c      	ldr	r3, [pc, #48]	; (25e4 <cycle_pwm_duty+0x6c>)
    25b2:	781b      	ldrb	r3, [r3, #0]
    25b4:	2b04      	cmp	r3, #4
    25b6:	d109      	bne.n	25cc <cycle_pwm_duty+0x54>
			PULSATING_MOTOR_ROUTINE = true;
    25b8:	4b0d      	ldr	r3, [pc, #52]	; (25f0 <cycle_pwm_duty+0x78>)
    25ba:	2201      	movs	r2, #1
    25bc:	701a      	strb	r2, [r3, #0]
			tc_set_compare_value (&pwm_generator_instance,
    25be:	4b0a      	ldr	r3, [pc, #40]	; (25e8 <cycle_pwm_duty+0x70>)
    25c0:	224d      	movs	r2, #77	; 0x4d
    25c2:	2100      	movs	r1, #0
    25c4:	0018      	movs	r0, r3
    25c6:	4b09      	ldr	r3, [pc, #36]	; (25ec <cycle_pwm_duty+0x74>)
    25c8:	4798      	blx	r3
}
    25ca:	e005      	b.n	25d8 <cycle_pwm_duty+0x60>
		else if (toggle_count > 4)
    25cc:	4b05      	ldr	r3, [pc, #20]	; (25e4 <cycle_pwm_duty+0x6c>)
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	2b04      	cmp	r3, #4
    25d2:	d901      	bls.n	25d8 <cycle_pwm_duty+0x60>
			pwm_motor_cleanup();
    25d4:	4b07      	ldr	r3, [pc, #28]	; (25f4 <cycle_pwm_duty+0x7c>)
    25d6:	4798      	blx	r3
}
    25d8:	46c0      	nop			; (mov r8, r8)
    25da:	46bd      	mov	sp, r7
    25dc:	bd80      	pop	{r7, pc}
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	2000006f 	.word	0x2000006f
    25e4:	2000006c 	.word	0x2000006c
    25e8:	200000fc 	.word	0x200000fc
    25ec:	00001ca1 	.word	0x00001ca1
    25f0:	20000073 	.word	0x20000073
    25f4:	00002479 	.word	0x00002479

000025f8 <get_vbus_state>:
/************************************************************************/


void get_vbus_state(void);

void get_vbus_state(void){
    25f8:	b580      	push	{r7, lr}
    25fa:	af00      	add	r7, sp, #0
	VBUS_STATE = port_pin_get_input_level(VBUS_PIN);
    25fc:	201b      	movs	r0, #27
    25fe:	4b04      	ldr	r3, [pc, #16]	; (2610 <get_vbus_state+0x18>)
    2600:	4798      	blx	r3
    2602:	0003      	movs	r3, r0
    2604:	001a      	movs	r2, r3
    2606:	4b03      	ldr	r3, [pc, #12]	; (2614 <get_vbus_state+0x1c>)
    2608:	701a      	strb	r2, [r3, #0]
}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	46bd      	mov	sp, r7
    260e:	bd80      	pop	{r7, pc}
    2610:	00001eed 	.word	0x00001eed
    2614:	20000070 	.word	0x20000070

00002618 <update_battery_states>:



void update_battery_states(void);

void update_battery_states(void){
    2618:	b580      	push	{r7, lr}
    261a:	af00      	add	r7, sp, #0
	
	/*
	Update Global Var based on state (using VBUS & CHRGHN)
	*/
	
}
    261c:	46c0      	nop			; (mov r8, r8)
    261e:	46bd      	mov	sp, r7
    2620:	bd80      	pop	{r7, pc}

00002622 <sample_battery_states>:


void sample_battery_states(void);


void sample_battery_states(void){
    2622:	b580      	push	{r7, lr}
    2624:	af00      	add	r7, sp, #0
	1. read from ADC
	2. do math to bring in Voltage (V)
	3. based on threshold, set global flags
	
	*/
}
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	46bd      	mov	sp, r7
    262a:	bd80      	pop	{r7, pc}

0000262c <display_battery_state>:
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void);

void display_battery_state(void){
    262c:	b580      	push	{r7, lr}
    262e:	af00      	add	r7, sp, #0
	
	if (BATTERY_CHARGING){
		
	}
	
}
    2630:	46c0      	nop			; (mov r8, r8)
    2632:	46bd      	mov	sp, r7
    2634:	bd80      	pop	{r7, pc}
	...

00002638 <toggle_nsleep>:


void toggle_nsleep(void);

void toggle_nsleep(void){
    2638:	b580      	push	{r7, lr}
    263a:	af00      	add	r7, sp, #0
	static bool PULSATING_MOTOR = false;
	if (PULSATING_MOTOR_ROUTINE){
    263c:	4b10      	ldr	r3, [pc, #64]	; (2680 <toggle_nsleep+0x48>)
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	2b00      	cmp	r3, #0
    2642:	d01a      	beq.n	267a <toggle_nsleep+0x42>
		if (PULSATING_MOTOR){
    2644:	4b0f      	ldr	r3, [pc, #60]	; (2684 <toggle_nsleep+0x4c>)
    2646:	781b      	ldrb	r3, [r3, #0]
    2648:	2b00      	cmp	r3, #0
    264a:	d00b      	beq.n	2664 <toggle_nsleep+0x2c>
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
    264c:	2100      	movs	r1, #0
    264e:	2006      	movs	r0, #6
    2650:	4b0d      	ldr	r3, [pc, #52]	; (2688 <toggle_nsleep+0x50>)
    2652:	4798      	blx	r3
			LED_Off(LED0_PIN);
    2654:	2101      	movs	r1, #1
    2656:	2010      	movs	r0, #16
    2658:	4b0b      	ldr	r3, [pc, #44]	; (2688 <toggle_nsleep+0x50>)
    265a:	4798      	blx	r3
			PULSATING_MOTOR = false;
    265c:	4b09      	ldr	r3, [pc, #36]	; (2684 <toggle_nsleep+0x4c>)
    265e:	2200      	movs	r2, #0
    2660:	701a      	strb	r2, [r3, #0]
			PULSATING_MOTOR = true;
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
			LED_On(LED0_PIN);
		}
	}
}
    2662:	e00a      	b.n	267a <toggle_nsleep+0x42>
			PULSATING_MOTOR = true;
    2664:	4b07      	ldr	r3, [pc, #28]	; (2684 <toggle_nsleep+0x4c>)
    2666:	2201      	movs	r2, #1
    2668:	701a      	strb	r2, [r3, #0]
			port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
    266a:	2101      	movs	r1, #1
    266c:	2006      	movs	r0, #6
    266e:	4b06      	ldr	r3, [pc, #24]	; (2688 <toggle_nsleep+0x50>)
    2670:	4798      	blx	r3
			LED_On(LED0_PIN);
    2672:	2100      	movs	r1, #0
    2674:	2010      	movs	r0, #16
    2676:	4b04      	ldr	r3, [pc, #16]	; (2688 <toggle_nsleep+0x50>)
    2678:	4798      	blx	r3
}
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	46bd      	mov	sp, r7
    267e:	bd80      	pop	{r7, pc}
    2680:	20000073 	.word	0x20000073
    2684:	20000091 	.word	0x20000091
    2688:	00001f31 	.word	0x00001f31

0000268c <system_state>:
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void);

void system_state(void){
    268c:	b580      	push	{r7, lr}
    268e:	af00      	add	r7, sp, #0
	get_vbus_state();
    2690:	4b04      	ldr	r3, [pc, #16]	; (26a4 <system_state+0x18>)
    2692:	4798      	blx	r3
	update_battery_states();
    2694:	4b04      	ldr	r3, [pc, #16]	; (26a8 <system_state+0x1c>)
    2696:	4798      	blx	r3
	sample_battery_states();
    2698:	4b04      	ldr	r3, [pc, #16]	; (26ac <system_state+0x20>)
    269a:	4798      	blx	r3
}
    269c:	46c0      	nop			; (mov r8, r8)
    269e:	46bd      	mov	sp, r7
    26a0:	bd80      	pop	{r7, pc}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	000025f9 	.word	0x000025f9
    26a8:	00002619 	.word	0x00002619
    26ac:	00002623 	.word	0x00002623

000026b0 <system_logic>:
/* LOGIC MACHINE		                                                */
/************************************************************************/

void system_logic(void);

void system_logic(void){
    26b0:	b580      	push	{r7, lr}
    26b2:	af00      	add	r7, sp, #0
	if (!VBUS_STATE){
    26b4:	4b17      	ldr	r3, [pc, #92]	; (2714 <system_logic+0x64>)
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	2201      	movs	r2, #1
    26ba:	4053      	eors	r3, r2
    26bc:	b2db      	uxtb	r3, r3
    26be:	2b00      	cmp	r3, #0
    26c0:	d001      	beq.n	26c6 <system_logic+0x16>
		configure_pwm_generator();					// Enable Motor PWM
    26c2:	4b15      	ldr	r3, [pc, #84]	; (2718 <system_logic+0x68>)
    26c4:	4798      	blx	r3
	}
	
	if (VBUS_STATE){
    26c6:	4b13      	ldr	r3, [pc, #76]	; (2714 <system_logic+0x64>)
    26c8:	781b      	ldrb	r3, [r3, #0]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d001      	beq.n	26d2 <system_logic+0x22>
		// LED_On(LED0_PIN);						// Verify VBUS Connection
		display_battery_state();					// Display colors mapped to battery state
    26ce:	4b13      	ldr	r3, [pc, #76]	; (271c <system_logic+0x6c>)
    26d0:	4798      	blx	r3
	}
	
	if (BATTERY_LOW){
    26d2:	4b13      	ldr	r3, [pc, #76]	; (2720 <system_logic+0x70>)
    26d4:	781b      	ldrb	r3, [r3, #0]
    26d6:	2b00      	cmp	r3, #0
    26d8:	d001      	beq.n	26de <system_logic+0x2e>
		display_battery_state();					// Steady Red
    26da:	4b10      	ldr	r3, [pc, #64]	; (271c <system_logic+0x6c>)
    26dc:	4798      	blx	r3
	}
	
	if (BATTERY_LOWEST){
    26de:	4b11      	ldr	r3, [pc, #68]	; (2724 <system_logic+0x74>)
    26e0:	781b      	ldrb	r3, [r3, #0]
    26e2:	2b00      	cmp	r3, #0
    26e4:	d001      	beq.n	26ea <system_logic+0x3a>
		display_battery_state();					// Blink Red
    26e6:	4b0d      	ldr	r3, [pc, #52]	; (271c <system_logic+0x6c>)
    26e8:	4798      	blx	r3
	}
	
	if (SYS_TICK_10MS){
    26ea:	4b0f      	ldr	r3, [pc, #60]	; (2728 <system_logic+0x78>)
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d004      	beq.n	26fc <system_logic+0x4c>
		SYS_TICK_10MS = false;
    26f2:	4b0d      	ldr	r3, [pc, #52]	; (2728 <system_logic+0x78>)
    26f4:	2200      	movs	r2, #0
    26f6:	701a      	strb	r2, [r3, #0]
		regular_routine();
    26f8:	4b0c      	ldr	r3, [pc, #48]	; (272c <system_logic+0x7c>)
    26fa:	4798      	blx	r3
	}
	
	if (SYS_TICK_200MS){
    26fc:	4b0c      	ldr	r3, [pc, #48]	; (2730 <system_logic+0x80>)
    26fe:	781b      	ldrb	r3, [r3, #0]
    2700:	2b00      	cmp	r3, #0
    2702:	d004      	beq.n	270e <system_logic+0x5e>
		SYS_TICK_200MS = false;
    2704:	4b0a      	ldr	r3, [pc, #40]	; (2730 <system_logic+0x80>)
    2706:	2200      	movs	r2, #0
    2708:	701a      	strb	r2, [r3, #0]
		toggle_nsleep();
    270a:	4b0a      	ldr	r3, [pc, #40]	; (2734 <system_logic+0x84>)
    270c:	4798      	blx	r3
	}


}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	46bd      	mov	sp, r7
    2712:	bd80      	pop	{r7, pc}
    2714:	20000070 	.word	0x20000070
    2718:	00002365 	.word	0x00002365
    271c:	0000262d 	.word	0x0000262d
    2720:	20000071 	.word	0x20000071
    2724:	20000072 	.word	0x20000072
    2728:	20000074 	.word	0x20000074
    272c:	000024cd 	.word	0x000024cd
    2730:	20000077 	.word	0x20000077
    2734:	00002639 	.word	0x00002639

00002738 <startup_default_pin_state>:
/* Start Up Configurations                                              */
/************************************************************************/

void startup_default_pin_state(void);

void startup_default_pin_state(void){
    2738:	b580      	push	{r7, lr}
    273a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
    273c:	2100      	movs	r1, #0
    273e:	2006      	movs	r0, #6
    2740:	4b02      	ldr	r3, [pc, #8]	; (274c <startup_default_pin_state+0x14>)
    2742:	4798      	blx	r3
}
    2744:	46c0      	nop			; (mov r8, r8)
    2746:	46bd      	mov	sp, r7
    2748:	bd80      	pop	{r7, pc}
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	00001f31 	.word	0x00001f31

00002750 <startup_sys_configs>:


void startup_sys_configs(void);


void startup_sys_configs(void){
    2750:	b580      	push	{r7, lr}
    2752:	af00      	add	r7, sp, #0
	system_init ();									// System Initialize
    2754:	4b07      	ldr	r3, [pc, #28]	; (2774 <startup_sys_configs+0x24>)
    2756:	4798      	blx	r3
	system_interrupt_enable_global ();				// System Interrupts
    2758:	4b07      	ldr	r3, [pc, #28]	; (2778 <startup_sys_configs+0x28>)
    275a:	4798      	blx	r3
	configure_port_pins ();							// System PORTs
    275c:	4b07      	ldr	r3, [pc, #28]	; (277c <startup_sys_configs+0x2c>)
    275e:	4798      	blx	r3
	startup_default_pin_state();
    2760:	4b07      	ldr	r3, [pc, #28]	; (2780 <startup_sys_configs+0x30>)
    2762:	4798      	blx	r3
	configure_system_tc ();							// System Clock
    2764:	4b07      	ldr	r3, [pc, #28]	; (2784 <startup_sys_configs+0x34>)
    2766:	4798      	blx	r3
	system_tc_callbacks ();							// System Clock Callback
    2768:	4b07      	ldr	r3, [pc, #28]	; (2788 <startup_sys_configs+0x38>)
    276a:	4798      	blx	r3
}
    276c:	46c0      	nop			; (mov r8, r8)
    276e:	46bd      	mov	sp, r7
    2770:	bd80      	pop	{r7, pc}
    2772:	46c0      	nop			; (mov r8, r8)
    2774:	00001535 	.word	0x00001535
    2778:	00001f85 	.word	0x00001f85
    277c:	000021c5 	.word	0x000021c5
    2780:	00002739 	.word	0x00002739
    2784:	000022c9 	.word	0x000022c9
    2788:	00002335 	.word	0x00002335

0000278c <main>:



int main (void)
{
    278c:	b580      	push	{r7, lr}
    278e:	af00      	add	r7, sp, #0
	startup_sys_configs ();
    2790:	4b03      	ldr	r3, [pc, #12]	; (27a0 <main+0x14>)
    2792:	4798      	blx	r3
	
	while (true)
	{
		system_state();								// Get latest system_state
    2794:	4b03      	ldr	r3, [pc, #12]	; (27a4 <main+0x18>)
    2796:	4798      	blx	r3
		system_logic();								// Invoke System Logic
    2798:	4b03      	ldr	r3, [pc, #12]	; (27a8 <main+0x1c>)
    279a:	4798      	blx	r3
		system_state();								// Get latest system_state
    279c:	e7fa      	b.n	2794 <main+0x8>
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	00002751 	.word	0x00002751
    27a4:	0000268d 	.word	0x0000268d
    27a8:	000026b1 	.word	0x000026b1

000027ac <__libc_init_array>:
    27ac:	b570      	push	{r4, r5, r6, lr}
    27ae:	2600      	movs	r6, #0
    27b0:	4d0c      	ldr	r5, [pc, #48]	; (27e4 <__libc_init_array+0x38>)
    27b2:	4c0d      	ldr	r4, [pc, #52]	; (27e8 <__libc_init_array+0x3c>)
    27b4:	1b64      	subs	r4, r4, r5
    27b6:	10a4      	asrs	r4, r4, #2
    27b8:	42a6      	cmp	r6, r4
    27ba:	d109      	bne.n	27d0 <__libc_init_array+0x24>
    27bc:	2600      	movs	r6, #0
    27be:	f000 f85d 	bl	287c <_init>
    27c2:	4d0a      	ldr	r5, [pc, #40]	; (27ec <__libc_init_array+0x40>)
    27c4:	4c0a      	ldr	r4, [pc, #40]	; (27f0 <__libc_init_array+0x44>)
    27c6:	1b64      	subs	r4, r4, r5
    27c8:	10a4      	asrs	r4, r4, #2
    27ca:	42a6      	cmp	r6, r4
    27cc:	d105      	bne.n	27da <__libc_init_array+0x2e>
    27ce:	bd70      	pop	{r4, r5, r6, pc}
    27d0:	00b3      	lsls	r3, r6, #2
    27d2:	58eb      	ldr	r3, [r5, r3]
    27d4:	4798      	blx	r3
    27d6:	3601      	adds	r6, #1
    27d8:	e7ee      	b.n	27b8 <__libc_init_array+0xc>
    27da:	00b3      	lsls	r3, r6, #2
    27dc:	58eb      	ldr	r3, [r5, r3]
    27de:	4798      	blx	r3
    27e0:	3601      	adds	r6, #1
    27e2:	e7f2      	b.n	27ca <__libc_init_array+0x1e>
    27e4:	00002888 	.word	0x00002888
    27e8:	00002888 	.word	0x00002888
    27ec:	00002888 	.word	0x00002888
    27f0:	0000288c 	.word	0x0000288c
    27f4:	00000c38 	.word	0x00000c38
    27f8:	00000c88 	.word	0x00000c88
    27fc:	00000c88 	.word	0x00000c88
    2800:	00000c84 	.word	0x00000c84
    2804:	00000c2a 	.word	0x00000c2a
    2808:	00000c4a 	.word	0x00000c4a
    280c:	00000c1a 	.word	0x00000c1a
    2810:	00000c5c 	.word	0x00000c5c
    2814:	00000c6e 	.word	0x00000c6e
    2818:	00000cd6 	.word	0x00000cd6
    281c:	00000d04 	.word	0x00000d04
    2820:	00000d04 	.word	0x00000d04
    2824:	00000d00 	.word	0x00000d00
    2828:	00000cd0 	.word	0x00000cd0
    282c:	00000cdc 	.word	0x00000cdc
    2830:	00000cca 	.word	0x00000cca
    2834:	00000ce2 	.word	0x00000ce2
    2838:	00000ce8 	.word	0x00000ce8

0000283c <_tcc_intflag>:
    283c:	00000001 00000002 00000004 00000008     ................
    284c:	00001000 00002000 00004000 00008000     ..... ...@......
    285c:	00010000 00020000 00040000 00080000     ................
    286c:	42001800 42001c00 00001212 00800040     ...B...B....@...

0000287c <_init>:
    287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    287e:	46c0      	nop			; (mov r8, r8)
    2880:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2882:	bc08      	pop	{r3}
    2884:	469e      	mov	lr, r3
    2886:	4770      	bx	lr

00002888 <__init_array_start>:
    2888:	000000b5 	.word	0x000000b5

0000288c <_fini>:
    288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2892:	bc08      	pop	{r3}
    2894:	469e      	mov	lr, r3
    2896:	4770      	bx	lr

00002898 <__fini_array_start>:
    2898:	0000008d 	.word	0x0000008d
