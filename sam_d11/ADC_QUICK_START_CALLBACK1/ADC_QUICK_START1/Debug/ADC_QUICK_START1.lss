
ADC_QUICK_START1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000194c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  0000194c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  20000004  00001950  00020004  2**2
                  ALLOC
  3 .stack        00000400  20000048  00001994  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001231a  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001baa  00000000  00000000  0003239f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001058  00000000  00000000  00033f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000358  00000000  00000000  00034fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002b8  00000000  00000000  000352f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014352  00000000  00000000  000355b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000063e5  00000000  00000000  00049903  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000754fc  00000000  00000000  0004fce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a6c  00000000  00000000  000c51e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 04 00 20 1d 14 00 00 15 15 00 00 15 15 00 00     H.. ............
	...
      2c:	15 15 00 00 00 00 00 00 00 00 00 00 15 15 00 00     ................
      3c:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
      4c:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
      5c:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
      6c:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
      7c:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000004 	.word	0x20000004
      ac:	00000000 	.word	0x00000000
      b0:	0000194c 	.word	0x0000194c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000008 	.word	0x20000008
      e0:	0000194c 	.word	0x0000194c
      e4:	0000194c 	.word	0x0000194c
      e8:	00000000 	.word	0x00000000

000000ec <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
      ec:	b580      	push	{r7, lr}
      ee:	b082      	sub	sp, #8
      f0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
      f2:	4b10      	ldr	r3, [pc, #64]	; (134 <cpu_irq_enter_critical+0x48>)
      f4:	681b      	ldr	r3, [r3, #0]
      f6:	2b00      	cmp	r3, #0
      f8:	d112      	bne.n	120 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      fa:	f3ef 8310 	mrs	r3, PRIMASK
      fe:	607b      	str	r3, [r7, #4]
  return(result);
     100:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     102:	2b00      	cmp	r3, #0
     104:	d109      	bne.n	11a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     106:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     108:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     10c:	4b0a      	ldr	r3, [pc, #40]	; (138 <cpu_irq_enter_critical+0x4c>)
     10e:	2200      	movs	r2, #0
     110:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     112:	4b0a      	ldr	r3, [pc, #40]	; (13c <cpu_irq_enter_critical+0x50>)
     114:	2201      	movs	r2, #1
     116:	701a      	strb	r2, [r3, #0]
     118:	e002      	b.n	120 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     11a:	4b08      	ldr	r3, [pc, #32]	; (13c <cpu_irq_enter_critical+0x50>)
     11c:	2200      	movs	r2, #0
     11e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     120:	4b04      	ldr	r3, [pc, #16]	; (134 <cpu_irq_enter_critical+0x48>)
     122:	681b      	ldr	r3, [r3, #0]
     124:	1c5a      	adds	r2, r3, #1
     126:	4b03      	ldr	r3, [pc, #12]	; (134 <cpu_irq_enter_critical+0x48>)
     128:	601a      	str	r2, [r3, #0]
}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	46bd      	mov	sp, r7
     12e:	b002      	add	sp, #8
     130:	bd80      	pop	{r7, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	20000020 	.word	0x20000020
     138:	20000000 	.word	0x20000000
     13c:	20000024 	.word	0x20000024

00000140 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     140:	b580      	push	{r7, lr}
     142:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     144:	4b0b      	ldr	r3, [pc, #44]	; (174 <cpu_irq_leave_critical+0x34>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	1e5a      	subs	r2, r3, #1
     14a:	4b0a      	ldr	r3, [pc, #40]	; (174 <cpu_irq_leave_critical+0x34>)
     14c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     14e:	4b09      	ldr	r3, [pc, #36]	; (174 <cpu_irq_leave_critical+0x34>)
     150:	681b      	ldr	r3, [r3, #0]
     152:	2b00      	cmp	r3, #0
     154:	d10a      	bne.n	16c <cpu_irq_leave_critical+0x2c>
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x38>)
     158:	781b      	ldrb	r3, [r3, #0]
     15a:	b2db      	uxtb	r3, r3
     15c:	2b00      	cmp	r3, #0
     15e:	d005      	beq.n	16c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     160:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x3c>)
     162:	2201      	movs	r2, #1
     164:	701a      	strb	r2, [r3, #0]
     166:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     16a:	b662      	cpsie	i
	}
}
     16c:	46c0      	nop			; (mov r8, r8)
     16e:	46bd      	mov	sp, r7
     170:	bd80      	pop	{r7, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	20000020 	.word	0x20000020
     178:	20000024 	.word	0x20000024
     17c:	20000000 	.word	0x20000000

00000180 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     180:	b580      	push	{r7, lr}
     182:	b084      	sub	sp, #16
     184:	af00      	add	r7, sp, #0
     186:	0002      	movs	r2, r0
     188:	1dfb      	adds	r3, r7, #7
     18a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     18c:	230f      	movs	r3, #15
     18e:	18fb      	adds	r3, r7, r3
     190:	1dfa      	adds	r2, r7, #7
     192:	7812      	ldrb	r2, [r2, #0]
     194:	09d2      	lsrs	r2, r2, #7
     196:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     198:	230e      	movs	r3, #14
     19a:	18fb      	adds	r3, r7, r3
     19c:	1dfa      	adds	r2, r7, #7
     19e:	7812      	ldrb	r2, [r2, #0]
     1a0:	0952      	lsrs	r2, r2, #5
     1a2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1a4:	4b0d      	ldr	r3, [pc, #52]	; (1dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1a6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1a8:	230f      	movs	r3, #15
     1aa:	18fb      	adds	r3, r7, r3
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	2b00      	cmp	r3, #0
     1b0:	d10f      	bne.n	1d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     1b2:	230f      	movs	r3, #15
     1b4:	18fb      	adds	r3, r7, r3
     1b6:	781b      	ldrb	r3, [r3, #0]
     1b8:	009b      	lsls	r3, r3, #2
     1ba:	2210      	movs	r2, #16
     1bc:	4694      	mov	ip, r2
     1be:	44bc      	add	ip, r7
     1c0:	4463      	add	r3, ip
     1c2:	3b08      	subs	r3, #8
     1c4:	681a      	ldr	r2, [r3, #0]
     1c6:	230e      	movs	r3, #14
     1c8:	18fb      	adds	r3, r7, r3
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	01db      	lsls	r3, r3, #7
     1ce:	18d3      	adds	r3, r2, r3
     1d0:	e000      	b.n	1d4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     1d2:	2300      	movs	r3, #0
	}
}
     1d4:	0018      	movs	r0, r3
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	41004400 	.word	0x41004400

000001e0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1e0:	b580      	push	{r7, lr}
     1e2:	b082      	sub	sp, #8
     1e4:	af00      	add	r7, sp, #0
     1e6:	0002      	movs	r2, r0
     1e8:	1dfb      	adds	r3, r7, #7
     1ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     1ec:	1dfb      	adds	r3, r7, #7
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	0018      	movs	r0, r3
     1f2:	4b03      	ldr	r3, [pc, #12]	; (200 <port_get_group_from_gpio_pin+0x20>)
     1f4:	4798      	blx	r3
     1f6:	0003      	movs	r3, r0
}
     1f8:	0018      	movs	r0, r3
     1fa:	46bd      	mov	sp, r7
     1fc:	b002      	add	sp, #8
     1fe:	bd80      	pop	{r7, pc}
     200:	00000181 	.word	0x00000181

00000204 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     204:	b580      	push	{r7, lr}
     206:	b082      	sub	sp, #8
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	2200      	movs	r2, #0
     210:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     212:	687b      	ldr	r3, [r7, #4]
     214:	2201      	movs	r2, #1
     216:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	2200      	movs	r2, #0
     21c:	709a      	strb	r2, [r3, #2]
}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46bd      	mov	sp, r7
     222:	b002      	add	sp, #8
     224:	bd80      	pop	{r7, pc}
	...

00000228 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     228:	b580      	push	{r7, lr}
     22a:	b084      	sub	sp, #16
     22c:	af00      	add	r7, sp, #0
     22e:	0002      	movs	r2, r0
     230:	1dfb      	adds	r3, r7, #7
     232:	701a      	strb	r2, [r3, #0]
     234:	1dbb      	adds	r3, r7, #6
     236:	1c0a      	adds	r2, r1, #0
     238:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     23a:	1dfb      	adds	r3, r7, #7
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	0018      	movs	r0, r3
     240:	4b0d      	ldr	r3, [pc, #52]	; (278 <port_pin_set_output_level+0x50>)
     242:	4798      	blx	r3
     244:	0003      	movs	r3, r0
     246:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     248:	1dfb      	adds	r3, r7, #7
     24a:	781b      	ldrb	r3, [r3, #0]
     24c:	221f      	movs	r2, #31
     24e:	4013      	ands	r3, r2
     250:	2201      	movs	r2, #1
     252:	409a      	lsls	r2, r3
     254:	0013      	movs	r3, r2
     256:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     258:	1dbb      	adds	r3, r7, #6
     25a:	781b      	ldrb	r3, [r3, #0]
     25c:	2b00      	cmp	r3, #0
     25e:	d003      	beq.n	268 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     260:	68fb      	ldr	r3, [r7, #12]
     262:	68ba      	ldr	r2, [r7, #8]
     264:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     266:	e002      	b.n	26e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     268:	68fb      	ldr	r3, [r7, #12]
     26a:	68ba      	ldr	r2, [r7, #8]
     26c:	615a      	str	r2, [r3, #20]
}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	46bd      	mov	sp, r7
     272:	b004      	add	sp, #16
     274:	bd80      	pop	{r7, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	000001e1 	.word	0x000001e1

0000027c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     27c:	b580      	push	{r7, lr}
     27e:	b082      	sub	sp, #8
     280:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     282:	1d3b      	adds	r3, r7, #4
     284:	0018      	movs	r0, r3
     286:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <system_board_init+0x44>)
     288:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     28a:	1d3b      	adds	r3, r7, #4
     28c:	2201      	movs	r2, #1
     28e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     290:	1d3b      	adds	r3, r7, #4
     292:	0019      	movs	r1, r3
     294:	2010      	movs	r0, #16
     296:	4b0b      	ldr	r3, [pc, #44]	; (2c4 <system_board_init+0x48>)
     298:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     29a:	2101      	movs	r1, #1
     29c:	2010      	movs	r0, #16
     29e:	4b0a      	ldr	r3, [pc, #40]	; (2c8 <system_board_init+0x4c>)
     2a0:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2a2:	1d3b      	adds	r3, r7, #4
     2a4:	2200      	movs	r2, #0
     2a6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2a8:	1d3b      	adds	r3, r7, #4
     2aa:	2201      	movs	r2, #1
     2ac:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2ae:	1d3b      	adds	r3, r7, #4
     2b0:	0019      	movs	r1, r3
     2b2:	200e      	movs	r0, #14
     2b4:	4b03      	ldr	r3, [pc, #12]	; (2c4 <system_board_init+0x48>)
     2b6:	4798      	blx	r3
}
     2b8:	46c0      	nop			; (mov r8, r8)
     2ba:	46bd      	mov	sp, r7
     2bc:	b002      	add	sp, #8
     2be:	bd80      	pop	{r7, pc}
     2c0:	00000205 	.word	0x00000205
     2c4:	00000ac5 	.word	0x00000ac5
     2c8:	00000229 	.word	0x00000229

000002cc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b082      	sub	sp, #8
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     2d4:	687b      	ldr	r3, [r7, #4]
     2d6:	2200      	movs	r2, #0
     2d8:	701a      	strb	r2, [r3, #0]
}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	46bd      	mov	sp, r7
     2de:	b002      	add	sp, #8
     2e0:	bd80      	pop	{r7, pc}
	...

000002e4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     2e4:	b580      	push	{r7, lr}
     2e6:	b082      	sub	sp, #8
     2e8:	af00      	add	r7, sp, #0
     2ea:	0002      	movs	r2, r0
     2ec:	6039      	str	r1, [r7, #0]
     2ee:	1dfb      	adds	r3, r7, #7
     2f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     2f2:	1dfb      	adds	r3, r7, #7
     2f4:	781b      	ldrb	r3, [r3, #0]
     2f6:	2b01      	cmp	r3, #1
     2f8:	d00a      	beq.n	310 <system_apb_clock_set_mask+0x2c>
     2fa:	2b02      	cmp	r3, #2
     2fc:	d00f      	beq.n	31e <system_apb_clock_set_mask+0x3a>
     2fe:	2b00      	cmp	r3, #0
     300:	d114      	bne.n	32c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <system_apb_clock_set_mask+0x58>)
     304:	4a0d      	ldr	r2, [pc, #52]	; (33c <system_apb_clock_set_mask+0x58>)
     306:	6991      	ldr	r1, [r2, #24]
     308:	683a      	ldr	r2, [r7, #0]
     30a:	430a      	orrs	r2, r1
     30c:	619a      	str	r2, [r3, #24]
			break;
     30e:	e00f      	b.n	330 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     310:	4b0a      	ldr	r3, [pc, #40]	; (33c <system_apb_clock_set_mask+0x58>)
     312:	4a0a      	ldr	r2, [pc, #40]	; (33c <system_apb_clock_set_mask+0x58>)
     314:	69d1      	ldr	r1, [r2, #28]
     316:	683a      	ldr	r2, [r7, #0]
     318:	430a      	orrs	r2, r1
     31a:	61da      	str	r2, [r3, #28]
			break;
     31c:	e008      	b.n	330 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     31e:	4b07      	ldr	r3, [pc, #28]	; (33c <system_apb_clock_set_mask+0x58>)
     320:	4a06      	ldr	r2, [pc, #24]	; (33c <system_apb_clock_set_mask+0x58>)
     322:	6a11      	ldr	r1, [r2, #32]
     324:	683a      	ldr	r2, [r7, #0]
     326:	430a      	orrs	r2, r1
     328:	621a      	str	r2, [r3, #32]
			break;
     32a:	e001      	b.n	330 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     32c:	2317      	movs	r3, #23
     32e:	e000      	b.n	332 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     330:	2300      	movs	r3, #0
}
     332:	0018      	movs	r0, r3
     334:	46bd      	mov	sp, r7
     336:	b002      	add	sp, #8
     338:	bd80      	pop	{r7, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	40000400 	.word	0x40000400

00000340 <system_pinmux_get_config_defaults>:
{
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     348:	687b      	ldr	r3, [r7, #4]
     34a:	2280      	movs	r2, #128	; 0x80
     34c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     34e:	687b      	ldr	r3, [r7, #4]
     350:	2200      	movs	r2, #0
     352:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     354:	687b      	ldr	r3, [r7, #4]
     356:	2201      	movs	r2, #1
     358:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	2200      	movs	r2, #0
     35e:	70da      	strb	r2, [r3, #3]
}
     360:	46c0      	nop			; (mov r8, r8)
     362:	46bd      	mov	sp, r7
     364:	b002      	add	sp, #8
     366:	bd80      	pop	{r7, pc}

00000368 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     368:	b580      	push	{r7, lr}
     36a:	b082      	sub	sp, #8
     36c:	af00      	add	r7, sp, #0
     36e:	0002      	movs	r2, r0
     370:	1dfb      	adds	r3, r7, #7
     372:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     374:	1dfb      	adds	r3, r7, #7
     376:	781b      	ldrb	r3, [r3, #0]
     378:	2b00      	cmp	r3, #0
     37a:	d002      	beq.n	382 <system_voltage_reference_enable+0x1a>
     37c:	2b01      	cmp	r3, #1
     37e:	d007      	beq.n	390 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     380:	e00d      	b.n	39e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     382:	4b08      	ldr	r3, [pc, #32]	; (3a4 <system_voltage_reference_enable+0x3c>)
     384:	4a07      	ldr	r2, [pc, #28]	; (3a4 <system_voltage_reference_enable+0x3c>)
     386:	6c12      	ldr	r2, [r2, #64]	; 0x40
     388:	2102      	movs	r1, #2
     38a:	430a      	orrs	r2, r1
     38c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     38e:	e006      	b.n	39e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     390:	4b04      	ldr	r3, [pc, #16]	; (3a4 <system_voltage_reference_enable+0x3c>)
     392:	4a04      	ldr	r2, [pc, #16]	; (3a4 <system_voltage_reference_enable+0x3c>)
     394:	6c12      	ldr	r2, [r2, #64]	; 0x40
     396:	2104      	movs	r1, #4
     398:	430a      	orrs	r2, r1
     39a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     39c:	46c0      	nop			; (mov r8, r8)
	}
}
     39e:	46bd      	mov	sp, r7
     3a0:	b002      	add	sp, #8
     3a2:	bd80      	pop	{r7, pc}
     3a4:	40000800 	.word	0x40000800

000003a8 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b084      	sub	sp, #16
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	681b      	ldr	r3, [r3, #0]
     3b4:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3b6:	68fb      	ldr	r3, [r7, #12]
     3b8:	7e5b      	ldrb	r3, [r3, #25]
     3ba:	b2db      	uxtb	r3, r3
     3bc:	b25b      	sxtb	r3, r3
     3be:	2b00      	cmp	r3, #0
     3c0:	da01      	bge.n	3c6 <adc_is_syncing+0x1e>
		return true;
     3c2:	2301      	movs	r3, #1
     3c4:	e000      	b.n	3c8 <adc_is_syncing+0x20>
	}

	return false;
     3c6:	2300      	movs	r3, #0
}
     3c8:	0018      	movs	r0, r3
     3ca:	46bd      	mov	sp, r7
     3cc:	b004      	add	sp, #16
     3ce:	bd80      	pop	{r7, pc}

000003d0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b082      	sub	sp, #8
     3d4:	af00      	add	r7, sp, #0
     3d6:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	2200      	movs	r2, #0
     3dc:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	2200      	movs	r2, #0
     3e2:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	2200      	movs	r2, #0
     3e8:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	2200      	movs	r2, #0
     3ee:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	2200      	movs	r2, #0
     3f4:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     3f6:	687b      	ldr	r3, [r7, #4]
     3f8:	2200      	movs	r2, #0
     3fa:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	2200      	movs	r2, #0
     400:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     402:	687b      	ldr	r3, [r7, #4]
     404:	2200      	movs	r2, #0
     406:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     408:	687b      	ldr	r3, [r7, #4]
     40a:	2200      	movs	r2, #0
     40c:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     40e:	687b      	ldr	r3, [r7, #4]
     410:	22c0      	movs	r2, #192	; 0xc0
     412:	0152      	lsls	r2, r2, #5
     414:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     416:	687b      	ldr	r3, [r7, #4]
     418:	2200      	movs	r2, #0
     41a:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	2200      	movs	r2, #0
     420:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     422:	687b      	ldr	r3, [r7, #4]
     424:	2200      	movs	r2, #0
     426:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     428:	687b      	ldr	r3, [r7, #4]
     42a:	2200      	movs	r2, #0
     42c:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     42e:	687b      	ldr	r3, [r7, #4]
     430:	2200      	movs	r2, #0
     432:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     434:	687b      	ldr	r3, [r7, #4]
     436:	222a      	movs	r2, #42	; 0x2a
     438:	2100      	movs	r1, #0
     43a:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	2200      	movs	r2, #0
     440:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     442:	687b      	ldr	r3, [r7, #4]
     444:	2200      	movs	r2, #0
     446:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     448:	687b      	ldr	r3, [r7, #4]
     44a:	2224      	movs	r2, #36	; 0x24
     44c:	2100      	movs	r1, #0
     44e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     450:	687b      	ldr	r3, [r7, #4]
     452:	2200      	movs	r2, #0
     454:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     456:	687b      	ldr	r3, [r7, #4]
     458:	2200      	movs	r2, #0
     45a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	2200      	movs	r2, #0
     460:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     462:	687b      	ldr	r3, [r7, #4]
     464:	222b      	movs	r2, #43	; 0x2b
     466:	2100      	movs	r1, #0
     468:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	222c      	movs	r2, #44	; 0x2c
     46e:	2100      	movs	r1, #0
     470:	5499      	strb	r1, [r3, r2]
}
     472:	46c0      	nop			; (mov r8, r8)
     474:	46bd      	mov	sp, r7
     476:	b002      	add	sp, #8
     478:	bd80      	pop	{r7, pc}
	...

0000047c <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     47c:	b580      	push	{r7, lr}
     47e:	b098      	sub	sp, #96	; 0x60
     480:	af00      	add	r7, sp, #0
     482:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     484:	230c      	movs	r3, #12
     486:	18fa      	adds	r2, r7, r3
     488:	4b15      	ldr	r3, [pc, #84]	; (4e0 <_adc_configure_ain_pin+0x64>)
     48a:	0010      	movs	r0, r2
     48c:	0019      	movs	r1, r3
     48e:	2350      	movs	r3, #80	; 0x50
     490:	001a      	movs	r2, r3
     492:	4b14      	ldr	r3, [pc, #80]	; (4e4 <_adc_configure_ain_pin+0x68>)
     494:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     496:	4b14      	ldr	r3, [pc, #80]	; (4e8 <_adc_configure_ain_pin+0x6c>)
     498:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	2b09      	cmp	r3, #9
     49e:	d81a      	bhi.n	4d6 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     4a0:	230c      	movs	r3, #12
     4a2:	18fb      	adds	r3, r7, r3
     4a4:	687a      	ldr	r2, [r7, #4]
     4a6:	0092      	lsls	r2, r2, #2
     4a8:	58d3      	ldr	r3, [r2, r3]
     4aa:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     4ac:	2308      	movs	r3, #8
     4ae:	18fb      	adds	r3, r7, r3
     4b0:	0018      	movs	r0, r3
     4b2:	4b0e      	ldr	r3, [pc, #56]	; (4ec <_adc_configure_ain_pin+0x70>)
     4b4:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     4b6:	2308      	movs	r3, #8
     4b8:	18fb      	adds	r3, r7, r3
     4ba:	2200      	movs	r2, #0
     4bc:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     4be:	2308      	movs	r3, #8
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	2201      	movs	r2, #1
     4c4:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     4c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     4c8:	b2db      	uxtb	r3, r3
     4ca:	2208      	movs	r2, #8
     4cc:	18ba      	adds	r2, r7, r2
     4ce:	0011      	movs	r1, r2
     4d0:	0018      	movs	r0, r3
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <_adc_configure_ain_pin+0x74>)
     4d4:	4798      	blx	r3
	}
}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	46bd      	mov	sp, r7
     4da:	b018      	add	sp, #96	; 0x60
     4dc:	bd80      	pop	{r7, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	000017e4 	.word	0x000017e4
     4e4:	000017d1 	.word	0x000017d1
     4e8:	0000ffff 	.word	0x0000ffff
     4ec:	00000341 	.word	0x00000341
     4f0:	00001395 	.word	0x00001395

000004f4 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f6:	b089      	sub	sp, #36	; 0x24
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
     4fc:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     4fe:	231f      	movs	r3, #31
     500:	18fb      	adds	r3, r7, r3
     502:	2200      	movs	r2, #0
     504:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     506:	2310      	movs	r3, #16
     508:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     50a:	2317      	movs	r3, #23
     50c:	18fb      	adds	r3, r7, r3
     50e:	2200      	movs	r2, #0
     510:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     512:	687b      	ldr	r3, [r7, #4]
     514:	681b      	ldr	r3, [r3, #0]
     516:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     518:	230c      	movs	r3, #12
     51a:	18fb      	adds	r3, r7, r3
     51c:	0018      	movs	r0, r3
     51e:	4bce      	ldr	r3, [pc, #824]	; (858 <_adc_set_config+0x364>)
     520:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     522:	683b      	ldr	r3, [r7, #0]
     524:	781a      	ldrb	r2, [r3, #0]
     526:	230c      	movs	r3, #12
     528:	18fb      	adds	r3, r7, r3
     52a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     52c:	230c      	movs	r3, #12
     52e:	18fb      	adds	r3, r7, r3
     530:	0019      	movs	r1, r3
     532:	2013      	movs	r0, #19
     534:	4bc9      	ldr	r3, [pc, #804]	; (85c <_adc_set_config+0x368>)
     536:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     538:	2013      	movs	r0, #19
     53a:	4bc9      	ldr	r3, [pc, #804]	; (860 <_adc_set_config+0x36c>)
     53c:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     53e:	683b      	ldr	r3, [r7, #0]
     540:	222c      	movs	r2, #44	; 0x2c
     542:	5c9b      	ldrb	r3, [r3, r2]
     544:	2b00      	cmp	r3, #0
     546:	d040      	beq.n	5ca <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     548:	2316      	movs	r3, #22
     54a:	18fb      	adds	r3, r7, r3
     54c:	683a      	ldr	r2, [r7, #0]
     54e:	212b      	movs	r1, #43	; 0x2b
     550:	5c52      	ldrb	r2, [r2, r1]
     552:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     554:	683b      	ldr	r3, [r7, #0]
     556:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
     558:	2315      	movs	r3, #21
     55a:	18fb      	adds	r3, r7, r3
     55c:	2216      	movs	r2, #22
     55e:	18ba      	adds	r2, r7, r2
     560:	7812      	ldrb	r2, [r2, #0]
     562:	188a      	adds	r2, r1, r2
     564:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     566:	683b      	ldr	r3, [r7, #0]
     568:	222c      	movs	r2, #44	; 0x2c
     56a:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
     56c:	230f      	movs	r3, #15
     56e:	18fb      	adds	r3, r7, r3
     570:	2215      	movs	r2, #21
     572:	18ba      	adds	r2, r7, r2
     574:	7812      	ldrb	r2, [r2, #0]
     576:	188a      	adds	r2, r1, r2
     578:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
     57a:	e018      	b.n	5ae <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     57c:	2316      	movs	r3, #22
     57e:	18fb      	adds	r3, r7, r3
     580:	781b      	ldrb	r3, [r3, #0]
     582:	220f      	movs	r2, #15
     584:	4013      	ands	r3, r2
     586:	683a      	ldr	r2, [r7, #0]
     588:	7b12      	ldrb	r2, [r2, #12]
     58a:	189b      	adds	r3, r3, r2
     58c:	0018      	movs	r0, r3
     58e:	4bb5      	ldr	r3, [pc, #724]	; (864 <_adc_set_config+0x370>)
     590:	4798      	blx	r3
			start_pin++;
     592:	2315      	movs	r3, #21
     594:	18fb      	adds	r3, r7, r3
     596:	781a      	ldrb	r2, [r3, #0]
     598:	2315      	movs	r3, #21
     59a:	18fb      	adds	r3, r7, r3
     59c:	3201      	adds	r2, #1
     59e:	701a      	strb	r2, [r3, #0]
			offset++;
     5a0:	2316      	movs	r3, #22
     5a2:	18fb      	adds	r3, r7, r3
     5a4:	781a      	ldrb	r2, [r3, #0]
     5a6:	2316      	movs	r3, #22
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	3201      	adds	r2, #1
     5ac:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
     5ae:	2315      	movs	r3, #21
     5b0:	18fa      	adds	r2, r7, r3
     5b2:	230f      	movs	r3, #15
     5b4:	18fb      	adds	r3, r7, r3
     5b6:	7812      	ldrb	r2, [r2, #0]
     5b8:	781b      	ldrb	r3, [r3, #0]
     5ba:	429a      	cmp	r2, r3
     5bc:	d3de      	bcc.n	57c <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
     5be:	683b      	ldr	r3, [r7, #0]
     5c0:	89db      	ldrh	r3, [r3, #14]
     5c2:	0018      	movs	r0, r3
     5c4:	4ba7      	ldr	r3, [pc, #668]	; (864 <_adc_set_config+0x370>)
     5c6:	4798      	blx	r3
     5c8:	e009      	b.n	5de <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     5ca:	683b      	ldr	r3, [r7, #0]
     5cc:	7b1b      	ldrb	r3, [r3, #12]
     5ce:	0018      	movs	r0, r3
     5d0:	4ba4      	ldr	r3, [pc, #656]	; (864 <_adc_set_config+0x370>)
     5d2:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     5d4:	683b      	ldr	r3, [r7, #0]
     5d6:	89db      	ldrh	r3, [r3, #14]
     5d8:	0018      	movs	r0, r3
     5da:	4ba2      	ldr	r3, [pc, #648]	; (864 <_adc_set_config+0x370>)
     5dc:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     5de:	683b      	ldr	r3, [r7, #0]
     5e0:	7d5b      	ldrb	r3, [r3, #21]
     5e2:	009b      	lsls	r3, r3, #2
     5e4:	b2da      	uxtb	r2, r3
     5e6:	693b      	ldr	r3, [r7, #16]
     5e8:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     5ea:	683b      	ldr	r3, [r7, #0]
     5ec:	7d9b      	ldrb	r3, [r3, #22]
     5ee:	01db      	lsls	r3, r3, #7
     5f0:	b25a      	sxtb	r2, r3
			(config->reference);
     5f2:	683b      	ldr	r3, [r7, #0]
     5f4:	785b      	ldrb	r3, [r3, #1]
     5f6:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     5f8:	4313      	orrs	r3, r2
     5fa:	b25b      	sxtb	r3, r3
     5fc:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     5fe:	693b      	ldr	r3, [r7, #16]
     600:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     602:	683b      	ldr	r3, [r7, #0]
     604:	791b      	ldrb	r3, [r3, #4]
     606:	2b34      	cmp	r3, #52	; 0x34
     608:	d846      	bhi.n	698 <_adc_set_config+0x1a4>
     60a:	009a      	lsls	r2, r3, #2
     60c:	4b96      	ldr	r3, [pc, #600]	; (868 <_adc_set_config+0x374>)
     60e:	18d3      	adds	r3, r2, r3
     610:	681b      	ldr	r3, [r3, #0]
     612:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     614:	231f      	movs	r3, #31
     616:	18fb      	adds	r3, r7, r3
     618:	683a      	ldr	r2, [r7, #0]
     61a:	7c52      	ldrb	r2, [r2, #17]
     61c:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     61e:	2317      	movs	r3, #23
     620:	18fb      	adds	r3, r7, r3
     622:	683a      	ldr	r2, [r7, #0]
     624:	7c12      	ldrb	r2, [r2, #16]
     626:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     628:	2310      	movs	r3, #16
     62a:	61bb      	str	r3, [r7, #24]
		break;
     62c:	e036      	b.n	69c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     62e:	231f      	movs	r3, #31
     630:	18fb      	adds	r3, r7, r3
     632:	2201      	movs	r2, #1
     634:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     636:	2317      	movs	r3, #23
     638:	18fb      	adds	r3, r7, r3
     63a:	2202      	movs	r2, #2
     63c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     63e:	2310      	movs	r3, #16
     640:	61bb      	str	r3, [r7, #24]
		break;
     642:	e02b      	b.n	69c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     644:	231f      	movs	r3, #31
     646:	18fb      	adds	r3, r7, r3
     648:	2202      	movs	r2, #2
     64a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     64c:	2317      	movs	r3, #23
     64e:	18fb      	adds	r3, r7, r3
     650:	2204      	movs	r2, #4
     652:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     654:	2310      	movs	r3, #16
     656:	61bb      	str	r3, [r7, #24]
		break;
     658:	e020      	b.n	69c <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     65a:	231f      	movs	r3, #31
     65c:	18fb      	adds	r3, r7, r3
     65e:	2201      	movs	r2, #1
     660:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     662:	2317      	movs	r3, #23
     664:	18fb      	adds	r3, r7, r3
     666:	2206      	movs	r2, #6
     668:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     66a:	2310      	movs	r3, #16
     66c:	61bb      	str	r3, [r7, #24]
		break;
     66e:	e015      	b.n	69c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     670:	231f      	movs	r3, #31
     672:	18fb      	adds	r3, r7, r3
     674:	2200      	movs	r2, #0
     676:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     678:	2317      	movs	r3, #23
     67a:	18fb      	adds	r3, r7, r3
     67c:	2208      	movs	r2, #8
     67e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     680:	2310      	movs	r3, #16
     682:	61bb      	str	r3, [r7, #24]
		break;
     684:	e00a      	b.n	69c <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     686:	2330      	movs	r3, #48	; 0x30
     688:	61bb      	str	r3, [r7, #24]
		break;
     68a:	e007      	b.n	69c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     68c:	2320      	movs	r3, #32
     68e:	61bb      	str	r3, [r7, #24]
		break;
     690:	e004      	b.n	69c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     692:	2300      	movs	r3, #0
     694:	61bb      	str	r3, [r7, #24]
		break;
     696:	e001      	b.n	69c <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     698:	2317      	movs	r3, #23
     69a:	e1ae      	b.n	9fa <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     69c:	231f      	movs	r3, #31
     69e:	18fb      	adds	r3, r7, r3
     6a0:	781b      	ldrb	r3, [r3, #0]
     6a2:	011b      	lsls	r3, r3, #4
     6a4:	b2db      	uxtb	r3, r3
     6a6:	2270      	movs	r2, #112	; 0x70
     6a8:	4013      	ands	r3, r2
     6aa:	b2da      	uxtb	r2, r3
     6ac:	2317      	movs	r3, #23
     6ae:	18fb      	adds	r3, r7, r3
     6b0:	781b      	ldrb	r3, [r3, #0]
     6b2:	4313      	orrs	r3, r2
     6b4:	b2da      	uxtb	r2, r3
     6b6:	693b      	ldr	r3, [r7, #16]
     6b8:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     6ba:	683b      	ldr	r3, [r7, #0]
     6bc:	7ddb      	ldrb	r3, [r3, #23]
     6be:	2b3f      	cmp	r3, #63	; 0x3f
     6c0:	d901      	bls.n	6c6 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     6c2:	2317      	movs	r3, #23
     6c4:	e199      	b.n	9fa <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     6c6:	683b      	ldr	r3, [r7, #0]
     6c8:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
     6ca:	693b      	ldr	r3, [r7, #16]
     6cc:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	0018      	movs	r0, r3
     6d4:	4b65      	ldr	r3, [pc, #404]	; (86c <_adc_set_config+0x378>)
     6d6:	4798      	blx	r3
     6d8:	1e03      	subs	r3, r0, #0
     6da:	d1f9      	bne.n	6d0 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     6dc:	683b      	ldr	r3, [r7, #0]
     6de:	885a      	ldrh	r2, [r3, #2]
     6e0:	69bb      	ldr	r3, [r7, #24]
     6e2:	b29b      	uxth	r3, r3
     6e4:	4313      	orrs	r3, r2
     6e6:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     6e8:	683b      	ldr	r3, [r7, #0]
     6ea:	2124      	movs	r1, #36	; 0x24
     6ec:	5c5b      	ldrb	r3, [r3, r1]
     6ee:	b29b      	uxth	r3, r3
     6f0:	00db      	lsls	r3, r3, #3
     6f2:	b29b      	uxth	r3, r3
			resolution |
     6f4:	4313      	orrs	r3, r2
     6f6:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     6f8:	683b      	ldr	r3, [r7, #0]
     6fa:	7d1b      	ldrb	r3, [r3, #20]
     6fc:	b29b      	uxth	r3, r3
     6fe:	009b      	lsls	r3, r3, #2
     700:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     702:	4313      	orrs	r3, r2
     704:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     706:	683b      	ldr	r3, [r7, #0]
     708:	7c9b      	ldrb	r3, [r3, #18]
     70a:	b29b      	uxth	r3, r3
     70c:	18db      	adds	r3, r3, r3
     70e:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     710:	4313      	orrs	r3, r2
     712:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     714:	683b      	ldr	r3, [r7, #0]
     716:	7cdb      	ldrb	r3, [r3, #19]
     718:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     71a:	4313      	orrs	r3, r2
     71c:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
     71e:	693b      	ldr	r3, [r7, #16]
     720:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     722:	683b      	ldr	r3, [r7, #0]
     724:	7e1b      	ldrb	r3, [r3, #24]
     726:	2b00      	cmp	r3, #0
     728:	d100      	bne.n	72c <_adc_set_config+0x238>
     72a:	e0c4      	b.n	8b6 <_adc_set_config+0x3c2>
		switch (resolution) {
     72c:	69bb      	ldr	r3, [r7, #24]
     72e:	2b10      	cmp	r3, #16
     730:	d100      	bne.n	734 <_adc_set_config+0x240>
     732:	e076      	b.n	822 <_adc_set_config+0x32e>
     734:	d802      	bhi.n	73c <_adc_set_config+0x248>
     736:	2b00      	cmp	r3, #0
     738:	d04d      	beq.n	7d6 <_adc_set_config+0x2e2>
     73a:	e0bc      	b.n	8b6 <_adc_set_config+0x3c2>
     73c:	2b20      	cmp	r3, #32
     73e:	d023      	beq.n	788 <_adc_set_config+0x294>
     740:	2b30      	cmp	r3, #48	; 0x30
     742:	d000      	beq.n	746 <_adc_set_config+0x252>
     744:	e0b7      	b.n	8b6 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     746:	683b      	ldr	r3, [r7, #0]
     748:	7cdb      	ldrb	r3, [r3, #19]
     74a:	2b00      	cmp	r3, #0
     74c:	d011      	beq.n	772 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     74e:	683b      	ldr	r3, [r7, #0]
     750:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     752:	2b7f      	cmp	r3, #127	; 0x7f
     754:	dc0b      	bgt.n	76e <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
     756:	683b      	ldr	r3, [r7, #0]
     758:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     75a:	3380      	adds	r3, #128	; 0x80
     75c:	db07      	blt.n	76e <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
     75e:	683b      	ldr	r3, [r7, #0]
     760:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     762:	2b7f      	cmp	r3, #127	; 0x7f
     764:	dc03      	bgt.n	76e <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
     766:	683b      	ldr	r3, [r7, #0]
     768:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     76a:	3380      	adds	r3, #128	; 0x80
     76c:	da01      	bge.n	772 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     76e:	2317      	movs	r3, #23
     770:	e143      	b.n	9fa <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     772:	683b      	ldr	r3, [r7, #0]
     774:	69db      	ldr	r3, [r3, #28]
     776:	2bff      	cmp	r3, #255	; 0xff
     778:	dc04      	bgt.n	784 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     77a:	683b      	ldr	r3, [r7, #0]
     77c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     77e:	2bff      	cmp	r3, #255	; 0xff
     780:	dc00      	bgt.n	784 <_adc_set_config+0x290>
     782:	e091      	b.n	8a8 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     784:	2317      	movs	r3, #23
     786:	e138      	b.n	9fa <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     788:	683b      	ldr	r3, [r7, #0]
     78a:	7cdb      	ldrb	r3, [r3, #19]
     78c:	2b00      	cmp	r3, #0
     78e:	d015      	beq.n	7bc <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     790:	683b      	ldr	r3, [r7, #0]
     792:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     794:	4a36      	ldr	r2, [pc, #216]	; (870 <_adc_set_config+0x37c>)
     796:	4293      	cmp	r3, r2
     798:	dc0e      	bgt.n	7b8 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     79e:	4a35      	ldr	r2, [pc, #212]	; (874 <_adc_set_config+0x380>)
     7a0:	4293      	cmp	r3, r2
     7a2:	db09      	blt.n	7b8 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
     7a4:	683b      	ldr	r3, [r7, #0]
     7a6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     7a8:	4a31      	ldr	r2, [pc, #196]	; (870 <_adc_set_config+0x37c>)
     7aa:	4293      	cmp	r3, r2
     7ac:	dc04      	bgt.n	7b8 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
     7ae:	683b      	ldr	r3, [r7, #0]
     7b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     7b2:	4a30      	ldr	r2, [pc, #192]	; (874 <_adc_set_config+0x380>)
     7b4:	4293      	cmp	r3, r2
     7b6:	da01      	bge.n	7bc <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7b8:	2317      	movs	r3, #23
     7ba:	e11e      	b.n	9fa <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     7bc:	683b      	ldr	r3, [r7, #0]
     7be:	69db      	ldr	r3, [r3, #28]
     7c0:	4a2d      	ldr	r2, [pc, #180]	; (878 <_adc_set_config+0x384>)
     7c2:	4293      	cmp	r3, r2
     7c4:	dc05      	bgt.n	7d2 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     7ca:	4a2b      	ldr	r2, [pc, #172]	; (878 <_adc_set_config+0x384>)
     7cc:	4293      	cmp	r3, r2
     7ce:	dc00      	bgt.n	7d2 <_adc_set_config+0x2de>
     7d0:	e06c      	b.n	8ac <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7d2:	2317      	movs	r3, #23
     7d4:	e111      	b.n	9fa <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     7d6:	683b      	ldr	r3, [r7, #0]
     7d8:	7cdb      	ldrb	r3, [r3, #19]
     7da:	2b00      	cmp	r3, #0
     7dc:	d015      	beq.n	80a <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     7e2:	4a26      	ldr	r2, [pc, #152]	; (87c <_adc_set_config+0x388>)
     7e4:	4293      	cmp	r3, r2
     7e6:	dc0e      	bgt.n	806 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
     7e8:	683b      	ldr	r3, [r7, #0]
     7ea:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     7ec:	4a24      	ldr	r2, [pc, #144]	; (880 <_adc_set_config+0x38c>)
     7ee:	4293      	cmp	r3, r2
     7f0:	db09      	blt.n	806 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
     7f2:	683b      	ldr	r3, [r7, #0]
     7f4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     7f6:	4a21      	ldr	r2, [pc, #132]	; (87c <_adc_set_config+0x388>)
     7f8:	4293      	cmp	r3, r2
     7fa:	dc04      	bgt.n	806 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
     7fc:	683b      	ldr	r3, [r7, #0]
     7fe:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     800:	4a1f      	ldr	r2, [pc, #124]	; (880 <_adc_set_config+0x38c>)
     802:	4293      	cmp	r3, r2
     804:	da01      	bge.n	80a <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     806:	2317      	movs	r3, #23
     808:	e0f7      	b.n	9fa <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     80a:	683b      	ldr	r3, [r7, #0]
     80c:	69db      	ldr	r3, [r3, #28]
     80e:	4a1d      	ldr	r2, [pc, #116]	; (884 <_adc_set_config+0x390>)
     810:	4293      	cmp	r3, r2
     812:	dc04      	bgt.n	81e <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     814:	683b      	ldr	r3, [r7, #0]
     816:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     818:	4a1a      	ldr	r2, [pc, #104]	; (884 <_adc_set_config+0x390>)
     81a:	4293      	cmp	r3, r2
     81c:	dd48      	ble.n	8b0 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     81e:	2317      	movs	r3, #23
     820:	e0eb      	b.n	9fa <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     822:	683b      	ldr	r3, [r7, #0]
     824:	7cdb      	ldrb	r3, [r3, #19]
     826:	2b00      	cmp	r3, #0
     828:	d032      	beq.n	890 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     82a:	683b      	ldr	r3, [r7, #0]
     82c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     82e:	4a16      	ldr	r2, [pc, #88]	; (888 <_adc_set_config+0x394>)
     830:	4293      	cmp	r3, r2
     832:	dc0e      	bgt.n	852 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
     834:	683b      	ldr	r3, [r7, #0]
     836:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     838:	4a14      	ldr	r2, [pc, #80]	; (88c <_adc_set_config+0x398>)
     83a:	4293      	cmp	r3, r2
     83c:	db09      	blt.n	852 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
     83e:	683b      	ldr	r3, [r7, #0]
     840:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     842:	4a11      	ldr	r2, [pc, #68]	; (888 <_adc_set_config+0x394>)
     844:	4293      	cmp	r3, r2
     846:	dc04      	bgt.n	852 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
     848:	683b      	ldr	r3, [r7, #0]
     84a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     84c:	4a0f      	ldr	r2, [pc, #60]	; (88c <_adc_set_config+0x398>)
     84e:	4293      	cmp	r3, r2
     850:	da1e      	bge.n	890 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     852:	2317      	movs	r3, #23
     854:	e0d1      	b.n	9fa <_adc_set_config+0x506>
     856:	46c0      	nop			; (mov r8, r8)
     858:	000002cd 	.word	0x000002cd
     85c:	00001101 	.word	0x00001101
     860:	00001145 	.word	0x00001145
     864:	0000047d 	.word	0x0000047d
     868:	00001834 	.word	0x00001834
     86c:	000003a9 	.word	0x000003a9
     870:	000001ff 	.word	0x000001ff
     874:	fffffe00 	.word	0xfffffe00
     878:	000003ff 	.word	0x000003ff
     87c:	000007ff 	.word	0x000007ff
     880:	fffff800 	.word	0xfffff800
     884:	00000fff 	.word	0x00000fff
     888:	00007fff 	.word	0x00007fff
     88c:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     890:	683b      	ldr	r3, [r7, #0]
     892:	69db      	ldr	r3, [r3, #28]
     894:	4a5b      	ldr	r2, [pc, #364]	; (a04 <_adc_set_config+0x510>)
     896:	4293      	cmp	r3, r2
     898:	dc04      	bgt.n	8a4 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     89a:	683b      	ldr	r3, [r7, #0]
     89c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     89e:	4a59      	ldr	r2, [pc, #356]	; (a04 <_adc_set_config+0x510>)
     8a0:	4293      	cmp	r3, r2
     8a2:	dd07      	ble.n	8b4 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     8a4:	2317      	movs	r3, #23
     8a6:	e0a8      	b.n	9fa <_adc_set_config+0x506>
			break;
     8a8:	46c0      	nop			; (mov r8, r8)
     8aa:	e004      	b.n	8b6 <_adc_set_config+0x3c2>
			break;
     8ac:	46c0      	nop			; (mov r8, r8)
     8ae:	e002      	b.n	8b6 <_adc_set_config+0x3c2>
			break;
     8b0:	46c0      	nop			; (mov r8, r8)
     8b2:	e000      	b.n	8b6 <_adc_set_config+0x3c2>
			}
			break;
     8b4:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	0018      	movs	r0, r3
     8bc:	4b52      	ldr	r3, [pc, #328]	; (a08 <_adc_set_config+0x514>)
     8be:	4798      	blx	r3
     8c0:	1e03      	subs	r3, r0, #0
     8c2:	d1f9      	bne.n	8b8 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     8c4:	683b      	ldr	r3, [r7, #0]
     8c6:	7e1a      	ldrb	r2, [r3, #24]
     8c8:	693b      	ldr	r3, [r7, #16]
     8ca:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     8cc:	46c0      	nop			; (mov r8, r8)
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	0018      	movs	r0, r3
     8d2:	4b4d      	ldr	r3, [pc, #308]	; (a08 <_adc_set_config+0x514>)
     8d4:	4798      	blx	r3
     8d6:	1e03      	subs	r3, r0, #0
     8d8:	d1f9      	bne.n	8ce <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     8da:	683b      	ldr	r3, [r7, #0]
     8dc:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     8de:	b29a      	uxth	r2, r3
     8e0:	693b      	ldr	r3, [r7, #16]
     8e2:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
     8e4:	46c0      	nop			; (mov r8, r8)
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	0018      	movs	r0, r3
     8ea:	4b47      	ldr	r3, [pc, #284]	; (a08 <_adc_set_config+0x514>)
     8ec:	4798      	blx	r3
     8ee:	1e03      	subs	r3, r0, #0
     8f0:	d1f9      	bne.n	8e6 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     8f2:	683b      	ldr	r3, [r7, #0]
     8f4:	6a1b      	ldr	r3, [r3, #32]
     8f6:	b29a      	uxth	r2, r3
     8f8:	693b      	ldr	r3, [r7, #16]
     8fa:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     8fc:	2314      	movs	r3, #20
     8fe:	18fb      	adds	r3, r7, r3
     900:	683a      	ldr	r2, [r7, #0]
     902:	212c      	movs	r1, #44	; 0x2c
     904:	5c52      	ldrb	r2, [r2, r1]
     906:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     908:	2314      	movs	r3, #20
     90a:	18fb      	adds	r3, r7, r3
     90c:	781b      	ldrb	r3, [r3, #0]
     90e:	2b00      	cmp	r3, #0
     910:	d006      	beq.n	920 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     912:	2314      	movs	r3, #20
     914:	18fb      	adds	r3, r7, r3
     916:	781a      	ldrb	r2, [r3, #0]
     918:	2314      	movs	r3, #20
     91a:	18fb      	adds	r3, r7, r3
     91c:	3a01      	subs	r2, #1
     91e:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     920:	2314      	movs	r3, #20
     922:	18fb      	adds	r3, r7, r3
     924:	781b      	ldrb	r3, [r3, #0]
     926:	2b0f      	cmp	r3, #15
     928:	d804      	bhi.n	934 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     92a:	683b      	ldr	r3, [r7, #0]
     92c:	222b      	movs	r2, #43	; 0x2b
     92e:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     930:	2b0f      	cmp	r3, #15
     932:	d901      	bls.n	938 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     934:	2317      	movs	r3, #23
     936:	e060      	b.n	9fa <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     938:	46c0      	nop			; (mov r8, r8)
     93a:	687b      	ldr	r3, [r7, #4]
     93c:	0018      	movs	r0, r3
     93e:	4b32      	ldr	r3, [pc, #200]	; (a08 <_adc_set_config+0x514>)
     940:	4798      	blx	r3
     942:	1e03      	subs	r3, r0, #0
     944:	d1f9      	bne.n	93a <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     946:	683b      	ldr	r3, [r7, #0]
     948:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     94a:	683a      	ldr	r2, [r7, #0]
     94c:	212b      	movs	r1, #43	; 0x2b
     94e:	5c52      	ldrb	r2, [r2, r1]
     950:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     952:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     954:	2214      	movs	r2, #20
     956:	18ba      	adds	r2, r7, r2
     958:	7812      	ldrb	r2, [r2, #0]
     95a:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     95c:	4313      	orrs	r3, r2
			config->negative_input |
     95e:	683a      	ldr	r2, [r7, #0]
     960:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     962:	4313      	orrs	r3, r2
			config->positive_input;
     964:	683a      	ldr	r2, [r7, #0]
     966:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
     968:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
     96a:	693b      	ldr	r3, [r7, #16]
     96c:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     96e:	683b      	ldr	r3, [r7, #0]
     970:	222a      	movs	r2, #42	; 0x2a
     972:	5c9a      	ldrb	r2, [r3, r2]
     974:	693b      	ldr	r3, [r7, #16]
     976:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     978:	693b      	ldr	r3, [r7, #16]
     97a:	220f      	movs	r2, #15
     97c:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     97e:	683b      	ldr	r3, [r7, #0]
     980:	2224      	movs	r2, #36	; 0x24
     982:	5c9b      	ldrb	r3, [r3, r2]
     984:	2b00      	cmp	r3, #0
     986:	d01e      	beq.n	9c6 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     988:	683b      	ldr	r3, [r7, #0]
     98a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     98c:	4a1f      	ldr	r2, [pc, #124]	; (a0c <_adc_set_config+0x518>)
     98e:	4293      	cmp	r3, r2
     990:	d901      	bls.n	996 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     992:	2317      	movs	r3, #23
     994:	e031      	b.n	9fa <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     996:	683b      	ldr	r3, [r7, #0]
     998:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     99a:	693b      	ldr	r3, [r7, #16]
     99c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     99e:	683b      	ldr	r3, [r7, #0]
     9a0:	2228      	movs	r2, #40	; 0x28
     9a2:	5e9b      	ldrsh	r3, [r3, r2]
     9a4:	4a1a      	ldr	r2, [pc, #104]	; (a10 <_adc_set_config+0x51c>)
     9a6:	4293      	cmp	r3, r2
     9a8:	dc05      	bgt.n	9b6 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     9aa:	683b      	ldr	r3, [r7, #0]
     9ac:	2228      	movs	r2, #40	; 0x28
     9ae:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     9b0:	4a18      	ldr	r2, [pc, #96]	; (a14 <_adc_set_config+0x520>)
     9b2:	4293      	cmp	r3, r2
     9b4:	da01      	bge.n	9ba <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
     9b6:	2317      	movs	r3, #23
     9b8:	e01f      	b.n	9fa <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     9ba:	683b      	ldr	r3, [r7, #0]
     9bc:	2228      	movs	r2, #40	; 0x28
     9be:	5e9b      	ldrsh	r3, [r3, r2]
     9c0:	b29a      	uxth	r2, r3
     9c2:	693b      	ldr	r3, [r7, #16]
     9c4:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     9c6:	4b14      	ldr	r3, [pc, #80]	; (a18 <_adc_set_config+0x524>)
     9c8:	681b      	ldr	r3, [r3, #0]
     9ca:	08db      	lsrs	r3, r3, #3
     9cc:	b29b      	uxth	r3, r3
     9ce:	021b      	lsls	r3, r3, #8
     9d0:	b29a      	uxth	r2, r3
     9d2:	23e0      	movs	r3, #224	; 0xe0
     9d4:	00db      	lsls	r3, r3, #3
     9d6:	4013      	ands	r3, r2
     9d8:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     9da:	4b10      	ldr	r3, [pc, #64]	; (a1c <_adc_set_config+0x528>)
     9dc:	685c      	ldr	r4, [r3, #4]
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	0161      	lsls	r1, r4, #5
     9e2:	0edd      	lsrs	r5, r3, #27
     9e4:	430d      	orrs	r5, r1
     9e6:	0ee6      	lsrs	r6, r4, #27
     9e8:	b2ab      	uxth	r3, r5
     9ea:	21ff      	movs	r1, #255	; 0xff
     9ec:	400b      	ands	r3, r1
     9ee:	b29b      	uxth	r3, r3
			) |
     9f0:	4313      	orrs	r3, r2
     9f2:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     9f4:	693b      	ldr	r3, [r7, #16]
     9f6:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     9f8:	2300      	movs	r3, #0
}
     9fa:	0018      	movs	r0, r3
     9fc:	46bd      	mov	sp, r7
     9fe:	b009      	add	sp, #36	; 0x24
     a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	0000ffff 	.word	0x0000ffff
     a08:	000003a9 	.word	0x000003a9
     a0c:	00000fff 	.word	0x00000fff
     a10:	000007ff 	.word	0x000007ff
     a14:	fffff800 	.word	0xfffff800
     a18:	00806024 	.word	0x00806024
     a1c:	00806020 	.word	0x00806020

00000a20 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     a20:	b580      	push	{r7, lr}
     a22:	b084      	sub	sp, #16
     a24:	af00      	add	r7, sp, #0
     a26:	60f8      	str	r0, [r7, #12]
     a28:	60b9      	str	r1, [r7, #8]
     a2a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	68ba      	ldr	r2, [r7, #8]
     a30:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     a32:	2380      	movs	r3, #128	; 0x80
     a34:	005b      	lsls	r3, r3, #1
     a36:	0019      	movs	r1, r3
     a38:	2002      	movs	r0, #2
     a3a:	4b15      	ldr	r3, [pc, #84]	; (a90 <adc_init+0x70>)
     a3c:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     a3e:	68bb      	ldr	r3, [r7, #8]
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	b2db      	uxtb	r3, r3
     a44:	001a      	movs	r2, r3
     a46:	2301      	movs	r3, #1
     a48:	4013      	ands	r3, r2
     a4a:	d001      	beq.n	a50 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     a4c:	2305      	movs	r3, #5
     a4e:	e01a      	b.n	a86 <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     a50:	68bb      	ldr	r3, [r7, #8]
     a52:	781b      	ldrb	r3, [r3, #0]
     a54:	b2db      	uxtb	r3, r3
     a56:	001a      	movs	r2, r3
     a58:	2302      	movs	r3, #2
     a5a:	4013      	ands	r3, r2
     a5c:	d001      	beq.n	a62 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     a5e:	231c      	movs	r3, #28
     a60:	e011      	b.n	a86 <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	785a      	ldrb	r2, [r3, #1]
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     a6a:	68fb      	ldr	r3, [r7, #12]
     a6c:	791b      	ldrb	r3, [r3, #4]
     a6e:	2b00      	cmp	r3, #0
     a70:	d102      	bne.n	a78 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     a72:	2001      	movs	r0, #1
     a74:	4b07      	ldr	r3, [pc, #28]	; (a94 <adc_init+0x74>)
     a76:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     a78:	687a      	ldr	r2, [r7, #4]
     a7a:	68fb      	ldr	r3, [r7, #12]
     a7c:	0011      	movs	r1, r2
     a7e:	0018      	movs	r0, r3
     a80:	4b05      	ldr	r3, [pc, #20]	; (a98 <adc_init+0x78>)
     a82:	4798      	blx	r3
     a84:	0003      	movs	r3, r0
}
     a86:	0018      	movs	r0, r3
     a88:	46bd      	mov	sp, r7
     a8a:	b004      	add	sp, #16
     a8c:	bd80      	pop	{r7, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	000002e5 	.word	0x000002e5
     a94:	00000369 	.word	0x00000369
     a98:	000004f5 	.word	0x000004f5

00000a9c <system_pinmux_get_config_defaults>:
{
     a9c:	b580      	push	{r7, lr}
     a9e:	b082      	sub	sp, #8
     aa0:	af00      	add	r7, sp, #0
     aa2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	2280      	movs	r2, #128	; 0x80
     aa8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	2200      	movs	r2, #0
     aae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	2201      	movs	r2, #1
     ab4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	2200      	movs	r2, #0
     aba:	70da      	strb	r2, [r3, #3]
}
     abc:	46c0      	nop			; (mov r8, r8)
     abe:	46bd      	mov	sp, r7
     ac0:	b002      	add	sp, #8
     ac2:	bd80      	pop	{r7, pc}

00000ac4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	b084      	sub	sp, #16
     ac8:	af00      	add	r7, sp, #0
     aca:	0002      	movs	r2, r0
     acc:	6039      	str	r1, [r7, #0]
     ace:	1dfb      	adds	r3, r7, #7
     ad0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     ad2:	230c      	movs	r3, #12
     ad4:	18fb      	adds	r3, r7, r3
     ad6:	0018      	movs	r0, r3
     ad8:	4b10      	ldr	r3, [pc, #64]	; (b1c <port_pin_set_config+0x58>)
     ada:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     adc:	230c      	movs	r3, #12
     ade:	18fb      	adds	r3, r7, r3
     ae0:	2280      	movs	r2, #128	; 0x80
     ae2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ae4:	683b      	ldr	r3, [r7, #0]
     ae6:	781a      	ldrb	r2, [r3, #0]
     ae8:	230c      	movs	r3, #12
     aea:	18fb      	adds	r3, r7, r3
     aec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     aee:	683b      	ldr	r3, [r7, #0]
     af0:	785a      	ldrb	r2, [r3, #1]
     af2:	230c      	movs	r3, #12
     af4:	18fb      	adds	r3, r7, r3
     af6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     af8:	683b      	ldr	r3, [r7, #0]
     afa:	789a      	ldrb	r2, [r3, #2]
     afc:	230c      	movs	r3, #12
     afe:	18fb      	adds	r3, r7, r3
     b00:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b02:	230c      	movs	r3, #12
     b04:	18fa      	adds	r2, r7, r3
     b06:	1dfb      	adds	r3, r7, #7
     b08:	781b      	ldrb	r3, [r3, #0]
     b0a:	0011      	movs	r1, r2
     b0c:	0018      	movs	r0, r3
     b0e:	4b04      	ldr	r3, [pc, #16]	; (b20 <port_pin_set_config+0x5c>)
     b10:	4798      	blx	r3
}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	46bd      	mov	sp, r7
     b16:	b004      	add	sp, #16
     b18:	bd80      	pop	{r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	00000a9d 	.word	0x00000a9d
     b20:	00001395 	.word	0x00001395

00000b24 <system_gclk_gen_get_config_defaults>:
{
     b24:	b580      	push	{r7, lr}
     b26:	b082      	sub	sp, #8
     b28:	af00      	add	r7, sp, #0
     b2a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
     b2c:	687b      	ldr	r3, [r7, #4]
     b2e:	2201      	movs	r2, #1
     b30:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	2200      	movs	r2, #0
     b36:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	2206      	movs	r2, #6
     b3c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	2200      	movs	r2, #0
     b42:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	2200      	movs	r2, #0
     b48:	725a      	strb	r2, [r3, #9]
}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	46bd      	mov	sp, r7
     b4e:	b002      	add	sp, #8
     b50:	bd80      	pop	{r7, pc}

00000b52 <system_clock_source_osc8m_get_config_defaults>:
{
     b52:	b580      	push	{r7, lr}
     b54:	b082      	sub	sp, #8
     b56:	af00      	add	r7, sp, #0
     b58:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	2203      	movs	r2, #3
     b5e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
     b60:	687b      	ldr	r3, [r7, #4]
     b62:	2200      	movs	r2, #0
     b64:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	2201      	movs	r2, #1
     b6a:	709a      	strb	r2, [r3, #2]
}
     b6c:	46c0      	nop			; (mov r8, r8)
     b6e:	46bd      	mov	sp, r7
     b70:	b002      	add	sp, #8
     b72:	bd80      	pop	{r7, pc}

00000b74 <system_cpu_clock_set_divider>:
{
     b74:	b580      	push	{r7, lr}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
     b7a:	0002      	movs	r2, r0
     b7c:	1dfb      	adds	r3, r7, #7
     b7e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
     b80:	4a03      	ldr	r2, [pc, #12]	; (b90 <system_cpu_clock_set_divider+0x1c>)
     b82:	1dfb      	adds	r3, r7, #7
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	7213      	strb	r3, [r2, #8]
}
     b88:	46c0      	nop			; (mov r8, r8)
     b8a:	46bd      	mov	sp, r7
     b8c:	b002      	add	sp, #8
     b8e:	bd80      	pop	{r7, pc}
     b90:	40000400 	.word	0x40000400

00000b94 <system_apb_clock_set_divider>:
{
     b94:	b580      	push	{r7, lr}
     b96:	b082      	sub	sp, #8
     b98:	af00      	add	r7, sp, #0
     b9a:	0002      	movs	r2, r0
     b9c:	1dfb      	adds	r3, r7, #7
     b9e:	701a      	strb	r2, [r3, #0]
     ba0:	1dbb      	adds	r3, r7, #6
     ba2:	1c0a      	adds	r2, r1, #0
     ba4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     ba6:	1dfb      	adds	r3, r7, #7
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	2b01      	cmp	r3, #1
     bac:	d008      	beq.n	bc0 <system_apb_clock_set_divider+0x2c>
     bae:	2b02      	cmp	r3, #2
     bb0:	d00b      	beq.n	bca <system_apb_clock_set_divider+0x36>
     bb2:	2b00      	cmp	r3, #0
     bb4:	d10e      	bne.n	bd4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
     bb6:	4a0b      	ldr	r2, [pc, #44]	; (be4 <system_apb_clock_set_divider+0x50>)
     bb8:	1dbb      	adds	r3, r7, #6
     bba:	781b      	ldrb	r3, [r3, #0]
     bbc:	7253      	strb	r3, [r2, #9]
			break;
     bbe:	e00b      	b.n	bd8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
     bc0:	4a08      	ldr	r2, [pc, #32]	; (be4 <system_apb_clock_set_divider+0x50>)
     bc2:	1dbb      	adds	r3, r7, #6
     bc4:	781b      	ldrb	r3, [r3, #0]
     bc6:	7293      	strb	r3, [r2, #10]
			break;
     bc8:	e006      	b.n	bd8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
     bca:	4a06      	ldr	r2, [pc, #24]	; (be4 <system_apb_clock_set_divider+0x50>)
     bcc:	1dbb      	adds	r3, r7, #6
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	72d3      	strb	r3, [r2, #11]
			break;
     bd2:	e001      	b.n	bd8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
     bd4:	2317      	movs	r3, #23
     bd6:	e000      	b.n	bda <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
     bd8:	2300      	movs	r3, #0
}
     bda:	0018      	movs	r0, r3
     bdc:	46bd      	mov	sp, r7
     bde:	b002      	add	sp, #8
     be0:	bd80      	pop	{r7, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	40000400 	.word	0x40000400

00000be8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
     be8:	b580      	push	{r7, lr}
     bea:	b082      	sub	sp, #8
     bec:	af00      	add	r7, sp, #0
     bee:	0002      	movs	r2, r0
     bf0:	1dfb      	adds	r3, r7, #7
     bf2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     bf4:	4a08      	ldr	r2, [pc, #32]	; (c18 <system_flash_set_waitstates+0x30>)
     bf6:	1dfb      	adds	r3, r7, #7
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	210f      	movs	r1, #15
     bfc:	400b      	ands	r3, r1
     bfe:	b2d9      	uxtb	r1, r3
     c00:	6853      	ldr	r3, [r2, #4]
     c02:	200f      	movs	r0, #15
     c04:	4001      	ands	r1, r0
     c06:	0049      	lsls	r1, r1, #1
     c08:	201e      	movs	r0, #30
     c0a:	4383      	bics	r3, r0
     c0c:	430b      	orrs	r3, r1
     c0e:	6053      	str	r3, [r2, #4]
}
     c10:	46c0      	nop			; (mov r8, r8)
     c12:	46bd      	mov	sp, r7
     c14:	b002      	add	sp, #8
     c16:	bd80      	pop	{r7, pc}
     c18:	41004000 	.word	0x41004000

00000c1c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
     c1c:	b580      	push	{r7, lr}
     c1e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c20:	46c0      	nop			; (mov r8, r8)
     c22:	4b04      	ldr	r3, [pc, #16]	; (c34 <_system_dfll_wait_for_sync+0x18>)
     c24:	68db      	ldr	r3, [r3, #12]
     c26:	2210      	movs	r2, #16
     c28:	4013      	ands	r3, r2
     c2a:	d0fa      	beq.n	c22 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
     c2c:	46c0      	nop			; (mov r8, r8)
     c2e:	46bd      	mov	sp, r7
     c30:	bd80      	pop	{r7, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	40000800 	.word	0x40000800

00000c38 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
     c38:	b580      	push	{r7, lr}
     c3a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     c3c:	4b0c      	ldr	r3, [pc, #48]	; (c70 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     c3e:	2202      	movs	r2, #2
     c40:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
     c42:	4b0c      	ldr	r3, [pc, #48]	; (c74 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
     c44:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c46:	4a0a      	ldr	r2, [pc, #40]	; (c70 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     c48:	4b0b      	ldr	r3, [pc, #44]	; (c78 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     c4a:	689b      	ldr	r3, [r3, #8]
     c4c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c4e:	4a08      	ldr	r2, [pc, #32]	; (c70 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     c50:	4b09      	ldr	r3, [pc, #36]	; (c78 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     c52:	685b      	ldr	r3, [r3, #4]
     c54:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
     c56:	4b06      	ldr	r3, [pc, #24]	; (c70 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     c58:	2200      	movs	r2, #0
     c5a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
     c5c:	4b05      	ldr	r3, [pc, #20]	; (c74 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
     c5e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     c60:	4a03      	ldr	r2, [pc, #12]	; (c70 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     c62:	4b05      	ldr	r3, [pc, #20]	; (c78 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     c64:	681b      	ldr	r3, [r3, #0]
     c66:	b29b      	uxth	r3, r3
     c68:	8493      	strh	r3, [r2, #36]	; 0x24
}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	46bd      	mov	sp, r7
     c6e:	bd80      	pop	{r7, pc}
     c70:	40000800 	.word	0x40000800
     c74:	00000c1d 	.word	0x00000c1d
     c78:	20000028 	.word	0x20000028

00000c7c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b084      	sub	sp, #16
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     c84:	4b1a      	ldr	r3, [pc, #104]	; (cf0 <system_clock_source_osc8m_set_config+0x74>)
     c86:	6a1b      	ldr	r3, [r3, #32]
     c88:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	1c1a      	adds	r2, r3, #0
     c90:	2303      	movs	r3, #3
     c92:	4013      	ands	r3, r2
     c94:	b2da      	uxtb	r2, r3
     c96:	230d      	movs	r3, #13
     c98:	18fb      	adds	r3, r7, r3
     c9a:	2103      	movs	r1, #3
     c9c:	400a      	ands	r2, r1
     c9e:	0010      	movs	r0, r2
     ca0:	781a      	ldrb	r2, [r3, #0]
     ca2:	2103      	movs	r1, #3
     ca4:	438a      	bics	r2, r1
     ca6:	1c11      	adds	r1, r2, #0
     ca8:	1c02      	adds	r2, r0, #0
     caa:	430a      	orrs	r2, r1
     cac:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	789a      	ldrb	r2, [r3, #2]
     cb2:	230c      	movs	r3, #12
     cb4:	18fb      	adds	r3, r7, r3
     cb6:	01d0      	lsls	r0, r2, #7
     cb8:	781a      	ldrb	r2, [r3, #0]
     cba:	217f      	movs	r1, #127	; 0x7f
     cbc:	400a      	ands	r2, r1
     cbe:	1c11      	adds	r1, r2, #0
     cc0:	1c02      	adds	r2, r0, #0
     cc2:	430a      	orrs	r2, r1
     cc4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	785a      	ldrb	r2, [r3, #1]
     cca:	230c      	movs	r3, #12
     ccc:	18fb      	adds	r3, r7, r3
     cce:	2101      	movs	r1, #1
     cd0:	400a      	ands	r2, r1
     cd2:	0190      	lsls	r0, r2, #6
     cd4:	781a      	ldrb	r2, [r3, #0]
     cd6:	2140      	movs	r1, #64	; 0x40
     cd8:	438a      	bics	r2, r1
     cda:	1c11      	adds	r1, r2, #0
     cdc:	1c02      	adds	r2, r0, #0
     cde:	430a      	orrs	r2, r1
     ce0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
     ce2:	4b03      	ldr	r3, [pc, #12]	; (cf0 <system_clock_source_osc8m_set_config+0x74>)
     ce4:	68fa      	ldr	r2, [r7, #12]
     ce6:	621a      	str	r2, [r3, #32]
}
     ce8:	46c0      	nop			; (mov r8, r8)
     cea:	46bd      	mov	sp, r7
     cec:	b004      	add	sp, #16
     cee:	bd80      	pop	{r7, pc}
     cf0:	40000800 	.word	0x40000800

00000cf4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
     cf4:	b580      	push	{r7, lr}
     cf6:	b082      	sub	sp, #8
     cf8:	af00      	add	r7, sp, #0
     cfa:	0002      	movs	r2, r0
     cfc:	1dfb      	adds	r3, r7, #7
     cfe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
     d00:	1dfb      	adds	r3, r7, #7
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	2b08      	cmp	r3, #8
     d06:	d83b      	bhi.n	d80 <system_clock_source_enable+0x8c>
     d08:	009a      	lsls	r2, r3, #2
     d0a:	4b21      	ldr	r3, [pc, #132]	; (d90 <system_clock_source_enable+0x9c>)
     d0c:	18d3      	adds	r3, r2, r3
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d12:	4b20      	ldr	r3, [pc, #128]	; (d94 <system_clock_source_enable+0xa0>)
     d14:	4a1f      	ldr	r2, [pc, #124]	; (d94 <system_clock_source_enable+0xa0>)
     d16:	6a12      	ldr	r2, [r2, #32]
     d18:	2102      	movs	r1, #2
     d1a:	430a      	orrs	r2, r1
     d1c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     d1e:	2300      	movs	r3, #0
     d20:	e031      	b.n	d86 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d22:	4b1c      	ldr	r3, [pc, #112]	; (d94 <system_clock_source_enable+0xa0>)
     d24:	4a1b      	ldr	r2, [pc, #108]	; (d94 <system_clock_source_enable+0xa0>)
     d26:	6992      	ldr	r2, [r2, #24]
     d28:	2102      	movs	r1, #2
     d2a:	430a      	orrs	r2, r1
     d2c:	619a      	str	r2, [r3, #24]
		break;
     d2e:	e029      	b.n	d84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d30:	4a18      	ldr	r2, [pc, #96]	; (d94 <system_clock_source_enable+0xa0>)
     d32:	4b18      	ldr	r3, [pc, #96]	; (d94 <system_clock_source_enable+0xa0>)
     d34:	8a1b      	ldrh	r3, [r3, #16]
     d36:	b29b      	uxth	r3, r3
     d38:	2102      	movs	r1, #2
     d3a:	430b      	orrs	r3, r1
     d3c:	b29b      	uxth	r3, r3
     d3e:	8213      	strh	r3, [r2, #16]
		break;
     d40:	e020      	b.n	d84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     d42:	4a14      	ldr	r2, [pc, #80]	; (d94 <system_clock_source_enable+0xa0>)
     d44:	4b13      	ldr	r3, [pc, #76]	; (d94 <system_clock_source_enable+0xa0>)
     d46:	8a9b      	ldrh	r3, [r3, #20]
     d48:	b29b      	uxth	r3, r3
     d4a:	2102      	movs	r1, #2
     d4c:	430b      	orrs	r3, r1
     d4e:	b29b      	uxth	r3, r3
     d50:	8293      	strh	r3, [r2, #20]
		break;
     d52:	e017      	b.n	d84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     d54:	4b10      	ldr	r3, [pc, #64]	; (d98 <system_clock_source_enable+0xa4>)
     d56:	681b      	ldr	r3, [r3, #0]
     d58:	2202      	movs	r2, #2
     d5a:	431a      	orrs	r2, r3
     d5c:	4b0e      	ldr	r3, [pc, #56]	; (d98 <system_clock_source_enable+0xa4>)
     d5e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
     d60:	4b0e      	ldr	r3, [pc, #56]	; (d9c <system_clock_source_enable+0xa8>)
     d62:	4798      	blx	r3
		break;
     d64:	e00e      	b.n	d84 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     d66:	4a0b      	ldr	r2, [pc, #44]	; (d94 <system_clock_source_enable+0xa0>)
     d68:	490a      	ldr	r1, [pc, #40]	; (d94 <system_clock_source_enable+0xa0>)
     d6a:	2344      	movs	r3, #68	; 0x44
     d6c:	5ccb      	ldrb	r3, [r1, r3]
     d6e:	b2db      	uxtb	r3, r3
     d70:	2102      	movs	r1, #2
     d72:	430b      	orrs	r3, r1
     d74:	b2d9      	uxtb	r1, r3
     d76:	2344      	movs	r3, #68	; 0x44
     d78:	54d1      	strb	r1, [r2, r3]
		break;
     d7a:	e003      	b.n	d84 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     d7c:	2300      	movs	r3, #0
     d7e:	e002      	b.n	d86 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d80:	2317      	movs	r3, #23
     d82:	e000      	b.n	d86 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
     d84:	2300      	movs	r3, #0
}
     d86:	0018      	movs	r0, r3
     d88:	46bd      	mov	sp, r7
     d8a:	b002      	add	sp, #8
     d8c:	bd80      	pop	{r7, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00001908 	.word	0x00001908
     d94:	40000800 	.word	0x40000800
     d98:	20000028 	.word	0x20000028
     d9c:	00000c39 	.word	0x00000c39

00000da0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
     da0:	b580      	push	{r7, lr}
     da2:	b082      	sub	sp, #8
     da4:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     da6:	003b      	movs	r3, r7
     da8:	2201      	movs	r2, #1
     daa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     dac:	2300      	movs	r3, #0
     dae:	607b      	str	r3, [r7, #4]
     db0:	e009      	b.n	dc6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	b2db      	uxtb	r3, r3
     db6:	003a      	movs	r2, r7
     db8:	0011      	movs	r1, r2
     dba:	0018      	movs	r0, r3
     dbc:	4b05      	ldr	r3, [pc, #20]	; (dd4 <_switch_peripheral_gclk+0x34>)
     dbe:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     dc0:	687b      	ldr	r3, [r7, #4]
     dc2:	3301      	adds	r3, #1
     dc4:	607b      	str	r3, [r7, #4]
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	2b17      	cmp	r3, #23
     dca:	d9f2      	bls.n	db2 <_switch_peripheral_gclk+0x12>
	}
}
     dcc:	46c0      	nop			; (mov r8, r8)
     dce:	46bd      	mov	sp, r7
     dd0:	b002      	add	sp, #8
     dd2:	bd80      	pop	{r7, pc}
     dd4:	00001101 	.word	0x00001101

00000dd8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     dd8:	b580      	push	{r7, lr}
     dda:	b096      	sub	sp, #88	; 0x58
     ddc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dde:	4b27      	ldr	r3, [pc, #156]	; (e7c <system_clock_init+0xa4>)
     de0:	22c2      	movs	r2, #194	; 0xc2
     de2:	00d2      	lsls	r2, r2, #3
     de4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
     de6:	2000      	movs	r0, #0
     de8:	4b25      	ldr	r3, [pc, #148]	; (e80 <system_clock_init+0xa8>)
     dea:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
     dec:	4b25      	ldr	r3, [pc, #148]	; (e84 <system_clock_init+0xac>)
     dee:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
     df0:	2354      	movs	r3, #84	; 0x54
     df2:	18fb      	adds	r3, r7, r3
     df4:	0018      	movs	r0, r3
     df6:	4b24      	ldr	r3, [pc, #144]	; (e88 <system_clock_init+0xb0>)
     df8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     dfa:	2354      	movs	r3, #84	; 0x54
     dfc:	18fb      	adds	r3, r7, r3
     dfe:	2200      	movs	r2, #0
     e00:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
     e02:	2354      	movs	r3, #84	; 0x54
     e04:	18fb      	adds	r3, r7, r3
     e06:	2201      	movs	r2, #1
     e08:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
     e0a:	2354      	movs	r3, #84	; 0x54
     e0c:	18fb      	adds	r3, r7, r3
     e0e:	2200      	movs	r2, #0
     e10:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e12:	2354      	movs	r3, #84	; 0x54
     e14:	18fb      	adds	r3, r7, r3
     e16:	0018      	movs	r0, r3
     e18:	4b1c      	ldr	r3, [pc, #112]	; (e8c <system_clock_init+0xb4>)
     e1a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e1c:	2006      	movs	r0, #6
     e1e:	4b1c      	ldr	r3, [pc, #112]	; (e90 <system_clock_init+0xb8>)
     e20:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e22:	4b1c      	ldr	r3, [pc, #112]	; (e94 <system_clock_init+0xbc>)
     e24:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
     e26:	2000      	movs	r0, #0
     e28:	4b1b      	ldr	r3, [pc, #108]	; (e98 <system_clock_init+0xc0>)
     e2a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
     e2c:	2100      	movs	r1, #0
     e2e:	2000      	movs	r0, #0
     e30:	4b1a      	ldr	r3, [pc, #104]	; (e9c <system_clock_init+0xc4>)
     e32:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
     e34:	2100      	movs	r1, #0
     e36:	2001      	movs	r0, #1
     e38:	4b18      	ldr	r3, [pc, #96]	; (e9c <system_clock_init+0xc4>)
     e3a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
     e3c:	2100      	movs	r1, #0
     e3e:	2002      	movs	r0, #2
     e40:	4b16      	ldr	r3, [pc, #88]	; (e9c <system_clock_init+0xc4>)
     e42:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e44:	003b      	movs	r3, r7
     e46:	0018      	movs	r0, r3
     e48:	4b15      	ldr	r3, [pc, #84]	; (ea0 <system_clock_init+0xc8>)
     e4a:	4798      	blx	r3
     e4c:	003b      	movs	r3, r7
     e4e:	2206      	movs	r2, #6
     e50:	701a      	strb	r2, [r3, #0]
     e52:	003b      	movs	r3, r7
     e54:	2201      	movs	r2, #1
     e56:	605a      	str	r2, [r3, #4]
     e58:	003b      	movs	r3, r7
     e5a:	2200      	movs	r2, #0
     e5c:	721a      	strb	r2, [r3, #8]
     e5e:	003b      	movs	r3, r7
     e60:	2200      	movs	r2, #0
     e62:	725a      	strb	r2, [r3, #9]
     e64:	003b      	movs	r3, r7
     e66:	0019      	movs	r1, r3
     e68:	2000      	movs	r0, #0
     e6a:	4b0e      	ldr	r3, [pc, #56]	; (ea4 <system_clock_init+0xcc>)
     e6c:	4798      	blx	r3
     e6e:	2000      	movs	r0, #0
     e70:	4b0d      	ldr	r3, [pc, #52]	; (ea8 <system_clock_init+0xd0>)
     e72:	4798      	blx	r3
#endif
}
     e74:	46c0      	nop			; (mov r8, r8)
     e76:	46bd      	mov	sp, r7
     e78:	b016      	add	sp, #88	; 0x58
     e7a:	bd80      	pop	{r7, pc}
     e7c:	40000800 	.word	0x40000800
     e80:	00000be9 	.word	0x00000be9
     e84:	00000da1 	.word	0x00000da1
     e88:	00000b53 	.word	0x00000b53
     e8c:	00000c7d 	.word	0x00000c7d
     e90:	00000cf5 	.word	0x00000cf5
     e94:	00000f51 	.word	0x00000f51
     e98:	00000b75 	.word	0x00000b75
     e9c:	00000b95 	.word	0x00000b95
     ea0:	00000b25 	.word	0x00000b25
     ea4:	00000f81 	.word	0x00000f81
     ea8:	000010a5 	.word	0x000010a5

00000eac <system_apb_clock_set_mask>:
{
     eac:	b580      	push	{r7, lr}
     eae:	b082      	sub	sp, #8
     eb0:	af00      	add	r7, sp, #0
     eb2:	0002      	movs	r2, r0
     eb4:	6039      	str	r1, [r7, #0]
     eb6:	1dfb      	adds	r3, r7, #7
     eb8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     eba:	1dfb      	adds	r3, r7, #7
     ebc:	781b      	ldrb	r3, [r3, #0]
     ebe:	2b01      	cmp	r3, #1
     ec0:	d00a      	beq.n	ed8 <system_apb_clock_set_mask+0x2c>
     ec2:	2b02      	cmp	r3, #2
     ec4:	d00f      	beq.n	ee6 <system_apb_clock_set_mask+0x3a>
     ec6:	2b00      	cmp	r3, #0
     ec8:	d114      	bne.n	ef4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     eca:	4b0e      	ldr	r3, [pc, #56]	; (f04 <system_apb_clock_set_mask+0x58>)
     ecc:	4a0d      	ldr	r2, [pc, #52]	; (f04 <system_apb_clock_set_mask+0x58>)
     ece:	6991      	ldr	r1, [r2, #24]
     ed0:	683a      	ldr	r2, [r7, #0]
     ed2:	430a      	orrs	r2, r1
     ed4:	619a      	str	r2, [r3, #24]
			break;
     ed6:	e00f      	b.n	ef8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     ed8:	4b0a      	ldr	r3, [pc, #40]	; (f04 <system_apb_clock_set_mask+0x58>)
     eda:	4a0a      	ldr	r2, [pc, #40]	; (f04 <system_apb_clock_set_mask+0x58>)
     edc:	69d1      	ldr	r1, [r2, #28]
     ede:	683a      	ldr	r2, [r7, #0]
     ee0:	430a      	orrs	r2, r1
     ee2:	61da      	str	r2, [r3, #28]
			break;
     ee4:	e008      	b.n	ef8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     ee6:	4b07      	ldr	r3, [pc, #28]	; (f04 <system_apb_clock_set_mask+0x58>)
     ee8:	4a06      	ldr	r2, [pc, #24]	; (f04 <system_apb_clock_set_mask+0x58>)
     eea:	6a11      	ldr	r1, [r2, #32]
     eec:	683a      	ldr	r2, [r7, #0]
     eee:	430a      	orrs	r2, r1
     ef0:	621a      	str	r2, [r3, #32]
			break;
     ef2:	e001      	b.n	ef8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     ef4:	2317      	movs	r3, #23
     ef6:	e000      	b.n	efa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     ef8:	2300      	movs	r3, #0
}
     efa:	0018      	movs	r0, r3
     efc:	46bd      	mov	sp, r7
     efe:	b002      	add	sp, #8
     f00:	bd80      	pop	{r7, pc}
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	40000400 	.word	0x40000400

00000f08 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     f08:	b580      	push	{r7, lr}
     f0a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     f0c:	4b02      	ldr	r3, [pc, #8]	; (f18 <system_interrupt_enter_critical_section+0x10>)
     f0e:	4798      	blx	r3
}
     f10:	46c0      	nop			; (mov r8, r8)
     f12:	46bd      	mov	sp, r7
     f14:	bd80      	pop	{r7, pc}
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	000000ed 	.word	0x000000ed

00000f1c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     f1c:	b580      	push	{r7, lr}
     f1e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     f20:	4b02      	ldr	r3, [pc, #8]	; (f2c <system_interrupt_leave_critical_section+0x10>)
     f22:	4798      	blx	r3
}
     f24:	46c0      	nop			; (mov r8, r8)
     f26:	46bd      	mov	sp, r7
     f28:	bd80      	pop	{r7, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00000141 	.word	0x00000141

00000f30 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
     f30:	b580      	push	{r7, lr}
     f32:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f34:	4b05      	ldr	r3, [pc, #20]	; (f4c <system_gclk_is_syncing+0x1c>)
     f36:	785b      	ldrb	r3, [r3, #1]
     f38:	b2db      	uxtb	r3, r3
     f3a:	b25b      	sxtb	r3, r3
     f3c:	2b00      	cmp	r3, #0
     f3e:	da01      	bge.n	f44 <system_gclk_is_syncing+0x14>
		return true;
     f40:	2301      	movs	r3, #1
     f42:	e000      	b.n	f46 <system_gclk_is_syncing+0x16>
	}

	return false;
     f44:	2300      	movs	r3, #0
}
     f46:	0018      	movs	r0, r3
     f48:	46bd      	mov	sp, r7
     f4a:	bd80      	pop	{r7, pc}
     f4c:	40000c00 	.word	0x40000c00

00000f50 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
     f50:	b580      	push	{r7, lr}
     f52:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
     f54:	2108      	movs	r1, #8
     f56:	2000      	movs	r0, #0
     f58:	4b07      	ldr	r3, [pc, #28]	; (f78 <system_gclk_init+0x28>)
     f5a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f5c:	4b07      	ldr	r3, [pc, #28]	; (f7c <system_gclk_init+0x2c>)
     f5e:	2201      	movs	r2, #1
     f60:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	4b05      	ldr	r3, [pc, #20]	; (f7c <system_gclk_init+0x2c>)
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	b2db      	uxtb	r3, r3
     f6a:	001a      	movs	r2, r3
     f6c:	2301      	movs	r3, #1
     f6e:	4013      	ands	r3, r2
     f70:	d1f8      	bne.n	f64 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	46bd      	mov	sp, r7
     f76:	bd80      	pop	{r7, pc}
     f78:	00000ead 	.word	0x00000ead
     f7c:	40000c00 	.word	0x40000c00

00000f80 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     f80:	b580      	push	{r7, lr}
     f82:	b086      	sub	sp, #24
     f84:	af00      	add	r7, sp, #0
     f86:	0002      	movs	r2, r0
     f88:	6039      	str	r1, [r7, #0]
     f8a:	1dfb      	adds	r3, r7, #7
     f8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     f8e:	1dfb      	adds	r3, r7, #7
     f90:	781b      	ldrb	r3, [r3, #0]
     f92:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
     f94:	1dfb      	adds	r3, r7, #7
     f96:	781b      	ldrb	r3, [r3, #0]
     f98:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f9a:	683b      	ldr	r3, [r7, #0]
     f9c:	781b      	ldrb	r3, [r3, #0]
     f9e:	021b      	lsls	r3, r3, #8
     fa0:	001a      	movs	r2, r3
     fa2:	697b      	ldr	r3, [r7, #20]
     fa4:	4313      	orrs	r3, r2
     fa6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     fa8:	683b      	ldr	r3, [r7, #0]
     faa:	785b      	ldrb	r3, [r3, #1]
     fac:	2b00      	cmp	r3, #0
     fae:	d004      	beq.n	fba <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     fb0:	697b      	ldr	r3, [r7, #20]
     fb2:	2280      	movs	r2, #128	; 0x80
     fb4:	02d2      	lsls	r2, r2, #11
     fb6:	4313      	orrs	r3, r2
     fb8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     fba:	683b      	ldr	r3, [r7, #0]
     fbc:	7a5b      	ldrb	r3, [r3, #9]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d004      	beq.n	fcc <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     fc2:	697b      	ldr	r3, [r7, #20]
     fc4:	2280      	movs	r2, #128	; 0x80
     fc6:	0312      	lsls	r2, r2, #12
     fc8:	4313      	orrs	r3, r2
     fca:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     fcc:	683b      	ldr	r3, [r7, #0]
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	2b01      	cmp	r3, #1
     fd2:	d92c      	bls.n	102e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     fd4:	683b      	ldr	r3, [r7, #0]
     fd6:	685a      	ldr	r2, [r3, #4]
     fd8:	683b      	ldr	r3, [r7, #0]
     fda:	685b      	ldr	r3, [r3, #4]
     fdc:	3b01      	subs	r3, #1
     fde:	4013      	ands	r3, r2
     fe0:	d11a      	bne.n	1018 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
     fe2:	2300      	movs	r3, #0
     fe4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     fe6:	2302      	movs	r3, #2
     fe8:	60bb      	str	r3, [r7, #8]
     fea:	e005      	b.n	ff8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
     fec:	68fb      	ldr	r3, [r7, #12]
     fee:	3301      	adds	r3, #1
     ff0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
     ff2:	68bb      	ldr	r3, [r7, #8]
     ff4:	005b      	lsls	r3, r3, #1
     ff6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
     ff8:	683b      	ldr	r3, [r7, #0]
     ffa:	685a      	ldr	r2, [r3, #4]
     ffc:	68bb      	ldr	r3, [r7, #8]
     ffe:	429a      	cmp	r2, r3
    1000:	d8f4      	bhi.n	fec <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1002:	68fb      	ldr	r3, [r7, #12]
    1004:	021b      	lsls	r3, r3, #8
    1006:	693a      	ldr	r2, [r7, #16]
    1008:	4313      	orrs	r3, r2
    100a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    100c:	697b      	ldr	r3, [r7, #20]
    100e:	2280      	movs	r2, #128	; 0x80
    1010:	0352      	lsls	r2, r2, #13
    1012:	4313      	orrs	r3, r2
    1014:	617b      	str	r3, [r7, #20]
    1016:	e00a      	b.n	102e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1018:	683b      	ldr	r3, [r7, #0]
    101a:	685b      	ldr	r3, [r3, #4]
    101c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    101e:	693a      	ldr	r2, [r7, #16]
    1020:	4313      	orrs	r3, r2
    1022:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1024:	697b      	ldr	r3, [r7, #20]
    1026:	2280      	movs	r2, #128	; 0x80
    1028:	0292      	lsls	r2, r2, #10
    102a:	4313      	orrs	r3, r2
    102c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    102e:	683b      	ldr	r3, [r7, #0]
    1030:	7a1b      	ldrb	r3, [r3, #8]
    1032:	2b00      	cmp	r3, #0
    1034:	d004      	beq.n	1040 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1036:	697b      	ldr	r3, [r7, #20]
    1038:	2280      	movs	r2, #128	; 0x80
    103a:	0392      	lsls	r2, r2, #14
    103c:	4313      	orrs	r3, r2
    103e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1040:	46c0      	nop			; (mov r8, r8)
    1042:	4b13      	ldr	r3, [pc, #76]	; (1090 <system_gclk_gen_set_config+0x110>)
    1044:	4798      	blx	r3
    1046:	1e03      	subs	r3, r0, #0
    1048:	d1fb      	bne.n	1042 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    104a:	4b12      	ldr	r3, [pc, #72]	; (1094 <system_gclk_gen_set_config+0x114>)
    104c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    104e:	4a12      	ldr	r2, [pc, #72]	; (1098 <system_gclk_gen_set_config+0x118>)
    1050:	1dfb      	adds	r3, r7, #7
    1052:	781b      	ldrb	r3, [r3, #0]
    1054:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	4b0d      	ldr	r3, [pc, #52]	; (1090 <system_gclk_gen_set_config+0x110>)
    105a:	4798      	blx	r3
    105c:	1e03      	subs	r3, r0, #0
    105e:	d1fb      	bne.n	1058 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1060:	4b0e      	ldr	r3, [pc, #56]	; (109c <system_gclk_gen_set_config+0x11c>)
    1062:	693a      	ldr	r2, [r7, #16]
    1064:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	4b09      	ldr	r3, [pc, #36]	; (1090 <system_gclk_gen_set_config+0x110>)
    106a:	4798      	blx	r3
    106c:	1e03      	subs	r3, r0, #0
    106e:	d1fb      	bne.n	1068 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1070:	4b0a      	ldr	r3, [pc, #40]	; (109c <system_gclk_gen_set_config+0x11c>)
    1072:	4a0a      	ldr	r2, [pc, #40]	; (109c <system_gclk_gen_set_config+0x11c>)
    1074:	6851      	ldr	r1, [r2, #4]
    1076:	2280      	movs	r2, #128	; 0x80
    1078:	0252      	lsls	r2, r2, #9
    107a:	4011      	ands	r1, r2
    107c:	697a      	ldr	r2, [r7, #20]
    107e:	430a      	orrs	r2, r1
    1080:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1082:	4b07      	ldr	r3, [pc, #28]	; (10a0 <system_gclk_gen_set_config+0x120>)
    1084:	4798      	blx	r3
}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	46bd      	mov	sp, r7
    108a:	b006      	add	sp, #24
    108c:	bd80      	pop	{r7, pc}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	00000f31 	.word	0x00000f31
    1094:	00000f09 	.word	0x00000f09
    1098:	40000c08 	.word	0x40000c08
    109c:	40000c00 	.word	0x40000c00
    10a0:	00000f1d 	.word	0x00000f1d

000010a4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    10a4:	b580      	push	{r7, lr}
    10a6:	b082      	sub	sp, #8
    10a8:	af00      	add	r7, sp, #0
    10aa:	0002      	movs	r2, r0
    10ac:	1dfb      	adds	r3, r7, #7
    10ae:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    10b0:	46c0      	nop			; (mov r8, r8)
    10b2:	4b0e      	ldr	r3, [pc, #56]	; (10ec <system_gclk_gen_enable+0x48>)
    10b4:	4798      	blx	r3
    10b6:	1e03      	subs	r3, r0, #0
    10b8:	d1fb      	bne.n	10b2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    10ba:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <system_gclk_gen_enable+0x4c>)
    10bc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10be:	4a0d      	ldr	r2, [pc, #52]	; (10f4 <system_gclk_gen_enable+0x50>)
    10c0:	1dfb      	adds	r3, r7, #7
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	4b08      	ldr	r3, [pc, #32]	; (10ec <system_gclk_gen_enable+0x48>)
    10ca:	4798      	blx	r3
    10cc:	1e03      	subs	r3, r0, #0
    10ce:	d1fb      	bne.n	10c8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    10d0:	4b09      	ldr	r3, [pc, #36]	; (10f8 <system_gclk_gen_enable+0x54>)
    10d2:	4a09      	ldr	r2, [pc, #36]	; (10f8 <system_gclk_gen_enable+0x54>)
    10d4:	6852      	ldr	r2, [r2, #4]
    10d6:	2180      	movs	r1, #128	; 0x80
    10d8:	0249      	lsls	r1, r1, #9
    10da:	430a      	orrs	r2, r1
    10dc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    10de:	4b07      	ldr	r3, [pc, #28]	; (10fc <system_gclk_gen_enable+0x58>)
    10e0:	4798      	blx	r3
}
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	46bd      	mov	sp, r7
    10e6:	b002      	add	sp, #8
    10e8:	bd80      	pop	{r7, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	00000f31 	.word	0x00000f31
    10f0:	00000f09 	.word	0x00000f09
    10f4:	40000c04 	.word	0x40000c04
    10f8:	40000c00 	.word	0x40000c00
    10fc:	00000f1d 	.word	0x00000f1d

00001100 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1100:	b580      	push	{r7, lr}
    1102:	b084      	sub	sp, #16
    1104:	af00      	add	r7, sp, #0
    1106:	0002      	movs	r2, r0
    1108:	6039      	str	r1, [r7, #0]
    110a:	1dfb      	adds	r3, r7, #7
    110c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    110e:	1dfb      	adds	r3, r7, #7
    1110:	781b      	ldrb	r3, [r3, #0]
    1112:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1114:	683b      	ldr	r3, [r7, #0]
    1116:	781b      	ldrb	r3, [r3, #0]
    1118:	021b      	lsls	r3, r3, #8
    111a:	001a      	movs	r2, r3
    111c:	68fb      	ldr	r3, [r7, #12]
    111e:	4313      	orrs	r3, r2
    1120:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1122:	1dfb      	adds	r3, r7, #7
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	0018      	movs	r0, r3
    1128:	4b04      	ldr	r3, [pc, #16]	; (113c <system_gclk_chan_set_config+0x3c>)
    112a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <system_gclk_chan_set_config+0x40>)
    112e:	68fa      	ldr	r2, [r7, #12]
    1130:	b292      	uxth	r2, r2
    1132:	805a      	strh	r2, [r3, #2]
}
    1134:	46c0      	nop			; (mov r8, r8)
    1136:	46bd      	mov	sp, r7
    1138:	b004      	add	sp, #16
    113a:	bd80      	pop	{r7, pc}
    113c:	0000118d 	.word	0x0000118d
    1140:	40000c00 	.word	0x40000c00

00001144 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1144:	b580      	push	{r7, lr}
    1146:	b082      	sub	sp, #8
    1148:	af00      	add	r7, sp, #0
    114a:	0002      	movs	r2, r0
    114c:	1dfb      	adds	r3, r7, #7
    114e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1150:	4b0a      	ldr	r3, [pc, #40]	; (117c <system_gclk_chan_enable+0x38>)
    1152:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1154:	4a0a      	ldr	r2, [pc, #40]	; (1180 <system_gclk_chan_enable+0x3c>)
    1156:	1dfb      	adds	r3, r7, #7
    1158:	781b      	ldrb	r3, [r3, #0]
    115a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    115c:	4909      	ldr	r1, [pc, #36]	; (1184 <system_gclk_chan_enable+0x40>)
    115e:	4b09      	ldr	r3, [pc, #36]	; (1184 <system_gclk_chan_enable+0x40>)
    1160:	885b      	ldrh	r3, [r3, #2]
    1162:	b29b      	uxth	r3, r3
    1164:	2280      	movs	r2, #128	; 0x80
    1166:	01d2      	lsls	r2, r2, #7
    1168:	4313      	orrs	r3, r2
    116a:	b29b      	uxth	r3, r3
    116c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    116e:	4b06      	ldr	r3, [pc, #24]	; (1188 <system_gclk_chan_enable+0x44>)
    1170:	4798      	blx	r3
}
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	46bd      	mov	sp, r7
    1176:	b002      	add	sp, #8
    1178:	bd80      	pop	{r7, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	00000f09 	.word	0x00000f09
    1180:	40000c02 	.word	0x40000c02
    1184:	40000c00 	.word	0x40000c00
    1188:	00000f1d 	.word	0x00000f1d

0000118c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    118c:	b580      	push	{r7, lr}
    118e:	b084      	sub	sp, #16
    1190:	af00      	add	r7, sp, #0
    1192:	0002      	movs	r2, r0
    1194:	1dfb      	adds	r3, r7, #7
    1196:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1198:	4b1c      	ldr	r3, [pc, #112]	; (120c <system_gclk_chan_disable+0x80>)
    119a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    119c:	4a1c      	ldr	r2, [pc, #112]	; (1210 <system_gclk_chan_disable+0x84>)
    119e:	1dfb      	adds	r3, r7, #7
    11a0:	781b      	ldrb	r3, [r3, #0]
    11a2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    11a4:	4b1b      	ldr	r3, [pc, #108]	; (1214 <system_gclk_chan_disable+0x88>)
    11a6:	885b      	ldrh	r3, [r3, #2]
    11a8:	051b      	lsls	r3, r3, #20
    11aa:	0f1b      	lsrs	r3, r3, #28
    11ac:	b2db      	uxtb	r3, r3
    11ae:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    11b0:	4a18      	ldr	r2, [pc, #96]	; (1214 <system_gclk_chan_disable+0x88>)
    11b2:	8853      	ldrh	r3, [r2, #2]
    11b4:	4918      	ldr	r1, [pc, #96]	; (1218 <system_gclk_chan_disable+0x8c>)
    11b6:	400b      	ands	r3, r1
    11b8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    11ba:	4a16      	ldr	r2, [pc, #88]	; (1214 <system_gclk_chan_disable+0x88>)
    11bc:	4b15      	ldr	r3, [pc, #84]	; (1214 <system_gclk_chan_disable+0x88>)
    11be:	885b      	ldrh	r3, [r3, #2]
    11c0:	b29b      	uxth	r3, r3
    11c2:	4916      	ldr	r1, [pc, #88]	; (121c <system_gclk_chan_disable+0x90>)
    11c4:	400b      	ands	r3, r1
    11c6:	b29b      	uxth	r3, r3
    11c8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	4b11      	ldr	r3, [pc, #68]	; (1214 <system_gclk_chan_disable+0x88>)
    11ce:	885b      	ldrh	r3, [r3, #2]
    11d0:	b29b      	uxth	r3, r3
    11d2:	001a      	movs	r2, r3
    11d4:	2380      	movs	r3, #128	; 0x80
    11d6:	01db      	lsls	r3, r3, #7
    11d8:	4013      	ands	r3, r2
    11da:	d1f7      	bne.n	11cc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    11dc:	4a0d      	ldr	r2, [pc, #52]	; (1214 <system_gclk_chan_disable+0x88>)
    11de:	68fb      	ldr	r3, [r7, #12]
    11e0:	b2db      	uxtb	r3, r3
    11e2:	1c19      	adds	r1, r3, #0
    11e4:	230f      	movs	r3, #15
    11e6:	400b      	ands	r3, r1
    11e8:	b2d9      	uxtb	r1, r3
    11ea:	8853      	ldrh	r3, [r2, #2]
    11ec:	1c08      	adds	r0, r1, #0
    11ee:	210f      	movs	r1, #15
    11f0:	4001      	ands	r1, r0
    11f2:	0208      	lsls	r0, r1, #8
    11f4:	4908      	ldr	r1, [pc, #32]	; (1218 <system_gclk_chan_disable+0x8c>)
    11f6:	400b      	ands	r3, r1
    11f8:	1c19      	adds	r1, r3, #0
    11fa:	1c03      	adds	r3, r0, #0
    11fc:	430b      	orrs	r3, r1
    11fe:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    1200:	4b07      	ldr	r3, [pc, #28]	; (1220 <system_gclk_chan_disable+0x94>)
    1202:	4798      	blx	r3
}
    1204:	46c0      	nop			; (mov r8, r8)
    1206:	46bd      	mov	sp, r7
    1208:	b004      	add	sp, #16
    120a:	bd80      	pop	{r7, pc}
    120c:	00000f09 	.word	0x00000f09
    1210:	40000c02 	.word	0x40000c02
    1214:	40000c00 	.word	0x40000c00
    1218:	fffff0ff 	.word	0xfffff0ff
    121c:	ffffbfff 	.word	0xffffbfff
    1220:	00000f1d 	.word	0x00000f1d

00001224 <system_pinmux_get_group_from_gpio_pin>:
{
    1224:	b580      	push	{r7, lr}
    1226:	b084      	sub	sp, #16
    1228:	af00      	add	r7, sp, #0
    122a:	0002      	movs	r2, r0
    122c:	1dfb      	adds	r3, r7, #7
    122e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1230:	230f      	movs	r3, #15
    1232:	18fb      	adds	r3, r7, r3
    1234:	1dfa      	adds	r2, r7, #7
    1236:	7812      	ldrb	r2, [r2, #0]
    1238:	09d2      	lsrs	r2, r2, #7
    123a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    123c:	230e      	movs	r3, #14
    123e:	18fb      	adds	r3, r7, r3
    1240:	1dfa      	adds	r2, r7, #7
    1242:	7812      	ldrb	r2, [r2, #0]
    1244:	0952      	lsrs	r2, r2, #5
    1246:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1248:	4b0d      	ldr	r3, [pc, #52]	; (1280 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    124a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    124c:	230f      	movs	r3, #15
    124e:	18fb      	adds	r3, r7, r3
    1250:	781b      	ldrb	r3, [r3, #0]
    1252:	2b00      	cmp	r3, #0
    1254:	d10f      	bne.n	1276 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1256:	230f      	movs	r3, #15
    1258:	18fb      	adds	r3, r7, r3
    125a:	781b      	ldrb	r3, [r3, #0]
    125c:	009b      	lsls	r3, r3, #2
    125e:	2210      	movs	r2, #16
    1260:	4694      	mov	ip, r2
    1262:	44bc      	add	ip, r7
    1264:	4463      	add	r3, ip
    1266:	3b08      	subs	r3, #8
    1268:	681a      	ldr	r2, [r3, #0]
    126a:	230e      	movs	r3, #14
    126c:	18fb      	adds	r3, r7, r3
    126e:	781b      	ldrb	r3, [r3, #0]
    1270:	01db      	lsls	r3, r3, #7
    1272:	18d3      	adds	r3, r2, r3
    1274:	e000      	b.n	1278 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1276:	2300      	movs	r3, #0
}
    1278:	0018      	movs	r0, r3
    127a:	46bd      	mov	sp, r7
    127c:	b004      	add	sp, #16
    127e:	bd80      	pop	{r7, pc}
    1280:	41004400 	.word	0x41004400

00001284 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1284:	b580      	push	{r7, lr}
    1286:	b088      	sub	sp, #32
    1288:	af00      	add	r7, sp, #0
    128a:	60f8      	str	r0, [r7, #12]
    128c:	60b9      	str	r1, [r7, #8]
    128e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1290:	2300      	movs	r3, #0
    1292:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	78db      	ldrb	r3, [r3, #3]
    1298:	2201      	movs	r2, #1
    129a:	4053      	eors	r3, r2
    129c:	b2db      	uxtb	r3, r3
    129e:	2b00      	cmp	r3, #0
    12a0:	d035      	beq.n	130e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    12a2:	687b      	ldr	r3, [r7, #4]
    12a4:	781b      	ldrb	r3, [r3, #0]
    12a6:	2b80      	cmp	r3, #128	; 0x80
    12a8:	d00b      	beq.n	12c2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    12aa:	69fb      	ldr	r3, [r7, #28]
    12ac:	2280      	movs	r2, #128	; 0x80
    12ae:	0252      	lsls	r2, r2, #9
    12b0:	4313      	orrs	r3, r2
    12b2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	061b      	lsls	r3, r3, #24
    12ba:	001a      	movs	r2, r3
    12bc:	69fb      	ldr	r3, [r7, #28]
    12be:	4313      	orrs	r3, r2
    12c0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	785b      	ldrb	r3, [r3, #1]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d003      	beq.n	12d2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    12ce:	2b02      	cmp	r3, #2
    12d0:	d110      	bne.n	12f4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    12d2:	69fb      	ldr	r3, [r7, #28]
    12d4:	2280      	movs	r2, #128	; 0x80
    12d6:	0292      	lsls	r2, r2, #10
    12d8:	4313      	orrs	r3, r2
    12da:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	789b      	ldrb	r3, [r3, #2]
    12e0:	2b00      	cmp	r3, #0
    12e2:	d004      	beq.n	12ee <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    12e4:	69fb      	ldr	r3, [r7, #28]
    12e6:	2280      	movs	r2, #128	; 0x80
    12e8:	02d2      	lsls	r2, r2, #11
    12ea:	4313      	orrs	r3, r2
    12ec:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    12ee:	68fb      	ldr	r3, [r7, #12]
    12f0:	68ba      	ldr	r2, [r7, #8]
    12f2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	785b      	ldrb	r3, [r3, #1]
    12f8:	2b01      	cmp	r3, #1
    12fa:	d003      	beq.n	1304 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    12fc:	687b      	ldr	r3, [r7, #4]
    12fe:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1300:	2b02      	cmp	r3, #2
    1302:	d107      	bne.n	1314 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1304:	69fb      	ldr	r3, [r7, #28]
    1306:	4a22      	ldr	r2, [pc, #136]	; (1390 <_system_pinmux_config+0x10c>)
    1308:	4013      	ands	r3, r2
    130a:	61fb      	str	r3, [r7, #28]
    130c:	e002      	b.n	1314 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    130e:	68fb      	ldr	r3, [r7, #12]
    1310:	68ba      	ldr	r2, [r7, #8]
    1312:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1314:	68bb      	ldr	r3, [r7, #8]
    1316:	041b      	lsls	r3, r3, #16
    1318:	0c1b      	lsrs	r3, r3, #16
    131a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    131c:	68bb      	ldr	r3, [r7, #8]
    131e:	0c1b      	lsrs	r3, r3, #16
    1320:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1322:	69ba      	ldr	r2, [r7, #24]
    1324:	69fb      	ldr	r3, [r7, #28]
    1326:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1328:	22a0      	movs	r2, #160	; 0xa0
    132a:	05d2      	lsls	r2, r2, #23
    132c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1332:	697a      	ldr	r2, [r7, #20]
    1334:	69fb      	ldr	r3, [r7, #28]
    1336:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1338:	22d0      	movs	r2, #208	; 0xd0
    133a:	0612      	lsls	r2, r2, #24
    133c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    133e:	68fb      	ldr	r3, [r7, #12]
    1340:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	78db      	ldrb	r3, [r3, #3]
    1346:	2201      	movs	r2, #1
    1348:	4053      	eors	r3, r2
    134a:	b2db      	uxtb	r3, r3
    134c:	2b00      	cmp	r3, #0
    134e:	d01a      	beq.n	1386 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1350:	69fa      	ldr	r2, [r7, #28]
    1352:	2380      	movs	r3, #128	; 0x80
    1354:	02db      	lsls	r3, r3, #11
    1356:	4013      	ands	r3, r2
    1358:	d00a      	beq.n	1370 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	789b      	ldrb	r3, [r3, #2]
    135e:	2b01      	cmp	r3, #1
    1360:	d103      	bne.n	136a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	68ba      	ldr	r2, [r7, #8]
    1366:	619a      	str	r2, [r3, #24]
    1368:	e002      	b.n	1370 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    136a:	68fb      	ldr	r3, [r7, #12]
    136c:	68ba      	ldr	r2, [r7, #8]
    136e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1370:	687b      	ldr	r3, [r7, #4]
    1372:	785b      	ldrb	r3, [r3, #1]
    1374:	2b01      	cmp	r3, #1
    1376:	d003      	beq.n	1380 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    137c:	2b02      	cmp	r3, #2
    137e:	d102      	bne.n	1386 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	68ba      	ldr	r2, [r7, #8]
    1384:	609a      	str	r2, [r3, #8]
		}
	}
}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	46bd      	mov	sp, r7
    138a:	b008      	add	sp, #32
    138c:	bd80      	pop	{r7, pc}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	fffbffff 	.word	0xfffbffff

00001394 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1394:	b580      	push	{r7, lr}
    1396:	b084      	sub	sp, #16
    1398:	af00      	add	r7, sp, #0
    139a:	0002      	movs	r2, r0
    139c:	6039      	str	r1, [r7, #0]
    139e:	1dfb      	adds	r3, r7, #7
    13a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    13a2:	1dfb      	adds	r3, r7, #7
    13a4:	781b      	ldrb	r3, [r3, #0]
    13a6:	0018      	movs	r0, r3
    13a8:	4b0a      	ldr	r3, [pc, #40]	; (13d4 <system_pinmux_pin_set_config+0x40>)
    13aa:	4798      	blx	r3
    13ac:	0003      	movs	r3, r0
    13ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    13b0:	1dfb      	adds	r3, r7, #7
    13b2:	781b      	ldrb	r3, [r3, #0]
    13b4:	221f      	movs	r2, #31
    13b6:	4013      	ands	r3, r2
    13b8:	2201      	movs	r2, #1
    13ba:	409a      	lsls	r2, r3
    13bc:	0013      	movs	r3, r2
    13be:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    13c0:	683a      	ldr	r2, [r7, #0]
    13c2:	68b9      	ldr	r1, [r7, #8]
    13c4:	68fb      	ldr	r3, [r7, #12]
    13c6:	0018      	movs	r0, r3
    13c8:	4b03      	ldr	r3, [pc, #12]	; (13d8 <system_pinmux_pin_set_config+0x44>)
    13ca:	4798      	blx	r3
}
    13cc:	46c0      	nop			; (mov r8, r8)
    13ce:	46bd      	mov	sp, r7
    13d0:	b004      	add	sp, #16
    13d2:	bd80      	pop	{r7, pc}
    13d4:	00001225 	.word	0x00001225
    13d8:	00001285 	.word	0x00001285

000013dc <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    13dc:	b580      	push	{r7, lr}
    13de:	af00      	add	r7, sp, #0
	return;
    13e0:	46c0      	nop			; (mov r8, r8)
}
    13e2:	46bd      	mov	sp, r7
    13e4:	bd80      	pop	{r7, pc}
	...

000013e8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    13ec:	4b06      	ldr	r3, [pc, #24]	; (1408 <system_init+0x20>)
    13ee:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    13f0:	4b06      	ldr	r3, [pc, #24]	; (140c <system_init+0x24>)
    13f2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    13f4:	4b06      	ldr	r3, [pc, #24]	; (1410 <system_init+0x28>)
    13f6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    13f8:	4b06      	ldr	r3, [pc, #24]	; (1414 <system_init+0x2c>)
    13fa:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    13fc:	4b06      	ldr	r3, [pc, #24]	; (1418 <system_init+0x30>)
    13fe:	4798      	blx	r3
}
    1400:	46c0      	nop			; (mov r8, r8)
    1402:	46bd      	mov	sp, r7
    1404:	bd80      	pop	{r7, pc}
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	00000dd9 	.word	0x00000dd9
    140c:	0000027d 	.word	0x0000027d
    1410:	000013dd 	.word	0x000013dd
    1414:	000013dd 	.word	0x000013dd
    1418:	000013dd 	.word	0x000013dd

0000141c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    141c:	b580      	push	{r7, lr}
    141e:	b082      	sub	sp, #8
    1420:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1422:	4b2f      	ldr	r3, [pc, #188]	; (14e0 <Reset_Handler+0xc4>)
    1424:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1426:	4b2f      	ldr	r3, [pc, #188]	; (14e4 <Reset_Handler+0xc8>)
    1428:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    142a:	687a      	ldr	r2, [r7, #4]
    142c:	683b      	ldr	r3, [r7, #0]
    142e:	429a      	cmp	r2, r3
    1430:	d00c      	beq.n	144c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1432:	e007      	b.n	1444 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1434:	683b      	ldr	r3, [r7, #0]
    1436:	1d1a      	adds	r2, r3, #4
    1438:	603a      	str	r2, [r7, #0]
    143a:	687a      	ldr	r2, [r7, #4]
    143c:	1d11      	adds	r1, r2, #4
    143e:	6079      	str	r1, [r7, #4]
    1440:	6812      	ldr	r2, [r2, #0]
    1442:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1444:	683a      	ldr	r2, [r7, #0]
    1446:	4b28      	ldr	r3, [pc, #160]	; (14e8 <Reset_Handler+0xcc>)
    1448:	429a      	cmp	r2, r3
    144a:	d3f3      	bcc.n	1434 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    144c:	4b27      	ldr	r3, [pc, #156]	; (14ec <Reset_Handler+0xd0>)
    144e:	603b      	str	r3, [r7, #0]
    1450:	e004      	b.n	145c <Reset_Handler+0x40>
                *pDest++ = 0;
    1452:	683b      	ldr	r3, [r7, #0]
    1454:	1d1a      	adds	r2, r3, #4
    1456:	603a      	str	r2, [r7, #0]
    1458:	2200      	movs	r2, #0
    145a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    145c:	683a      	ldr	r2, [r7, #0]
    145e:	4b24      	ldr	r3, [pc, #144]	; (14f0 <Reset_Handler+0xd4>)
    1460:	429a      	cmp	r2, r3
    1462:	d3f6      	bcc.n	1452 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1464:	4b23      	ldr	r3, [pc, #140]	; (14f4 <Reset_Handler+0xd8>)
    1466:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1468:	4b23      	ldr	r3, [pc, #140]	; (14f8 <Reset_Handler+0xdc>)
    146a:	687a      	ldr	r2, [r7, #4]
    146c:	21ff      	movs	r1, #255	; 0xff
    146e:	438a      	bics	r2, r1
    1470:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1472:	4a22      	ldr	r2, [pc, #136]	; (14fc <Reset_Handler+0xe0>)
    1474:	2390      	movs	r3, #144	; 0x90
    1476:	005b      	lsls	r3, r3, #1
    1478:	2102      	movs	r1, #2
    147a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    147c:	4a20      	ldr	r2, [pc, #128]	; (1500 <Reset_Handler+0xe4>)
    147e:	78d3      	ldrb	r3, [r2, #3]
    1480:	2103      	movs	r1, #3
    1482:	438b      	bics	r3, r1
    1484:	1c19      	adds	r1, r3, #0
    1486:	2302      	movs	r3, #2
    1488:	430b      	orrs	r3, r1
    148a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    148c:	4a1c      	ldr	r2, [pc, #112]	; (1500 <Reset_Handler+0xe4>)
    148e:	78d3      	ldrb	r3, [r2, #3]
    1490:	210c      	movs	r1, #12
    1492:	438b      	bics	r3, r1
    1494:	1c19      	adds	r1, r3, #0
    1496:	2308      	movs	r3, #8
    1498:	430b      	orrs	r3, r1
    149a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    149c:	4a19      	ldr	r2, [pc, #100]	; (1504 <Reset_Handler+0xe8>)
    149e:	7b93      	ldrb	r3, [r2, #14]
    14a0:	2130      	movs	r1, #48	; 0x30
    14a2:	438b      	bics	r3, r1
    14a4:	1c19      	adds	r1, r3, #0
    14a6:	2320      	movs	r3, #32
    14a8:	430b      	orrs	r3, r1
    14aa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    14ac:	4a15      	ldr	r2, [pc, #84]	; (1504 <Reset_Handler+0xe8>)
    14ae:	7b93      	ldrb	r3, [r2, #14]
    14b0:	210c      	movs	r1, #12
    14b2:	438b      	bics	r3, r1
    14b4:	1c19      	adds	r1, r3, #0
    14b6:	2308      	movs	r3, #8
    14b8:	430b      	orrs	r3, r1
    14ba:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    14bc:	4a11      	ldr	r2, [pc, #68]	; (1504 <Reset_Handler+0xe8>)
    14be:	7b93      	ldrb	r3, [r2, #14]
    14c0:	2103      	movs	r1, #3
    14c2:	438b      	bics	r3, r1
    14c4:	1c19      	adds	r1, r3, #0
    14c6:	2302      	movs	r3, #2
    14c8:	430b      	orrs	r3, r1
    14ca:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    14cc:	4a0e      	ldr	r2, [pc, #56]	; (1508 <Reset_Handler+0xec>)
    14ce:	6853      	ldr	r3, [r2, #4]
    14d0:	2180      	movs	r1, #128	; 0x80
    14d2:	430b      	orrs	r3, r1
    14d4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    14d6:	4b0d      	ldr	r3, [pc, #52]	; (150c <Reset_Handler+0xf0>)
    14d8:	4798      	blx	r3

        /* Branch to main function */
        main();
    14da:	4b0d      	ldr	r3, [pc, #52]	; (1510 <Reset_Handler+0xf4>)
    14dc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    14de:	e7fe      	b.n	14de <Reset_Handler+0xc2>
    14e0:	0000194c 	.word	0x0000194c
    14e4:	20000000 	.word	0x20000000
    14e8:	20000004 	.word	0x20000004
    14ec:	20000004 	.word	0x20000004
    14f0:	20000048 	.word	0x20000048
    14f4:	00000000 	.word	0x00000000
    14f8:	e000ed00 	.word	0xe000ed00
    14fc:	41007000 	.word	0x41007000
    1500:	41005000 	.word	0x41005000
    1504:	41004800 	.word	0x41004800
    1508:	41004000 	.word	0x41004000
    150c:	00001789 	.word	0x00001789
    1510:	00001745 	.word	0x00001745

00001514 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1514:	b580      	push	{r7, lr}
    1516:	af00      	add	r7, sp, #0
        while (1) {
    1518:	e7fe      	b.n	1518 <Dummy_Handler+0x4>

0000151a <adc_is_syncing>:
{
    151a:	b580      	push	{r7, lr}
    151c:	b084      	sub	sp, #16
    151e:	af00      	add	r7, sp, #0
    1520:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	681b      	ldr	r3, [r3, #0]
    1526:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1528:	68fb      	ldr	r3, [r7, #12]
    152a:	7e5b      	ldrb	r3, [r3, #25]
    152c:	b2db      	uxtb	r3, r3
    152e:	b25b      	sxtb	r3, r3
    1530:	2b00      	cmp	r3, #0
    1532:	da01      	bge.n	1538 <adc_is_syncing+0x1e>
		return true;
    1534:	2301      	movs	r3, #1
    1536:	e000      	b.n	153a <adc_is_syncing+0x20>
	return false;
    1538:	2300      	movs	r3, #0
}
    153a:	0018      	movs	r0, r3
    153c:	46bd      	mov	sp, r7
    153e:	b004      	add	sp, #16
    1540:	bd80      	pop	{r7, pc}

00001542 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    1542:	b580      	push	{r7, lr}
    1544:	b086      	sub	sp, #24
    1546:	af00      	add	r7, sp, #0
    1548:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    1550:	693b      	ldr	r3, [r7, #16]
    1552:	7e1b      	ldrb	r3, [r3, #24]
    1554:	b2db      	uxtb	r3, r3
    1556:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    1558:	2300      	movs	r3, #0
    155a:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    155c:	68fb      	ldr	r3, [r7, #12]
    155e:	2201      	movs	r2, #1
    1560:	4013      	ands	r3, r2
    1562:	d003      	beq.n	156c <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    1564:	697b      	ldr	r3, [r7, #20]
    1566:	2201      	movs	r2, #1
    1568:	4313      	orrs	r3, r2
    156a:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    156c:	68fb      	ldr	r3, [r7, #12]
    156e:	2204      	movs	r2, #4
    1570:	4013      	ands	r3, r2
    1572:	d003      	beq.n	157c <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    1574:	697b      	ldr	r3, [r7, #20]
    1576:	2202      	movs	r2, #2
    1578:	4313      	orrs	r3, r2
    157a:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    157c:	68fb      	ldr	r3, [r7, #12]
    157e:	2202      	movs	r2, #2
    1580:	4013      	ands	r3, r2
    1582:	d003      	beq.n	158c <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    1584:	697b      	ldr	r3, [r7, #20]
    1586:	2204      	movs	r2, #4
    1588:	4313      	orrs	r3, r2
    158a:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    158c:	697b      	ldr	r3, [r7, #20]
}
    158e:	0018      	movs	r0, r3
    1590:	46bd      	mov	sp, r7
    1592:	b006      	add	sp, #24
    1594:	bd80      	pop	{r7, pc}

00001596 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    1596:	b580      	push	{r7, lr}
    1598:	b084      	sub	sp, #16
    159a:	af00      	add	r7, sp, #0
    159c:	6078      	str	r0, [r7, #4]
    159e:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    15a0:	687b      	ldr	r3, [r7, #4]
    15a2:	681b      	ldr	r3, [r3, #0]
    15a4:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    15a6:	2300      	movs	r3, #0
    15a8:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    15aa:	683b      	ldr	r3, [r7, #0]
    15ac:	2201      	movs	r2, #1
    15ae:	4013      	ands	r3, r2
    15b0:	d003      	beq.n	15ba <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	2201      	movs	r2, #1
    15b6:	4313      	orrs	r3, r2
    15b8:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    15ba:	683b      	ldr	r3, [r7, #0]
    15bc:	2202      	movs	r2, #2
    15be:	4013      	ands	r3, r2
    15c0:	d003      	beq.n	15ca <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    15c2:	68fb      	ldr	r3, [r7, #12]
    15c4:	2204      	movs	r2, #4
    15c6:	4313      	orrs	r3, r2
    15c8:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    15ca:	683b      	ldr	r3, [r7, #0]
    15cc:	2204      	movs	r2, #4
    15ce:	4013      	ands	r3, r2
    15d0:	d003      	beq.n	15da <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	2202      	movs	r2, #2
    15d6:	4313      	orrs	r3, r2
    15d8:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    15da:	68fb      	ldr	r3, [r7, #12]
    15dc:	b2da      	uxtb	r2, r3
    15de:	68bb      	ldr	r3, [r7, #8]
    15e0:	761a      	strb	r2, [r3, #24]
}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	46bd      	mov	sp, r7
    15e6:	b004      	add	sp, #16
    15e8:	bd80      	pop	{r7, pc}
	...

000015ec <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    15ec:	b580      	push	{r7, lr}
    15ee:	b084      	sub	sp, #16
    15f0:	af00      	add	r7, sp, #0
    15f2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	681b      	ldr	r3, [r3, #0]
    15f8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	0018      	movs	r0, r3
    1600:	4b0e      	ldr	r3, [pc, #56]	; (163c <adc_enable+0x50>)
    1602:	4798      	blx	r3
    1604:	1e03      	subs	r3, r0, #0
    1606:	d1f9      	bne.n	15fc <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1608:	68fb      	ldr	r3, [r7, #12]
    160a:	220f      	movs	r2, #15
    160c:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    160e:	68fb      	ldr	r3, [r7, #12]
    1610:	220f      	movs	r2, #15
    1612:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1614:	68fb      	ldr	r3, [r7, #12]
    1616:	781b      	ldrb	r3, [r3, #0]
    1618:	b2db      	uxtb	r3, r3
    161a:	2202      	movs	r2, #2
    161c:	4313      	orrs	r3, r2
    161e:	b2da      	uxtb	r2, r3
    1620:	68fb      	ldr	r3, [r7, #12]
    1622:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    1624:	46c0      	nop			; (mov r8, r8)
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	0018      	movs	r0, r3
    162a:	4b04      	ldr	r3, [pc, #16]	; (163c <adc_enable+0x50>)
    162c:	4798      	blx	r3
    162e:	1e03      	subs	r3, r0, #0
    1630:	d1f9      	bne.n	1626 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    1632:	2300      	movs	r3, #0
}
    1634:	0018      	movs	r0, r3
    1636:	46bd      	mov	sp, r7
    1638:	b004      	add	sp, #16
    163a:	bd80      	pop	{r7, pc}
    163c:	0000151b 	.word	0x0000151b

00001640 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    1640:	b580      	push	{r7, lr}
    1642:	b084      	sub	sp, #16
    1644:	af00      	add	r7, sp, #0
    1646:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1648:	687b      	ldr	r3, [r7, #4]
    164a:	681b      	ldr	r3, [r3, #0]
    164c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	0018      	movs	r0, r3
    1654:	4b0b      	ldr	r3, [pc, #44]	; (1684 <adc_start_conversion+0x44>)
    1656:	4798      	blx	r3
    1658:	1e03      	subs	r3, r0, #0
    165a:	d1f9      	bne.n	1650 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    165c:	68fb      	ldr	r3, [r7, #12]
    165e:	7b1b      	ldrb	r3, [r3, #12]
    1660:	b2db      	uxtb	r3, r3
    1662:	2202      	movs	r2, #2
    1664:	4313      	orrs	r3, r2
    1666:	b2da      	uxtb	r2, r3
    1668:	68fb      	ldr	r3, [r7, #12]
    166a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    166c:	46c0      	nop			; (mov r8, r8)
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	0018      	movs	r0, r3
    1672:	4b04      	ldr	r3, [pc, #16]	; (1684 <adc_start_conversion+0x44>)
    1674:	4798      	blx	r3
    1676:	1e03      	subs	r3, r0, #0
    1678:	d1f9      	bne.n	166e <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	46bd      	mov	sp, r7
    167e:	b004      	add	sp, #16
    1680:	bd80      	pop	{r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	0000151b 	.word	0x0000151b

00001688 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    1688:	b580      	push	{r7, lr}
    168a:	b084      	sub	sp, #16
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	0018      	movs	r0, r3
    1696:	4b18      	ldr	r3, [pc, #96]	; (16f8 <adc_read+0x70>)
    1698:	4798      	blx	r3
    169a:	0002      	movs	r2, r0
    169c:	2301      	movs	r3, #1
    169e:	4013      	ands	r3, r2
    16a0:	d101      	bne.n	16a6 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    16a2:	2305      	movs	r3, #5
    16a4:	e023      	b.n	16ee <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    16ac:	46c0      	nop			; (mov r8, r8)
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	0018      	movs	r0, r3
    16b2:	4b12      	ldr	r3, [pc, #72]	; (16fc <adc_read+0x74>)
    16b4:	4798      	blx	r3
    16b6:	1e03      	subs	r3, r0, #0
    16b8:	d1f9      	bne.n	16ae <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    16ba:	68fb      	ldr	r3, [r7, #12]
    16bc:	8b5b      	ldrh	r3, [r3, #26]
    16be:	b29a      	uxth	r2, r3
    16c0:	683b      	ldr	r3, [r7, #0]
    16c2:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	2101      	movs	r1, #1
    16c8:	0018      	movs	r0, r3
    16ca:	4b0d      	ldr	r3, [pc, #52]	; (1700 <adc_read+0x78>)
    16cc:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	0018      	movs	r0, r3
    16d2:	4b09      	ldr	r3, [pc, #36]	; (16f8 <adc_read+0x70>)
    16d4:	4798      	blx	r3
    16d6:	0002      	movs	r2, r0
    16d8:	2304      	movs	r3, #4
    16da:	4013      	ands	r3, r2
    16dc:	d006      	beq.n	16ec <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	2104      	movs	r1, #4
    16e2:	0018      	movs	r0, r3
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <adc_read+0x78>)
    16e6:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    16e8:	231e      	movs	r3, #30
    16ea:	e000      	b.n	16ee <adc_read+0x66>
	}

	return STATUS_OK;
    16ec:	2300      	movs	r3, #0
}
    16ee:	0018      	movs	r0, r3
    16f0:	46bd      	mov	sp, r7
    16f2:	b004      	add	sp, #16
    16f4:	bd80      	pop	{r7, pc}
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	00001543 	.word	0x00001543
    16fc:	0000151b 	.word	0x0000151b
    1700:	00001597 	.word	0x00001597

00001704 <configure_adc>:
struct adc_module adc_instance;
//! [module_inst]

//! [setup]
void configure_adc(void)
{
    1704:	b580      	push	{r7, lr}
    1706:	b08c      	sub	sp, #48	; 0x30
    1708:	af00      	add	r7, sp, #0
//! [setup_config]
	struct adc_config config_adc;
//! [setup_config]
//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
    170a:	003b      	movs	r3, r7
    170c:	0018      	movs	r0, r3
    170e:	4b08      	ldr	r3, [pc, #32]	; (1730 <configure_adc+0x2c>)
    1710:	4798      	blx	r3

//! [setup_set_config]
#if (SAMC21)
	adc_init(&adc_instance, ADC1, &config_adc);
#else
	adc_init(&adc_instance, ADC, &config_adc);
    1712:	003a      	movs	r2, r7
    1714:	4907      	ldr	r1, [pc, #28]	; (1734 <configure_adc+0x30>)
    1716:	4b08      	ldr	r3, [pc, #32]	; (1738 <configure_adc+0x34>)
    1718:	0018      	movs	r0, r3
    171a:	4b08      	ldr	r3, [pc, #32]	; (173c <configure_adc+0x38>)
    171c:	4798      	blx	r3
#endif
//! [setup_set_config]

//! [setup_enable]
	adc_enable(&adc_instance);
    171e:	4b06      	ldr	r3, [pc, #24]	; (1738 <configure_adc+0x34>)
    1720:	0018      	movs	r0, r3
    1722:	4b07      	ldr	r3, [pc, #28]	; (1740 <configure_adc+0x3c>)
    1724:	4798      	blx	r3
//! [setup_enable]
}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	46bd      	mov	sp, r7
    172a:	b00c      	add	sp, #48	; 0x30
    172c:	bd80      	pop	{r7, pc}
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	000003d1 	.word	0x000003d1
    1734:	42002000 	.word	0x42002000
    1738:	20000040 	.word	0x20000040
    173c:	00000a21 	.word	0x00000a21
    1740:	000015ed 	.word	0x000015ed

00001744 <main>:
//! [setup]

int main(void)
{
    1744:	b580      	push	{r7, lr}
    1746:	b082      	sub	sp, #8
    1748:	af00      	add	r7, sp, #0
	system_init();
    174a:	4b0a      	ldr	r3, [pc, #40]	; (1774 <main+0x30>)
    174c:	4798      	blx	r3

//! [setup_init]
	configure_adc();
    174e:	4b0a      	ldr	r3, [pc, #40]	; (1778 <main+0x34>)
    1750:	4798      	blx	r3
//! [setup_init]

//! [main]
//! [start_conv]
	adc_start_conversion(&adc_instance);
    1752:	4b0a      	ldr	r3, [pc, #40]	; (177c <main+0x38>)
    1754:	0018      	movs	r0, r3
    1756:	4b0a      	ldr	r3, [pc, #40]	; (1780 <main+0x3c>)
    1758:	4798      	blx	r3
//! [get_res]
	uint16_t result;

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
    175a:	1cba      	adds	r2, r7, #2
    175c:	4b07      	ldr	r3, [pc, #28]	; (177c <main+0x38>)
    175e:	0011      	movs	r1, r2
    1760:	0018      	movs	r0, r3
    1762:	4b08      	ldr	r3, [pc, #32]	; (1784 <main+0x40>)
    1764:	4798      	blx	r3
    1766:	0003      	movs	r3, r0
    1768:	2b05      	cmp	r3, #5
    176a:	d0f6      	beq.n	175a <main+0x16>
//! [get_res]
	
	int i;
	i = 1;
    176c:	2301      	movs	r3, #1
    176e:	607b      	str	r3, [r7, #4]

//! [inf_loop]
	while (1) {
    1770:	e7fe      	b.n	1770 <main+0x2c>
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	000013e9 	.word	0x000013e9
    1778:	00001705 	.word	0x00001705
    177c:	20000040 	.word	0x20000040
    1780:	00001641 	.word	0x00001641
    1784:	00001689 	.word	0x00001689

00001788 <__libc_init_array>:
    1788:	b570      	push	{r4, r5, r6, lr}
    178a:	2600      	movs	r6, #0
    178c:	4d0c      	ldr	r5, [pc, #48]	; (17c0 <__libc_init_array+0x38>)
    178e:	4c0d      	ldr	r4, [pc, #52]	; (17c4 <__libc_init_array+0x3c>)
    1790:	1b64      	subs	r4, r4, r5
    1792:	10a4      	asrs	r4, r4, #2
    1794:	42a6      	cmp	r6, r4
    1796:	d109      	bne.n	17ac <__libc_init_array+0x24>
    1798:	2600      	movs	r6, #0
    179a:	f000 f8c7 	bl	192c <_init>
    179e:	4d0a      	ldr	r5, [pc, #40]	; (17c8 <__libc_init_array+0x40>)
    17a0:	4c0a      	ldr	r4, [pc, #40]	; (17cc <__libc_init_array+0x44>)
    17a2:	1b64      	subs	r4, r4, r5
    17a4:	10a4      	asrs	r4, r4, #2
    17a6:	42a6      	cmp	r6, r4
    17a8:	d105      	bne.n	17b6 <__libc_init_array+0x2e>
    17aa:	bd70      	pop	{r4, r5, r6, pc}
    17ac:	00b3      	lsls	r3, r6, #2
    17ae:	58eb      	ldr	r3, [r5, r3]
    17b0:	4798      	blx	r3
    17b2:	3601      	adds	r6, #1
    17b4:	e7ee      	b.n	1794 <__libc_init_array+0xc>
    17b6:	00b3      	lsls	r3, r6, #2
    17b8:	58eb      	ldr	r3, [r5, r3]
    17ba:	4798      	blx	r3
    17bc:	3601      	adds	r6, #1
    17be:	e7f2      	b.n	17a6 <__libc_init_array+0x1e>
    17c0:	00001938 	.word	0x00001938
    17c4:	00001938 	.word	0x00001938
    17c8:	00001938 	.word	0x00001938
    17cc:	0000193c 	.word	0x0000193c

000017d0 <memcpy>:
    17d0:	2300      	movs	r3, #0
    17d2:	b510      	push	{r4, lr}
    17d4:	429a      	cmp	r2, r3
    17d6:	d100      	bne.n	17da <memcpy+0xa>
    17d8:	bd10      	pop	{r4, pc}
    17da:	5ccc      	ldrb	r4, [r1, r3]
    17dc:	54c4      	strb	r4, [r0, r3]
    17de:	3301      	adds	r3, #1
    17e0:	e7f8      	b.n	17d4 <memcpy+0x4>
    17e2:	0000      	movs	r0, r0
    17e4:	00000002 	.word	0x00000002
    17e8:	00000003 	.word	0x00000003
    17ec:	00000004 	.word	0x00000004
    17f0:	00000005 	.word	0x00000005
    17f4:	00000006 	.word	0x00000006
    17f8:	00000007 	.word	0x00000007
    17fc:	0000000e 	.word	0x0000000e
    1800:	0000000f 	.word	0x0000000f
    1804:	0000000a 	.word	0x0000000a
    1808:	0000000b 	.word	0x0000000b
    180c:	0000ffff 	.word	0x0000ffff
    1810:	0000ffff 	.word	0x0000ffff
    1814:	0000ffff 	.word	0x0000ffff
    1818:	0000ffff 	.word	0x0000ffff
    181c:	0000ffff 	.word	0x0000ffff
    1820:	0000ffff 	.word	0x0000ffff
    1824:	0000ffff 	.word	0x0000ffff
    1828:	0000ffff 	.word	0x0000ffff
    182c:	0000ffff 	.word	0x0000ffff
    1830:	0000ffff 	.word	0x0000ffff
    1834:	00000692 	.word	0x00000692
    1838:	00000698 	.word	0x00000698
    183c:	00000698 	.word	0x00000698
    1840:	00000698 	.word	0x00000698
    1844:	00000698 	.word	0x00000698
    1848:	00000698 	.word	0x00000698
    184c:	00000698 	.word	0x00000698
    1850:	00000698 	.word	0x00000698
    1854:	00000698 	.word	0x00000698
    1858:	00000698 	.word	0x00000698
    185c:	00000698 	.word	0x00000698
    1860:	00000698 	.word	0x00000698
    1864:	00000698 	.word	0x00000698
    1868:	00000698 	.word	0x00000698
    186c:	00000698 	.word	0x00000698
    1870:	00000698 	.word	0x00000698
    1874:	00000670 	.word	0x00000670
    1878:	00000698 	.word	0x00000698
    187c:	00000698 	.word	0x00000698
    1880:	00000698 	.word	0x00000698
    1884:	00000698 	.word	0x00000698
    1888:	00000698 	.word	0x00000698
    188c:	00000698 	.word	0x00000698
    1890:	00000698 	.word	0x00000698
    1894:	00000698 	.word	0x00000698
    1898:	00000698 	.word	0x00000698
    189c:	00000698 	.word	0x00000698
    18a0:	00000698 	.word	0x00000698
    18a4:	00000698 	.word	0x00000698
    18a8:	00000698 	.word	0x00000698
    18ac:	00000698 	.word	0x00000698
    18b0:	00000698 	.word	0x00000698
    18b4:	0000068c 	.word	0x0000068c
    18b8:	00000698 	.word	0x00000698
    18bc:	00000698 	.word	0x00000698
    18c0:	00000698 	.word	0x00000698
    18c4:	00000698 	.word	0x00000698
    18c8:	00000698 	.word	0x00000698
    18cc:	00000698 	.word	0x00000698
    18d0:	00000698 	.word	0x00000698
    18d4:	00000698 	.word	0x00000698
    18d8:	00000698 	.word	0x00000698
    18dc:	00000698 	.word	0x00000698
    18e0:	00000698 	.word	0x00000698
    18e4:	00000698 	.word	0x00000698
    18e8:	00000698 	.word	0x00000698
    18ec:	00000698 	.word	0x00000698
    18f0:	00000698 	.word	0x00000698
    18f4:	00000686 	.word	0x00000686
    18f8:	0000062e 	.word	0x0000062e
    18fc:	00000644 	.word	0x00000644
    1900:	0000065a 	.word	0x0000065a
    1904:	00000614 	.word	0x00000614
    1908:	00000d30 	.word	0x00000d30
    190c:	00000d80 	.word	0x00000d80
    1910:	00000d80 	.word	0x00000d80
    1914:	00000d7c 	.word	0x00000d7c
    1918:	00000d22 	.word	0x00000d22
    191c:	00000d42 	.word	0x00000d42
    1920:	00000d12 	.word	0x00000d12
    1924:	00000d54 	.word	0x00000d54
    1928:	00000d66 	.word	0x00000d66

0000192c <_init>:
    192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1932:	bc08      	pop	{r3}
    1934:	469e      	mov	lr, r3
    1936:	4770      	bx	lr

00001938 <__init_array_start>:
    1938:	000000b5 	.word	0x000000b5

0000193c <_fini>:
    193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1942:	bc08      	pop	{r3}
    1944:	469e      	mov	lr, r3
    1946:	4770      	bx	lr

00001948 <__fini_array_start>:
    1948:	0000008d 	.word	0x0000008d
