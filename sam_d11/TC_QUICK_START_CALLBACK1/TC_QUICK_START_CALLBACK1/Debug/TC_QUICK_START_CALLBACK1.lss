
TC_QUICK_START_CALLBACK1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e1c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000e1c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  20000004  00000e20  00020004  2**2
                  ALLOC
  3 .stack        00000400  200000b0  00000ecc  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018242  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b2b  00000000  00000000  000382c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000315d  00000000  00000000  0003adf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000378  00000000  00000000  0003df4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000380  00000000  00000000  0003e2c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001560d  00000000  00000000  0003e647  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008488  00000000  00000000  00053c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000767cf  00000000  00000000  0005c0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000784  00000000  00000000  000d28ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	b0 04 00 20 15 0b 00 00 11 0b 00 00 11 0b 00 00     ... ............
	...
  2c:	11 0b 00 00 00 00 00 00 00 00 00 00 11 0b 00 00     ................
  3c:	11 0b 00 00 11 0b 00 00 11 0b 00 00 11 0b 00 00     ................
  4c:	11 0b 00 00 49 02 00 00 11 0b 00 00 11 0b 00 00     ....I...........
  5c:	11 0b 00 00 11 0b 00 00 11 0b 00 00 11 0b 00 00     ................
  6c:	11 0b 00 00 11 0b 00 00 4d 08 00 00 5d 08 00 00     ........M...]...
  7c:	11 0b 00 00 11 0b 00 00 11 0b 00 00 11 0b 00 00     ................

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000004 	.word	0x20000004
  ac:	00000000 	.word	0x00000000
  b0:	00000e1c 	.word	0x00000e1c

000000b4 <frame_dummy>:
  b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b6:	b510      	push	{r4, lr}
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd10      	pop	{r4, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	20000008 	.word	0x20000008
  e0:	00000e1c 	.word	0x00000e1c
  e4:	00000e1c 	.word	0x00000e1c
  e8:	00000000 	.word	0x00000000

000000ec <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
  ec:	4a04      	ldr	r2, [pc, #16]	; (100 <_extint_enable+0x14>)
  ee:	7813      	ldrb	r3, [r2, #0]
  f0:	2102      	movs	r1, #2
  f2:	430b      	orrs	r3, r1
  f4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
  f6:	7853      	ldrb	r3, [r2, #1]
  f8:	b25b      	sxtb	r3, r3
  fa:	2b00      	cmp	r3, #0
  fc:	dbfb      	blt.n	f6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
  fe:	4770      	bx	lr
 100:	40001800 	.word	0x40001800

00000104 <_system_extint_init>:
{
 104:	b500      	push	{lr}
 106:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 108:	4a12      	ldr	r2, [pc, #72]	; (154 <_system_extint_init+0x50>)
 10a:	6993      	ldr	r3, [r2, #24]
 10c:	2140      	movs	r1, #64	; 0x40
 10e:	430b      	orrs	r3, r1
 110:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
 112:	a901      	add	r1, sp, #4
 114:	2300      	movs	r3, #0
 116:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
 118:	2005      	movs	r0, #5
 11a:	4b0f      	ldr	r3, [pc, #60]	; (158 <_system_extint_init+0x54>)
 11c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
 11e:	2005      	movs	r0, #5
 120:	4b0e      	ldr	r3, [pc, #56]	; (15c <_system_extint_init+0x58>)
 122:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
 124:	4a0e      	ldr	r2, [pc, #56]	; (160 <_system_extint_init+0x5c>)
 126:	7813      	ldrb	r3, [r2, #0]
 128:	2101      	movs	r1, #1
 12a:	430b      	orrs	r3, r1
 12c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 12e:	7853      	ldrb	r3, [r2, #1]
 130:	b25b      	sxtb	r3, r3
 132:	2b00      	cmp	r3, #0
 134:	dbfb      	blt.n	12e <_system_extint_init+0x2a>
 136:	4b0b      	ldr	r3, [pc, #44]	; (164 <_system_extint_init+0x60>)
 138:	0019      	movs	r1, r3
 13a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
 13c:	2200      	movs	r2, #0
 13e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
 140:	4299      	cmp	r1, r3
 142:	d1fc      	bne.n	13e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 144:	2210      	movs	r2, #16
 146:	4b08      	ldr	r3, [pc, #32]	; (168 <_system_extint_init+0x64>)
 148:	601a      	str	r2, [r3, #0]
	_extint_enable();
 14a:	4b08      	ldr	r3, [pc, #32]	; (16c <_system_extint_init+0x68>)
 14c:	4798      	blx	r3
}
 14e:	b003      	add	sp, #12
 150:	bd00      	pop	{pc}
 152:	46c0      	nop			; (mov r8, r8)
 154:	40000400 	.word	0x40000400
 158:	00000691 	.word	0x00000691
 15c:	00000605 	.word	0x00000605
 160:	40001800 	.word	0x40001800
 164:	20000048 	.word	0x20000048
 168:	e000e100 	.word	0xe000e100
 16c:	000000ed 	.word	0x000000ed

00000170 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
 170:	2300      	movs	r3, #0
 172:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
 174:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
 176:	2201      	movs	r2, #1
 178:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
 17a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
 17c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
 17e:	3302      	adds	r3, #2
 180:	72c3      	strb	r3, [r0, #11]
}
 182:	4770      	bx	lr

00000184 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
 184:	b5f0      	push	{r4, r5, r6, r7, lr}
 186:	b083      	sub	sp, #12
 188:	0005      	movs	r5, r0
 18a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 18c:	a901      	add	r1, sp, #4
 18e:	2300      	movs	r3, #0
 190:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
 192:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
 194:	7923      	ldrb	r3, [r4, #4]
 196:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
 198:	7a23      	ldrb	r3, [r4, #8]
 19a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
 19c:	7820      	ldrb	r0, [r4, #0]
 19e:	4b15      	ldr	r3, [pc, #84]	; (1f4 <extint_chan_set_config+0x70>)
 1a0:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
 1a2:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
 1a4:	2d1f      	cmp	r5, #31
 1a6:	d800      	bhi.n	1aa <extint_chan_set_config+0x26>
		return eics[eic_index];
 1a8:	4813      	ldr	r0, [pc, #76]	; (1f8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
 1aa:	2207      	movs	r2, #7
 1ac:	402a      	ands	r2, r5
 1ae:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
 1b0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
 1b2:	7aa3      	ldrb	r3, [r4, #10]
 1b4:	2b00      	cmp	r3, #0
 1b6:	d001      	beq.n	1bc <extint_chan_set_config+0x38>
 1b8:	2308      	movs	r3, #8
 1ba:	431f      	orrs	r7, r3
 1bc:	08eb      	lsrs	r3, r5, #3
 1be:	009b      	lsls	r3, r3, #2
 1c0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
 1c2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 1c4:	260f      	movs	r6, #15
 1c6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
 1c8:	43b1      	bics	r1, r6
			(new_config << config_pos);
 1ca:	4097      	lsls	r7, r2
 1cc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
 1ce:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
 1d0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
 1d2:	7a63      	ldrb	r3, [r4, #9]
 1d4:	2b00      	cmp	r3, #0
 1d6:	d106      	bne.n	1e6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
 1d8:	6943      	ldr	r3, [r0, #20]
 1da:	2201      	movs	r2, #1
 1dc:	40aa      	lsls	r2, r5
 1de:	4393      	bics	r3, r2
 1e0:	6143      	str	r3, [r0, #20]
	}
}
 1e2:	b003      	add	sp, #12
 1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
 1e6:	6942      	ldr	r2, [r0, #20]
 1e8:	2301      	movs	r3, #1
 1ea:	40ab      	lsls	r3, r5
 1ec:	4313      	orrs	r3, r2
 1ee:	6143      	str	r3, [r0, #20]
 1f0:	e7f7      	b.n	1e2 <extint_chan_set_config+0x5e>
 1f2:	46c0      	nop			; (mov r8, r8)
 1f4:	00000755 	.word	0x00000755
 1f8:	40001800 	.word	0x40001800

000001fc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 1fc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
 1fe:	2a00      	cmp	r2, #0
 200:	d001      	beq.n	206 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
 202:	0018      	movs	r0, r3
 204:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
 206:	008b      	lsls	r3, r1, #2
 208:	4a06      	ldr	r2, [pc, #24]	; (224 <extint_register_callback+0x28>)
 20a:	589b      	ldr	r3, [r3, r2]
 20c:	2b00      	cmp	r3, #0
 20e:	d003      	beq.n	218 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
 210:	4283      	cmp	r3, r0
 212:	d005      	beq.n	220 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
 214:	231d      	movs	r3, #29
 216:	e7f4      	b.n	202 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
 218:	0089      	lsls	r1, r1, #2
 21a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
 21c:	2300      	movs	r3, #0
 21e:	e7f0      	b.n	202 <extint_register_callback+0x6>
		return STATUS_OK;
 220:	2300      	movs	r3, #0
 222:	e7ee      	b.n	202 <extint_register_callback+0x6>
 224:	20000048 	.word	0x20000048

00000228 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 228:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
 22a:	2900      	cmp	r1, #0
 22c:	d001      	beq.n	232 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
 22e:	0018      	movs	r0, r3
 230:	4770      	bx	lr
		return NULL;
 232:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
 234:	281f      	cmp	r0, #31
 236:	d800      	bhi.n	23a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
 238:	4a02      	ldr	r2, [pc, #8]	; (244 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
 23a:	2301      	movs	r3, #1
 23c:	4083      	lsls	r3, r0
 23e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
 240:	2300      	movs	r3, #0
 242:	e7f4      	b.n	22e <extint_chan_enable_callback+0x6>
 244:	40001800 	.word	0x40001800

00000248 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
 248:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 24a:	2200      	movs	r2, #0
 24c:	4b10      	ldr	r3, [pc, #64]	; (290 <EIC_Handler+0x48>)
 24e:	701a      	strb	r2, [r3, #0]
 250:	2300      	movs	r3, #0
 252:	4910      	ldr	r1, [pc, #64]	; (294 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
 254:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 256:	4e10      	ldr	r6, [pc, #64]	; (298 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 258:	4c0d      	ldr	r4, [pc, #52]	; (290 <EIC_Handler+0x48>)
 25a:	e00a      	b.n	272 <EIC_Handler+0x2a>
		return eics[eic_index];
 25c:	490d      	ldr	r1, [pc, #52]	; (294 <EIC_Handler+0x4c>)
 25e:	e008      	b.n	272 <EIC_Handler+0x2a>
 260:	7823      	ldrb	r3, [r4, #0]
 262:	3301      	adds	r3, #1
 264:	b2db      	uxtb	r3, r3
 266:	7023      	strb	r3, [r4, #0]
 268:	2b0f      	cmp	r3, #15
 26a:	d810      	bhi.n	28e <EIC_Handler+0x46>
		return NULL;
 26c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
 26e:	2b1f      	cmp	r3, #31
 270:	d9f4      	bls.n	25c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
 272:	0028      	movs	r0, r5
 274:	4018      	ands	r0, r3
 276:	2201      	movs	r2, #1
 278:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
 27a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
 27c:	4210      	tst	r0, r2
 27e:	d0ef      	beq.n	260 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
 280:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 282:	009b      	lsls	r3, r3, #2
 284:	599b      	ldr	r3, [r3, r6]
 286:	2b00      	cmp	r3, #0
 288:	d0ea      	beq.n	260 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
 28a:	4798      	blx	r3
 28c:	e7e8      	b.n	260 <EIC_Handler+0x18>
			}
		}
	}
}
 28e:	bd70      	pop	{r4, r5, r6, pc}
 290:	20000088 	.word	0x20000088
 294:	40001800 	.word	0x40001800
 298:	20000048 	.word	0x20000048

0000029c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 29c:	4b0c      	ldr	r3, [pc, #48]	; (2d0 <cpu_irq_enter_critical+0x34>)
 29e:	681b      	ldr	r3, [r3, #0]
 2a0:	2b00      	cmp	r3, #0
 2a2:	d106      	bne.n	2b2 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 2a4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 2a8:	2b00      	cmp	r3, #0
 2aa:	d007      	beq.n	2bc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 2ac:	2200      	movs	r2, #0
 2ae:	4b09      	ldr	r3, [pc, #36]	; (2d4 <cpu_irq_enter_critical+0x38>)
 2b0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 2b2:	4a07      	ldr	r2, [pc, #28]	; (2d0 <cpu_irq_enter_critical+0x34>)
 2b4:	6813      	ldr	r3, [r2, #0]
 2b6:	3301      	adds	r3, #1
 2b8:	6013      	str	r3, [r2, #0]
}
 2ba:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 2bc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 2be:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 2c2:	2200      	movs	r2, #0
 2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <cpu_irq_enter_critical+0x3c>)
 2c6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 2c8:	3201      	adds	r2, #1
 2ca:	4b02      	ldr	r3, [pc, #8]	; (2d4 <cpu_irq_enter_critical+0x38>)
 2cc:	701a      	strb	r2, [r3, #0]
 2ce:	e7f0      	b.n	2b2 <cpu_irq_enter_critical+0x16>
 2d0:	20000020 	.word	0x20000020
 2d4:	20000024 	.word	0x20000024
 2d8:	20000000 	.word	0x20000000

000002dc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 2dc:	4b08      	ldr	r3, [pc, #32]	; (300 <cpu_irq_leave_critical+0x24>)
 2de:	681a      	ldr	r2, [r3, #0]
 2e0:	3a01      	subs	r2, #1
 2e2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 2e4:	681b      	ldr	r3, [r3, #0]
 2e6:	2b00      	cmp	r3, #0
 2e8:	d109      	bne.n	2fe <cpu_irq_leave_critical+0x22>
 2ea:	4b06      	ldr	r3, [pc, #24]	; (304 <cpu_irq_leave_critical+0x28>)
 2ec:	781b      	ldrb	r3, [r3, #0]
 2ee:	2b00      	cmp	r3, #0
 2f0:	d005      	beq.n	2fe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 2f2:	2201      	movs	r2, #1
 2f4:	4b04      	ldr	r3, [pc, #16]	; (308 <cpu_irq_leave_critical+0x2c>)
 2f6:	701a      	strb	r2, [r3, #0]
 2f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 2fc:	b662      	cpsie	i
	}
}
 2fe:	4770      	bx	lr
 300:	20000020 	.word	0x20000020
 304:	20000024 	.word	0x20000024
 308:	20000000 	.word	0x20000000

0000030c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 30e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 310:	ac01      	add	r4, sp, #4
 312:	2501      	movs	r5, #1
 314:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 316:	2700      	movs	r7, #0
 318:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 31a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 31c:	0021      	movs	r1, r4
 31e:	2010      	movs	r0, #16
 320:	4e06      	ldr	r6, [pc, #24]	; (33c <system_board_init+0x30>)
 322:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 324:	2280      	movs	r2, #128	; 0x80
 326:	0252      	lsls	r2, r2, #9
 328:	4b05      	ldr	r3, [pc, #20]	; (340 <system_board_init+0x34>)
 32a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 32c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 32e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 330:	0021      	movs	r1, r4
 332:	200e      	movs	r0, #14
 334:	47b0      	blx	r6
}
 336:	b003      	add	sp, #12
 338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 33a:	46c0      	nop			; (mov r8, r8)
 33c:	00000345 	.word	0x00000345
 340:	41004400 	.word	0x41004400

00000344 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 344:	b500      	push	{lr}
 346:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
 348:	ab01      	add	r3, sp, #4
 34a:	2280      	movs	r2, #128	; 0x80
 34c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 34e:	780a      	ldrb	r2, [r1, #0]
 350:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 352:	784a      	ldrb	r2, [r1, #1]
 354:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 356:	788a      	ldrb	r2, [r1, #2]
 358:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 35a:	0019      	movs	r1, r3
 35c:	4b01      	ldr	r3, [pc, #4]	; (364 <port_pin_set_config+0x20>)
 35e:	4798      	blx	r3
}
 360:	b003      	add	sp, #12
 362:	bd00      	pop	{pc}
 364:	00000755 	.word	0x00000755

00000368 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 368:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 36a:	490c      	ldr	r1, [pc, #48]	; (39c <system_clock_source_osc8m_set_config+0x34>)
 36c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 36e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 370:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 372:	7840      	ldrb	r0, [r0, #1]
 374:	2201      	movs	r2, #1
 376:	4010      	ands	r0, r2
 378:	0180      	lsls	r0, r0, #6
 37a:	2640      	movs	r6, #64	; 0x40
 37c:	43b3      	bics	r3, r6
 37e:	4303      	orrs	r3, r0
 380:	402a      	ands	r2, r5
 382:	01d2      	lsls	r2, r2, #7
 384:	2080      	movs	r0, #128	; 0x80
 386:	4383      	bics	r3, r0
 388:	4313      	orrs	r3, r2
 38a:	2203      	movs	r2, #3
 38c:	4022      	ands	r2, r4
 38e:	0212      	lsls	r2, r2, #8
 390:	4803      	ldr	r0, [pc, #12]	; (3a0 <system_clock_source_osc8m_set_config+0x38>)
 392:	4003      	ands	r3, r0
 394:	4313      	orrs	r3, r2
 396:	620b      	str	r3, [r1, #32]
}
 398:	bd70      	pop	{r4, r5, r6, pc}
 39a:	46c0      	nop			; (mov r8, r8)
 39c:	40000800 	.word	0x40000800
 3a0:	fffffcff 	.word	0xfffffcff

000003a4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 3a4:	2808      	cmp	r0, #8
 3a6:	d803      	bhi.n	3b0 <system_clock_source_enable+0xc>
 3a8:	0080      	lsls	r0, r0, #2
 3aa:	4b25      	ldr	r3, [pc, #148]	; (440 <STACK_SIZE+0x40>)
 3ac:	581b      	ldr	r3, [r3, r0]
 3ae:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 3b0:	2017      	movs	r0, #23
 3b2:	e044      	b.n	43e <STACK_SIZE+0x3e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 3b4:	4a23      	ldr	r2, [pc, #140]	; (444 <STACK_SIZE+0x44>)
 3b6:	6a13      	ldr	r3, [r2, #32]
 3b8:	2102      	movs	r1, #2
 3ba:	430b      	orrs	r3, r1
 3bc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 3be:	2000      	movs	r0, #0
 3c0:	e03d      	b.n	43e <STACK_SIZE+0x3e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 3c2:	4a20      	ldr	r2, [pc, #128]	; (444 <STACK_SIZE+0x44>)
 3c4:	6993      	ldr	r3, [r2, #24]
 3c6:	2102      	movs	r1, #2
 3c8:	430b      	orrs	r3, r1
 3ca:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 3cc:	2000      	movs	r0, #0
		break;
 3ce:	e036      	b.n	43e <STACK_SIZE+0x3e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 3d0:	4a1c      	ldr	r2, [pc, #112]	; (444 <STACK_SIZE+0x44>)
 3d2:	8a13      	ldrh	r3, [r2, #16]
 3d4:	2102      	movs	r1, #2
 3d6:	430b      	orrs	r3, r1
 3d8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 3da:	2000      	movs	r0, #0
		break;
 3dc:	e02f      	b.n	43e <STACK_SIZE+0x3e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 3de:	4a19      	ldr	r2, [pc, #100]	; (444 <STACK_SIZE+0x44>)
 3e0:	8a93      	ldrh	r3, [r2, #20]
 3e2:	2102      	movs	r1, #2
 3e4:	430b      	orrs	r3, r1
 3e6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 3e8:	2000      	movs	r0, #0
		break;
 3ea:	e028      	b.n	43e <STACK_SIZE+0x3e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 3ec:	4916      	ldr	r1, [pc, #88]	; (448 <STACK_SIZE+0x48>)
 3ee:	680b      	ldr	r3, [r1, #0]
 3f0:	2202      	movs	r2, #2
 3f2:	4313      	orrs	r3, r2
 3f4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 3f6:	4b13      	ldr	r3, [pc, #76]	; (444 <STACK_SIZE+0x44>)
 3f8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 3fa:	0019      	movs	r1, r3
 3fc:	320e      	adds	r2, #14
 3fe:	68cb      	ldr	r3, [r1, #12]
 400:	421a      	tst	r2, r3
 402:	d0fc      	beq.n	3fe <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 404:	4a10      	ldr	r2, [pc, #64]	; (448 <STACK_SIZE+0x48>)
 406:	6891      	ldr	r1, [r2, #8]
 408:	4b0e      	ldr	r3, [pc, #56]	; (444 <STACK_SIZE+0x44>)
 40a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 40c:	6852      	ldr	r2, [r2, #4]
 40e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 410:	2200      	movs	r2, #0
 412:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 414:	0019      	movs	r1, r3
 416:	3210      	adds	r2, #16
 418:	68cb      	ldr	r3, [r1, #12]
 41a:	421a      	tst	r2, r3
 41c:	d0fc      	beq.n	418 <STACK_SIZE+0x18>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 41e:	4b0a      	ldr	r3, [pc, #40]	; (448 <STACK_SIZE+0x48>)
 420:	681b      	ldr	r3, [r3, #0]
 422:	b29b      	uxth	r3, r3
 424:	4a07      	ldr	r2, [pc, #28]	; (444 <STACK_SIZE+0x44>)
 426:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 428:	2000      	movs	r0, #0
 42a:	e008      	b.n	43e <STACK_SIZE+0x3e>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 42c:	4905      	ldr	r1, [pc, #20]	; (444 <STACK_SIZE+0x44>)
 42e:	2244      	movs	r2, #68	; 0x44
 430:	5c8b      	ldrb	r3, [r1, r2]
 432:	2002      	movs	r0, #2
 434:	4303      	orrs	r3, r0
 436:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 438:	2000      	movs	r0, #0
		break;
 43a:	e000      	b.n	43e <STACK_SIZE+0x3e>
		return STATUS_OK;
 43c:	2000      	movs	r0, #0
}
 43e:	4770      	bx	lr
 440:	00000dd4 	.word	0x00000dd4
 444:	40000800 	.word	0x40000800
 448:	20000028 	.word	0x20000028

0000044c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 44c:	b530      	push	{r4, r5, lr}
 44e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 450:	22c2      	movs	r2, #194	; 0xc2
 452:	00d2      	lsls	r2, r2, #3
 454:	4b1a      	ldr	r3, [pc, #104]	; (4c0 <system_clock_init+0x74>)
 456:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 458:	4a1a      	ldr	r2, [pc, #104]	; (4c4 <system_clock_init+0x78>)
 45a:	6853      	ldr	r3, [r2, #4]
 45c:	211e      	movs	r1, #30
 45e:	438b      	bics	r3, r1
 460:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 462:	2301      	movs	r3, #1
 464:	466a      	mov	r2, sp
 466:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 468:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 46a:	4d17      	ldr	r5, [pc, #92]	; (4c8 <system_clock_init+0x7c>)
 46c:	b2e0      	uxtb	r0, r4
 46e:	4669      	mov	r1, sp
 470:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 472:	3401      	adds	r4, #1
 474:	2c18      	cmp	r4, #24
 476:	d1f9      	bne.n	46c <system_clock_init+0x20>
	config->run_in_standby  = false;
 478:	a803      	add	r0, sp, #12
 47a:	2400      	movs	r4, #0
 47c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 47e:	2501      	movs	r5, #1
 480:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 482:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 484:	4b11      	ldr	r3, [pc, #68]	; (4cc <system_clock_init+0x80>)
 486:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 488:	2006      	movs	r0, #6
 48a:	4b11      	ldr	r3, [pc, #68]	; (4d0 <system_clock_init+0x84>)
 48c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 48e:	4b11      	ldr	r3, [pc, #68]	; (4d4 <system_clock_init+0x88>)
 490:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 492:	4b11      	ldr	r3, [pc, #68]	; (4d8 <system_clock_init+0x8c>)
 494:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 496:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 498:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 49a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
 49c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 49e:	466b      	mov	r3, sp
 4a0:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
 4a2:	2306      	movs	r3, #6
 4a4:	466a      	mov	r2, sp
 4a6:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
 4a8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 4aa:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 4ac:	4669      	mov	r1, sp
 4ae:	2000      	movs	r0, #0
 4b0:	4b0a      	ldr	r3, [pc, #40]	; (4dc <system_clock_init+0x90>)
 4b2:	4798      	blx	r3
 4b4:	2000      	movs	r0, #0
 4b6:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <system_clock_init+0x94>)
 4b8:	4798      	blx	r3
#endif
}
 4ba:	b005      	add	sp, #20
 4bc:	bd30      	pop	{r4, r5, pc}
 4be:	46c0      	nop			; (mov r8, r8)
 4c0:	40000800 	.word	0x40000800
 4c4:	41004000 	.word	0x41004000
 4c8:	00000691 	.word	0x00000691
 4cc:	00000369 	.word	0x00000369
 4d0:	000003a5 	.word	0x000003a5
 4d4:	000004e5 	.word	0x000004e5
 4d8:	40000400 	.word	0x40000400
 4dc:	00000509 	.word	0x00000509
 4e0:	000005c1 	.word	0x000005c1

000004e4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 4e4:	4a06      	ldr	r2, [pc, #24]	; (500 <system_gclk_init+0x1c>)
 4e6:	6993      	ldr	r3, [r2, #24]
 4e8:	2108      	movs	r1, #8
 4ea:	430b      	orrs	r3, r1
 4ec:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 4ee:	2201      	movs	r2, #1
 4f0:	4b04      	ldr	r3, [pc, #16]	; (504 <system_gclk_init+0x20>)
 4f2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 4f4:	0019      	movs	r1, r3
 4f6:	780b      	ldrb	r3, [r1, #0]
 4f8:	4213      	tst	r3, r2
 4fa:	d1fc      	bne.n	4f6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 4fc:	4770      	bx	lr
 4fe:	46c0      	nop			; (mov r8, r8)
 500:	40000400 	.word	0x40000400
 504:	40000c00 	.word	0x40000c00

00000508 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 508:	b570      	push	{r4, r5, r6, lr}
 50a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 50c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 50e:	780d      	ldrb	r5, [r1, #0]
 510:	022d      	lsls	r5, r5, #8
 512:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 514:	784b      	ldrb	r3, [r1, #1]
 516:	2b00      	cmp	r3, #0
 518:	d002      	beq.n	520 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 51a:	2380      	movs	r3, #128	; 0x80
 51c:	02db      	lsls	r3, r3, #11
 51e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 520:	7a4b      	ldrb	r3, [r1, #9]
 522:	2b00      	cmp	r3, #0
 524:	d002      	beq.n	52c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 526:	2380      	movs	r3, #128	; 0x80
 528:	031b      	lsls	r3, r3, #12
 52a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 52c:	6848      	ldr	r0, [r1, #4]
 52e:	2801      	cmp	r0, #1
 530:	d910      	bls.n	554 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 532:	1e43      	subs	r3, r0, #1
 534:	4218      	tst	r0, r3
 536:	d134      	bne.n	5a2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 538:	2802      	cmp	r0, #2
 53a:	d930      	bls.n	59e <system_gclk_gen_set_config+0x96>
 53c:	2302      	movs	r3, #2
 53e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 540:	3201      	adds	r2, #1
						mask <<= 1) {
 542:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 544:	4298      	cmp	r0, r3
 546:	d8fb      	bhi.n	540 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 548:	0212      	lsls	r2, r2, #8
 54a:	4332      	orrs	r2, r6
 54c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 54e:	2380      	movs	r3, #128	; 0x80
 550:	035b      	lsls	r3, r3, #13
 552:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 554:	7a0b      	ldrb	r3, [r1, #8]
 556:	2b00      	cmp	r3, #0
 558:	d002      	beq.n	560 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 55a:	2380      	movs	r3, #128	; 0x80
 55c:	039b      	lsls	r3, r3, #14
 55e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 560:	4a13      	ldr	r2, [pc, #76]	; (5b0 <system_gclk_gen_set_config+0xa8>)
 562:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 564:	b25b      	sxtb	r3, r3
 566:	2b00      	cmp	r3, #0
 568:	dbfb      	blt.n	562 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
 56a:	4b12      	ldr	r3, [pc, #72]	; (5b4 <system_gclk_gen_set_config+0xac>)
 56c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 56e:	4b12      	ldr	r3, [pc, #72]	; (5b8 <system_gclk_gen_set_config+0xb0>)
 570:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 572:	4a0f      	ldr	r2, [pc, #60]	; (5b0 <system_gclk_gen_set_config+0xa8>)
 574:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 576:	b25b      	sxtb	r3, r3
 578:	2b00      	cmp	r3, #0
 57a:	dbfb      	blt.n	574 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 57c:	4b0c      	ldr	r3, [pc, #48]	; (5b0 <system_gclk_gen_set_config+0xa8>)
 57e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 580:	001a      	movs	r2, r3
 582:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 584:	b25b      	sxtb	r3, r3
 586:	2b00      	cmp	r3, #0
 588:	dbfb      	blt.n	582 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 58a:	4a09      	ldr	r2, [pc, #36]	; (5b0 <system_gclk_gen_set_config+0xa8>)
 58c:	6853      	ldr	r3, [r2, #4]
 58e:	2180      	movs	r1, #128	; 0x80
 590:	0249      	lsls	r1, r1, #9
 592:	400b      	ands	r3, r1
 594:	431d      	orrs	r5, r3
 596:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
 598:	4b08      	ldr	r3, [pc, #32]	; (5bc <system_gclk_gen_set_config+0xb4>)
 59a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 59c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 59e:	2200      	movs	r2, #0
 5a0:	e7d2      	b.n	548 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 5a2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 5a4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 5a6:	2380      	movs	r3, #128	; 0x80
 5a8:	029b      	lsls	r3, r3, #10
 5aa:	431d      	orrs	r5, r3
 5ac:	e7d2      	b.n	554 <system_gclk_gen_set_config+0x4c>
 5ae:	46c0      	nop			; (mov r8, r8)
 5b0:	40000c00 	.word	0x40000c00
 5b4:	0000029d 	.word	0x0000029d
 5b8:	40000c08 	.word	0x40000c08
 5bc:	000002dd 	.word	0x000002dd

000005c0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 5c0:	b510      	push	{r4, lr}
 5c2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5c4:	4a0b      	ldr	r2, [pc, #44]	; (5f4 <system_gclk_gen_enable+0x34>)
 5c6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5c8:	b25b      	sxtb	r3, r3
 5ca:	2b00      	cmp	r3, #0
 5cc:	dbfb      	blt.n	5c6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 5ce:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <system_gclk_gen_enable+0x38>)
 5d0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 5d2:	4b0a      	ldr	r3, [pc, #40]	; (5fc <system_gclk_gen_enable+0x3c>)
 5d4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5d6:	4a07      	ldr	r2, [pc, #28]	; (5f4 <system_gclk_gen_enable+0x34>)
 5d8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5da:	b25b      	sxtb	r3, r3
 5dc:	2b00      	cmp	r3, #0
 5de:	dbfb      	blt.n	5d8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 5e0:	4a04      	ldr	r2, [pc, #16]	; (5f4 <system_gclk_gen_enable+0x34>)
 5e2:	6851      	ldr	r1, [r2, #4]
 5e4:	2380      	movs	r3, #128	; 0x80
 5e6:	025b      	lsls	r3, r3, #9
 5e8:	430b      	orrs	r3, r1
 5ea:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 5ec:	4b04      	ldr	r3, [pc, #16]	; (600 <system_gclk_gen_enable+0x40>)
 5ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 5f0:	bd10      	pop	{r4, pc}
 5f2:	46c0      	nop			; (mov r8, r8)
 5f4:	40000c00 	.word	0x40000c00
 5f8:	0000029d 	.word	0x0000029d
 5fc:	40000c04 	.word	0x40000c04
 600:	000002dd 	.word	0x000002dd

00000604 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 604:	b510      	push	{r4, lr}
 606:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 608:	4b06      	ldr	r3, [pc, #24]	; (624 <system_gclk_chan_enable+0x20>)
 60a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 60c:	4b06      	ldr	r3, [pc, #24]	; (628 <system_gclk_chan_enable+0x24>)
 60e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 610:	4a06      	ldr	r2, [pc, #24]	; (62c <system_gclk_chan_enable+0x28>)
 612:	8853      	ldrh	r3, [r2, #2]
 614:	2180      	movs	r1, #128	; 0x80
 616:	01c9      	lsls	r1, r1, #7
 618:	430b      	orrs	r3, r1
 61a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 61c:	4b04      	ldr	r3, [pc, #16]	; (630 <system_gclk_chan_enable+0x2c>)
 61e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 620:	bd10      	pop	{r4, pc}
 622:	46c0      	nop			; (mov r8, r8)
 624:	0000029d 	.word	0x0000029d
 628:	40000c02 	.word	0x40000c02
 62c:	40000c00 	.word	0x40000c00
 630:	000002dd 	.word	0x000002dd

00000634 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 634:	b510      	push	{r4, lr}
 636:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 638:	4b0f      	ldr	r3, [pc, #60]	; (678 <system_gclk_chan_disable+0x44>)
 63a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 63c:	4b0f      	ldr	r3, [pc, #60]	; (67c <system_gclk_chan_disable+0x48>)
 63e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 640:	4a0f      	ldr	r2, [pc, #60]	; (680 <system_gclk_chan_disable+0x4c>)
 642:	8853      	ldrh	r3, [r2, #2]
 644:	051b      	lsls	r3, r3, #20
 646:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 648:	8853      	ldrh	r3, [r2, #2]
 64a:	490e      	ldr	r1, [pc, #56]	; (684 <system_gclk_chan_disable+0x50>)
 64c:	400b      	ands	r3, r1
 64e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 650:	8853      	ldrh	r3, [r2, #2]
 652:	490d      	ldr	r1, [pc, #52]	; (688 <system_gclk_chan_disable+0x54>)
 654:	400b      	ands	r3, r1
 656:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 658:	0011      	movs	r1, r2
 65a:	2280      	movs	r2, #128	; 0x80
 65c:	01d2      	lsls	r2, r2, #7
 65e:	884b      	ldrh	r3, [r1, #2]
 660:	4213      	tst	r3, r2
 662:	d1fc      	bne.n	65e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 664:	4906      	ldr	r1, [pc, #24]	; (680 <system_gclk_chan_disable+0x4c>)
 666:	884a      	ldrh	r2, [r1, #2]
 668:	0203      	lsls	r3, r0, #8
 66a:	4806      	ldr	r0, [pc, #24]	; (684 <system_gclk_chan_disable+0x50>)
 66c:	4002      	ands	r2, r0
 66e:	4313      	orrs	r3, r2
 670:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 672:	4b06      	ldr	r3, [pc, #24]	; (68c <system_gclk_chan_disable+0x58>)
 674:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 676:	bd10      	pop	{r4, pc}
 678:	0000029d 	.word	0x0000029d
 67c:	40000c02 	.word	0x40000c02
 680:	40000c00 	.word	0x40000c00
 684:	fffff0ff 	.word	0xfffff0ff
 688:	ffffbfff 	.word	0xffffbfff
 68c:	000002dd 	.word	0x000002dd

00000690 <system_gclk_chan_set_config>:
{
 690:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 692:	780c      	ldrb	r4, [r1, #0]
 694:	0224      	lsls	r4, r4, #8
 696:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 698:	4b02      	ldr	r3, [pc, #8]	; (6a4 <system_gclk_chan_set_config+0x14>)
 69a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 69c:	b2a4      	uxth	r4, r4
 69e:	4b02      	ldr	r3, [pc, #8]	; (6a8 <system_gclk_chan_set_config+0x18>)
 6a0:	805c      	strh	r4, [r3, #2]
}
 6a2:	bd10      	pop	{r4, pc}
 6a4:	00000635 	.word	0x00000635
 6a8:	40000c00 	.word	0x40000c00

000006ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 6ac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 6ae:	78d3      	ldrb	r3, [r2, #3]
 6b0:	2b00      	cmp	r3, #0
 6b2:	d135      	bne.n	720 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 6b4:	7813      	ldrb	r3, [r2, #0]
 6b6:	2b80      	cmp	r3, #128	; 0x80
 6b8:	d029      	beq.n	70e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 6ba:	061b      	lsls	r3, r3, #24
 6bc:	2480      	movs	r4, #128	; 0x80
 6be:	0264      	lsls	r4, r4, #9
 6c0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 6c2:	7854      	ldrb	r4, [r2, #1]
 6c4:	2502      	movs	r5, #2
 6c6:	43ac      	bics	r4, r5
 6c8:	d106      	bne.n	6d8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 6ca:	7894      	ldrb	r4, [r2, #2]
 6cc:	2c00      	cmp	r4, #0
 6ce:	d120      	bne.n	712 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 6d0:	2480      	movs	r4, #128	; 0x80
 6d2:	02a4      	lsls	r4, r4, #10
 6d4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 6d6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 6d8:	7854      	ldrb	r4, [r2, #1]
 6da:	3c01      	subs	r4, #1
 6dc:	2c01      	cmp	r4, #1
 6de:	d91c      	bls.n	71a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 6e0:	040d      	lsls	r5, r1, #16
 6e2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 6e4:	24a0      	movs	r4, #160	; 0xa0
 6e6:	05e4      	lsls	r4, r4, #23
 6e8:	432c      	orrs	r4, r5
 6ea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6ec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 6ee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 6f0:	24d0      	movs	r4, #208	; 0xd0
 6f2:	0624      	lsls	r4, r4, #24
 6f4:	432c      	orrs	r4, r5
 6f6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6f8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 6fa:	78d4      	ldrb	r4, [r2, #3]
 6fc:	2c00      	cmp	r4, #0
 6fe:	d122      	bne.n	746 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 700:	035b      	lsls	r3, r3, #13
 702:	d51c      	bpl.n	73e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 704:	7893      	ldrb	r3, [r2, #2]
 706:	2b01      	cmp	r3, #1
 708:	d01e      	beq.n	748 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 70a:	6141      	str	r1, [r0, #20]
 70c:	e017      	b.n	73e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 70e:	2300      	movs	r3, #0
 710:	e7d7      	b.n	6c2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 712:	24c0      	movs	r4, #192	; 0xc0
 714:	02e4      	lsls	r4, r4, #11
 716:	4323      	orrs	r3, r4
 718:	e7dd      	b.n	6d6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 71a:	4c0d      	ldr	r4, [pc, #52]	; (750 <_system_pinmux_config+0xa4>)
 71c:	4023      	ands	r3, r4
 71e:	e7df      	b.n	6e0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 720:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 722:	040c      	lsls	r4, r1, #16
 724:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 726:	23a0      	movs	r3, #160	; 0xa0
 728:	05db      	lsls	r3, r3, #23
 72a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 72c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 72e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 730:	23d0      	movs	r3, #208	; 0xd0
 732:	061b      	lsls	r3, r3, #24
 734:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 736:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 738:	78d3      	ldrb	r3, [r2, #3]
 73a:	2b00      	cmp	r3, #0
 73c:	d103      	bne.n	746 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 73e:	7853      	ldrb	r3, [r2, #1]
 740:	3b01      	subs	r3, #1
 742:	2b01      	cmp	r3, #1
 744:	d902      	bls.n	74c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 746:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 748:	6181      	str	r1, [r0, #24]
 74a:	e7f8      	b.n	73e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 74c:	6081      	str	r1, [r0, #8]
}
 74e:	e7fa      	b.n	746 <_system_pinmux_config+0x9a>
 750:	fffbffff 	.word	0xfffbffff

00000754 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 754:	b510      	push	{r4, lr}
 756:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 758:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 75a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 75c:	2900      	cmp	r1, #0
 75e:	d104      	bne.n	76a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 760:	0943      	lsrs	r3, r0, #5
 762:	01db      	lsls	r3, r3, #7
 764:	4905      	ldr	r1, [pc, #20]	; (77c <system_pinmux_pin_set_config+0x28>)
 766:	468c      	mov	ip, r1
 768:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 76a:	241f      	movs	r4, #31
 76c:	4020      	ands	r0, r4
 76e:	2101      	movs	r1, #1
 770:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 772:	0018      	movs	r0, r3
 774:	4b02      	ldr	r3, [pc, #8]	; (780 <system_pinmux_pin_set_config+0x2c>)
 776:	4798      	blx	r3
}
 778:	bd10      	pop	{r4, pc}
 77a:	46c0      	nop			; (mov r8, r8)
 77c:	41004400 	.word	0x41004400
 780:	000006ad 	.word	0x000006ad

00000784 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 784:	4770      	bx	lr
	...

00000788 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 788:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 78a:	4b05      	ldr	r3, [pc, #20]	; (7a0 <system_init+0x18>)
 78c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 78e:	4b05      	ldr	r3, [pc, #20]	; (7a4 <system_init+0x1c>)
 790:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 792:	4b05      	ldr	r3, [pc, #20]	; (7a8 <system_init+0x20>)
 794:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 796:	4b05      	ldr	r3, [pc, #20]	; (7ac <system_init+0x24>)
 798:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 79a:	4b05      	ldr	r3, [pc, #20]	; (7b0 <system_init+0x28>)
 79c:	4798      	blx	r3
}
 79e:	bd10      	pop	{r4, pc}
 7a0:	0000044d 	.word	0x0000044d
 7a4:	0000030d 	.word	0x0000030d
 7a8:	00000785 	.word	0x00000785
 7ac:	00000105 	.word	0x00000105
 7b0:	00000785 	.word	0x00000785

000007b4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
 7b4:	1c93      	adds	r3, r2, #2
 7b6:	009b      	lsls	r3, r3, #2
 7b8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
 7ba:	2a02      	cmp	r2, #2
 7bc:	d009      	beq.n	7d2 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
 7be:	2a03      	cmp	r2, #3
 7c0:	d00c      	beq.n	7dc <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
 7c2:	2301      	movs	r3, #1
 7c4:	4093      	lsls	r3, r2
 7c6:	001a      	movs	r2, r3
 7c8:	7e03      	ldrb	r3, [r0, #24]
 7ca:	4313      	orrs	r3, r2
 7cc:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
 7ce:	2000      	movs	r0, #0
 7d0:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
 7d2:	7e03      	ldrb	r3, [r0, #24]
 7d4:	2210      	movs	r2, #16
 7d6:	4313      	orrs	r3, r2
 7d8:	7603      	strb	r3, [r0, #24]
 7da:	e7f8      	b.n	7ce <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
 7dc:	7e03      	ldrb	r3, [r0, #24]
 7de:	2220      	movs	r2, #32
 7e0:	4313      	orrs	r3, r2
 7e2:	7603      	strb	r3, [r0, #24]
 7e4:	e7f3      	b.n	7ce <tc_register_callback+0x1a>
	...

000007e8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
 7e8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
 7ea:	0080      	lsls	r0, r0, #2
 7ec:	4b16      	ldr	r3, [pc, #88]	; (848 <_tc_interrupt_handler+0x60>)
 7ee:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
 7f0:	6823      	ldr	r3, [r4, #0]
 7f2:	7b9d      	ldrb	r5, [r3, #14]
 7f4:	7e22      	ldrb	r2, [r4, #24]
 7f6:	7e63      	ldrb	r3, [r4, #25]
 7f8:	4013      	ands	r3, r2
 7fa:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
 7fc:	07eb      	lsls	r3, r5, #31
 7fe:	d406      	bmi.n	80e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
 800:	07ab      	lsls	r3, r5, #30
 802:	d40b      	bmi.n	81c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
 804:	06eb      	lsls	r3, r5, #27
 806:	d410      	bmi.n	82a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
 808:	06ab      	lsls	r3, r5, #26
 80a:	d415      	bmi.n	838 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
 80c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
 80e:	0020      	movs	r0, r4
 810:	68a3      	ldr	r3, [r4, #8]
 812:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
 814:	2301      	movs	r3, #1
 816:	6822      	ldr	r2, [r4, #0]
 818:	7393      	strb	r3, [r2, #14]
 81a:	e7f1      	b.n	800 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
 81c:	0020      	movs	r0, r4
 81e:	68e3      	ldr	r3, [r4, #12]
 820:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
 822:	2302      	movs	r3, #2
 824:	6822      	ldr	r2, [r4, #0]
 826:	7393      	strb	r3, [r2, #14]
 828:	e7ec      	b.n	804 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
 82a:	0020      	movs	r0, r4
 82c:	6923      	ldr	r3, [r4, #16]
 82e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
 830:	2310      	movs	r3, #16
 832:	6822      	ldr	r2, [r4, #0]
 834:	7393      	strb	r3, [r2, #14]
 836:	e7e7      	b.n	808 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
 838:	0020      	movs	r0, r4
 83a:	6963      	ldr	r3, [r4, #20]
 83c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
 83e:	6823      	ldr	r3, [r4, #0]
 840:	2220      	movs	r2, #32
 842:	739a      	strb	r2, [r3, #14]
}
 844:	e7e2      	b.n	80c <_tc_interrupt_handler+0x24>
 846:	46c0      	nop			; (mov r8, r8)
 848:	2000008c 	.word	0x2000008c

0000084c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
 84c:	b510      	push	{r4, lr}
 84e:	2000      	movs	r0, #0
 850:	4b01      	ldr	r3, [pc, #4]	; (858 <TC1_Handler+0xc>)
 852:	4798      	blx	r3
 854:	bd10      	pop	{r4, pc}
 856:	46c0      	nop			; (mov r8, r8)
 858:	000007e9 	.word	0x000007e9

0000085c <TC2_Handler>:
 85c:	b510      	push	{r4, lr}
 85e:	2001      	movs	r0, #1
 860:	4b01      	ldr	r3, [pc, #4]	; (868 <TC2_Handler+0xc>)
 862:	4798      	blx	r3
 864:	bd10      	pop	{r4, pc}
 866:	46c0      	nop			; (mov r8, r8)
 868:	000007e9 	.word	0x000007e9

0000086c <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
 86c:	4b06      	ldr	r3, [pc, #24]	; (888 <_tc_get_inst_index+0x1c>)
 86e:	4298      	cmp	r0, r3
 870:	d008      	beq.n	884 <_tc_get_inst_index+0x18>
 872:	4a06      	ldr	r2, [pc, #24]	; (88c <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
 874:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
 876:	4290      	cmp	r0, r2
 878:	d001      	beq.n	87e <_tc_get_inst_index+0x12>
}
 87a:	0018      	movs	r0, r3
 87c:	4770      	bx	lr
 87e:	3301      	adds	r3, #1
			return i;
 880:	b2db      	uxtb	r3, r3
 882:	e7fa      	b.n	87a <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
 884:	2300      	movs	r3, #0
 886:	e7fb      	b.n	880 <_tc_get_inst_index+0x14>
 888:	42001800 	.word	0x42001800
 88c:	42001c00 	.word	0x42001c00

00000890 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
 890:	b5f0      	push	{r4, r5, r6, r7, lr}
 892:	b085      	sub	sp, #20
 894:	0004      	movs	r4, r0
 896:	000d      	movs	r5, r1
 898:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
 89a:	0008      	movs	r0, r1
 89c:	4b82      	ldr	r3, [pc, #520]	; (aa8 <tc_init+0x218>)
 89e:	4798      	blx	r3
 8a0:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
 8a2:	ab03      	add	r3, sp, #12
 8a4:	2212      	movs	r2, #18
 8a6:	701a      	strb	r2, [r3, #0]
 8a8:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
 8aa:	ab02      	add	r3, sp, #8
 8ac:	322e      	adds	r2, #46	; 0x2e
 8ae:	801a      	strh	r2, [r3, #0]
 8b0:	3240      	adds	r2, #64	; 0x40
 8b2:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
 8b4:	2300      	movs	r3, #0
 8b6:	60a3      	str	r3, [r4, #8]
 8b8:	60e3      	str	r3, [r4, #12]
 8ba:	6123      	str	r3, [r4, #16]
 8bc:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
 8be:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
 8c0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
 8c2:	0082      	lsls	r2, r0, #2
 8c4:	4b79      	ldr	r3, [pc, #484]	; (aac <tc_init+0x21c>)
 8c6:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
 8c8:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
 8ca:	78b3      	ldrb	r3, [r6, #2]
 8cc:	2b08      	cmp	r3, #8
 8ce:	d006      	beq.n	8de <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
 8d0:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
 8d2:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
 8d4:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
 8d6:	07db      	lsls	r3, r3, #31
 8d8:	d505      	bpl.n	8e6 <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
 8da:	b005      	add	sp, #20
 8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
 8de:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
 8e0:	07fa      	lsls	r2, r7, #31
 8e2:	d4fa      	bmi.n	8da <tc_init+0x4a>
 8e4:	e7f4      	b.n	8d0 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
 8e6:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
 8e8:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
 8ea:	06db      	lsls	r3, r3, #27
 8ec:	d4f5      	bmi.n	8da <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
 8ee:	882b      	ldrh	r3, [r5, #0]
 8f0:	079b      	lsls	r3, r3, #30
 8f2:	d4f2      	bmi.n	8da <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
 8f4:	7c33      	ldrb	r3, [r6, #16]
 8f6:	2b00      	cmp	r3, #0
 8f8:	d000      	beq.n	8fc <tc_init+0x6c>
 8fa:	e07a      	b.n	9f2 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
 8fc:	7f33      	ldrb	r3, [r6, #28]
 8fe:	2b00      	cmp	r3, #0
 900:	d000      	beq.n	904 <tc_init+0x74>
 902:	e082      	b.n	a0a <tc_init+0x17a>
			PM->APBCMASK.reg |= mask;
 904:	496a      	ldr	r1, [pc, #424]	; (ab0 <tc_init+0x220>)
 906:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
 908:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
 90a:	ab02      	add	r3, sp, #8
 90c:	5ad3      	ldrh	r3, [r2, r3]
 90e:	4303      	orrs	r3, r0
 910:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
 912:	78b3      	ldrb	r3, [r6, #2]
 914:	2b08      	cmp	r3, #8
 916:	d100      	bne.n	91a <tc_init+0x8a>
 918:	e087      	b.n	a2a <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
 91a:	7833      	ldrb	r3, [r6, #0]
 91c:	466a      	mov	r2, sp
 91e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
 920:	ab03      	add	r3, sp, #12
 922:	5ddf      	ldrb	r7, [r3, r7]
 924:	4669      	mov	r1, sp
 926:	0038      	movs	r0, r7
 928:	4b62      	ldr	r3, [pc, #392]	; (ab4 <tc_init+0x224>)
 92a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
 92c:	0038      	movs	r0, r7
 92e:	4b62      	ldr	r3, [pc, #392]	; (ab8 <tc_init+0x228>)
 930:	4798      	blx	r3
	ctrla_tmp =
 932:	8931      	ldrh	r1, [r6, #8]
 934:	88b3      	ldrh	r3, [r6, #4]
 936:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
 938:	78b1      	ldrb	r1, [r6, #2]
 93a:	79b2      	ldrb	r2, [r6, #6]
 93c:	4311      	orrs	r1, r2
	ctrla_tmp =
 93e:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
 940:	7873      	ldrb	r3, [r6, #1]
 942:	2b00      	cmp	r3, #0
 944:	d002      	beq.n	94c <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
 946:	2380      	movs	r3, #128	; 0x80
 948:	011b      	lsls	r3, r3, #4
 94a:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 94c:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 94e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
 950:	b25b      	sxtb	r3, r3
 952:	2b00      	cmp	r3, #0
 954:	dbfb      	blt.n	94e <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
 956:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
 958:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
 95a:	1e4b      	subs	r3, r1, #1
 95c:	4199      	sbcs	r1, r3
 95e:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
 960:	7bb3      	ldrb	r3, [r6, #14]
 962:	2b00      	cmp	r3, #0
 964:	d001      	beq.n	96a <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
 966:	2301      	movs	r3, #1
 968:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 96a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 96c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
 96e:	b25b      	sxtb	r3, r3
 970:	2b00      	cmp	r3, #0
 972:	dbfb      	blt.n	96c <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
 974:	23ff      	movs	r3, #255	; 0xff
 976:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
 978:	2900      	cmp	r1, #0
 97a:	d005      	beq.n	988 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 97c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 97e:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
 980:	b25b      	sxtb	r3, r3
 982:	2b00      	cmp	r3, #0
 984:	dbfb      	blt.n	97e <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
 986:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
 988:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
 98a:	7af3      	ldrb	r3, [r6, #11]
 98c:	2b00      	cmp	r3, #0
 98e:	d001      	beq.n	994 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
 990:	2310      	movs	r3, #16
 992:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
 994:	7b33      	ldrb	r3, [r6, #12]
 996:	2b00      	cmp	r3, #0
 998:	d001      	beq.n	99e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
 99a:	2320      	movs	r3, #32
 99c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 99e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 9a0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
 9a2:	b25b      	sxtb	r3, r3
 9a4:	2b00      	cmp	r3, #0
 9a6:	dbfb      	blt.n	9a0 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
 9a8:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 9aa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 9ac:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
 9ae:	b25b      	sxtb	r3, r3
 9b0:	2b00      	cmp	r3, #0
 9b2:	dbfb      	blt.n	9ac <tc_init+0x11c>
	switch (module_inst->counter_size) {
 9b4:	7923      	ldrb	r3, [r4, #4]
 9b6:	2b04      	cmp	r3, #4
 9b8:	d03f      	beq.n	a3a <tc_init+0x1aa>
 9ba:	2b08      	cmp	r3, #8
 9bc:	d05e      	beq.n	a7c <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
 9be:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
 9c0:	2b00      	cmp	r3, #0
 9c2:	d000      	beq.n	9c6 <tc_init+0x136>
 9c4:	e789      	b.n	8da <tc_init+0x4a>
 9c6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 9c8:	b25b      	sxtb	r3, r3
 9ca:	2b00      	cmp	r3, #0
 9cc:	dbfb      	blt.n	9c6 <tc_init+0x136>
				= config->counter_16_bit.value;
 9ce:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 9d0:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 9d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 9d4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 9d6:	b25b      	sxtb	r3, r3
 9d8:	2b00      	cmp	r3, #0
 9da:	dbfb      	blt.n	9d4 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
 9dc:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
 9de:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 9e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 9e2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 9e4:	b25b      	sxtb	r3, r3
 9e6:	2b00      	cmp	r3, #0
 9e8:	dbfb      	blt.n	9e2 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
 9ea:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
 9ec:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
 9ee:	2000      	movs	r0, #0
 9f0:	e773      	b.n	8da <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
 9f2:	a901      	add	r1, sp, #4
 9f4:	2301      	movs	r3, #1
 9f6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
 9f8:	2200      	movs	r2, #0
 9fa:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
 9fc:	7e32      	ldrb	r2, [r6, #24]
 9fe:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
 a00:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
 a02:	7d30      	ldrb	r0, [r6, #20]
 a04:	4b2d      	ldr	r3, [pc, #180]	; (abc <tc_init+0x22c>)
 a06:	4798      	blx	r3
 a08:	e778      	b.n	8fc <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
 a0a:	a901      	add	r1, sp, #4
 a0c:	2301      	movs	r3, #1
 a0e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
 a10:	2200      	movs	r2, #0
 a12:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
 a14:	3224      	adds	r2, #36	; 0x24
 a16:	18b2      	adds	r2, r6, r2
 a18:	7812      	ldrb	r2, [r2, #0]
 a1a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
 a1c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
 a1e:	331f      	adds	r3, #31
 a20:	18f3      	adds	r3, r6, r3
 a22:	7818      	ldrb	r0, [r3, #0]
 a24:	4b25      	ldr	r3, [pc, #148]	; (abc <tc_init+0x22c>)
 a26:	4798      	blx	r3
 a28:	e76c      	b.n	904 <tc_init+0x74>
 a2a:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
 a2c:	1c7a      	adds	r2, r7, #1
 a2e:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
 a30:	ab02      	add	r3, sp, #8
 a32:	5ad3      	ldrh	r3, [r2, r3]
 a34:	4303      	orrs	r3, r0
 a36:	620b      	str	r3, [r1, #32]
 a38:	e76f      	b.n	91a <tc_init+0x8a>
 a3a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 a3c:	b25b      	sxtb	r3, r3
 a3e:	2b00      	cmp	r3, #0
 a40:	dbfb      	blt.n	a3a <tc_init+0x1aa>
					config->counter_8_bit.value;
 a42:	2328      	movs	r3, #40	; 0x28
 a44:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
 a46:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 a48:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 a4a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 a4c:	b25b      	sxtb	r3, r3
 a4e:	2b00      	cmp	r3, #0
 a50:	dbfb      	blt.n	a4a <tc_init+0x1ba>
					config->counter_8_bit.period;
 a52:	2329      	movs	r3, #41	; 0x29
 a54:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
 a56:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 a58:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 a5a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 a5c:	b25b      	sxtb	r3, r3
 a5e:	2b00      	cmp	r3, #0
 a60:	dbfb      	blt.n	a5a <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
 a62:	232a      	movs	r3, #42	; 0x2a
 a64:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
 a66:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 a68:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 a6a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 a6c:	b25b      	sxtb	r3, r3
 a6e:	2b00      	cmp	r3, #0
 a70:	dbfb      	blt.n	a6a <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
 a72:	232b      	movs	r3, #43	; 0x2b
 a74:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
 a76:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
 a78:	2000      	movs	r0, #0
 a7a:	e72e      	b.n	8da <tc_init+0x4a>
 a7c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 a7e:	b25b      	sxtb	r3, r3
 a80:	2b00      	cmp	r3, #0
 a82:	dbfb      	blt.n	a7c <tc_init+0x1ec>
				= config->counter_32_bit.value;
 a84:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 a86:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 a88:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 a8a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 a8c:	b25b      	sxtb	r3, r3
 a8e:	2b00      	cmp	r3, #0
 a90:	dbfb      	blt.n	a8a <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
 a92:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 a94:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 a96:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 a98:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
 a9a:	b25b      	sxtb	r3, r3
 a9c:	2b00      	cmp	r3, #0
 a9e:	dbfb      	blt.n	a98 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
 aa0:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
 aa2:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
 aa4:	2000      	movs	r0, #0
 aa6:	e718      	b.n	8da <tc_init+0x4a>
 aa8:	0000086d 	.word	0x0000086d
 aac:	2000008c 	.word	0x2000008c
 ab0:	40000400 	.word	0x40000400
 ab4:	00000691 	.word	0x00000691
 ab8:	00000605 	.word	0x00000605
 abc:	00000755 	.word	0x00000755

00000ac0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
 ac0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
 ac2:	6804      	ldr	r4, [r0, #0]
 ac4:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
 ac6:	b25b      	sxtb	r3, r3
 ac8:	2b00      	cmp	r3, #0
 aca:	dbfb      	blt.n	ac4 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
 acc:	7903      	ldrb	r3, [r0, #4]
 ace:	2b04      	cmp	r3, #4
 ad0:	d005      	beq.n	ade <tc_set_compare_value+0x1e>
 ad2:	2b08      	cmp	r3, #8
 ad4:	d014      	beq.n	b00 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
 ad6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
 ad8:	2b00      	cmp	r3, #0
 ada:	d008      	beq.n	aee <tc_set_compare_value+0x2e>
}
 adc:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
 ade:	2017      	movs	r0, #23
			if (channel_index <
 ae0:	2901      	cmp	r1, #1
 ae2:	d8fb      	bhi.n	adc <tc_set_compare_value+0x1c>
						(uint8_t)compare;
 ae4:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
 ae6:	1861      	adds	r1, r4, r1
 ae8:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
 aea:	2000      	movs	r0, #0
 aec:	e7f6      	b.n	adc <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
 aee:	2017      	movs	r0, #23
			if (channel_index <
 af0:	2901      	cmp	r1, #1
 af2:	d8f3      	bhi.n	adc <tc_set_compare_value+0x1c>
						(uint16_t)compare;
 af4:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
 af6:	310c      	adds	r1, #12
 af8:	0049      	lsls	r1, r1, #1
 afa:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
 afc:	2000      	movs	r0, #0
 afe:	e7ed      	b.n	adc <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
 b00:	2017      	movs	r0, #23
			if (channel_index <
 b02:	2901      	cmp	r1, #1
 b04:	d8ea      	bhi.n	adc <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
 b06:	3106      	adds	r1, #6
 b08:	0089      	lsls	r1, r1, #2
 b0a:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
 b0c:	2000      	movs	r0, #0
 b0e:	e7e5      	b.n	adc <tc_set_compare_value+0x1c>

00000b10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 b10:	e7fe      	b.n	b10 <Dummy_Handler>
	...

00000b14 <Reset_Handler>:
{
 b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 b16:	4a2a      	ldr	r2, [pc, #168]	; (bc0 <Reset_Handler+0xac>)
 b18:	4b2a      	ldr	r3, [pc, #168]	; (bc4 <Reset_Handler+0xb0>)
 b1a:	429a      	cmp	r2, r3
 b1c:	d011      	beq.n	b42 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 b1e:	001a      	movs	r2, r3
 b20:	4b29      	ldr	r3, [pc, #164]	; (bc8 <Reset_Handler+0xb4>)
 b22:	429a      	cmp	r2, r3
 b24:	d20d      	bcs.n	b42 <Reset_Handler+0x2e>
 b26:	4a29      	ldr	r2, [pc, #164]	; (bcc <Reset_Handler+0xb8>)
 b28:	3303      	adds	r3, #3
 b2a:	1a9b      	subs	r3, r3, r2
 b2c:	089b      	lsrs	r3, r3, #2
 b2e:	3301      	adds	r3, #1
 b30:	009b      	lsls	r3, r3, #2
 b32:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 b34:	4823      	ldr	r0, [pc, #140]	; (bc4 <Reset_Handler+0xb0>)
 b36:	4922      	ldr	r1, [pc, #136]	; (bc0 <Reset_Handler+0xac>)
 b38:	588c      	ldr	r4, [r1, r2]
 b3a:	5084      	str	r4, [r0, r2]
 b3c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 b3e:	429a      	cmp	r2, r3
 b40:	d1fa      	bne.n	b38 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 b42:	4a23      	ldr	r2, [pc, #140]	; (bd0 <Reset_Handler+0xbc>)
 b44:	4b23      	ldr	r3, [pc, #140]	; (bd4 <Reset_Handler+0xc0>)
 b46:	429a      	cmp	r2, r3
 b48:	d20a      	bcs.n	b60 <Reset_Handler+0x4c>
 b4a:	43d3      	mvns	r3, r2
 b4c:	4921      	ldr	r1, [pc, #132]	; (bd4 <Reset_Handler+0xc0>)
 b4e:	185b      	adds	r3, r3, r1
 b50:	2103      	movs	r1, #3
 b52:	438b      	bics	r3, r1
 b54:	3304      	adds	r3, #4
 b56:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 b58:	2100      	movs	r1, #0
 b5a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 b5c:	4293      	cmp	r3, r2
 b5e:	d1fc      	bne.n	b5a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 b60:	4a1d      	ldr	r2, [pc, #116]	; (bd8 <Reset_Handler+0xc4>)
 b62:	21ff      	movs	r1, #255	; 0xff
 b64:	4b1d      	ldr	r3, [pc, #116]	; (bdc <Reset_Handler+0xc8>)
 b66:	438b      	bics	r3, r1
 b68:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 b6a:	39fd      	subs	r1, #253	; 0xfd
 b6c:	2390      	movs	r3, #144	; 0x90
 b6e:	005b      	lsls	r3, r3, #1
 b70:	4a1b      	ldr	r2, [pc, #108]	; (be0 <Reset_Handler+0xcc>)
 b72:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 b74:	4a1b      	ldr	r2, [pc, #108]	; (be4 <Reset_Handler+0xd0>)
 b76:	78d3      	ldrb	r3, [r2, #3]
 b78:	2503      	movs	r5, #3
 b7a:	43ab      	bics	r3, r5
 b7c:	2402      	movs	r4, #2
 b7e:	4323      	orrs	r3, r4
 b80:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 b82:	78d3      	ldrb	r3, [r2, #3]
 b84:	270c      	movs	r7, #12
 b86:	43bb      	bics	r3, r7
 b88:	2608      	movs	r6, #8
 b8a:	4333      	orrs	r3, r6
 b8c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 b8e:	4b16      	ldr	r3, [pc, #88]	; (be8 <Reset_Handler+0xd4>)
 b90:	7b98      	ldrb	r0, [r3, #14]
 b92:	2230      	movs	r2, #48	; 0x30
 b94:	4390      	bics	r0, r2
 b96:	2220      	movs	r2, #32
 b98:	4310      	orrs	r0, r2
 b9a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 b9c:	7b99      	ldrb	r1, [r3, #14]
 b9e:	43b9      	bics	r1, r7
 ba0:	4331      	orrs	r1, r6
 ba2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 ba4:	7b9a      	ldrb	r2, [r3, #14]
 ba6:	43aa      	bics	r2, r5
 ba8:	4322      	orrs	r2, r4
 baa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 bac:	4a0f      	ldr	r2, [pc, #60]	; (bec <Reset_Handler+0xd8>)
 bae:	6853      	ldr	r3, [r2, #4]
 bb0:	2180      	movs	r1, #128	; 0x80
 bb2:	430b      	orrs	r3, r1
 bb4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 bb6:	4b0e      	ldr	r3, [pc, #56]	; (bf0 <Reset_Handler+0xdc>)
 bb8:	4798      	blx	r3
        main();
 bba:	4b0e      	ldr	r3, [pc, #56]	; (bf4 <Reset_Handler+0xe0>)
 bbc:	4798      	blx	r3
 bbe:	e7fe      	b.n	bbe <Reset_Handler+0xaa>
 bc0:	00000e1c 	.word	0x00000e1c
 bc4:	20000000 	.word	0x20000000
 bc8:	20000004 	.word	0x20000004
 bcc:	20000004 	.word	0x20000004
 bd0:	20000004 	.word	0x20000004
 bd4:	200000b0 	.word	0x200000b0
 bd8:	e000ed00 	.word	0xe000ed00
 bdc:	00000000 	.word	0x00000000
 be0:	41007000 	.word	0x41007000
 be4:	41005000 	.word	0x41005000
 be8:	41004800 	.word	0x41004800
 bec:	41004000 	.word	0x41004000
 bf0:	00000d8d 	.word	0x00000d8d
 bf4:	00000d51 	.word	0x00000d51

00000bf8 <extint_detection_callback>:
	return (port_base->IN.reg & pin_mask);
 bf8:	4b0a      	ldr	r3, [pc, #40]	; (c24 <extint_detection_callback+0x2c>)
 bfa:	6a1b      	ldr	r3, [r3, #32]
	if (level) {
 bfc:	045b      	lsls	r3, r3, #17
 bfe:	d50b      	bpl.n	c18 <extint_detection_callback+0x20>
		port_base->OUTSET.reg = pin_mask;
 c00:	2280      	movs	r2, #128	; 0x80
 c02:	0252      	lsls	r2, r2, #9
 c04:	4b07      	ldr	r3, [pc, #28]	; (c24 <extint_detection_callback+0x2c>)
 c06:	619a      	str	r2, [r3, #24]
void extint_detection_callback(void) {
	bool pin_state = port_pin_get_input_level(BUTTON_0_PIN);
	pwm_started = pin_state;
	port_pin_set_output_level(LED_0_PIN, pwm_started);
	static uint32_t delay = 0;
	delay = (delay + CCx) & 0xFFFF;
 c08:	4a07      	ldr	r2, [pc, #28]	; (c28 <extint_detection_callback+0x30>)
 c0a:	6813      	ldr	r3, [r2, #0]
 c0c:	3309      	adds	r3, #9
 c0e:	33ff      	adds	r3, #255	; 0xff
 c10:	041b      	lsls	r3, r3, #16
 c12:	0c1b      	lsrs	r3, r3, #16
 c14:	6013      	str	r3, [r2, #0]
	if (pin_state) {
		pwm_callback_delay = delay;
	}
}
 c16:	4770      	bx	lr
	} else {
		port_base->OUTCLR.reg = pin_mask;
 c18:	2280      	movs	r2, #128	; 0x80
 c1a:	0252      	lsls	r2, r2, #9
 c1c:	4b01      	ldr	r3, [pc, #4]	; (c24 <extint_detection_callback+0x2c>)
 c1e:	615a      	str	r2, [r3, #20]
 c20:	e7f2      	b.n	c08 <extint_detection_callback+0x10>
 c22:	46c0      	nop			; (mov r8, r8)
 c24:	41004400 	.word	0x41004400
 c28:	20000040 	.word	0x20000040

00000c2c <tc_callback_to_change_duty_cycle>:
{
 c2c:	b510      	push	{r4, lr}
	duty_cycle += 128; // Adjust duty cycle increment as needed
 c2e:	4b04      	ldr	r3, [pc, #16]	; (c40 <tc_callback_to_change_duty_cycle+0x14>)
 c30:	881a      	ldrh	r2, [r3, #0]
 c32:	3280      	adds	r2, #128	; 0x80
 c34:	b292      	uxth	r2, r2
 c36:	801a      	strh	r2, [r3, #0]
	tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, duty_cycle);
 c38:	2100      	movs	r1, #0
 c3a:	4b02      	ldr	r3, [pc, #8]	; (c44 <tc_callback_to_change_duty_cycle+0x18>)
 c3c:	4798      	blx	r3
}
 c3e:	bd10      	pop	{r4, pc}
 c40:	20000044 	.word	0x20000044
 c44:	00000ac1 	.word	0x00000ac1

00000c48 <configure_tc>:
{
 c48:	b510      	push	{r4, lr}
 c4a:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
 c4c:	aa01      	add	r2, sp, #4
 c4e:	2300      	movs	r3, #0
 c50:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
 c52:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
 c54:	2100      	movs	r1, #0
 c56:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
 c58:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
 c5a:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
 c5c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
 c5e:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
 c60:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
 c62:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
 c64:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
 c66:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
 c68:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
 c6a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
 c6c:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
 c6e:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
 c70:	3340      	adds	r3, #64	; 0x40
 c72:	7193      	strb	r3, [r2, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 0xFFFF;
 c74:	3b41      	subs	r3, #65	; 0x41
 c76:	8553      	strh	r3, [r2, #42]	; 0x2a
	config_tc.pwm_channel[0].enabled = true;
 c78:	3302      	adds	r3, #2
 c7a:	7413      	strb	r3, [r2, #16]
	config_tc.pwm_channel[0].pin_out = PWM_OUT_PIN;
 c7c:	330f      	adds	r3, #15
 c7e:	6153      	str	r3, [r2, #20]
	config_tc.pwm_channel[0].pin_mux = PWM_OUT_MUX;
 c80:	3b0c      	subs	r3, #12
 c82:	6193      	str	r3, [r2, #24]
	tc_init(&tc_instance, PWM_MODULE, &config_tc);
 c84:	4c07      	ldr	r4, [pc, #28]	; (ca4 <configure_tc+0x5c>)
 c86:	4908      	ldr	r1, [pc, #32]	; (ca8 <configure_tc+0x60>)
 c88:	0020      	movs	r0, r4
 c8a:	4b08      	ldr	r3, [pc, #32]	; (cac <configure_tc+0x64>)
 c8c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
 c8e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
 c90:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
 c92:	b25b      	sxtb	r3, r3
 c94:	2b00      	cmp	r3, #0
 c96:	dbfb      	blt.n	c90 <configure_tc+0x48>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
 c98:	8813      	ldrh	r3, [r2, #0]
 c9a:	2102      	movs	r1, #2
 c9c:	430b      	orrs	r3, r1
 c9e:	8013      	strh	r3, [r2, #0]
}
 ca0:	b00e      	add	sp, #56	; 0x38
 ca2:	bd10      	pop	{r4, pc}
 ca4:	20000094 	.word	0x20000094
 ca8:	42001800 	.word	0x42001800
 cac:	00000891 	.word	0x00000891

00000cb0 <configure_tc_callbacks>:
{
 cb0:	b510      	push	{r4, lr}
	tc_register_callback(
 cb2:	4c0c      	ldr	r4, [pc, #48]	; (ce4 <configure_tc_callbacks+0x34>)
 cb4:	2202      	movs	r2, #2
 cb6:	490c      	ldr	r1, [pc, #48]	; (ce8 <configure_tc_callbacks+0x38>)
 cb8:	0020      	movs	r0, r4
 cba:	4b0c      	ldr	r3, [pc, #48]	; (cec <configure_tc_callbacks+0x3c>)
 cbc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
 cbe:	6820      	ldr	r0, [r4, #0]
 cc0:	4b0b      	ldr	r3, [pc, #44]	; (cf0 <configure_tc_callbacks+0x40>)
 cc2:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
 cc4:	4b0b      	ldr	r3, [pc, #44]	; (cf4 <configure_tc_callbacks+0x44>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 cc6:	5c1b      	ldrb	r3, [r3, r0]
 cc8:	221f      	movs	r2, #31
 cca:	401a      	ands	r2, r3
 ccc:	2301      	movs	r3, #1
 cce:	4093      	lsls	r3, r2
 cd0:	4a09      	ldr	r2, [pc, #36]	; (cf8 <configure_tc_callbacks+0x48>)
 cd2:	6013      	str	r3, [r2, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
 cd4:	7e63      	ldrb	r3, [r4, #25]
 cd6:	2210      	movs	r2, #16
 cd8:	4313      	orrs	r3, r2
 cda:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
 cdc:	6823      	ldr	r3, [r4, #0]
 cde:	2210      	movs	r2, #16
 ce0:	735a      	strb	r2, [r3, #13]
}
 ce2:	bd10      	pop	{r4, pc}
 ce4:	20000094 	.word	0x20000094
 ce8:	00000c2d 	.word	0x00000c2d
 cec:	000007b5 	.word	0x000007b5
 cf0:	0000086d 	.word	0x0000086d
 cf4:	00000df8 	.word	0x00000df8
 cf8:	e000e100 	.word	0xe000e100

00000cfc <configure_extint_channel>:
void configure_extint_channel(void) {
 cfc:	b510      	push	{r4, lr}
 cfe:	b084      	sub	sp, #16
	extint_chan_get_config_defaults( & config_extint_chan);
 d00:	ac01      	add	r4, sp, #4
 d02:	0020      	movs	r0, r4
 d04:	4b07      	ldr	r3, [pc, #28]	; (d24 <configure_extint_channel+0x28>)
 d06:	4798      	blx	r3
	config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
 d08:	230e      	movs	r3, #14
 d0a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
 d0c:	2300      	movs	r3, #0
 d0e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
 d10:	3301      	adds	r3, #1
 d12:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
 d14:	3302      	adds	r3, #2
 d16:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, & config_extint_chan);
 d18:	0021      	movs	r1, r4
 d1a:	2000      	movs	r0, #0
 d1c:	4b02      	ldr	r3, [pc, #8]	; (d28 <configure_extint_channel+0x2c>)
 d1e:	4798      	blx	r3
}
 d20:	b004      	add	sp, #16
 d22:	bd10      	pop	{r4, pc}
 d24:	00000171 	.word	0x00000171
 d28:	00000185 	.word	0x00000185

00000d2c <configure_extint_callbacks>:
void configure_extint_callbacks(void) {
 d2c:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback,
 d2e:	2200      	movs	r2, #0
 d30:	2100      	movs	r1, #0
 d32:	4804      	ldr	r0, [pc, #16]	; (d44 <configure_extint_callbacks+0x18>)
 d34:	4b04      	ldr	r3, [pc, #16]	; (d48 <configure_extint_callbacks+0x1c>)
 d36:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
 d38:	2100      	movs	r1, #0
 d3a:	2000      	movs	r0, #0
 d3c:	4b03      	ldr	r3, [pc, #12]	; (d4c <configure_extint_callbacks+0x20>)
 d3e:	4798      	blx	r3
}
 d40:	bd10      	pop	{r4, pc}
 d42:	46c0      	nop			; (mov r8, r8)
 d44:	00000bf9 	.word	0x00000bf9
 d48:	000001fd 	.word	0x000001fd
 d4c:	00000229 	.word	0x00000229

00000d50 <main>:

int main(void)
{
 d50:	b510      	push	{r4, lr}
	system_init();
 d52:	4b08      	ldr	r3, [pc, #32]	; (d74 <main+0x24>)
 d54:	4798      	blx	r3
	configure_tc();
 d56:	4b08      	ldr	r3, [pc, #32]	; (d78 <main+0x28>)
 d58:	4798      	blx	r3
	configure_tc_callbacks();
 d5a:	4b08      	ldr	r3, [pc, #32]	; (d7c <main+0x2c>)
 d5c:	4798      	blx	r3
	configure_extint_channel();
 d5e:	4b08      	ldr	r3, [pc, #32]	; (d80 <main+0x30>)
 d60:	4798      	blx	r3
	configure_extint_callbacks();
 d62:	4b08      	ldr	r3, [pc, #32]	; (d84 <main+0x34>)
 d64:	4798      	blx	r3
	cpu_irq_enable();
 d66:	2201      	movs	r2, #1
 d68:	4b07      	ldr	r3, [pc, #28]	; (d88 <main+0x38>)
 d6a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 d6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 d70:	b662      	cpsie	i
 d72:	e7fe      	b.n	d72 <main+0x22>
 d74:	00000789 	.word	0x00000789
 d78:	00000c49 	.word	0x00000c49
 d7c:	00000cb1 	.word	0x00000cb1
 d80:	00000cfd 	.word	0x00000cfd
 d84:	00000d2d 	.word	0x00000d2d
 d88:	20000000 	.word	0x20000000

00000d8c <__libc_init_array>:
 d8c:	b570      	push	{r4, r5, r6, lr}
 d8e:	2600      	movs	r6, #0
 d90:	4d0c      	ldr	r5, [pc, #48]	; (dc4 <__libc_init_array+0x38>)
 d92:	4c0d      	ldr	r4, [pc, #52]	; (dc8 <__libc_init_array+0x3c>)
 d94:	1b64      	subs	r4, r4, r5
 d96:	10a4      	asrs	r4, r4, #2
 d98:	42a6      	cmp	r6, r4
 d9a:	d109      	bne.n	db0 <__libc_init_array+0x24>
 d9c:	2600      	movs	r6, #0
 d9e:	f000 f82d 	bl	dfc <_init>
 da2:	4d0a      	ldr	r5, [pc, #40]	; (dcc <__libc_init_array+0x40>)
 da4:	4c0a      	ldr	r4, [pc, #40]	; (dd0 <__libc_init_array+0x44>)
 da6:	1b64      	subs	r4, r4, r5
 da8:	10a4      	asrs	r4, r4, #2
 daa:	42a6      	cmp	r6, r4
 dac:	d105      	bne.n	dba <__libc_init_array+0x2e>
 dae:	bd70      	pop	{r4, r5, r6, pc}
 db0:	00b3      	lsls	r3, r6, #2
 db2:	58eb      	ldr	r3, [r5, r3]
 db4:	4798      	blx	r3
 db6:	3601      	adds	r6, #1
 db8:	e7ee      	b.n	d98 <__libc_init_array+0xc>
 dba:	00b3      	lsls	r3, r6, #2
 dbc:	58eb      	ldr	r3, [r5, r3]
 dbe:	4798      	blx	r3
 dc0:	3601      	adds	r6, #1
 dc2:	e7f2      	b.n	daa <__libc_init_array+0x1e>
 dc4:	00000e08 	.word	0x00000e08
 dc8:	00000e08 	.word	0x00000e08
 dcc:	00000e08 	.word	0x00000e08
 dd0:	00000e0c 	.word	0x00000e0c
 dd4:	000003d0 	.word	0x000003d0
 dd8:	000003b0 	.word	0x000003b0
 ddc:	000003b0 	.word	0x000003b0
 de0:	0000043c 	.word	0x0000043c
 de4:	000003c2 	.word	0x000003c2
 de8:	000003de 	.word	0x000003de
 dec:	000003b4 	.word	0x000003b4
 df0:	000003ec 	.word	0x000003ec
 df4:	0000042c 	.word	0x0000042c

00000df8 <tc_interrupt_vectors.11811>:
 df8:	00000e0d                                ....

00000dfc <_init>:
 dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 dfe:	46c0      	nop			; (mov r8, r8)
 e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 e02:	bc08      	pop	{r3}
 e04:	469e      	mov	lr, r3
 e06:	4770      	bx	lr

00000e08 <__init_array_start>:
 e08:	000000b5 	.word	0x000000b5

00000e0c <_fini>:
 e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 e0e:	46c0      	nop			; (mov r8, r8)
 e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 e12:	bc08      	pop	{r3}
 e14:	469e      	mov	lr, r3
 e16:	4770      	bx	lr

00000e18 <__fini_array_start>:
 e18:	0000008d 	.word	0x0000008d
