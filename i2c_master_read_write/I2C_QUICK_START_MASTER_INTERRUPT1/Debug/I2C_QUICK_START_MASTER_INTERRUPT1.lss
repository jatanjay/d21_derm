
I2C_QUICK_START_MASTER_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003074  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00003074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d0  2000000c  00003080  0002000c  2**2
                  ALLOC
  3 .stack        00002004  200000dc  00003150  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   000201e8  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d67  00000000  00000000  00040275  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003f96  00000000  00000000  00042fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000440  00000000  00000000  00046f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000420  00000000  00000000  000473b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019c1b  00000000  00000000  000477d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009a13  00000000  00000000  000613ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008dee7  00000000  00000000  0006ae00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bc4  00000000  00000000  000f8ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 20 00 20 95 12 00 00 91 12 00 00 91 12 00 00     . . ............
	...
      2c:	91 12 00 00 00 00 00 00 00 00 00 00 91 12 00 00     ................
      3c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      4c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      5c:	91 12 00 00 91 12 00 00 79 0c 00 00 89 0c 00 00     ........y.......
      6c:	99 0c 00 00 a9 0c 00 00 b9 0c 00 00 c9 0c 00 00     ................
      7c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      8c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      9c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      ac:	91 12 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00003074 	.word	0x00003074

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00003074 	.word	0x00003074
     10c:	00003074 	.word	0x00003074
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001021 	.word	0x00001021
     140:	0000154d 	.word	0x0000154d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	20000028 	.word	0x20000028
     1b8:	2000002c 	.word	0x2000002c
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000028 	.word	0x20000028
     1e8:	2000002c 	.word	0x2000002c
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000229 	.word	0x00000229
     224:	41004480 	.word	0x41004480

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     22c:	ab01      	add	r3, sp, #4
     22e:	2280      	movs	r2, #128	; 0x80
     230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     232:	780a      	ldrb	r2, [r1, #0]
     234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     236:	784a      	ldrb	r2, [r1, #1]
     238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     23a:	788a      	ldrb	r2, [r1, #2]
     23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     23e:	0019      	movs	r1, r3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
     242:	4798      	blx	r3
}
     244:	b003      	add	sp, #12
     246:	bd00      	pop	{pc}
     248:	00001231 	.word	0x00001231

0000024c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     24c:	b5f0      	push	{r4, r5, r6, r7, lr}
     24e:	46d6      	mov	lr, sl
     250:	464f      	mov	r7, r9
     252:	4646      	mov	r6, r8
     254:	b5c0      	push	{r6, r7, lr}
     256:	b08a      	sub	sp, #40	; 0x28
     258:	0006      	movs	r6, r0
     25a:	000f      	movs	r7, r1
     25c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     25e:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     260:	0008      	movs	r0, r1
     262:	4ba0      	ldr	r3, [pc, #640]	; (4e4 <i2c_master_init+0x298>)
     264:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     266:	4aa0      	ldr	r2, [pc, #640]	; (4e8 <i2c_master_init+0x29c>)
     268:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     26a:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     26c:	2301      	movs	r3, #1
     26e:	40ab      	lsls	r3, r5
     270:	430b      	orrs	r3, r1
     272:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     274:	a909      	add	r1, sp, #36	; 0x24
     276:	7b23      	ldrb	r3, [r4, #12]
     278:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     27a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     27c:	b2c5      	uxtb	r5, r0
     27e:	0028      	movs	r0, r5
     280:	4b9a      	ldr	r3, [pc, #616]	; (4ec <i2c_master_init+0x2a0>)
     282:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     284:	0028      	movs	r0, r5
     286:	4b9a      	ldr	r3, [pc, #616]	; (4f0 <i2c_master_init+0x2a4>)
     288:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     28a:	7b20      	ldrb	r0, [r4, #12]
     28c:	2100      	movs	r1, #0
     28e:	4b99      	ldr	r3, [pc, #612]	; (4f4 <i2c_master_init+0x2a8>)
     290:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     292:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     294:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     296:	079b      	lsls	r3, r3, #30
     298:	d505      	bpl.n	2a6 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     29a:	b00a      	add	sp, #40	; 0x28
     29c:	bc1c      	pop	{r2, r3, r4}
     29e:	4690      	mov	r8, r2
     2a0:	4699      	mov	r9, r3
     2a2:	46a2      	mov	sl, r4
     2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     2a6:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     2a8:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     2aa:	07db      	lsls	r3, r3, #31
     2ac:	d4f5      	bmi.n	29a <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     2ae:	6830      	ldr	r0, [r6, #0]
     2b0:	4b8c      	ldr	r3, [pc, #560]	; (4e4 <i2c_master_init+0x298>)
     2b2:	4699      	mov	r9, r3
     2b4:	4798      	blx	r3
     2b6:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     2b8:	498f      	ldr	r1, [pc, #572]	; (4f8 <i2c_master_init+0x2ac>)
     2ba:	4b90      	ldr	r3, [pc, #576]	; (4fc <i2c_master_init+0x2b0>)
     2bc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     2be:	00ad      	lsls	r5, r5, #2
     2c0:	4b8f      	ldr	r3, [pc, #572]	; (500 <i2c_master_init+0x2b4>)
     2c2:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     2c4:	2300      	movs	r3, #0
     2c6:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     2c8:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     2ca:	2500      	movs	r5, #0
     2cc:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     2ce:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     2d0:	2225      	movs	r2, #37	; 0x25
     2d2:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     2d4:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     2d6:	3314      	adds	r3, #20
     2d8:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2da:	6833      	ldr	r3, [r6, #0]
     2dc:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2de:	0018      	movs	r0, r3
     2e0:	47c8      	blx	r9
     2e2:	4681      	mov	r9, r0
     2e4:	2380      	movs	r3, #128	; 0x80
     2e6:	aa08      	add	r2, sp, #32
     2e8:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2ea:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2ec:	2301      	movs	r3, #1
     2ee:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     2f0:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     2f2:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     2f4:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     2f6:	2800      	cmp	r0, #0
     2f8:	d100      	bne.n	2fc <i2c_master_init+0xb0>
     2fa:	e0af      	b.n	45c <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     2fc:	ab08      	add	r3, sp, #32
     2fe:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     300:	2302      	movs	r3, #2
     302:	aa08      	add	r2, sp, #32
     304:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     306:	0c00      	lsrs	r0, r0, #16
     308:	b2c0      	uxtb	r0, r0
     30a:	0011      	movs	r1, r2
     30c:	4b7d      	ldr	r3, [pc, #500]	; (504 <i2c_master_init+0x2b8>)
     30e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     310:	2f00      	cmp	r7, #0
     312:	d100      	bne.n	316 <i2c_master_init+0xca>
     314:	e0a7      	b.n	466 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     316:	ab08      	add	r3, sp, #32
     318:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     31a:	2302      	movs	r3, #2
     31c:	aa08      	add	r2, sp, #32
     31e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     320:	0c3f      	lsrs	r7, r7, #16
     322:	b2f8      	uxtb	r0, r7
     324:	0011      	movs	r1, r2
     326:	4b77      	ldr	r3, [pc, #476]	; (504 <i2c_master_init+0x2b8>)
     328:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     32a:	8aa3      	ldrh	r3, [r4, #20]
     32c:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     32e:	8ae3      	ldrh	r3, [r4, #22]
     330:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     332:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     334:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     336:	2b00      	cmp	r3, #0
     338:	d104      	bne.n	344 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     33a:	4b73      	ldr	r3, [pc, #460]	; (508 <i2c_master_init+0x2bc>)
     33c:	789b      	ldrb	r3, [r3, #2]
     33e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     340:	0fdb      	lsrs	r3, r3, #31
     342:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     344:	68a1      	ldr	r1, [r4, #8]
     346:	6923      	ldr	r3, [r4, #16]
     348:	430b      	orrs	r3, r1
     34a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     34c:	2224      	movs	r2, #36	; 0x24
     34e:	5ca2      	ldrb	r2, [r4, r2]
     350:	2a00      	cmp	r2, #0
     352:	d002      	beq.n	35a <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     354:	2280      	movs	r2, #128	; 0x80
     356:	05d2      	lsls	r2, r2, #23
     358:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     35a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     35c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     35e:	222c      	movs	r2, #44	; 0x2c
     360:	5ca2      	ldrb	r2, [r4, r2]
     362:	2a00      	cmp	r2, #0
     364:	d103      	bne.n	36e <i2c_master_init+0x122>
     366:	2280      	movs	r2, #128	; 0x80
     368:	0492      	lsls	r2, r2, #18
     36a:	4291      	cmp	r1, r2
     36c:	d102      	bne.n	374 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     36e:	2280      	movs	r2, #128	; 0x80
     370:	0512      	lsls	r2, r2, #20
     372:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     374:	222d      	movs	r2, #45	; 0x2d
     376:	5ca2      	ldrb	r2, [r4, r2]
     378:	2a00      	cmp	r2, #0
     37a:	d002      	beq.n	382 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     37c:	2280      	movs	r2, #128	; 0x80
     37e:	0412      	lsls	r2, r2, #16
     380:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     382:	222e      	movs	r2, #46	; 0x2e
     384:	5ca2      	ldrb	r2, [r4, r2]
     386:	2a00      	cmp	r2, #0
     388:	d002      	beq.n	390 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     38a:	2280      	movs	r2, #128	; 0x80
     38c:	03d2      	lsls	r2, r2, #15
     38e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     390:	4642      	mov	r2, r8
     392:	6812      	ldr	r2, [r2, #0]
     394:	4313      	orrs	r3, r2
     396:	4642      	mov	r2, r8
     398:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	005b      	lsls	r3, r3, #1
     39e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     3a0:	4648      	mov	r0, r9
     3a2:	3014      	adds	r0, #20
     3a4:	b2c0      	uxtb	r0, r0
     3a6:	4b59      	ldr	r3, [pc, #356]	; (50c <i2c_master_init+0x2c0>)
     3a8:	4798      	blx	r3
     3aa:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     3ac:	23fa      	movs	r3, #250	; 0xfa
     3ae:	009b      	lsls	r3, r3, #2
     3b0:	6822      	ldr	r2, [r4, #0]
     3b2:	435a      	muls	r2, r3
     3b4:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3b6:	6863      	ldr	r3, [r4, #4]
     3b8:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     3ba:	4d55      	ldr	r5, [pc, #340]	; (510 <i2c_master_init+0x2c4>)
     3bc:	47a8      	blx	r5
     3be:	9000      	str	r0, [sp, #0]
     3c0:	9101      	str	r1, [sp, #4]
     3c2:	464b      	mov	r3, r9
     3c4:	0058      	lsls	r0, r3, #1
     3c6:	47a8      	blx	r5
     3c8:	9002      	str	r0, [sp, #8]
     3ca:	9103      	str	r1, [sp, #12]
     3cc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     3ce:	47a8      	blx	r5
     3d0:	9004      	str	r0, [sp, #16]
     3d2:	9105      	str	r1, [sp, #20]
     3d4:	4f4f      	ldr	r7, [pc, #316]	; (514 <i2c_master_init+0x2c8>)
     3d6:	4a50      	ldr	r2, [pc, #320]	; (518 <i2c_master_init+0x2cc>)
     3d8:	4b50      	ldr	r3, [pc, #320]	; (51c <i2c_master_init+0x2d0>)
     3da:	9800      	ldr	r0, [sp, #0]
     3dc:	9901      	ldr	r1, [sp, #4]
     3de:	47b8      	blx	r7
     3e0:	0002      	movs	r2, r0
     3e2:	000b      	movs	r3, r1
     3e4:	9804      	ldr	r0, [sp, #16]
     3e6:	9905      	ldr	r1, [sp, #20]
     3e8:	47b8      	blx	r7
     3ea:	4e4d      	ldr	r6, [pc, #308]	; (520 <i2c_master_init+0x2d4>)
     3ec:	2200      	movs	r2, #0
     3ee:	4b4d      	ldr	r3, [pc, #308]	; (524 <i2c_master_init+0x2d8>)
     3f0:	47b0      	blx	r6
     3f2:	9004      	str	r0, [sp, #16]
     3f4:	9105      	str	r1, [sp, #20]
     3f6:	4648      	mov	r0, r9
     3f8:	47a8      	blx	r5
     3fa:	0002      	movs	r2, r0
     3fc:	000b      	movs	r3, r1
     3fe:	9804      	ldr	r0, [sp, #16]
     400:	9905      	ldr	r1, [sp, #20]
     402:	47b8      	blx	r7
     404:	0002      	movs	r2, r0
     406:	000b      	movs	r3, r1
     408:	4d47      	ldr	r5, [pc, #284]	; (528 <i2c_master_init+0x2dc>)
     40a:	9800      	ldr	r0, [sp, #0]
     40c:	9901      	ldr	r1, [sp, #4]
     40e:	47a8      	blx	r5
     410:	9a02      	ldr	r2, [sp, #8]
     412:	9b03      	ldr	r3, [sp, #12]
     414:	47b0      	blx	r6
     416:	2200      	movs	r2, #0
     418:	4b44      	ldr	r3, [pc, #272]	; (52c <i2c_master_init+0x2e0>)
     41a:	47a8      	blx	r5
     41c:	9a02      	ldr	r2, [sp, #8]
     41e:	9b03      	ldr	r3, [sp, #12]
     420:	4d43      	ldr	r5, [pc, #268]	; (530 <i2c_master_init+0x2e4>)
     422:	47a8      	blx	r5
     424:	4b43      	ldr	r3, [pc, #268]	; (534 <i2c_master_init+0x2e8>)
     426:	4798      	blx	r3
     428:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     42a:	2380      	movs	r3, #128	; 0x80
     42c:	049b      	lsls	r3, r3, #18
     42e:	68a2      	ldr	r2, [r4, #8]
     430:	429a      	cmp	r2, r3
     432:	d01e      	beq.n	472 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     434:	0003      	movs	r3, r0
     436:	2040      	movs	r0, #64	; 0x40
     438:	2dff      	cmp	r5, #255	; 0xff
     43a:	d900      	bls.n	43e <i2c_master_init+0x1f2>
     43c:	e72d      	b.n	29a <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     43e:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     440:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     442:	25ff      	movs	r5, #255	; 0xff
     444:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     446:	0624      	lsls	r4, r4, #24
     448:	4325      	orrs	r5, r4
     44a:	0400      	lsls	r0, r0, #16
     44c:	23ff      	movs	r3, #255	; 0xff
     44e:	041b      	lsls	r3, r3, #16
     450:	4018      	ands	r0, r3
     452:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     454:	4643      	mov	r3, r8
     456:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     458:	2000      	movs	r0, #0
     45a:	e71e      	b.n	29a <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     45c:	2100      	movs	r1, #0
     45e:	4640      	mov	r0, r8
     460:	4b35      	ldr	r3, [pc, #212]	; (538 <i2c_master_init+0x2ec>)
     462:	4798      	blx	r3
     464:	e74a      	b.n	2fc <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     466:	2101      	movs	r1, #1
     468:	4640      	mov	r0, r8
     46a:	4b33      	ldr	r3, [pc, #204]	; (538 <i2c_master_init+0x2ec>)
     46c:	4798      	blx	r3
     46e:	0007      	movs	r7, r0
     470:	e751      	b.n	316 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     472:	26fa      	movs	r6, #250	; 0xfa
     474:	00b6      	lsls	r6, r6, #2
     476:	4653      	mov	r3, sl
     478:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     47a:	9800      	ldr	r0, [sp, #0]
     47c:	9901      	ldr	r1, [sp, #4]
     47e:	0002      	movs	r2, r0
     480:	000b      	movs	r3, r1
     482:	4c27      	ldr	r4, [pc, #156]	; (520 <i2c_master_init+0x2d4>)
     484:	47a0      	blx	r4
     486:	9000      	str	r0, [sp, #0]
     488:	9101      	str	r1, [sp, #4]
     48a:	0030      	movs	r0, r6
     48c:	4b20      	ldr	r3, [pc, #128]	; (510 <i2c_master_init+0x2c4>)
     48e:	4798      	blx	r3
     490:	2200      	movs	r2, #0
     492:	4b2a      	ldr	r3, [pc, #168]	; (53c <i2c_master_init+0x2f0>)
     494:	47b8      	blx	r7
     496:	0002      	movs	r2, r0
     498:	000b      	movs	r3, r1
     49a:	9800      	ldr	r0, [sp, #0]
     49c:	9901      	ldr	r1, [sp, #4]
     49e:	4c24      	ldr	r4, [pc, #144]	; (530 <i2c_master_init+0x2e4>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b21      	ldr	r3, [pc, #132]	; (52c <i2c_master_init+0x2e0>)
     4a6:	4c20      	ldr	r4, [pc, #128]	; (528 <i2c_master_init+0x2dc>)
     4a8:	47a0      	blx	r4
     4aa:	4b22      	ldr	r3, [pc, #136]	; (534 <i2c_master_init+0x2e8>)
     4ac:	4798      	blx	r3
     4ae:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     4b0:	d00c      	beq.n	4cc <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     4b2:	0031      	movs	r1, r6
     4b4:	9807      	ldr	r0, [sp, #28]
     4b6:	4b22      	ldr	r3, [pc, #136]	; (540 <i2c_master_init+0x2f4>)
     4b8:	4798      	blx	r3
     4ba:	3802      	subs	r0, #2
     4bc:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4be:	002b      	movs	r3, r5
     4c0:	2dff      	cmp	r5, #255	; 0xff
     4c2:	d80c      	bhi.n	4de <i2c_master_init+0x292>
     4c4:	28ff      	cmp	r0, #255	; 0xff
     4c6:	d9bc      	bls.n	442 <i2c_master_init+0x1f6>
     4c8:	2040      	movs	r0, #64	; 0x40
     4ca:	e6e6      	b.n	29a <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     4cc:	0071      	lsls	r1, r6, #1
     4ce:	1e48      	subs	r0, r1, #1
     4d0:	9b07      	ldr	r3, [sp, #28]
     4d2:	469c      	mov	ip, r3
     4d4:	4460      	add	r0, ip
     4d6:	4b1a      	ldr	r3, [pc, #104]	; (540 <i2c_master_init+0x2f4>)
     4d8:	4798      	blx	r3
     4da:	3801      	subs	r0, #1
     4dc:	e7ef      	b.n	4be <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4de:	2040      	movs	r0, #64	; 0x40
     4e0:	e6db      	b.n	29a <i2c_master_init+0x4e>
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	00000bd1 	.word	0x00000bd1
     4e8:	40000400 	.word	0x40000400
     4ec:	00001139 	.word	0x00001139
     4f0:	000010ad 	.word	0x000010ad
     4f4:	00000a0d 	.word	0x00000a0d
     4f8:	00000821 	.word	0x00000821
     4fc:	00000c0d 	.word	0x00000c0d
     500:	20000084 	.word	0x20000084
     504:	00001231 	.word	0x00001231
     508:	41002000 	.word	0x41002000
     50c:	00001155 	.word	0x00001155
     510:	00002e81 	.word	0x00002e81
     514:	000022ed 	.word	0x000022ed
     518:	e826d695 	.word	0xe826d695
     51c:	3e112e0b 	.word	0x3e112e0b
     520:	00001665 	.word	0x00001665
     524:	40240000 	.word	0x40240000
     528:	000027ed 	.word	0x000027ed
     52c:	3ff00000 	.word	0x3ff00000
     530:	00001c85 	.word	0x00001c85
     534:	00002e19 	.word	0x00002e19
     538:	00000a59 	.word	0x00000a59
     53c:	40080000 	.word	0x40080000
     540:	0000154d 	.word	0x0000154d

00000544 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     544:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     546:	7e1a      	ldrb	r2, [r3, #24]
     548:	0792      	lsls	r2, r2, #30
     54a:	d507      	bpl.n	55c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     54c:	2202      	movs	r2, #2
     54e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     550:	8b5b      	ldrh	r3, [r3, #26]
     552:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     554:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     556:	17db      	asrs	r3, r3, #31
     558:	4018      	ands	r0, r3
}
     55a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     55c:	8b5a      	ldrh	r2, [r3, #26]
     55e:	0752      	lsls	r2, r2, #29
     560:	d506      	bpl.n	570 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     562:	6859      	ldr	r1, [r3, #4]
     564:	22c0      	movs	r2, #192	; 0xc0
     566:	0292      	lsls	r2, r2, #10
     568:	430a      	orrs	r2, r1
     56a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     56c:	2018      	movs	r0, #24
     56e:	e7f4      	b.n	55a <_i2c_master_address_response+0x16>
	return STATUS_OK;
     570:	2000      	movs	r0, #0
     572:	e7f2      	b.n	55a <_i2c_master_address_response+0x16>

00000574 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     574:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     576:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     578:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     57a:	2401      	movs	r4, #1
     57c:	2502      	movs	r5, #2
     57e:	7e11      	ldrb	r1, [r2, #24]
     580:	4221      	tst	r1, r4
     582:	d10b      	bne.n	59c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     584:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     586:	4229      	tst	r1, r5
     588:	d106      	bne.n	598 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     58a:	3301      	adds	r3, #1
     58c:	b29b      	uxth	r3, r3
     58e:	8901      	ldrh	r1, [r0, #8]
     590:	4299      	cmp	r1, r3
     592:	d8f4      	bhi.n	57e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     594:	2012      	movs	r0, #18
     596:	e002      	b.n	59e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     598:	2000      	movs	r0, #0
     59a:	e000      	b.n	59e <_i2c_master_wait_for_bus+0x2a>
     59c:	2000      	movs	r0, #0
}
     59e:	bd30      	pop	{r4, r5, pc}

000005a0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     5a0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5a2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5a4:	6862      	ldr	r2, [r4, #4]
     5a6:	2380      	movs	r3, #128	; 0x80
     5a8:	02db      	lsls	r3, r3, #11
     5aa:	4313      	orrs	r3, r2
     5ac:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     5ae:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     5b0:	4b02      	ldr	r3, [pc, #8]	; (5bc <_i2c_master_send_hs_master_code+0x1c>)
     5b2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     5b4:	2301      	movs	r3, #1
     5b6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     5b8:	bd10      	pop	{r4, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000575 	.word	0x00000575

000005c0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     5c0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5c2:	2207      	movs	r2, #7
     5c4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     5c6:	421a      	tst	r2, r3
     5c8:	d1fc      	bne.n	5c4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     5ca:	4770      	bx	lr

000005cc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     5cc:	b570      	push	{r4, r5, r6, lr}
     5ce:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5d0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5d2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     5d4:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     5d6:	8b83      	ldrh	r3, [r0, #28]
     5d8:	1aed      	subs	r5, r5, r3
     5da:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     5dc:	8b83      	ldrh	r3, [r0, #28]
     5de:	3b01      	subs	r3, #1
     5e0:	b29b      	uxth	r3, r3
     5e2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     5e4:	0113      	lsls	r3, r2, #4
     5e6:	d51d      	bpl.n	624 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     5e8:	7ac3      	ldrb	r3, [r0, #11]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d003      	beq.n	5f6 <_i2c_master_read+0x2a>
     5ee:	8b83      	ldrh	r3, [r0, #28]
     5f0:	b29b      	uxth	r3, r3
     5f2:	2b01      	cmp	r3, #1
     5f4:	d010      	beq.n	618 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     5f6:	8ba3      	ldrh	r3, [r4, #28]
     5f8:	b29b      	uxth	r3, r3
     5fa:	2b00      	cmp	r3, #0
     5fc:	d102      	bne.n	604 <_i2c_master_read+0x38>
		if (module->send_stop) {
     5fe:	7aa3      	ldrb	r3, [r4, #10]
     600:	2b00      	cmp	r3, #0
     602:	d11c      	bne.n	63e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     604:	0020      	movs	r0, r4
     606:	4b12      	ldr	r3, [pc, #72]	; (650 <_i2c_master_read+0x84>)
     608:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     60a:	6a23      	ldr	r3, [r4, #32]
     60c:	195d      	adds	r5, r3, r5
     60e:	2328      	movs	r3, #40	; 0x28
     610:	5cf3      	ldrb	r3, [r6, r3]
     612:	b2db      	uxtb	r3, r3
     614:	702b      	strb	r3, [r5, #0]
}
     616:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     618:	6872      	ldr	r2, [r6, #4]
     61a:	2380      	movs	r3, #128	; 0x80
     61c:	02db      	lsls	r3, r3, #11
     61e:	4313      	orrs	r3, r2
     620:	6073      	str	r3, [r6, #4]
     622:	e7e8      	b.n	5f6 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     624:	7ac3      	ldrb	r3, [r0, #11]
     626:	2b00      	cmp	r3, #0
     628:	d0e5      	beq.n	5f6 <_i2c_master_read+0x2a>
     62a:	8b83      	ldrh	r3, [r0, #28]
     62c:	b29b      	uxth	r3, r3
     62e:	2b00      	cmp	r3, #0
     630:	d1e1      	bne.n	5f6 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     632:	6872      	ldr	r2, [r6, #4]
     634:	2380      	movs	r3, #128	; 0x80
     636:	02db      	lsls	r3, r3, #11
     638:	4313      	orrs	r3, r2
     63a:	6073      	str	r3, [r6, #4]
     63c:	e7db      	b.n	5f6 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     63e:	0020      	movs	r0, r4
     640:	4b03      	ldr	r3, [pc, #12]	; (650 <_i2c_master_read+0x84>)
     642:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     644:	6872      	ldr	r2, [r6, #4]
     646:	23c0      	movs	r3, #192	; 0xc0
     648:	029b      	lsls	r3, r3, #10
     64a:	4313      	orrs	r3, r2
     64c:	6073      	str	r3, [r6, #4]
     64e:	e7d9      	b.n	604 <_i2c_master_read+0x38>
     650:	000005c1 	.word	0x000005c1

00000654 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     654:	b570      	push	{r4, r5, r6, lr}
     656:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     658:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     65a:	8b6b      	ldrh	r3, [r5, #26]
     65c:	075b      	lsls	r3, r3, #29
     65e:	d503      	bpl.n	668 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     660:	221e      	movs	r2, #30
     662:	2325      	movs	r3, #37	; 0x25
     664:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     666:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     668:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     66a:	8b83      	ldrh	r3, [r0, #28]
     66c:	1af6      	subs	r6, r6, r3
     66e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     670:	8b83      	ldrh	r3, [r0, #28]
     672:	3b01      	subs	r3, #1
     674:	b29b      	uxth	r3, r3
     676:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <_i2c_master_write+0x38>)
     67a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     67c:	6a23      	ldr	r3, [r4, #32]
     67e:	199e      	adds	r6, r3, r6
     680:	7833      	ldrb	r3, [r6, #0]
     682:	b2db      	uxtb	r3, r3
     684:	2228      	movs	r2, #40	; 0x28
     686:	54ab      	strb	r3, [r5, r2]
     688:	e7ed      	b.n	666 <_i2c_master_write+0x12>
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	000005c1 	.word	0x000005c1

00000690 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	0005      	movs	r5, r0
     694:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     696:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     698:	7a4b      	ldrb	r3, [r1, #9]
     69a:	2b00      	cmp	r3, #0
     69c:	d11a      	bne.n	6d4 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     69e:	6873      	ldr	r3, [r6, #4]
     6a0:	4a13      	ldr	r2, [pc, #76]	; (6f0 <_i2c_master_write_packet+0x60>)
     6a2:	4013      	ands	r3, r2
     6a4:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     6a6:	6863      	ldr	r3, [r4, #4]
     6a8:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     6aa:	8863      	ldrh	r3, [r4, #2]
     6ac:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     6ae:	2200      	movs	r2, #0
     6b0:	2324      	movs	r3, #36	; 0x24
     6b2:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     6b4:	3205      	adds	r2, #5
     6b6:	3301      	adds	r3, #1
     6b8:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     6ba:	3b22      	subs	r3, #34	; 0x22
     6bc:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     6be:	7a23      	ldrb	r3, [r4, #8]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d10b      	bne.n	6dc <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6c4:	8823      	ldrh	r3, [r4, #0]
     6c6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     6c8:	7a62      	ldrb	r2, [r4, #9]
     6ca:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6cc:	4313      	orrs	r3, r2
     6ce:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     6d0:	2000      	movs	r0, #0
     6d2:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6d4:	7a89      	ldrb	r1, [r1, #10]
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <_i2c_master_write_packet+0x64>)
     6d8:	4798      	blx	r3
     6da:	e7e0      	b.n	69e <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6dc:	8823      	ldrh	r3, [r4, #0]
     6de:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6e0:	7a62      	ldrb	r2, [r4, #9]
     6e2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6e4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6e6:	2280      	movs	r2, #128	; 0x80
     6e8:	0212      	lsls	r2, r2, #8
     6ea:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6ec:	6273      	str	r3, [r6, #36]	; 0x24
     6ee:	e7ef      	b.n	6d0 <_i2c_master_write_packet+0x40>
     6f0:	fffbffff 	.word	0xfffbffff
     6f4:	000005a1 	.word	0x000005a1

000006f8 <_i2c_master_read_packet>:
{
     6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6fa:	0005      	movs	r5, r0
     6fc:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6fe:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     700:	684b      	ldr	r3, [r1, #4]
     702:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     704:	884b      	ldrh	r3, [r1, #2]
     706:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     708:	2201      	movs	r2, #1
     70a:	2324      	movs	r3, #36	; 0x24
     70c:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     70e:	3204      	adds	r2, #4
     710:	3301      	adds	r3, #1
     712:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     714:	6837      	ldr	r7, [r6, #0]
     716:	013f      	lsls	r7, r7, #4
     718:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     71a:	7a4b      	ldrb	r3, [r1, #9]
     71c:	2b00      	cmp	r3, #0
     71e:	d117      	bne.n	750 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     720:	2f00      	cmp	r7, #0
     722:	d002      	beq.n	72a <_i2c_master_read_packet+0x32>
     724:	8863      	ldrh	r3, [r4, #2]
     726:	2b01      	cmp	r3, #1
     728:	d016      	beq.n	758 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     72a:	6873      	ldr	r3, [r6, #4]
     72c:	4a20      	ldr	r2, [pc, #128]	; (7b0 <_i2c_master_read_packet+0xb8>)
     72e:	4013      	ands	r3, r2
     730:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     732:	7a23      	ldrb	r3, [r4, #8]
     734:	2b00      	cmp	r3, #0
     736:	d115      	bne.n	764 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     738:	2303      	movs	r3, #3
     73a:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     73c:	8823      	ldrh	r3, [r4, #0]
     73e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     740:	7a62      	ldrb	r2, [r4, #9]
     742:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     744:	4313      	orrs	r3, r2
     746:	2201      	movs	r2, #1
     748:	4313      	orrs	r3, r2
     74a:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     74c:	2000      	movs	r0, #0
}
     74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     750:	7a89      	ldrb	r1, [r1, #10]
     752:	4b18      	ldr	r3, [pc, #96]	; (7b4 <_i2c_master_read_packet+0xbc>)
     754:	4798      	blx	r3
     756:	e7e3      	b.n	720 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     758:	6872      	ldr	r2, [r6, #4]
     75a:	2380      	movs	r3, #128	; 0x80
     75c:	02db      	lsls	r3, r3, #11
     75e:	4313      	orrs	r3, r2
     760:	6073      	str	r3, [r6, #4]
     762:	e7e6      	b.n	732 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     764:	8823      	ldrh	r3, [r4, #0]
     766:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     768:	7a62      	ldrb	r2, [r4, #9]
     76a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     76c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     76e:	2280      	movs	r2, #128	; 0x80
     770:	0212      	lsls	r2, r2, #8
     772:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     774:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     776:	0028      	movs	r0, r5
     778:	4b0f      	ldr	r3, [pc, #60]	; (7b8 <_i2c_master_read_packet+0xc0>)
     77a:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     77c:	6873      	ldr	r3, [r6, #4]
     77e:	4a0c      	ldr	r2, [pc, #48]	; (7b0 <_i2c_master_read_packet+0xb8>)
     780:	4013      	ands	r3, r2
     782:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     784:	2800      	cmp	r0, #0
     786:	d1e2      	bne.n	74e <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     788:	0028      	movs	r0, r5
     78a:	4b0c      	ldr	r3, [pc, #48]	; (7bc <_i2c_master_read_packet+0xc4>)
     78c:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     78e:	2800      	cmp	r0, #0
     790:	d1dd      	bne.n	74e <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     792:	2303      	movs	r3, #3
     794:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     796:	8823      	ldrh	r3, [r4, #0]
     798:	0a1b      	lsrs	r3, r3, #8
     79a:	2278      	movs	r2, #120	; 0x78
     79c:	4313      	orrs	r3, r2
     79e:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a0:	7a62      	ldrb	r2, [r4, #9]
     7a2:	0392      	lsls	r2, r2, #14
     7a4:	2101      	movs	r1, #1
     7a6:	430a      	orrs	r2, r1
     7a8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7aa:	6273      	str	r3, [r6, #36]	; 0x24
     7ac:	e7cf      	b.n	74e <_i2c_master_read_packet+0x56>
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	fffbffff 	.word	0xfffbffff
     7b4:	000005a1 	.word	0x000005a1
     7b8:	00000575 	.word	0x00000575
     7bc:	00000545 	.word	0x00000545

000007c0 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     7c0:	1c93      	adds	r3, r2, #2
     7c2:	009b      	lsls	r3, r3, #2
     7c4:	18c3      	adds	r3, r0, r3
     7c6:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     7c8:	7e03      	ldrb	r3, [r0, #24]
     7ca:	2101      	movs	r1, #1
     7cc:	4091      	lsls	r1, r2
     7ce:	430b      	orrs	r3, r1
     7d0:	b2db      	uxtb	r3, r3
     7d2:	7603      	strb	r3, [r0, #24]
}
     7d4:	4770      	bx	lr
	...

000007d8 <i2c_master_read_packet_job>:
{
     7d8:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     7da:	8b83      	ldrh	r3, [r0, #28]
     7dc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7de:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7e0:	2b00      	cmp	r3, #0
     7e2:	d001      	beq.n	7e8 <i2c_master_read_packet_job+0x10>
}
     7e4:	0010      	movs	r0, r2
     7e6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7e8:	3301      	adds	r3, #1
     7ea:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7ec:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     7ee:	4b02      	ldr	r3, [pc, #8]	; (7f8 <i2c_master_read_packet_job+0x20>)
     7f0:	4798      	blx	r3
     7f2:	0002      	movs	r2, r0
     7f4:	e7f6      	b.n	7e4 <i2c_master_read_packet_job+0xc>
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	000006f9 	.word	0x000006f9

000007fc <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7fc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     7fe:	8b83      	ldrh	r3, [r0, #28]
     800:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     802:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     804:	2b00      	cmp	r3, #0
     806:	d001      	beq.n	80c <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     808:	0010      	movs	r0, r2
     80a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     80c:	3301      	adds	r3, #1
     80e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     810:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     812:	4b02      	ldr	r3, [pc, #8]	; (81c <i2c_master_write_packet_job+0x20>)
     814:	4798      	blx	r3
     816:	0002      	movs	r2, r0
     818:	e7f6      	b.n	808 <i2c_master_write_packet_job+0xc>
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	00000691 	.word	0x00000691

00000820 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     820:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     822:	0080      	lsls	r0, r0, #2
     824:	4b75      	ldr	r3, [pc, #468]	; (9fc <_i2c_master_interrupt_handler+0x1dc>)
     826:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     828:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     82a:	682b      	ldr	r3, [r5, #0]
     82c:	011b      	lsls	r3, r3, #4
     82e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     830:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     832:	7e26      	ldrb	r6, [r4, #24]
     834:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     836:	8b63      	ldrh	r3, [r4, #26]
     838:	b29b      	uxth	r3, r3
     83a:	2b00      	cmp	r3, #0
     83c:	d103      	bne.n	846 <_i2c_master_interrupt_handler+0x26>
     83e:	8ba3      	ldrh	r3, [r4, #28]
     840:	b29b      	uxth	r3, r3
     842:	2b00      	cmp	r3, #0
     844:	d123      	bne.n	88e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     846:	8b63      	ldrh	r3, [r4, #26]
     848:	b29b      	uxth	r3, r3
     84a:	2b00      	cmp	r3, #0
     84c:	d008      	beq.n	860 <_i2c_master_interrupt_handler+0x40>
     84e:	8ba3      	ldrh	r3, [r4, #28]
     850:	b29b      	uxth	r3, r3
     852:	2b00      	cmp	r3, #0
     854:	d104      	bne.n	860 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     856:	3325      	adds	r3, #37	; 0x25
     858:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     85a:	2b05      	cmp	r3, #5
     85c:	d100      	bne.n	860 <_i2c_master_interrupt_handler+0x40>
     85e:	e06d      	b.n	93c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     860:	8b63      	ldrh	r3, [r4, #26]
     862:	b29b      	uxth	r3, r3
     864:	2b00      	cmp	r3, #0
     866:	d024      	beq.n	8b2 <_i2c_master_interrupt_handler+0x92>
     868:	8ba3      	ldrh	r3, [r4, #28]
     86a:	b29b      	uxth	r3, r3
     86c:	2b00      	cmp	r3, #0
     86e:	d020      	beq.n	8b2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     870:	8b6b      	ldrh	r3, [r5, #26]
     872:	069b      	lsls	r3, r3, #26
     874:	d500      	bpl.n	878 <_i2c_master_interrupt_handler+0x58>
     876:	e081      	b.n	97c <_i2c_master_interrupt_handler+0x15c>
     878:	2a00      	cmp	r2, #0
     87a:	d004      	beq.n	886 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     87c:	8ba3      	ldrh	r3, [r4, #28]
     87e:	b29b      	uxth	r3, r3
     880:	2b01      	cmp	r3, #1
     882:	d100      	bne.n	886 <_i2c_master_interrupt_handler+0x66>
     884:	e07a      	b.n	97c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     886:	2241      	movs	r2, #65	; 0x41
     888:	2325      	movs	r3, #37	; 0x25
     88a:	54e2      	strb	r2, [r4, r3]
     88c:	e011      	b.n	8b2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     88e:	7e2b      	ldrb	r3, [r5, #24]
     890:	07db      	lsls	r3, r3, #31
     892:	d507      	bpl.n	8a4 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     894:	2301      	movs	r3, #1
     896:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     898:	8b6b      	ldrh	r3, [r5, #26]
     89a:	079b      	lsls	r3, r3, #30
     89c:	d52e      	bpl.n	8fc <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     89e:	2241      	movs	r2, #65	; 0x41
     8a0:	2325      	movs	r3, #37	; 0x25
     8a2:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     8a4:	8ba3      	ldrh	r3, [r4, #28]
     8a6:	b29b      	uxth	r3, r3
     8a8:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     8aa:	2325      	movs	r3, #37	; 0x25
     8ac:	5ce3      	ldrb	r3, [r4, r3]
     8ae:	2b05      	cmp	r3, #5
     8b0:	d038      	beq.n	924 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8b2:	8b63      	ldrh	r3, [r4, #26]
     8b4:	b29b      	uxth	r3, r3
     8b6:	2b00      	cmp	r3, #0
     8b8:	d007      	beq.n	8ca <_i2c_master_interrupt_handler+0xaa>
     8ba:	8ba3      	ldrh	r3, [r4, #28]
     8bc:	b29b      	uxth	r3, r3
     8be:	2b00      	cmp	r3, #0
     8c0:	d103      	bne.n	8ca <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     8c2:	3325      	adds	r3, #37	; 0x25
     8c4:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8c6:	2b05      	cmp	r3, #5
     8c8:	d064      	beq.n	994 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     8ca:	2325      	movs	r3, #37	; 0x25
     8cc:	5ce3      	ldrb	r3, [r4, r3]
     8ce:	2b05      	cmp	r3, #5
     8d0:	d013      	beq.n	8fa <_i2c_master_interrupt_handler+0xda>
     8d2:	2325      	movs	r3, #37	; 0x25
     8d4:	5ce3      	ldrb	r3, [r4, r3]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d00f      	beq.n	8fa <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     8da:	2303      	movs	r3, #3
     8dc:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     8de:	2300      	movs	r3, #0
     8e0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     8e2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     8e4:	3325      	adds	r3, #37	; 0x25
     8e6:	5ce3      	ldrb	r3, [r4, r3]
     8e8:	2b41      	cmp	r3, #65	; 0x41
     8ea:	d003      	beq.n	8f4 <_i2c_master_interrupt_handler+0xd4>
     8ec:	7aa3      	ldrb	r3, [r4, #10]
     8ee:	2b00      	cmp	r3, #0
     8f0:	d000      	beq.n	8f4 <_i2c_master_interrupt_handler+0xd4>
     8f2:	e075      	b.n	9e0 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     8f4:	0773      	lsls	r3, r6, #29
     8f6:	d500      	bpl.n	8fa <_i2c_master_interrupt_handler+0xda>
     8f8:	e07b      	b.n	9f2 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     8fa:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8fc:	8b6b      	ldrh	r3, [r5, #26]
     8fe:	075b      	lsls	r3, r3, #29
     900:	d5d0      	bpl.n	8a4 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     902:	2218      	movs	r2, #24
     904:	2325      	movs	r3, #37	; 0x25
     906:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     908:	2300      	movs	r3, #0
     90a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     90c:	7aa3      	ldrb	r3, [r4, #10]
     90e:	2b00      	cmp	r3, #0
     910:	d0c8      	beq.n	8a4 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     912:	0020      	movs	r0, r4
     914:	4b3a      	ldr	r3, [pc, #232]	; (a00 <_i2c_master_interrupt_handler+0x1e0>)
     916:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     918:	686a      	ldr	r2, [r5, #4]
     91a:	23c0      	movs	r3, #192	; 0xc0
     91c:	029b      	lsls	r3, r3, #10
     91e:	4313      	orrs	r3, r2
     920:	606b      	str	r3, [r5, #4]
     922:	e7bf      	b.n	8a4 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     924:	331f      	adds	r3, #31
     926:	5ce3      	ldrb	r3, [r4, r3]
     928:	2b00      	cmp	r3, #0
     92a:	d003      	beq.n	934 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     92c:	0020      	movs	r0, r4
     92e:	4b35      	ldr	r3, [pc, #212]	; (a04 <_i2c_master_interrupt_handler+0x1e4>)
     930:	4798      	blx	r3
     932:	e7be      	b.n	8b2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     934:	0020      	movs	r0, r4
     936:	4b34      	ldr	r3, [pc, #208]	; (a08 <_i2c_master_interrupt_handler+0x1e8>)
     938:	4798      	blx	r3
     93a:	e7ba      	b.n	8b2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     93c:	331f      	adds	r3, #31
     93e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     940:	2b00      	cmp	r3, #0
     942:	d000      	beq.n	946 <_i2c_master_interrupt_handler+0x126>
     944:	e78c      	b.n	860 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     946:	3303      	adds	r3, #3
     948:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     94a:	2300      	movs	r3, #0
     94c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     94e:	3325      	adds	r3, #37	; 0x25
     950:	2200      	movs	r2, #0
     952:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     954:	7aa3      	ldrb	r3, [r4, #10]
     956:	2b00      	cmp	r3, #0
     958:	d107      	bne.n	96a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     95a:	2301      	movs	r3, #1
     95c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     95e:	07f3      	lsls	r3, r6, #31
     960:	d5a7      	bpl.n	8b2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     962:	68e3      	ldr	r3, [r4, #12]
     964:	0020      	movs	r0, r4
     966:	4798      	blx	r3
     968:	e7a3      	b.n	8b2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     96a:	0020      	movs	r0, r4
     96c:	4b24      	ldr	r3, [pc, #144]	; (a00 <_i2c_master_interrupt_handler+0x1e0>)
     96e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     970:	686a      	ldr	r2, [r5, #4]
     972:	23c0      	movs	r3, #192	; 0xc0
     974:	029b      	lsls	r3, r3, #10
     976:	4313      	orrs	r3, r2
     978:	606b      	str	r3, [r5, #4]
     97a:	e7f0      	b.n	95e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     97c:	2324      	movs	r3, #36	; 0x24
     97e:	5ce3      	ldrb	r3, [r4, r3]
     980:	2b00      	cmp	r3, #0
     982:	d103      	bne.n	98c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     984:	0020      	movs	r0, r4
     986:	4b20      	ldr	r3, [pc, #128]	; (a08 <_i2c_master_interrupt_handler+0x1e8>)
     988:	4798      	blx	r3
     98a:	e792      	b.n	8b2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     98c:	0020      	movs	r0, r4
     98e:	4b1d      	ldr	r3, [pc, #116]	; (a04 <_i2c_master_interrupt_handler+0x1e4>)
     990:	4798      	blx	r3
     992:	e78e      	b.n	8b2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     994:	331f      	adds	r3, #31
     996:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     998:	2b01      	cmp	r3, #1
     99a:	d196      	bne.n	8ca <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     99c:	7e2b      	ldrb	r3, [r5, #24]
     99e:	079b      	lsls	r3, r3, #30
     9a0:	d501      	bpl.n	9a6 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     9a2:	2302      	movs	r3, #2
     9a4:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     9a6:	2303      	movs	r3, #3
     9a8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     9aa:	2300      	movs	r3, #0
     9ac:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     9ae:	3325      	adds	r3, #37	; 0x25
     9b0:	2200      	movs	r2, #0
     9b2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     9b4:	07b3      	lsls	r3, r6, #30
     9b6:	d503      	bpl.n	9c0 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     9b8:	2324      	movs	r3, #36	; 0x24
     9ba:	5ce3      	ldrb	r3, [r4, r3]
     9bc:	2b01      	cmp	r3, #1
     9be:	d00b      	beq.n	9d8 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     9c0:	07f3      	lsls	r3, r6, #31
     9c2:	d400      	bmi.n	9c6 <_i2c_master_interrupt_handler+0x1a6>
     9c4:	e781      	b.n	8ca <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     9c6:	2324      	movs	r3, #36	; 0x24
     9c8:	5ce3      	ldrb	r3, [r4, r3]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d000      	beq.n	9d0 <_i2c_master_interrupt_handler+0x1b0>
     9ce:	e77c      	b.n	8ca <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9d0:	68e3      	ldr	r3, [r4, #12]
     9d2:	0020      	movs	r0, r4
     9d4:	4798      	blx	r3
     9d6:	e778      	b.n	8ca <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     9d8:	6923      	ldr	r3, [r4, #16]
     9da:	0020      	movs	r0, r4
     9dc:	4798      	blx	r3
     9de:	e774      	b.n	8ca <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     9e0:	0020      	movs	r0, r4
     9e2:	4b07      	ldr	r3, [pc, #28]	; (a00 <_i2c_master_interrupt_handler+0x1e0>)
     9e4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     9e6:	686a      	ldr	r2, [r5, #4]
     9e8:	23e0      	movs	r3, #224	; 0xe0
     9ea:	02db      	lsls	r3, r3, #11
     9ec:	4313      	orrs	r3, r2
     9ee:	606b      	str	r3, [r5, #4]
     9f0:	e780      	b.n	8f4 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     9f2:	6963      	ldr	r3, [r4, #20]
     9f4:	0020      	movs	r0, r4
     9f6:	4798      	blx	r3
}
     9f8:	e77f      	b.n	8fa <_i2c_master_interrupt_handler+0xda>
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	20000084 	.word	0x20000084
     a00:	000005c1 	.word	0x000005c1
     a04:	000005cd 	.word	0x000005cd
     a08:	00000655 	.word	0x00000655

00000a0c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     a0c:	b510      	push	{r4, lr}
     a0e:	b082      	sub	sp, #8
     a10:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     a12:	4b0e      	ldr	r3, [pc, #56]	; (a4c <sercom_set_gclk_generator+0x40>)
     a14:	781b      	ldrb	r3, [r3, #0]
     a16:	2b00      	cmp	r3, #0
     a18:	d007      	beq.n	a2a <sercom_set_gclk_generator+0x1e>
     a1a:	2900      	cmp	r1, #0
     a1c:	d105      	bne.n	a2a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     a1e:	4b0b      	ldr	r3, [pc, #44]	; (a4c <sercom_set_gclk_generator+0x40>)
     a20:	785b      	ldrb	r3, [r3, #1]
     a22:	4283      	cmp	r3, r0
     a24:	d010      	beq.n	a48 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     a26:	201d      	movs	r0, #29
     a28:	e00c      	b.n	a44 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     a2a:	a901      	add	r1, sp, #4
     a2c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a2e:	2013      	movs	r0, #19
     a30:	4b07      	ldr	r3, [pc, #28]	; (a50 <sercom_set_gclk_generator+0x44>)
     a32:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a34:	2013      	movs	r0, #19
     a36:	4b07      	ldr	r3, [pc, #28]	; (a54 <sercom_set_gclk_generator+0x48>)
     a38:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     a3a:	4b04      	ldr	r3, [pc, #16]	; (a4c <sercom_set_gclk_generator+0x40>)
     a3c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     a3e:	2201      	movs	r2, #1
     a40:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     a42:	2000      	movs	r0, #0
}
     a44:	b002      	add	sp, #8
     a46:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     a48:	2000      	movs	r0, #0
     a4a:	e7fb      	b.n	a44 <sercom_set_gclk_generator+0x38>
     a4c:	20000030 	.word	0x20000030
     a50:	00001139 	.word	0x00001139
     a54:	000010ad 	.word	0x000010ad

00000a58 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     a58:	4b40      	ldr	r3, [pc, #256]	; (b5c <_sercom_get_default_pad+0x104>)
     a5a:	4298      	cmp	r0, r3
     a5c:	d031      	beq.n	ac2 <_sercom_get_default_pad+0x6a>
     a5e:	d90a      	bls.n	a76 <_sercom_get_default_pad+0x1e>
     a60:	4b3f      	ldr	r3, [pc, #252]	; (b60 <_sercom_get_default_pad+0x108>)
     a62:	4298      	cmp	r0, r3
     a64:	d04d      	beq.n	b02 <_sercom_get_default_pad+0xaa>
     a66:	4b3f      	ldr	r3, [pc, #252]	; (b64 <_sercom_get_default_pad+0x10c>)
     a68:	4298      	cmp	r0, r3
     a6a:	d05a      	beq.n	b22 <_sercom_get_default_pad+0xca>
     a6c:	4b3e      	ldr	r3, [pc, #248]	; (b68 <_sercom_get_default_pad+0x110>)
     a6e:	4298      	cmp	r0, r3
     a70:	d037      	beq.n	ae2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     a72:	2000      	movs	r0, #0
}
     a74:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     a76:	4b3d      	ldr	r3, [pc, #244]	; (b6c <_sercom_get_default_pad+0x114>)
     a78:	4298      	cmp	r0, r3
     a7a:	d00c      	beq.n	a96 <_sercom_get_default_pad+0x3e>
     a7c:	4b3c      	ldr	r3, [pc, #240]	; (b70 <_sercom_get_default_pad+0x118>)
     a7e:	4298      	cmp	r0, r3
     a80:	d1f7      	bne.n	a72 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a82:	2901      	cmp	r1, #1
     a84:	d017      	beq.n	ab6 <_sercom_get_default_pad+0x5e>
     a86:	2900      	cmp	r1, #0
     a88:	d05d      	beq.n	b46 <_sercom_get_default_pad+0xee>
     a8a:	2902      	cmp	r1, #2
     a8c:	d015      	beq.n	aba <_sercom_get_default_pad+0x62>
     a8e:	2903      	cmp	r1, #3
     a90:	d015      	beq.n	abe <_sercom_get_default_pad+0x66>
	return 0;
     a92:	2000      	movs	r0, #0
     a94:	e7ee      	b.n	a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a96:	2901      	cmp	r1, #1
     a98:	d007      	beq.n	aaa <_sercom_get_default_pad+0x52>
     a9a:	2900      	cmp	r1, #0
     a9c:	d051      	beq.n	b42 <_sercom_get_default_pad+0xea>
     a9e:	2902      	cmp	r1, #2
     aa0:	d005      	beq.n	aae <_sercom_get_default_pad+0x56>
     aa2:	2903      	cmp	r1, #3
     aa4:	d005      	beq.n	ab2 <_sercom_get_default_pad+0x5a>
	return 0;
     aa6:	2000      	movs	r0, #0
     aa8:	e7e4      	b.n	a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aaa:	4832      	ldr	r0, [pc, #200]	; (b74 <_sercom_get_default_pad+0x11c>)
     aac:	e7e2      	b.n	a74 <_sercom_get_default_pad+0x1c>
     aae:	4832      	ldr	r0, [pc, #200]	; (b78 <_sercom_get_default_pad+0x120>)
     ab0:	e7e0      	b.n	a74 <_sercom_get_default_pad+0x1c>
     ab2:	4832      	ldr	r0, [pc, #200]	; (b7c <_sercom_get_default_pad+0x124>)
     ab4:	e7de      	b.n	a74 <_sercom_get_default_pad+0x1c>
     ab6:	4832      	ldr	r0, [pc, #200]	; (b80 <_sercom_get_default_pad+0x128>)
     ab8:	e7dc      	b.n	a74 <_sercom_get_default_pad+0x1c>
     aba:	4832      	ldr	r0, [pc, #200]	; (b84 <_sercom_get_default_pad+0x12c>)
     abc:	e7da      	b.n	a74 <_sercom_get_default_pad+0x1c>
     abe:	4832      	ldr	r0, [pc, #200]	; (b88 <_sercom_get_default_pad+0x130>)
     ac0:	e7d8      	b.n	a74 <_sercom_get_default_pad+0x1c>
     ac2:	2901      	cmp	r1, #1
     ac4:	d007      	beq.n	ad6 <_sercom_get_default_pad+0x7e>
     ac6:	2900      	cmp	r1, #0
     ac8:	d03f      	beq.n	b4a <_sercom_get_default_pad+0xf2>
     aca:	2902      	cmp	r1, #2
     acc:	d005      	beq.n	ada <_sercom_get_default_pad+0x82>
     ace:	2903      	cmp	r1, #3
     ad0:	d005      	beq.n	ade <_sercom_get_default_pad+0x86>
	return 0;
     ad2:	2000      	movs	r0, #0
     ad4:	e7ce      	b.n	a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ad6:	482d      	ldr	r0, [pc, #180]	; (b8c <_sercom_get_default_pad+0x134>)
     ad8:	e7cc      	b.n	a74 <_sercom_get_default_pad+0x1c>
     ada:	482d      	ldr	r0, [pc, #180]	; (b90 <_sercom_get_default_pad+0x138>)
     adc:	e7ca      	b.n	a74 <_sercom_get_default_pad+0x1c>
     ade:	482d      	ldr	r0, [pc, #180]	; (b94 <_sercom_get_default_pad+0x13c>)
     ae0:	e7c8      	b.n	a74 <_sercom_get_default_pad+0x1c>
     ae2:	2901      	cmp	r1, #1
     ae4:	d007      	beq.n	af6 <_sercom_get_default_pad+0x9e>
     ae6:	2900      	cmp	r1, #0
     ae8:	d031      	beq.n	b4e <_sercom_get_default_pad+0xf6>
     aea:	2902      	cmp	r1, #2
     aec:	d005      	beq.n	afa <_sercom_get_default_pad+0xa2>
     aee:	2903      	cmp	r1, #3
     af0:	d005      	beq.n	afe <_sercom_get_default_pad+0xa6>
	return 0;
     af2:	2000      	movs	r0, #0
     af4:	e7be      	b.n	a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     af6:	4828      	ldr	r0, [pc, #160]	; (b98 <_sercom_get_default_pad+0x140>)
     af8:	e7bc      	b.n	a74 <_sercom_get_default_pad+0x1c>
     afa:	4828      	ldr	r0, [pc, #160]	; (b9c <_sercom_get_default_pad+0x144>)
     afc:	e7ba      	b.n	a74 <_sercom_get_default_pad+0x1c>
     afe:	4828      	ldr	r0, [pc, #160]	; (ba0 <_sercom_get_default_pad+0x148>)
     b00:	e7b8      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b02:	2901      	cmp	r1, #1
     b04:	d007      	beq.n	b16 <_sercom_get_default_pad+0xbe>
     b06:	2900      	cmp	r1, #0
     b08:	d023      	beq.n	b52 <_sercom_get_default_pad+0xfa>
     b0a:	2902      	cmp	r1, #2
     b0c:	d005      	beq.n	b1a <_sercom_get_default_pad+0xc2>
     b0e:	2903      	cmp	r1, #3
     b10:	d005      	beq.n	b1e <_sercom_get_default_pad+0xc6>
	return 0;
     b12:	2000      	movs	r0, #0
     b14:	e7ae      	b.n	a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b16:	4823      	ldr	r0, [pc, #140]	; (ba4 <_sercom_get_default_pad+0x14c>)
     b18:	e7ac      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b1a:	4823      	ldr	r0, [pc, #140]	; (ba8 <_sercom_get_default_pad+0x150>)
     b1c:	e7aa      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b1e:	4823      	ldr	r0, [pc, #140]	; (bac <_sercom_get_default_pad+0x154>)
     b20:	e7a8      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b22:	2901      	cmp	r1, #1
     b24:	d007      	beq.n	b36 <_sercom_get_default_pad+0xde>
     b26:	2900      	cmp	r1, #0
     b28:	d015      	beq.n	b56 <_sercom_get_default_pad+0xfe>
     b2a:	2902      	cmp	r1, #2
     b2c:	d005      	beq.n	b3a <_sercom_get_default_pad+0xe2>
     b2e:	2903      	cmp	r1, #3
     b30:	d005      	beq.n	b3e <_sercom_get_default_pad+0xe6>
	return 0;
     b32:	2000      	movs	r0, #0
     b34:	e79e      	b.n	a74 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b36:	481e      	ldr	r0, [pc, #120]	; (bb0 <_sercom_get_default_pad+0x158>)
     b38:	e79c      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b3a:	481e      	ldr	r0, [pc, #120]	; (bb4 <_sercom_get_default_pad+0x15c>)
     b3c:	e79a      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b3e:	481e      	ldr	r0, [pc, #120]	; (bb8 <_sercom_get_default_pad+0x160>)
     b40:	e798      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b42:	481e      	ldr	r0, [pc, #120]	; (bbc <_sercom_get_default_pad+0x164>)
     b44:	e796      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b46:	2003      	movs	r0, #3
     b48:	e794      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b4a:	481d      	ldr	r0, [pc, #116]	; (bc0 <_sercom_get_default_pad+0x168>)
     b4c:	e792      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b4e:	481d      	ldr	r0, [pc, #116]	; (bc4 <_sercom_get_default_pad+0x16c>)
     b50:	e790      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b52:	481d      	ldr	r0, [pc, #116]	; (bc8 <_sercom_get_default_pad+0x170>)
     b54:	e78e      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b56:	481d      	ldr	r0, [pc, #116]	; (bcc <_sercom_get_default_pad+0x174>)
     b58:	e78c      	b.n	a74 <_sercom_get_default_pad+0x1c>
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	42001000 	.word	0x42001000
     b60:	42001800 	.word	0x42001800
     b64:	42001c00 	.word	0x42001c00
     b68:	42001400 	.word	0x42001400
     b6c:	42000800 	.word	0x42000800
     b70:	42000c00 	.word	0x42000c00
     b74:	00050003 	.word	0x00050003
     b78:	00060003 	.word	0x00060003
     b7c:	00070003 	.word	0x00070003
     b80:	00010003 	.word	0x00010003
     b84:	001e0003 	.word	0x001e0003
     b88:	001f0003 	.word	0x001f0003
     b8c:	00090003 	.word	0x00090003
     b90:	000a0003 	.word	0x000a0003
     b94:	000b0003 	.word	0x000b0003
     b98:	00110003 	.word	0x00110003
     b9c:	00120003 	.word	0x00120003
     ba0:	00130003 	.word	0x00130003
     ba4:	000d0003 	.word	0x000d0003
     ba8:	000e0003 	.word	0x000e0003
     bac:	000f0003 	.word	0x000f0003
     bb0:	00170003 	.word	0x00170003
     bb4:	00180003 	.word	0x00180003
     bb8:	00190003 	.word	0x00190003
     bbc:	00040003 	.word	0x00040003
     bc0:	00080003 	.word	0x00080003
     bc4:	00100003 	.word	0x00100003
     bc8:	000c0003 	.word	0x000c0003
     bcc:	00160003 	.word	0x00160003

00000bd0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     bd0:	b530      	push	{r4, r5, lr}
     bd2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     bd4:	4b0b      	ldr	r3, [pc, #44]	; (c04 <_sercom_get_sercom_inst_index+0x34>)
     bd6:	466a      	mov	r2, sp
     bd8:	cb32      	ldmia	r3!, {r1, r4, r5}
     bda:	c232      	stmia	r2!, {r1, r4, r5}
     bdc:	cb32      	ldmia	r3!, {r1, r4, r5}
     bde:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     be0:	9b00      	ldr	r3, [sp, #0]
     be2:	4283      	cmp	r3, r0
     be4:	d00b      	beq.n	bfe <_sercom_get_sercom_inst_index+0x2e>
     be6:	2301      	movs	r3, #1
     be8:	009a      	lsls	r2, r3, #2
     bea:	4669      	mov	r1, sp
     bec:	5852      	ldr	r2, [r2, r1]
     bee:	4282      	cmp	r2, r0
     bf0:	d006      	beq.n	c00 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bf2:	3301      	adds	r3, #1
     bf4:	2b06      	cmp	r3, #6
     bf6:	d1f7      	bne.n	be8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     bf8:	2000      	movs	r0, #0
}
     bfa:	b007      	add	sp, #28
     bfc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bfe:	2300      	movs	r3, #0
			return i;
     c00:	b2d8      	uxtb	r0, r3
     c02:	e7fa      	b.n	bfa <_sercom_get_sercom_inst_index+0x2a>
     c04:	00002f74 	.word	0x00002f74

00000c08 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c08:	4770      	bx	lr
	...

00000c0c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c0e:	4b0a      	ldr	r3, [pc, #40]	; (c38 <_sercom_set_handler+0x2c>)
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	2b00      	cmp	r3, #0
     c14:	d10c      	bne.n	c30 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c16:	4f09      	ldr	r7, [pc, #36]	; (c3c <_sercom_set_handler+0x30>)
     c18:	4e09      	ldr	r6, [pc, #36]	; (c40 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c1a:	4d0a      	ldr	r5, [pc, #40]	; (c44 <_sercom_set_handler+0x38>)
     c1c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c1e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c20:	195a      	adds	r2, r3, r5
     c22:	6014      	str	r4, [r2, #0]
     c24:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c26:	2b18      	cmp	r3, #24
     c28:	d1f9      	bne.n	c1e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     c2a:	2201      	movs	r2, #1
     c2c:	4b02      	ldr	r3, [pc, #8]	; (c38 <_sercom_set_handler+0x2c>)
     c2e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c30:	0080      	lsls	r0, r0, #2
     c32:	4b02      	ldr	r3, [pc, #8]	; (c3c <_sercom_set_handler+0x30>)
     c34:	50c1      	str	r1, [r0, r3]
}
     c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c38:	20000032 	.word	0x20000032
     c3c:	20000034 	.word	0x20000034
     c40:	00000c09 	.word	0x00000c09
     c44:	20000084 	.word	0x20000084

00000c48 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c48:	b500      	push	{lr}
     c4a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c4c:	2309      	movs	r3, #9
     c4e:	466a      	mov	r2, sp
     c50:	7013      	strb	r3, [r2, #0]
     c52:	3301      	adds	r3, #1
     c54:	7053      	strb	r3, [r2, #1]
     c56:	3301      	adds	r3, #1
     c58:	7093      	strb	r3, [r2, #2]
     c5a:	3301      	adds	r3, #1
     c5c:	70d3      	strb	r3, [r2, #3]
     c5e:	3301      	adds	r3, #1
     c60:	7113      	strb	r3, [r2, #4]
     c62:	3301      	adds	r3, #1
     c64:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c66:	4b03      	ldr	r3, [pc, #12]	; (c74 <_sercom_get_interrupt_vector+0x2c>)
     c68:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c6a:	466b      	mov	r3, sp
     c6c:	5618      	ldrsb	r0, [r3, r0]
}
     c6e:	b003      	add	sp, #12
     c70:	bd00      	pop	{pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	00000bd1 	.word	0x00000bd1

00000c78 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c78:	b510      	push	{r4, lr}
     c7a:	4b02      	ldr	r3, [pc, #8]	; (c84 <SERCOM0_Handler+0xc>)
     c7c:	681b      	ldr	r3, [r3, #0]
     c7e:	2000      	movs	r0, #0
     c80:	4798      	blx	r3
     c82:	bd10      	pop	{r4, pc}
     c84:	20000034 	.word	0x20000034

00000c88 <SERCOM1_Handler>:
     c88:	b510      	push	{r4, lr}
     c8a:	4b02      	ldr	r3, [pc, #8]	; (c94 <SERCOM1_Handler+0xc>)
     c8c:	685b      	ldr	r3, [r3, #4]
     c8e:	2001      	movs	r0, #1
     c90:	4798      	blx	r3
     c92:	bd10      	pop	{r4, pc}
     c94:	20000034 	.word	0x20000034

00000c98 <SERCOM2_Handler>:
     c98:	b510      	push	{r4, lr}
     c9a:	4b02      	ldr	r3, [pc, #8]	; (ca4 <SERCOM2_Handler+0xc>)
     c9c:	689b      	ldr	r3, [r3, #8]
     c9e:	2002      	movs	r0, #2
     ca0:	4798      	blx	r3
     ca2:	bd10      	pop	{r4, pc}
     ca4:	20000034 	.word	0x20000034

00000ca8 <SERCOM3_Handler>:
     ca8:	b510      	push	{r4, lr}
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <SERCOM3_Handler+0xc>)
     cac:	68db      	ldr	r3, [r3, #12]
     cae:	2003      	movs	r0, #3
     cb0:	4798      	blx	r3
     cb2:	bd10      	pop	{r4, pc}
     cb4:	20000034 	.word	0x20000034

00000cb8 <SERCOM4_Handler>:
     cb8:	b510      	push	{r4, lr}
     cba:	4b02      	ldr	r3, [pc, #8]	; (cc4 <SERCOM4_Handler+0xc>)
     cbc:	691b      	ldr	r3, [r3, #16]
     cbe:	2004      	movs	r0, #4
     cc0:	4798      	blx	r3
     cc2:	bd10      	pop	{r4, pc}
     cc4:	20000034 	.word	0x20000034

00000cc8 <SERCOM5_Handler>:
     cc8:	b510      	push	{r4, lr}
     cca:	4b02      	ldr	r3, [pc, #8]	; (cd4 <SERCOM5_Handler+0xc>)
     ccc:	695b      	ldr	r3, [r3, #20]
     cce:	2005      	movs	r0, #5
     cd0:	4798      	blx	r3
     cd2:	bd10      	pop	{r4, pc}
     cd4:	20000034 	.word	0x20000034

00000cd8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     cd8:	b510      	push	{r4, lr}
	switch (clock_source) {
     cda:	2808      	cmp	r0, #8
     cdc:	d803      	bhi.n	ce6 <system_clock_source_get_hz+0xe>
     cde:	0080      	lsls	r0, r0, #2
     ce0:	4b1c      	ldr	r3, [pc, #112]	; (d54 <system_clock_source_get_hz+0x7c>)
     ce2:	581b      	ldr	r3, [r3, r0]
     ce4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     ce6:	2000      	movs	r0, #0
     ce8:	e032      	b.n	d50 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     cea:	4b1b      	ldr	r3, [pc, #108]	; (d58 <system_clock_source_get_hz+0x80>)
     cec:	6918      	ldr	r0, [r3, #16]
     cee:	e02f      	b.n	d50 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     cf0:	4b1a      	ldr	r3, [pc, #104]	; (d5c <system_clock_source_get_hz+0x84>)
     cf2:	6a1b      	ldr	r3, [r3, #32]
     cf4:	059b      	lsls	r3, r3, #22
     cf6:	0f9b      	lsrs	r3, r3, #30
     cf8:	4819      	ldr	r0, [pc, #100]	; (d60 <system_clock_source_get_hz+0x88>)
     cfa:	40d8      	lsrs	r0, r3
     cfc:	e028      	b.n	d50 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     cfe:	4b16      	ldr	r3, [pc, #88]	; (d58 <system_clock_source_get_hz+0x80>)
     d00:	6958      	ldr	r0, [r3, #20]
     d02:	e025      	b.n	d50 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     d04:	4b14      	ldr	r3, [pc, #80]	; (d58 <system_clock_source_get_hz+0x80>)
     d06:	681b      	ldr	r3, [r3, #0]
			return 0;
     d08:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     d0a:	079b      	lsls	r3, r3, #30
     d0c:	d520      	bpl.n	d50 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d0e:	4913      	ldr	r1, [pc, #76]	; (d5c <system_clock_source_get_hz+0x84>)
     d10:	2210      	movs	r2, #16
     d12:	68cb      	ldr	r3, [r1, #12]
     d14:	421a      	tst	r2, r3
     d16:	d0fc      	beq.n	d12 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     d18:	4b0f      	ldr	r3, [pc, #60]	; (d58 <system_clock_source_get_hz+0x80>)
     d1a:	681a      	ldr	r2, [r3, #0]
     d1c:	2324      	movs	r3, #36	; 0x24
     d1e:	4013      	ands	r3, r2
     d20:	2b04      	cmp	r3, #4
     d22:	d001      	beq.n	d28 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     d24:	480f      	ldr	r0, [pc, #60]	; (d64 <system_clock_source_get_hz+0x8c>)
     d26:	e013      	b.n	d50 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d28:	2000      	movs	r0, #0
     d2a:	4b0f      	ldr	r3, [pc, #60]	; (d68 <system_clock_source_get_hz+0x90>)
     d2c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     d2e:	4b0a      	ldr	r3, [pc, #40]	; (d58 <system_clock_source_get_hz+0x80>)
     d30:	689b      	ldr	r3, [r3, #8]
     d32:	041b      	lsls	r3, r3, #16
     d34:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d36:	4358      	muls	r0, r3
     d38:	e00a      	b.n	d50 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d3a:	2350      	movs	r3, #80	; 0x50
     d3c:	4a07      	ldr	r2, [pc, #28]	; (d5c <system_clock_source_get_hz+0x84>)
     d3e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d40:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d42:	075b      	lsls	r3, r3, #29
     d44:	d504      	bpl.n	d50 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     d46:	4b04      	ldr	r3, [pc, #16]	; (d58 <system_clock_source_get_hz+0x80>)
     d48:	68d8      	ldr	r0, [r3, #12]
     d4a:	e001      	b.n	d50 <system_clock_source_get_hz+0x78>
		return 32768UL;
     d4c:	2080      	movs	r0, #128	; 0x80
     d4e:	0200      	lsls	r0, r0, #8
	}
}
     d50:	bd10      	pop	{r4, pc}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	00002f8c 	.word	0x00002f8c
     d58:	2000004c 	.word	0x2000004c
     d5c:	40000800 	.word	0x40000800
     d60:	007a1200 	.word	0x007a1200
     d64:	02dc6c00 	.word	0x02dc6c00
     d68:	00001155 	.word	0x00001155

00000d6c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d6c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d6e:	490c      	ldr	r1, [pc, #48]	; (da0 <system_clock_source_osc8m_set_config+0x34>)
     d70:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d72:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d74:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d76:	7840      	ldrb	r0, [r0, #1]
     d78:	2201      	movs	r2, #1
     d7a:	4010      	ands	r0, r2
     d7c:	0180      	lsls	r0, r0, #6
     d7e:	2640      	movs	r6, #64	; 0x40
     d80:	43b3      	bics	r3, r6
     d82:	4303      	orrs	r3, r0
     d84:	402a      	ands	r2, r5
     d86:	01d2      	lsls	r2, r2, #7
     d88:	2080      	movs	r0, #128	; 0x80
     d8a:	4383      	bics	r3, r0
     d8c:	4313      	orrs	r3, r2
     d8e:	2203      	movs	r2, #3
     d90:	4022      	ands	r2, r4
     d92:	0212      	lsls	r2, r2, #8
     d94:	4803      	ldr	r0, [pc, #12]	; (da4 <system_clock_source_osc8m_set_config+0x38>)
     d96:	4003      	ands	r3, r0
     d98:	4313      	orrs	r3, r2
     d9a:	620b      	str	r3, [r1, #32]
}
     d9c:	bd70      	pop	{r4, r5, r6, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	40000800 	.word	0x40000800
     da4:	fffffcff 	.word	0xfffffcff

00000da8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     da8:	2808      	cmp	r0, #8
     daa:	d803      	bhi.n	db4 <system_clock_source_enable+0xc>
     dac:	0080      	lsls	r0, r0, #2
     dae:	4b25      	ldr	r3, [pc, #148]	; (e44 <system_clock_source_enable+0x9c>)
     db0:	581b      	ldr	r3, [r3, r0]
     db2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     db4:	2017      	movs	r0, #23
     db6:	e044      	b.n	e42 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     db8:	4a23      	ldr	r2, [pc, #140]	; (e48 <system_clock_source_enable+0xa0>)
     dba:	6a13      	ldr	r3, [r2, #32]
     dbc:	2102      	movs	r1, #2
     dbe:	430b      	orrs	r3, r1
     dc0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     dc2:	2000      	movs	r0, #0
     dc4:	e03d      	b.n	e42 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     dc6:	4a20      	ldr	r2, [pc, #128]	; (e48 <system_clock_source_enable+0xa0>)
     dc8:	6993      	ldr	r3, [r2, #24]
     dca:	2102      	movs	r1, #2
     dcc:	430b      	orrs	r3, r1
     dce:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     dd0:	2000      	movs	r0, #0
		break;
     dd2:	e036      	b.n	e42 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     dd4:	4a1c      	ldr	r2, [pc, #112]	; (e48 <system_clock_source_enable+0xa0>)
     dd6:	8a13      	ldrh	r3, [r2, #16]
     dd8:	2102      	movs	r1, #2
     dda:	430b      	orrs	r3, r1
     ddc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     dde:	2000      	movs	r0, #0
		break;
     de0:	e02f      	b.n	e42 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     de2:	4a19      	ldr	r2, [pc, #100]	; (e48 <system_clock_source_enable+0xa0>)
     de4:	8a93      	ldrh	r3, [r2, #20]
     de6:	2102      	movs	r1, #2
     de8:	430b      	orrs	r3, r1
     dea:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     dec:	2000      	movs	r0, #0
		break;
     dee:	e028      	b.n	e42 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     df0:	4916      	ldr	r1, [pc, #88]	; (e4c <system_clock_source_enable+0xa4>)
     df2:	680b      	ldr	r3, [r1, #0]
     df4:	2202      	movs	r2, #2
     df6:	4313      	orrs	r3, r2
     df8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     dfa:	4b13      	ldr	r3, [pc, #76]	; (e48 <system_clock_source_enable+0xa0>)
     dfc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dfe:	0019      	movs	r1, r3
     e00:	320e      	adds	r2, #14
     e02:	68cb      	ldr	r3, [r1, #12]
     e04:	421a      	tst	r2, r3
     e06:	d0fc      	beq.n	e02 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     e08:	4a10      	ldr	r2, [pc, #64]	; (e4c <system_clock_source_enable+0xa4>)
     e0a:	6891      	ldr	r1, [r2, #8]
     e0c:	4b0e      	ldr	r3, [pc, #56]	; (e48 <system_clock_source_enable+0xa0>)
     e0e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     e10:	6852      	ldr	r2, [r2, #4]
     e12:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     e14:	2200      	movs	r2, #0
     e16:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e18:	0019      	movs	r1, r3
     e1a:	3210      	adds	r2, #16
     e1c:	68cb      	ldr	r3, [r1, #12]
     e1e:	421a      	tst	r2, r3
     e20:	d0fc      	beq.n	e1c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e22:	4b0a      	ldr	r3, [pc, #40]	; (e4c <system_clock_source_enable+0xa4>)
     e24:	681b      	ldr	r3, [r3, #0]
     e26:	b29b      	uxth	r3, r3
     e28:	4a07      	ldr	r2, [pc, #28]	; (e48 <system_clock_source_enable+0xa0>)
     e2a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     e2c:	2000      	movs	r0, #0
     e2e:	e008      	b.n	e42 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     e30:	4905      	ldr	r1, [pc, #20]	; (e48 <system_clock_source_enable+0xa0>)
     e32:	2244      	movs	r2, #68	; 0x44
     e34:	5c8b      	ldrb	r3, [r1, r2]
     e36:	2002      	movs	r0, #2
     e38:	4303      	orrs	r3, r0
     e3a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     e3c:	2000      	movs	r0, #0
		break;
     e3e:	e000      	b.n	e42 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e40:	2000      	movs	r0, #0
}
     e42:	4770      	bx	lr
     e44:	00002fb0 	.word	0x00002fb0
     e48:	40000800 	.word	0x40000800
     e4c:	2000004c 	.word	0x2000004c

00000e50 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e50:	b5f0      	push	{r4, r5, r6, r7, lr}
     e52:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e54:	22c2      	movs	r2, #194	; 0xc2
     e56:	00d2      	lsls	r2, r2, #3
     e58:	4b20      	ldr	r3, [pc, #128]	; (edc <system_clock_init+0x8c>)
     e5a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e5c:	4a20      	ldr	r2, [pc, #128]	; (ee0 <system_clock_init+0x90>)
     e5e:	6853      	ldr	r3, [r2, #4]
     e60:	211e      	movs	r1, #30
     e62:	438b      	bics	r3, r1
     e64:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     e66:	2302      	movs	r3, #2
     e68:	466a      	mov	r2, sp
     e6a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e6c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e6e:	4d1d      	ldr	r5, [pc, #116]	; (ee4 <system_clock_init+0x94>)
     e70:	b2e0      	uxtb	r0, r4
     e72:	4669      	mov	r1, sp
     e74:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e76:	3401      	adds	r4, #1
     e78:	2c25      	cmp	r4, #37	; 0x25
     e7a:	d1f9      	bne.n	e70 <system_clock_init+0x20>
	config->run_in_standby  = false;
     e7c:	a803      	add	r0, sp, #12
     e7e:	2400      	movs	r4, #0
     e80:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     e82:	2501      	movs	r5, #1
     e84:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e86:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e88:	4b17      	ldr	r3, [pc, #92]	; (ee8 <system_clock_init+0x98>)
     e8a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e8c:	2006      	movs	r0, #6
     e8e:	4b17      	ldr	r3, [pc, #92]	; (eec <system_clock_init+0x9c>)
     e90:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e92:	4b17      	ldr	r3, [pc, #92]	; (ef0 <system_clock_init+0xa0>)
     e94:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e96:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     e98:	466b      	mov	r3, sp
     e9a:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     e9c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     e9e:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     ea0:	2304      	movs	r3, #4
     ea2:	466a      	mov	r2, sp
     ea4:	7013      	strb	r3, [r2, #0]
     ea6:	4669      	mov	r1, sp
     ea8:	2001      	movs	r0, #1
     eaa:	4f12      	ldr	r7, [pc, #72]	; (ef4 <system_clock_init+0xa4>)
     eac:	47b8      	blx	r7
     eae:	2001      	movs	r0, #1
     eb0:	4e11      	ldr	r6, [pc, #68]	; (ef8 <system_clock_init+0xa8>)
     eb2:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
     eb4:	4b11      	ldr	r3, [pc, #68]	; (efc <system_clock_init+0xac>)
     eb6:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     eb8:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     eba:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     ebc:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     ebe:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     ec0:	466b      	mov	r3, sp
     ec2:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     ec4:	2306      	movs	r3, #6
     ec6:	466a      	mov	r2, sp
     ec8:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     eca:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     ecc:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     ece:	4669      	mov	r1, sp
     ed0:	2000      	movs	r0, #0
     ed2:	47b8      	blx	r7
     ed4:	2000      	movs	r0, #0
     ed6:	47b0      	blx	r6
#endif
}
     ed8:	b005      	add	sp, #20
     eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
     edc:	40000800 	.word	0x40000800
     ee0:	41004000 	.word	0x41004000
     ee4:	00001139 	.word	0x00001139
     ee8:	00000d6d 	.word	0x00000d6d
     eec:	00000da9 	.word	0x00000da9
     ef0:	00000f01 	.word	0x00000f01
     ef4:	00000f25 	.word	0x00000f25
     ef8:	00000fdd 	.word	0x00000fdd
     efc:	40000400 	.word	0x40000400

00000f00 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     f00:	4a06      	ldr	r2, [pc, #24]	; (f1c <system_gclk_init+0x1c>)
     f02:	6993      	ldr	r3, [r2, #24]
     f04:	2108      	movs	r1, #8
     f06:	430b      	orrs	r3, r1
     f08:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f0a:	2201      	movs	r2, #1
     f0c:	4b04      	ldr	r3, [pc, #16]	; (f20 <system_gclk_init+0x20>)
     f0e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     f10:	0019      	movs	r1, r3
     f12:	780b      	ldrb	r3, [r1, #0]
     f14:	4213      	tst	r3, r2
     f16:	d1fc      	bne.n	f12 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     f18:	4770      	bx	lr
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	40000400 	.word	0x40000400
     f20:	40000c00 	.word	0x40000c00

00000f24 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     f24:	b570      	push	{r4, r5, r6, lr}
     f26:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     f28:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f2a:	780d      	ldrb	r5, [r1, #0]
     f2c:	022d      	lsls	r5, r5, #8
     f2e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     f30:	784b      	ldrb	r3, [r1, #1]
     f32:	2b00      	cmp	r3, #0
     f34:	d002      	beq.n	f3c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     f36:	2380      	movs	r3, #128	; 0x80
     f38:	02db      	lsls	r3, r3, #11
     f3a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     f3c:	7a4b      	ldrb	r3, [r1, #9]
     f3e:	2b00      	cmp	r3, #0
     f40:	d002      	beq.n	f48 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     f42:	2380      	movs	r3, #128	; 0x80
     f44:	031b      	lsls	r3, r3, #12
     f46:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     f48:	6848      	ldr	r0, [r1, #4]
     f4a:	2801      	cmp	r0, #1
     f4c:	d910      	bls.n	f70 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f4e:	1e43      	subs	r3, r0, #1
     f50:	4218      	tst	r0, r3
     f52:	d134      	bne.n	fbe <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f54:	2802      	cmp	r0, #2
     f56:	d930      	bls.n	fba <system_gclk_gen_set_config+0x96>
     f58:	2302      	movs	r3, #2
     f5a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     f5c:	3201      	adds	r2, #1
						mask <<= 1) {
     f5e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f60:	4298      	cmp	r0, r3
     f62:	d8fb      	bhi.n	f5c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f64:	0212      	lsls	r2, r2, #8
     f66:	4332      	orrs	r2, r6
     f68:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f6a:	2380      	movs	r3, #128	; 0x80
     f6c:	035b      	lsls	r3, r3, #13
     f6e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f70:	7a0b      	ldrb	r3, [r1, #8]
     f72:	2b00      	cmp	r3, #0
     f74:	d002      	beq.n	f7c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f76:	2380      	movs	r3, #128	; 0x80
     f78:	039b      	lsls	r3, r3, #14
     f7a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f7c:	4a13      	ldr	r2, [pc, #76]	; (fcc <system_gclk_gen_set_config+0xa8>)
     f7e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     f80:	b25b      	sxtb	r3, r3
     f82:	2b00      	cmp	r3, #0
     f84:	dbfb      	blt.n	f7e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f86:	4b12      	ldr	r3, [pc, #72]	; (fd0 <system_gclk_gen_set_config+0xac>)
     f88:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f8a:	4b12      	ldr	r3, [pc, #72]	; (fd4 <system_gclk_gen_set_config+0xb0>)
     f8c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f8e:	4a0f      	ldr	r2, [pc, #60]	; (fcc <system_gclk_gen_set_config+0xa8>)
     f90:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f92:	b25b      	sxtb	r3, r3
     f94:	2b00      	cmp	r3, #0
     f96:	dbfb      	blt.n	f90 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f98:	4b0c      	ldr	r3, [pc, #48]	; (fcc <system_gclk_gen_set_config+0xa8>)
     f9a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f9c:	001a      	movs	r2, r3
     f9e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     fa0:	b25b      	sxtb	r3, r3
     fa2:	2b00      	cmp	r3, #0
     fa4:	dbfb      	blt.n	f9e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     fa6:	4a09      	ldr	r2, [pc, #36]	; (fcc <system_gclk_gen_set_config+0xa8>)
     fa8:	6853      	ldr	r3, [r2, #4]
     faa:	2180      	movs	r1, #128	; 0x80
     fac:	0249      	lsls	r1, r1, #9
     fae:	400b      	ands	r3, r1
     fb0:	431d      	orrs	r5, r3
     fb2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     fb4:	4b08      	ldr	r3, [pc, #32]	; (fd8 <system_gclk_gen_set_config+0xb4>)
     fb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fb8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     fba:	2200      	movs	r2, #0
     fbc:	e7d2      	b.n	f64 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     fbe:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     fc0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     fc2:	2380      	movs	r3, #128	; 0x80
     fc4:	029b      	lsls	r3, r3, #10
     fc6:	431d      	orrs	r5, r3
     fc8:	e7d2      	b.n	f70 <system_gclk_gen_set_config+0x4c>
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	40000c00 	.word	0x40000c00
     fd0:	00000181 	.word	0x00000181
     fd4:	40000c08 	.word	0x40000c08
     fd8:	000001c1 	.word	0x000001c1

00000fdc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     fdc:	b510      	push	{r4, lr}
     fde:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fe0:	4a0b      	ldr	r2, [pc, #44]	; (1010 <system_gclk_gen_enable+0x34>)
     fe2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fe4:	b25b      	sxtb	r3, r3
     fe6:	2b00      	cmp	r3, #0
     fe8:	dbfb      	blt.n	fe2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     fea:	4b0a      	ldr	r3, [pc, #40]	; (1014 <system_gclk_gen_enable+0x38>)
     fec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fee:	4b0a      	ldr	r3, [pc, #40]	; (1018 <system_gclk_gen_enable+0x3c>)
     ff0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ff2:	4a07      	ldr	r2, [pc, #28]	; (1010 <system_gclk_gen_enable+0x34>)
     ff4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ff6:	b25b      	sxtb	r3, r3
     ff8:	2b00      	cmp	r3, #0
     ffa:	dbfb      	blt.n	ff4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     ffc:	4a04      	ldr	r2, [pc, #16]	; (1010 <system_gclk_gen_enable+0x34>)
     ffe:	6851      	ldr	r1, [r2, #4]
    1000:	2380      	movs	r3, #128	; 0x80
    1002:	025b      	lsls	r3, r3, #9
    1004:	430b      	orrs	r3, r1
    1006:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1008:	4b04      	ldr	r3, [pc, #16]	; (101c <system_gclk_gen_enable+0x40>)
    100a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    100c:	bd10      	pop	{r4, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	40000c00 	.word	0x40000c00
    1014:	00000181 	.word	0x00000181
    1018:	40000c04 	.word	0x40000c04
    101c:	000001c1 	.word	0x000001c1

00001020 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1020:	b570      	push	{r4, r5, r6, lr}
    1022:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1024:	4a1a      	ldr	r2, [pc, #104]	; (1090 <system_gclk_gen_get_hz+0x70>)
    1026:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1028:	b25b      	sxtb	r3, r3
    102a:	2b00      	cmp	r3, #0
    102c:	dbfb      	blt.n	1026 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    102e:	4b19      	ldr	r3, [pc, #100]	; (1094 <system_gclk_gen_get_hz+0x74>)
    1030:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1032:	4b19      	ldr	r3, [pc, #100]	; (1098 <system_gclk_gen_get_hz+0x78>)
    1034:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1036:	4a16      	ldr	r2, [pc, #88]	; (1090 <system_gclk_gen_get_hz+0x70>)
    1038:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    103a:	b25b      	sxtb	r3, r3
    103c:	2b00      	cmp	r3, #0
    103e:	dbfb      	blt.n	1038 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1040:	4e13      	ldr	r6, [pc, #76]	; (1090 <system_gclk_gen_get_hz+0x70>)
    1042:	6870      	ldr	r0, [r6, #4]
    1044:	04c0      	lsls	r0, r0, #19
    1046:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1048:	4b14      	ldr	r3, [pc, #80]	; (109c <system_gclk_gen_get_hz+0x7c>)
    104a:	4798      	blx	r3
    104c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    104e:	4b12      	ldr	r3, [pc, #72]	; (1098 <system_gclk_gen_get_hz+0x78>)
    1050:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1052:	6876      	ldr	r6, [r6, #4]
    1054:	02f6      	lsls	r6, r6, #11
    1056:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1058:	4b11      	ldr	r3, [pc, #68]	; (10a0 <system_gclk_gen_get_hz+0x80>)
    105a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    105c:	4a0c      	ldr	r2, [pc, #48]	; (1090 <system_gclk_gen_get_hz+0x70>)
    105e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1060:	b25b      	sxtb	r3, r3
    1062:	2b00      	cmp	r3, #0
    1064:	dbfb      	blt.n	105e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1066:	4b0a      	ldr	r3, [pc, #40]	; (1090 <system_gclk_gen_get_hz+0x70>)
    1068:	689c      	ldr	r4, [r3, #8]
    106a:	0224      	lsls	r4, r4, #8
    106c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    106e:	4b0d      	ldr	r3, [pc, #52]	; (10a4 <system_gclk_gen_get_hz+0x84>)
    1070:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1072:	2e00      	cmp	r6, #0
    1074:	d107      	bne.n	1086 <system_gclk_gen_get_hz+0x66>
    1076:	2c01      	cmp	r4, #1
    1078:	d907      	bls.n	108a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    107a:	0021      	movs	r1, r4
    107c:	0028      	movs	r0, r5
    107e:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <system_gclk_gen_get_hz+0x88>)
    1080:	4798      	blx	r3
    1082:	0005      	movs	r5, r0
    1084:	e001      	b.n	108a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1086:	3401      	adds	r4, #1
    1088:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    108a:	0028      	movs	r0, r5
    108c:	bd70      	pop	{r4, r5, r6, pc}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	40000c00 	.word	0x40000c00
    1094:	00000181 	.word	0x00000181
    1098:	40000c04 	.word	0x40000c04
    109c:	00000cd9 	.word	0x00000cd9
    10a0:	40000c08 	.word	0x40000c08
    10a4:	000001c1 	.word	0x000001c1
    10a8:	0000154d 	.word	0x0000154d

000010ac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    10ac:	b510      	push	{r4, lr}
    10ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10b0:	4b06      	ldr	r3, [pc, #24]	; (10cc <system_gclk_chan_enable+0x20>)
    10b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10b4:	4b06      	ldr	r3, [pc, #24]	; (10d0 <system_gclk_chan_enable+0x24>)
    10b6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    10b8:	4a06      	ldr	r2, [pc, #24]	; (10d4 <system_gclk_chan_enable+0x28>)
    10ba:	8853      	ldrh	r3, [r2, #2]
    10bc:	2180      	movs	r1, #128	; 0x80
    10be:	01c9      	lsls	r1, r1, #7
    10c0:	430b      	orrs	r3, r1
    10c2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    10c4:	4b04      	ldr	r3, [pc, #16]	; (10d8 <system_gclk_chan_enable+0x2c>)
    10c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10c8:	bd10      	pop	{r4, pc}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	00000181 	.word	0x00000181
    10d0:	40000c02 	.word	0x40000c02
    10d4:	40000c00 	.word	0x40000c00
    10d8:	000001c1 	.word	0x000001c1

000010dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    10dc:	b510      	push	{r4, lr}
    10de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10e0:	4b0f      	ldr	r3, [pc, #60]	; (1120 <system_gclk_chan_disable+0x44>)
    10e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10e4:	4b0f      	ldr	r3, [pc, #60]	; (1124 <system_gclk_chan_disable+0x48>)
    10e6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    10e8:	4a0f      	ldr	r2, [pc, #60]	; (1128 <system_gclk_chan_disable+0x4c>)
    10ea:	8853      	ldrh	r3, [r2, #2]
    10ec:	051b      	lsls	r3, r3, #20
    10ee:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    10f0:	8853      	ldrh	r3, [r2, #2]
    10f2:	490e      	ldr	r1, [pc, #56]	; (112c <system_gclk_chan_disable+0x50>)
    10f4:	400b      	ands	r3, r1
    10f6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    10f8:	8853      	ldrh	r3, [r2, #2]
    10fa:	490d      	ldr	r1, [pc, #52]	; (1130 <system_gclk_chan_disable+0x54>)
    10fc:	400b      	ands	r3, r1
    10fe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1100:	0011      	movs	r1, r2
    1102:	2280      	movs	r2, #128	; 0x80
    1104:	01d2      	lsls	r2, r2, #7
    1106:	884b      	ldrh	r3, [r1, #2]
    1108:	4213      	tst	r3, r2
    110a:	d1fc      	bne.n	1106 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    110c:	4906      	ldr	r1, [pc, #24]	; (1128 <system_gclk_chan_disable+0x4c>)
    110e:	884a      	ldrh	r2, [r1, #2]
    1110:	0203      	lsls	r3, r0, #8
    1112:	4806      	ldr	r0, [pc, #24]	; (112c <system_gclk_chan_disable+0x50>)
    1114:	4002      	ands	r2, r0
    1116:	4313      	orrs	r3, r2
    1118:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    111a:	4b06      	ldr	r3, [pc, #24]	; (1134 <system_gclk_chan_disable+0x58>)
    111c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    111e:	bd10      	pop	{r4, pc}
    1120:	00000181 	.word	0x00000181
    1124:	40000c02 	.word	0x40000c02
    1128:	40000c00 	.word	0x40000c00
    112c:	fffff0ff 	.word	0xfffff0ff
    1130:	ffffbfff 	.word	0xffffbfff
    1134:	000001c1 	.word	0x000001c1

00001138 <system_gclk_chan_set_config>:
{
    1138:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    113a:	780c      	ldrb	r4, [r1, #0]
    113c:	0224      	lsls	r4, r4, #8
    113e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1140:	4b02      	ldr	r3, [pc, #8]	; (114c <system_gclk_chan_set_config+0x14>)
    1142:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1144:	b2a4      	uxth	r4, r4
    1146:	4b02      	ldr	r3, [pc, #8]	; (1150 <system_gclk_chan_set_config+0x18>)
    1148:	805c      	strh	r4, [r3, #2]
}
    114a:	bd10      	pop	{r4, pc}
    114c:	000010dd 	.word	0x000010dd
    1150:	40000c00 	.word	0x40000c00

00001154 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1154:	b510      	push	{r4, lr}
    1156:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1158:	4b06      	ldr	r3, [pc, #24]	; (1174 <system_gclk_chan_get_hz+0x20>)
    115a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    115c:	4b06      	ldr	r3, [pc, #24]	; (1178 <system_gclk_chan_get_hz+0x24>)
    115e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1160:	4b06      	ldr	r3, [pc, #24]	; (117c <system_gclk_chan_get_hz+0x28>)
    1162:	885c      	ldrh	r4, [r3, #2]
    1164:	0524      	lsls	r4, r4, #20
    1166:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1168:	4b05      	ldr	r3, [pc, #20]	; (1180 <system_gclk_chan_get_hz+0x2c>)
    116a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    116c:	0020      	movs	r0, r4
    116e:	4b05      	ldr	r3, [pc, #20]	; (1184 <system_gclk_chan_get_hz+0x30>)
    1170:	4798      	blx	r3
}
    1172:	bd10      	pop	{r4, pc}
    1174:	00000181 	.word	0x00000181
    1178:	40000c02 	.word	0x40000c02
    117c:	40000c00 	.word	0x40000c00
    1180:	000001c1 	.word	0x000001c1
    1184:	00001021 	.word	0x00001021

00001188 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1188:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    118a:	78d3      	ldrb	r3, [r2, #3]
    118c:	2b00      	cmp	r3, #0
    118e:	d135      	bne.n	11fc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1190:	7813      	ldrb	r3, [r2, #0]
    1192:	2b80      	cmp	r3, #128	; 0x80
    1194:	d029      	beq.n	11ea <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1196:	061b      	lsls	r3, r3, #24
    1198:	2480      	movs	r4, #128	; 0x80
    119a:	0264      	lsls	r4, r4, #9
    119c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    119e:	7854      	ldrb	r4, [r2, #1]
    11a0:	2502      	movs	r5, #2
    11a2:	43ac      	bics	r4, r5
    11a4:	d106      	bne.n	11b4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    11a6:	7894      	ldrb	r4, [r2, #2]
    11a8:	2c00      	cmp	r4, #0
    11aa:	d120      	bne.n	11ee <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    11ac:	2480      	movs	r4, #128	; 0x80
    11ae:	02a4      	lsls	r4, r4, #10
    11b0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    11b2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11b4:	7854      	ldrb	r4, [r2, #1]
    11b6:	3c01      	subs	r4, #1
    11b8:	2c01      	cmp	r4, #1
    11ba:	d91c      	bls.n	11f6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    11bc:	040d      	lsls	r5, r1, #16
    11be:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11c0:	24a0      	movs	r4, #160	; 0xa0
    11c2:	05e4      	lsls	r4, r4, #23
    11c4:	432c      	orrs	r4, r5
    11c6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11c8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    11ca:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11cc:	24d0      	movs	r4, #208	; 0xd0
    11ce:	0624      	lsls	r4, r4, #24
    11d0:	432c      	orrs	r4, r5
    11d2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11d4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    11d6:	78d4      	ldrb	r4, [r2, #3]
    11d8:	2c00      	cmp	r4, #0
    11da:	d122      	bne.n	1222 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    11dc:	035b      	lsls	r3, r3, #13
    11de:	d51c      	bpl.n	121a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    11e0:	7893      	ldrb	r3, [r2, #2]
    11e2:	2b01      	cmp	r3, #1
    11e4:	d01e      	beq.n	1224 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    11e6:	6141      	str	r1, [r0, #20]
    11e8:	e017      	b.n	121a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    11ea:	2300      	movs	r3, #0
    11ec:	e7d7      	b.n	119e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    11ee:	24c0      	movs	r4, #192	; 0xc0
    11f0:	02e4      	lsls	r4, r4, #11
    11f2:	4323      	orrs	r3, r4
    11f4:	e7dd      	b.n	11b2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    11f6:	4c0d      	ldr	r4, [pc, #52]	; (122c <_system_pinmux_config+0xa4>)
    11f8:	4023      	ands	r3, r4
    11fa:	e7df      	b.n	11bc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    11fc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    11fe:	040c      	lsls	r4, r1, #16
    1200:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1202:	23a0      	movs	r3, #160	; 0xa0
    1204:	05db      	lsls	r3, r3, #23
    1206:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1208:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    120a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    120c:	23d0      	movs	r3, #208	; 0xd0
    120e:	061b      	lsls	r3, r3, #24
    1210:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1212:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1214:	78d3      	ldrb	r3, [r2, #3]
    1216:	2b00      	cmp	r3, #0
    1218:	d103      	bne.n	1222 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    121a:	7853      	ldrb	r3, [r2, #1]
    121c:	3b01      	subs	r3, #1
    121e:	2b01      	cmp	r3, #1
    1220:	d902      	bls.n	1228 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1222:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1224:	6181      	str	r1, [r0, #24]
    1226:	e7f8      	b.n	121a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1228:	6081      	str	r1, [r0, #8]
}
    122a:	e7fa      	b.n	1222 <_system_pinmux_config+0x9a>
    122c:	fffbffff 	.word	0xfffbffff

00001230 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1230:	b510      	push	{r4, lr}
    1232:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1234:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1236:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1238:	2900      	cmp	r1, #0
    123a:	d104      	bne.n	1246 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    123c:	0943      	lsrs	r3, r0, #5
    123e:	01db      	lsls	r3, r3, #7
    1240:	4905      	ldr	r1, [pc, #20]	; (1258 <system_pinmux_pin_set_config+0x28>)
    1242:	468c      	mov	ip, r1
    1244:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1246:	241f      	movs	r4, #31
    1248:	4020      	ands	r0, r4
    124a:	2101      	movs	r1, #1
    124c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    124e:	0018      	movs	r0, r3
    1250:	4b02      	ldr	r3, [pc, #8]	; (125c <system_pinmux_pin_set_config+0x2c>)
    1252:	4798      	blx	r3
}
    1254:	bd10      	pop	{r4, pc}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	41004400 	.word	0x41004400
    125c:	00001189 	.word	0x00001189

00001260 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1260:	4770      	bx	lr
	...

00001264 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1264:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1266:	4b05      	ldr	r3, [pc, #20]	; (127c <system_init+0x18>)
    1268:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    126a:	4b05      	ldr	r3, [pc, #20]	; (1280 <system_init+0x1c>)
    126c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    126e:	4b05      	ldr	r3, [pc, #20]	; (1284 <system_init+0x20>)
    1270:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <system_init+0x24>)
    1274:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1276:	4b05      	ldr	r3, [pc, #20]	; (128c <system_init+0x28>)
    1278:	4798      	blx	r3
}
    127a:	bd10      	pop	{r4, pc}
    127c:	00000e51 	.word	0x00000e51
    1280:	000001f1 	.word	0x000001f1
    1284:	00001261 	.word	0x00001261
    1288:	00001261 	.word	0x00001261
    128c:	00001261 	.word	0x00001261

00001290 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1290:	e7fe      	b.n	1290 <Dummy_Handler>
	...

00001294 <Reset_Handler>:
{
    1294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1296:	4a2a      	ldr	r2, [pc, #168]	; (1340 <Reset_Handler+0xac>)
    1298:	4b2a      	ldr	r3, [pc, #168]	; (1344 <Reset_Handler+0xb0>)
    129a:	429a      	cmp	r2, r3
    129c:	d011      	beq.n	12c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    129e:	001a      	movs	r2, r3
    12a0:	4b29      	ldr	r3, [pc, #164]	; (1348 <Reset_Handler+0xb4>)
    12a2:	429a      	cmp	r2, r3
    12a4:	d20d      	bcs.n	12c2 <Reset_Handler+0x2e>
    12a6:	4a29      	ldr	r2, [pc, #164]	; (134c <Reset_Handler+0xb8>)
    12a8:	3303      	adds	r3, #3
    12aa:	1a9b      	subs	r3, r3, r2
    12ac:	089b      	lsrs	r3, r3, #2
    12ae:	3301      	adds	r3, #1
    12b0:	009b      	lsls	r3, r3, #2
    12b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    12b4:	4823      	ldr	r0, [pc, #140]	; (1344 <Reset_Handler+0xb0>)
    12b6:	4922      	ldr	r1, [pc, #136]	; (1340 <Reset_Handler+0xac>)
    12b8:	588c      	ldr	r4, [r1, r2]
    12ba:	5084      	str	r4, [r0, r2]
    12bc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    12be:	429a      	cmp	r2, r3
    12c0:	d1fa      	bne.n	12b8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    12c2:	4a23      	ldr	r2, [pc, #140]	; (1350 <Reset_Handler+0xbc>)
    12c4:	4b23      	ldr	r3, [pc, #140]	; (1354 <Reset_Handler+0xc0>)
    12c6:	429a      	cmp	r2, r3
    12c8:	d20a      	bcs.n	12e0 <Reset_Handler+0x4c>
    12ca:	43d3      	mvns	r3, r2
    12cc:	4921      	ldr	r1, [pc, #132]	; (1354 <Reset_Handler+0xc0>)
    12ce:	185b      	adds	r3, r3, r1
    12d0:	2103      	movs	r1, #3
    12d2:	438b      	bics	r3, r1
    12d4:	3304      	adds	r3, #4
    12d6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    12d8:	2100      	movs	r1, #0
    12da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    12dc:	4293      	cmp	r3, r2
    12de:	d1fc      	bne.n	12da <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    12e0:	4a1d      	ldr	r2, [pc, #116]	; (1358 <Reset_Handler+0xc4>)
    12e2:	21ff      	movs	r1, #255	; 0xff
    12e4:	4b1d      	ldr	r3, [pc, #116]	; (135c <Reset_Handler+0xc8>)
    12e6:	438b      	bics	r3, r1
    12e8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    12ea:	39fd      	subs	r1, #253	; 0xfd
    12ec:	2390      	movs	r3, #144	; 0x90
    12ee:	005b      	lsls	r3, r3, #1
    12f0:	4a1b      	ldr	r2, [pc, #108]	; (1360 <Reset_Handler+0xcc>)
    12f2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    12f4:	4a1b      	ldr	r2, [pc, #108]	; (1364 <Reset_Handler+0xd0>)
    12f6:	78d3      	ldrb	r3, [r2, #3]
    12f8:	2503      	movs	r5, #3
    12fa:	43ab      	bics	r3, r5
    12fc:	2402      	movs	r4, #2
    12fe:	4323      	orrs	r3, r4
    1300:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1302:	78d3      	ldrb	r3, [r2, #3]
    1304:	270c      	movs	r7, #12
    1306:	43bb      	bics	r3, r7
    1308:	2608      	movs	r6, #8
    130a:	4333      	orrs	r3, r6
    130c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    130e:	4b16      	ldr	r3, [pc, #88]	; (1368 <Reset_Handler+0xd4>)
    1310:	7b98      	ldrb	r0, [r3, #14]
    1312:	2230      	movs	r2, #48	; 0x30
    1314:	4390      	bics	r0, r2
    1316:	2220      	movs	r2, #32
    1318:	4310      	orrs	r0, r2
    131a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    131c:	7b99      	ldrb	r1, [r3, #14]
    131e:	43b9      	bics	r1, r7
    1320:	4331      	orrs	r1, r6
    1322:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1324:	7b9a      	ldrb	r2, [r3, #14]
    1326:	43aa      	bics	r2, r5
    1328:	4322      	orrs	r2, r4
    132a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    132c:	4a0f      	ldr	r2, [pc, #60]	; (136c <Reset_Handler+0xd8>)
    132e:	6853      	ldr	r3, [r2, #4]
    1330:	2180      	movs	r1, #128	; 0x80
    1332:	430b      	orrs	r3, r1
    1334:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1336:	4b0e      	ldr	r3, [pc, #56]	; (1370 <Reset_Handler+0xdc>)
    1338:	4798      	blx	r3
        main();
    133a:	4b0e      	ldr	r3, [pc, #56]	; (1374 <Reset_Handler+0xe0>)
    133c:	4798      	blx	r3
    133e:	e7fe      	b.n	133e <Reset_Handler+0xaa>
    1340:	00003074 	.word	0x00003074
    1344:	20000000 	.word	0x20000000
    1348:	2000000c 	.word	0x2000000c
    134c:	20000004 	.word	0x20000004
    1350:	2000000c 	.word	0x2000000c
    1354:	200000dc 	.word	0x200000dc
    1358:	e000ed00 	.word	0xe000ed00
    135c:	00000000 	.word	0x00000000
    1360:	41007000 	.word	0x41007000
    1364:	41005000 	.word	0x41005000
    1368:	41004800 	.word	0x41004800
    136c:	41004000 	.word	0x41004000
    1370:	00002f2d 	.word	0x00002f2d
    1374:	00001455 	.word	0x00001455

00001378 <i2c_write_complete_callback>:

void i2c_write_complete_callback(
  struct i2c_master_module *
  const module) {

}
    1378:	4770      	bx	lr

0000137a <i2c_read_complete_callback>:

void i2c_read_complete_callback(
  struct i2c_master_module *
  const module) {
}
    137a:	4770      	bx	lr

0000137c <configure_i2c>:

void configure_i2c(void) {
    137c:	b530      	push	{r4, r5, lr}
    137e:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1380:	ab01      	add	r3, sp, #4
    1382:	2264      	movs	r2, #100	; 0x64
    1384:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1386:	4a21      	ldr	r2, [pc, #132]	; (140c <configure_i2c+0x90>)
    1388:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    138a:	2200      	movs	r2, #0
    138c:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    138e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1390:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1392:	2180      	movs	r1, #128	; 0x80
    1394:	0389      	lsls	r1, r1, #14
    1396:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1398:	2101      	movs	r1, #1
    139a:	4249      	negs	r1, r1
    139c:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    139e:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    13a0:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    13a2:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    13a4:	3125      	adds	r1, #37	; 0x25
    13a6:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    13a8:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    13aa:	3108      	adds	r1, #8
    13ac:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    13ae:	3101      	adds	r1, #1
    13b0:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    13b2:	3101      	adds	r1, #1
    13b4:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    13b6:	32d7      	adds	r2, #215	; 0xd7
    13b8:	861a      	strh	r2, [r3, #48]	; 0x30
  config_i2c_master.pinmux_pad0 = CONF_MASTER_SDA_PINMUX;
  config_i2c_master.pinmux_pad1 = CONF_MASTER_SCK_PINMUX;
  #endif


  while (i2c_master_init( & i2c_master_instance, CONF_I2C_MASTER_MODULE, & config_i2c_master) !=
    13ba:	4d15      	ldr	r5, [pc, #84]	; (1410 <configure_i2c+0x94>)
    13bc:	4c15      	ldr	r4, [pc, #84]	; (1414 <configure_i2c+0x98>)
    13be:	aa01      	add	r2, sp, #4
    13c0:	4915      	ldr	r1, [pc, #84]	; (1418 <configure_i2c+0x9c>)
    13c2:	0028      	movs	r0, r5
    13c4:	47a0      	blx	r4
    13c6:	2800      	cmp	r0, #0
    13c8:	d1f9      	bne.n	13be <configure_i2c+0x42>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13ca:	4b11      	ldr	r3, [pc, #68]	; (1410 <configure_i2c+0x94>)
    13cc:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    13ce:	2207      	movs	r2, #7
    13d0:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    13d2:	421a      	tst	r2, r3
    13d4:	d1fc      	bne.n	13d0 <configure_i2c+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    13d6:	6823      	ldr	r3, [r4, #0]
    13d8:	2202      	movs	r2, #2
    13da:	4313      	orrs	r3, r2
    13dc:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    13de:	4d0c      	ldr	r5, [pc, #48]	; (1410 <configure_i2c+0x94>)
    13e0:	6828      	ldr	r0, [r5, #0]
    13e2:	4b0e      	ldr	r3, [pc, #56]	; (141c <configure_i2c+0xa0>)
    13e4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    13e6:	231f      	movs	r3, #31
    13e8:	4018      	ands	r0, r3
    13ea:	3b1e      	subs	r3, #30
    13ec:	4083      	lsls	r3, r0
    13ee:	4a0c      	ldr	r2, [pc, #48]	; (1420 <configure_i2c+0xa4>)
    13f0:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    13f2:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    13f4:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    13f6:	2110      	movs	r1, #16
    13f8:	8b62      	ldrh	r2, [r4, #26]
    13fa:	420a      	tst	r2, r1
    13fc:	d104      	bne.n	1408 <configure_i2c+0x8c>
		timeout_counter++;
    13fe:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1400:	4283      	cmp	r3, r0
    1402:	d3f9      	bcc.n	13f8 <configure_i2c+0x7c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1404:	2310      	movs	r3, #16
    1406:	8363      	strh	r3, [r4, #26]
    STATUS_OK);

  i2c_master_enable( & i2c_master_instance);

}
    1408:	b00f      	add	sp, #60	; 0x3c
    140a:	bd30      	pop	{r4, r5, pc}
    140c:	00000d48 	.word	0x00000d48
    1410:	200000a8 	.word	0x200000a8
    1414:	0000024d 	.word	0x0000024d
    1418:	42001000 	.word	0x42001000
    141c:	00000c49 	.word	0x00000c49
    1420:	e000e100 	.word	0xe000e100

00001424 <configure_i2c_callbacks>:



void configure_i2c_callbacks(void) {
    1424:	b570      	push	{r4, r5, r6, lr}

  i2c_master_register_callback( & i2c_master_instance, i2c_write_complete_callback,
    1426:	4c07      	ldr	r4, [pc, #28]	; (1444 <configure_i2c_callbacks+0x20>)
    1428:	2200      	movs	r2, #0
    142a:	4907      	ldr	r1, [pc, #28]	; (1448 <configure_i2c_callbacks+0x24>)
    142c:	0020      	movs	r0, r4
    142e:	4d07      	ldr	r5, [pc, #28]	; (144c <configure_i2c_callbacks+0x28>)
    1430:	47a8      	blx	r5
    I2C_MASTER_CALLBACK_WRITE_COMPLETE);

  i2c_master_register_callback( & i2c_master_instance, i2c_read_complete_callback,
    1432:	2201      	movs	r2, #1
    1434:	4906      	ldr	r1, [pc, #24]	; (1450 <configure_i2c_callbacks+0x2c>)
    1436:	0020      	movs	r0, r4
    1438:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    143a:	7e63      	ldrb	r3, [r4, #25]
    143c:	2201      	movs	r2, #1
    143e:	4313      	orrs	r3, r2
    1440:	7663      	strb	r3, [r4, #25]
    I2C_MASTER_CALLBACK_READ_COMPLETE);
	
  i2c_master_enable_callback( & i2c_master_instance,
    I2C_MASTER_CALLBACK_WRITE_COMPLETE);

}
    1442:	bd70      	pop	{r4, r5, r6, pc}
    1444:	200000a8 	.word	0x200000a8
    1448:	00001379 	.word	0x00001379
    144c:	000007c1 	.word	0x000007c1
    1450:	0000137b 	.word	0x0000137b

00001454 <main>:


int main(void) {
    1454:	b570      	push	{r4, r5, r6, lr}
  system_init();
    1456:	4b30      	ldr	r3, [pc, #192]	; (1518 <main+0xc4>)
    1458:	4798      	blx	r3
  configure_i2c();
    145a:	4b30      	ldr	r3, [pc, #192]	; (151c <main+0xc8>)
    145c:	4798      	blx	r3
  configure_i2c_callbacks();
    145e:	4b30      	ldr	r3, [pc, #192]	; (1520 <main+0xcc>)
    1460:	4798      	blx	r3
  delay_init();
    1462:	4b30      	ldr	r3, [pc, #192]	; (1524 <main+0xd0>)
    1464:	4798      	blx	r3

  wr_packet.address = SLAVE_ADDRESS;
    1466:	4b30      	ldr	r3, [pc, #192]	; (1528 <main+0xd4>)
    1468:	2277      	movs	r2, #119	; 0x77
    146a:	801a      	strh	r2, [r3, #0]
  wr_packet.data_length = 1;
    146c:	2101      	movs	r1, #1
    146e:	8059      	strh	r1, [r3, #2]
  wr_packet.data = wr_buffer;
    1470:	492e      	ldr	r1, [pc, #184]	; (152c <main+0xd8>)
    1472:	6059      	str	r1, [r3, #4]
  rd_packet.address = SLAVE_ADDRESS;
    1474:	4b2e      	ldr	r3, [pc, #184]	; (1530 <main+0xdc>)
    1476:	801a      	strh	r2, [r3, #0]
  //rd_packet.data_length = 2;
  rd_packet.data = rd_buffer;
    1478:	4a2e      	ldr	r2, [pc, #184]	; (1534 <main+0xe0>)
    147a:	605a      	str	r2, [r3, #4]
	return (port_base->IN.reg & pin_mask);
    147c:	4d2e      	ldr	r5, [pc, #184]	; (1538 <main+0xe4>)
	/* Check sanity */
	Assert(module);
	Assert(module->hw);

	/* Return current status code */
	return module->status;
    147e:	2425      	movs	r4, #37	; 0x25
      //while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);

      wr_buffer[0] = 0xF4;
      i2c_master_write_packet_job( & i2c_master_instance, & wr_packet);
      while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
      rd_packet.data_length = 2;
    1480:	2602      	movs	r6, #2
    1482:	2280      	movs	r2, #128	; 0x80
    1484:	0212      	lsls	r2, r2, #8
    1486:	6a2b      	ldr	r3, [r5, #32]
    if (!port_pin_get_input_level(BUTTON_0_PIN)) {
    1488:	4213      	tst	r3, r2
    148a:	d1fc      	bne.n	1486 <main+0x32>
    148c:	2280      	movs	r2, #128	; 0x80
    148e:	0212      	lsls	r2, r2, #8
    1490:	6a2b      	ldr	r3, [r5, #32]
      while (!port_pin_get_input_level(BUTTON_0_PIN)) {}
    1492:	4213      	tst	r3, r2
    1494:	d0fc      	beq.n	1490 <main+0x3c>
      wr_buffer[0] = 0xF4;
    1496:	22f4      	movs	r2, #244	; 0xf4
    1498:	4b24      	ldr	r3, [pc, #144]	; (152c <main+0xd8>)
    149a:	701a      	strb	r2, [r3, #0]
      i2c_master_write_packet_job( & i2c_master_instance, & wr_packet);
    149c:	4922      	ldr	r1, [pc, #136]	; (1528 <main+0xd4>)
    149e:	4827      	ldr	r0, [pc, #156]	; (153c <main+0xe8>)
    14a0:	4b27      	ldr	r3, [pc, #156]	; (1540 <main+0xec>)
    14a2:	4798      	blx	r3
    14a4:	4a25      	ldr	r2, [pc, #148]	; (153c <main+0xe8>)
    14a6:	5d13      	ldrb	r3, [r2, r4]
      while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    14a8:	2b00      	cmp	r3, #0
    14aa:	d1fc      	bne.n	14a6 <main+0x52>
      rd_packet.data_length = 2;
    14ac:	4920      	ldr	r1, [pc, #128]	; (1530 <main+0xdc>)
    14ae:	804e      	strh	r6, [r1, #2]
      i2c_master_read_packet_job( & i2c_master_instance, & rd_packet);
    14b0:	4822      	ldr	r0, [pc, #136]	; (153c <main+0xe8>)
    14b2:	4b24      	ldr	r3, [pc, #144]	; (1544 <main+0xf0>)
    14b4:	4798      	blx	r3
    14b6:	4a21      	ldr	r2, [pc, #132]	; (153c <main+0xe8>)
    14b8:	5d13      	ldrb	r3, [r2, r4]
      while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    14ba:	2b00      	cmp	r3, #0
    14bc:	d1fc      	bne.n	14b8 <main+0x64>
	  
	  
	  wr_buffer[0] = 0x2E;
    14be:	222e      	movs	r2, #46	; 0x2e
    14c0:	4b1a      	ldr	r3, [pc, #104]	; (152c <main+0xd8>)
    14c2:	701a      	strb	r2, [r3, #0]
	  i2c_master_write_packet_job( & i2c_master_instance, & wr_packet);
    14c4:	4918      	ldr	r1, [pc, #96]	; (1528 <main+0xd4>)
    14c6:	481d      	ldr	r0, [pc, #116]	; (153c <main+0xe8>)
    14c8:	4b1d      	ldr	r3, [pc, #116]	; (1540 <main+0xec>)
    14ca:	4798      	blx	r3
    14cc:	4a1b      	ldr	r2, [pc, #108]	; (153c <main+0xe8>)
    14ce:	5d13      	ldrb	r3, [r2, r4]
	  while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    14d0:	2b00      	cmp	r3, #0
    14d2:	d1fc      	bne.n	14ce <main+0x7a>
	  rd_packet.data_length = 2;
    14d4:	4916      	ldr	r1, [pc, #88]	; (1530 <main+0xdc>)
    14d6:	804e      	strh	r6, [r1, #2]
	  i2c_master_read_packet_job( & i2c_master_instance, & rd_packet);
    14d8:	4818      	ldr	r0, [pc, #96]	; (153c <main+0xe8>)
    14da:	4b1a      	ldr	r3, [pc, #104]	; (1544 <main+0xf0>)
    14dc:	4798      	blx	r3
    14de:	4a17      	ldr	r2, [pc, #92]	; (153c <main+0xe8>)
    14e0:	5d13      	ldrb	r3, [r2, r4]
	  while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    14e2:	2b00      	cmp	r3, #0
    14e4:	d1fc      	bne.n	14e0 <main+0x8c>
	  
	  delay_ms(5);
    14e6:	2005      	movs	r0, #5
    14e8:	4b17      	ldr	r3, [pc, #92]	; (1548 <main+0xf4>)
    14ea:	4798      	blx	r3
	  
	  wr_buffer[0] = 0xF6;
    14ec:	22f6      	movs	r2, #246	; 0xf6
    14ee:	4b0f      	ldr	r3, [pc, #60]	; (152c <main+0xd8>)
    14f0:	701a      	strb	r2, [r3, #0]
	  i2c_master_write_packet_job( & i2c_master_instance, & wr_packet);
    14f2:	490d      	ldr	r1, [pc, #52]	; (1528 <main+0xd4>)
    14f4:	4811      	ldr	r0, [pc, #68]	; (153c <main+0xe8>)
    14f6:	4b12      	ldr	r3, [pc, #72]	; (1540 <main+0xec>)
    14f8:	4798      	blx	r3
    14fa:	4a10      	ldr	r2, [pc, #64]	; (153c <main+0xe8>)
    14fc:	5d13      	ldrb	r3, [r2, r4]
	  while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    14fe:	2b00      	cmp	r3, #0
    1500:	d1fc      	bne.n	14fc <main+0xa8>
	  rd_packet.data_length = 2;
    1502:	490b      	ldr	r1, [pc, #44]	; (1530 <main+0xdc>)
    1504:	804e      	strh	r6, [r1, #2]
	  i2c_master_read_packet_job( & i2c_master_instance, & rd_packet);
    1506:	480d      	ldr	r0, [pc, #52]	; (153c <main+0xe8>)
    1508:	4b0e      	ldr	r3, [pc, #56]	; (1544 <main+0xf0>)
    150a:	4798      	blx	r3
    150c:	4a0b      	ldr	r2, [pc, #44]	; (153c <main+0xe8>)
    150e:	5d13      	ldrb	r3, [r2, r4]
	  while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    1510:	2b00      	cmp	r3, #0
    1512:	d1fc      	bne.n	150e <main+0xba>
    1514:	e7b5      	b.n	1482 <main+0x2e>
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	00001265 	.word	0x00001265
    151c:	0000137d 	.word	0x0000137d
    1520:	00001425 	.word	0x00001425
    1524:	00000115 	.word	0x00000115
    1528:	2000009c 	.word	0x2000009c
    152c:	20000074 	.word	0x20000074
    1530:	200000d0 	.word	0x200000d0
    1534:	20000064 	.word	0x20000064
    1538:	41004400 	.word	0x41004400
    153c:	200000a8 	.word	0x200000a8
    1540:	000007fd 	.word	0x000007fd
    1544:	000007d9 	.word	0x000007d9
    1548:	00000155 	.word	0x00000155

0000154c <__udivsi3>:
    154c:	2200      	movs	r2, #0
    154e:	0843      	lsrs	r3, r0, #1
    1550:	428b      	cmp	r3, r1
    1552:	d374      	bcc.n	163e <__udivsi3+0xf2>
    1554:	0903      	lsrs	r3, r0, #4
    1556:	428b      	cmp	r3, r1
    1558:	d35f      	bcc.n	161a <__udivsi3+0xce>
    155a:	0a03      	lsrs	r3, r0, #8
    155c:	428b      	cmp	r3, r1
    155e:	d344      	bcc.n	15ea <__udivsi3+0x9e>
    1560:	0b03      	lsrs	r3, r0, #12
    1562:	428b      	cmp	r3, r1
    1564:	d328      	bcc.n	15b8 <__udivsi3+0x6c>
    1566:	0c03      	lsrs	r3, r0, #16
    1568:	428b      	cmp	r3, r1
    156a:	d30d      	bcc.n	1588 <__udivsi3+0x3c>
    156c:	22ff      	movs	r2, #255	; 0xff
    156e:	0209      	lsls	r1, r1, #8
    1570:	ba12      	rev	r2, r2
    1572:	0c03      	lsrs	r3, r0, #16
    1574:	428b      	cmp	r3, r1
    1576:	d302      	bcc.n	157e <__udivsi3+0x32>
    1578:	1212      	asrs	r2, r2, #8
    157a:	0209      	lsls	r1, r1, #8
    157c:	d065      	beq.n	164a <__udivsi3+0xfe>
    157e:	0b03      	lsrs	r3, r0, #12
    1580:	428b      	cmp	r3, r1
    1582:	d319      	bcc.n	15b8 <__udivsi3+0x6c>
    1584:	e000      	b.n	1588 <__udivsi3+0x3c>
    1586:	0a09      	lsrs	r1, r1, #8
    1588:	0bc3      	lsrs	r3, r0, #15
    158a:	428b      	cmp	r3, r1
    158c:	d301      	bcc.n	1592 <__udivsi3+0x46>
    158e:	03cb      	lsls	r3, r1, #15
    1590:	1ac0      	subs	r0, r0, r3
    1592:	4152      	adcs	r2, r2
    1594:	0b83      	lsrs	r3, r0, #14
    1596:	428b      	cmp	r3, r1
    1598:	d301      	bcc.n	159e <__udivsi3+0x52>
    159a:	038b      	lsls	r3, r1, #14
    159c:	1ac0      	subs	r0, r0, r3
    159e:	4152      	adcs	r2, r2
    15a0:	0b43      	lsrs	r3, r0, #13
    15a2:	428b      	cmp	r3, r1
    15a4:	d301      	bcc.n	15aa <__udivsi3+0x5e>
    15a6:	034b      	lsls	r3, r1, #13
    15a8:	1ac0      	subs	r0, r0, r3
    15aa:	4152      	adcs	r2, r2
    15ac:	0b03      	lsrs	r3, r0, #12
    15ae:	428b      	cmp	r3, r1
    15b0:	d301      	bcc.n	15b6 <__udivsi3+0x6a>
    15b2:	030b      	lsls	r3, r1, #12
    15b4:	1ac0      	subs	r0, r0, r3
    15b6:	4152      	adcs	r2, r2
    15b8:	0ac3      	lsrs	r3, r0, #11
    15ba:	428b      	cmp	r3, r1
    15bc:	d301      	bcc.n	15c2 <__udivsi3+0x76>
    15be:	02cb      	lsls	r3, r1, #11
    15c0:	1ac0      	subs	r0, r0, r3
    15c2:	4152      	adcs	r2, r2
    15c4:	0a83      	lsrs	r3, r0, #10
    15c6:	428b      	cmp	r3, r1
    15c8:	d301      	bcc.n	15ce <__udivsi3+0x82>
    15ca:	028b      	lsls	r3, r1, #10
    15cc:	1ac0      	subs	r0, r0, r3
    15ce:	4152      	adcs	r2, r2
    15d0:	0a43      	lsrs	r3, r0, #9
    15d2:	428b      	cmp	r3, r1
    15d4:	d301      	bcc.n	15da <__udivsi3+0x8e>
    15d6:	024b      	lsls	r3, r1, #9
    15d8:	1ac0      	subs	r0, r0, r3
    15da:	4152      	adcs	r2, r2
    15dc:	0a03      	lsrs	r3, r0, #8
    15de:	428b      	cmp	r3, r1
    15e0:	d301      	bcc.n	15e6 <__udivsi3+0x9a>
    15e2:	020b      	lsls	r3, r1, #8
    15e4:	1ac0      	subs	r0, r0, r3
    15e6:	4152      	adcs	r2, r2
    15e8:	d2cd      	bcs.n	1586 <__udivsi3+0x3a>
    15ea:	09c3      	lsrs	r3, r0, #7
    15ec:	428b      	cmp	r3, r1
    15ee:	d301      	bcc.n	15f4 <__udivsi3+0xa8>
    15f0:	01cb      	lsls	r3, r1, #7
    15f2:	1ac0      	subs	r0, r0, r3
    15f4:	4152      	adcs	r2, r2
    15f6:	0983      	lsrs	r3, r0, #6
    15f8:	428b      	cmp	r3, r1
    15fa:	d301      	bcc.n	1600 <__udivsi3+0xb4>
    15fc:	018b      	lsls	r3, r1, #6
    15fe:	1ac0      	subs	r0, r0, r3
    1600:	4152      	adcs	r2, r2
    1602:	0943      	lsrs	r3, r0, #5
    1604:	428b      	cmp	r3, r1
    1606:	d301      	bcc.n	160c <__udivsi3+0xc0>
    1608:	014b      	lsls	r3, r1, #5
    160a:	1ac0      	subs	r0, r0, r3
    160c:	4152      	adcs	r2, r2
    160e:	0903      	lsrs	r3, r0, #4
    1610:	428b      	cmp	r3, r1
    1612:	d301      	bcc.n	1618 <__udivsi3+0xcc>
    1614:	010b      	lsls	r3, r1, #4
    1616:	1ac0      	subs	r0, r0, r3
    1618:	4152      	adcs	r2, r2
    161a:	08c3      	lsrs	r3, r0, #3
    161c:	428b      	cmp	r3, r1
    161e:	d301      	bcc.n	1624 <__udivsi3+0xd8>
    1620:	00cb      	lsls	r3, r1, #3
    1622:	1ac0      	subs	r0, r0, r3
    1624:	4152      	adcs	r2, r2
    1626:	0883      	lsrs	r3, r0, #2
    1628:	428b      	cmp	r3, r1
    162a:	d301      	bcc.n	1630 <__udivsi3+0xe4>
    162c:	008b      	lsls	r3, r1, #2
    162e:	1ac0      	subs	r0, r0, r3
    1630:	4152      	adcs	r2, r2
    1632:	0843      	lsrs	r3, r0, #1
    1634:	428b      	cmp	r3, r1
    1636:	d301      	bcc.n	163c <__udivsi3+0xf0>
    1638:	004b      	lsls	r3, r1, #1
    163a:	1ac0      	subs	r0, r0, r3
    163c:	4152      	adcs	r2, r2
    163e:	1a41      	subs	r1, r0, r1
    1640:	d200      	bcs.n	1644 <__udivsi3+0xf8>
    1642:	4601      	mov	r1, r0
    1644:	4152      	adcs	r2, r2
    1646:	4610      	mov	r0, r2
    1648:	4770      	bx	lr
    164a:	e7ff      	b.n	164c <__udivsi3+0x100>
    164c:	b501      	push	{r0, lr}
    164e:	2000      	movs	r0, #0
    1650:	f000 f806 	bl	1660 <__aeabi_idiv0>
    1654:	bd02      	pop	{r1, pc}
    1656:	46c0      	nop			; (mov r8, r8)

00001658 <__aeabi_uidivmod>:
    1658:	2900      	cmp	r1, #0
    165a:	d0f7      	beq.n	164c <__udivsi3+0x100>
    165c:	e776      	b.n	154c <__udivsi3>
    165e:	4770      	bx	lr

00001660 <__aeabi_idiv0>:
    1660:	4770      	bx	lr
    1662:	46c0      	nop			; (mov r8, r8)

00001664 <__aeabi_dadd>:
    1664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1666:	4645      	mov	r5, r8
    1668:	46de      	mov	lr, fp
    166a:	4657      	mov	r7, sl
    166c:	464e      	mov	r6, r9
    166e:	030c      	lsls	r4, r1, #12
    1670:	b5e0      	push	{r5, r6, r7, lr}
    1672:	004e      	lsls	r6, r1, #1
    1674:	0fc9      	lsrs	r1, r1, #31
    1676:	4688      	mov	r8, r1
    1678:	000d      	movs	r5, r1
    167a:	0a61      	lsrs	r1, r4, #9
    167c:	0f44      	lsrs	r4, r0, #29
    167e:	430c      	orrs	r4, r1
    1680:	00c7      	lsls	r7, r0, #3
    1682:	0319      	lsls	r1, r3, #12
    1684:	0058      	lsls	r0, r3, #1
    1686:	0fdb      	lsrs	r3, r3, #31
    1688:	469b      	mov	fp, r3
    168a:	0a4b      	lsrs	r3, r1, #9
    168c:	0f51      	lsrs	r1, r2, #29
    168e:	430b      	orrs	r3, r1
    1690:	0d76      	lsrs	r6, r6, #21
    1692:	0d40      	lsrs	r0, r0, #21
    1694:	0019      	movs	r1, r3
    1696:	00d2      	lsls	r2, r2, #3
    1698:	45d8      	cmp	r8, fp
    169a:	d100      	bne.n	169e <__aeabi_dadd+0x3a>
    169c:	e0ae      	b.n	17fc <__aeabi_dadd+0x198>
    169e:	1a35      	subs	r5, r6, r0
    16a0:	2d00      	cmp	r5, #0
    16a2:	dc00      	bgt.n	16a6 <__aeabi_dadd+0x42>
    16a4:	e0f6      	b.n	1894 <__aeabi_dadd+0x230>
    16a6:	2800      	cmp	r0, #0
    16a8:	d10f      	bne.n	16ca <__aeabi_dadd+0x66>
    16aa:	4313      	orrs	r3, r2
    16ac:	d100      	bne.n	16b0 <__aeabi_dadd+0x4c>
    16ae:	e0db      	b.n	1868 <__aeabi_dadd+0x204>
    16b0:	1e6b      	subs	r3, r5, #1
    16b2:	2b00      	cmp	r3, #0
    16b4:	d000      	beq.n	16b8 <__aeabi_dadd+0x54>
    16b6:	e137      	b.n	1928 <__aeabi_dadd+0x2c4>
    16b8:	1aba      	subs	r2, r7, r2
    16ba:	4297      	cmp	r7, r2
    16bc:	41bf      	sbcs	r7, r7
    16be:	1a64      	subs	r4, r4, r1
    16c0:	427f      	negs	r7, r7
    16c2:	1be4      	subs	r4, r4, r7
    16c4:	2601      	movs	r6, #1
    16c6:	0017      	movs	r7, r2
    16c8:	e024      	b.n	1714 <__aeabi_dadd+0xb0>
    16ca:	4bc6      	ldr	r3, [pc, #792]	; (19e4 <__aeabi_dadd+0x380>)
    16cc:	429e      	cmp	r6, r3
    16ce:	d04d      	beq.n	176c <__aeabi_dadd+0x108>
    16d0:	2380      	movs	r3, #128	; 0x80
    16d2:	041b      	lsls	r3, r3, #16
    16d4:	4319      	orrs	r1, r3
    16d6:	2d38      	cmp	r5, #56	; 0x38
    16d8:	dd00      	ble.n	16dc <__aeabi_dadd+0x78>
    16da:	e107      	b.n	18ec <__aeabi_dadd+0x288>
    16dc:	2d1f      	cmp	r5, #31
    16de:	dd00      	ble.n	16e2 <__aeabi_dadd+0x7e>
    16e0:	e138      	b.n	1954 <__aeabi_dadd+0x2f0>
    16e2:	2020      	movs	r0, #32
    16e4:	1b43      	subs	r3, r0, r5
    16e6:	469a      	mov	sl, r3
    16e8:	000b      	movs	r3, r1
    16ea:	4650      	mov	r0, sl
    16ec:	4083      	lsls	r3, r0
    16ee:	4699      	mov	r9, r3
    16f0:	0013      	movs	r3, r2
    16f2:	4648      	mov	r0, r9
    16f4:	40eb      	lsrs	r3, r5
    16f6:	4318      	orrs	r0, r3
    16f8:	0003      	movs	r3, r0
    16fa:	4650      	mov	r0, sl
    16fc:	4082      	lsls	r2, r0
    16fe:	1e50      	subs	r0, r2, #1
    1700:	4182      	sbcs	r2, r0
    1702:	40e9      	lsrs	r1, r5
    1704:	431a      	orrs	r2, r3
    1706:	1aba      	subs	r2, r7, r2
    1708:	1a61      	subs	r1, r4, r1
    170a:	4297      	cmp	r7, r2
    170c:	41a4      	sbcs	r4, r4
    170e:	0017      	movs	r7, r2
    1710:	4264      	negs	r4, r4
    1712:	1b0c      	subs	r4, r1, r4
    1714:	0223      	lsls	r3, r4, #8
    1716:	d562      	bpl.n	17de <__aeabi_dadd+0x17a>
    1718:	0264      	lsls	r4, r4, #9
    171a:	0a65      	lsrs	r5, r4, #9
    171c:	2d00      	cmp	r5, #0
    171e:	d100      	bne.n	1722 <__aeabi_dadd+0xbe>
    1720:	e0df      	b.n	18e2 <__aeabi_dadd+0x27e>
    1722:	0028      	movs	r0, r5
    1724:	f001 fbe4 	bl	2ef0 <__clzsi2>
    1728:	0003      	movs	r3, r0
    172a:	3b08      	subs	r3, #8
    172c:	2b1f      	cmp	r3, #31
    172e:	dd00      	ble.n	1732 <__aeabi_dadd+0xce>
    1730:	e0d2      	b.n	18d8 <__aeabi_dadd+0x274>
    1732:	2220      	movs	r2, #32
    1734:	003c      	movs	r4, r7
    1736:	1ad2      	subs	r2, r2, r3
    1738:	409d      	lsls	r5, r3
    173a:	40d4      	lsrs	r4, r2
    173c:	409f      	lsls	r7, r3
    173e:	4325      	orrs	r5, r4
    1740:	429e      	cmp	r6, r3
    1742:	dd00      	ble.n	1746 <__aeabi_dadd+0xe2>
    1744:	e0c4      	b.n	18d0 <__aeabi_dadd+0x26c>
    1746:	1b9e      	subs	r6, r3, r6
    1748:	1c73      	adds	r3, r6, #1
    174a:	2b1f      	cmp	r3, #31
    174c:	dd00      	ble.n	1750 <__aeabi_dadd+0xec>
    174e:	e0f1      	b.n	1934 <__aeabi_dadd+0x2d0>
    1750:	2220      	movs	r2, #32
    1752:	0038      	movs	r0, r7
    1754:	0029      	movs	r1, r5
    1756:	1ad2      	subs	r2, r2, r3
    1758:	40d8      	lsrs	r0, r3
    175a:	4091      	lsls	r1, r2
    175c:	4097      	lsls	r7, r2
    175e:	002c      	movs	r4, r5
    1760:	4301      	orrs	r1, r0
    1762:	1e78      	subs	r0, r7, #1
    1764:	4187      	sbcs	r7, r0
    1766:	40dc      	lsrs	r4, r3
    1768:	2600      	movs	r6, #0
    176a:	430f      	orrs	r7, r1
    176c:	077b      	lsls	r3, r7, #29
    176e:	d009      	beq.n	1784 <__aeabi_dadd+0x120>
    1770:	230f      	movs	r3, #15
    1772:	403b      	ands	r3, r7
    1774:	2b04      	cmp	r3, #4
    1776:	d005      	beq.n	1784 <__aeabi_dadd+0x120>
    1778:	1d3b      	adds	r3, r7, #4
    177a:	42bb      	cmp	r3, r7
    177c:	41bf      	sbcs	r7, r7
    177e:	427f      	negs	r7, r7
    1780:	19e4      	adds	r4, r4, r7
    1782:	001f      	movs	r7, r3
    1784:	0223      	lsls	r3, r4, #8
    1786:	d52c      	bpl.n	17e2 <__aeabi_dadd+0x17e>
    1788:	4b96      	ldr	r3, [pc, #600]	; (19e4 <__aeabi_dadd+0x380>)
    178a:	3601      	adds	r6, #1
    178c:	429e      	cmp	r6, r3
    178e:	d100      	bne.n	1792 <__aeabi_dadd+0x12e>
    1790:	e09a      	b.n	18c8 <__aeabi_dadd+0x264>
    1792:	4645      	mov	r5, r8
    1794:	4b94      	ldr	r3, [pc, #592]	; (19e8 <__aeabi_dadd+0x384>)
    1796:	08ff      	lsrs	r7, r7, #3
    1798:	401c      	ands	r4, r3
    179a:	0760      	lsls	r0, r4, #29
    179c:	0576      	lsls	r6, r6, #21
    179e:	0264      	lsls	r4, r4, #9
    17a0:	4307      	orrs	r7, r0
    17a2:	0b24      	lsrs	r4, r4, #12
    17a4:	0d76      	lsrs	r6, r6, #21
    17a6:	2100      	movs	r1, #0
    17a8:	0324      	lsls	r4, r4, #12
    17aa:	0b23      	lsrs	r3, r4, #12
    17ac:	0d0c      	lsrs	r4, r1, #20
    17ae:	4a8f      	ldr	r2, [pc, #572]	; (19ec <__aeabi_dadd+0x388>)
    17b0:	0524      	lsls	r4, r4, #20
    17b2:	431c      	orrs	r4, r3
    17b4:	4014      	ands	r4, r2
    17b6:	0533      	lsls	r3, r6, #20
    17b8:	4323      	orrs	r3, r4
    17ba:	005b      	lsls	r3, r3, #1
    17bc:	07ed      	lsls	r5, r5, #31
    17be:	085b      	lsrs	r3, r3, #1
    17c0:	432b      	orrs	r3, r5
    17c2:	0038      	movs	r0, r7
    17c4:	0019      	movs	r1, r3
    17c6:	bc3c      	pop	{r2, r3, r4, r5}
    17c8:	4690      	mov	r8, r2
    17ca:	4699      	mov	r9, r3
    17cc:	46a2      	mov	sl, r4
    17ce:	46ab      	mov	fp, r5
    17d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17d2:	4664      	mov	r4, ip
    17d4:	4304      	orrs	r4, r0
    17d6:	d100      	bne.n	17da <__aeabi_dadd+0x176>
    17d8:	e211      	b.n	1bfe <__aeabi_dadd+0x59a>
    17da:	0004      	movs	r4, r0
    17dc:	4667      	mov	r7, ip
    17de:	077b      	lsls	r3, r7, #29
    17e0:	d1c6      	bne.n	1770 <__aeabi_dadd+0x10c>
    17e2:	4645      	mov	r5, r8
    17e4:	0760      	lsls	r0, r4, #29
    17e6:	08ff      	lsrs	r7, r7, #3
    17e8:	4307      	orrs	r7, r0
    17ea:	08e4      	lsrs	r4, r4, #3
    17ec:	4b7d      	ldr	r3, [pc, #500]	; (19e4 <__aeabi_dadd+0x380>)
    17ee:	429e      	cmp	r6, r3
    17f0:	d030      	beq.n	1854 <__aeabi_dadd+0x1f0>
    17f2:	0324      	lsls	r4, r4, #12
    17f4:	0576      	lsls	r6, r6, #21
    17f6:	0b24      	lsrs	r4, r4, #12
    17f8:	0d76      	lsrs	r6, r6, #21
    17fa:	e7d4      	b.n	17a6 <__aeabi_dadd+0x142>
    17fc:	1a33      	subs	r3, r6, r0
    17fe:	469a      	mov	sl, r3
    1800:	2b00      	cmp	r3, #0
    1802:	dd78      	ble.n	18f6 <__aeabi_dadd+0x292>
    1804:	2800      	cmp	r0, #0
    1806:	d031      	beq.n	186c <__aeabi_dadd+0x208>
    1808:	4876      	ldr	r0, [pc, #472]	; (19e4 <__aeabi_dadd+0x380>)
    180a:	4286      	cmp	r6, r0
    180c:	d0ae      	beq.n	176c <__aeabi_dadd+0x108>
    180e:	2080      	movs	r0, #128	; 0x80
    1810:	0400      	lsls	r0, r0, #16
    1812:	4301      	orrs	r1, r0
    1814:	4653      	mov	r3, sl
    1816:	2b38      	cmp	r3, #56	; 0x38
    1818:	dc00      	bgt.n	181c <__aeabi_dadd+0x1b8>
    181a:	e0e9      	b.n	19f0 <__aeabi_dadd+0x38c>
    181c:	430a      	orrs	r2, r1
    181e:	1e51      	subs	r1, r2, #1
    1820:	418a      	sbcs	r2, r1
    1822:	2100      	movs	r1, #0
    1824:	19d2      	adds	r2, r2, r7
    1826:	42ba      	cmp	r2, r7
    1828:	41bf      	sbcs	r7, r7
    182a:	1909      	adds	r1, r1, r4
    182c:	427c      	negs	r4, r7
    182e:	0017      	movs	r7, r2
    1830:	190c      	adds	r4, r1, r4
    1832:	0223      	lsls	r3, r4, #8
    1834:	d5d3      	bpl.n	17de <__aeabi_dadd+0x17a>
    1836:	4b6b      	ldr	r3, [pc, #428]	; (19e4 <__aeabi_dadd+0x380>)
    1838:	3601      	adds	r6, #1
    183a:	429e      	cmp	r6, r3
    183c:	d100      	bne.n	1840 <__aeabi_dadd+0x1dc>
    183e:	e13a      	b.n	1ab6 <__aeabi_dadd+0x452>
    1840:	2001      	movs	r0, #1
    1842:	4b69      	ldr	r3, [pc, #420]	; (19e8 <__aeabi_dadd+0x384>)
    1844:	401c      	ands	r4, r3
    1846:	087b      	lsrs	r3, r7, #1
    1848:	4007      	ands	r7, r0
    184a:	431f      	orrs	r7, r3
    184c:	07e0      	lsls	r0, r4, #31
    184e:	4307      	orrs	r7, r0
    1850:	0864      	lsrs	r4, r4, #1
    1852:	e78b      	b.n	176c <__aeabi_dadd+0x108>
    1854:	0023      	movs	r3, r4
    1856:	433b      	orrs	r3, r7
    1858:	d100      	bne.n	185c <__aeabi_dadd+0x1f8>
    185a:	e1cb      	b.n	1bf4 <__aeabi_dadd+0x590>
    185c:	2280      	movs	r2, #128	; 0x80
    185e:	0312      	lsls	r2, r2, #12
    1860:	4314      	orrs	r4, r2
    1862:	0324      	lsls	r4, r4, #12
    1864:	0b24      	lsrs	r4, r4, #12
    1866:	e79e      	b.n	17a6 <__aeabi_dadd+0x142>
    1868:	002e      	movs	r6, r5
    186a:	e77f      	b.n	176c <__aeabi_dadd+0x108>
    186c:	0008      	movs	r0, r1
    186e:	4310      	orrs	r0, r2
    1870:	d100      	bne.n	1874 <__aeabi_dadd+0x210>
    1872:	e0b4      	b.n	19de <__aeabi_dadd+0x37a>
    1874:	1e58      	subs	r0, r3, #1
    1876:	2800      	cmp	r0, #0
    1878:	d000      	beq.n	187c <__aeabi_dadd+0x218>
    187a:	e0de      	b.n	1a3a <__aeabi_dadd+0x3d6>
    187c:	18ba      	adds	r2, r7, r2
    187e:	42ba      	cmp	r2, r7
    1880:	419b      	sbcs	r3, r3
    1882:	1864      	adds	r4, r4, r1
    1884:	425b      	negs	r3, r3
    1886:	18e4      	adds	r4, r4, r3
    1888:	0017      	movs	r7, r2
    188a:	2601      	movs	r6, #1
    188c:	0223      	lsls	r3, r4, #8
    188e:	d5a6      	bpl.n	17de <__aeabi_dadd+0x17a>
    1890:	2602      	movs	r6, #2
    1892:	e7d5      	b.n	1840 <__aeabi_dadd+0x1dc>
    1894:	2d00      	cmp	r5, #0
    1896:	d16e      	bne.n	1976 <__aeabi_dadd+0x312>
    1898:	1c70      	adds	r0, r6, #1
    189a:	0540      	lsls	r0, r0, #21
    189c:	0d40      	lsrs	r0, r0, #21
    189e:	2801      	cmp	r0, #1
    18a0:	dc00      	bgt.n	18a4 <__aeabi_dadd+0x240>
    18a2:	e0f9      	b.n	1a98 <__aeabi_dadd+0x434>
    18a4:	1ab8      	subs	r0, r7, r2
    18a6:	4684      	mov	ip, r0
    18a8:	4287      	cmp	r7, r0
    18aa:	4180      	sbcs	r0, r0
    18ac:	1ae5      	subs	r5, r4, r3
    18ae:	4240      	negs	r0, r0
    18b0:	1a2d      	subs	r5, r5, r0
    18b2:	0228      	lsls	r0, r5, #8
    18b4:	d400      	bmi.n	18b8 <__aeabi_dadd+0x254>
    18b6:	e089      	b.n	19cc <__aeabi_dadd+0x368>
    18b8:	1bd7      	subs	r7, r2, r7
    18ba:	42ba      	cmp	r2, r7
    18bc:	4192      	sbcs	r2, r2
    18be:	1b1c      	subs	r4, r3, r4
    18c0:	4252      	negs	r2, r2
    18c2:	1aa5      	subs	r5, r4, r2
    18c4:	46d8      	mov	r8, fp
    18c6:	e729      	b.n	171c <__aeabi_dadd+0xb8>
    18c8:	4645      	mov	r5, r8
    18ca:	2400      	movs	r4, #0
    18cc:	2700      	movs	r7, #0
    18ce:	e76a      	b.n	17a6 <__aeabi_dadd+0x142>
    18d0:	4c45      	ldr	r4, [pc, #276]	; (19e8 <__aeabi_dadd+0x384>)
    18d2:	1af6      	subs	r6, r6, r3
    18d4:	402c      	ands	r4, r5
    18d6:	e749      	b.n	176c <__aeabi_dadd+0x108>
    18d8:	003d      	movs	r5, r7
    18da:	3828      	subs	r0, #40	; 0x28
    18dc:	4085      	lsls	r5, r0
    18de:	2700      	movs	r7, #0
    18e0:	e72e      	b.n	1740 <__aeabi_dadd+0xdc>
    18e2:	0038      	movs	r0, r7
    18e4:	f001 fb04 	bl	2ef0 <__clzsi2>
    18e8:	3020      	adds	r0, #32
    18ea:	e71d      	b.n	1728 <__aeabi_dadd+0xc4>
    18ec:	430a      	orrs	r2, r1
    18ee:	1e51      	subs	r1, r2, #1
    18f0:	418a      	sbcs	r2, r1
    18f2:	2100      	movs	r1, #0
    18f4:	e707      	b.n	1706 <__aeabi_dadd+0xa2>
    18f6:	2b00      	cmp	r3, #0
    18f8:	d000      	beq.n	18fc <__aeabi_dadd+0x298>
    18fa:	e0f3      	b.n	1ae4 <__aeabi_dadd+0x480>
    18fc:	1c70      	adds	r0, r6, #1
    18fe:	0543      	lsls	r3, r0, #21
    1900:	0d5b      	lsrs	r3, r3, #21
    1902:	2b01      	cmp	r3, #1
    1904:	dc00      	bgt.n	1908 <__aeabi_dadd+0x2a4>
    1906:	e0ad      	b.n	1a64 <__aeabi_dadd+0x400>
    1908:	4b36      	ldr	r3, [pc, #216]	; (19e4 <__aeabi_dadd+0x380>)
    190a:	4298      	cmp	r0, r3
    190c:	d100      	bne.n	1910 <__aeabi_dadd+0x2ac>
    190e:	e0d1      	b.n	1ab4 <__aeabi_dadd+0x450>
    1910:	18ba      	adds	r2, r7, r2
    1912:	42ba      	cmp	r2, r7
    1914:	41bf      	sbcs	r7, r7
    1916:	1864      	adds	r4, r4, r1
    1918:	427f      	negs	r7, r7
    191a:	19e4      	adds	r4, r4, r7
    191c:	07e7      	lsls	r7, r4, #31
    191e:	0852      	lsrs	r2, r2, #1
    1920:	4317      	orrs	r7, r2
    1922:	0864      	lsrs	r4, r4, #1
    1924:	0006      	movs	r6, r0
    1926:	e721      	b.n	176c <__aeabi_dadd+0x108>
    1928:	482e      	ldr	r0, [pc, #184]	; (19e4 <__aeabi_dadd+0x380>)
    192a:	4285      	cmp	r5, r0
    192c:	d100      	bne.n	1930 <__aeabi_dadd+0x2cc>
    192e:	e093      	b.n	1a58 <__aeabi_dadd+0x3f4>
    1930:	001d      	movs	r5, r3
    1932:	e6d0      	b.n	16d6 <__aeabi_dadd+0x72>
    1934:	0029      	movs	r1, r5
    1936:	3e1f      	subs	r6, #31
    1938:	40f1      	lsrs	r1, r6
    193a:	2b20      	cmp	r3, #32
    193c:	d100      	bne.n	1940 <__aeabi_dadd+0x2dc>
    193e:	e08d      	b.n	1a5c <__aeabi_dadd+0x3f8>
    1940:	2240      	movs	r2, #64	; 0x40
    1942:	1ad3      	subs	r3, r2, r3
    1944:	409d      	lsls	r5, r3
    1946:	432f      	orrs	r7, r5
    1948:	1e7d      	subs	r5, r7, #1
    194a:	41af      	sbcs	r7, r5
    194c:	2400      	movs	r4, #0
    194e:	430f      	orrs	r7, r1
    1950:	2600      	movs	r6, #0
    1952:	e744      	b.n	17de <__aeabi_dadd+0x17a>
    1954:	002b      	movs	r3, r5
    1956:	0008      	movs	r0, r1
    1958:	3b20      	subs	r3, #32
    195a:	40d8      	lsrs	r0, r3
    195c:	0003      	movs	r3, r0
    195e:	2d20      	cmp	r5, #32
    1960:	d100      	bne.n	1964 <__aeabi_dadd+0x300>
    1962:	e07d      	b.n	1a60 <__aeabi_dadd+0x3fc>
    1964:	2040      	movs	r0, #64	; 0x40
    1966:	1b45      	subs	r5, r0, r5
    1968:	40a9      	lsls	r1, r5
    196a:	430a      	orrs	r2, r1
    196c:	1e51      	subs	r1, r2, #1
    196e:	418a      	sbcs	r2, r1
    1970:	2100      	movs	r1, #0
    1972:	431a      	orrs	r2, r3
    1974:	e6c7      	b.n	1706 <__aeabi_dadd+0xa2>
    1976:	2e00      	cmp	r6, #0
    1978:	d050      	beq.n	1a1c <__aeabi_dadd+0x3b8>
    197a:	4e1a      	ldr	r6, [pc, #104]	; (19e4 <__aeabi_dadd+0x380>)
    197c:	42b0      	cmp	r0, r6
    197e:	d057      	beq.n	1a30 <__aeabi_dadd+0x3cc>
    1980:	2680      	movs	r6, #128	; 0x80
    1982:	426b      	negs	r3, r5
    1984:	4699      	mov	r9, r3
    1986:	0436      	lsls	r6, r6, #16
    1988:	4334      	orrs	r4, r6
    198a:	464b      	mov	r3, r9
    198c:	2b38      	cmp	r3, #56	; 0x38
    198e:	dd00      	ble.n	1992 <__aeabi_dadd+0x32e>
    1990:	e0d6      	b.n	1b40 <__aeabi_dadd+0x4dc>
    1992:	2b1f      	cmp	r3, #31
    1994:	dd00      	ble.n	1998 <__aeabi_dadd+0x334>
    1996:	e135      	b.n	1c04 <__aeabi_dadd+0x5a0>
    1998:	2620      	movs	r6, #32
    199a:	1af5      	subs	r5, r6, r3
    199c:	0026      	movs	r6, r4
    199e:	40ae      	lsls	r6, r5
    19a0:	46b2      	mov	sl, r6
    19a2:	003e      	movs	r6, r7
    19a4:	40de      	lsrs	r6, r3
    19a6:	46ac      	mov	ip, r5
    19a8:	0035      	movs	r5, r6
    19aa:	4656      	mov	r6, sl
    19ac:	432e      	orrs	r6, r5
    19ae:	4665      	mov	r5, ip
    19b0:	40af      	lsls	r7, r5
    19b2:	1e7d      	subs	r5, r7, #1
    19b4:	41af      	sbcs	r7, r5
    19b6:	40dc      	lsrs	r4, r3
    19b8:	4337      	orrs	r7, r6
    19ba:	1bd7      	subs	r7, r2, r7
    19bc:	42ba      	cmp	r2, r7
    19be:	4192      	sbcs	r2, r2
    19c0:	1b0c      	subs	r4, r1, r4
    19c2:	4252      	negs	r2, r2
    19c4:	1aa4      	subs	r4, r4, r2
    19c6:	0006      	movs	r6, r0
    19c8:	46d8      	mov	r8, fp
    19ca:	e6a3      	b.n	1714 <__aeabi_dadd+0xb0>
    19cc:	4664      	mov	r4, ip
    19ce:	4667      	mov	r7, ip
    19d0:	432c      	orrs	r4, r5
    19d2:	d000      	beq.n	19d6 <__aeabi_dadd+0x372>
    19d4:	e6a2      	b.n	171c <__aeabi_dadd+0xb8>
    19d6:	2500      	movs	r5, #0
    19d8:	2600      	movs	r6, #0
    19da:	2700      	movs	r7, #0
    19dc:	e706      	b.n	17ec <__aeabi_dadd+0x188>
    19de:	001e      	movs	r6, r3
    19e0:	e6c4      	b.n	176c <__aeabi_dadd+0x108>
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	000007ff 	.word	0x000007ff
    19e8:	ff7fffff 	.word	0xff7fffff
    19ec:	800fffff 	.word	0x800fffff
    19f0:	2b1f      	cmp	r3, #31
    19f2:	dc63      	bgt.n	1abc <__aeabi_dadd+0x458>
    19f4:	2020      	movs	r0, #32
    19f6:	1ac3      	subs	r3, r0, r3
    19f8:	0008      	movs	r0, r1
    19fa:	4098      	lsls	r0, r3
    19fc:	469c      	mov	ip, r3
    19fe:	4683      	mov	fp, r0
    1a00:	4653      	mov	r3, sl
    1a02:	0010      	movs	r0, r2
    1a04:	40d8      	lsrs	r0, r3
    1a06:	0003      	movs	r3, r0
    1a08:	4658      	mov	r0, fp
    1a0a:	4318      	orrs	r0, r3
    1a0c:	4663      	mov	r3, ip
    1a0e:	409a      	lsls	r2, r3
    1a10:	1e53      	subs	r3, r2, #1
    1a12:	419a      	sbcs	r2, r3
    1a14:	4653      	mov	r3, sl
    1a16:	4302      	orrs	r2, r0
    1a18:	40d9      	lsrs	r1, r3
    1a1a:	e703      	b.n	1824 <__aeabi_dadd+0x1c0>
    1a1c:	0026      	movs	r6, r4
    1a1e:	433e      	orrs	r6, r7
    1a20:	d006      	beq.n	1a30 <__aeabi_dadd+0x3cc>
    1a22:	43eb      	mvns	r3, r5
    1a24:	4699      	mov	r9, r3
    1a26:	2b00      	cmp	r3, #0
    1a28:	d0c7      	beq.n	19ba <__aeabi_dadd+0x356>
    1a2a:	4e94      	ldr	r6, [pc, #592]	; (1c7c <__aeabi_dadd+0x618>)
    1a2c:	42b0      	cmp	r0, r6
    1a2e:	d1ac      	bne.n	198a <__aeabi_dadd+0x326>
    1a30:	000c      	movs	r4, r1
    1a32:	0017      	movs	r7, r2
    1a34:	0006      	movs	r6, r0
    1a36:	46d8      	mov	r8, fp
    1a38:	e698      	b.n	176c <__aeabi_dadd+0x108>
    1a3a:	4b90      	ldr	r3, [pc, #576]	; (1c7c <__aeabi_dadd+0x618>)
    1a3c:	459a      	cmp	sl, r3
    1a3e:	d00b      	beq.n	1a58 <__aeabi_dadd+0x3f4>
    1a40:	4682      	mov	sl, r0
    1a42:	e6e7      	b.n	1814 <__aeabi_dadd+0x1b0>
    1a44:	2800      	cmp	r0, #0
    1a46:	d000      	beq.n	1a4a <__aeabi_dadd+0x3e6>
    1a48:	e09e      	b.n	1b88 <__aeabi_dadd+0x524>
    1a4a:	0018      	movs	r0, r3
    1a4c:	4310      	orrs	r0, r2
    1a4e:	d100      	bne.n	1a52 <__aeabi_dadd+0x3ee>
    1a50:	e0e9      	b.n	1c26 <__aeabi_dadd+0x5c2>
    1a52:	001c      	movs	r4, r3
    1a54:	0017      	movs	r7, r2
    1a56:	46d8      	mov	r8, fp
    1a58:	4e88      	ldr	r6, [pc, #544]	; (1c7c <__aeabi_dadd+0x618>)
    1a5a:	e687      	b.n	176c <__aeabi_dadd+0x108>
    1a5c:	2500      	movs	r5, #0
    1a5e:	e772      	b.n	1946 <__aeabi_dadd+0x2e2>
    1a60:	2100      	movs	r1, #0
    1a62:	e782      	b.n	196a <__aeabi_dadd+0x306>
    1a64:	0023      	movs	r3, r4
    1a66:	433b      	orrs	r3, r7
    1a68:	2e00      	cmp	r6, #0
    1a6a:	d000      	beq.n	1a6e <__aeabi_dadd+0x40a>
    1a6c:	e0ab      	b.n	1bc6 <__aeabi_dadd+0x562>
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d100      	bne.n	1a74 <__aeabi_dadd+0x410>
    1a72:	e0e7      	b.n	1c44 <__aeabi_dadd+0x5e0>
    1a74:	000b      	movs	r3, r1
    1a76:	4313      	orrs	r3, r2
    1a78:	d100      	bne.n	1a7c <__aeabi_dadd+0x418>
    1a7a:	e677      	b.n	176c <__aeabi_dadd+0x108>
    1a7c:	18ba      	adds	r2, r7, r2
    1a7e:	42ba      	cmp	r2, r7
    1a80:	41bf      	sbcs	r7, r7
    1a82:	1864      	adds	r4, r4, r1
    1a84:	427f      	negs	r7, r7
    1a86:	19e4      	adds	r4, r4, r7
    1a88:	0223      	lsls	r3, r4, #8
    1a8a:	d400      	bmi.n	1a8e <__aeabi_dadd+0x42a>
    1a8c:	e0f2      	b.n	1c74 <__aeabi_dadd+0x610>
    1a8e:	4b7c      	ldr	r3, [pc, #496]	; (1c80 <__aeabi_dadd+0x61c>)
    1a90:	0017      	movs	r7, r2
    1a92:	401c      	ands	r4, r3
    1a94:	0006      	movs	r6, r0
    1a96:	e669      	b.n	176c <__aeabi_dadd+0x108>
    1a98:	0020      	movs	r0, r4
    1a9a:	4338      	orrs	r0, r7
    1a9c:	2e00      	cmp	r6, #0
    1a9e:	d1d1      	bne.n	1a44 <__aeabi_dadd+0x3e0>
    1aa0:	2800      	cmp	r0, #0
    1aa2:	d15b      	bne.n	1b5c <__aeabi_dadd+0x4f8>
    1aa4:	001c      	movs	r4, r3
    1aa6:	4314      	orrs	r4, r2
    1aa8:	d100      	bne.n	1aac <__aeabi_dadd+0x448>
    1aaa:	e0a8      	b.n	1bfe <__aeabi_dadd+0x59a>
    1aac:	001c      	movs	r4, r3
    1aae:	0017      	movs	r7, r2
    1ab0:	46d8      	mov	r8, fp
    1ab2:	e65b      	b.n	176c <__aeabi_dadd+0x108>
    1ab4:	0006      	movs	r6, r0
    1ab6:	2400      	movs	r4, #0
    1ab8:	2700      	movs	r7, #0
    1aba:	e697      	b.n	17ec <__aeabi_dadd+0x188>
    1abc:	4650      	mov	r0, sl
    1abe:	000b      	movs	r3, r1
    1ac0:	3820      	subs	r0, #32
    1ac2:	40c3      	lsrs	r3, r0
    1ac4:	4699      	mov	r9, r3
    1ac6:	4653      	mov	r3, sl
    1ac8:	2b20      	cmp	r3, #32
    1aca:	d100      	bne.n	1ace <__aeabi_dadd+0x46a>
    1acc:	e095      	b.n	1bfa <__aeabi_dadd+0x596>
    1ace:	2340      	movs	r3, #64	; 0x40
    1ad0:	4650      	mov	r0, sl
    1ad2:	1a1b      	subs	r3, r3, r0
    1ad4:	4099      	lsls	r1, r3
    1ad6:	430a      	orrs	r2, r1
    1ad8:	1e51      	subs	r1, r2, #1
    1ada:	418a      	sbcs	r2, r1
    1adc:	464b      	mov	r3, r9
    1ade:	2100      	movs	r1, #0
    1ae0:	431a      	orrs	r2, r3
    1ae2:	e69f      	b.n	1824 <__aeabi_dadd+0x1c0>
    1ae4:	2e00      	cmp	r6, #0
    1ae6:	d130      	bne.n	1b4a <__aeabi_dadd+0x4e6>
    1ae8:	0026      	movs	r6, r4
    1aea:	433e      	orrs	r6, r7
    1aec:	d067      	beq.n	1bbe <__aeabi_dadd+0x55a>
    1aee:	43db      	mvns	r3, r3
    1af0:	469a      	mov	sl, r3
    1af2:	2b00      	cmp	r3, #0
    1af4:	d01c      	beq.n	1b30 <__aeabi_dadd+0x4cc>
    1af6:	4e61      	ldr	r6, [pc, #388]	; (1c7c <__aeabi_dadd+0x618>)
    1af8:	42b0      	cmp	r0, r6
    1afa:	d060      	beq.n	1bbe <__aeabi_dadd+0x55a>
    1afc:	4653      	mov	r3, sl
    1afe:	2b38      	cmp	r3, #56	; 0x38
    1b00:	dd00      	ble.n	1b04 <__aeabi_dadd+0x4a0>
    1b02:	e096      	b.n	1c32 <__aeabi_dadd+0x5ce>
    1b04:	2b1f      	cmp	r3, #31
    1b06:	dd00      	ble.n	1b0a <__aeabi_dadd+0x4a6>
    1b08:	e09f      	b.n	1c4a <__aeabi_dadd+0x5e6>
    1b0a:	2620      	movs	r6, #32
    1b0c:	1af3      	subs	r3, r6, r3
    1b0e:	0026      	movs	r6, r4
    1b10:	409e      	lsls	r6, r3
    1b12:	469c      	mov	ip, r3
    1b14:	46b3      	mov	fp, r6
    1b16:	4653      	mov	r3, sl
    1b18:	003e      	movs	r6, r7
    1b1a:	40de      	lsrs	r6, r3
    1b1c:	0033      	movs	r3, r6
    1b1e:	465e      	mov	r6, fp
    1b20:	431e      	orrs	r6, r3
    1b22:	4663      	mov	r3, ip
    1b24:	409f      	lsls	r7, r3
    1b26:	1e7b      	subs	r3, r7, #1
    1b28:	419f      	sbcs	r7, r3
    1b2a:	4653      	mov	r3, sl
    1b2c:	40dc      	lsrs	r4, r3
    1b2e:	4337      	orrs	r7, r6
    1b30:	18bf      	adds	r7, r7, r2
    1b32:	4297      	cmp	r7, r2
    1b34:	4192      	sbcs	r2, r2
    1b36:	1864      	adds	r4, r4, r1
    1b38:	4252      	negs	r2, r2
    1b3a:	18a4      	adds	r4, r4, r2
    1b3c:	0006      	movs	r6, r0
    1b3e:	e678      	b.n	1832 <__aeabi_dadd+0x1ce>
    1b40:	4327      	orrs	r7, r4
    1b42:	1e7c      	subs	r4, r7, #1
    1b44:	41a7      	sbcs	r7, r4
    1b46:	2400      	movs	r4, #0
    1b48:	e737      	b.n	19ba <__aeabi_dadd+0x356>
    1b4a:	4e4c      	ldr	r6, [pc, #304]	; (1c7c <__aeabi_dadd+0x618>)
    1b4c:	42b0      	cmp	r0, r6
    1b4e:	d036      	beq.n	1bbe <__aeabi_dadd+0x55a>
    1b50:	2680      	movs	r6, #128	; 0x80
    1b52:	425b      	negs	r3, r3
    1b54:	0436      	lsls	r6, r6, #16
    1b56:	469a      	mov	sl, r3
    1b58:	4334      	orrs	r4, r6
    1b5a:	e7cf      	b.n	1afc <__aeabi_dadd+0x498>
    1b5c:	0018      	movs	r0, r3
    1b5e:	4310      	orrs	r0, r2
    1b60:	d100      	bne.n	1b64 <__aeabi_dadd+0x500>
    1b62:	e603      	b.n	176c <__aeabi_dadd+0x108>
    1b64:	1ab8      	subs	r0, r7, r2
    1b66:	4684      	mov	ip, r0
    1b68:	4567      	cmp	r7, ip
    1b6a:	41ad      	sbcs	r5, r5
    1b6c:	1ae0      	subs	r0, r4, r3
    1b6e:	426d      	negs	r5, r5
    1b70:	1b40      	subs	r0, r0, r5
    1b72:	0205      	lsls	r5, r0, #8
    1b74:	d400      	bmi.n	1b78 <__aeabi_dadd+0x514>
    1b76:	e62c      	b.n	17d2 <__aeabi_dadd+0x16e>
    1b78:	1bd7      	subs	r7, r2, r7
    1b7a:	42ba      	cmp	r2, r7
    1b7c:	4192      	sbcs	r2, r2
    1b7e:	1b1c      	subs	r4, r3, r4
    1b80:	4252      	negs	r2, r2
    1b82:	1aa4      	subs	r4, r4, r2
    1b84:	46d8      	mov	r8, fp
    1b86:	e5f1      	b.n	176c <__aeabi_dadd+0x108>
    1b88:	0018      	movs	r0, r3
    1b8a:	4310      	orrs	r0, r2
    1b8c:	d100      	bne.n	1b90 <__aeabi_dadd+0x52c>
    1b8e:	e763      	b.n	1a58 <__aeabi_dadd+0x3f4>
    1b90:	08f8      	lsrs	r0, r7, #3
    1b92:	0767      	lsls	r7, r4, #29
    1b94:	4307      	orrs	r7, r0
    1b96:	2080      	movs	r0, #128	; 0x80
    1b98:	08e4      	lsrs	r4, r4, #3
    1b9a:	0300      	lsls	r0, r0, #12
    1b9c:	4204      	tst	r4, r0
    1b9e:	d008      	beq.n	1bb2 <__aeabi_dadd+0x54e>
    1ba0:	08dd      	lsrs	r5, r3, #3
    1ba2:	4205      	tst	r5, r0
    1ba4:	d105      	bne.n	1bb2 <__aeabi_dadd+0x54e>
    1ba6:	08d2      	lsrs	r2, r2, #3
    1ba8:	0759      	lsls	r1, r3, #29
    1baa:	4311      	orrs	r1, r2
    1bac:	000f      	movs	r7, r1
    1bae:	002c      	movs	r4, r5
    1bb0:	46d8      	mov	r8, fp
    1bb2:	0f7b      	lsrs	r3, r7, #29
    1bb4:	00e4      	lsls	r4, r4, #3
    1bb6:	431c      	orrs	r4, r3
    1bb8:	00ff      	lsls	r7, r7, #3
    1bba:	4e30      	ldr	r6, [pc, #192]	; (1c7c <__aeabi_dadd+0x618>)
    1bbc:	e5d6      	b.n	176c <__aeabi_dadd+0x108>
    1bbe:	000c      	movs	r4, r1
    1bc0:	0017      	movs	r7, r2
    1bc2:	0006      	movs	r6, r0
    1bc4:	e5d2      	b.n	176c <__aeabi_dadd+0x108>
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d038      	beq.n	1c3c <__aeabi_dadd+0x5d8>
    1bca:	000b      	movs	r3, r1
    1bcc:	4313      	orrs	r3, r2
    1bce:	d100      	bne.n	1bd2 <__aeabi_dadd+0x56e>
    1bd0:	e742      	b.n	1a58 <__aeabi_dadd+0x3f4>
    1bd2:	08f8      	lsrs	r0, r7, #3
    1bd4:	0767      	lsls	r7, r4, #29
    1bd6:	4307      	orrs	r7, r0
    1bd8:	2080      	movs	r0, #128	; 0x80
    1bda:	08e4      	lsrs	r4, r4, #3
    1bdc:	0300      	lsls	r0, r0, #12
    1bde:	4204      	tst	r4, r0
    1be0:	d0e7      	beq.n	1bb2 <__aeabi_dadd+0x54e>
    1be2:	08cb      	lsrs	r3, r1, #3
    1be4:	4203      	tst	r3, r0
    1be6:	d1e4      	bne.n	1bb2 <__aeabi_dadd+0x54e>
    1be8:	08d2      	lsrs	r2, r2, #3
    1bea:	0749      	lsls	r1, r1, #29
    1bec:	4311      	orrs	r1, r2
    1bee:	000f      	movs	r7, r1
    1bf0:	001c      	movs	r4, r3
    1bf2:	e7de      	b.n	1bb2 <__aeabi_dadd+0x54e>
    1bf4:	2700      	movs	r7, #0
    1bf6:	2400      	movs	r4, #0
    1bf8:	e5d5      	b.n	17a6 <__aeabi_dadd+0x142>
    1bfa:	2100      	movs	r1, #0
    1bfc:	e76b      	b.n	1ad6 <__aeabi_dadd+0x472>
    1bfe:	2500      	movs	r5, #0
    1c00:	2700      	movs	r7, #0
    1c02:	e5f3      	b.n	17ec <__aeabi_dadd+0x188>
    1c04:	464e      	mov	r6, r9
    1c06:	0025      	movs	r5, r4
    1c08:	3e20      	subs	r6, #32
    1c0a:	40f5      	lsrs	r5, r6
    1c0c:	464b      	mov	r3, r9
    1c0e:	002e      	movs	r6, r5
    1c10:	2b20      	cmp	r3, #32
    1c12:	d02d      	beq.n	1c70 <__aeabi_dadd+0x60c>
    1c14:	2540      	movs	r5, #64	; 0x40
    1c16:	1aed      	subs	r5, r5, r3
    1c18:	40ac      	lsls	r4, r5
    1c1a:	4327      	orrs	r7, r4
    1c1c:	1e7c      	subs	r4, r7, #1
    1c1e:	41a7      	sbcs	r7, r4
    1c20:	2400      	movs	r4, #0
    1c22:	4337      	orrs	r7, r6
    1c24:	e6c9      	b.n	19ba <__aeabi_dadd+0x356>
    1c26:	2480      	movs	r4, #128	; 0x80
    1c28:	2500      	movs	r5, #0
    1c2a:	0324      	lsls	r4, r4, #12
    1c2c:	4e13      	ldr	r6, [pc, #76]	; (1c7c <__aeabi_dadd+0x618>)
    1c2e:	2700      	movs	r7, #0
    1c30:	e5dc      	b.n	17ec <__aeabi_dadd+0x188>
    1c32:	4327      	orrs	r7, r4
    1c34:	1e7c      	subs	r4, r7, #1
    1c36:	41a7      	sbcs	r7, r4
    1c38:	2400      	movs	r4, #0
    1c3a:	e779      	b.n	1b30 <__aeabi_dadd+0x4cc>
    1c3c:	000c      	movs	r4, r1
    1c3e:	0017      	movs	r7, r2
    1c40:	4e0e      	ldr	r6, [pc, #56]	; (1c7c <__aeabi_dadd+0x618>)
    1c42:	e593      	b.n	176c <__aeabi_dadd+0x108>
    1c44:	000c      	movs	r4, r1
    1c46:	0017      	movs	r7, r2
    1c48:	e590      	b.n	176c <__aeabi_dadd+0x108>
    1c4a:	4656      	mov	r6, sl
    1c4c:	0023      	movs	r3, r4
    1c4e:	3e20      	subs	r6, #32
    1c50:	40f3      	lsrs	r3, r6
    1c52:	4699      	mov	r9, r3
    1c54:	4653      	mov	r3, sl
    1c56:	2b20      	cmp	r3, #32
    1c58:	d00e      	beq.n	1c78 <__aeabi_dadd+0x614>
    1c5a:	2340      	movs	r3, #64	; 0x40
    1c5c:	4656      	mov	r6, sl
    1c5e:	1b9b      	subs	r3, r3, r6
    1c60:	409c      	lsls	r4, r3
    1c62:	4327      	orrs	r7, r4
    1c64:	1e7c      	subs	r4, r7, #1
    1c66:	41a7      	sbcs	r7, r4
    1c68:	464b      	mov	r3, r9
    1c6a:	2400      	movs	r4, #0
    1c6c:	431f      	orrs	r7, r3
    1c6e:	e75f      	b.n	1b30 <__aeabi_dadd+0x4cc>
    1c70:	2400      	movs	r4, #0
    1c72:	e7d2      	b.n	1c1a <__aeabi_dadd+0x5b6>
    1c74:	0017      	movs	r7, r2
    1c76:	e5b2      	b.n	17de <__aeabi_dadd+0x17a>
    1c78:	2400      	movs	r4, #0
    1c7a:	e7f2      	b.n	1c62 <__aeabi_dadd+0x5fe>
    1c7c:	000007ff 	.word	0x000007ff
    1c80:	ff7fffff 	.word	0xff7fffff

00001c84 <__aeabi_ddiv>:
    1c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c86:	4657      	mov	r7, sl
    1c88:	4645      	mov	r5, r8
    1c8a:	46de      	mov	lr, fp
    1c8c:	464e      	mov	r6, r9
    1c8e:	b5e0      	push	{r5, r6, r7, lr}
    1c90:	004c      	lsls	r4, r1, #1
    1c92:	030e      	lsls	r6, r1, #12
    1c94:	b087      	sub	sp, #28
    1c96:	4683      	mov	fp, r0
    1c98:	4692      	mov	sl, r2
    1c9a:	001d      	movs	r5, r3
    1c9c:	4680      	mov	r8, r0
    1c9e:	0b36      	lsrs	r6, r6, #12
    1ca0:	0d64      	lsrs	r4, r4, #21
    1ca2:	0fcf      	lsrs	r7, r1, #31
    1ca4:	2c00      	cmp	r4, #0
    1ca6:	d04f      	beq.n	1d48 <__aeabi_ddiv+0xc4>
    1ca8:	4b6f      	ldr	r3, [pc, #444]	; (1e68 <__aeabi_ddiv+0x1e4>)
    1caa:	429c      	cmp	r4, r3
    1cac:	d035      	beq.n	1d1a <__aeabi_ddiv+0x96>
    1cae:	2380      	movs	r3, #128	; 0x80
    1cb0:	0f42      	lsrs	r2, r0, #29
    1cb2:	041b      	lsls	r3, r3, #16
    1cb4:	00f6      	lsls	r6, r6, #3
    1cb6:	4313      	orrs	r3, r2
    1cb8:	4333      	orrs	r3, r6
    1cba:	4699      	mov	r9, r3
    1cbc:	00c3      	lsls	r3, r0, #3
    1cbe:	4698      	mov	r8, r3
    1cc0:	4b6a      	ldr	r3, [pc, #424]	; (1e6c <__aeabi_ddiv+0x1e8>)
    1cc2:	2600      	movs	r6, #0
    1cc4:	469c      	mov	ip, r3
    1cc6:	2300      	movs	r3, #0
    1cc8:	4464      	add	r4, ip
    1cca:	9303      	str	r3, [sp, #12]
    1ccc:	032b      	lsls	r3, r5, #12
    1cce:	0b1b      	lsrs	r3, r3, #12
    1cd0:	469b      	mov	fp, r3
    1cd2:	006b      	lsls	r3, r5, #1
    1cd4:	0fed      	lsrs	r5, r5, #31
    1cd6:	4650      	mov	r0, sl
    1cd8:	0d5b      	lsrs	r3, r3, #21
    1cda:	9501      	str	r5, [sp, #4]
    1cdc:	d05e      	beq.n	1d9c <__aeabi_ddiv+0x118>
    1cde:	4a62      	ldr	r2, [pc, #392]	; (1e68 <__aeabi_ddiv+0x1e4>)
    1ce0:	4293      	cmp	r3, r2
    1ce2:	d053      	beq.n	1d8c <__aeabi_ddiv+0x108>
    1ce4:	465a      	mov	r2, fp
    1ce6:	00d1      	lsls	r1, r2, #3
    1ce8:	2280      	movs	r2, #128	; 0x80
    1cea:	0f40      	lsrs	r0, r0, #29
    1cec:	0412      	lsls	r2, r2, #16
    1cee:	4302      	orrs	r2, r0
    1cf0:	430a      	orrs	r2, r1
    1cf2:	4693      	mov	fp, r2
    1cf4:	4652      	mov	r2, sl
    1cf6:	00d1      	lsls	r1, r2, #3
    1cf8:	4a5c      	ldr	r2, [pc, #368]	; (1e6c <__aeabi_ddiv+0x1e8>)
    1cfa:	4694      	mov	ip, r2
    1cfc:	2200      	movs	r2, #0
    1cfe:	4463      	add	r3, ip
    1d00:	0038      	movs	r0, r7
    1d02:	4068      	eors	r0, r5
    1d04:	4684      	mov	ip, r0
    1d06:	9002      	str	r0, [sp, #8]
    1d08:	1ae4      	subs	r4, r4, r3
    1d0a:	4316      	orrs	r6, r2
    1d0c:	2e0f      	cmp	r6, #15
    1d0e:	d900      	bls.n	1d12 <__aeabi_ddiv+0x8e>
    1d10:	e0b4      	b.n	1e7c <__aeabi_ddiv+0x1f8>
    1d12:	4b57      	ldr	r3, [pc, #348]	; (1e70 <__aeabi_ddiv+0x1ec>)
    1d14:	00b6      	lsls	r6, r6, #2
    1d16:	599b      	ldr	r3, [r3, r6]
    1d18:	469f      	mov	pc, r3
    1d1a:	0003      	movs	r3, r0
    1d1c:	4333      	orrs	r3, r6
    1d1e:	4699      	mov	r9, r3
    1d20:	d16c      	bne.n	1dfc <__aeabi_ddiv+0x178>
    1d22:	2300      	movs	r3, #0
    1d24:	4698      	mov	r8, r3
    1d26:	3302      	adds	r3, #2
    1d28:	2608      	movs	r6, #8
    1d2a:	9303      	str	r3, [sp, #12]
    1d2c:	e7ce      	b.n	1ccc <__aeabi_ddiv+0x48>
    1d2e:	46cb      	mov	fp, r9
    1d30:	4641      	mov	r1, r8
    1d32:	9a03      	ldr	r2, [sp, #12]
    1d34:	9701      	str	r7, [sp, #4]
    1d36:	2a02      	cmp	r2, #2
    1d38:	d165      	bne.n	1e06 <__aeabi_ddiv+0x182>
    1d3a:	9b01      	ldr	r3, [sp, #4]
    1d3c:	4c4a      	ldr	r4, [pc, #296]	; (1e68 <__aeabi_ddiv+0x1e4>)
    1d3e:	469c      	mov	ip, r3
    1d40:	2300      	movs	r3, #0
    1d42:	2200      	movs	r2, #0
    1d44:	4698      	mov	r8, r3
    1d46:	e06b      	b.n	1e20 <__aeabi_ddiv+0x19c>
    1d48:	0003      	movs	r3, r0
    1d4a:	4333      	orrs	r3, r6
    1d4c:	4699      	mov	r9, r3
    1d4e:	d04e      	beq.n	1dee <__aeabi_ddiv+0x16a>
    1d50:	2e00      	cmp	r6, #0
    1d52:	d100      	bne.n	1d56 <__aeabi_ddiv+0xd2>
    1d54:	e1bc      	b.n	20d0 <STACK_SIZE+0xd0>
    1d56:	0030      	movs	r0, r6
    1d58:	f001 f8ca 	bl	2ef0 <__clzsi2>
    1d5c:	0003      	movs	r3, r0
    1d5e:	3b0b      	subs	r3, #11
    1d60:	2b1c      	cmp	r3, #28
    1d62:	dd00      	ble.n	1d66 <__aeabi_ddiv+0xe2>
    1d64:	e1ac      	b.n	20c0 <STACK_SIZE+0xc0>
    1d66:	221d      	movs	r2, #29
    1d68:	1ad3      	subs	r3, r2, r3
    1d6a:	465a      	mov	r2, fp
    1d6c:	0001      	movs	r1, r0
    1d6e:	40da      	lsrs	r2, r3
    1d70:	3908      	subs	r1, #8
    1d72:	408e      	lsls	r6, r1
    1d74:	0013      	movs	r3, r2
    1d76:	4333      	orrs	r3, r6
    1d78:	4699      	mov	r9, r3
    1d7a:	465b      	mov	r3, fp
    1d7c:	408b      	lsls	r3, r1
    1d7e:	4698      	mov	r8, r3
    1d80:	2300      	movs	r3, #0
    1d82:	4c3c      	ldr	r4, [pc, #240]	; (1e74 <__aeabi_ddiv+0x1f0>)
    1d84:	2600      	movs	r6, #0
    1d86:	1a24      	subs	r4, r4, r0
    1d88:	9303      	str	r3, [sp, #12]
    1d8a:	e79f      	b.n	1ccc <__aeabi_ddiv+0x48>
    1d8c:	4651      	mov	r1, sl
    1d8e:	465a      	mov	r2, fp
    1d90:	4311      	orrs	r1, r2
    1d92:	d129      	bne.n	1de8 <__aeabi_ddiv+0x164>
    1d94:	2200      	movs	r2, #0
    1d96:	4693      	mov	fp, r2
    1d98:	3202      	adds	r2, #2
    1d9a:	e7b1      	b.n	1d00 <__aeabi_ddiv+0x7c>
    1d9c:	4659      	mov	r1, fp
    1d9e:	4301      	orrs	r1, r0
    1da0:	d01e      	beq.n	1de0 <__aeabi_ddiv+0x15c>
    1da2:	465b      	mov	r3, fp
    1da4:	2b00      	cmp	r3, #0
    1da6:	d100      	bne.n	1daa <__aeabi_ddiv+0x126>
    1da8:	e19e      	b.n	20e8 <STACK_SIZE+0xe8>
    1daa:	4658      	mov	r0, fp
    1dac:	f001 f8a0 	bl	2ef0 <__clzsi2>
    1db0:	0003      	movs	r3, r0
    1db2:	3b0b      	subs	r3, #11
    1db4:	2b1c      	cmp	r3, #28
    1db6:	dd00      	ble.n	1dba <__aeabi_ddiv+0x136>
    1db8:	e18f      	b.n	20da <STACK_SIZE+0xda>
    1dba:	0002      	movs	r2, r0
    1dbc:	4659      	mov	r1, fp
    1dbe:	3a08      	subs	r2, #8
    1dc0:	4091      	lsls	r1, r2
    1dc2:	468b      	mov	fp, r1
    1dc4:	211d      	movs	r1, #29
    1dc6:	1acb      	subs	r3, r1, r3
    1dc8:	4651      	mov	r1, sl
    1dca:	40d9      	lsrs	r1, r3
    1dcc:	000b      	movs	r3, r1
    1dce:	4659      	mov	r1, fp
    1dd0:	430b      	orrs	r3, r1
    1dd2:	4651      	mov	r1, sl
    1dd4:	469b      	mov	fp, r3
    1dd6:	4091      	lsls	r1, r2
    1dd8:	4b26      	ldr	r3, [pc, #152]	; (1e74 <__aeabi_ddiv+0x1f0>)
    1dda:	2200      	movs	r2, #0
    1ddc:	1a1b      	subs	r3, r3, r0
    1dde:	e78f      	b.n	1d00 <__aeabi_ddiv+0x7c>
    1de0:	2300      	movs	r3, #0
    1de2:	2201      	movs	r2, #1
    1de4:	469b      	mov	fp, r3
    1de6:	e78b      	b.n	1d00 <__aeabi_ddiv+0x7c>
    1de8:	4651      	mov	r1, sl
    1dea:	2203      	movs	r2, #3
    1dec:	e788      	b.n	1d00 <__aeabi_ddiv+0x7c>
    1dee:	2300      	movs	r3, #0
    1df0:	4698      	mov	r8, r3
    1df2:	3301      	adds	r3, #1
    1df4:	2604      	movs	r6, #4
    1df6:	2400      	movs	r4, #0
    1df8:	9303      	str	r3, [sp, #12]
    1dfa:	e767      	b.n	1ccc <__aeabi_ddiv+0x48>
    1dfc:	2303      	movs	r3, #3
    1dfe:	46b1      	mov	r9, r6
    1e00:	9303      	str	r3, [sp, #12]
    1e02:	260c      	movs	r6, #12
    1e04:	e762      	b.n	1ccc <__aeabi_ddiv+0x48>
    1e06:	2a03      	cmp	r2, #3
    1e08:	d100      	bne.n	1e0c <__aeabi_ddiv+0x188>
    1e0a:	e25c      	b.n	22c6 <STACK_SIZE+0x2c6>
    1e0c:	9b01      	ldr	r3, [sp, #4]
    1e0e:	2a01      	cmp	r2, #1
    1e10:	d000      	beq.n	1e14 <__aeabi_ddiv+0x190>
    1e12:	e1e4      	b.n	21de <STACK_SIZE+0x1de>
    1e14:	4013      	ands	r3, r2
    1e16:	469c      	mov	ip, r3
    1e18:	2300      	movs	r3, #0
    1e1a:	2400      	movs	r4, #0
    1e1c:	2200      	movs	r2, #0
    1e1e:	4698      	mov	r8, r3
    1e20:	2100      	movs	r1, #0
    1e22:	0312      	lsls	r2, r2, #12
    1e24:	0b13      	lsrs	r3, r2, #12
    1e26:	0d0a      	lsrs	r2, r1, #20
    1e28:	0512      	lsls	r2, r2, #20
    1e2a:	431a      	orrs	r2, r3
    1e2c:	0523      	lsls	r3, r4, #20
    1e2e:	4c12      	ldr	r4, [pc, #72]	; (1e78 <__aeabi_ddiv+0x1f4>)
    1e30:	4640      	mov	r0, r8
    1e32:	4022      	ands	r2, r4
    1e34:	4313      	orrs	r3, r2
    1e36:	4662      	mov	r2, ip
    1e38:	005b      	lsls	r3, r3, #1
    1e3a:	07d2      	lsls	r2, r2, #31
    1e3c:	085b      	lsrs	r3, r3, #1
    1e3e:	4313      	orrs	r3, r2
    1e40:	0019      	movs	r1, r3
    1e42:	b007      	add	sp, #28
    1e44:	bc3c      	pop	{r2, r3, r4, r5}
    1e46:	4690      	mov	r8, r2
    1e48:	4699      	mov	r9, r3
    1e4a:	46a2      	mov	sl, r4
    1e4c:	46ab      	mov	fp, r5
    1e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e50:	2300      	movs	r3, #0
    1e52:	2280      	movs	r2, #128	; 0x80
    1e54:	469c      	mov	ip, r3
    1e56:	0312      	lsls	r2, r2, #12
    1e58:	4698      	mov	r8, r3
    1e5a:	4c03      	ldr	r4, [pc, #12]	; (1e68 <__aeabi_ddiv+0x1e4>)
    1e5c:	e7e0      	b.n	1e20 <__aeabi_ddiv+0x19c>
    1e5e:	2300      	movs	r3, #0
    1e60:	4c01      	ldr	r4, [pc, #4]	; (1e68 <__aeabi_ddiv+0x1e4>)
    1e62:	2200      	movs	r2, #0
    1e64:	4698      	mov	r8, r3
    1e66:	e7db      	b.n	1e20 <__aeabi_ddiv+0x19c>
    1e68:	000007ff 	.word	0x000007ff
    1e6c:	fffffc01 	.word	0xfffffc01
    1e70:	00002fd4 	.word	0x00002fd4
    1e74:	fffffc0d 	.word	0xfffffc0d
    1e78:	800fffff 	.word	0x800fffff
    1e7c:	45d9      	cmp	r9, fp
    1e7e:	d900      	bls.n	1e82 <__aeabi_ddiv+0x1fe>
    1e80:	e139      	b.n	20f6 <STACK_SIZE+0xf6>
    1e82:	d100      	bne.n	1e86 <__aeabi_ddiv+0x202>
    1e84:	e134      	b.n	20f0 <STACK_SIZE+0xf0>
    1e86:	2300      	movs	r3, #0
    1e88:	4646      	mov	r6, r8
    1e8a:	464d      	mov	r5, r9
    1e8c:	469a      	mov	sl, r3
    1e8e:	3c01      	subs	r4, #1
    1e90:	465b      	mov	r3, fp
    1e92:	0e0a      	lsrs	r2, r1, #24
    1e94:	021b      	lsls	r3, r3, #8
    1e96:	431a      	orrs	r2, r3
    1e98:	020b      	lsls	r3, r1, #8
    1e9a:	0c17      	lsrs	r7, r2, #16
    1e9c:	9303      	str	r3, [sp, #12]
    1e9e:	0413      	lsls	r3, r2, #16
    1ea0:	0c1b      	lsrs	r3, r3, #16
    1ea2:	0039      	movs	r1, r7
    1ea4:	0028      	movs	r0, r5
    1ea6:	4690      	mov	r8, r2
    1ea8:	9301      	str	r3, [sp, #4]
    1eaa:	f7ff fb4f 	bl	154c <__udivsi3>
    1eae:	0002      	movs	r2, r0
    1eb0:	9b01      	ldr	r3, [sp, #4]
    1eb2:	4683      	mov	fp, r0
    1eb4:	435a      	muls	r2, r3
    1eb6:	0028      	movs	r0, r5
    1eb8:	0039      	movs	r1, r7
    1eba:	4691      	mov	r9, r2
    1ebc:	f7ff fbcc 	bl	1658 <__aeabi_uidivmod>
    1ec0:	0c35      	lsrs	r5, r6, #16
    1ec2:	0409      	lsls	r1, r1, #16
    1ec4:	430d      	orrs	r5, r1
    1ec6:	45a9      	cmp	r9, r5
    1ec8:	d90d      	bls.n	1ee6 <__aeabi_ddiv+0x262>
    1eca:	465b      	mov	r3, fp
    1ecc:	4445      	add	r5, r8
    1ece:	3b01      	subs	r3, #1
    1ed0:	45a8      	cmp	r8, r5
    1ed2:	d900      	bls.n	1ed6 <__aeabi_ddiv+0x252>
    1ed4:	e13a      	b.n	214c <STACK_SIZE+0x14c>
    1ed6:	45a9      	cmp	r9, r5
    1ed8:	d800      	bhi.n	1edc <__aeabi_ddiv+0x258>
    1eda:	e137      	b.n	214c <STACK_SIZE+0x14c>
    1edc:	2302      	movs	r3, #2
    1ede:	425b      	negs	r3, r3
    1ee0:	469c      	mov	ip, r3
    1ee2:	4445      	add	r5, r8
    1ee4:	44e3      	add	fp, ip
    1ee6:	464b      	mov	r3, r9
    1ee8:	1aeb      	subs	r3, r5, r3
    1eea:	0039      	movs	r1, r7
    1eec:	0018      	movs	r0, r3
    1eee:	9304      	str	r3, [sp, #16]
    1ef0:	f7ff fb2c 	bl	154c <__udivsi3>
    1ef4:	9b01      	ldr	r3, [sp, #4]
    1ef6:	0005      	movs	r5, r0
    1ef8:	4343      	muls	r3, r0
    1efa:	0039      	movs	r1, r7
    1efc:	9804      	ldr	r0, [sp, #16]
    1efe:	4699      	mov	r9, r3
    1f00:	f7ff fbaa 	bl	1658 <__aeabi_uidivmod>
    1f04:	0433      	lsls	r3, r6, #16
    1f06:	0409      	lsls	r1, r1, #16
    1f08:	0c1b      	lsrs	r3, r3, #16
    1f0a:	430b      	orrs	r3, r1
    1f0c:	4599      	cmp	r9, r3
    1f0e:	d909      	bls.n	1f24 <__aeabi_ddiv+0x2a0>
    1f10:	4443      	add	r3, r8
    1f12:	1e6a      	subs	r2, r5, #1
    1f14:	4598      	cmp	r8, r3
    1f16:	d900      	bls.n	1f1a <__aeabi_ddiv+0x296>
    1f18:	e11a      	b.n	2150 <STACK_SIZE+0x150>
    1f1a:	4599      	cmp	r9, r3
    1f1c:	d800      	bhi.n	1f20 <__aeabi_ddiv+0x29c>
    1f1e:	e117      	b.n	2150 <STACK_SIZE+0x150>
    1f20:	3d02      	subs	r5, #2
    1f22:	4443      	add	r3, r8
    1f24:	464a      	mov	r2, r9
    1f26:	1a9b      	subs	r3, r3, r2
    1f28:	465a      	mov	r2, fp
    1f2a:	0412      	lsls	r2, r2, #16
    1f2c:	432a      	orrs	r2, r5
    1f2e:	9903      	ldr	r1, [sp, #12]
    1f30:	4693      	mov	fp, r2
    1f32:	0c10      	lsrs	r0, r2, #16
    1f34:	0c0a      	lsrs	r2, r1, #16
    1f36:	4691      	mov	r9, r2
    1f38:	0409      	lsls	r1, r1, #16
    1f3a:	465a      	mov	r2, fp
    1f3c:	0c09      	lsrs	r1, r1, #16
    1f3e:	464e      	mov	r6, r9
    1f40:	000d      	movs	r5, r1
    1f42:	0412      	lsls	r2, r2, #16
    1f44:	0c12      	lsrs	r2, r2, #16
    1f46:	4345      	muls	r5, r0
    1f48:	9105      	str	r1, [sp, #20]
    1f4a:	4351      	muls	r1, r2
    1f4c:	4372      	muls	r2, r6
    1f4e:	4370      	muls	r0, r6
    1f50:	1952      	adds	r2, r2, r5
    1f52:	0c0e      	lsrs	r6, r1, #16
    1f54:	18b2      	adds	r2, r6, r2
    1f56:	4295      	cmp	r5, r2
    1f58:	d903      	bls.n	1f62 <__aeabi_ddiv+0x2de>
    1f5a:	2580      	movs	r5, #128	; 0x80
    1f5c:	026d      	lsls	r5, r5, #9
    1f5e:	46ac      	mov	ip, r5
    1f60:	4460      	add	r0, ip
    1f62:	0c15      	lsrs	r5, r2, #16
    1f64:	0409      	lsls	r1, r1, #16
    1f66:	0412      	lsls	r2, r2, #16
    1f68:	0c09      	lsrs	r1, r1, #16
    1f6a:	1828      	adds	r0, r5, r0
    1f6c:	1852      	adds	r2, r2, r1
    1f6e:	4283      	cmp	r3, r0
    1f70:	d200      	bcs.n	1f74 <__aeabi_ddiv+0x2f0>
    1f72:	e0ce      	b.n	2112 <STACK_SIZE+0x112>
    1f74:	d100      	bne.n	1f78 <__aeabi_ddiv+0x2f4>
    1f76:	e0c8      	b.n	210a <STACK_SIZE+0x10a>
    1f78:	1a1d      	subs	r5, r3, r0
    1f7a:	4653      	mov	r3, sl
    1f7c:	1a9e      	subs	r6, r3, r2
    1f7e:	45b2      	cmp	sl, r6
    1f80:	4192      	sbcs	r2, r2
    1f82:	4252      	negs	r2, r2
    1f84:	1aab      	subs	r3, r5, r2
    1f86:	469a      	mov	sl, r3
    1f88:	4598      	cmp	r8, r3
    1f8a:	d100      	bne.n	1f8e <__aeabi_ddiv+0x30a>
    1f8c:	e117      	b.n	21be <STACK_SIZE+0x1be>
    1f8e:	0039      	movs	r1, r7
    1f90:	0018      	movs	r0, r3
    1f92:	f7ff fadb 	bl	154c <__udivsi3>
    1f96:	9b01      	ldr	r3, [sp, #4]
    1f98:	0005      	movs	r5, r0
    1f9a:	4343      	muls	r3, r0
    1f9c:	0039      	movs	r1, r7
    1f9e:	4650      	mov	r0, sl
    1fa0:	9304      	str	r3, [sp, #16]
    1fa2:	f7ff fb59 	bl	1658 <__aeabi_uidivmod>
    1fa6:	9804      	ldr	r0, [sp, #16]
    1fa8:	040b      	lsls	r3, r1, #16
    1faa:	0c31      	lsrs	r1, r6, #16
    1fac:	4319      	orrs	r1, r3
    1fae:	4288      	cmp	r0, r1
    1fb0:	d909      	bls.n	1fc6 <__aeabi_ddiv+0x342>
    1fb2:	4441      	add	r1, r8
    1fb4:	1e6b      	subs	r3, r5, #1
    1fb6:	4588      	cmp	r8, r1
    1fb8:	d900      	bls.n	1fbc <__aeabi_ddiv+0x338>
    1fba:	e107      	b.n	21cc <STACK_SIZE+0x1cc>
    1fbc:	4288      	cmp	r0, r1
    1fbe:	d800      	bhi.n	1fc2 <__aeabi_ddiv+0x33e>
    1fc0:	e104      	b.n	21cc <STACK_SIZE+0x1cc>
    1fc2:	3d02      	subs	r5, #2
    1fc4:	4441      	add	r1, r8
    1fc6:	9b04      	ldr	r3, [sp, #16]
    1fc8:	1acb      	subs	r3, r1, r3
    1fca:	0018      	movs	r0, r3
    1fcc:	0039      	movs	r1, r7
    1fce:	9304      	str	r3, [sp, #16]
    1fd0:	f7ff fabc 	bl	154c <__udivsi3>
    1fd4:	9b01      	ldr	r3, [sp, #4]
    1fd6:	4682      	mov	sl, r0
    1fd8:	4343      	muls	r3, r0
    1fda:	0039      	movs	r1, r7
    1fdc:	9804      	ldr	r0, [sp, #16]
    1fde:	9301      	str	r3, [sp, #4]
    1fe0:	f7ff fb3a 	bl	1658 <__aeabi_uidivmod>
    1fe4:	9801      	ldr	r0, [sp, #4]
    1fe6:	040b      	lsls	r3, r1, #16
    1fe8:	0431      	lsls	r1, r6, #16
    1fea:	0c09      	lsrs	r1, r1, #16
    1fec:	4319      	orrs	r1, r3
    1fee:	4288      	cmp	r0, r1
    1ff0:	d90d      	bls.n	200e <STACK_SIZE+0xe>
    1ff2:	4653      	mov	r3, sl
    1ff4:	4441      	add	r1, r8
    1ff6:	3b01      	subs	r3, #1
    1ff8:	4588      	cmp	r8, r1
    1ffa:	d900      	bls.n	1ffe <__aeabi_ddiv+0x37a>
    1ffc:	e0e8      	b.n	21d0 <STACK_SIZE+0x1d0>
    1ffe:	4288      	cmp	r0, r1
    2000:	d800      	bhi.n	2004 <STACK_SIZE+0x4>
    2002:	e0e5      	b.n	21d0 <STACK_SIZE+0x1d0>
    2004:	2302      	movs	r3, #2
    2006:	425b      	negs	r3, r3
    2008:	469c      	mov	ip, r3
    200a:	4441      	add	r1, r8
    200c:	44e2      	add	sl, ip
    200e:	9b01      	ldr	r3, [sp, #4]
    2010:	042d      	lsls	r5, r5, #16
    2012:	1ace      	subs	r6, r1, r3
    2014:	4651      	mov	r1, sl
    2016:	4329      	orrs	r1, r5
    2018:	9d05      	ldr	r5, [sp, #20]
    201a:	464f      	mov	r7, r9
    201c:	002a      	movs	r2, r5
    201e:	040b      	lsls	r3, r1, #16
    2020:	0c08      	lsrs	r0, r1, #16
    2022:	0c1b      	lsrs	r3, r3, #16
    2024:	435a      	muls	r2, r3
    2026:	4345      	muls	r5, r0
    2028:	437b      	muls	r3, r7
    202a:	4378      	muls	r0, r7
    202c:	195b      	adds	r3, r3, r5
    202e:	0c17      	lsrs	r7, r2, #16
    2030:	18fb      	adds	r3, r7, r3
    2032:	429d      	cmp	r5, r3
    2034:	d903      	bls.n	203e <STACK_SIZE+0x3e>
    2036:	2580      	movs	r5, #128	; 0x80
    2038:	026d      	lsls	r5, r5, #9
    203a:	46ac      	mov	ip, r5
    203c:	4460      	add	r0, ip
    203e:	0c1d      	lsrs	r5, r3, #16
    2040:	0412      	lsls	r2, r2, #16
    2042:	041b      	lsls	r3, r3, #16
    2044:	0c12      	lsrs	r2, r2, #16
    2046:	1828      	adds	r0, r5, r0
    2048:	189b      	adds	r3, r3, r2
    204a:	4286      	cmp	r6, r0
    204c:	d200      	bcs.n	2050 <STACK_SIZE+0x50>
    204e:	e093      	b.n	2178 <STACK_SIZE+0x178>
    2050:	d100      	bne.n	2054 <STACK_SIZE+0x54>
    2052:	e08e      	b.n	2172 <STACK_SIZE+0x172>
    2054:	2301      	movs	r3, #1
    2056:	4319      	orrs	r1, r3
    2058:	4ba0      	ldr	r3, [pc, #640]	; (22dc <STACK_SIZE+0x2dc>)
    205a:	18e3      	adds	r3, r4, r3
    205c:	2b00      	cmp	r3, #0
    205e:	dc00      	bgt.n	2062 <STACK_SIZE+0x62>
    2060:	e099      	b.n	2196 <STACK_SIZE+0x196>
    2062:	074a      	lsls	r2, r1, #29
    2064:	d000      	beq.n	2068 <STACK_SIZE+0x68>
    2066:	e09e      	b.n	21a6 <STACK_SIZE+0x1a6>
    2068:	465a      	mov	r2, fp
    206a:	01d2      	lsls	r2, r2, #7
    206c:	d506      	bpl.n	207c <STACK_SIZE+0x7c>
    206e:	465a      	mov	r2, fp
    2070:	4b9b      	ldr	r3, [pc, #620]	; (22e0 <STACK_SIZE+0x2e0>)
    2072:	401a      	ands	r2, r3
    2074:	2380      	movs	r3, #128	; 0x80
    2076:	4693      	mov	fp, r2
    2078:	00db      	lsls	r3, r3, #3
    207a:	18e3      	adds	r3, r4, r3
    207c:	4a99      	ldr	r2, [pc, #612]	; (22e4 <STACK_SIZE+0x2e4>)
    207e:	4293      	cmp	r3, r2
    2080:	dd68      	ble.n	2154 <STACK_SIZE+0x154>
    2082:	2301      	movs	r3, #1
    2084:	9a02      	ldr	r2, [sp, #8]
    2086:	4c98      	ldr	r4, [pc, #608]	; (22e8 <STACK_SIZE+0x2e8>)
    2088:	401a      	ands	r2, r3
    208a:	2300      	movs	r3, #0
    208c:	4694      	mov	ip, r2
    208e:	4698      	mov	r8, r3
    2090:	2200      	movs	r2, #0
    2092:	e6c5      	b.n	1e20 <__aeabi_ddiv+0x19c>
    2094:	2280      	movs	r2, #128	; 0x80
    2096:	464b      	mov	r3, r9
    2098:	0312      	lsls	r2, r2, #12
    209a:	4213      	tst	r3, r2
    209c:	d00a      	beq.n	20b4 <STACK_SIZE+0xb4>
    209e:	465b      	mov	r3, fp
    20a0:	4213      	tst	r3, r2
    20a2:	d106      	bne.n	20b2 <STACK_SIZE+0xb2>
    20a4:	431a      	orrs	r2, r3
    20a6:	0312      	lsls	r2, r2, #12
    20a8:	0b12      	lsrs	r2, r2, #12
    20aa:	46ac      	mov	ip, r5
    20ac:	4688      	mov	r8, r1
    20ae:	4c8e      	ldr	r4, [pc, #568]	; (22e8 <STACK_SIZE+0x2e8>)
    20b0:	e6b6      	b.n	1e20 <__aeabi_ddiv+0x19c>
    20b2:	464b      	mov	r3, r9
    20b4:	431a      	orrs	r2, r3
    20b6:	0312      	lsls	r2, r2, #12
    20b8:	0b12      	lsrs	r2, r2, #12
    20ba:	46bc      	mov	ip, r7
    20bc:	4c8a      	ldr	r4, [pc, #552]	; (22e8 <STACK_SIZE+0x2e8>)
    20be:	e6af      	b.n	1e20 <__aeabi_ddiv+0x19c>
    20c0:	0003      	movs	r3, r0
    20c2:	465a      	mov	r2, fp
    20c4:	3b28      	subs	r3, #40	; 0x28
    20c6:	409a      	lsls	r2, r3
    20c8:	2300      	movs	r3, #0
    20ca:	4691      	mov	r9, r2
    20cc:	4698      	mov	r8, r3
    20ce:	e657      	b.n	1d80 <__aeabi_ddiv+0xfc>
    20d0:	4658      	mov	r0, fp
    20d2:	f000 ff0d 	bl	2ef0 <__clzsi2>
    20d6:	3020      	adds	r0, #32
    20d8:	e640      	b.n	1d5c <__aeabi_ddiv+0xd8>
    20da:	0003      	movs	r3, r0
    20dc:	4652      	mov	r2, sl
    20de:	3b28      	subs	r3, #40	; 0x28
    20e0:	409a      	lsls	r2, r3
    20e2:	2100      	movs	r1, #0
    20e4:	4693      	mov	fp, r2
    20e6:	e677      	b.n	1dd8 <__aeabi_ddiv+0x154>
    20e8:	f000 ff02 	bl	2ef0 <__clzsi2>
    20ec:	3020      	adds	r0, #32
    20ee:	e65f      	b.n	1db0 <__aeabi_ddiv+0x12c>
    20f0:	4588      	cmp	r8, r1
    20f2:	d200      	bcs.n	20f6 <STACK_SIZE+0xf6>
    20f4:	e6c7      	b.n	1e86 <__aeabi_ddiv+0x202>
    20f6:	464b      	mov	r3, r9
    20f8:	07de      	lsls	r6, r3, #31
    20fa:	085d      	lsrs	r5, r3, #1
    20fc:	4643      	mov	r3, r8
    20fe:	085b      	lsrs	r3, r3, #1
    2100:	431e      	orrs	r6, r3
    2102:	4643      	mov	r3, r8
    2104:	07db      	lsls	r3, r3, #31
    2106:	469a      	mov	sl, r3
    2108:	e6c2      	b.n	1e90 <__aeabi_ddiv+0x20c>
    210a:	2500      	movs	r5, #0
    210c:	4592      	cmp	sl, r2
    210e:	d300      	bcc.n	2112 <STACK_SIZE+0x112>
    2110:	e733      	b.n	1f7a <__aeabi_ddiv+0x2f6>
    2112:	9e03      	ldr	r6, [sp, #12]
    2114:	4659      	mov	r1, fp
    2116:	46b4      	mov	ip, r6
    2118:	44e2      	add	sl, ip
    211a:	45b2      	cmp	sl, r6
    211c:	41ad      	sbcs	r5, r5
    211e:	426d      	negs	r5, r5
    2120:	4445      	add	r5, r8
    2122:	18eb      	adds	r3, r5, r3
    2124:	3901      	subs	r1, #1
    2126:	4598      	cmp	r8, r3
    2128:	d207      	bcs.n	213a <STACK_SIZE+0x13a>
    212a:	4298      	cmp	r0, r3
    212c:	d900      	bls.n	2130 <STACK_SIZE+0x130>
    212e:	e07f      	b.n	2230 <STACK_SIZE+0x230>
    2130:	d100      	bne.n	2134 <STACK_SIZE+0x134>
    2132:	e0bc      	b.n	22ae <STACK_SIZE+0x2ae>
    2134:	1a1d      	subs	r5, r3, r0
    2136:	468b      	mov	fp, r1
    2138:	e71f      	b.n	1f7a <__aeabi_ddiv+0x2f6>
    213a:	4598      	cmp	r8, r3
    213c:	d1fa      	bne.n	2134 <STACK_SIZE+0x134>
    213e:	9d03      	ldr	r5, [sp, #12]
    2140:	4555      	cmp	r5, sl
    2142:	d9f2      	bls.n	212a <STACK_SIZE+0x12a>
    2144:	4643      	mov	r3, r8
    2146:	468b      	mov	fp, r1
    2148:	1a1d      	subs	r5, r3, r0
    214a:	e716      	b.n	1f7a <__aeabi_ddiv+0x2f6>
    214c:	469b      	mov	fp, r3
    214e:	e6ca      	b.n	1ee6 <__aeabi_ddiv+0x262>
    2150:	0015      	movs	r5, r2
    2152:	e6e7      	b.n	1f24 <__aeabi_ddiv+0x2a0>
    2154:	465a      	mov	r2, fp
    2156:	08c9      	lsrs	r1, r1, #3
    2158:	0752      	lsls	r2, r2, #29
    215a:	430a      	orrs	r2, r1
    215c:	055b      	lsls	r3, r3, #21
    215e:	4690      	mov	r8, r2
    2160:	0d5c      	lsrs	r4, r3, #21
    2162:	465a      	mov	r2, fp
    2164:	2301      	movs	r3, #1
    2166:	9902      	ldr	r1, [sp, #8]
    2168:	0252      	lsls	r2, r2, #9
    216a:	4019      	ands	r1, r3
    216c:	0b12      	lsrs	r2, r2, #12
    216e:	468c      	mov	ip, r1
    2170:	e656      	b.n	1e20 <__aeabi_ddiv+0x19c>
    2172:	2b00      	cmp	r3, #0
    2174:	d100      	bne.n	2178 <STACK_SIZE+0x178>
    2176:	e76f      	b.n	2058 <STACK_SIZE+0x58>
    2178:	4446      	add	r6, r8
    217a:	1e4a      	subs	r2, r1, #1
    217c:	45b0      	cmp	r8, r6
    217e:	d929      	bls.n	21d4 <STACK_SIZE+0x1d4>
    2180:	0011      	movs	r1, r2
    2182:	4286      	cmp	r6, r0
    2184:	d000      	beq.n	2188 <STACK_SIZE+0x188>
    2186:	e765      	b.n	2054 <STACK_SIZE+0x54>
    2188:	9a03      	ldr	r2, [sp, #12]
    218a:	4293      	cmp	r3, r2
    218c:	d000      	beq.n	2190 <STACK_SIZE+0x190>
    218e:	e761      	b.n	2054 <STACK_SIZE+0x54>
    2190:	e762      	b.n	2058 <STACK_SIZE+0x58>
    2192:	2101      	movs	r1, #1
    2194:	4249      	negs	r1, r1
    2196:	2001      	movs	r0, #1
    2198:	1ac2      	subs	r2, r0, r3
    219a:	2a38      	cmp	r2, #56	; 0x38
    219c:	dd21      	ble.n	21e2 <STACK_SIZE+0x1e2>
    219e:	9b02      	ldr	r3, [sp, #8]
    21a0:	4003      	ands	r3, r0
    21a2:	469c      	mov	ip, r3
    21a4:	e638      	b.n	1e18 <__aeabi_ddiv+0x194>
    21a6:	220f      	movs	r2, #15
    21a8:	400a      	ands	r2, r1
    21aa:	2a04      	cmp	r2, #4
    21ac:	d100      	bne.n	21b0 <STACK_SIZE+0x1b0>
    21ae:	e75b      	b.n	2068 <STACK_SIZE+0x68>
    21b0:	000a      	movs	r2, r1
    21b2:	1d11      	adds	r1, r2, #4
    21b4:	4291      	cmp	r1, r2
    21b6:	4192      	sbcs	r2, r2
    21b8:	4252      	negs	r2, r2
    21ba:	4493      	add	fp, r2
    21bc:	e754      	b.n	2068 <STACK_SIZE+0x68>
    21be:	4b47      	ldr	r3, [pc, #284]	; (22dc <STACK_SIZE+0x2dc>)
    21c0:	18e3      	adds	r3, r4, r3
    21c2:	2b00      	cmp	r3, #0
    21c4:	dde5      	ble.n	2192 <STACK_SIZE+0x192>
    21c6:	2201      	movs	r2, #1
    21c8:	4252      	negs	r2, r2
    21ca:	e7f2      	b.n	21b2 <STACK_SIZE+0x1b2>
    21cc:	001d      	movs	r5, r3
    21ce:	e6fa      	b.n	1fc6 <__aeabi_ddiv+0x342>
    21d0:	469a      	mov	sl, r3
    21d2:	e71c      	b.n	200e <STACK_SIZE+0xe>
    21d4:	42b0      	cmp	r0, r6
    21d6:	d839      	bhi.n	224c <STACK_SIZE+0x24c>
    21d8:	d06e      	beq.n	22b8 <STACK_SIZE+0x2b8>
    21da:	0011      	movs	r1, r2
    21dc:	e73a      	b.n	2054 <STACK_SIZE+0x54>
    21de:	9302      	str	r3, [sp, #8]
    21e0:	e73a      	b.n	2058 <STACK_SIZE+0x58>
    21e2:	2a1f      	cmp	r2, #31
    21e4:	dc3c      	bgt.n	2260 <STACK_SIZE+0x260>
    21e6:	2320      	movs	r3, #32
    21e8:	1a9b      	subs	r3, r3, r2
    21ea:	000c      	movs	r4, r1
    21ec:	4658      	mov	r0, fp
    21ee:	4099      	lsls	r1, r3
    21f0:	4098      	lsls	r0, r3
    21f2:	1e4b      	subs	r3, r1, #1
    21f4:	4199      	sbcs	r1, r3
    21f6:	465b      	mov	r3, fp
    21f8:	40d4      	lsrs	r4, r2
    21fa:	40d3      	lsrs	r3, r2
    21fc:	4320      	orrs	r0, r4
    21fe:	4308      	orrs	r0, r1
    2200:	001a      	movs	r2, r3
    2202:	0743      	lsls	r3, r0, #29
    2204:	d009      	beq.n	221a <STACK_SIZE+0x21a>
    2206:	230f      	movs	r3, #15
    2208:	4003      	ands	r3, r0
    220a:	2b04      	cmp	r3, #4
    220c:	d005      	beq.n	221a <STACK_SIZE+0x21a>
    220e:	0001      	movs	r1, r0
    2210:	1d08      	adds	r0, r1, #4
    2212:	4288      	cmp	r0, r1
    2214:	419b      	sbcs	r3, r3
    2216:	425b      	negs	r3, r3
    2218:	18d2      	adds	r2, r2, r3
    221a:	0213      	lsls	r3, r2, #8
    221c:	d53a      	bpl.n	2294 <STACK_SIZE+0x294>
    221e:	2301      	movs	r3, #1
    2220:	9a02      	ldr	r2, [sp, #8]
    2222:	2401      	movs	r4, #1
    2224:	401a      	ands	r2, r3
    2226:	2300      	movs	r3, #0
    2228:	4694      	mov	ip, r2
    222a:	4698      	mov	r8, r3
    222c:	2200      	movs	r2, #0
    222e:	e5f7      	b.n	1e20 <__aeabi_ddiv+0x19c>
    2230:	2102      	movs	r1, #2
    2232:	4249      	negs	r1, r1
    2234:	468c      	mov	ip, r1
    2236:	9d03      	ldr	r5, [sp, #12]
    2238:	44e3      	add	fp, ip
    223a:	46ac      	mov	ip, r5
    223c:	44e2      	add	sl, ip
    223e:	45aa      	cmp	sl, r5
    2240:	41ad      	sbcs	r5, r5
    2242:	426d      	negs	r5, r5
    2244:	4445      	add	r5, r8
    2246:	18ed      	adds	r5, r5, r3
    2248:	1a2d      	subs	r5, r5, r0
    224a:	e696      	b.n	1f7a <__aeabi_ddiv+0x2f6>
    224c:	1e8a      	subs	r2, r1, #2
    224e:	9903      	ldr	r1, [sp, #12]
    2250:	004d      	lsls	r5, r1, #1
    2252:	428d      	cmp	r5, r1
    2254:	4189      	sbcs	r1, r1
    2256:	4249      	negs	r1, r1
    2258:	4441      	add	r1, r8
    225a:	1876      	adds	r6, r6, r1
    225c:	9503      	str	r5, [sp, #12]
    225e:	e78f      	b.n	2180 <STACK_SIZE+0x180>
    2260:	201f      	movs	r0, #31
    2262:	4240      	negs	r0, r0
    2264:	1ac3      	subs	r3, r0, r3
    2266:	4658      	mov	r0, fp
    2268:	40d8      	lsrs	r0, r3
    226a:	0003      	movs	r3, r0
    226c:	2a20      	cmp	r2, #32
    226e:	d028      	beq.n	22c2 <STACK_SIZE+0x2c2>
    2270:	2040      	movs	r0, #64	; 0x40
    2272:	465d      	mov	r5, fp
    2274:	1a82      	subs	r2, r0, r2
    2276:	4095      	lsls	r5, r2
    2278:	4329      	orrs	r1, r5
    227a:	1e4a      	subs	r2, r1, #1
    227c:	4191      	sbcs	r1, r2
    227e:	4319      	orrs	r1, r3
    2280:	2307      	movs	r3, #7
    2282:	2200      	movs	r2, #0
    2284:	400b      	ands	r3, r1
    2286:	d009      	beq.n	229c <STACK_SIZE+0x29c>
    2288:	230f      	movs	r3, #15
    228a:	2200      	movs	r2, #0
    228c:	400b      	ands	r3, r1
    228e:	0008      	movs	r0, r1
    2290:	2b04      	cmp	r3, #4
    2292:	d1bd      	bne.n	2210 <STACK_SIZE+0x210>
    2294:	0001      	movs	r1, r0
    2296:	0753      	lsls	r3, r2, #29
    2298:	0252      	lsls	r2, r2, #9
    229a:	0b12      	lsrs	r2, r2, #12
    229c:	08c9      	lsrs	r1, r1, #3
    229e:	4319      	orrs	r1, r3
    22a0:	2301      	movs	r3, #1
    22a2:	4688      	mov	r8, r1
    22a4:	9902      	ldr	r1, [sp, #8]
    22a6:	2400      	movs	r4, #0
    22a8:	4019      	ands	r1, r3
    22aa:	468c      	mov	ip, r1
    22ac:	e5b8      	b.n	1e20 <__aeabi_ddiv+0x19c>
    22ae:	4552      	cmp	r2, sl
    22b0:	d8be      	bhi.n	2230 <STACK_SIZE+0x230>
    22b2:	468b      	mov	fp, r1
    22b4:	2500      	movs	r5, #0
    22b6:	e660      	b.n	1f7a <__aeabi_ddiv+0x2f6>
    22b8:	9d03      	ldr	r5, [sp, #12]
    22ba:	429d      	cmp	r5, r3
    22bc:	d3c6      	bcc.n	224c <STACK_SIZE+0x24c>
    22be:	0011      	movs	r1, r2
    22c0:	e762      	b.n	2188 <STACK_SIZE+0x188>
    22c2:	2500      	movs	r5, #0
    22c4:	e7d8      	b.n	2278 <STACK_SIZE+0x278>
    22c6:	2280      	movs	r2, #128	; 0x80
    22c8:	465b      	mov	r3, fp
    22ca:	0312      	lsls	r2, r2, #12
    22cc:	431a      	orrs	r2, r3
    22ce:	9b01      	ldr	r3, [sp, #4]
    22d0:	0312      	lsls	r2, r2, #12
    22d2:	0b12      	lsrs	r2, r2, #12
    22d4:	469c      	mov	ip, r3
    22d6:	4688      	mov	r8, r1
    22d8:	4c03      	ldr	r4, [pc, #12]	; (22e8 <STACK_SIZE+0x2e8>)
    22da:	e5a1      	b.n	1e20 <__aeabi_ddiv+0x19c>
    22dc:	000003ff 	.word	0x000003ff
    22e0:	feffffff 	.word	0xfeffffff
    22e4:	000007fe 	.word	0x000007fe
    22e8:	000007ff 	.word	0x000007ff

000022ec <__aeabi_dmul>:
    22ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ee:	4657      	mov	r7, sl
    22f0:	4645      	mov	r5, r8
    22f2:	46de      	mov	lr, fp
    22f4:	464e      	mov	r6, r9
    22f6:	b5e0      	push	{r5, r6, r7, lr}
    22f8:	030c      	lsls	r4, r1, #12
    22fa:	4698      	mov	r8, r3
    22fc:	004e      	lsls	r6, r1, #1
    22fe:	0b23      	lsrs	r3, r4, #12
    2300:	b087      	sub	sp, #28
    2302:	0007      	movs	r7, r0
    2304:	4692      	mov	sl, r2
    2306:	469b      	mov	fp, r3
    2308:	0d76      	lsrs	r6, r6, #21
    230a:	0fcd      	lsrs	r5, r1, #31
    230c:	2e00      	cmp	r6, #0
    230e:	d06b      	beq.n	23e8 <__aeabi_dmul+0xfc>
    2310:	4b6d      	ldr	r3, [pc, #436]	; (24c8 <__aeabi_dmul+0x1dc>)
    2312:	429e      	cmp	r6, r3
    2314:	d035      	beq.n	2382 <__aeabi_dmul+0x96>
    2316:	2480      	movs	r4, #128	; 0x80
    2318:	465b      	mov	r3, fp
    231a:	0f42      	lsrs	r2, r0, #29
    231c:	0424      	lsls	r4, r4, #16
    231e:	00db      	lsls	r3, r3, #3
    2320:	4314      	orrs	r4, r2
    2322:	431c      	orrs	r4, r3
    2324:	00c3      	lsls	r3, r0, #3
    2326:	4699      	mov	r9, r3
    2328:	4b68      	ldr	r3, [pc, #416]	; (24cc <__aeabi_dmul+0x1e0>)
    232a:	46a3      	mov	fp, r4
    232c:	469c      	mov	ip, r3
    232e:	2300      	movs	r3, #0
    2330:	2700      	movs	r7, #0
    2332:	4466      	add	r6, ip
    2334:	9302      	str	r3, [sp, #8]
    2336:	4643      	mov	r3, r8
    2338:	031c      	lsls	r4, r3, #12
    233a:	005a      	lsls	r2, r3, #1
    233c:	0fdb      	lsrs	r3, r3, #31
    233e:	4650      	mov	r0, sl
    2340:	0b24      	lsrs	r4, r4, #12
    2342:	0d52      	lsrs	r2, r2, #21
    2344:	4698      	mov	r8, r3
    2346:	d100      	bne.n	234a <__aeabi_dmul+0x5e>
    2348:	e076      	b.n	2438 <__aeabi_dmul+0x14c>
    234a:	4b5f      	ldr	r3, [pc, #380]	; (24c8 <__aeabi_dmul+0x1dc>)
    234c:	429a      	cmp	r2, r3
    234e:	d06d      	beq.n	242c <__aeabi_dmul+0x140>
    2350:	2380      	movs	r3, #128	; 0x80
    2352:	0f41      	lsrs	r1, r0, #29
    2354:	041b      	lsls	r3, r3, #16
    2356:	430b      	orrs	r3, r1
    2358:	495c      	ldr	r1, [pc, #368]	; (24cc <__aeabi_dmul+0x1e0>)
    235a:	00e4      	lsls	r4, r4, #3
    235c:	468c      	mov	ip, r1
    235e:	431c      	orrs	r4, r3
    2360:	00c3      	lsls	r3, r0, #3
    2362:	2000      	movs	r0, #0
    2364:	4462      	add	r2, ip
    2366:	4641      	mov	r1, r8
    2368:	18b6      	adds	r6, r6, r2
    236a:	4069      	eors	r1, r5
    236c:	1c72      	adds	r2, r6, #1
    236e:	9101      	str	r1, [sp, #4]
    2370:	4694      	mov	ip, r2
    2372:	4307      	orrs	r7, r0
    2374:	2f0f      	cmp	r7, #15
    2376:	d900      	bls.n	237a <__aeabi_dmul+0x8e>
    2378:	e0b0      	b.n	24dc <__aeabi_dmul+0x1f0>
    237a:	4a55      	ldr	r2, [pc, #340]	; (24d0 <__aeabi_dmul+0x1e4>)
    237c:	00bf      	lsls	r7, r7, #2
    237e:	59d2      	ldr	r2, [r2, r7]
    2380:	4697      	mov	pc, r2
    2382:	465b      	mov	r3, fp
    2384:	4303      	orrs	r3, r0
    2386:	4699      	mov	r9, r3
    2388:	d000      	beq.n	238c <__aeabi_dmul+0xa0>
    238a:	e087      	b.n	249c <__aeabi_dmul+0x1b0>
    238c:	2300      	movs	r3, #0
    238e:	469b      	mov	fp, r3
    2390:	3302      	adds	r3, #2
    2392:	2708      	movs	r7, #8
    2394:	9302      	str	r3, [sp, #8]
    2396:	e7ce      	b.n	2336 <__aeabi_dmul+0x4a>
    2398:	4642      	mov	r2, r8
    239a:	9201      	str	r2, [sp, #4]
    239c:	2802      	cmp	r0, #2
    239e:	d067      	beq.n	2470 <__aeabi_dmul+0x184>
    23a0:	2803      	cmp	r0, #3
    23a2:	d100      	bne.n	23a6 <__aeabi_dmul+0xba>
    23a4:	e20e      	b.n	27c4 <__aeabi_dmul+0x4d8>
    23a6:	2801      	cmp	r0, #1
    23a8:	d000      	beq.n	23ac <__aeabi_dmul+0xc0>
    23aa:	e162      	b.n	2672 <__aeabi_dmul+0x386>
    23ac:	2300      	movs	r3, #0
    23ae:	2400      	movs	r4, #0
    23b0:	2200      	movs	r2, #0
    23b2:	4699      	mov	r9, r3
    23b4:	9901      	ldr	r1, [sp, #4]
    23b6:	4001      	ands	r1, r0
    23b8:	b2cd      	uxtb	r5, r1
    23ba:	2100      	movs	r1, #0
    23bc:	0312      	lsls	r2, r2, #12
    23be:	0d0b      	lsrs	r3, r1, #20
    23c0:	0b12      	lsrs	r2, r2, #12
    23c2:	051b      	lsls	r3, r3, #20
    23c4:	4313      	orrs	r3, r2
    23c6:	4a43      	ldr	r2, [pc, #268]	; (24d4 <__aeabi_dmul+0x1e8>)
    23c8:	0524      	lsls	r4, r4, #20
    23ca:	4013      	ands	r3, r2
    23cc:	431c      	orrs	r4, r3
    23ce:	0064      	lsls	r4, r4, #1
    23d0:	07ed      	lsls	r5, r5, #31
    23d2:	0864      	lsrs	r4, r4, #1
    23d4:	432c      	orrs	r4, r5
    23d6:	4648      	mov	r0, r9
    23d8:	0021      	movs	r1, r4
    23da:	b007      	add	sp, #28
    23dc:	bc3c      	pop	{r2, r3, r4, r5}
    23de:	4690      	mov	r8, r2
    23e0:	4699      	mov	r9, r3
    23e2:	46a2      	mov	sl, r4
    23e4:	46ab      	mov	fp, r5
    23e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23e8:	4303      	orrs	r3, r0
    23ea:	4699      	mov	r9, r3
    23ec:	d04f      	beq.n	248e <__aeabi_dmul+0x1a2>
    23ee:	465b      	mov	r3, fp
    23f0:	2b00      	cmp	r3, #0
    23f2:	d100      	bne.n	23f6 <__aeabi_dmul+0x10a>
    23f4:	e189      	b.n	270a <__aeabi_dmul+0x41e>
    23f6:	4658      	mov	r0, fp
    23f8:	f000 fd7a 	bl	2ef0 <__clzsi2>
    23fc:	0003      	movs	r3, r0
    23fe:	3b0b      	subs	r3, #11
    2400:	2b1c      	cmp	r3, #28
    2402:	dd00      	ble.n	2406 <__aeabi_dmul+0x11a>
    2404:	e17a      	b.n	26fc <__aeabi_dmul+0x410>
    2406:	221d      	movs	r2, #29
    2408:	1ad3      	subs	r3, r2, r3
    240a:	003a      	movs	r2, r7
    240c:	0001      	movs	r1, r0
    240e:	465c      	mov	r4, fp
    2410:	40da      	lsrs	r2, r3
    2412:	3908      	subs	r1, #8
    2414:	408c      	lsls	r4, r1
    2416:	0013      	movs	r3, r2
    2418:	408f      	lsls	r7, r1
    241a:	4323      	orrs	r3, r4
    241c:	469b      	mov	fp, r3
    241e:	46b9      	mov	r9, r7
    2420:	2300      	movs	r3, #0
    2422:	4e2d      	ldr	r6, [pc, #180]	; (24d8 <__aeabi_dmul+0x1ec>)
    2424:	2700      	movs	r7, #0
    2426:	1a36      	subs	r6, r6, r0
    2428:	9302      	str	r3, [sp, #8]
    242a:	e784      	b.n	2336 <__aeabi_dmul+0x4a>
    242c:	4653      	mov	r3, sl
    242e:	4323      	orrs	r3, r4
    2430:	d12a      	bne.n	2488 <__aeabi_dmul+0x19c>
    2432:	2400      	movs	r4, #0
    2434:	2002      	movs	r0, #2
    2436:	e796      	b.n	2366 <__aeabi_dmul+0x7a>
    2438:	4653      	mov	r3, sl
    243a:	4323      	orrs	r3, r4
    243c:	d020      	beq.n	2480 <__aeabi_dmul+0x194>
    243e:	2c00      	cmp	r4, #0
    2440:	d100      	bne.n	2444 <__aeabi_dmul+0x158>
    2442:	e157      	b.n	26f4 <__aeabi_dmul+0x408>
    2444:	0020      	movs	r0, r4
    2446:	f000 fd53 	bl	2ef0 <__clzsi2>
    244a:	0003      	movs	r3, r0
    244c:	3b0b      	subs	r3, #11
    244e:	2b1c      	cmp	r3, #28
    2450:	dd00      	ble.n	2454 <__aeabi_dmul+0x168>
    2452:	e149      	b.n	26e8 <__aeabi_dmul+0x3fc>
    2454:	211d      	movs	r1, #29
    2456:	1acb      	subs	r3, r1, r3
    2458:	4651      	mov	r1, sl
    245a:	0002      	movs	r2, r0
    245c:	40d9      	lsrs	r1, r3
    245e:	4653      	mov	r3, sl
    2460:	3a08      	subs	r2, #8
    2462:	4094      	lsls	r4, r2
    2464:	4093      	lsls	r3, r2
    2466:	430c      	orrs	r4, r1
    2468:	4a1b      	ldr	r2, [pc, #108]	; (24d8 <__aeabi_dmul+0x1ec>)
    246a:	1a12      	subs	r2, r2, r0
    246c:	2000      	movs	r0, #0
    246e:	e77a      	b.n	2366 <__aeabi_dmul+0x7a>
    2470:	2501      	movs	r5, #1
    2472:	9b01      	ldr	r3, [sp, #4]
    2474:	4c14      	ldr	r4, [pc, #80]	; (24c8 <__aeabi_dmul+0x1dc>)
    2476:	401d      	ands	r5, r3
    2478:	2300      	movs	r3, #0
    247a:	2200      	movs	r2, #0
    247c:	4699      	mov	r9, r3
    247e:	e79c      	b.n	23ba <__aeabi_dmul+0xce>
    2480:	2400      	movs	r4, #0
    2482:	2200      	movs	r2, #0
    2484:	2001      	movs	r0, #1
    2486:	e76e      	b.n	2366 <__aeabi_dmul+0x7a>
    2488:	4653      	mov	r3, sl
    248a:	2003      	movs	r0, #3
    248c:	e76b      	b.n	2366 <__aeabi_dmul+0x7a>
    248e:	2300      	movs	r3, #0
    2490:	469b      	mov	fp, r3
    2492:	3301      	adds	r3, #1
    2494:	2704      	movs	r7, #4
    2496:	2600      	movs	r6, #0
    2498:	9302      	str	r3, [sp, #8]
    249a:	e74c      	b.n	2336 <__aeabi_dmul+0x4a>
    249c:	2303      	movs	r3, #3
    249e:	4681      	mov	r9, r0
    24a0:	270c      	movs	r7, #12
    24a2:	9302      	str	r3, [sp, #8]
    24a4:	e747      	b.n	2336 <__aeabi_dmul+0x4a>
    24a6:	2280      	movs	r2, #128	; 0x80
    24a8:	2300      	movs	r3, #0
    24aa:	2500      	movs	r5, #0
    24ac:	0312      	lsls	r2, r2, #12
    24ae:	4699      	mov	r9, r3
    24b0:	4c05      	ldr	r4, [pc, #20]	; (24c8 <__aeabi_dmul+0x1dc>)
    24b2:	e782      	b.n	23ba <__aeabi_dmul+0xce>
    24b4:	465c      	mov	r4, fp
    24b6:	464b      	mov	r3, r9
    24b8:	9802      	ldr	r0, [sp, #8]
    24ba:	e76f      	b.n	239c <__aeabi_dmul+0xb0>
    24bc:	465c      	mov	r4, fp
    24be:	464b      	mov	r3, r9
    24c0:	9501      	str	r5, [sp, #4]
    24c2:	9802      	ldr	r0, [sp, #8]
    24c4:	e76a      	b.n	239c <__aeabi_dmul+0xb0>
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	000007ff 	.word	0x000007ff
    24cc:	fffffc01 	.word	0xfffffc01
    24d0:	00003014 	.word	0x00003014
    24d4:	800fffff 	.word	0x800fffff
    24d8:	fffffc0d 	.word	0xfffffc0d
    24dc:	464a      	mov	r2, r9
    24de:	4649      	mov	r1, r9
    24e0:	0c17      	lsrs	r7, r2, #16
    24e2:	0c1a      	lsrs	r2, r3, #16
    24e4:	041b      	lsls	r3, r3, #16
    24e6:	0c1b      	lsrs	r3, r3, #16
    24e8:	0408      	lsls	r0, r1, #16
    24ea:	0019      	movs	r1, r3
    24ec:	0c00      	lsrs	r0, r0, #16
    24ee:	4341      	muls	r1, r0
    24f0:	0015      	movs	r5, r2
    24f2:	4688      	mov	r8, r1
    24f4:	0019      	movs	r1, r3
    24f6:	437d      	muls	r5, r7
    24f8:	4379      	muls	r1, r7
    24fa:	9503      	str	r5, [sp, #12]
    24fc:	4689      	mov	r9, r1
    24fe:	0029      	movs	r1, r5
    2500:	0015      	movs	r5, r2
    2502:	4345      	muls	r5, r0
    2504:	444d      	add	r5, r9
    2506:	9502      	str	r5, [sp, #8]
    2508:	4645      	mov	r5, r8
    250a:	0c2d      	lsrs	r5, r5, #16
    250c:	46aa      	mov	sl, r5
    250e:	9d02      	ldr	r5, [sp, #8]
    2510:	4455      	add	r5, sl
    2512:	45a9      	cmp	r9, r5
    2514:	d906      	bls.n	2524 <__aeabi_dmul+0x238>
    2516:	468a      	mov	sl, r1
    2518:	2180      	movs	r1, #128	; 0x80
    251a:	0249      	lsls	r1, r1, #9
    251c:	4689      	mov	r9, r1
    251e:	44ca      	add	sl, r9
    2520:	4651      	mov	r1, sl
    2522:	9103      	str	r1, [sp, #12]
    2524:	0c29      	lsrs	r1, r5, #16
    2526:	9104      	str	r1, [sp, #16]
    2528:	4641      	mov	r1, r8
    252a:	0409      	lsls	r1, r1, #16
    252c:	042d      	lsls	r5, r5, #16
    252e:	0c09      	lsrs	r1, r1, #16
    2530:	4688      	mov	r8, r1
    2532:	0029      	movs	r1, r5
    2534:	0c25      	lsrs	r5, r4, #16
    2536:	0424      	lsls	r4, r4, #16
    2538:	4441      	add	r1, r8
    253a:	0c24      	lsrs	r4, r4, #16
    253c:	9105      	str	r1, [sp, #20]
    253e:	0021      	movs	r1, r4
    2540:	4341      	muls	r1, r0
    2542:	4688      	mov	r8, r1
    2544:	0021      	movs	r1, r4
    2546:	4379      	muls	r1, r7
    2548:	468a      	mov	sl, r1
    254a:	4368      	muls	r0, r5
    254c:	4641      	mov	r1, r8
    254e:	4450      	add	r0, sl
    2550:	4681      	mov	r9, r0
    2552:	0c08      	lsrs	r0, r1, #16
    2554:	4448      	add	r0, r9
    2556:	436f      	muls	r7, r5
    2558:	4582      	cmp	sl, r0
    255a:	d903      	bls.n	2564 <__aeabi_dmul+0x278>
    255c:	2180      	movs	r1, #128	; 0x80
    255e:	0249      	lsls	r1, r1, #9
    2560:	4689      	mov	r9, r1
    2562:	444f      	add	r7, r9
    2564:	0c01      	lsrs	r1, r0, #16
    2566:	4689      	mov	r9, r1
    2568:	0039      	movs	r1, r7
    256a:	4449      	add	r1, r9
    256c:	9102      	str	r1, [sp, #8]
    256e:	4641      	mov	r1, r8
    2570:	040f      	lsls	r7, r1, #16
    2572:	9904      	ldr	r1, [sp, #16]
    2574:	0c3f      	lsrs	r7, r7, #16
    2576:	4688      	mov	r8, r1
    2578:	0400      	lsls	r0, r0, #16
    257a:	19c0      	adds	r0, r0, r7
    257c:	4480      	add	r8, r0
    257e:	4641      	mov	r1, r8
    2580:	9104      	str	r1, [sp, #16]
    2582:	4659      	mov	r1, fp
    2584:	0c0f      	lsrs	r7, r1, #16
    2586:	0409      	lsls	r1, r1, #16
    2588:	0c09      	lsrs	r1, r1, #16
    258a:	4688      	mov	r8, r1
    258c:	4359      	muls	r1, r3
    258e:	468a      	mov	sl, r1
    2590:	0039      	movs	r1, r7
    2592:	4351      	muls	r1, r2
    2594:	4689      	mov	r9, r1
    2596:	4641      	mov	r1, r8
    2598:	434a      	muls	r2, r1
    259a:	4651      	mov	r1, sl
    259c:	0c09      	lsrs	r1, r1, #16
    259e:	468b      	mov	fp, r1
    25a0:	437b      	muls	r3, r7
    25a2:	18d2      	adds	r2, r2, r3
    25a4:	445a      	add	r2, fp
    25a6:	4293      	cmp	r3, r2
    25a8:	d903      	bls.n	25b2 <__aeabi_dmul+0x2c6>
    25aa:	2380      	movs	r3, #128	; 0x80
    25ac:	025b      	lsls	r3, r3, #9
    25ae:	469b      	mov	fp, r3
    25b0:	44d9      	add	r9, fp
    25b2:	4651      	mov	r1, sl
    25b4:	0409      	lsls	r1, r1, #16
    25b6:	0c09      	lsrs	r1, r1, #16
    25b8:	468a      	mov	sl, r1
    25ba:	4641      	mov	r1, r8
    25bc:	4361      	muls	r1, r4
    25be:	437c      	muls	r4, r7
    25c0:	0c13      	lsrs	r3, r2, #16
    25c2:	0412      	lsls	r2, r2, #16
    25c4:	444b      	add	r3, r9
    25c6:	4452      	add	r2, sl
    25c8:	46a1      	mov	r9, r4
    25ca:	468a      	mov	sl, r1
    25cc:	003c      	movs	r4, r7
    25ce:	4641      	mov	r1, r8
    25d0:	436c      	muls	r4, r5
    25d2:	434d      	muls	r5, r1
    25d4:	4651      	mov	r1, sl
    25d6:	444d      	add	r5, r9
    25d8:	0c0f      	lsrs	r7, r1, #16
    25da:	197d      	adds	r5, r7, r5
    25dc:	45a9      	cmp	r9, r5
    25de:	d903      	bls.n	25e8 <__aeabi_dmul+0x2fc>
    25e0:	2180      	movs	r1, #128	; 0x80
    25e2:	0249      	lsls	r1, r1, #9
    25e4:	4688      	mov	r8, r1
    25e6:	4444      	add	r4, r8
    25e8:	9f04      	ldr	r7, [sp, #16]
    25ea:	9903      	ldr	r1, [sp, #12]
    25ec:	46b8      	mov	r8, r7
    25ee:	4441      	add	r1, r8
    25f0:	468b      	mov	fp, r1
    25f2:	4583      	cmp	fp, r0
    25f4:	4180      	sbcs	r0, r0
    25f6:	4241      	negs	r1, r0
    25f8:	4688      	mov	r8, r1
    25fa:	4651      	mov	r1, sl
    25fc:	0408      	lsls	r0, r1, #16
    25fe:	042f      	lsls	r7, r5, #16
    2600:	0c00      	lsrs	r0, r0, #16
    2602:	183f      	adds	r7, r7, r0
    2604:	4658      	mov	r0, fp
    2606:	9902      	ldr	r1, [sp, #8]
    2608:	1810      	adds	r0, r2, r0
    260a:	4689      	mov	r9, r1
    260c:	4290      	cmp	r0, r2
    260e:	4192      	sbcs	r2, r2
    2610:	444f      	add	r7, r9
    2612:	46ba      	mov	sl, r7
    2614:	4252      	negs	r2, r2
    2616:	4699      	mov	r9, r3
    2618:	4693      	mov	fp, r2
    261a:	44c2      	add	sl, r8
    261c:	44d1      	add	r9, sl
    261e:	44cb      	add	fp, r9
    2620:	428f      	cmp	r7, r1
    2622:	41bf      	sbcs	r7, r7
    2624:	45c2      	cmp	sl, r8
    2626:	4189      	sbcs	r1, r1
    2628:	4599      	cmp	r9, r3
    262a:	419b      	sbcs	r3, r3
    262c:	4593      	cmp	fp, r2
    262e:	4192      	sbcs	r2, r2
    2630:	427f      	negs	r7, r7
    2632:	4249      	negs	r1, r1
    2634:	0c2d      	lsrs	r5, r5, #16
    2636:	4252      	negs	r2, r2
    2638:	430f      	orrs	r7, r1
    263a:	425b      	negs	r3, r3
    263c:	4313      	orrs	r3, r2
    263e:	197f      	adds	r7, r7, r5
    2640:	18ff      	adds	r7, r7, r3
    2642:	465b      	mov	r3, fp
    2644:	193c      	adds	r4, r7, r4
    2646:	0ddb      	lsrs	r3, r3, #23
    2648:	9a05      	ldr	r2, [sp, #20]
    264a:	0264      	lsls	r4, r4, #9
    264c:	431c      	orrs	r4, r3
    264e:	0243      	lsls	r3, r0, #9
    2650:	4313      	orrs	r3, r2
    2652:	1e5d      	subs	r5, r3, #1
    2654:	41ab      	sbcs	r3, r5
    2656:	465a      	mov	r2, fp
    2658:	0dc0      	lsrs	r0, r0, #23
    265a:	4303      	orrs	r3, r0
    265c:	0252      	lsls	r2, r2, #9
    265e:	4313      	orrs	r3, r2
    2660:	01e2      	lsls	r2, r4, #7
    2662:	d556      	bpl.n	2712 <__aeabi_dmul+0x426>
    2664:	2001      	movs	r0, #1
    2666:	085a      	lsrs	r2, r3, #1
    2668:	4003      	ands	r3, r0
    266a:	4313      	orrs	r3, r2
    266c:	07e2      	lsls	r2, r4, #31
    266e:	4313      	orrs	r3, r2
    2670:	0864      	lsrs	r4, r4, #1
    2672:	485a      	ldr	r0, [pc, #360]	; (27dc <__aeabi_dmul+0x4f0>)
    2674:	4460      	add	r0, ip
    2676:	2800      	cmp	r0, #0
    2678:	dd4d      	ble.n	2716 <__aeabi_dmul+0x42a>
    267a:	075a      	lsls	r2, r3, #29
    267c:	d009      	beq.n	2692 <__aeabi_dmul+0x3a6>
    267e:	220f      	movs	r2, #15
    2680:	401a      	ands	r2, r3
    2682:	2a04      	cmp	r2, #4
    2684:	d005      	beq.n	2692 <__aeabi_dmul+0x3a6>
    2686:	1d1a      	adds	r2, r3, #4
    2688:	429a      	cmp	r2, r3
    268a:	419b      	sbcs	r3, r3
    268c:	425b      	negs	r3, r3
    268e:	18e4      	adds	r4, r4, r3
    2690:	0013      	movs	r3, r2
    2692:	01e2      	lsls	r2, r4, #7
    2694:	d504      	bpl.n	26a0 <__aeabi_dmul+0x3b4>
    2696:	2080      	movs	r0, #128	; 0x80
    2698:	4a51      	ldr	r2, [pc, #324]	; (27e0 <__aeabi_dmul+0x4f4>)
    269a:	00c0      	lsls	r0, r0, #3
    269c:	4014      	ands	r4, r2
    269e:	4460      	add	r0, ip
    26a0:	4a50      	ldr	r2, [pc, #320]	; (27e4 <__aeabi_dmul+0x4f8>)
    26a2:	4290      	cmp	r0, r2
    26a4:	dd00      	ble.n	26a8 <__aeabi_dmul+0x3bc>
    26a6:	e6e3      	b.n	2470 <__aeabi_dmul+0x184>
    26a8:	2501      	movs	r5, #1
    26aa:	08db      	lsrs	r3, r3, #3
    26ac:	0762      	lsls	r2, r4, #29
    26ae:	431a      	orrs	r2, r3
    26b0:	0264      	lsls	r4, r4, #9
    26b2:	9b01      	ldr	r3, [sp, #4]
    26b4:	4691      	mov	r9, r2
    26b6:	0b22      	lsrs	r2, r4, #12
    26b8:	0544      	lsls	r4, r0, #21
    26ba:	0d64      	lsrs	r4, r4, #21
    26bc:	401d      	ands	r5, r3
    26be:	e67c      	b.n	23ba <__aeabi_dmul+0xce>
    26c0:	2280      	movs	r2, #128	; 0x80
    26c2:	4659      	mov	r1, fp
    26c4:	0312      	lsls	r2, r2, #12
    26c6:	4211      	tst	r1, r2
    26c8:	d008      	beq.n	26dc <__aeabi_dmul+0x3f0>
    26ca:	4214      	tst	r4, r2
    26cc:	d106      	bne.n	26dc <__aeabi_dmul+0x3f0>
    26ce:	4322      	orrs	r2, r4
    26d0:	0312      	lsls	r2, r2, #12
    26d2:	0b12      	lsrs	r2, r2, #12
    26d4:	4645      	mov	r5, r8
    26d6:	4699      	mov	r9, r3
    26d8:	4c43      	ldr	r4, [pc, #268]	; (27e8 <__aeabi_dmul+0x4fc>)
    26da:	e66e      	b.n	23ba <__aeabi_dmul+0xce>
    26dc:	465b      	mov	r3, fp
    26de:	431a      	orrs	r2, r3
    26e0:	0312      	lsls	r2, r2, #12
    26e2:	0b12      	lsrs	r2, r2, #12
    26e4:	4c40      	ldr	r4, [pc, #256]	; (27e8 <__aeabi_dmul+0x4fc>)
    26e6:	e668      	b.n	23ba <__aeabi_dmul+0xce>
    26e8:	0003      	movs	r3, r0
    26ea:	4654      	mov	r4, sl
    26ec:	3b28      	subs	r3, #40	; 0x28
    26ee:	409c      	lsls	r4, r3
    26f0:	2300      	movs	r3, #0
    26f2:	e6b9      	b.n	2468 <__aeabi_dmul+0x17c>
    26f4:	f000 fbfc 	bl	2ef0 <__clzsi2>
    26f8:	3020      	adds	r0, #32
    26fa:	e6a6      	b.n	244a <__aeabi_dmul+0x15e>
    26fc:	0003      	movs	r3, r0
    26fe:	3b28      	subs	r3, #40	; 0x28
    2700:	409f      	lsls	r7, r3
    2702:	2300      	movs	r3, #0
    2704:	46bb      	mov	fp, r7
    2706:	4699      	mov	r9, r3
    2708:	e68a      	b.n	2420 <__aeabi_dmul+0x134>
    270a:	f000 fbf1 	bl	2ef0 <__clzsi2>
    270e:	3020      	adds	r0, #32
    2710:	e674      	b.n	23fc <__aeabi_dmul+0x110>
    2712:	46b4      	mov	ip, r6
    2714:	e7ad      	b.n	2672 <__aeabi_dmul+0x386>
    2716:	2501      	movs	r5, #1
    2718:	1a2a      	subs	r2, r5, r0
    271a:	2a38      	cmp	r2, #56	; 0x38
    271c:	dd06      	ble.n	272c <__aeabi_dmul+0x440>
    271e:	9b01      	ldr	r3, [sp, #4]
    2720:	2400      	movs	r4, #0
    2722:	401d      	ands	r5, r3
    2724:	2300      	movs	r3, #0
    2726:	2200      	movs	r2, #0
    2728:	4699      	mov	r9, r3
    272a:	e646      	b.n	23ba <__aeabi_dmul+0xce>
    272c:	2a1f      	cmp	r2, #31
    272e:	dc21      	bgt.n	2774 <__aeabi_dmul+0x488>
    2730:	2520      	movs	r5, #32
    2732:	0020      	movs	r0, r4
    2734:	1aad      	subs	r5, r5, r2
    2736:	001e      	movs	r6, r3
    2738:	40ab      	lsls	r3, r5
    273a:	40a8      	lsls	r0, r5
    273c:	40d6      	lsrs	r6, r2
    273e:	1e5d      	subs	r5, r3, #1
    2740:	41ab      	sbcs	r3, r5
    2742:	4330      	orrs	r0, r6
    2744:	4318      	orrs	r0, r3
    2746:	40d4      	lsrs	r4, r2
    2748:	0743      	lsls	r3, r0, #29
    274a:	d009      	beq.n	2760 <__aeabi_dmul+0x474>
    274c:	230f      	movs	r3, #15
    274e:	4003      	ands	r3, r0
    2750:	2b04      	cmp	r3, #4
    2752:	d005      	beq.n	2760 <__aeabi_dmul+0x474>
    2754:	0003      	movs	r3, r0
    2756:	1d18      	adds	r0, r3, #4
    2758:	4298      	cmp	r0, r3
    275a:	419b      	sbcs	r3, r3
    275c:	425b      	negs	r3, r3
    275e:	18e4      	adds	r4, r4, r3
    2760:	0223      	lsls	r3, r4, #8
    2762:	d521      	bpl.n	27a8 <__aeabi_dmul+0x4bc>
    2764:	2501      	movs	r5, #1
    2766:	9b01      	ldr	r3, [sp, #4]
    2768:	2401      	movs	r4, #1
    276a:	401d      	ands	r5, r3
    276c:	2300      	movs	r3, #0
    276e:	2200      	movs	r2, #0
    2770:	4699      	mov	r9, r3
    2772:	e622      	b.n	23ba <__aeabi_dmul+0xce>
    2774:	251f      	movs	r5, #31
    2776:	0021      	movs	r1, r4
    2778:	426d      	negs	r5, r5
    277a:	1a28      	subs	r0, r5, r0
    277c:	40c1      	lsrs	r1, r0
    277e:	0008      	movs	r0, r1
    2780:	2a20      	cmp	r2, #32
    2782:	d01d      	beq.n	27c0 <__aeabi_dmul+0x4d4>
    2784:	355f      	adds	r5, #95	; 0x5f
    2786:	1aaa      	subs	r2, r5, r2
    2788:	4094      	lsls	r4, r2
    278a:	4323      	orrs	r3, r4
    278c:	1e5c      	subs	r4, r3, #1
    278e:	41a3      	sbcs	r3, r4
    2790:	2507      	movs	r5, #7
    2792:	4303      	orrs	r3, r0
    2794:	401d      	ands	r5, r3
    2796:	2200      	movs	r2, #0
    2798:	2d00      	cmp	r5, #0
    279a:	d009      	beq.n	27b0 <__aeabi_dmul+0x4c4>
    279c:	220f      	movs	r2, #15
    279e:	2400      	movs	r4, #0
    27a0:	401a      	ands	r2, r3
    27a2:	0018      	movs	r0, r3
    27a4:	2a04      	cmp	r2, #4
    27a6:	d1d6      	bne.n	2756 <__aeabi_dmul+0x46a>
    27a8:	0003      	movs	r3, r0
    27aa:	0765      	lsls	r5, r4, #29
    27ac:	0264      	lsls	r4, r4, #9
    27ae:	0b22      	lsrs	r2, r4, #12
    27b0:	08db      	lsrs	r3, r3, #3
    27b2:	432b      	orrs	r3, r5
    27b4:	2501      	movs	r5, #1
    27b6:	4699      	mov	r9, r3
    27b8:	9b01      	ldr	r3, [sp, #4]
    27ba:	2400      	movs	r4, #0
    27bc:	401d      	ands	r5, r3
    27be:	e5fc      	b.n	23ba <__aeabi_dmul+0xce>
    27c0:	2400      	movs	r4, #0
    27c2:	e7e2      	b.n	278a <__aeabi_dmul+0x49e>
    27c4:	2280      	movs	r2, #128	; 0x80
    27c6:	2501      	movs	r5, #1
    27c8:	0312      	lsls	r2, r2, #12
    27ca:	4322      	orrs	r2, r4
    27cc:	9901      	ldr	r1, [sp, #4]
    27ce:	0312      	lsls	r2, r2, #12
    27d0:	0b12      	lsrs	r2, r2, #12
    27d2:	400d      	ands	r5, r1
    27d4:	4699      	mov	r9, r3
    27d6:	4c04      	ldr	r4, [pc, #16]	; (27e8 <__aeabi_dmul+0x4fc>)
    27d8:	e5ef      	b.n	23ba <__aeabi_dmul+0xce>
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	000003ff 	.word	0x000003ff
    27e0:	feffffff 	.word	0xfeffffff
    27e4:	000007fe 	.word	0x000007fe
    27e8:	000007ff 	.word	0x000007ff

000027ec <__aeabi_dsub>:
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ee:	4646      	mov	r6, r8
    27f0:	46d6      	mov	lr, sl
    27f2:	464f      	mov	r7, r9
    27f4:	030c      	lsls	r4, r1, #12
    27f6:	b5c0      	push	{r6, r7, lr}
    27f8:	0fcd      	lsrs	r5, r1, #31
    27fa:	004e      	lsls	r6, r1, #1
    27fc:	0a61      	lsrs	r1, r4, #9
    27fe:	0f44      	lsrs	r4, r0, #29
    2800:	430c      	orrs	r4, r1
    2802:	00c1      	lsls	r1, r0, #3
    2804:	0058      	lsls	r0, r3, #1
    2806:	0d40      	lsrs	r0, r0, #21
    2808:	4684      	mov	ip, r0
    280a:	468a      	mov	sl, r1
    280c:	000f      	movs	r7, r1
    280e:	0319      	lsls	r1, r3, #12
    2810:	0f50      	lsrs	r0, r2, #29
    2812:	0a49      	lsrs	r1, r1, #9
    2814:	4301      	orrs	r1, r0
    2816:	48c6      	ldr	r0, [pc, #792]	; (2b30 <__aeabi_dsub+0x344>)
    2818:	0d76      	lsrs	r6, r6, #21
    281a:	46a8      	mov	r8, r5
    281c:	0fdb      	lsrs	r3, r3, #31
    281e:	00d2      	lsls	r2, r2, #3
    2820:	4584      	cmp	ip, r0
    2822:	d100      	bne.n	2826 <__aeabi_dsub+0x3a>
    2824:	e0d8      	b.n	29d8 <__aeabi_dsub+0x1ec>
    2826:	2001      	movs	r0, #1
    2828:	4043      	eors	r3, r0
    282a:	42ab      	cmp	r3, r5
    282c:	d100      	bne.n	2830 <__aeabi_dsub+0x44>
    282e:	e0a6      	b.n	297e <__aeabi_dsub+0x192>
    2830:	4660      	mov	r0, ip
    2832:	1a35      	subs	r5, r6, r0
    2834:	2d00      	cmp	r5, #0
    2836:	dc00      	bgt.n	283a <__aeabi_dsub+0x4e>
    2838:	e105      	b.n	2a46 <__aeabi_dsub+0x25a>
    283a:	2800      	cmp	r0, #0
    283c:	d110      	bne.n	2860 <__aeabi_dsub+0x74>
    283e:	000b      	movs	r3, r1
    2840:	4313      	orrs	r3, r2
    2842:	d100      	bne.n	2846 <__aeabi_dsub+0x5a>
    2844:	e0d7      	b.n	29f6 <__aeabi_dsub+0x20a>
    2846:	1e6b      	subs	r3, r5, #1
    2848:	2b00      	cmp	r3, #0
    284a:	d000      	beq.n	284e <__aeabi_dsub+0x62>
    284c:	e14b      	b.n	2ae6 <__aeabi_dsub+0x2fa>
    284e:	4653      	mov	r3, sl
    2850:	1a9f      	subs	r7, r3, r2
    2852:	45ba      	cmp	sl, r7
    2854:	4180      	sbcs	r0, r0
    2856:	1a64      	subs	r4, r4, r1
    2858:	4240      	negs	r0, r0
    285a:	1a24      	subs	r4, r4, r0
    285c:	2601      	movs	r6, #1
    285e:	e01e      	b.n	289e <__aeabi_dsub+0xb2>
    2860:	4bb3      	ldr	r3, [pc, #716]	; (2b30 <__aeabi_dsub+0x344>)
    2862:	429e      	cmp	r6, r3
    2864:	d048      	beq.n	28f8 <__aeabi_dsub+0x10c>
    2866:	2380      	movs	r3, #128	; 0x80
    2868:	041b      	lsls	r3, r3, #16
    286a:	4319      	orrs	r1, r3
    286c:	2d38      	cmp	r5, #56	; 0x38
    286e:	dd00      	ble.n	2872 <__aeabi_dsub+0x86>
    2870:	e119      	b.n	2aa6 <__aeabi_dsub+0x2ba>
    2872:	2d1f      	cmp	r5, #31
    2874:	dd00      	ble.n	2878 <__aeabi_dsub+0x8c>
    2876:	e14c      	b.n	2b12 <__aeabi_dsub+0x326>
    2878:	2320      	movs	r3, #32
    287a:	000f      	movs	r7, r1
    287c:	1b5b      	subs	r3, r3, r5
    287e:	0010      	movs	r0, r2
    2880:	409a      	lsls	r2, r3
    2882:	409f      	lsls	r7, r3
    2884:	40e8      	lsrs	r0, r5
    2886:	1e53      	subs	r3, r2, #1
    2888:	419a      	sbcs	r2, r3
    288a:	40e9      	lsrs	r1, r5
    288c:	4307      	orrs	r7, r0
    288e:	4317      	orrs	r7, r2
    2890:	4653      	mov	r3, sl
    2892:	1bdf      	subs	r7, r3, r7
    2894:	1a61      	subs	r1, r4, r1
    2896:	45ba      	cmp	sl, r7
    2898:	41a4      	sbcs	r4, r4
    289a:	4264      	negs	r4, r4
    289c:	1b0c      	subs	r4, r1, r4
    289e:	0223      	lsls	r3, r4, #8
    28a0:	d400      	bmi.n	28a4 <__aeabi_dsub+0xb8>
    28a2:	e0c5      	b.n	2a30 <__aeabi_dsub+0x244>
    28a4:	0264      	lsls	r4, r4, #9
    28a6:	0a65      	lsrs	r5, r4, #9
    28a8:	2d00      	cmp	r5, #0
    28aa:	d100      	bne.n	28ae <__aeabi_dsub+0xc2>
    28ac:	e0f6      	b.n	2a9c <__aeabi_dsub+0x2b0>
    28ae:	0028      	movs	r0, r5
    28b0:	f000 fb1e 	bl	2ef0 <__clzsi2>
    28b4:	0003      	movs	r3, r0
    28b6:	3b08      	subs	r3, #8
    28b8:	2b1f      	cmp	r3, #31
    28ba:	dd00      	ble.n	28be <__aeabi_dsub+0xd2>
    28bc:	e0e9      	b.n	2a92 <__aeabi_dsub+0x2a6>
    28be:	2220      	movs	r2, #32
    28c0:	003c      	movs	r4, r7
    28c2:	1ad2      	subs	r2, r2, r3
    28c4:	409d      	lsls	r5, r3
    28c6:	40d4      	lsrs	r4, r2
    28c8:	409f      	lsls	r7, r3
    28ca:	4325      	orrs	r5, r4
    28cc:	429e      	cmp	r6, r3
    28ce:	dd00      	ble.n	28d2 <__aeabi_dsub+0xe6>
    28d0:	e0db      	b.n	2a8a <__aeabi_dsub+0x29e>
    28d2:	1b9e      	subs	r6, r3, r6
    28d4:	1c73      	adds	r3, r6, #1
    28d6:	2b1f      	cmp	r3, #31
    28d8:	dd00      	ble.n	28dc <__aeabi_dsub+0xf0>
    28da:	e10a      	b.n	2af2 <__aeabi_dsub+0x306>
    28dc:	2220      	movs	r2, #32
    28de:	0038      	movs	r0, r7
    28e0:	1ad2      	subs	r2, r2, r3
    28e2:	0029      	movs	r1, r5
    28e4:	4097      	lsls	r7, r2
    28e6:	002c      	movs	r4, r5
    28e8:	4091      	lsls	r1, r2
    28ea:	40d8      	lsrs	r0, r3
    28ec:	1e7a      	subs	r2, r7, #1
    28ee:	4197      	sbcs	r7, r2
    28f0:	40dc      	lsrs	r4, r3
    28f2:	2600      	movs	r6, #0
    28f4:	4301      	orrs	r1, r0
    28f6:	430f      	orrs	r7, r1
    28f8:	077b      	lsls	r3, r7, #29
    28fa:	d009      	beq.n	2910 <__aeabi_dsub+0x124>
    28fc:	230f      	movs	r3, #15
    28fe:	403b      	ands	r3, r7
    2900:	2b04      	cmp	r3, #4
    2902:	d005      	beq.n	2910 <__aeabi_dsub+0x124>
    2904:	1d3b      	adds	r3, r7, #4
    2906:	42bb      	cmp	r3, r7
    2908:	41bf      	sbcs	r7, r7
    290a:	427f      	negs	r7, r7
    290c:	19e4      	adds	r4, r4, r7
    290e:	001f      	movs	r7, r3
    2910:	0223      	lsls	r3, r4, #8
    2912:	d525      	bpl.n	2960 <__aeabi_dsub+0x174>
    2914:	4b86      	ldr	r3, [pc, #536]	; (2b30 <__aeabi_dsub+0x344>)
    2916:	3601      	adds	r6, #1
    2918:	429e      	cmp	r6, r3
    291a:	d100      	bne.n	291e <__aeabi_dsub+0x132>
    291c:	e0af      	b.n	2a7e <__aeabi_dsub+0x292>
    291e:	4b85      	ldr	r3, [pc, #532]	; (2b34 <__aeabi_dsub+0x348>)
    2920:	2501      	movs	r5, #1
    2922:	401c      	ands	r4, r3
    2924:	4643      	mov	r3, r8
    2926:	0762      	lsls	r2, r4, #29
    2928:	08ff      	lsrs	r7, r7, #3
    292a:	0264      	lsls	r4, r4, #9
    292c:	0576      	lsls	r6, r6, #21
    292e:	4317      	orrs	r7, r2
    2930:	0b24      	lsrs	r4, r4, #12
    2932:	0d76      	lsrs	r6, r6, #21
    2934:	401d      	ands	r5, r3
    2936:	2100      	movs	r1, #0
    2938:	0324      	lsls	r4, r4, #12
    293a:	0b23      	lsrs	r3, r4, #12
    293c:	0d0c      	lsrs	r4, r1, #20
    293e:	4a7e      	ldr	r2, [pc, #504]	; (2b38 <__aeabi_dsub+0x34c>)
    2940:	0524      	lsls	r4, r4, #20
    2942:	431c      	orrs	r4, r3
    2944:	4014      	ands	r4, r2
    2946:	0533      	lsls	r3, r6, #20
    2948:	4323      	orrs	r3, r4
    294a:	005b      	lsls	r3, r3, #1
    294c:	07ed      	lsls	r5, r5, #31
    294e:	085b      	lsrs	r3, r3, #1
    2950:	432b      	orrs	r3, r5
    2952:	0038      	movs	r0, r7
    2954:	0019      	movs	r1, r3
    2956:	bc1c      	pop	{r2, r3, r4}
    2958:	4690      	mov	r8, r2
    295a:	4699      	mov	r9, r3
    295c:	46a2      	mov	sl, r4
    295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2960:	2501      	movs	r5, #1
    2962:	4643      	mov	r3, r8
    2964:	0762      	lsls	r2, r4, #29
    2966:	08ff      	lsrs	r7, r7, #3
    2968:	4317      	orrs	r7, r2
    296a:	08e4      	lsrs	r4, r4, #3
    296c:	401d      	ands	r5, r3
    296e:	4b70      	ldr	r3, [pc, #448]	; (2b30 <__aeabi_dsub+0x344>)
    2970:	429e      	cmp	r6, r3
    2972:	d036      	beq.n	29e2 <__aeabi_dsub+0x1f6>
    2974:	0324      	lsls	r4, r4, #12
    2976:	0576      	lsls	r6, r6, #21
    2978:	0b24      	lsrs	r4, r4, #12
    297a:	0d76      	lsrs	r6, r6, #21
    297c:	e7db      	b.n	2936 <__aeabi_dsub+0x14a>
    297e:	4663      	mov	r3, ip
    2980:	1af3      	subs	r3, r6, r3
    2982:	2b00      	cmp	r3, #0
    2984:	dc00      	bgt.n	2988 <__aeabi_dsub+0x19c>
    2986:	e094      	b.n	2ab2 <__aeabi_dsub+0x2c6>
    2988:	4660      	mov	r0, ip
    298a:	2800      	cmp	r0, #0
    298c:	d035      	beq.n	29fa <__aeabi_dsub+0x20e>
    298e:	4868      	ldr	r0, [pc, #416]	; (2b30 <__aeabi_dsub+0x344>)
    2990:	4286      	cmp	r6, r0
    2992:	d0b1      	beq.n	28f8 <__aeabi_dsub+0x10c>
    2994:	2780      	movs	r7, #128	; 0x80
    2996:	043f      	lsls	r7, r7, #16
    2998:	4339      	orrs	r1, r7
    299a:	2b38      	cmp	r3, #56	; 0x38
    299c:	dc00      	bgt.n	29a0 <__aeabi_dsub+0x1b4>
    299e:	e0fd      	b.n	2b9c <__aeabi_dsub+0x3b0>
    29a0:	430a      	orrs	r2, r1
    29a2:	0017      	movs	r7, r2
    29a4:	2100      	movs	r1, #0
    29a6:	1e7a      	subs	r2, r7, #1
    29a8:	4197      	sbcs	r7, r2
    29aa:	4457      	add	r7, sl
    29ac:	4557      	cmp	r7, sl
    29ae:	4180      	sbcs	r0, r0
    29b0:	1909      	adds	r1, r1, r4
    29b2:	4244      	negs	r4, r0
    29b4:	190c      	adds	r4, r1, r4
    29b6:	0223      	lsls	r3, r4, #8
    29b8:	d53a      	bpl.n	2a30 <__aeabi_dsub+0x244>
    29ba:	4b5d      	ldr	r3, [pc, #372]	; (2b30 <__aeabi_dsub+0x344>)
    29bc:	3601      	adds	r6, #1
    29be:	429e      	cmp	r6, r3
    29c0:	d100      	bne.n	29c4 <__aeabi_dsub+0x1d8>
    29c2:	e14b      	b.n	2c5c <__aeabi_dsub+0x470>
    29c4:	2201      	movs	r2, #1
    29c6:	4b5b      	ldr	r3, [pc, #364]	; (2b34 <__aeabi_dsub+0x348>)
    29c8:	401c      	ands	r4, r3
    29ca:	087b      	lsrs	r3, r7, #1
    29cc:	4017      	ands	r7, r2
    29ce:	431f      	orrs	r7, r3
    29d0:	07e2      	lsls	r2, r4, #31
    29d2:	4317      	orrs	r7, r2
    29d4:	0864      	lsrs	r4, r4, #1
    29d6:	e78f      	b.n	28f8 <__aeabi_dsub+0x10c>
    29d8:	0008      	movs	r0, r1
    29da:	4310      	orrs	r0, r2
    29dc:	d000      	beq.n	29e0 <__aeabi_dsub+0x1f4>
    29de:	e724      	b.n	282a <__aeabi_dsub+0x3e>
    29e0:	e721      	b.n	2826 <__aeabi_dsub+0x3a>
    29e2:	0023      	movs	r3, r4
    29e4:	433b      	orrs	r3, r7
    29e6:	d100      	bne.n	29ea <__aeabi_dsub+0x1fe>
    29e8:	e1b9      	b.n	2d5e <__aeabi_dsub+0x572>
    29ea:	2280      	movs	r2, #128	; 0x80
    29ec:	0312      	lsls	r2, r2, #12
    29ee:	4314      	orrs	r4, r2
    29f0:	0324      	lsls	r4, r4, #12
    29f2:	0b24      	lsrs	r4, r4, #12
    29f4:	e79f      	b.n	2936 <__aeabi_dsub+0x14a>
    29f6:	002e      	movs	r6, r5
    29f8:	e77e      	b.n	28f8 <__aeabi_dsub+0x10c>
    29fa:	0008      	movs	r0, r1
    29fc:	4310      	orrs	r0, r2
    29fe:	d100      	bne.n	2a02 <__aeabi_dsub+0x216>
    2a00:	e0ca      	b.n	2b98 <__aeabi_dsub+0x3ac>
    2a02:	1e58      	subs	r0, r3, #1
    2a04:	4684      	mov	ip, r0
    2a06:	2800      	cmp	r0, #0
    2a08:	d000      	beq.n	2a0c <__aeabi_dsub+0x220>
    2a0a:	e0e7      	b.n	2bdc <__aeabi_dsub+0x3f0>
    2a0c:	4452      	add	r2, sl
    2a0e:	4552      	cmp	r2, sl
    2a10:	4180      	sbcs	r0, r0
    2a12:	1864      	adds	r4, r4, r1
    2a14:	4240      	negs	r0, r0
    2a16:	1824      	adds	r4, r4, r0
    2a18:	0017      	movs	r7, r2
    2a1a:	2601      	movs	r6, #1
    2a1c:	0223      	lsls	r3, r4, #8
    2a1e:	d507      	bpl.n	2a30 <__aeabi_dsub+0x244>
    2a20:	2602      	movs	r6, #2
    2a22:	e7cf      	b.n	29c4 <__aeabi_dsub+0x1d8>
    2a24:	4664      	mov	r4, ip
    2a26:	432c      	orrs	r4, r5
    2a28:	d100      	bne.n	2a2c <__aeabi_dsub+0x240>
    2a2a:	e1b3      	b.n	2d94 <__aeabi_dsub+0x5a8>
    2a2c:	002c      	movs	r4, r5
    2a2e:	4667      	mov	r7, ip
    2a30:	077b      	lsls	r3, r7, #29
    2a32:	d000      	beq.n	2a36 <__aeabi_dsub+0x24a>
    2a34:	e762      	b.n	28fc <__aeabi_dsub+0x110>
    2a36:	0763      	lsls	r3, r4, #29
    2a38:	08ff      	lsrs	r7, r7, #3
    2a3a:	431f      	orrs	r7, r3
    2a3c:	2501      	movs	r5, #1
    2a3e:	4643      	mov	r3, r8
    2a40:	08e4      	lsrs	r4, r4, #3
    2a42:	401d      	ands	r5, r3
    2a44:	e793      	b.n	296e <__aeabi_dsub+0x182>
    2a46:	2d00      	cmp	r5, #0
    2a48:	d178      	bne.n	2b3c <__aeabi_dsub+0x350>
    2a4a:	1c75      	adds	r5, r6, #1
    2a4c:	056d      	lsls	r5, r5, #21
    2a4e:	0d6d      	lsrs	r5, r5, #21
    2a50:	2d01      	cmp	r5, #1
    2a52:	dc00      	bgt.n	2a56 <__aeabi_dsub+0x26a>
    2a54:	e0f2      	b.n	2c3c <__aeabi_dsub+0x450>
    2a56:	4650      	mov	r0, sl
    2a58:	1a80      	subs	r0, r0, r2
    2a5a:	4582      	cmp	sl, r0
    2a5c:	41bf      	sbcs	r7, r7
    2a5e:	1a65      	subs	r5, r4, r1
    2a60:	427f      	negs	r7, r7
    2a62:	1bed      	subs	r5, r5, r7
    2a64:	4684      	mov	ip, r0
    2a66:	0228      	lsls	r0, r5, #8
    2a68:	d400      	bmi.n	2a6c <__aeabi_dsub+0x280>
    2a6a:	e08c      	b.n	2b86 <__aeabi_dsub+0x39a>
    2a6c:	4650      	mov	r0, sl
    2a6e:	1a17      	subs	r7, r2, r0
    2a70:	42ba      	cmp	r2, r7
    2a72:	4192      	sbcs	r2, r2
    2a74:	1b0c      	subs	r4, r1, r4
    2a76:	4255      	negs	r5, r2
    2a78:	1b65      	subs	r5, r4, r5
    2a7a:	4698      	mov	r8, r3
    2a7c:	e714      	b.n	28a8 <__aeabi_dsub+0xbc>
    2a7e:	2501      	movs	r5, #1
    2a80:	4643      	mov	r3, r8
    2a82:	2400      	movs	r4, #0
    2a84:	401d      	ands	r5, r3
    2a86:	2700      	movs	r7, #0
    2a88:	e755      	b.n	2936 <__aeabi_dsub+0x14a>
    2a8a:	4c2a      	ldr	r4, [pc, #168]	; (2b34 <__aeabi_dsub+0x348>)
    2a8c:	1af6      	subs	r6, r6, r3
    2a8e:	402c      	ands	r4, r5
    2a90:	e732      	b.n	28f8 <__aeabi_dsub+0x10c>
    2a92:	003d      	movs	r5, r7
    2a94:	3828      	subs	r0, #40	; 0x28
    2a96:	4085      	lsls	r5, r0
    2a98:	2700      	movs	r7, #0
    2a9a:	e717      	b.n	28cc <__aeabi_dsub+0xe0>
    2a9c:	0038      	movs	r0, r7
    2a9e:	f000 fa27 	bl	2ef0 <__clzsi2>
    2aa2:	3020      	adds	r0, #32
    2aa4:	e706      	b.n	28b4 <__aeabi_dsub+0xc8>
    2aa6:	430a      	orrs	r2, r1
    2aa8:	0017      	movs	r7, r2
    2aaa:	2100      	movs	r1, #0
    2aac:	1e7a      	subs	r2, r7, #1
    2aae:	4197      	sbcs	r7, r2
    2ab0:	e6ee      	b.n	2890 <__aeabi_dsub+0xa4>
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d000      	beq.n	2ab8 <__aeabi_dsub+0x2cc>
    2ab6:	e0e5      	b.n	2c84 <__aeabi_dsub+0x498>
    2ab8:	1c73      	adds	r3, r6, #1
    2aba:	469c      	mov	ip, r3
    2abc:	055b      	lsls	r3, r3, #21
    2abe:	0d5b      	lsrs	r3, r3, #21
    2ac0:	2b01      	cmp	r3, #1
    2ac2:	dc00      	bgt.n	2ac6 <__aeabi_dsub+0x2da>
    2ac4:	e09f      	b.n	2c06 <__aeabi_dsub+0x41a>
    2ac6:	4b1a      	ldr	r3, [pc, #104]	; (2b30 <__aeabi_dsub+0x344>)
    2ac8:	459c      	cmp	ip, r3
    2aca:	d100      	bne.n	2ace <__aeabi_dsub+0x2e2>
    2acc:	e0c5      	b.n	2c5a <__aeabi_dsub+0x46e>
    2ace:	4452      	add	r2, sl
    2ad0:	4552      	cmp	r2, sl
    2ad2:	4180      	sbcs	r0, r0
    2ad4:	1864      	adds	r4, r4, r1
    2ad6:	4240      	negs	r0, r0
    2ad8:	1824      	adds	r4, r4, r0
    2ada:	07e7      	lsls	r7, r4, #31
    2adc:	0852      	lsrs	r2, r2, #1
    2ade:	4317      	orrs	r7, r2
    2ae0:	0864      	lsrs	r4, r4, #1
    2ae2:	4666      	mov	r6, ip
    2ae4:	e708      	b.n	28f8 <__aeabi_dsub+0x10c>
    2ae6:	4812      	ldr	r0, [pc, #72]	; (2b30 <__aeabi_dsub+0x344>)
    2ae8:	4285      	cmp	r5, r0
    2aea:	d100      	bne.n	2aee <__aeabi_dsub+0x302>
    2aec:	e085      	b.n	2bfa <__aeabi_dsub+0x40e>
    2aee:	001d      	movs	r5, r3
    2af0:	e6bc      	b.n	286c <__aeabi_dsub+0x80>
    2af2:	0029      	movs	r1, r5
    2af4:	3e1f      	subs	r6, #31
    2af6:	40f1      	lsrs	r1, r6
    2af8:	2b20      	cmp	r3, #32
    2afa:	d100      	bne.n	2afe <__aeabi_dsub+0x312>
    2afc:	e07f      	b.n	2bfe <__aeabi_dsub+0x412>
    2afe:	2240      	movs	r2, #64	; 0x40
    2b00:	1ad3      	subs	r3, r2, r3
    2b02:	409d      	lsls	r5, r3
    2b04:	432f      	orrs	r7, r5
    2b06:	1e7d      	subs	r5, r7, #1
    2b08:	41af      	sbcs	r7, r5
    2b0a:	2400      	movs	r4, #0
    2b0c:	430f      	orrs	r7, r1
    2b0e:	2600      	movs	r6, #0
    2b10:	e78e      	b.n	2a30 <__aeabi_dsub+0x244>
    2b12:	002b      	movs	r3, r5
    2b14:	000f      	movs	r7, r1
    2b16:	3b20      	subs	r3, #32
    2b18:	40df      	lsrs	r7, r3
    2b1a:	2d20      	cmp	r5, #32
    2b1c:	d071      	beq.n	2c02 <__aeabi_dsub+0x416>
    2b1e:	2340      	movs	r3, #64	; 0x40
    2b20:	1b5d      	subs	r5, r3, r5
    2b22:	40a9      	lsls	r1, r5
    2b24:	430a      	orrs	r2, r1
    2b26:	1e51      	subs	r1, r2, #1
    2b28:	418a      	sbcs	r2, r1
    2b2a:	2100      	movs	r1, #0
    2b2c:	4317      	orrs	r7, r2
    2b2e:	e6af      	b.n	2890 <__aeabi_dsub+0xa4>
    2b30:	000007ff 	.word	0x000007ff
    2b34:	ff7fffff 	.word	0xff7fffff
    2b38:	800fffff 	.word	0x800fffff
    2b3c:	2e00      	cmp	r6, #0
    2b3e:	d03e      	beq.n	2bbe <__aeabi_dsub+0x3d2>
    2b40:	4eb3      	ldr	r6, [pc, #716]	; (2e10 <__aeabi_dsub+0x624>)
    2b42:	45b4      	cmp	ip, r6
    2b44:	d045      	beq.n	2bd2 <__aeabi_dsub+0x3e6>
    2b46:	2680      	movs	r6, #128	; 0x80
    2b48:	0436      	lsls	r6, r6, #16
    2b4a:	426d      	negs	r5, r5
    2b4c:	4334      	orrs	r4, r6
    2b4e:	2d38      	cmp	r5, #56	; 0x38
    2b50:	dd00      	ble.n	2b54 <__aeabi_dsub+0x368>
    2b52:	e0a8      	b.n	2ca6 <__aeabi_dsub+0x4ba>
    2b54:	2d1f      	cmp	r5, #31
    2b56:	dd00      	ble.n	2b5a <__aeabi_dsub+0x36e>
    2b58:	e11f      	b.n	2d9a <__aeabi_dsub+0x5ae>
    2b5a:	2620      	movs	r6, #32
    2b5c:	0027      	movs	r7, r4
    2b5e:	4650      	mov	r0, sl
    2b60:	1b76      	subs	r6, r6, r5
    2b62:	40b7      	lsls	r7, r6
    2b64:	40e8      	lsrs	r0, r5
    2b66:	4307      	orrs	r7, r0
    2b68:	4650      	mov	r0, sl
    2b6a:	40b0      	lsls	r0, r6
    2b6c:	1e46      	subs	r6, r0, #1
    2b6e:	41b0      	sbcs	r0, r6
    2b70:	40ec      	lsrs	r4, r5
    2b72:	4338      	orrs	r0, r7
    2b74:	1a17      	subs	r7, r2, r0
    2b76:	42ba      	cmp	r2, r7
    2b78:	4192      	sbcs	r2, r2
    2b7a:	1b0c      	subs	r4, r1, r4
    2b7c:	4252      	negs	r2, r2
    2b7e:	1aa4      	subs	r4, r4, r2
    2b80:	4666      	mov	r6, ip
    2b82:	4698      	mov	r8, r3
    2b84:	e68b      	b.n	289e <__aeabi_dsub+0xb2>
    2b86:	4664      	mov	r4, ip
    2b88:	4667      	mov	r7, ip
    2b8a:	432c      	orrs	r4, r5
    2b8c:	d000      	beq.n	2b90 <__aeabi_dsub+0x3a4>
    2b8e:	e68b      	b.n	28a8 <__aeabi_dsub+0xbc>
    2b90:	2500      	movs	r5, #0
    2b92:	2600      	movs	r6, #0
    2b94:	2700      	movs	r7, #0
    2b96:	e6ea      	b.n	296e <__aeabi_dsub+0x182>
    2b98:	001e      	movs	r6, r3
    2b9a:	e6ad      	b.n	28f8 <__aeabi_dsub+0x10c>
    2b9c:	2b1f      	cmp	r3, #31
    2b9e:	dc60      	bgt.n	2c62 <__aeabi_dsub+0x476>
    2ba0:	2720      	movs	r7, #32
    2ba2:	1af8      	subs	r0, r7, r3
    2ba4:	000f      	movs	r7, r1
    2ba6:	4684      	mov	ip, r0
    2ba8:	4087      	lsls	r7, r0
    2baa:	0010      	movs	r0, r2
    2bac:	40d8      	lsrs	r0, r3
    2bae:	4307      	orrs	r7, r0
    2bb0:	4660      	mov	r0, ip
    2bb2:	4082      	lsls	r2, r0
    2bb4:	1e50      	subs	r0, r2, #1
    2bb6:	4182      	sbcs	r2, r0
    2bb8:	40d9      	lsrs	r1, r3
    2bba:	4317      	orrs	r7, r2
    2bbc:	e6f5      	b.n	29aa <__aeabi_dsub+0x1be>
    2bbe:	0026      	movs	r6, r4
    2bc0:	4650      	mov	r0, sl
    2bc2:	4306      	orrs	r6, r0
    2bc4:	d005      	beq.n	2bd2 <__aeabi_dsub+0x3e6>
    2bc6:	43ed      	mvns	r5, r5
    2bc8:	2d00      	cmp	r5, #0
    2bca:	d0d3      	beq.n	2b74 <__aeabi_dsub+0x388>
    2bcc:	4e90      	ldr	r6, [pc, #576]	; (2e10 <__aeabi_dsub+0x624>)
    2bce:	45b4      	cmp	ip, r6
    2bd0:	d1bd      	bne.n	2b4e <__aeabi_dsub+0x362>
    2bd2:	000c      	movs	r4, r1
    2bd4:	0017      	movs	r7, r2
    2bd6:	4666      	mov	r6, ip
    2bd8:	4698      	mov	r8, r3
    2bda:	e68d      	b.n	28f8 <__aeabi_dsub+0x10c>
    2bdc:	488c      	ldr	r0, [pc, #560]	; (2e10 <__aeabi_dsub+0x624>)
    2bde:	4283      	cmp	r3, r0
    2be0:	d00b      	beq.n	2bfa <__aeabi_dsub+0x40e>
    2be2:	4663      	mov	r3, ip
    2be4:	e6d9      	b.n	299a <__aeabi_dsub+0x1ae>
    2be6:	2d00      	cmp	r5, #0
    2be8:	d000      	beq.n	2bec <__aeabi_dsub+0x400>
    2bea:	e096      	b.n	2d1a <__aeabi_dsub+0x52e>
    2bec:	0008      	movs	r0, r1
    2bee:	4310      	orrs	r0, r2
    2bf0:	d100      	bne.n	2bf4 <__aeabi_dsub+0x408>
    2bf2:	e0e2      	b.n	2dba <__aeabi_dsub+0x5ce>
    2bf4:	000c      	movs	r4, r1
    2bf6:	0017      	movs	r7, r2
    2bf8:	4698      	mov	r8, r3
    2bfa:	4e85      	ldr	r6, [pc, #532]	; (2e10 <__aeabi_dsub+0x624>)
    2bfc:	e67c      	b.n	28f8 <__aeabi_dsub+0x10c>
    2bfe:	2500      	movs	r5, #0
    2c00:	e780      	b.n	2b04 <__aeabi_dsub+0x318>
    2c02:	2100      	movs	r1, #0
    2c04:	e78e      	b.n	2b24 <__aeabi_dsub+0x338>
    2c06:	0023      	movs	r3, r4
    2c08:	4650      	mov	r0, sl
    2c0a:	4303      	orrs	r3, r0
    2c0c:	2e00      	cmp	r6, #0
    2c0e:	d000      	beq.n	2c12 <__aeabi_dsub+0x426>
    2c10:	e0a8      	b.n	2d64 <__aeabi_dsub+0x578>
    2c12:	2b00      	cmp	r3, #0
    2c14:	d100      	bne.n	2c18 <__aeabi_dsub+0x42c>
    2c16:	e0de      	b.n	2dd6 <__aeabi_dsub+0x5ea>
    2c18:	000b      	movs	r3, r1
    2c1a:	4313      	orrs	r3, r2
    2c1c:	d100      	bne.n	2c20 <__aeabi_dsub+0x434>
    2c1e:	e66b      	b.n	28f8 <__aeabi_dsub+0x10c>
    2c20:	4452      	add	r2, sl
    2c22:	4552      	cmp	r2, sl
    2c24:	4180      	sbcs	r0, r0
    2c26:	1864      	adds	r4, r4, r1
    2c28:	4240      	negs	r0, r0
    2c2a:	1824      	adds	r4, r4, r0
    2c2c:	0017      	movs	r7, r2
    2c2e:	0223      	lsls	r3, r4, #8
    2c30:	d400      	bmi.n	2c34 <__aeabi_dsub+0x448>
    2c32:	e6fd      	b.n	2a30 <__aeabi_dsub+0x244>
    2c34:	4b77      	ldr	r3, [pc, #476]	; (2e14 <__aeabi_dsub+0x628>)
    2c36:	4666      	mov	r6, ip
    2c38:	401c      	ands	r4, r3
    2c3a:	e65d      	b.n	28f8 <__aeabi_dsub+0x10c>
    2c3c:	0025      	movs	r5, r4
    2c3e:	4650      	mov	r0, sl
    2c40:	4305      	orrs	r5, r0
    2c42:	2e00      	cmp	r6, #0
    2c44:	d1cf      	bne.n	2be6 <__aeabi_dsub+0x3fa>
    2c46:	2d00      	cmp	r5, #0
    2c48:	d14f      	bne.n	2cea <__aeabi_dsub+0x4fe>
    2c4a:	000c      	movs	r4, r1
    2c4c:	4314      	orrs	r4, r2
    2c4e:	d100      	bne.n	2c52 <__aeabi_dsub+0x466>
    2c50:	e0a0      	b.n	2d94 <__aeabi_dsub+0x5a8>
    2c52:	000c      	movs	r4, r1
    2c54:	0017      	movs	r7, r2
    2c56:	4698      	mov	r8, r3
    2c58:	e64e      	b.n	28f8 <__aeabi_dsub+0x10c>
    2c5a:	4666      	mov	r6, ip
    2c5c:	2400      	movs	r4, #0
    2c5e:	2700      	movs	r7, #0
    2c60:	e685      	b.n	296e <__aeabi_dsub+0x182>
    2c62:	001f      	movs	r7, r3
    2c64:	0008      	movs	r0, r1
    2c66:	3f20      	subs	r7, #32
    2c68:	40f8      	lsrs	r0, r7
    2c6a:	0007      	movs	r7, r0
    2c6c:	2b20      	cmp	r3, #32
    2c6e:	d100      	bne.n	2c72 <__aeabi_dsub+0x486>
    2c70:	e08e      	b.n	2d90 <__aeabi_dsub+0x5a4>
    2c72:	2040      	movs	r0, #64	; 0x40
    2c74:	1ac3      	subs	r3, r0, r3
    2c76:	4099      	lsls	r1, r3
    2c78:	430a      	orrs	r2, r1
    2c7a:	1e51      	subs	r1, r2, #1
    2c7c:	418a      	sbcs	r2, r1
    2c7e:	2100      	movs	r1, #0
    2c80:	4317      	orrs	r7, r2
    2c82:	e692      	b.n	29aa <__aeabi_dsub+0x1be>
    2c84:	2e00      	cmp	r6, #0
    2c86:	d114      	bne.n	2cb2 <__aeabi_dsub+0x4c6>
    2c88:	0026      	movs	r6, r4
    2c8a:	4650      	mov	r0, sl
    2c8c:	4306      	orrs	r6, r0
    2c8e:	d062      	beq.n	2d56 <__aeabi_dsub+0x56a>
    2c90:	43db      	mvns	r3, r3
    2c92:	2b00      	cmp	r3, #0
    2c94:	d15c      	bne.n	2d50 <__aeabi_dsub+0x564>
    2c96:	1887      	adds	r7, r0, r2
    2c98:	4297      	cmp	r7, r2
    2c9a:	4192      	sbcs	r2, r2
    2c9c:	1864      	adds	r4, r4, r1
    2c9e:	4252      	negs	r2, r2
    2ca0:	18a4      	adds	r4, r4, r2
    2ca2:	4666      	mov	r6, ip
    2ca4:	e687      	b.n	29b6 <__aeabi_dsub+0x1ca>
    2ca6:	4650      	mov	r0, sl
    2ca8:	4320      	orrs	r0, r4
    2caa:	1e44      	subs	r4, r0, #1
    2cac:	41a0      	sbcs	r0, r4
    2cae:	2400      	movs	r4, #0
    2cb0:	e760      	b.n	2b74 <__aeabi_dsub+0x388>
    2cb2:	4e57      	ldr	r6, [pc, #348]	; (2e10 <__aeabi_dsub+0x624>)
    2cb4:	45b4      	cmp	ip, r6
    2cb6:	d04e      	beq.n	2d56 <__aeabi_dsub+0x56a>
    2cb8:	2680      	movs	r6, #128	; 0x80
    2cba:	0436      	lsls	r6, r6, #16
    2cbc:	425b      	negs	r3, r3
    2cbe:	4334      	orrs	r4, r6
    2cc0:	2b38      	cmp	r3, #56	; 0x38
    2cc2:	dd00      	ble.n	2cc6 <__aeabi_dsub+0x4da>
    2cc4:	e07f      	b.n	2dc6 <__aeabi_dsub+0x5da>
    2cc6:	2b1f      	cmp	r3, #31
    2cc8:	dd00      	ble.n	2ccc <__aeabi_dsub+0x4e0>
    2cca:	e08b      	b.n	2de4 <__aeabi_dsub+0x5f8>
    2ccc:	2620      	movs	r6, #32
    2cce:	0027      	movs	r7, r4
    2cd0:	4650      	mov	r0, sl
    2cd2:	1af6      	subs	r6, r6, r3
    2cd4:	40b7      	lsls	r7, r6
    2cd6:	40d8      	lsrs	r0, r3
    2cd8:	4307      	orrs	r7, r0
    2cda:	4650      	mov	r0, sl
    2cdc:	40b0      	lsls	r0, r6
    2cde:	1e46      	subs	r6, r0, #1
    2ce0:	41b0      	sbcs	r0, r6
    2ce2:	4307      	orrs	r7, r0
    2ce4:	40dc      	lsrs	r4, r3
    2ce6:	18bf      	adds	r7, r7, r2
    2ce8:	e7d6      	b.n	2c98 <__aeabi_dsub+0x4ac>
    2cea:	000d      	movs	r5, r1
    2cec:	4315      	orrs	r5, r2
    2cee:	d100      	bne.n	2cf2 <__aeabi_dsub+0x506>
    2cf0:	e602      	b.n	28f8 <__aeabi_dsub+0x10c>
    2cf2:	4650      	mov	r0, sl
    2cf4:	1a80      	subs	r0, r0, r2
    2cf6:	4582      	cmp	sl, r0
    2cf8:	41bf      	sbcs	r7, r7
    2cfa:	1a65      	subs	r5, r4, r1
    2cfc:	427f      	negs	r7, r7
    2cfe:	1bed      	subs	r5, r5, r7
    2d00:	4684      	mov	ip, r0
    2d02:	0228      	lsls	r0, r5, #8
    2d04:	d400      	bmi.n	2d08 <__aeabi_dsub+0x51c>
    2d06:	e68d      	b.n	2a24 <__aeabi_dsub+0x238>
    2d08:	4650      	mov	r0, sl
    2d0a:	1a17      	subs	r7, r2, r0
    2d0c:	42ba      	cmp	r2, r7
    2d0e:	4192      	sbcs	r2, r2
    2d10:	1b0c      	subs	r4, r1, r4
    2d12:	4252      	negs	r2, r2
    2d14:	1aa4      	subs	r4, r4, r2
    2d16:	4698      	mov	r8, r3
    2d18:	e5ee      	b.n	28f8 <__aeabi_dsub+0x10c>
    2d1a:	000d      	movs	r5, r1
    2d1c:	4315      	orrs	r5, r2
    2d1e:	d100      	bne.n	2d22 <__aeabi_dsub+0x536>
    2d20:	e76b      	b.n	2bfa <__aeabi_dsub+0x40e>
    2d22:	4650      	mov	r0, sl
    2d24:	0767      	lsls	r7, r4, #29
    2d26:	08c0      	lsrs	r0, r0, #3
    2d28:	4307      	orrs	r7, r0
    2d2a:	2080      	movs	r0, #128	; 0x80
    2d2c:	08e4      	lsrs	r4, r4, #3
    2d2e:	0300      	lsls	r0, r0, #12
    2d30:	4204      	tst	r4, r0
    2d32:	d007      	beq.n	2d44 <__aeabi_dsub+0x558>
    2d34:	08cd      	lsrs	r5, r1, #3
    2d36:	4205      	tst	r5, r0
    2d38:	d104      	bne.n	2d44 <__aeabi_dsub+0x558>
    2d3a:	002c      	movs	r4, r5
    2d3c:	4698      	mov	r8, r3
    2d3e:	08d7      	lsrs	r7, r2, #3
    2d40:	0749      	lsls	r1, r1, #29
    2d42:	430f      	orrs	r7, r1
    2d44:	0f7b      	lsrs	r3, r7, #29
    2d46:	00e4      	lsls	r4, r4, #3
    2d48:	431c      	orrs	r4, r3
    2d4a:	00ff      	lsls	r7, r7, #3
    2d4c:	4e30      	ldr	r6, [pc, #192]	; (2e10 <__aeabi_dsub+0x624>)
    2d4e:	e5d3      	b.n	28f8 <__aeabi_dsub+0x10c>
    2d50:	4e2f      	ldr	r6, [pc, #188]	; (2e10 <__aeabi_dsub+0x624>)
    2d52:	45b4      	cmp	ip, r6
    2d54:	d1b4      	bne.n	2cc0 <__aeabi_dsub+0x4d4>
    2d56:	000c      	movs	r4, r1
    2d58:	0017      	movs	r7, r2
    2d5a:	4666      	mov	r6, ip
    2d5c:	e5cc      	b.n	28f8 <__aeabi_dsub+0x10c>
    2d5e:	2700      	movs	r7, #0
    2d60:	2400      	movs	r4, #0
    2d62:	e5e8      	b.n	2936 <__aeabi_dsub+0x14a>
    2d64:	2b00      	cmp	r3, #0
    2d66:	d039      	beq.n	2ddc <__aeabi_dsub+0x5f0>
    2d68:	000b      	movs	r3, r1
    2d6a:	4313      	orrs	r3, r2
    2d6c:	d100      	bne.n	2d70 <__aeabi_dsub+0x584>
    2d6e:	e744      	b.n	2bfa <__aeabi_dsub+0x40e>
    2d70:	08c0      	lsrs	r0, r0, #3
    2d72:	0767      	lsls	r7, r4, #29
    2d74:	4307      	orrs	r7, r0
    2d76:	2080      	movs	r0, #128	; 0x80
    2d78:	08e4      	lsrs	r4, r4, #3
    2d7a:	0300      	lsls	r0, r0, #12
    2d7c:	4204      	tst	r4, r0
    2d7e:	d0e1      	beq.n	2d44 <__aeabi_dsub+0x558>
    2d80:	08cb      	lsrs	r3, r1, #3
    2d82:	4203      	tst	r3, r0
    2d84:	d1de      	bne.n	2d44 <__aeabi_dsub+0x558>
    2d86:	08d7      	lsrs	r7, r2, #3
    2d88:	0749      	lsls	r1, r1, #29
    2d8a:	430f      	orrs	r7, r1
    2d8c:	001c      	movs	r4, r3
    2d8e:	e7d9      	b.n	2d44 <__aeabi_dsub+0x558>
    2d90:	2100      	movs	r1, #0
    2d92:	e771      	b.n	2c78 <__aeabi_dsub+0x48c>
    2d94:	2500      	movs	r5, #0
    2d96:	2700      	movs	r7, #0
    2d98:	e5e9      	b.n	296e <__aeabi_dsub+0x182>
    2d9a:	002e      	movs	r6, r5
    2d9c:	0027      	movs	r7, r4
    2d9e:	3e20      	subs	r6, #32
    2da0:	40f7      	lsrs	r7, r6
    2da2:	2d20      	cmp	r5, #32
    2da4:	d02f      	beq.n	2e06 <__aeabi_dsub+0x61a>
    2da6:	2640      	movs	r6, #64	; 0x40
    2da8:	1b75      	subs	r5, r6, r5
    2daa:	40ac      	lsls	r4, r5
    2dac:	4650      	mov	r0, sl
    2dae:	4320      	orrs	r0, r4
    2db0:	1e44      	subs	r4, r0, #1
    2db2:	41a0      	sbcs	r0, r4
    2db4:	2400      	movs	r4, #0
    2db6:	4338      	orrs	r0, r7
    2db8:	e6dc      	b.n	2b74 <__aeabi_dsub+0x388>
    2dba:	2480      	movs	r4, #128	; 0x80
    2dbc:	2500      	movs	r5, #0
    2dbe:	0324      	lsls	r4, r4, #12
    2dc0:	4e13      	ldr	r6, [pc, #76]	; (2e10 <__aeabi_dsub+0x624>)
    2dc2:	2700      	movs	r7, #0
    2dc4:	e5d3      	b.n	296e <__aeabi_dsub+0x182>
    2dc6:	4650      	mov	r0, sl
    2dc8:	4320      	orrs	r0, r4
    2dca:	0007      	movs	r7, r0
    2dcc:	1e78      	subs	r0, r7, #1
    2dce:	4187      	sbcs	r7, r0
    2dd0:	2400      	movs	r4, #0
    2dd2:	18bf      	adds	r7, r7, r2
    2dd4:	e760      	b.n	2c98 <__aeabi_dsub+0x4ac>
    2dd6:	000c      	movs	r4, r1
    2dd8:	0017      	movs	r7, r2
    2dda:	e58d      	b.n	28f8 <__aeabi_dsub+0x10c>
    2ddc:	000c      	movs	r4, r1
    2dde:	0017      	movs	r7, r2
    2de0:	4e0b      	ldr	r6, [pc, #44]	; (2e10 <__aeabi_dsub+0x624>)
    2de2:	e589      	b.n	28f8 <__aeabi_dsub+0x10c>
    2de4:	001e      	movs	r6, r3
    2de6:	0027      	movs	r7, r4
    2de8:	3e20      	subs	r6, #32
    2dea:	40f7      	lsrs	r7, r6
    2dec:	2b20      	cmp	r3, #32
    2dee:	d00c      	beq.n	2e0a <__aeabi_dsub+0x61e>
    2df0:	2640      	movs	r6, #64	; 0x40
    2df2:	1af3      	subs	r3, r6, r3
    2df4:	409c      	lsls	r4, r3
    2df6:	4650      	mov	r0, sl
    2df8:	4320      	orrs	r0, r4
    2dfa:	1e44      	subs	r4, r0, #1
    2dfc:	41a0      	sbcs	r0, r4
    2dfe:	4307      	orrs	r7, r0
    2e00:	2400      	movs	r4, #0
    2e02:	18bf      	adds	r7, r7, r2
    2e04:	e748      	b.n	2c98 <__aeabi_dsub+0x4ac>
    2e06:	2400      	movs	r4, #0
    2e08:	e7d0      	b.n	2dac <__aeabi_dsub+0x5c0>
    2e0a:	2400      	movs	r4, #0
    2e0c:	e7f3      	b.n	2df6 <__aeabi_dsub+0x60a>
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	000007ff 	.word	0x000007ff
    2e14:	ff7fffff 	.word	0xff7fffff

00002e18 <__aeabi_d2iz>:
    2e18:	b530      	push	{r4, r5, lr}
    2e1a:	4d13      	ldr	r5, [pc, #76]	; (2e68 <__aeabi_d2iz+0x50>)
    2e1c:	030a      	lsls	r2, r1, #12
    2e1e:	004b      	lsls	r3, r1, #1
    2e20:	0b12      	lsrs	r2, r2, #12
    2e22:	0d5b      	lsrs	r3, r3, #21
    2e24:	0fc9      	lsrs	r1, r1, #31
    2e26:	2400      	movs	r4, #0
    2e28:	42ab      	cmp	r3, r5
    2e2a:	dd10      	ble.n	2e4e <__aeabi_d2iz+0x36>
    2e2c:	4c0f      	ldr	r4, [pc, #60]	; (2e6c <__aeabi_d2iz+0x54>)
    2e2e:	42a3      	cmp	r3, r4
    2e30:	dc0f      	bgt.n	2e52 <__aeabi_d2iz+0x3a>
    2e32:	2480      	movs	r4, #128	; 0x80
    2e34:	4d0e      	ldr	r5, [pc, #56]	; (2e70 <__aeabi_d2iz+0x58>)
    2e36:	0364      	lsls	r4, r4, #13
    2e38:	4322      	orrs	r2, r4
    2e3a:	1aed      	subs	r5, r5, r3
    2e3c:	2d1f      	cmp	r5, #31
    2e3e:	dd0b      	ble.n	2e58 <__aeabi_d2iz+0x40>
    2e40:	480c      	ldr	r0, [pc, #48]	; (2e74 <__aeabi_d2iz+0x5c>)
    2e42:	1ac3      	subs	r3, r0, r3
    2e44:	40da      	lsrs	r2, r3
    2e46:	4254      	negs	r4, r2
    2e48:	2900      	cmp	r1, #0
    2e4a:	d100      	bne.n	2e4e <__aeabi_d2iz+0x36>
    2e4c:	0014      	movs	r4, r2
    2e4e:	0020      	movs	r0, r4
    2e50:	bd30      	pop	{r4, r5, pc}
    2e52:	4b09      	ldr	r3, [pc, #36]	; (2e78 <__aeabi_d2iz+0x60>)
    2e54:	18cc      	adds	r4, r1, r3
    2e56:	e7fa      	b.n	2e4e <__aeabi_d2iz+0x36>
    2e58:	4c08      	ldr	r4, [pc, #32]	; (2e7c <__aeabi_d2iz+0x64>)
    2e5a:	40e8      	lsrs	r0, r5
    2e5c:	46a4      	mov	ip, r4
    2e5e:	4463      	add	r3, ip
    2e60:	409a      	lsls	r2, r3
    2e62:	4302      	orrs	r2, r0
    2e64:	e7ef      	b.n	2e46 <__aeabi_d2iz+0x2e>
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	000003fe 	.word	0x000003fe
    2e6c:	0000041d 	.word	0x0000041d
    2e70:	00000433 	.word	0x00000433
    2e74:	00000413 	.word	0x00000413
    2e78:	7fffffff 	.word	0x7fffffff
    2e7c:	fffffbed 	.word	0xfffffbed

00002e80 <__aeabi_ui2d>:
    2e80:	b510      	push	{r4, lr}
    2e82:	1e04      	subs	r4, r0, #0
    2e84:	d028      	beq.n	2ed8 <__aeabi_ui2d+0x58>
    2e86:	f000 f833 	bl	2ef0 <__clzsi2>
    2e8a:	4b15      	ldr	r3, [pc, #84]	; (2ee0 <__aeabi_ui2d+0x60>)
    2e8c:	4a15      	ldr	r2, [pc, #84]	; (2ee4 <__aeabi_ui2d+0x64>)
    2e8e:	1a1b      	subs	r3, r3, r0
    2e90:	1ad2      	subs	r2, r2, r3
    2e92:	2a1f      	cmp	r2, #31
    2e94:	dd15      	ble.n	2ec2 <__aeabi_ui2d+0x42>
    2e96:	4a14      	ldr	r2, [pc, #80]	; (2ee8 <__aeabi_ui2d+0x68>)
    2e98:	1ad2      	subs	r2, r2, r3
    2e9a:	4094      	lsls	r4, r2
    2e9c:	2200      	movs	r2, #0
    2e9e:	0324      	lsls	r4, r4, #12
    2ea0:	055b      	lsls	r3, r3, #21
    2ea2:	0b24      	lsrs	r4, r4, #12
    2ea4:	0d5b      	lsrs	r3, r3, #21
    2ea6:	2100      	movs	r1, #0
    2ea8:	0010      	movs	r0, r2
    2eaa:	0324      	lsls	r4, r4, #12
    2eac:	0d0a      	lsrs	r2, r1, #20
    2eae:	0b24      	lsrs	r4, r4, #12
    2eb0:	0512      	lsls	r2, r2, #20
    2eb2:	4322      	orrs	r2, r4
    2eb4:	4c0d      	ldr	r4, [pc, #52]	; (2eec <__aeabi_ui2d+0x6c>)
    2eb6:	051b      	lsls	r3, r3, #20
    2eb8:	4022      	ands	r2, r4
    2eba:	4313      	orrs	r3, r2
    2ebc:	005b      	lsls	r3, r3, #1
    2ebe:	0859      	lsrs	r1, r3, #1
    2ec0:	bd10      	pop	{r4, pc}
    2ec2:	0021      	movs	r1, r4
    2ec4:	4091      	lsls	r1, r2
    2ec6:	000a      	movs	r2, r1
    2ec8:	210b      	movs	r1, #11
    2eca:	1a08      	subs	r0, r1, r0
    2ecc:	40c4      	lsrs	r4, r0
    2ece:	055b      	lsls	r3, r3, #21
    2ed0:	0324      	lsls	r4, r4, #12
    2ed2:	0b24      	lsrs	r4, r4, #12
    2ed4:	0d5b      	lsrs	r3, r3, #21
    2ed6:	e7e6      	b.n	2ea6 <__aeabi_ui2d+0x26>
    2ed8:	2300      	movs	r3, #0
    2eda:	2400      	movs	r4, #0
    2edc:	2200      	movs	r2, #0
    2ede:	e7e2      	b.n	2ea6 <__aeabi_ui2d+0x26>
    2ee0:	0000041e 	.word	0x0000041e
    2ee4:	00000433 	.word	0x00000433
    2ee8:	00000413 	.word	0x00000413
    2eec:	800fffff 	.word	0x800fffff

00002ef0 <__clzsi2>:
    2ef0:	211c      	movs	r1, #28
    2ef2:	2301      	movs	r3, #1
    2ef4:	041b      	lsls	r3, r3, #16
    2ef6:	4298      	cmp	r0, r3
    2ef8:	d301      	bcc.n	2efe <__clzsi2+0xe>
    2efa:	0c00      	lsrs	r0, r0, #16
    2efc:	3910      	subs	r1, #16
    2efe:	0a1b      	lsrs	r3, r3, #8
    2f00:	4298      	cmp	r0, r3
    2f02:	d301      	bcc.n	2f08 <__clzsi2+0x18>
    2f04:	0a00      	lsrs	r0, r0, #8
    2f06:	3908      	subs	r1, #8
    2f08:	091b      	lsrs	r3, r3, #4
    2f0a:	4298      	cmp	r0, r3
    2f0c:	d301      	bcc.n	2f12 <__clzsi2+0x22>
    2f0e:	0900      	lsrs	r0, r0, #4
    2f10:	3904      	subs	r1, #4
    2f12:	a202      	add	r2, pc, #8	; (adr r2, 2f1c <__clzsi2+0x2c>)
    2f14:	5c10      	ldrb	r0, [r2, r0]
    2f16:	1840      	adds	r0, r0, r1
    2f18:	4770      	bx	lr
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	02020304 	.word	0x02020304
    2f20:	01010101 	.word	0x01010101
	...

00002f2c <__libc_init_array>:
    2f2c:	b570      	push	{r4, r5, r6, lr}
    2f2e:	2600      	movs	r6, #0
    2f30:	4d0c      	ldr	r5, [pc, #48]	; (2f64 <__libc_init_array+0x38>)
    2f32:	4c0d      	ldr	r4, [pc, #52]	; (2f68 <__libc_init_array+0x3c>)
    2f34:	1b64      	subs	r4, r4, r5
    2f36:	10a4      	asrs	r4, r4, #2
    2f38:	42a6      	cmp	r6, r4
    2f3a:	d109      	bne.n	2f50 <__libc_init_array+0x24>
    2f3c:	2600      	movs	r6, #0
    2f3e:	f000 f889 	bl	3054 <_init>
    2f42:	4d0a      	ldr	r5, [pc, #40]	; (2f6c <__libc_init_array+0x40>)
    2f44:	4c0a      	ldr	r4, [pc, #40]	; (2f70 <__libc_init_array+0x44>)
    2f46:	1b64      	subs	r4, r4, r5
    2f48:	10a4      	asrs	r4, r4, #2
    2f4a:	42a6      	cmp	r6, r4
    2f4c:	d105      	bne.n	2f5a <__libc_init_array+0x2e>
    2f4e:	bd70      	pop	{r4, r5, r6, pc}
    2f50:	00b3      	lsls	r3, r6, #2
    2f52:	58eb      	ldr	r3, [r5, r3]
    2f54:	4798      	blx	r3
    2f56:	3601      	adds	r6, #1
    2f58:	e7ee      	b.n	2f38 <__libc_init_array+0xc>
    2f5a:	00b3      	lsls	r3, r6, #2
    2f5c:	58eb      	ldr	r3, [r5, r3]
    2f5e:	4798      	blx	r3
    2f60:	3601      	adds	r6, #1
    2f62:	e7f2      	b.n	2f4a <__libc_init_array+0x1e>
    2f64:	00003060 	.word	0x00003060
    2f68:	00003060 	.word	0x00003060
    2f6c:	00003060 	.word	0x00003060
    2f70:	00003064 	.word	0x00003064
    2f74:	42000800 	.word	0x42000800
    2f78:	42000c00 	.word	0x42000c00
    2f7c:	42001000 	.word	0x42001000
    2f80:	42001400 	.word	0x42001400
    2f84:	42001800 	.word	0x42001800
    2f88:	42001c00 	.word	0x42001c00
    2f8c:	00000cea 	.word	0x00000cea
    2f90:	00000ce6 	.word	0x00000ce6
    2f94:	00000ce6 	.word	0x00000ce6
    2f98:	00000d4c 	.word	0x00000d4c
    2f9c:	00000d4c 	.word	0x00000d4c
    2fa0:	00000cfe 	.word	0x00000cfe
    2fa4:	00000cf0 	.word	0x00000cf0
    2fa8:	00000d04 	.word	0x00000d04
    2fac:	00000d3a 	.word	0x00000d3a
    2fb0:	00000dd4 	.word	0x00000dd4
    2fb4:	00000db4 	.word	0x00000db4
    2fb8:	00000db4 	.word	0x00000db4
    2fbc:	00000e40 	.word	0x00000e40
    2fc0:	00000dc6 	.word	0x00000dc6
    2fc4:	00000de2 	.word	0x00000de2
    2fc8:	00000db8 	.word	0x00000db8
    2fcc:	00000df0 	.word	0x00000df0
    2fd0:	00000e30 	.word	0x00000e30
    2fd4:	00001e7c 	.word	0x00001e7c
    2fd8:	00001e5e 	.word	0x00001e5e
    2fdc:	00001e18 	.word	0x00001e18
    2fe0:	00001d36 	.word	0x00001d36
    2fe4:	00001e18 	.word	0x00001e18
    2fe8:	00001e50 	.word	0x00001e50
    2fec:	00001e18 	.word	0x00001e18
    2ff0:	00001d36 	.word	0x00001d36
    2ff4:	00001e5e 	.word	0x00001e5e
    2ff8:	00001e5e 	.word	0x00001e5e
    2ffc:	00001e50 	.word	0x00001e50
    3000:	00001d36 	.word	0x00001d36
    3004:	00001d2e 	.word	0x00001d2e
    3008:	00001d2e 	.word	0x00001d2e
    300c:	00001d2e 	.word	0x00001d2e
    3010:	00002094 	.word	0x00002094
    3014:	000024dc 	.word	0x000024dc
    3018:	0000239c 	.word	0x0000239c
    301c:	0000239c 	.word	0x0000239c
    3020:	00002398 	.word	0x00002398
    3024:	000024b4 	.word	0x000024b4
    3028:	000024b4 	.word	0x000024b4
    302c:	000024a6 	.word	0x000024a6
    3030:	00002398 	.word	0x00002398
    3034:	000024b4 	.word	0x000024b4
    3038:	000024a6 	.word	0x000024a6
    303c:	000024b4 	.word	0x000024b4
    3040:	00002398 	.word	0x00002398
    3044:	000024bc 	.word	0x000024bc
    3048:	000024bc 	.word	0x000024bc
    304c:	000024bc 	.word	0x000024bc
    3050:	000026c0 	.word	0x000026c0

00003054 <_init>:
    3054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	bcf8      	pop	{r3, r4, r5, r6, r7}
    305a:	bc08      	pop	{r3}
    305c:	469e      	mov	lr, r3
    305e:	4770      	bx	lr

00003060 <__init_array_start>:
    3060:	000000dd 	.word	0x000000dd

00003064 <_fini>:
    3064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	bcf8      	pop	{r3, r4, r5, r6, r7}
    306a:	bc08      	pop	{r3}
    306c:	469e      	mov	lr, r3
    306e:	4770      	bx	lr

00003070 <__fini_array_start>:
    3070:	000000b5 	.word	0x000000b5
