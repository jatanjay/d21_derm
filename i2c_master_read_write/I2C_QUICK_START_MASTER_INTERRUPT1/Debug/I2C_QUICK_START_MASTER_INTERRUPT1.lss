
I2C_QUICK_START_MASTER_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00002e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  2000000c  00002e70  0002000c  2**2
                  ALLOC
  3 .stack        00002004  200000c4  00002f28  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f4cd  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b27  00000000  00000000  0003f55a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000410  00000000  00000000  00042081  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000003b8  00000000  00000000  00042491  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001966e  00000000  00000000  00042849  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008f3d  00000000  00000000  0005beb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008dcb5  00000000  00000000  00064df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b60  00000000  00000000  000f2aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e22  00000000  00000000  000f360c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 20 00 20 0d 11 00 00 09 11 00 00 09 11 00 00     . . ............
	...
      2c:	09 11 00 00 00 00 00 00 00 00 00 00 09 11 00 00     ................
      3c:	09 11 00 00 09 11 00 00 09 11 00 00 09 11 00 00     ................
      4c:	09 11 00 00 09 11 00 00 09 11 00 00 09 11 00 00     ................
      5c:	09 11 00 00 09 11 00 00 f1 0a 00 00 01 0b 00 00     ................
      6c:	11 0b 00 00 21 0b 00 00 31 0b 00 00 41 0b 00 00     ....!...1...A...
      7c:	09 11 00 00 09 11 00 00 09 11 00 00 09 11 00 00     ................
      8c:	09 11 00 00 09 11 00 00 09 11 00 00 09 11 00 00     ................
      9c:	09 11 00 00 09 11 00 00 09 11 00 00 09 11 00 00     ................
      ac:	09 11 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00002e64 	.word	0x00002e64

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00002e64 	.word	0x00002e64
     10c:	00002e64 	.word	0x00002e64
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	2b00      	cmp	r3, #0
     11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     120:	2b00      	cmp	r3, #0
     122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     124:	2200      	movs	r2, #0
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
     128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
     12c:	6813      	ldr	r3, [r2, #0]
     12e:	3301      	adds	r3, #1
     130:	6013      	str	r3, [r2, #0]
}
     132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     134:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     13a:	2200      	movs	r2, #0
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
     13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     140:	3201      	adds	r2, #1
     142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
     144:	701a      	strb	r2, [r3, #0]
     146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
     148:	20000028 	.word	0x20000028
     14c:	2000002c 	.word	0x2000002c
     150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	3a01      	subs	r2, #1
     15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     15c:	681b      	ldr	r3, [r3, #0]
     15e:	2b00      	cmp	r3, #0
     160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
     162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     16a:	2201      	movs	r2, #1
     16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
     16e:	701a      	strb	r2, [r3, #0]
     170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     174:	b662      	cpsie	i
	}
}
     176:	4770      	bx	lr
     178:	20000028 	.word	0x20000028
     17c:	2000002c 	.word	0x2000002c
     180:	20000000 	.word	0x20000000

00000184 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     188:	ac01      	add	r4, sp, #4
     18a:	2501      	movs	r5, #1
     18c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18e:	2700      	movs	r7, #0
     190:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     194:	0021      	movs	r1, r4
     196:	203e      	movs	r0, #62	; 0x3e
     198:	4e06      	ldr	r6, [pc, #24]	; (1b4 <system_board_init+0x30>)
     19a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	05d2      	lsls	r2, r2, #23
     1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_board_init+0x34>)
     1a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a8:	0021      	movs	r1, r4
     1aa:	200f      	movs	r0, #15
     1ac:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     1ae:	b003      	add	sp, #12
     1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	000001bd 	.word	0x000001bd
     1b8:	41004480 	.word	0x41004480

000001bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1bc:	b500      	push	{lr}
     1be:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1c0:	ab01      	add	r3, sp, #4
     1c2:	2280      	movs	r2, #128	; 0x80
     1c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1c6:	780a      	ldrb	r2, [r1, #0]
     1c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1ca:	784a      	ldrb	r2, [r1, #1]
     1cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1ce:	788a      	ldrb	r2, [r1, #2]
     1d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1d2:	0019      	movs	r1, r3
     1d4:	4b01      	ldr	r3, [pc, #4]	; (1dc <port_pin_set_config+0x20>)
     1d6:	4798      	blx	r3
}
     1d8:	b003      	add	sp, #12
     1da:	bd00      	pop	{pc}
     1dc:	000010a9 	.word	0x000010a9

000001e0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e2:	46d6      	mov	lr, sl
     1e4:	464f      	mov	r7, r9
     1e6:	4646      	mov	r6, r8
     1e8:	b5c0      	push	{r6, r7, lr}
     1ea:	b08a      	sub	sp, #40	; 0x28
     1ec:	0006      	movs	r6, r0
     1ee:	000f      	movs	r7, r1
     1f0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     1f2:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1f4:	0008      	movs	r0, r1
     1f6:	4ba0      	ldr	r3, [pc, #640]	; (478 <i2c_master_init+0x298>)
     1f8:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1fa:	4aa0      	ldr	r2, [pc, #640]	; (47c <i2c_master_init+0x29c>)
     1fc:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1fe:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     200:	2301      	movs	r3, #1
     202:	40ab      	lsls	r3, r5
     204:	430b      	orrs	r3, r1
     206:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     208:	a909      	add	r1, sp, #36	; 0x24
     20a:	7b23      	ldrb	r3, [r4, #12]
     20c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     20e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     210:	b2c5      	uxtb	r5, r0
     212:	0028      	movs	r0, r5
     214:	4b9a      	ldr	r3, [pc, #616]	; (480 <i2c_master_init+0x2a0>)
     216:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     218:	0028      	movs	r0, r5
     21a:	4b9a      	ldr	r3, [pc, #616]	; (484 <i2c_master_init+0x2a4>)
     21c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     21e:	7b20      	ldrb	r0, [r4, #12]
     220:	2100      	movs	r1, #0
     222:	4b99      	ldr	r3, [pc, #612]	; (488 <i2c_master_init+0x2a8>)
     224:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     226:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     228:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     22a:	079b      	lsls	r3, r3, #30
     22c:	d505      	bpl.n	23a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     22e:	b00a      	add	sp, #40	; 0x28
     230:	bc1c      	pop	{r2, r3, r4}
     232:	4690      	mov	r8, r2
     234:	4699      	mov	r9, r3
     236:	46a2      	mov	sl, r4
     238:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     23a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     23c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     23e:	07db      	lsls	r3, r3, #31
     240:	d4f5      	bmi.n	22e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     242:	6830      	ldr	r0, [r6, #0]
     244:	4b8c      	ldr	r3, [pc, #560]	; (478 <i2c_master_init+0x298>)
     246:	4699      	mov	r9, r3
     248:	4798      	blx	r3
     24a:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     24c:	498f      	ldr	r1, [pc, #572]	; (48c <i2c_master_init+0x2ac>)
     24e:	4b90      	ldr	r3, [pc, #576]	; (490 <i2c_master_init+0x2b0>)
     250:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     252:	00ad      	lsls	r5, r5, #2
     254:	4b8f      	ldr	r3, [pc, #572]	; (494 <i2c_master_init+0x2b4>)
     256:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     258:	2300      	movs	r3, #0
     25a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     25c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     25e:	2500      	movs	r5, #0
     260:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     262:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     264:	2225      	movs	r2, #37	; 0x25
     266:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     268:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     26a:	3314      	adds	r3, #20
     26c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     26e:	6833      	ldr	r3, [r6, #0]
     270:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     272:	0018      	movs	r0, r3
     274:	47c8      	blx	r9
     276:	4681      	mov	r9, r0
     278:	2380      	movs	r3, #128	; 0x80
     27a:	aa08      	add	r2, sp, #32
     27c:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     27e:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     280:	2301      	movs	r3, #1
     282:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     284:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     286:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     288:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     28a:	2800      	cmp	r0, #0
     28c:	d100      	bne.n	290 <i2c_master_init+0xb0>
     28e:	e0af      	b.n	3f0 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     290:	ab08      	add	r3, sp, #32
     292:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     294:	2302      	movs	r3, #2
     296:	aa08      	add	r2, sp, #32
     298:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     29a:	0c00      	lsrs	r0, r0, #16
     29c:	b2c0      	uxtb	r0, r0
     29e:	0011      	movs	r1, r2
     2a0:	4b7d      	ldr	r3, [pc, #500]	; (498 <i2c_master_init+0x2b8>)
     2a2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     2a4:	2f00      	cmp	r7, #0
     2a6:	d100      	bne.n	2aa <i2c_master_init+0xca>
     2a8:	e0a7      	b.n	3fa <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     2aa:	ab08      	add	r3, sp, #32
     2ac:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2ae:	2302      	movs	r3, #2
     2b0:	aa08      	add	r2, sp, #32
     2b2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     2b4:	0c3f      	lsrs	r7, r7, #16
     2b6:	b2f8      	uxtb	r0, r7
     2b8:	0011      	movs	r1, r2
     2ba:	4b77      	ldr	r3, [pc, #476]	; (498 <i2c_master_init+0x2b8>)
     2bc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     2be:	8aa3      	ldrh	r3, [r4, #20]
     2c0:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     2c2:	8ae3      	ldrh	r3, [r4, #22]
     2c4:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     2c6:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2c8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     2ca:	2b00      	cmp	r3, #0
     2cc:	d104      	bne.n	2d8 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2ce:	4b73      	ldr	r3, [pc, #460]	; (49c <i2c_master_init+0x2bc>)
     2d0:	789b      	ldrb	r3, [r3, #2]
     2d2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2d4:	0fdb      	lsrs	r3, r3, #31
     2d6:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     2d8:	68a1      	ldr	r1, [r4, #8]
     2da:	6923      	ldr	r3, [r4, #16]
     2dc:	430b      	orrs	r3, r1
     2de:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     2e0:	2224      	movs	r2, #36	; 0x24
     2e2:	5ca2      	ldrb	r2, [r4, r2]
     2e4:	2a00      	cmp	r2, #0
     2e6:	d002      	beq.n	2ee <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2e8:	2280      	movs	r2, #128	; 0x80
     2ea:	05d2      	lsls	r2, r2, #23
     2ec:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     2ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2f0:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     2f2:	222c      	movs	r2, #44	; 0x2c
     2f4:	5ca2      	ldrb	r2, [r4, r2]
     2f6:	2a00      	cmp	r2, #0
     2f8:	d103      	bne.n	302 <i2c_master_init+0x122>
     2fa:	2280      	movs	r2, #128	; 0x80
     2fc:	0492      	lsls	r2, r2, #18
     2fe:	4291      	cmp	r1, r2
     300:	d102      	bne.n	308 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     302:	2280      	movs	r2, #128	; 0x80
     304:	0512      	lsls	r2, r2, #20
     306:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     308:	222d      	movs	r2, #45	; 0x2d
     30a:	5ca2      	ldrb	r2, [r4, r2]
     30c:	2a00      	cmp	r2, #0
     30e:	d002      	beq.n	316 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     310:	2280      	movs	r2, #128	; 0x80
     312:	0412      	lsls	r2, r2, #16
     314:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     316:	222e      	movs	r2, #46	; 0x2e
     318:	5ca2      	ldrb	r2, [r4, r2]
     31a:	2a00      	cmp	r2, #0
     31c:	d002      	beq.n	324 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     31e:	2280      	movs	r2, #128	; 0x80
     320:	03d2      	lsls	r2, r2, #15
     322:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     324:	4642      	mov	r2, r8
     326:	6812      	ldr	r2, [r2, #0]
     328:	4313      	orrs	r3, r2
     32a:	4642      	mov	r2, r8
     32c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     32e:	2380      	movs	r3, #128	; 0x80
     330:	005b      	lsls	r3, r3, #1
     332:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     334:	4648      	mov	r0, r9
     336:	3014      	adds	r0, #20
     338:	b2c0      	uxtb	r0, r0
     33a:	4b59      	ldr	r3, [pc, #356]	; (4a0 <i2c_master_init+0x2c0>)
     33c:	4798      	blx	r3
     33e:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     340:	23fa      	movs	r3, #250	; 0xfa
     342:	009b      	lsls	r3, r3, #2
     344:	6822      	ldr	r2, [r4, #0]
     346:	435a      	muls	r2, r3
     348:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     34a:	6863      	ldr	r3, [r4, #4]
     34c:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     34e:	4d55      	ldr	r5, [pc, #340]	; (4a4 <i2c_master_init+0x2c4>)
     350:	47a8      	blx	r5
     352:	9000      	str	r0, [sp, #0]
     354:	9101      	str	r1, [sp, #4]
     356:	464b      	mov	r3, r9
     358:	0058      	lsls	r0, r3, #1
     35a:	47a8      	blx	r5
     35c:	9002      	str	r0, [sp, #8]
     35e:	9103      	str	r1, [sp, #12]
     360:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     362:	47a8      	blx	r5
     364:	9004      	str	r0, [sp, #16]
     366:	9105      	str	r1, [sp, #20]
     368:	4f4f      	ldr	r7, [pc, #316]	; (4a8 <i2c_master_init+0x2c8>)
     36a:	4a50      	ldr	r2, [pc, #320]	; (4ac <i2c_master_init+0x2cc>)
     36c:	4b50      	ldr	r3, [pc, #320]	; (4b0 <i2c_master_init+0x2d0>)
     36e:	9800      	ldr	r0, [sp, #0]
     370:	9901      	ldr	r1, [sp, #4]
     372:	47b8      	blx	r7
     374:	0002      	movs	r2, r0
     376:	000b      	movs	r3, r1
     378:	9804      	ldr	r0, [sp, #16]
     37a:	9905      	ldr	r1, [sp, #20]
     37c:	47b8      	blx	r7
     37e:	4e4d      	ldr	r6, [pc, #308]	; (4b4 <i2c_master_init+0x2d4>)
     380:	2200      	movs	r2, #0
     382:	4b4d      	ldr	r3, [pc, #308]	; (4b8 <i2c_master_init+0x2d8>)
     384:	47b0      	blx	r6
     386:	9004      	str	r0, [sp, #16]
     388:	9105      	str	r1, [sp, #20]
     38a:	4648      	mov	r0, r9
     38c:	47a8      	blx	r5
     38e:	0002      	movs	r2, r0
     390:	000b      	movs	r3, r1
     392:	9804      	ldr	r0, [sp, #16]
     394:	9905      	ldr	r1, [sp, #20]
     396:	47b8      	blx	r7
     398:	0002      	movs	r2, r0
     39a:	000b      	movs	r3, r1
     39c:	4d47      	ldr	r5, [pc, #284]	; (4bc <i2c_master_init+0x2dc>)
     39e:	9800      	ldr	r0, [sp, #0]
     3a0:	9901      	ldr	r1, [sp, #4]
     3a2:	47a8      	blx	r5
     3a4:	9a02      	ldr	r2, [sp, #8]
     3a6:	9b03      	ldr	r3, [sp, #12]
     3a8:	47b0      	blx	r6
     3aa:	2200      	movs	r2, #0
     3ac:	4b44      	ldr	r3, [pc, #272]	; (4c0 <i2c_master_init+0x2e0>)
     3ae:	47a8      	blx	r5
     3b0:	9a02      	ldr	r2, [sp, #8]
     3b2:	9b03      	ldr	r3, [sp, #12]
     3b4:	4d43      	ldr	r5, [pc, #268]	; (4c4 <i2c_master_init+0x2e4>)
     3b6:	47a8      	blx	r5
     3b8:	4b43      	ldr	r3, [pc, #268]	; (4c8 <i2c_master_init+0x2e8>)
     3ba:	4798      	blx	r3
     3bc:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     3be:	2380      	movs	r3, #128	; 0x80
     3c0:	049b      	lsls	r3, r3, #18
     3c2:	68a2      	ldr	r2, [r4, #8]
     3c4:	429a      	cmp	r2, r3
     3c6:	d01e      	beq.n	406 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3c8:	0003      	movs	r3, r0
     3ca:	2040      	movs	r0, #64	; 0x40
     3cc:	2dff      	cmp	r5, #255	; 0xff
     3ce:	d900      	bls.n	3d2 <i2c_master_init+0x1f2>
     3d0:	e72d      	b.n	22e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     3d2:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     3d4:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3d6:	25ff      	movs	r5, #255	; 0xff
     3d8:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3da:	0624      	lsls	r4, r4, #24
     3dc:	4325      	orrs	r5, r4
     3de:	0400      	lsls	r0, r0, #16
     3e0:	23ff      	movs	r3, #255	; 0xff
     3e2:	041b      	lsls	r3, r3, #16
     3e4:	4018      	ands	r0, r3
     3e6:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3e8:	4643      	mov	r3, r8
     3ea:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     3ec:	2000      	movs	r0, #0
     3ee:	e71e      	b.n	22e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3f0:	2100      	movs	r1, #0
     3f2:	4640      	mov	r0, r8
     3f4:	4b35      	ldr	r3, [pc, #212]	; (4cc <i2c_master_init+0x2ec>)
     3f6:	4798      	blx	r3
     3f8:	e74a      	b.n	290 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3fa:	2101      	movs	r1, #1
     3fc:	4640      	mov	r0, r8
     3fe:	4b33      	ldr	r3, [pc, #204]	; (4cc <i2c_master_init+0x2ec>)
     400:	4798      	blx	r3
     402:	0007      	movs	r7, r0
     404:	e751      	b.n	2aa <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     406:	26fa      	movs	r6, #250	; 0xfa
     408:	00b6      	lsls	r6, r6, #2
     40a:	4653      	mov	r3, sl
     40c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     40e:	9800      	ldr	r0, [sp, #0]
     410:	9901      	ldr	r1, [sp, #4]
     412:	0002      	movs	r2, r0
     414:	000b      	movs	r3, r1
     416:	4c27      	ldr	r4, [pc, #156]	; (4b4 <i2c_master_init+0x2d4>)
     418:	47a0      	blx	r4
     41a:	9000      	str	r0, [sp, #0]
     41c:	9101      	str	r1, [sp, #4]
     41e:	0030      	movs	r0, r6
     420:	4b20      	ldr	r3, [pc, #128]	; (4a4 <i2c_master_init+0x2c4>)
     422:	4798      	blx	r3
     424:	2200      	movs	r2, #0
     426:	4b2a      	ldr	r3, [pc, #168]	; (4d0 <i2c_master_init+0x2f0>)
     428:	47b8      	blx	r7
     42a:	0002      	movs	r2, r0
     42c:	000b      	movs	r3, r1
     42e:	9800      	ldr	r0, [sp, #0]
     430:	9901      	ldr	r1, [sp, #4]
     432:	4c24      	ldr	r4, [pc, #144]	; (4c4 <i2c_master_init+0x2e4>)
     434:	47a0      	blx	r4
     436:	2200      	movs	r2, #0
     438:	4b21      	ldr	r3, [pc, #132]	; (4c0 <i2c_master_init+0x2e0>)
     43a:	4c20      	ldr	r4, [pc, #128]	; (4bc <i2c_master_init+0x2dc>)
     43c:	47a0      	blx	r4
     43e:	4b22      	ldr	r3, [pc, #136]	; (4c8 <i2c_master_init+0x2e8>)
     440:	4798      	blx	r3
     442:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     444:	d00c      	beq.n	460 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     446:	0031      	movs	r1, r6
     448:	9807      	ldr	r0, [sp, #28]
     44a:	4b22      	ldr	r3, [pc, #136]	; (4d4 <i2c_master_init+0x2f4>)
     44c:	4798      	blx	r3
     44e:	3802      	subs	r0, #2
     450:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     452:	002b      	movs	r3, r5
     454:	2dff      	cmp	r5, #255	; 0xff
     456:	d80c      	bhi.n	472 <i2c_master_init+0x292>
     458:	28ff      	cmp	r0, #255	; 0xff
     45a:	d9bc      	bls.n	3d6 <i2c_master_init+0x1f6>
     45c:	2040      	movs	r0, #64	; 0x40
     45e:	e6e6      	b.n	22e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     460:	0071      	lsls	r1, r6, #1
     462:	1e48      	subs	r0, r1, #1
     464:	9b07      	ldr	r3, [sp, #28]
     466:	469c      	mov	ip, r3
     468:	4460      	add	r0, ip
     46a:	4b1a      	ldr	r3, [pc, #104]	; (4d4 <i2c_master_init+0x2f4>)
     46c:	4798      	blx	r3
     46e:	3801      	subs	r0, #1
     470:	e7ef      	b.n	452 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     472:	2040      	movs	r0, #64	; 0x40
     474:	e6db      	b.n	22e <i2c_master_init+0x4e>
     476:	46c0      	nop			; (mov r8, r8)
     478:	00000a49 	.word	0x00000a49
     47c:	40000400 	.word	0x40000400
     480:	00000fb1 	.word	0x00000fb1
     484:	00000f25 	.word	0x00000f25
     488:	00000885 	.word	0x00000885
     48c:	00000699 	.word	0x00000699
     490:	00000a85 	.word	0x00000a85
     494:	2000006c 	.word	0x2000006c
     498:	000010a9 	.word	0x000010a9
     49c:	41002000 	.word	0x41002000
     4a0:	00000fcd 	.word	0x00000fcd
     4a4:	00002c71 	.word	0x00002c71
     4a8:	000020dd 	.word	0x000020dd
     4ac:	e826d695 	.word	0xe826d695
     4b0:	3e112e0b 	.word	0x3e112e0b
     4b4:	00001455 	.word	0x00001455
     4b8:	40240000 	.word	0x40240000
     4bc:	000025dd 	.word	0x000025dd
     4c0:	3ff00000 	.word	0x3ff00000
     4c4:	00001a75 	.word	0x00001a75
     4c8:	00002c09 	.word	0x00002c09
     4cc:	000008d1 	.word	0x000008d1
     4d0:	40080000 	.word	0x40080000
     4d4:	0000133d 	.word	0x0000133d

000004d8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     4d8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4da:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     4dc:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4de:	2401      	movs	r4, #1
     4e0:	2502      	movs	r5, #2
     4e2:	7e11      	ldrb	r1, [r2, #24]
     4e4:	4221      	tst	r1, r4
     4e6:	d10b      	bne.n	500 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4e8:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4ea:	4229      	tst	r1, r5
     4ec:	d106      	bne.n	4fc <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     4ee:	3301      	adds	r3, #1
     4f0:	b29b      	uxth	r3, r3
     4f2:	8901      	ldrh	r1, [r0, #8]
     4f4:	4299      	cmp	r1, r3
     4f6:	d8f4      	bhi.n	4e2 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     4f8:	2012      	movs	r0, #18
     4fa:	e002      	b.n	502 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     4fc:	2000      	movs	r0, #0
     4fe:	e000      	b.n	502 <_i2c_master_wait_for_bus+0x2a>
     500:	2000      	movs	r0, #0
}
     502:	bd30      	pop	{r4, r5, pc}

00000504 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     504:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     506:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     508:	6862      	ldr	r2, [r4, #4]
     50a:	2380      	movs	r3, #128	; 0x80
     50c:	02db      	lsls	r3, r3, #11
     50e:	4313      	orrs	r3, r2
     510:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     512:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     514:	4b02      	ldr	r3, [pc, #8]	; (520 <_i2c_master_send_hs_master_code+0x1c>)
     516:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     518:	2301      	movs	r3, #1
     51a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     51c:	bd10      	pop	{r4, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	000004d9 	.word	0x000004d9

00000524 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     524:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     526:	2207      	movs	r2, #7
     528:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     52a:	421a      	tst	r2, r3
     52c:	d1fc      	bne.n	528 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     52e:	4770      	bx	lr

00000530 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     530:	b570      	push	{r4, r5, r6, lr}
     532:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     534:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     536:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     538:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     53a:	8b83      	ldrh	r3, [r0, #28]
     53c:	1aed      	subs	r5, r5, r3
     53e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     540:	8b83      	ldrh	r3, [r0, #28]
     542:	3b01      	subs	r3, #1
     544:	b29b      	uxth	r3, r3
     546:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     548:	0113      	lsls	r3, r2, #4
     54a:	d51d      	bpl.n	588 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     54c:	7ac3      	ldrb	r3, [r0, #11]
     54e:	2b00      	cmp	r3, #0
     550:	d003      	beq.n	55a <_i2c_master_read+0x2a>
     552:	8b83      	ldrh	r3, [r0, #28]
     554:	b29b      	uxth	r3, r3
     556:	2b01      	cmp	r3, #1
     558:	d010      	beq.n	57c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     55a:	8ba3      	ldrh	r3, [r4, #28]
     55c:	b29b      	uxth	r3, r3
     55e:	2b00      	cmp	r3, #0
     560:	d102      	bne.n	568 <_i2c_master_read+0x38>
		if (module->send_stop) {
     562:	7aa3      	ldrb	r3, [r4, #10]
     564:	2b00      	cmp	r3, #0
     566:	d11c      	bne.n	5a2 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     568:	0020      	movs	r0, r4
     56a:	4b12      	ldr	r3, [pc, #72]	; (5b4 <_i2c_master_read+0x84>)
     56c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     56e:	6a23      	ldr	r3, [r4, #32]
     570:	195d      	adds	r5, r3, r5
     572:	2328      	movs	r3, #40	; 0x28
     574:	5cf3      	ldrb	r3, [r6, r3]
     576:	b2db      	uxtb	r3, r3
     578:	702b      	strb	r3, [r5, #0]
}
     57a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     57c:	6872      	ldr	r2, [r6, #4]
     57e:	2380      	movs	r3, #128	; 0x80
     580:	02db      	lsls	r3, r3, #11
     582:	4313      	orrs	r3, r2
     584:	6073      	str	r3, [r6, #4]
     586:	e7e8      	b.n	55a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     588:	7ac3      	ldrb	r3, [r0, #11]
     58a:	2b00      	cmp	r3, #0
     58c:	d0e5      	beq.n	55a <_i2c_master_read+0x2a>
     58e:	8b83      	ldrh	r3, [r0, #28]
     590:	b29b      	uxth	r3, r3
     592:	2b00      	cmp	r3, #0
     594:	d1e1      	bne.n	55a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     596:	6872      	ldr	r2, [r6, #4]
     598:	2380      	movs	r3, #128	; 0x80
     59a:	02db      	lsls	r3, r3, #11
     59c:	4313      	orrs	r3, r2
     59e:	6073      	str	r3, [r6, #4]
     5a0:	e7db      	b.n	55a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     5a2:	0020      	movs	r0, r4
     5a4:	4b03      	ldr	r3, [pc, #12]	; (5b4 <_i2c_master_read+0x84>)
     5a6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5a8:	6872      	ldr	r2, [r6, #4]
     5aa:	23c0      	movs	r3, #192	; 0xc0
     5ac:	029b      	lsls	r3, r3, #10
     5ae:	4313      	orrs	r3, r2
     5b0:	6073      	str	r3, [r6, #4]
     5b2:	e7d9      	b.n	568 <_i2c_master_read+0x38>
     5b4:	00000525 	.word	0x00000525

000005b8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     5b8:	b570      	push	{r4, r5, r6, lr}
     5ba:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5bc:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     5be:	8b6b      	ldrh	r3, [r5, #26]
     5c0:	075b      	lsls	r3, r3, #29
     5c2:	d503      	bpl.n	5cc <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     5c4:	221e      	movs	r2, #30
     5c6:	2325      	movs	r3, #37	; 0x25
     5c8:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     5ca:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     5cc:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     5ce:	8b83      	ldrh	r3, [r0, #28]
     5d0:	1af6      	subs	r6, r6, r3
     5d2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     5d4:	8b83      	ldrh	r3, [r0, #28]
     5d6:	3b01      	subs	r3, #1
     5d8:	b29b      	uxth	r3, r3
     5da:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     5dc:	4b04      	ldr	r3, [pc, #16]	; (5f0 <_i2c_master_write+0x38>)
     5de:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     5e0:	6a23      	ldr	r3, [r4, #32]
     5e2:	199e      	adds	r6, r3, r6
     5e4:	7833      	ldrb	r3, [r6, #0]
     5e6:	b2db      	uxtb	r3, r3
     5e8:	2228      	movs	r2, #40	; 0x28
     5ea:	54ab      	strb	r3, [r5, r2]
     5ec:	e7ed      	b.n	5ca <_i2c_master_write+0x12>
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	00000525 	.word	0x00000525

000005f4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     5f4:	b570      	push	{r4, r5, r6, lr}
     5f6:	0005      	movs	r5, r0
     5f8:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5fa:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     5fc:	7a4b      	ldrb	r3, [r1, #9]
     5fe:	2b00      	cmp	r3, #0
     600:	d11a      	bne.n	638 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     602:	6873      	ldr	r3, [r6, #4]
     604:	4a13      	ldr	r2, [pc, #76]	; (654 <_i2c_master_write_packet+0x60>)
     606:	4013      	ands	r3, r2
     608:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     60a:	6863      	ldr	r3, [r4, #4]
     60c:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     60e:	8863      	ldrh	r3, [r4, #2]
     610:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     612:	2200      	movs	r2, #0
     614:	2324      	movs	r3, #36	; 0x24
     616:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     618:	3205      	adds	r2, #5
     61a:	3301      	adds	r3, #1
     61c:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     61e:	3b22      	subs	r3, #34	; 0x22
     620:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     622:	7a23      	ldrb	r3, [r4, #8]
     624:	2b00      	cmp	r3, #0
     626:	d10b      	bne.n	640 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     628:	8823      	ldrh	r3, [r4, #0]
     62a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     62c:	7a62      	ldrb	r2, [r4, #9]
     62e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     630:	4313      	orrs	r3, r2
     632:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     634:	2000      	movs	r0, #0
     636:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     638:	7a89      	ldrb	r1, [r1, #10]
     63a:	4b07      	ldr	r3, [pc, #28]	; (658 <_i2c_master_write_packet+0x64>)
     63c:	4798      	blx	r3
     63e:	e7e0      	b.n	602 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     640:	8823      	ldrh	r3, [r4, #0]
     642:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     644:	7a62      	ldrb	r2, [r4, #9]
     646:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     648:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     64a:	2280      	movs	r2, #128	; 0x80
     64c:	0212      	lsls	r2, r2, #8
     64e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     650:	6273      	str	r3, [r6, #36]	; 0x24
     652:	e7ef      	b.n	634 <_i2c_master_write_packet+0x40>
     654:	fffbffff 	.word	0xfffbffff
     658:	00000505 	.word	0x00000505

0000065c <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     65c:	1c93      	adds	r3, r2, #2
     65e:	009b      	lsls	r3, r3, #2
     660:	18c3      	adds	r3, r0, r3
     662:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     664:	7e03      	ldrb	r3, [r0, #24]
     666:	2101      	movs	r1, #1
     668:	4091      	lsls	r1, r2
     66a:	430b      	orrs	r3, r1
     66c:	b2db      	uxtb	r3, r3
     66e:	7603      	strb	r3, [r0, #24]
}
     670:	4770      	bx	lr
	...

00000674 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     674:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     676:	8b83      	ldrh	r3, [r0, #28]
     678:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     67a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     67c:	2b00      	cmp	r3, #0
     67e:	d001      	beq.n	684 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     680:	0010      	movs	r0, r2
     682:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     684:	3301      	adds	r3, #1
     686:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     688:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     68a:	4b02      	ldr	r3, [pc, #8]	; (694 <i2c_master_write_packet_job+0x20>)
     68c:	4798      	blx	r3
     68e:	0002      	movs	r2, r0
     690:	e7f6      	b.n	680 <i2c_master_write_packet_job+0xc>
     692:	46c0      	nop			; (mov r8, r8)
     694:	000005f5 	.word	0x000005f5

00000698 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     698:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     69a:	0080      	lsls	r0, r0, #2
     69c:	4b75      	ldr	r3, [pc, #468]	; (874 <_i2c_master_interrupt_handler+0x1dc>)
     69e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6a0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6a2:	682b      	ldr	r3, [r5, #0]
     6a4:	011b      	lsls	r3, r3, #4
     6a6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     6a8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     6aa:	7e26      	ldrb	r6, [r4, #24]
     6ac:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     6ae:	8b63      	ldrh	r3, [r4, #26]
     6b0:	b29b      	uxth	r3, r3
     6b2:	2b00      	cmp	r3, #0
     6b4:	d103      	bne.n	6be <_i2c_master_interrupt_handler+0x26>
     6b6:	8ba3      	ldrh	r3, [r4, #28]
     6b8:	b29b      	uxth	r3, r3
     6ba:	2b00      	cmp	r3, #0
     6bc:	d123      	bne.n	706 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     6be:	8b63      	ldrh	r3, [r4, #26]
     6c0:	b29b      	uxth	r3, r3
     6c2:	2b00      	cmp	r3, #0
     6c4:	d008      	beq.n	6d8 <_i2c_master_interrupt_handler+0x40>
     6c6:	8ba3      	ldrh	r3, [r4, #28]
     6c8:	b29b      	uxth	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	d104      	bne.n	6d8 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     6ce:	3325      	adds	r3, #37	; 0x25
     6d0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     6d2:	2b05      	cmp	r3, #5
     6d4:	d100      	bne.n	6d8 <_i2c_master_interrupt_handler+0x40>
     6d6:	e06d      	b.n	7b4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     6d8:	8b63      	ldrh	r3, [r4, #26]
     6da:	b29b      	uxth	r3, r3
     6dc:	2b00      	cmp	r3, #0
     6de:	d024      	beq.n	72a <_i2c_master_interrupt_handler+0x92>
     6e0:	8ba3      	ldrh	r3, [r4, #28]
     6e2:	b29b      	uxth	r3, r3
     6e4:	2b00      	cmp	r3, #0
     6e6:	d020      	beq.n	72a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     6e8:	8b6b      	ldrh	r3, [r5, #26]
     6ea:	069b      	lsls	r3, r3, #26
     6ec:	d500      	bpl.n	6f0 <_i2c_master_interrupt_handler+0x58>
     6ee:	e081      	b.n	7f4 <_i2c_master_interrupt_handler+0x15c>
     6f0:	2a00      	cmp	r2, #0
     6f2:	d004      	beq.n	6fe <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     6f4:	8ba3      	ldrh	r3, [r4, #28]
     6f6:	b29b      	uxth	r3, r3
     6f8:	2b01      	cmp	r3, #1
     6fa:	d100      	bne.n	6fe <_i2c_master_interrupt_handler+0x66>
     6fc:	e07a      	b.n	7f4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     6fe:	2241      	movs	r2, #65	; 0x41
     700:	2325      	movs	r3, #37	; 0x25
     702:	54e2      	strb	r2, [r4, r3]
     704:	e011      	b.n	72a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     706:	7e2b      	ldrb	r3, [r5, #24]
     708:	07db      	lsls	r3, r3, #31
     70a:	d507      	bpl.n	71c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     70c:	2301      	movs	r3, #1
     70e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     710:	8b6b      	ldrh	r3, [r5, #26]
     712:	079b      	lsls	r3, r3, #30
     714:	d52e      	bpl.n	774 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     716:	2241      	movs	r2, #65	; 0x41
     718:	2325      	movs	r3, #37	; 0x25
     71a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     71c:	8ba3      	ldrh	r3, [r4, #28]
     71e:	b29b      	uxth	r3, r3
     720:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     722:	2325      	movs	r3, #37	; 0x25
     724:	5ce3      	ldrb	r3, [r4, r3]
     726:	2b05      	cmp	r3, #5
     728:	d038      	beq.n	79c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     72a:	8b63      	ldrh	r3, [r4, #26]
     72c:	b29b      	uxth	r3, r3
     72e:	2b00      	cmp	r3, #0
     730:	d007      	beq.n	742 <_i2c_master_interrupt_handler+0xaa>
     732:	8ba3      	ldrh	r3, [r4, #28]
     734:	b29b      	uxth	r3, r3
     736:	2b00      	cmp	r3, #0
     738:	d103      	bne.n	742 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     73a:	3325      	adds	r3, #37	; 0x25
     73c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     73e:	2b05      	cmp	r3, #5
     740:	d064      	beq.n	80c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     742:	2325      	movs	r3, #37	; 0x25
     744:	5ce3      	ldrb	r3, [r4, r3]
     746:	2b05      	cmp	r3, #5
     748:	d013      	beq.n	772 <_i2c_master_interrupt_handler+0xda>
     74a:	2325      	movs	r3, #37	; 0x25
     74c:	5ce3      	ldrb	r3, [r4, r3]
     74e:	2b00      	cmp	r3, #0
     750:	d00f      	beq.n	772 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     752:	2303      	movs	r3, #3
     754:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     756:	2300      	movs	r3, #0
     758:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     75a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     75c:	3325      	adds	r3, #37	; 0x25
     75e:	5ce3      	ldrb	r3, [r4, r3]
     760:	2b41      	cmp	r3, #65	; 0x41
     762:	d003      	beq.n	76c <_i2c_master_interrupt_handler+0xd4>
     764:	7aa3      	ldrb	r3, [r4, #10]
     766:	2b00      	cmp	r3, #0
     768:	d000      	beq.n	76c <_i2c_master_interrupt_handler+0xd4>
     76a:	e075      	b.n	858 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     76c:	0773      	lsls	r3, r6, #29
     76e:	d500      	bpl.n	772 <_i2c_master_interrupt_handler+0xda>
     770:	e07b      	b.n	86a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     772:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     774:	8b6b      	ldrh	r3, [r5, #26]
     776:	075b      	lsls	r3, r3, #29
     778:	d5d0      	bpl.n	71c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     77a:	2218      	movs	r2, #24
     77c:	2325      	movs	r3, #37	; 0x25
     77e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     780:	2300      	movs	r3, #0
     782:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     784:	7aa3      	ldrb	r3, [r4, #10]
     786:	2b00      	cmp	r3, #0
     788:	d0c8      	beq.n	71c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     78a:	0020      	movs	r0, r4
     78c:	4b3a      	ldr	r3, [pc, #232]	; (878 <_i2c_master_interrupt_handler+0x1e0>)
     78e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     790:	686a      	ldr	r2, [r5, #4]
     792:	23c0      	movs	r3, #192	; 0xc0
     794:	029b      	lsls	r3, r3, #10
     796:	4313      	orrs	r3, r2
     798:	606b      	str	r3, [r5, #4]
     79a:	e7bf      	b.n	71c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     79c:	331f      	adds	r3, #31
     79e:	5ce3      	ldrb	r3, [r4, r3]
     7a0:	2b00      	cmp	r3, #0
     7a2:	d003      	beq.n	7ac <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     7a4:	0020      	movs	r0, r4
     7a6:	4b35      	ldr	r3, [pc, #212]	; (87c <_i2c_master_interrupt_handler+0x1e4>)
     7a8:	4798      	blx	r3
     7aa:	e7be      	b.n	72a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     7ac:	0020      	movs	r0, r4
     7ae:	4b34      	ldr	r3, [pc, #208]	; (880 <_i2c_master_interrupt_handler+0x1e8>)
     7b0:	4798      	blx	r3
     7b2:	e7ba      	b.n	72a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     7b4:	331f      	adds	r3, #31
     7b6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     7b8:	2b00      	cmp	r3, #0
     7ba:	d000      	beq.n	7be <_i2c_master_interrupt_handler+0x126>
     7bc:	e78c      	b.n	6d8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     7be:	3303      	adds	r3, #3
     7c0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     7c2:	2300      	movs	r3, #0
     7c4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     7c6:	3325      	adds	r3, #37	; 0x25
     7c8:	2200      	movs	r2, #0
     7ca:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     7cc:	7aa3      	ldrb	r3, [r4, #10]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d107      	bne.n	7e2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     7d2:	2301      	movs	r3, #1
     7d4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     7d6:	07f3      	lsls	r3, r6, #31
     7d8:	d5a7      	bpl.n	72a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     7da:	68e3      	ldr	r3, [r4, #12]
     7dc:	0020      	movs	r0, r4
     7de:	4798      	blx	r3
     7e0:	e7a3      	b.n	72a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     7e2:	0020      	movs	r0, r4
     7e4:	4b24      	ldr	r3, [pc, #144]	; (878 <_i2c_master_interrupt_handler+0x1e0>)
     7e6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7e8:	686a      	ldr	r2, [r5, #4]
     7ea:	23c0      	movs	r3, #192	; 0xc0
     7ec:	029b      	lsls	r3, r3, #10
     7ee:	4313      	orrs	r3, r2
     7f0:	606b      	str	r3, [r5, #4]
     7f2:	e7f0      	b.n	7d6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     7f4:	2324      	movs	r3, #36	; 0x24
     7f6:	5ce3      	ldrb	r3, [r4, r3]
     7f8:	2b00      	cmp	r3, #0
     7fa:	d103      	bne.n	804 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     7fc:	0020      	movs	r0, r4
     7fe:	4b20      	ldr	r3, [pc, #128]	; (880 <_i2c_master_interrupt_handler+0x1e8>)
     800:	4798      	blx	r3
     802:	e792      	b.n	72a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     804:	0020      	movs	r0, r4
     806:	4b1d      	ldr	r3, [pc, #116]	; (87c <_i2c_master_interrupt_handler+0x1e4>)
     808:	4798      	blx	r3
     80a:	e78e      	b.n	72a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     80c:	331f      	adds	r3, #31
     80e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     810:	2b01      	cmp	r3, #1
     812:	d196      	bne.n	742 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     814:	7e2b      	ldrb	r3, [r5, #24]
     816:	079b      	lsls	r3, r3, #30
     818:	d501      	bpl.n	81e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     81a:	2302      	movs	r3, #2
     81c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     81e:	2303      	movs	r3, #3
     820:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     822:	2300      	movs	r3, #0
     824:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     826:	3325      	adds	r3, #37	; 0x25
     828:	2200      	movs	r2, #0
     82a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     82c:	07b3      	lsls	r3, r6, #30
     82e:	d503      	bpl.n	838 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     830:	2324      	movs	r3, #36	; 0x24
     832:	5ce3      	ldrb	r3, [r4, r3]
     834:	2b01      	cmp	r3, #1
     836:	d00b      	beq.n	850 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     838:	07f3      	lsls	r3, r6, #31
     83a:	d400      	bmi.n	83e <_i2c_master_interrupt_handler+0x1a6>
     83c:	e781      	b.n	742 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     83e:	2324      	movs	r3, #36	; 0x24
     840:	5ce3      	ldrb	r3, [r4, r3]
     842:	2b00      	cmp	r3, #0
     844:	d000      	beq.n	848 <_i2c_master_interrupt_handler+0x1b0>
     846:	e77c      	b.n	742 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     848:	68e3      	ldr	r3, [r4, #12]
     84a:	0020      	movs	r0, r4
     84c:	4798      	blx	r3
     84e:	e778      	b.n	742 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     850:	6923      	ldr	r3, [r4, #16]
     852:	0020      	movs	r0, r4
     854:	4798      	blx	r3
     856:	e774      	b.n	742 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     858:	0020      	movs	r0, r4
     85a:	4b07      	ldr	r3, [pc, #28]	; (878 <_i2c_master_interrupt_handler+0x1e0>)
     85c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     85e:	686a      	ldr	r2, [r5, #4]
     860:	23e0      	movs	r3, #224	; 0xe0
     862:	02db      	lsls	r3, r3, #11
     864:	4313      	orrs	r3, r2
     866:	606b      	str	r3, [r5, #4]
     868:	e780      	b.n	76c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     86a:	6963      	ldr	r3, [r4, #20]
     86c:	0020      	movs	r0, r4
     86e:	4798      	blx	r3
}
     870:	e77f      	b.n	772 <_i2c_master_interrupt_handler+0xda>
     872:	46c0      	nop			; (mov r8, r8)
     874:	2000006c 	.word	0x2000006c
     878:	00000525 	.word	0x00000525
     87c:	00000531 	.word	0x00000531
     880:	000005b9 	.word	0x000005b9

00000884 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     884:	b510      	push	{r4, lr}
     886:	b082      	sub	sp, #8
     888:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     88a:	4b0e      	ldr	r3, [pc, #56]	; (8c4 <sercom_set_gclk_generator+0x40>)
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	2b00      	cmp	r3, #0
     890:	d007      	beq.n	8a2 <sercom_set_gclk_generator+0x1e>
     892:	2900      	cmp	r1, #0
     894:	d105      	bne.n	8a2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     896:	4b0b      	ldr	r3, [pc, #44]	; (8c4 <sercom_set_gclk_generator+0x40>)
     898:	785b      	ldrb	r3, [r3, #1]
     89a:	4283      	cmp	r3, r0
     89c:	d010      	beq.n	8c0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     89e:	201d      	movs	r0, #29
     8a0:	e00c      	b.n	8bc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     8a2:	a901      	add	r1, sp, #4
     8a4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8a6:	2013      	movs	r0, #19
     8a8:	4b07      	ldr	r3, [pc, #28]	; (8c8 <sercom_set_gclk_generator+0x44>)
     8aa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     8ac:	2013      	movs	r0, #19
     8ae:	4b07      	ldr	r3, [pc, #28]	; (8cc <sercom_set_gclk_generator+0x48>)
     8b0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     8b2:	4b04      	ldr	r3, [pc, #16]	; (8c4 <sercom_set_gclk_generator+0x40>)
     8b4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     8b6:	2201      	movs	r2, #1
     8b8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     8ba:	2000      	movs	r0, #0
}
     8bc:	b002      	add	sp, #8
     8be:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     8c0:	2000      	movs	r0, #0
     8c2:	e7fb      	b.n	8bc <sercom_set_gclk_generator+0x38>
     8c4:	20000030 	.word	0x20000030
     8c8:	00000fb1 	.word	0x00000fb1
     8cc:	00000f25 	.word	0x00000f25

000008d0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8d0:	4b40      	ldr	r3, [pc, #256]	; (9d4 <_sercom_get_default_pad+0x104>)
     8d2:	4298      	cmp	r0, r3
     8d4:	d031      	beq.n	93a <_sercom_get_default_pad+0x6a>
     8d6:	d90a      	bls.n	8ee <_sercom_get_default_pad+0x1e>
     8d8:	4b3f      	ldr	r3, [pc, #252]	; (9d8 <_sercom_get_default_pad+0x108>)
     8da:	4298      	cmp	r0, r3
     8dc:	d04d      	beq.n	97a <_sercom_get_default_pad+0xaa>
     8de:	4b3f      	ldr	r3, [pc, #252]	; (9dc <_sercom_get_default_pad+0x10c>)
     8e0:	4298      	cmp	r0, r3
     8e2:	d05a      	beq.n	99a <_sercom_get_default_pad+0xca>
     8e4:	4b3e      	ldr	r3, [pc, #248]	; (9e0 <_sercom_get_default_pad+0x110>)
     8e6:	4298      	cmp	r0, r3
     8e8:	d037      	beq.n	95a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8ea:	2000      	movs	r0, #0
}
     8ec:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8ee:	4b3d      	ldr	r3, [pc, #244]	; (9e4 <_sercom_get_default_pad+0x114>)
     8f0:	4298      	cmp	r0, r3
     8f2:	d00c      	beq.n	90e <_sercom_get_default_pad+0x3e>
     8f4:	4b3c      	ldr	r3, [pc, #240]	; (9e8 <_sercom_get_default_pad+0x118>)
     8f6:	4298      	cmp	r0, r3
     8f8:	d1f7      	bne.n	8ea <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	2901      	cmp	r1, #1
     8fc:	d017      	beq.n	92e <_sercom_get_default_pad+0x5e>
     8fe:	2900      	cmp	r1, #0
     900:	d05d      	beq.n	9be <_sercom_get_default_pad+0xee>
     902:	2902      	cmp	r1, #2
     904:	d015      	beq.n	932 <_sercom_get_default_pad+0x62>
     906:	2903      	cmp	r1, #3
     908:	d015      	beq.n	936 <_sercom_get_default_pad+0x66>
	return 0;
     90a:	2000      	movs	r0, #0
     90c:	e7ee      	b.n	8ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     90e:	2901      	cmp	r1, #1
     910:	d007      	beq.n	922 <_sercom_get_default_pad+0x52>
     912:	2900      	cmp	r1, #0
     914:	d051      	beq.n	9ba <_sercom_get_default_pad+0xea>
     916:	2902      	cmp	r1, #2
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0x56>
     91a:	2903      	cmp	r1, #3
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0x5a>
	return 0;
     91e:	2000      	movs	r0, #0
     920:	e7e4      	b.n	8ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     922:	4832      	ldr	r0, [pc, #200]	; (9ec <_sercom_get_default_pad+0x11c>)
     924:	e7e2      	b.n	8ec <_sercom_get_default_pad+0x1c>
     926:	4832      	ldr	r0, [pc, #200]	; (9f0 <_sercom_get_default_pad+0x120>)
     928:	e7e0      	b.n	8ec <_sercom_get_default_pad+0x1c>
     92a:	4832      	ldr	r0, [pc, #200]	; (9f4 <_sercom_get_default_pad+0x124>)
     92c:	e7de      	b.n	8ec <_sercom_get_default_pad+0x1c>
     92e:	4832      	ldr	r0, [pc, #200]	; (9f8 <_sercom_get_default_pad+0x128>)
     930:	e7dc      	b.n	8ec <_sercom_get_default_pad+0x1c>
     932:	4832      	ldr	r0, [pc, #200]	; (9fc <_sercom_get_default_pad+0x12c>)
     934:	e7da      	b.n	8ec <_sercom_get_default_pad+0x1c>
     936:	4832      	ldr	r0, [pc, #200]	; (a00 <_sercom_get_default_pad+0x130>)
     938:	e7d8      	b.n	8ec <_sercom_get_default_pad+0x1c>
     93a:	2901      	cmp	r1, #1
     93c:	d007      	beq.n	94e <_sercom_get_default_pad+0x7e>
     93e:	2900      	cmp	r1, #0
     940:	d03f      	beq.n	9c2 <_sercom_get_default_pad+0xf2>
     942:	2902      	cmp	r1, #2
     944:	d005      	beq.n	952 <_sercom_get_default_pad+0x82>
     946:	2903      	cmp	r1, #3
     948:	d005      	beq.n	956 <_sercom_get_default_pad+0x86>
	return 0;
     94a:	2000      	movs	r0, #0
     94c:	e7ce      	b.n	8ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     94e:	482d      	ldr	r0, [pc, #180]	; (a04 <_sercom_get_default_pad+0x134>)
     950:	e7cc      	b.n	8ec <_sercom_get_default_pad+0x1c>
     952:	482d      	ldr	r0, [pc, #180]	; (a08 <_sercom_get_default_pad+0x138>)
     954:	e7ca      	b.n	8ec <_sercom_get_default_pad+0x1c>
     956:	482d      	ldr	r0, [pc, #180]	; (a0c <_sercom_get_default_pad+0x13c>)
     958:	e7c8      	b.n	8ec <_sercom_get_default_pad+0x1c>
     95a:	2901      	cmp	r1, #1
     95c:	d007      	beq.n	96e <_sercom_get_default_pad+0x9e>
     95e:	2900      	cmp	r1, #0
     960:	d031      	beq.n	9c6 <_sercom_get_default_pad+0xf6>
     962:	2902      	cmp	r1, #2
     964:	d005      	beq.n	972 <_sercom_get_default_pad+0xa2>
     966:	2903      	cmp	r1, #3
     968:	d005      	beq.n	976 <_sercom_get_default_pad+0xa6>
	return 0;
     96a:	2000      	movs	r0, #0
     96c:	e7be      	b.n	8ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     96e:	4828      	ldr	r0, [pc, #160]	; (a10 <_sercom_get_default_pad+0x140>)
     970:	e7bc      	b.n	8ec <_sercom_get_default_pad+0x1c>
     972:	4828      	ldr	r0, [pc, #160]	; (a14 <_sercom_get_default_pad+0x144>)
     974:	e7ba      	b.n	8ec <_sercom_get_default_pad+0x1c>
     976:	4828      	ldr	r0, [pc, #160]	; (a18 <_sercom_get_default_pad+0x148>)
     978:	e7b8      	b.n	8ec <_sercom_get_default_pad+0x1c>
     97a:	2901      	cmp	r1, #1
     97c:	d007      	beq.n	98e <_sercom_get_default_pad+0xbe>
     97e:	2900      	cmp	r1, #0
     980:	d023      	beq.n	9ca <_sercom_get_default_pad+0xfa>
     982:	2902      	cmp	r1, #2
     984:	d005      	beq.n	992 <_sercom_get_default_pad+0xc2>
     986:	2903      	cmp	r1, #3
     988:	d005      	beq.n	996 <_sercom_get_default_pad+0xc6>
	return 0;
     98a:	2000      	movs	r0, #0
     98c:	e7ae      	b.n	8ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     98e:	4823      	ldr	r0, [pc, #140]	; (a1c <_sercom_get_default_pad+0x14c>)
     990:	e7ac      	b.n	8ec <_sercom_get_default_pad+0x1c>
     992:	4823      	ldr	r0, [pc, #140]	; (a20 <_sercom_get_default_pad+0x150>)
     994:	e7aa      	b.n	8ec <_sercom_get_default_pad+0x1c>
     996:	4823      	ldr	r0, [pc, #140]	; (a24 <_sercom_get_default_pad+0x154>)
     998:	e7a8      	b.n	8ec <_sercom_get_default_pad+0x1c>
     99a:	2901      	cmp	r1, #1
     99c:	d007      	beq.n	9ae <_sercom_get_default_pad+0xde>
     99e:	2900      	cmp	r1, #0
     9a0:	d015      	beq.n	9ce <_sercom_get_default_pad+0xfe>
     9a2:	2902      	cmp	r1, #2
     9a4:	d005      	beq.n	9b2 <_sercom_get_default_pad+0xe2>
     9a6:	2903      	cmp	r1, #3
     9a8:	d005      	beq.n	9b6 <_sercom_get_default_pad+0xe6>
	return 0;
     9aa:	2000      	movs	r0, #0
     9ac:	e79e      	b.n	8ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ae:	481e      	ldr	r0, [pc, #120]	; (a28 <_sercom_get_default_pad+0x158>)
     9b0:	e79c      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9b2:	481e      	ldr	r0, [pc, #120]	; (a2c <_sercom_get_default_pad+0x15c>)
     9b4:	e79a      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9b6:	481e      	ldr	r0, [pc, #120]	; (a30 <_sercom_get_default_pad+0x160>)
     9b8:	e798      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9ba:	481e      	ldr	r0, [pc, #120]	; (a34 <_sercom_get_default_pad+0x164>)
     9bc:	e796      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9be:	2003      	movs	r0, #3
     9c0:	e794      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9c2:	481d      	ldr	r0, [pc, #116]	; (a38 <_sercom_get_default_pad+0x168>)
     9c4:	e792      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9c6:	481d      	ldr	r0, [pc, #116]	; (a3c <_sercom_get_default_pad+0x16c>)
     9c8:	e790      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9ca:	481d      	ldr	r0, [pc, #116]	; (a40 <_sercom_get_default_pad+0x170>)
     9cc:	e78e      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9ce:	481d      	ldr	r0, [pc, #116]	; (a44 <_sercom_get_default_pad+0x174>)
     9d0:	e78c      	b.n	8ec <_sercom_get_default_pad+0x1c>
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	42001000 	.word	0x42001000
     9d8:	42001800 	.word	0x42001800
     9dc:	42001c00 	.word	0x42001c00
     9e0:	42001400 	.word	0x42001400
     9e4:	42000800 	.word	0x42000800
     9e8:	42000c00 	.word	0x42000c00
     9ec:	00050003 	.word	0x00050003
     9f0:	00060003 	.word	0x00060003
     9f4:	00070003 	.word	0x00070003
     9f8:	00010003 	.word	0x00010003
     9fc:	001e0003 	.word	0x001e0003
     a00:	001f0003 	.word	0x001f0003
     a04:	00090003 	.word	0x00090003
     a08:	000a0003 	.word	0x000a0003
     a0c:	000b0003 	.word	0x000b0003
     a10:	00110003 	.word	0x00110003
     a14:	00120003 	.word	0x00120003
     a18:	00130003 	.word	0x00130003
     a1c:	000d0003 	.word	0x000d0003
     a20:	000e0003 	.word	0x000e0003
     a24:	000f0003 	.word	0x000f0003
     a28:	00170003 	.word	0x00170003
     a2c:	00180003 	.word	0x00180003
     a30:	00190003 	.word	0x00190003
     a34:	00040003 	.word	0x00040003
     a38:	00080003 	.word	0x00080003
     a3c:	00100003 	.word	0x00100003
     a40:	000c0003 	.word	0x000c0003
     a44:	00160003 	.word	0x00160003

00000a48 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a48:	b530      	push	{r4, r5, lr}
     a4a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a4c:	4b0b      	ldr	r3, [pc, #44]	; (a7c <_sercom_get_sercom_inst_index+0x34>)
     a4e:	466a      	mov	r2, sp
     a50:	cb32      	ldmia	r3!, {r1, r4, r5}
     a52:	c232      	stmia	r2!, {r1, r4, r5}
     a54:	cb32      	ldmia	r3!, {r1, r4, r5}
     a56:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a58:	9b00      	ldr	r3, [sp, #0]
     a5a:	4283      	cmp	r3, r0
     a5c:	d00b      	beq.n	a76 <_sercom_get_sercom_inst_index+0x2e>
     a5e:	2301      	movs	r3, #1
     a60:	009a      	lsls	r2, r3, #2
     a62:	4669      	mov	r1, sp
     a64:	5852      	ldr	r2, [r2, r1]
     a66:	4282      	cmp	r2, r0
     a68:	d006      	beq.n	a78 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a6a:	3301      	adds	r3, #1
     a6c:	2b06      	cmp	r3, #6
     a6e:	d1f7      	bne.n	a60 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a70:	2000      	movs	r0, #0
}
     a72:	b007      	add	sp, #28
     a74:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a76:	2300      	movs	r3, #0
			return i;
     a78:	b2d8      	uxtb	r0, r3
     a7a:	e7fa      	b.n	a72 <_sercom_get_sercom_inst_index+0x2a>
     a7c:	00002d64 	.word	0x00002d64

00000a80 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a80:	4770      	bx	lr
	...

00000a84 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a84:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     a86:	4b0a      	ldr	r3, [pc, #40]	; (ab0 <_sercom_set_handler+0x2c>)
     a88:	781b      	ldrb	r3, [r3, #0]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d10c      	bne.n	aa8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a8e:	4f09      	ldr	r7, [pc, #36]	; (ab4 <_sercom_set_handler+0x30>)
     a90:	4e09      	ldr	r6, [pc, #36]	; (ab8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a92:	4d0a      	ldr	r5, [pc, #40]	; (abc <_sercom_set_handler+0x38>)
     a94:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a96:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a98:	195a      	adds	r2, r3, r5
     a9a:	6014      	str	r4, [r2, #0]
     a9c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a9e:	2b18      	cmp	r3, #24
     aa0:	d1f9      	bne.n	a96 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     aa2:	2201      	movs	r2, #1
     aa4:	4b02      	ldr	r3, [pc, #8]	; (ab0 <_sercom_set_handler+0x2c>)
     aa6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     aa8:	0080      	lsls	r0, r0, #2
     aaa:	4b02      	ldr	r3, [pc, #8]	; (ab4 <_sercom_set_handler+0x30>)
     aac:	50c1      	str	r1, [r0, r3]
}
     aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ab0:	20000032 	.word	0x20000032
     ab4:	20000034 	.word	0x20000034
     ab8:	00000a81 	.word	0x00000a81
     abc:	2000006c 	.word	0x2000006c

00000ac0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ac0:	b500      	push	{lr}
     ac2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ac4:	2309      	movs	r3, #9
     ac6:	466a      	mov	r2, sp
     ac8:	7013      	strb	r3, [r2, #0]
     aca:	3301      	adds	r3, #1
     acc:	7053      	strb	r3, [r2, #1]
     ace:	3301      	adds	r3, #1
     ad0:	7093      	strb	r3, [r2, #2]
     ad2:	3301      	adds	r3, #1
     ad4:	70d3      	strb	r3, [r2, #3]
     ad6:	3301      	adds	r3, #1
     ad8:	7113      	strb	r3, [r2, #4]
     ada:	3301      	adds	r3, #1
     adc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ade:	4b03      	ldr	r3, [pc, #12]	; (aec <_sercom_get_interrupt_vector+0x2c>)
     ae0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ae2:	466b      	mov	r3, sp
     ae4:	5618      	ldrsb	r0, [r3, r0]
}
     ae6:	b003      	add	sp, #12
     ae8:	bd00      	pop	{pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	00000a49 	.word	0x00000a49

00000af0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     af0:	b510      	push	{r4, lr}
     af2:	4b02      	ldr	r3, [pc, #8]	; (afc <SERCOM0_Handler+0xc>)
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	2000      	movs	r0, #0
     af8:	4798      	blx	r3
     afa:	bd10      	pop	{r4, pc}
     afc:	20000034 	.word	0x20000034

00000b00 <SERCOM1_Handler>:
     b00:	b510      	push	{r4, lr}
     b02:	4b02      	ldr	r3, [pc, #8]	; (b0c <SERCOM1_Handler+0xc>)
     b04:	685b      	ldr	r3, [r3, #4]
     b06:	2001      	movs	r0, #1
     b08:	4798      	blx	r3
     b0a:	bd10      	pop	{r4, pc}
     b0c:	20000034 	.word	0x20000034

00000b10 <SERCOM2_Handler>:
     b10:	b510      	push	{r4, lr}
     b12:	4b02      	ldr	r3, [pc, #8]	; (b1c <SERCOM2_Handler+0xc>)
     b14:	689b      	ldr	r3, [r3, #8]
     b16:	2002      	movs	r0, #2
     b18:	4798      	blx	r3
     b1a:	bd10      	pop	{r4, pc}
     b1c:	20000034 	.word	0x20000034

00000b20 <SERCOM3_Handler>:
     b20:	b510      	push	{r4, lr}
     b22:	4b02      	ldr	r3, [pc, #8]	; (b2c <SERCOM3_Handler+0xc>)
     b24:	68db      	ldr	r3, [r3, #12]
     b26:	2003      	movs	r0, #3
     b28:	4798      	blx	r3
     b2a:	bd10      	pop	{r4, pc}
     b2c:	20000034 	.word	0x20000034

00000b30 <SERCOM4_Handler>:
     b30:	b510      	push	{r4, lr}
     b32:	4b02      	ldr	r3, [pc, #8]	; (b3c <SERCOM4_Handler+0xc>)
     b34:	691b      	ldr	r3, [r3, #16]
     b36:	2004      	movs	r0, #4
     b38:	4798      	blx	r3
     b3a:	bd10      	pop	{r4, pc}
     b3c:	20000034 	.word	0x20000034

00000b40 <SERCOM5_Handler>:
     b40:	b510      	push	{r4, lr}
     b42:	4b02      	ldr	r3, [pc, #8]	; (b4c <SERCOM5_Handler+0xc>)
     b44:	695b      	ldr	r3, [r3, #20]
     b46:	2005      	movs	r0, #5
     b48:	4798      	blx	r3
     b4a:	bd10      	pop	{r4, pc}
     b4c:	20000034 	.word	0x20000034

00000b50 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b50:	b510      	push	{r4, lr}
	switch (clock_source) {
     b52:	2808      	cmp	r0, #8
     b54:	d803      	bhi.n	b5e <system_clock_source_get_hz+0xe>
     b56:	0080      	lsls	r0, r0, #2
     b58:	4b1c      	ldr	r3, [pc, #112]	; (bcc <system_clock_source_get_hz+0x7c>)
     b5a:	581b      	ldr	r3, [r3, r0]
     b5c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     b5e:	2000      	movs	r0, #0
     b60:	e032      	b.n	bc8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     b62:	4b1b      	ldr	r3, [pc, #108]	; (bd0 <system_clock_source_get_hz+0x80>)
     b64:	6918      	ldr	r0, [r3, #16]
     b66:	e02f      	b.n	bc8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b68:	4b1a      	ldr	r3, [pc, #104]	; (bd4 <system_clock_source_get_hz+0x84>)
     b6a:	6a1b      	ldr	r3, [r3, #32]
     b6c:	059b      	lsls	r3, r3, #22
     b6e:	0f9b      	lsrs	r3, r3, #30
     b70:	4819      	ldr	r0, [pc, #100]	; (bd8 <system_clock_source_get_hz+0x88>)
     b72:	40d8      	lsrs	r0, r3
     b74:	e028      	b.n	bc8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     b76:	4b16      	ldr	r3, [pc, #88]	; (bd0 <system_clock_source_get_hz+0x80>)
     b78:	6958      	ldr	r0, [r3, #20]
     b7a:	e025      	b.n	bc8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b7c:	4b14      	ldr	r3, [pc, #80]	; (bd0 <system_clock_source_get_hz+0x80>)
     b7e:	681b      	ldr	r3, [r3, #0]
			return 0;
     b80:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b82:	079b      	lsls	r3, r3, #30
     b84:	d520      	bpl.n	bc8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b86:	4913      	ldr	r1, [pc, #76]	; (bd4 <system_clock_source_get_hz+0x84>)
     b88:	2210      	movs	r2, #16
     b8a:	68cb      	ldr	r3, [r1, #12]
     b8c:	421a      	tst	r2, r3
     b8e:	d0fc      	beq.n	b8a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     b90:	4b0f      	ldr	r3, [pc, #60]	; (bd0 <system_clock_source_get_hz+0x80>)
     b92:	681a      	ldr	r2, [r3, #0]
     b94:	2324      	movs	r3, #36	; 0x24
     b96:	4013      	ands	r3, r2
     b98:	2b04      	cmp	r3, #4
     b9a:	d001      	beq.n	ba0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     b9c:	480f      	ldr	r0, [pc, #60]	; (bdc <system_clock_source_get_hz+0x8c>)
     b9e:	e013      	b.n	bc8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ba0:	2000      	movs	r0, #0
     ba2:	4b0f      	ldr	r3, [pc, #60]	; (be0 <system_clock_source_get_hz+0x90>)
     ba4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     ba6:	4b0a      	ldr	r3, [pc, #40]	; (bd0 <system_clock_source_get_hz+0x80>)
     ba8:	689b      	ldr	r3, [r3, #8]
     baa:	041b      	lsls	r3, r3, #16
     bac:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bae:	4358      	muls	r0, r3
     bb0:	e00a      	b.n	bc8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bb2:	2350      	movs	r3, #80	; 0x50
     bb4:	4a07      	ldr	r2, [pc, #28]	; (bd4 <system_clock_source_get_hz+0x84>)
     bb6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     bb8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bba:	075b      	lsls	r3, r3, #29
     bbc:	d504      	bpl.n	bc8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     bbe:	4b04      	ldr	r3, [pc, #16]	; (bd0 <system_clock_source_get_hz+0x80>)
     bc0:	68d8      	ldr	r0, [r3, #12]
     bc2:	e001      	b.n	bc8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     bc4:	2080      	movs	r0, #128	; 0x80
     bc6:	0200      	lsls	r0, r0, #8
	}
}
     bc8:	bd10      	pop	{r4, pc}
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	00002d7c 	.word	0x00002d7c
     bd0:	2000004c 	.word	0x2000004c
     bd4:	40000800 	.word	0x40000800
     bd8:	007a1200 	.word	0x007a1200
     bdc:	02dc6c00 	.word	0x02dc6c00
     be0:	00000fcd 	.word	0x00000fcd

00000be4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     be4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     be6:	490c      	ldr	r1, [pc, #48]	; (c18 <system_clock_source_osc8m_set_config+0x34>)
     be8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     bea:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     bec:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     bee:	7840      	ldrb	r0, [r0, #1]
     bf0:	2201      	movs	r2, #1
     bf2:	4010      	ands	r0, r2
     bf4:	0180      	lsls	r0, r0, #6
     bf6:	2640      	movs	r6, #64	; 0x40
     bf8:	43b3      	bics	r3, r6
     bfa:	4303      	orrs	r3, r0
     bfc:	402a      	ands	r2, r5
     bfe:	01d2      	lsls	r2, r2, #7
     c00:	2080      	movs	r0, #128	; 0x80
     c02:	4383      	bics	r3, r0
     c04:	4313      	orrs	r3, r2
     c06:	2203      	movs	r2, #3
     c08:	4022      	ands	r2, r4
     c0a:	0212      	lsls	r2, r2, #8
     c0c:	4803      	ldr	r0, [pc, #12]	; (c1c <system_clock_source_osc8m_set_config+0x38>)
     c0e:	4003      	ands	r3, r0
     c10:	4313      	orrs	r3, r2
     c12:	620b      	str	r3, [r1, #32]
}
     c14:	bd70      	pop	{r4, r5, r6, pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	40000800 	.word	0x40000800
     c1c:	fffffcff 	.word	0xfffffcff

00000c20 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c20:	2808      	cmp	r0, #8
     c22:	d803      	bhi.n	c2c <system_clock_source_enable+0xc>
     c24:	0080      	lsls	r0, r0, #2
     c26:	4b25      	ldr	r3, [pc, #148]	; (cbc <system_clock_source_enable+0x9c>)
     c28:	581b      	ldr	r3, [r3, r0]
     c2a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c2c:	2017      	movs	r0, #23
     c2e:	e044      	b.n	cba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c30:	4a23      	ldr	r2, [pc, #140]	; (cc0 <system_clock_source_enable+0xa0>)
     c32:	6a13      	ldr	r3, [r2, #32]
     c34:	2102      	movs	r1, #2
     c36:	430b      	orrs	r3, r1
     c38:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c3a:	2000      	movs	r0, #0
     c3c:	e03d      	b.n	cba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c3e:	4a20      	ldr	r2, [pc, #128]	; (cc0 <system_clock_source_enable+0xa0>)
     c40:	6993      	ldr	r3, [r2, #24]
     c42:	2102      	movs	r1, #2
     c44:	430b      	orrs	r3, r1
     c46:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     c48:	2000      	movs	r0, #0
		break;
     c4a:	e036      	b.n	cba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c4c:	4a1c      	ldr	r2, [pc, #112]	; (cc0 <system_clock_source_enable+0xa0>)
     c4e:	8a13      	ldrh	r3, [r2, #16]
     c50:	2102      	movs	r1, #2
     c52:	430b      	orrs	r3, r1
     c54:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     c56:	2000      	movs	r0, #0
		break;
     c58:	e02f      	b.n	cba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c5a:	4a19      	ldr	r2, [pc, #100]	; (cc0 <system_clock_source_enable+0xa0>)
     c5c:	8a93      	ldrh	r3, [r2, #20]
     c5e:	2102      	movs	r1, #2
     c60:	430b      	orrs	r3, r1
     c62:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     c64:	2000      	movs	r0, #0
		break;
     c66:	e028      	b.n	cba <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c68:	4916      	ldr	r1, [pc, #88]	; (cc4 <system_clock_source_enable+0xa4>)
     c6a:	680b      	ldr	r3, [r1, #0]
     c6c:	2202      	movs	r2, #2
     c6e:	4313      	orrs	r3, r2
     c70:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     c72:	4b13      	ldr	r3, [pc, #76]	; (cc0 <system_clock_source_enable+0xa0>)
     c74:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c76:	0019      	movs	r1, r3
     c78:	320e      	adds	r2, #14
     c7a:	68cb      	ldr	r3, [r1, #12]
     c7c:	421a      	tst	r2, r3
     c7e:	d0fc      	beq.n	c7a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c80:	4a10      	ldr	r2, [pc, #64]	; (cc4 <system_clock_source_enable+0xa4>)
     c82:	6891      	ldr	r1, [r2, #8]
     c84:	4b0e      	ldr	r3, [pc, #56]	; (cc0 <system_clock_source_enable+0xa0>)
     c86:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c88:	6852      	ldr	r2, [r2, #4]
     c8a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     c8c:	2200      	movs	r2, #0
     c8e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c90:	0019      	movs	r1, r3
     c92:	3210      	adds	r2, #16
     c94:	68cb      	ldr	r3, [r1, #12]
     c96:	421a      	tst	r2, r3
     c98:	d0fc      	beq.n	c94 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     c9a:	4b0a      	ldr	r3, [pc, #40]	; (cc4 <system_clock_source_enable+0xa4>)
     c9c:	681b      	ldr	r3, [r3, #0]
     c9e:	b29b      	uxth	r3, r3
     ca0:	4a07      	ldr	r2, [pc, #28]	; (cc0 <system_clock_source_enable+0xa0>)
     ca2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     ca4:	2000      	movs	r0, #0
     ca6:	e008      	b.n	cba <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     ca8:	4905      	ldr	r1, [pc, #20]	; (cc0 <system_clock_source_enable+0xa0>)
     caa:	2244      	movs	r2, #68	; 0x44
     cac:	5c8b      	ldrb	r3, [r1, r2]
     cae:	2002      	movs	r0, #2
     cb0:	4303      	orrs	r3, r0
     cb2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     cb4:	2000      	movs	r0, #0
		break;
     cb6:	e000      	b.n	cba <system_clock_source_enable+0x9a>
		return STATUS_OK;
     cb8:	2000      	movs	r0, #0
}
     cba:	4770      	bx	lr
     cbc:	00002da0 	.word	0x00002da0
     cc0:	40000800 	.word	0x40000800
     cc4:	2000004c 	.word	0x2000004c

00000cc8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cca:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ccc:	22c2      	movs	r2, #194	; 0xc2
     cce:	00d2      	lsls	r2, r2, #3
     cd0:	4b20      	ldr	r3, [pc, #128]	; (d54 <system_clock_init+0x8c>)
     cd2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     cd4:	4a20      	ldr	r2, [pc, #128]	; (d58 <system_clock_init+0x90>)
     cd6:	6853      	ldr	r3, [r2, #4]
     cd8:	211e      	movs	r1, #30
     cda:	438b      	bics	r3, r1
     cdc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     cde:	2302      	movs	r3, #2
     ce0:	466a      	mov	r2, sp
     ce2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ce4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     ce6:	4d1d      	ldr	r5, [pc, #116]	; (d5c <system_clock_init+0x94>)
     ce8:	b2e0      	uxtb	r0, r4
     cea:	4669      	mov	r1, sp
     cec:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cee:	3401      	adds	r4, #1
     cf0:	2c25      	cmp	r4, #37	; 0x25
     cf2:	d1f9      	bne.n	ce8 <system_clock_init+0x20>
	config->run_in_standby  = false;
     cf4:	a803      	add	r0, sp, #12
     cf6:	2400      	movs	r4, #0
     cf8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     cfa:	2501      	movs	r5, #1
     cfc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     cfe:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d00:	4b17      	ldr	r3, [pc, #92]	; (d60 <system_clock_init+0x98>)
     d02:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d04:	2006      	movs	r0, #6
     d06:	4b17      	ldr	r3, [pc, #92]	; (d64 <system_clock_init+0x9c>)
     d08:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d0a:	4b17      	ldr	r3, [pc, #92]	; (d68 <system_clock_init+0xa0>)
     d0c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d0e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d10:	466b      	mov	r3, sp
     d12:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     d14:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     d16:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     d18:	2304      	movs	r3, #4
     d1a:	466a      	mov	r2, sp
     d1c:	7013      	strb	r3, [r2, #0]
     d1e:	4669      	mov	r1, sp
     d20:	2001      	movs	r0, #1
     d22:	4f12      	ldr	r7, [pc, #72]	; (d6c <system_clock_init+0xa4>)
     d24:	47b8      	blx	r7
     d26:	2001      	movs	r0, #1
     d28:	4e11      	ldr	r6, [pc, #68]	; (d70 <system_clock_init+0xa8>)
     d2a:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
     d2c:	4b11      	ldr	r3, [pc, #68]	; (d74 <system_clock_init+0xac>)
     d2e:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     d30:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     d32:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     d34:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     d36:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d38:	466b      	mov	r3, sp
     d3a:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d3c:	2306      	movs	r3, #6
     d3e:	466a      	mov	r2, sp
     d40:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     d42:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d44:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d46:	4669      	mov	r1, sp
     d48:	2000      	movs	r0, #0
     d4a:	47b8      	blx	r7
     d4c:	2000      	movs	r0, #0
     d4e:	47b0      	blx	r6
#endif
}
     d50:	b005      	add	sp, #20
     d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d54:	40000800 	.word	0x40000800
     d58:	41004000 	.word	0x41004000
     d5c:	00000fb1 	.word	0x00000fb1
     d60:	00000be5 	.word	0x00000be5
     d64:	00000c21 	.word	0x00000c21
     d68:	00000d79 	.word	0x00000d79
     d6c:	00000d9d 	.word	0x00000d9d
     d70:	00000e55 	.word	0x00000e55
     d74:	40000400 	.word	0x40000400

00000d78 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     d78:	4a06      	ldr	r2, [pc, #24]	; (d94 <system_gclk_init+0x1c>)
     d7a:	6993      	ldr	r3, [r2, #24]
     d7c:	2108      	movs	r1, #8
     d7e:	430b      	orrs	r3, r1
     d80:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d82:	2201      	movs	r2, #1
     d84:	4b04      	ldr	r3, [pc, #16]	; (d98 <system_gclk_init+0x20>)
     d86:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d88:	0019      	movs	r1, r3
     d8a:	780b      	ldrb	r3, [r1, #0]
     d8c:	4213      	tst	r3, r2
     d8e:	d1fc      	bne.n	d8a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d90:	4770      	bx	lr
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	40000400 	.word	0x40000400
     d98:	40000c00 	.word	0x40000c00

00000d9c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d9c:	b570      	push	{r4, r5, r6, lr}
     d9e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     da0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     da2:	780d      	ldrb	r5, [r1, #0]
     da4:	022d      	lsls	r5, r5, #8
     da6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     da8:	784b      	ldrb	r3, [r1, #1]
     daa:	2b00      	cmp	r3, #0
     dac:	d002      	beq.n	db4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     dae:	2380      	movs	r3, #128	; 0x80
     db0:	02db      	lsls	r3, r3, #11
     db2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     db4:	7a4b      	ldrb	r3, [r1, #9]
     db6:	2b00      	cmp	r3, #0
     db8:	d002      	beq.n	dc0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     dba:	2380      	movs	r3, #128	; 0x80
     dbc:	031b      	lsls	r3, r3, #12
     dbe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     dc0:	6848      	ldr	r0, [r1, #4]
     dc2:	2801      	cmp	r0, #1
     dc4:	d910      	bls.n	de8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     dc6:	1e43      	subs	r3, r0, #1
     dc8:	4218      	tst	r0, r3
     dca:	d134      	bne.n	e36 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     dcc:	2802      	cmp	r0, #2
     dce:	d930      	bls.n	e32 <system_gclk_gen_set_config+0x96>
     dd0:	2302      	movs	r3, #2
     dd2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     dd4:	3201      	adds	r2, #1
						mask <<= 1) {
     dd6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     dd8:	4298      	cmp	r0, r3
     dda:	d8fb      	bhi.n	dd4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     ddc:	0212      	lsls	r2, r2, #8
     dde:	4332      	orrs	r2, r6
     de0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     de2:	2380      	movs	r3, #128	; 0x80
     de4:	035b      	lsls	r3, r3, #13
     de6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     de8:	7a0b      	ldrb	r3, [r1, #8]
     dea:	2b00      	cmp	r3, #0
     dec:	d002      	beq.n	df4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	039b      	lsls	r3, r3, #14
     df2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     df4:	4a13      	ldr	r2, [pc, #76]	; (e44 <system_gclk_gen_set_config+0xa8>)
     df6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     df8:	b25b      	sxtb	r3, r3
     dfa:	2b00      	cmp	r3, #0
     dfc:	dbfb      	blt.n	df6 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     dfe:	4b12      	ldr	r3, [pc, #72]	; (e48 <system_gclk_gen_set_config+0xac>)
     e00:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e02:	4b12      	ldr	r3, [pc, #72]	; (e4c <system_gclk_gen_set_config+0xb0>)
     e04:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e06:	4a0f      	ldr	r2, [pc, #60]	; (e44 <system_gclk_gen_set_config+0xa8>)
     e08:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e0a:	b25b      	sxtb	r3, r3
     e0c:	2b00      	cmp	r3, #0
     e0e:	dbfb      	blt.n	e08 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e10:	4b0c      	ldr	r3, [pc, #48]	; (e44 <system_gclk_gen_set_config+0xa8>)
     e12:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e14:	001a      	movs	r2, r3
     e16:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     e18:	b25b      	sxtb	r3, r3
     e1a:	2b00      	cmp	r3, #0
     e1c:	dbfb      	blt.n	e16 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e1e:	4a09      	ldr	r2, [pc, #36]	; (e44 <system_gclk_gen_set_config+0xa8>)
     e20:	6853      	ldr	r3, [r2, #4]
     e22:	2180      	movs	r1, #128	; 0x80
     e24:	0249      	lsls	r1, r1, #9
     e26:	400b      	ands	r3, r1
     e28:	431d      	orrs	r5, r3
     e2a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e2c:	4b08      	ldr	r3, [pc, #32]	; (e50 <system_gclk_gen_set_config+0xb4>)
     e2e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e30:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     e32:	2200      	movs	r2, #0
     e34:	e7d2      	b.n	ddc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e36:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     e38:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e3a:	2380      	movs	r3, #128	; 0x80
     e3c:	029b      	lsls	r3, r3, #10
     e3e:	431d      	orrs	r5, r3
     e40:	e7d2      	b.n	de8 <system_gclk_gen_set_config+0x4c>
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	40000c00 	.word	0x40000c00
     e48:	00000115 	.word	0x00000115
     e4c:	40000c08 	.word	0x40000c08
     e50:	00000155 	.word	0x00000155

00000e54 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e54:	b510      	push	{r4, lr}
     e56:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e58:	4a0b      	ldr	r2, [pc, #44]	; (e88 <system_gclk_gen_enable+0x34>)
     e5a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e5c:	b25b      	sxtb	r3, r3
     e5e:	2b00      	cmp	r3, #0
     e60:	dbfb      	blt.n	e5a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     e62:	4b0a      	ldr	r3, [pc, #40]	; (e8c <system_gclk_gen_enable+0x38>)
     e64:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e66:	4b0a      	ldr	r3, [pc, #40]	; (e90 <system_gclk_gen_enable+0x3c>)
     e68:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e6a:	4a07      	ldr	r2, [pc, #28]	; (e88 <system_gclk_gen_enable+0x34>)
     e6c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e6e:	b25b      	sxtb	r3, r3
     e70:	2b00      	cmp	r3, #0
     e72:	dbfb      	blt.n	e6c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e74:	4a04      	ldr	r2, [pc, #16]	; (e88 <system_gclk_gen_enable+0x34>)
     e76:	6851      	ldr	r1, [r2, #4]
     e78:	2380      	movs	r3, #128	; 0x80
     e7a:	025b      	lsls	r3, r3, #9
     e7c:	430b      	orrs	r3, r1
     e7e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     e80:	4b04      	ldr	r3, [pc, #16]	; (e94 <system_gclk_gen_enable+0x40>)
     e82:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e84:	bd10      	pop	{r4, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	40000c00 	.word	0x40000c00
     e8c:	00000115 	.word	0x00000115
     e90:	40000c04 	.word	0x40000c04
     e94:	00000155 	.word	0x00000155

00000e98 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e9c:	4a1a      	ldr	r2, [pc, #104]	; (f08 <system_gclk_gen_get_hz+0x70>)
     e9e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ea0:	b25b      	sxtb	r3, r3
     ea2:	2b00      	cmp	r3, #0
     ea4:	dbfb      	blt.n	e9e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     ea6:	4b19      	ldr	r3, [pc, #100]	; (f0c <system_gclk_gen_get_hz+0x74>)
     ea8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     eaa:	4b19      	ldr	r3, [pc, #100]	; (f10 <system_gclk_gen_get_hz+0x78>)
     eac:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     eae:	4a16      	ldr	r2, [pc, #88]	; (f08 <system_gclk_gen_get_hz+0x70>)
     eb0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     eb2:	b25b      	sxtb	r3, r3
     eb4:	2b00      	cmp	r3, #0
     eb6:	dbfb      	blt.n	eb0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     eb8:	4e13      	ldr	r6, [pc, #76]	; (f08 <system_gclk_gen_get_hz+0x70>)
     eba:	6870      	ldr	r0, [r6, #4]
     ebc:	04c0      	lsls	r0, r0, #19
     ebe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ec0:	4b14      	ldr	r3, [pc, #80]	; (f14 <system_gclk_gen_get_hz+0x7c>)
     ec2:	4798      	blx	r3
     ec4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ec6:	4b12      	ldr	r3, [pc, #72]	; (f10 <system_gclk_gen_get_hz+0x78>)
     ec8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     eca:	6876      	ldr	r6, [r6, #4]
     ecc:	02f6      	lsls	r6, r6, #11
     ece:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ed0:	4b11      	ldr	r3, [pc, #68]	; (f18 <system_gclk_gen_get_hz+0x80>)
     ed2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ed4:	4a0c      	ldr	r2, [pc, #48]	; (f08 <system_gclk_gen_get_hz+0x70>)
     ed6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ed8:	b25b      	sxtb	r3, r3
     eda:	2b00      	cmp	r3, #0
     edc:	dbfb      	blt.n	ed6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     ede:	4b0a      	ldr	r3, [pc, #40]	; (f08 <system_gclk_gen_get_hz+0x70>)
     ee0:	689c      	ldr	r4, [r3, #8]
     ee2:	0224      	lsls	r4, r4, #8
     ee4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     ee6:	4b0d      	ldr	r3, [pc, #52]	; (f1c <system_gclk_gen_get_hz+0x84>)
     ee8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     eea:	2e00      	cmp	r6, #0
     eec:	d107      	bne.n	efe <system_gclk_gen_get_hz+0x66>
     eee:	2c01      	cmp	r4, #1
     ef0:	d907      	bls.n	f02 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     ef2:	0021      	movs	r1, r4
     ef4:	0028      	movs	r0, r5
     ef6:	4b0a      	ldr	r3, [pc, #40]	; (f20 <system_gclk_gen_get_hz+0x88>)
     ef8:	4798      	blx	r3
     efa:	0005      	movs	r5, r0
     efc:	e001      	b.n	f02 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     efe:	3401      	adds	r4, #1
     f00:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     f02:	0028      	movs	r0, r5
     f04:	bd70      	pop	{r4, r5, r6, pc}
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	40000c00 	.word	0x40000c00
     f0c:	00000115 	.word	0x00000115
     f10:	40000c04 	.word	0x40000c04
     f14:	00000b51 	.word	0x00000b51
     f18:	40000c08 	.word	0x40000c08
     f1c:	00000155 	.word	0x00000155
     f20:	0000133d 	.word	0x0000133d

00000f24 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f24:	b510      	push	{r4, lr}
     f26:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f28:	4b06      	ldr	r3, [pc, #24]	; (f44 <system_gclk_chan_enable+0x20>)
     f2a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f2c:	4b06      	ldr	r3, [pc, #24]	; (f48 <system_gclk_chan_enable+0x24>)
     f2e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f30:	4a06      	ldr	r2, [pc, #24]	; (f4c <system_gclk_chan_enable+0x28>)
     f32:	8853      	ldrh	r3, [r2, #2]
     f34:	2180      	movs	r1, #128	; 0x80
     f36:	01c9      	lsls	r1, r1, #7
     f38:	430b      	orrs	r3, r1
     f3a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     f3c:	4b04      	ldr	r3, [pc, #16]	; (f50 <system_gclk_chan_enable+0x2c>)
     f3e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f40:	bd10      	pop	{r4, pc}
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	00000115 	.word	0x00000115
     f48:	40000c02 	.word	0x40000c02
     f4c:	40000c00 	.word	0x40000c00
     f50:	00000155 	.word	0x00000155

00000f54 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f54:	b510      	push	{r4, lr}
     f56:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f58:	4b0f      	ldr	r3, [pc, #60]	; (f98 <system_gclk_chan_disable+0x44>)
     f5a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f5c:	4b0f      	ldr	r3, [pc, #60]	; (f9c <system_gclk_chan_disable+0x48>)
     f5e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f60:	4a0f      	ldr	r2, [pc, #60]	; (fa0 <system_gclk_chan_disable+0x4c>)
     f62:	8853      	ldrh	r3, [r2, #2]
     f64:	051b      	lsls	r3, r3, #20
     f66:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f68:	8853      	ldrh	r3, [r2, #2]
     f6a:	490e      	ldr	r1, [pc, #56]	; (fa4 <system_gclk_chan_disable+0x50>)
     f6c:	400b      	ands	r3, r1
     f6e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f70:	8853      	ldrh	r3, [r2, #2]
     f72:	490d      	ldr	r1, [pc, #52]	; (fa8 <system_gclk_chan_disable+0x54>)
     f74:	400b      	ands	r3, r1
     f76:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f78:	0011      	movs	r1, r2
     f7a:	2280      	movs	r2, #128	; 0x80
     f7c:	01d2      	lsls	r2, r2, #7
     f7e:	884b      	ldrh	r3, [r1, #2]
     f80:	4213      	tst	r3, r2
     f82:	d1fc      	bne.n	f7e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f84:	4906      	ldr	r1, [pc, #24]	; (fa0 <system_gclk_chan_disable+0x4c>)
     f86:	884a      	ldrh	r2, [r1, #2]
     f88:	0203      	lsls	r3, r0, #8
     f8a:	4806      	ldr	r0, [pc, #24]	; (fa4 <system_gclk_chan_disable+0x50>)
     f8c:	4002      	ands	r2, r0
     f8e:	4313      	orrs	r3, r2
     f90:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     f92:	4b06      	ldr	r3, [pc, #24]	; (fac <system_gclk_chan_disable+0x58>)
     f94:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f96:	bd10      	pop	{r4, pc}
     f98:	00000115 	.word	0x00000115
     f9c:	40000c02 	.word	0x40000c02
     fa0:	40000c00 	.word	0x40000c00
     fa4:	fffff0ff 	.word	0xfffff0ff
     fa8:	ffffbfff 	.word	0xffffbfff
     fac:	00000155 	.word	0x00000155

00000fb0 <system_gclk_chan_set_config>:
{
     fb0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     fb2:	780c      	ldrb	r4, [r1, #0]
     fb4:	0224      	lsls	r4, r4, #8
     fb6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     fb8:	4b02      	ldr	r3, [pc, #8]	; (fc4 <system_gclk_chan_set_config+0x14>)
     fba:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     fbc:	b2a4      	uxth	r4, r4
     fbe:	4b02      	ldr	r3, [pc, #8]	; (fc8 <system_gclk_chan_set_config+0x18>)
     fc0:	805c      	strh	r4, [r3, #2]
}
     fc2:	bd10      	pop	{r4, pc}
     fc4:	00000f55 	.word	0x00000f55
     fc8:	40000c00 	.word	0x40000c00

00000fcc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     fcc:	b510      	push	{r4, lr}
     fce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     fd0:	4b06      	ldr	r3, [pc, #24]	; (fec <system_gclk_chan_get_hz+0x20>)
     fd2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fd4:	4b06      	ldr	r3, [pc, #24]	; (ff0 <system_gclk_chan_get_hz+0x24>)
     fd6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     fd8:	4b06      	ldr	r3, [pc, #24]	; (ff4 <system_gclk_chan_get_hz+0x28>)
     fda:	885c      	ldrh	r4, [r3, #2]
     fdc:	0524      	lsls	r4, r4, #20
     fde:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     fe0:	4b05      	ldr	r3, [pc, #20]	; (ff8 <system_gclk_chan_get_hz+0x2c>)
     fe2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     fe4:	0020      	movs	r0, r4
     fe6:	4b05      	ldr	r3, [pc, #20]	; (ffc <system_gclk_chan_get_hz+0x30>)
     fe8:	4798      	blx	r3
}
     fea:	bd10      	pop	{r4, pc}
     fec:	00000115 	.word	0x00000115
     ff0:	40000c02 	.word	0x40000c02
     ff4:	40000c00 	.word	0x40000c00
     ff8:	00000155 	.word	0x00000155
     ffc:	00000e99 	.word	0x00000e99

00001000 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1000:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1002:	78d3      	ldrb	r3, [r2, #3]
    1004:	2b00      	cmp	r3, #0
    1006:	d135      	bne.n	1074 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1008:	7813      	ldrb	r3, [r2, #0]
    100a:	2b80      	cmp	r3, #128	; 0x80
    100c:	d029      	beq.n	1062 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    100e:	061b      	lsls	r3, r3, #24
    1010:	2480      	movs	r4, #128	; 0x80
    1012:	0264      	lsls	r4, r4, #9
    1014:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1016:	7854      	ldrb	r4, [r2, #1]
    1018:	2502      	movs	r5, #2
    101a:	43ac      	bics	r4, r5
    101c:	d106      	bne.n	102c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    101e:	7894      	ldrb	r4, [r2, #2]
    1020:	2c00      	cmp	r4, #0
    1022:	d120      	bne.n	1066 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1024:	2480      	movs	r4, #128	; 0x80
    1026:	02a4      	lsls	r4, r4, #10
    1028:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    102a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    102c:	7854      	ldrb	r4, [r2, #1]
    102e:	3c01      	subs	r4, #1
    1030:	2c01      	cmp	r4, #1
    1032:	d91c      	bls.n	106e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1034:	040d      	lsls	r5, r1, #16
    1036:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1038:	24a0      	movs	r4, #160	; 0xa0
    103a:	05e4      	lsls	r4, r4, #23
    103c:	432c      	orrs	r4, r5
    103e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1040:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1042:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1044:	24d0      	movs	r4, #208	; 0xd0
    1046:	0624      	lsls	r4, r4, #24
    1048:	432c      	orrs	r4, r5
    104a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    104c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    104e:	78d4      	ldrb	r4, [r2, #3]
    1050:	2c00      	cmp	r4, #0
    1052:	d122      	bne.n	109a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1054:	035b      	lsls	r3, r3, #13
    1056:	d51c      	bpl.n	1092 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1058:	7893      	ldrb	r3, [r2, #2]
    105a:	2b01      	cmp	r3, #1
    105c:	d01e      	beq.n	109c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    105e:	6141      	str	r1, [r0, #20]
    1060:	e017      	b.n	1092 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1062:	2300      	movs	r3, #0
    1064:	e7d7      	b.n	1016 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1066:	24c0      	movs	r4, #192	; 0xc0
    1068:	02e4      	lsls	r4, r4, #11
    106a:	4323      	orrs	r3, r4
    106c:	e7dd      	b.n	102a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    106e:	4c0d      	ldr	r4, [pc, #52]	; (10a4 <_system_pinmux_config+0xa4>)
    1070:	4023      	ands	r3, r4
    1072:	e7df      	b.n	1034 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1074:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1076:	040c      	lsls	r4, r1, #16
    1078:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    107a:	23a0      	movs	r3, #160	; 0xa0
    107c:	05db      	lsls	r3, r3, #23
    107e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1080:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1082:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1084:	23d0      	movs	r3, #208	; 0xd0
    1086:	061b      	lsls	r3, r3, #24
    1088:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    108a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    108c:	78d3      	ldrb	r3, [r2, #3]
    108e:	2b00      	cmp	r3, #0
    1090:	d103      	bne.n	109a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1092:	7853      	ldrb	r3, [r2, #1]
    1094:	3b01      	subs	r3, #1
    1096:	2b01      	cmp	r3, #1
    1098:	d902      	bls.n	10a0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    109a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    109c:	6181      	str	r1, [r0, #24]
    109e:	e7f8      	b.n	1092 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    10a0:	6081      	str	r1, [r0, #8]
}
    10a2:	e7fa      	b.n	109a <_system_pinmux_config+0x9a>
    10a4:	fffbffff 	.word	0xfffbffff

000010a8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    10a8:	b510      	push	{r4, lr}
    10aa:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10ac:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10ae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10b0:	2900      	cmp	r1, #0
    10b2:	d104      	bne.n	10be <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    10b4:	0943      	lsrs	r3, r0, #5
    10b6:	01db      	lsls	r3, r3, #7
    10b8:	4905      	ldr	r1, [pc, #20]	; (10d0 <system_pinmux_pin_set_config+0x28>)
    10ba:	468c      	mov	ip, r1
    10bc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    10be:	241f      	movs	r4, #31
    10c0:	4020      	ands	r0, r4
    10c2:	2101      	movs	r1, #1
    10c4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    10c6:	0018      	movs	r0, r3
    10c8:	4b02      	ldr	r3, [pc, #8]	; (10d4 <system_pinmux_pin_set_config+0x2c>)
    10ca:	4798      	blx	r3
}
    10cc:	bd10      	pop	{r4, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	41004400 	.word	0x41004400
    10d4:	00001001 	.word	0x00001001

000010d8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10d8:	4770      	bx	lr
	...

000010dc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10dc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <system_init+0x18>)
    10e0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    10e2:	4b05      	ldr	r3, [pc, #20]	; (10f8 <system_init+0x1c>)
    10e4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <system_init+0x20>)
    10e8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10ea:	4b05      	ldr	r3, [pc, #20]	; (1100 <system_init+0x24>)
    10ec:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10ee:	4b05      	ldr	r3, [pc, #20]	; (1104 <system_init+0x28>)
    10f0:	4798      	blx	r3
}
    10f2:	bd10      	pop	{r4, pc}
    10f4:	00000cc9 	.word	0x00000cc9
    10f8:	00000185 	.word	0x00000185
    10fc:	000010d9 	.word	0x000010d9
    1100:	000010d9 	.word	0x000010d9
    1104:	000010d9 	.word	0x000010d9

00001108 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1108:	e7fe      	b.n	1108 <Dummy_Handler>
	...

0000110c <Reset_Handler>:
{
    110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    110e:	4a2a      	ldr	r2, [pc, #168]	; (11b8 <Reset_Handler+0xac>)
    1110:	4b2a      	ldr	r3, [pc, #168]	; (11bc <Reset_Handler+0xb0>)
    1112:	429a      	cmp	r2, r3
    1114:	d011      	beq.n	113a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1116:	001a      	movs	r2, r3
    1118:	4b29      	ldr	r3, [pc, #164]	; (11c0 <Reset_Handler+0xb4>)
    111a:	429a      	cmp	r2, r3
    111c:	d20d      	bcs.n	113a <Reset_Handler+0x2e>
    111e:	4a29      	ldr	r2, [pc, #164]	; (11c4 <Reset_Handler+0xb8>)
    1120:	3303      	adds	r3, #3
    1122:	1a9b      	subs	r3, r3, r2
    1124:	089b      	lsrs	r3, r3, #2
    1126:	3301      	adds	r3, #1
    1128:	009b      	lsls	r3, r3, #2
    112a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    112c:	4823      	ldr	r0, [pc, #140]	; (11bc <Reset_Handler+0xb0>)
    112e:	4922      	ldr	r1, [pc, #136]	; (11b8 <Reset_Handler+0xac>)
    1130:	588c      	ldr	r4, [r1, r2]
    1132:	5084      	str	r4, [r0, r2]
    1134:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1136:	429a      	cmp	r2, r3
    1138:	d1fa      	bne.n	1130 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    113a:	4a23      	ldr	r2, [pc, #140]	; (11c8 <Reset_Handler+0xbc>)
    113c:	4b23      	ldr	r3, [pc, #140]	; (11cc <Reset_Handler+0xc0>)
    113e:	429a      	cmp	r2, r3
    1140:	d20a      	bcs.n	1158 <Reset_Handler+0x4c>
    1142:	43d3      	mvns	r3, r2
    1144:	4921      	ldr	r1, [pc, #132]	; (11cc <Reset_Handler+0xc0>)
    1146:	185b      	adds	r3, r3, r1
    1148:	2103      	movs	r1, #3
    114a:	438b      	bics	r3, r1
    114c:	3304      	adds	r3, #4
    114e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1150:	2100      	movs	r1, #0
    1152:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1154:	4293      	cmp	r3, r2
    1156:	d1fc      	bne.n	1152 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1158:	4a1d      	ldr	r2, [pc, #116]	; (11d0 <Reset_Handler+0xc4>)
    115a:	21ff      	movs	r1, #255	; 0xff
    115c:	4b1d      	ldr	r3, [pc, #116]	; (11d4 <Reset_Handler+0xc8>)
    115e:	438b      	bics	r3, r1
    1160:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1162:	39fd      	subs	r1, #253	; 0xfd
    1164:	2390      	movs	r3, #144	; 0x90
    1166:	005b      	lsls	r3, r3, #1
    1168:	4a1b      	ldr	r2, [pc, #108]	; (11d8 <Reset_Handler+0xcc>)
    116a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    116c:	4a1b      	ldr	r2, [pc, #108]	; (11dc <Reset_Handler+0xd0>)
    116e:	78d3      	ldrb	r3, [r2, #3]
    1170:	2503      	movs	r5, #3
    1172:	43ab      	bics	r3, r5
    1174:	2402      	movs	r4, #2
    1176:	4323      	orrs	r3, r4
    1178:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    117a:	78d3      	ldrb	r3, [r2, #3]
    117c:	270c      	movs	r7, #12
    117e:	43bb      	bics	r3, r7
    1180:	2608      	movs	r6, #8
    1182:	4333      	orrs	r3, r6
    1184:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1186:	4b16      	ldr	r3, [pc, #88]	; (11e0 <Reset_Handler+0xd4>)
    1188:	7b98      	ldrb	r0, [r3, #14]
    118a:	2230      	movs	r2, #48	; 0x30
    118c:	4390      	bics	r0, r2
    118e:	2220      	movs	r2, #32
    1190:	4310      	orrs	r0, r2
    1192:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1194:	7b99      	ldrb	r1, [r3, #14]
    1196:	43b9      	bics	r1, r7
    1198:	4331      	orrs	r1, r6
    119a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    119c:	7b9a      	ldrb	r2, [r3, #14]
    119e:	43aa      	bics	r2, r5
    11a0:	4322      	orrs	r2, r4
    11a2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    11a4:	4a0f      	ldr	r2, [pc, #60]	; (11e4 <Reset_Handler+0xd8>)
    11a6:	6853      	ldr	r3, [r2, #4]
    11a8:	2180      	movs	r1, #128	; 0x80
    11aa:	430b      	orrs	r3, r1
    11ac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    11ae:	4b0e      	ldr	r3, [pc, #56]	; (11e8 <Reset_Handler+0xdc>)
    11b0:	4798      	blx	r3
        main();
    11b2:	4b0e      	ldr	r3, [pc, #56]	; (11ec <Reset_Handler+0xe0>)
    11b4:	4798      	blx	r3
    11b6:	e7fe      	b.n	11b6 <Reset_Handler+0xaa>
    11b8:	00002e64 	.word	0x00002e64
    11bc:	20000000 	.word	0x20000000
    11c0:	2000000c 	.word	0x2000000c
    11c4:	20000004 	.word	0x20000004
    11c8:	2000000c 	.word	0x2000000c
    11cc:	200000c4 	.word	0x200000c4
    11d0:	e000ed00 	.word	0xe000ed00
    11d4:	00000000 	.word	0x00000000
    11d8:	41007000 	.word	0x41007000
    11dc:	41005000 	.word	0x41005000
    11e0:	41004800 	.word	0x41004800
    11e4:	41004000 	.word	0x41004000
    11e8:	00002d1d 	.word	0x00002d1d
    11ec:	000012cd 	.word	0x000012cd

000011f0 <i2c_write_complete_callback>:
{
	/* Initiate new packet read */
	//! [read_next]
	//i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
	//! [read_next]
}
    11f0:	4770      	bx	lr

000011f2 <i2c_read_complete_callback>:
	uint8_t i;
	
	i = rd_buffer[0];
	
	//! [read_next]
}
    11f2:	4770      	bx	lr

000011f4 <configure_i2c>:
//! [callback_func]

//! [initialize_i2c]
void configure_i2c(void)
{
    11f4:	b530      	push	{r4, r5, lr}
    11f6:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    11f8:	ab01      	add	r3, sp, #4
    11fa:	2264      	movs	r2, #100	; 0x64
    11fc:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    11fe:	4a21      	ldr	r2, [pc, #132]	; (1284 <configure_i2c+0x90>)
    1200:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1202:	2200      	movs	r2, #0
    1204:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1206:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1208:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    120a:	2180      	movs	r1, #128	; 0x80
    120c:	0389      	lsls	r1, r1, #14
    120e:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1210:	2101      	movs	r1, #1
    1212:	4249      	negs	r1, r1
    1214:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1216:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1218:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    121a:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    121c:	3125      	adds	r1, #37	; 0x25
    121e:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1220:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1222:	3108      	adds	r1, #8
    1224:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1226:	3101      	adds	r1, #1
    1228:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    122a:	3101      	adds	r1, #1
    122c:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    122e:	32d7      	adds	r2, #215	; 0xd7
    1230:	861a      	strh	r2, [r3, #48]	; 0x30
#endif
	//! [conf_change]

	/* Initialize and enable device with config */
	//! [init_module]
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master)     
    1232:	4d15      	ldr	r5, [pc, #84]	; (1288 <configure_i2c+0x94>)
    1234:	4c15      	ldr	r4, [pc, #84]	; (128c <configure_i2c+0x98>)
    1236:	aa01      	add	r2, sp, #4
    1238:	4915      	ldr	r1, [pc, #84]	; (1290 <configure_i2c+0x9c>)
    123a:	0028      	movs	r0, r5
    123c:	47a0      	blx	r4
    123e:	2800      	cmp	r0, #0
    1240:	d1f9      	bne.n	1236 <configure_i2c+0x42>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1242:	4b11      	ldr	r3, [pc, #68]	; (1288 <configure_i2c+0x94>)
    1244:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1246:	2207      	movs	r2, #7
    1248:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    124a:	421a      	tst	r2, r3
    124c:	d1fc      	bne.n	1248 <configure_i2c+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    124e:	6823      	ldr	r3, [r4, #0]
    1250:	2202      	movs	r2, #2
    1252:	4313      	orrs	r3, r2
    1254:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1256:	4d0c      	ldr	r5, [pc, #48]	; (1288 <configure_i2c+0x94>)
    1258:	6828      	ldr	r0, [r5, #0]
    125a:	4b0e      	ldr	r3, [pc, #56]	; (1294 <configure_i2c+0xa0>)
    125c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    125e:	231f      	movs	r3, #31
    1260:	4018      	ands	r0, r3
    1262:	3b1e      	subs	r3, #30
    1264:	4083      	lsls	r3, r0
    1266:	4a0c      	ldr	r2, [pc, #48]	; (1298 <configure_i2c+0xa4>)
    1268:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    126a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    126c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    126e:	2110      	movs	r1, #16
    1270:	8b62      	ldrh	r2, [r4, #26]
    1272:	420a      	tst	r2, r1
    1274:	d104      	bne.n	1280 <configure_i2c+0x8c>
		timeout_counter++;
    1276:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1278:	4283      	cmp	r3, r0
    127a:	d3f9      	bcc.n	1270 <configure_i2c+0x7c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    127c:	2310      	movs	r3, #16
    127e:	8363      	strh	r3, [r4, #26]
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
	//! [enable_module]
}
    1280:	b00f      	add	sp, #60	; 0x3c
    1282:	bd30      	pop	{r4, r5, pc}
    1284:	00000d48 	.word	0x00000d48
    1288:	20000090 	.word	0x20000090
    128c:	000001e1 	.word	0x000001e1
    1290:	42001000 	.word	0x42001000
    1294:	00000ac1 	.word	0x00000ac1
    1298:	e000e100 	.word	0xe000e100

0000129c <configure_i2c_callbacks>:
//! [initialize_i2c]

//! [setup_callback]
void configure_i2c_callbacks(void)
{
    129c:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	//! [Write callback_reg]
	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    129e:	4c07      	ldr	r4, [pc, #28]	; (12bc <configure_i2c_callbacks+0x20>)
    12a0:	2200      	movs	r2, #0
    12a2:	4907      	ldr	r1, [pc, #28]	; (12c0 <configure_i2c_callbacks+0x24>)
    12a4:	0020      	movs	r0, r4
    12a6:	4d07      	ldr	r5, [pc, #28]	; (12c4 <configure_i2c_callbacks+0x28>)
    12a8:	47a8      	blx	r5
			I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	//! [callback_reg]
	
	//! [Read callback_reg]
	i2c_master_register_callback(&i2c_master_instance, i2c_read_complete_callback,
    12aa:	2201      	movs	r2, #1
    12ac:	4906      	ldr	r1, [pc, #24]	; (12c8 <configure_i2c_callbacks+0x2c>)
    12ae:	0020      	movs	r0, r4
    12b0:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    12b2:	7e63      	ldrb	r3, [r4, #25]
    12b4:	2201      	movs	r2, #1
    12b6:	4313      	orrs	r3, r2
    12b8:	7663      	strb	r3, [r4, #25]
	
	//! [callback_en]
	i2c_master_enable_callback(&i2c_master_instance,
			I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	//! [callback_en]
}
    12ba:	bd70      	pop	{r4, r5, r6, pc}
    12bc:	20000090 	.word	0x20000090
    12c0:	000011f1 	.word	0x000011f1
    12c4:	0000065d 	.word	0x0000065d
    12c8:	000011f3 	.word	0x000011f3

000012cc <main>:
//! [setup_callback]

int main(void)
{
    12cc:	b570      	push	{r4, r5, r6, lr}
	system_init();
    12ce:	4b11      	ldr	r3, [pc, #68]	; (1314 <main+0x48>)
    12d0:	4798      	blx	r3

	//! [run_initialize_i2c]
	/* Configure device and enable. */
	//! [config]
	configure_i2c();
    12d2:	4b11      	ldr	r3, [pc, #68]	; (1318 <main+0x4c>)
    12d4:	4798      	blx	r3
	//! [config]
	/* Configure callbacks and enable. */
	//! [config_callback]
	configure_i2c_callbacks();
    12d6:	4b11      	ldr	r3, [pc, #68]	; (131c <main+0x50>)
    12d8:	4798      	blx	r3
	//! [config_callback]
	//! [run_initialize_i2c]

	/* Init i2c packet. */
	//! [write_packet]
	wr_packet.address     = SLAVE_ADDRESS;
    12da:	4b11      	ldr	r3, [pc, #68]	; (1320 <main+0x54>)
    12dc:	2277      	movs	r2, #119	; 0x77
    12de:	801a      	strh	r2, [r3, #0]
	wr_packet.data_length = DATA_LENGTH;
	wr_packet.data        = wr_buffer;
    12e0:	4910      	ldr	r1, [pc, #64]	; (1324 <main+0x58>)
    12e2:	6059      	str	r1, [r3, #4]
	//! [write_packet]
	//! [read_packet]
	rd_packet.address     = SLAVE_ADDRESS;
    12e4:	4b10      	ldr	r3, [pc, #64]	; (1328 <main+0x5c>)
    12e6:	801a      	strh	r2, [r3, #0]
	rd_packet.data_length = DATA_LENGTH;
    12e8:	3a6f      	subs	r2, #111	; 0x6f
    12ea:	805a      	strh	r2, [r3, #2]
	rd_packet.data        = rd_buffer;
    12ec:	4a0f      	ldr	r2, [pc, #60]	; (132c <main+0x60>)
    12ee:	605a      	str	r2, [r3, #4]
	return (port_base->IN.reg & pin_mask);
    12f0:	4d0f      	ldr	r5, [pc, #60]	; (1330 <main+0x64>)
    12f2:	2480      	movs	r4, #128	; 0x80
    12f4:	0224      	lsls	r4, r4, #8
			//} else {
				//wr_packet.data = &wr_buffer[0];
			//}
			//! [revert_order]
			//! [write_packet]
			wr_packet.data_length = 2;
    12f6:	4e0a      	ldr	r6, [pc, #40]	; (1320 <main+0x54>)
    12f8:	6a2b      	ldr	r3, [r5, #32]
		if (!port_pin_get_input_level(BUTTON_0_PIN)) {
    12fa:	4223      	tst	r3, r4
    12fc:	d1fc      	bne.n	12f8 <main+0x2c>
    12fe:	6a2b      	ldr	r3, [r5, #32]
		  	while (!port_pin_get_input_level(BUTTON_0_PIN)) {
    1300:	4223      	tst	r3, r4
    1302:	d0fc      	beq.n	12fe <main+0x32>
			wr_packet.data_length = 2;
    1304:	2302      	movs	r3, #2
    1306:	8073      	strh	r3, [r6, #2]
			i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);
    1308:	0031      	movs	r1, r6
    130a:	480a      	ldr	r0, [pc, #40]	; (1334 <main+0x68>)
    130c:	4b0a      	ldr	r3, [pc, #40]	; (1338 <main+0x6c>)
    130e:	4798      	blx	r3
    1310:	e7f2      	b.n	12f8 <main+0x2c>
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	000010dd 	.word	0x000010dd
    1318:	000011f5 	.word	0x000011f5
    131c:	0000129d 	.word	0x0000129d
    1320:	20000084 	.word	0x20000084
    1324:	20000004 	.word	0x20000004
    1328:	200000b8 	.word	0x200000b8
    132c:	20000064 	.word	0x20000064
    1330:	41004400 	.word	0x41004400
    1334:	20000090 	.word	0x20000090
    1338:	00000675 	.word	0x00000675

0000133c <__udivsi3>:
    133c:	2200      	movs	r2, #0
    133e:	0843      	lsrs	r3, r0, #1
    1340:	428b      	cmp	r3, r1
    1342:	d374      	bcc.n	142e <__udivsi3+0xf2>
    1344:	0903      	lsrs	r3, r0, #4
    1346:	428b      	cmp	r3, r1
    1348:	d35f      	bcc.n	140a <__udivsi3+0xce>
    134a:	0a03      	lsrs	r3, r0, #8
    134c:	428b      	cmp	r3, r1
    134e:	d344      	bcc.n	13da <__udivsi3+0x9e>
    1350:	0b03      	lsrs	r3, r0, #12
    1352:	428b      	cmp	r3, r1
    1354:	d328      	bcc.n	13a8 <__udivsi3+0x6c>
    1356:	0c03      	lsrs	r3, r0, #16
    1358:	428b      	cmp	r3, r1
    135a:	d30d      	bcc.n	1378 <__udivsi3+0x3c>
    135c:	22ff      	movs	r2, #255	; 0xff
    135e:	0209      	lsls	r1, r1, #8
    1360:	ba12      	rev	r2, r2
    1362:	0c03      	lsrs	r3, r0, #16
    1364:	428b      	cmp	r3, r1
    1366:	d302      	bcc.n	136e <__udivsi3+0x32>
    1368:	1212      	asrs	r2, r2, #8
    136a:	0209      	lsls	r1, r1, #8
    136c:	d065      	beq.n	143a <__udivsi3+0xfe>
    136e:	0b03      	lsrs	r3, r0, #12
    1370:	428b      	cmp	r3, r1
    1372:	d319      	bcc.n	13a8 <__udivsi3+0x6c>
    1374:	e000      	b.n	1378 <__udivsi3+0x3c>
    1376:	0a09      	lsrs	r1, r1, #8
    1378:	0bc3      	lsrs	r3, r0, #15
    137a:	428b      	cmp	r3, r1
    137c:	d301      	bcc.n	1382 <__udivsi3+0x46>
    137e:	03cb      	lsls	r3, r1, #15
    1380:	1ac0      	subs	r0, r0, r3
    1382:	4152      	adcs	r2, r2
    1384:	0b83      	lsrs	r3, r0, #14
    1386:	428b      	cmp	r3, r1
    1388:	d301      	bcc.n	138e <__udivsi3+0x52>
    138a:	038b      	lsls	r3, r1, #14
    138c:	1ac0      	subs	r0, r0, r3
    138e:	4152      	adcs	r2, r2
    1390:	0b43      	lsrs	r3, r0, #13
    1392:	428b      	cmp	r3, r1
    1394:	d301      	bcc.n	139a <__udivsi3+0x5e>
    1396:	034b      	lsls	r3, r1, #13
    1398:	1ac0      	subs	r0, r0, r3
    139a:	4152      	adcs	r2, r2
    139c:	0b03      	lsrs	r3, r0, #12
    139e:	428b      	cmp	r3, r1
    13a0:	d301      	bcc.n	13a6 <__udivsi3+0x6a>
    13a2:	030b      	lsls	r3, r1, #12
    13a4:	1ac0      	subs	r0, r0, r3
    13a6:	4152      	adcs	r2, r2
    13a8:	0ac3      	lsrs	r3, r0, #11
    13aa:	428b      	cmp	r3, r1
    13ac:	d301      	bcc.n	13b2 <__udivsi3+0x76>
    13ae:	02cb      	lsls	r3, r1, #11
    13b0:	1ac0      	subs	r0, r0, r3
    13b2:	4152      	adcs	r2, r2
    13b4:	0a83      	lsrs	r3, r0, #10
    13b6:	428b      	cmp	r3, r1
    13b8:	d301      	bcc.n	13be <__udivsi3+0x82>
    13ba:	028b      	lsls	r3, r1, #10
    13bc:	1ac0      	subs	r0, r0, r3
    13be:	4152      	adcs	r2, r2
    13c0:	0a43      	lsrs	r3, r0, #9
    13c2:	428b      	cmp	r3, r1
    13c4:	d301      	bcc.n	13ca <__udivsi3+0x8e>
    13c6:	024b      	lsls	r3, r1, #9
    13c8:	1ac0      	subs	r0, r0, r3
    13ca:	4152      	adcs	r2, r2
    13cc:	0a03      	lsrs	r3, r0, #8
    13ce:	428b      	cmp	r3, r1
    13d0:	d301      	bcc.n	13d6 <__udivsi3+0x9a>
    13d2:	020b      	lsls	r3, r1, #8
    13d4:	1ac0      	subs	r0, r0, r3
    13d6:	4152      	adcs	r2, r2
    13d8:	d2cd      	bcs.n	1376 <__udivsi3+0x3a>
    13da:	09c3      	lsrs	r3, r0, #7
    13dc:	428b      	cmp	r3, r1
    13de:	d301      	bcc.n	13e4 <__udivsi3+0xa8>
    13e0:	01cb      	lsls	r3, r1, #7
    13e2:	1ac0      	subs	r0, r0, r3
    13e4:	4152      	adcs	r2, r2
    13e6:	0983      	lsrs	r3, r0, #6
    13e8:	428b      	cmp	r3, r1
    13ea:	d301      	bcc.n	13f0 <__udivsi3+0xb4>
    13ec:	018b      	lsls	r3, r1, #6
    13ee:	1ac0      	subs	r0, r0, r3
    13f0:	4152      	adcs	r2, r2
    13f2:	0943      	lsrs	r3, r0, #5
    13f4:	428b      	cmp	r3, r1
    13f6:	d301      	bcc.n	13fc <__udivsi3+0xc0>
    13f8:	014b      	lsls	r3, r1, #5
    13fa:	1ac0      	subs	r0, r0, r3
    13fc:	4152      	adcs	r2, r2
    13fe:	0903      	lsrs	r3, r0, #4
    1400:	428b      	cmp	r3, r1
    1402:	d301      	bcc.n	1408 <__udivsi3+0xcc>
    1404:	010b      	lsls	r3, r1, #4
    1406:	1ac0      	subs	r0, r0, r3
    1408:	4152      	adcs	r2, r2
    140a:	08c3      	lsrs	r3, r0, #3
    140c:	428b      	cmp	r3, r1
    140e:	d301      	bcc.n	1414 <__udivsi3+0xd8>
    1410:	00cb      	lsls	r3, r1, #3
    1412:	1ac0      	subs	r0, r0, r3
    1414:	4152      	adcs	r2, r2
    1416:	0883      	lsrs	r3, r0, #2
    1418:	428b      	cmp	r3, r1
    141a:	d301      	bcc.n	1420 <__udivsi3+0xe4>
    141c:	008b      	lsls	r3, r1, #2
    141e:	1ac0      	subs	r0, r0, r3
    1420:	4152      	adcs	r2, r2
    1422:	0843      	lsrs	r3, r0, #1
    1424:	428b      	cmp	r3, r1
    1426:	d301      	bcc.n	142c <__udivsi3+0xf0>
    1428:	004b      	lsls	r3, r1, #1
    142a:	1ac0      	subs	r0, r0, r3
    142c:	4152      	adcs	r2, r2
    142e:	1a41      	subs	r1, r0, r1
    1430:	d200      	bcs.n	1434 <__udivsi3+0xf8>
    1432:	4601      	mov	r1, r0
    1434:	4152      	adcs	r2, r2
    1436:	4610      	mov	r0, r2
    1438:	4770      	bx	lr
    143a:	e7ff      	b.n	143c <__udivsi3+0x100>
    143c:	b501      	push	{r0, lr}
    143e:	2000      	movs	r0, #0
    1440:	f000 f806 	bl	1450 <__aeabi_idiv0>
    1444:	bd02      	pop	{r1, pc}
    1446:	46c0      	nop			; (mov r8, r8)

00001448 <__aeabi_uidivmod>:
    1448:	2900      	cmp	r1, #0
    144a:	d0f7      	beq.n	143c <__udivsi3+0x100>
    144c:	e776      	b.n	133c <__udivsi3>
    144e:	4770      	bx	lr

00001450 <__aeabi_idiv0>:
    1450:	4770      	bx	lr
    1452:	46c0      	nop			; (mov r8, r8)

00001454 <__aeabi_dadd>:
    1454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1456:	4645      	mov	r5, r8
    1458:	46de      	mov	lr, fp
    145a:	4657      	mov	r7, sl
    145c:	464e      	mov	r6, r9
    145e:	030c      	lsls	r4, r1, #12
    1460:	b5e0      	push	{r5, r6, r7, lr}
    1462:	004e      	lsls	r6, r1, #1
    1464:	0fc9      	lsrs	r1, r1, #31
    1466:	4688      	mov	r8, r1
    1468:	000d      	movs	r5, r1
    146a:	0a61      	lsrs	r1, r4, #9
    146c:	0f44      	lsrs	r4, r0, #29
    146e:	430c      	orrs	r4, r1
    1470:	00c7      	lsls	r7, r0, #3
    1472:	0319      	lsls	r1, r3, #12
    1474:	0058      	lsls	r0, r3, #1
    1476:	0fdb      	lsrs	r3, r3, #31
    1478:	469b      	mov	fp, r3
    147a:	0a4b      	lsrs	r3, r1, #9
    147c:	0f51      	lsrs	r1, r2, #29
    147e:	430b      	orrs	r3, r1
    1480:	0d76      	lsrs	r6, r6, #21
    1482:	0d40      	lsrs	r0, r0, #21
    1484:	0019      	movs	r1, r3
    1486:	00d2      	lsls	r2, r2, #3
    1488:	45d8      	cmp	r8, fp
    148a:	d100      	bne.n	148e <__aeabi_dadd+0x3a>
    148c:	e0ae      	b.n	15ec <__aeabi_dadd+0x198>
    148e:	1a35      	subs	r5, r6, r0
    1490:	2d00      	cmp	r5, #0
    1492:	dc00      	bgt.n	1496 <__aeabi_dadd+0x42>
    1494:	e0f6      	b.n	1684 <__aeabi_dadd+0x230>
    1496:	2800      	cmp	r0, #0
    1498:	d10f      	bne.n	14ba <__aeabi_dadd+0x66>
    149a:	4313      	orrs	r3, r2
    149c:	d100      	bne.n	14a0 <__aeabi_dadd+0x4c>
    149e:	e0db      	b.n	1658 <__aeabi_dadd+0x204>
    14a0:	1e6b      	subs	r3, r5, #1
    14a2:	2b00      	cmp	r3, #0
    14a4:	d000      	beq.n	14a8 <__aeabi_dadd+0x54>
    14a6:	e137      	b.n	1718 <__aeabi_dadd+0x2c4>
    14a8:	1aba      	subs	r2, r7, r2
    14aa:	4297      	cmp	r7, r2
    14ac:	41bf      	sbcs	r7, r7
    14ae:	1a64      	subs	r4, r4, r1
    14b0:	427f      	negs	r7, r7
    14b2:	1be4      	subs	r4, r4, r7
    14b4:	2601      	movs	r6, #1
    14b6:	0017      	movs	r7, r2
    14b8:	e024      	b.n	1504 <__aeabi_dadd+0xb0>
    14ba:	4bc6      	ldr	r3, [pc, #792]	; (17d4 <__aeabi_dadd+0x380>)
    14bc:	429e      	cmp	r6, r3
    14be:	d04d      	beq.n	155c <__aeabi_dadd+0x108>
    14c0:	2380      	movs	r3, #128	; 0x80
    14c2:	041b      	lsls	r3, r3, #16
    14c4:	4319      	orrs	r1, r3
    14c6:	2d38      	cmp	r5, #56	; 0x38
    14c8:	dd00      	ble.n	14cc <__aeabi_dadd+0x78>
    14ca:	e107      	b.n	16dc <__aeabi_dadd+0x288>
    14cc:	2d1f      	cmp	r5, #31
    14ce:	dd00      	ble.n	14d2 <__aeabi_dadd+0x7e>
    14d0:	e138      	b.n	1744 <__aeabi_dadd+0x2f0>
    14d2:	2020      	movs	r0, #32
    14d4:	1b43      	subs	r3, r0, r5
    14d6:	469a      	mov	sl, r3
    14d8:	000b      	movs	r3, r1
    14da:	4650      	mov	r0, sl
    14dc:	4083      	lsls	r3, r0
    14de:	4699      	mov	r9, r3
    14e0:	0013      	movs	r3, r2
    14e2:	4648      	mov	r0, r9
    14e4:	40eb      	lsrs	r3, r5
    14e6:	4318      	orrs	r0, r3
    14e8:	0003      	movs	r3, r0
    14ea:	4650      	mov	r0, sl
    14ec:	4082      	lsls	r2, r0
    14ee:	1e50      	subs	r0, r2, #1
    14f0:	4182      	sbcs	r2, r0
    14f2:	40e9      	lsrs	r1, r5
    14f4:	431a      	orrs	r2, r3
    14f6:	1aba      	subs	r2, r7, r2
    14f8:	1a61      	subs	r1, r4, r1
    14fa:	4297      	cmp	r7, r2
    14fc:	41a4      	sbcs	r4, r4
    14fe:	0017      	movs	r7, r2
    1500:	4264      	negs	r4, r4
    1502:	1b0c      	subs	r4, r1, r4
    1504:	0223      	lsls	r3, r4, #8
    1506:	d562      	bpl.n	15ce <__aeabi_dadd+0x17a>
    1508:	0264      	lsls	r4, r4, #9
    150a:	0a65      	lsrs	r5, r4, #9
    150c:	2d00      	cmp	r5, #0
    150e:	d100      	bne.n	1512 <__aeabi_dadd+0xbe>
    1510:	e0df      	b.n	16d2 <__aeabi_dadd+0x27e>
    1512:	0028      	movs	r0, r5
    1514:	f001 fbe4 	bl	2ce0 <__clzsi2>
    1518:	0003      	movs	r3, r0
    151a:	3b08      	subs	r3, #8
    151c:	2b1f      	cmp	r3, #31
    151e:	dd00      	ble.n	1522 <__aeabi_dadd+0xce>
    1520:	e0d2      	b.n	16c8 <__aeabi_dadd+0x274>
    1522:	2220      	movs	r2, #32
    1524:	003c      	movs	r4, r7
    1526:	1ad2      	subs	r2, r2, r3
    1528:	409d      	lsls	r5, r3
    152a:	40d4      	lsrs	r4, r2
    152c:	409f      	lsls	r7, r3
    152e:	4325      	orrs	r5, r4
    1530:	429e      	cmp	r6, r3
    1532:	dd00      	ble.n	1536 <__aeabi_dadd+0xe2>
    1534:	e0c4      	b.n	16c0 <__aeabi_dadd+0x26c>
    1536:	1b9e      	subs	r6, r3, r6
    1538:	1c73      	adds	r3, r6, #1
    153a:	2b1f      	cmp	r3, #31
    153c:	dd00      	ble.n	1540 <__aeabi_dadd+0xec>
    153e:	e0f1      	b.n	1724 <__aeabi_dadd+0x2d0>
    1540:	2220      	movs	r2, #32
    1542:	0038      	movs	r0, r7
    1544:	0029      	movs	r1, r5
    1546:	1ad2      	subs	r2, r2, r3
    1548:	40d8      	lsrs	r0, r3
    154a:	4091      	lsls	r1, r2
    154c:	4097      	lsls	r7, r2
    154e:	002c      	movs	r4, r5
    1550:	4301      	orrs	r1, r0
    1552:	1e78      	subs	r0, r7, #1
    1554:	4187      	sbcs	r7, r0
    1556:	40dc      	lsrs	r4, r3
    1558:	2600      	movs	r6, #0
    155a:	430f      	orrs	r7, r1
    155c:	077b      	lsls	r3, r7, #29
    155e:	d009      	beq.n	1574 <__aeabi_dadd+0x120>
    1560:	230f      	movs	r3, #15
    1562:	403b      	ands	r3, r7
    1564:	2b04      	cmp	r3, #4
    1566:	d005      	beq.n	1574 <__aeabi_dadd+0x120>
    1568:	1d3b      	adds	r3, r7, #4
    156a:	42bb      	cmp	r3, r7
    156c:	41bf      	sbcs	r7, r7
    156e:	427f      	negs	r7, r7
    1570:	19e4      	adds	r4, r4, r7
    1572:	001f      	movs	r7, r3
    1574:	0223      	lsls	r3, r4, #8
    1576:	d52c      	bpl.n	15d2 <__aeabi_dadd+0x17e>
    1578:	4b96      	ldr	r3, [pc, #600]	; (17d4 <__aeabi_dadd+0x380>)
    157a:	3601      	adds	r6, #1
    157c:	429e      	cmp	r6, r3
    157e:	d100      	bne.n	1582 <__aeabi_dadd+0x12e>
    1580:	e09a      	b.n	16b8 <__aeabi_dadd+0x264>
    1582:	4645      	mov	r5, r8
    1584:	4b94      	ldr	r3, [pc, #592]	; (17d8 <__aeabi_dadd+0x384>)
    1586:	08ff      	lsrs	r7, r7, #3
    1588:	401c      	ands	r4, r3
    158a:	0760      	lsls	r0, r4, #29
    158c:	0576      	lsls	r6, r6, #21
    158e:	0264      	lsls	r4, r4, #9
    1590:	4307      	orrs	r7, r0
    1592:	0b24      	lsrs	r4, r4, #12
    1594:	0d76      	lsrs	r6, r6, #21
    1596:	2100      	movs	r1, #0
    1598:	0324      	lsls	r4, r4, #12
    159a:	0b23      	lsrs	r3, r4, #12
    159c:	0d0c      	lsrs	r4, r1, #20
    159e:	4a8f      	ldr	r2, [pc, #572]	; (17dc <__aeabi_dadd+0x388>)
    15a0:	0524      	lsls	r4, r4, #20
    15a2:	431c      	orrs	r4, r3
    15a4:	4014      	ands	r4, r2
    15a6:	0533      	lsls	r3, r6, #20
    15a8:	4323      	orrs	r3, r4
    15aa:	005b      	lsls	r3, r3, #1
    15ac:	07ed      	lsls	r5, r5, #31
    15ae:	085b      	lsrs	r3, r3, #1
    15b0:	432b      	orrs	r3, r5
    15b2:	0038      	movs	r0, r7
    15b4:	0019      	movs	r1, r3
    15b6:	bc3c      	pop	{r2, r3, r4, r5}
    15b8:	4690      	mov	r8, r2
    15ba:	4699      	mov	r9, r3
    15bc:	46a2      	mov	sl, r4
    15be:	46ab      	mov	fp, r5
    15c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15c2:	4664      	mov	r4, ip
    15c4:	4304      	orrs	r4, r0
    15c6:	d100      	bne.n	15ca <__aeabi_dadd+0x176>
    15c8:	e211      	b.n	19ee <__aeabi_dadd+0x59a>
    15ca:	0004      	movs	r4, r0
    15cc:	4667      	mov	r7, ip
    15ce:	077b      	lsls	r3, r7, #29
    15d0:	d1c6      	bne.n	1560 <__aeabi_dadd+0x10c>
    15d2:	4645      	mov	r5, r8
    15d4:	0760      	lsls	r0, r4, #29
    15d6:	08ff      	lsrs	r7, r7, #3
    15d8:	4307      	orrs	r7, r0
    15da:	08e4      	lsrs	r4, r4, #3
    15dc:	4b7d      	ldr	r3, [pc, #500]	; (17d4 <__aeabi_dadd+0x380>)
    15de:	429e      	cmp	r6, r3
    15e0:	d030      	beq.n	1644 <__aeabi_dadd+0x1f0>
    15e2:	0324      	lsls	r4, r4, #12
    15e4:	0576      	lsls	r6, r6, #21
    15e6:	0b24      	lsrs	r4, r4, #12
    15e8:	0d76      	lsrs	r6, r6, #21
    15ea:	e7d4      	b.n	1596 <__aeabi_dadd+0x142>
    15ec:	1a33      	subs	r3, r6, r0
    15ee:	469a      	mov	sl, r3
    15f0:	2b00      	cmp	r3, #0
    15f2:	dd78      	ble.n	16e6 <__aeabi_dadd+0x292>
    15f4:	2800      	cmp	r0, #0
    15f6:	d031      	beq.n	165c <__aeabi_dadd+0x208>
    15f8:	4876      	ldr	r0, [pc, #472]	; (17d4 <__aeabi_dadd+0x380>)
    15fa:	4286      	cmp	r6, r0
    15fc:	d0ae      	beq.n	155c <__aeabi_dadd+0x108>
    15fe:	2080      	movs	r0, #128	; 0x80
    1600:	0400      	lsls	r0, r0, #16
    1602:	4301      	orrs	r1, r0
    1604:	4653      	mov	r3, sl
    1606:	2b38      	cmp	r3, #56	; 0x38
    1608:	dc00      	bgt.n	160c <__aeabi_dadd+0x1b8>
    160a:	e0e9      	b.n	17e0 <__aeabi_dadd+0x38c>
    160c:	430a      	orrs	r2, r1
    160e:	1e51      	subs	r1, r2, #1
    1610:	418a      	sbcs	r2, r1
    1612:	2100      	movs	r1, #0
    1614:	19d2      	adds	r2, r2, r7
    1616:	42ba      	cmp	r2, r7
    1618:	41bf      	sbcs	r7, r7
    161a:	1909      	adds	r1, r1, r4
    161c:	427c      	negs	r4, r7
    161e:	0017      	movs	r7, r2
    1620:	190c      	adds	r4, r1, r4
    1622:	0223      	lsls	r3, r4, #8
    1624:	d5d3      	bpl.n	15ce <__aeabi_dadd+0x17a>
    1626:	4b6b      	ldr	r3, [pc, #428]	; (17d4 <__aeabi_dadd+0x380>)
    1628:	3601      	adds	r6, #1
    162a:	429e      	cmp	r6, r3
    162c:	d100      	bne.n	1630 <__aeabi_dadd+0x1dc>
    162e:	e13a      	b.n	18a6 <__aeabi_dadd+0x452>
    1630:	2001      	movs	r0, #1
    1632:	4b69      	ldr	r3, [pc, #420]	; (17d8 <__aeabi_dadd+0x384>)
    1634:	401c      	ands	r4, r3
    1636:	087b      	lsrs	r3, r7, #1
    1638:	4007      	ands	r7, r0
    163a:	431f      	orrs	r7, r3
    163c:	07e0      	lsls	r0, r4, #31
    163e:	4307      	orrs	r7, r0
    1640:	0864      	lsrs	r4, r4, #1
    1642:	e78b      	b.n	155c <__aeabi_dadd+0x108>
    1644:	0023      	movs	r3, r4
    1646:	433b      	orrs	r3, r7
    1648:	d100      	bne.n	164c <__aeabi_dadd+0x1f8>
    164a:	e1cb      	b.n	19e4 <__aeabi_dadd+0x590>
    164c:	2280      	movs	r2, #128	; 0x80
    164e:	0312      	lsls	r2, r2, #12
    1650:	4314      	orrs	r4, r2
    1652:	0324      	lsls	r4, r4, #12
    1654:	0b24      	lsrs	r4, r4, #12
    1656:	e79e      	b.n	1596 <__aeabi_dadd+0x142>
    1658:	002e      	movs	r6, r5
    165a:	e77f      	b.n	155c <__aeabi_dadd+0x108>
    165c:	0008      	movs	r0, r1
    165e:	4310      	orrs	r0, r2
    1660:	d100      	bne.n	1664 <__aeabi_dadd+0x210>
    1662:	e0b4      	b.n	17ce <__aeabi_dadd+0x37a>
    1664:	1e58      	subs	r0, r3, #1
    1666:	2800      	cmp	r0, #0
    1668:	d000      	beq.n	166c <__aeabi_dadd+0x218>
    166a:	e0de      	b.n	182a <__aeabi_dadd+0x3d6>
    166c:	18ba      	adds	r2, r7, r2
    166e:	42ba      	cmp	r2, r7
    1670:	419b      	sbcs	r3, r3
    1672:	1864      	adds	r4, r4, r1
    1674:	425b      	negs	r3, r3
    1676:	18e4      	adds	r4, r4, r3
    1678:	0017      	movs	r7, r2
    167a:	2601      	movs	r6, #1
    167c:	0223      	lsls	r3, r4, #8
    167e:	d5a6      	bpl.n	15ce <__aeabi_dadd+0x17a>
    1680:	2602      	movs	r6, #2
    1682:	e7d5      	b.n	1630 <__aeabi_dadd+0x1dc>
    1684:	2d00      	cmp	r5, #0
    1686:	d16e      	bne.n	1766 <__aeabi_dadd+0x312>
    1688:	1c70      	adds	r0, r6, #1
    168a:	0540      	lsls	r0, r0, #21
    168c:	0d40      	lsrs	r0, r0, #21
    168e:	2801      	cmp	r0, #1
    1690:	dc00      	bgt.n	1694 <__aeabi_dadd+0x240>
    1692:	e0f9      	b.n	1888 <__aeabi_dadd+0x434>
    1694:	1ab8      	subs	r0, r7, r2
    1696:	4684      	mov	ip, r0
    1698:	4287      	cmp	r7, r0
    169a:	4180      	sbcs	r0, r0
    169c:	1ae5      	subs	r5, r4, r3
    169e:	4240      	negs	r0, r0
    16a0:	1a2d      	subs	r5, r5, r0
    16a2:	0228      	lsls	r0, r5, #8
    16a4:	d400      	bmi.n	16a8 <__aeabi_dadd+0x254>
    16a6:	e089      	b.n	17bc <__aeabi_dadd+0x368>
    16a8:	1bd7      	subs	r7, r2, r7
    16aa:	42ba      	cmp	r2, r7
    16ac:	4192      	sbcs	r2, r2
    16ae:	1b1c      	subs	r4, r3, r4
    16b0:	4252      	negs	r2, r2
    16b2:	1aa5      	subs	r5, r4, r2
    16b4:	46d8      	mov	r8, fp
    16b6:	e729      	b.n	150c <__aeabi_dadd+0xb8>
    16b8:	4645      	mov	r5, r8
    16ba:	2400      	movs	r4, #0
    16bc:	2700      	movs	r7, #0
    16be:	e76a      	b.n	1596 <__aeabi_dadd+0x142>
    16c0:	4c45      	ldr	r4, [pc, #276]	; (17d8 <__aeabi_dadd+0x384>)
    16c2:	1af6      	subs	r6, r6, r3
    16c4:	402c      	ands	r4, r5
    16c6:	e749      	b.n	155c <__aeabi_dadd+0x108>
    16c8:	003d      	movs	r5, r7
    16ca:	3828      	subs	r0, #40	; 0x28
    16cc:	4085      	lsls	r5, r0
    16ce:	2700      	movs	r7, #0
    16d0:	e72e      	b.n	1530 <__aeabi_dadd+0xdc>
    16d2:	0038      	movs	r0, r7
    16d4:	f001 fb04 	bl	2ce0 <__clzsi2>
    16d8:	3020      	adds	r0, #32
    16da:	e71d      	b.n	1518 <__aeabi_dadd+0xc4>
    16dc:	430a      	orrs	r2, r1
    16de:	1e51      	subs	r1, r2, #1
    16e0:	418a      	sbcs	r2, r1
    16e2:	2100      	movs	r1, #0
    16e4:	e707      	b.n	14f6 <__aeabi_dadd+0xa2>
    16e6:	2b00      	cmp	r3, #0
    16e8:	d000      	beq.n	16ec <__aeabi_dadd+0x298>
    16ea:	e0f3      	b.n	18d4 <__aeabi_dadd+0x480>
    16ec:	1c70      	adds	r0, r6, #1
    16ee:	0543      	lsls	r3, r0, #21
    16f0:	0d5b      	lsrs	r3, r3, #21
    16f2:	2b01      	cmp	r3, #1
    16f4:	dc00      	bgt.n	16f8 <__aeabi_dadd+0x2a4>
    16f6:	e0ad      	b.n	1854 <__aeabi_dadd+0x400>
    16f8:	4b36      	ldr	r3, [pc, #216]	; (17d4 <__aeabi_dadd+0x380>)
    16fa:	4298      	cmp	r0, r3
    16fc:	d100      	bne.n	1700 <__aeabi_dadd+0x2ac>
    16fe:	e0d1      	b.n	18a4 <__aeabi_dadd+0x450>
    1700:	18ba      	adds	r2, r7, r2
    1702:	42ba      	cmp	r2, r7
    1704:	41bf      	sbcs	r7, r7
    1706:	1864      	adds	r4, r4, r1
    1708:	427f      	negs	r7, r7
    170a:	19e4      	adds	r4, r4, r7
    170c:	07e7      	lsls	r7, r4, #31
    170e:	0852      	lsrs	r2, r2, #1
    1710:	4317      	orrs	r7, r2
    1712:	0864      	lsrs	r4, r4, #1
    1714:	0006      	movs	r6, r0
    1716:	e721      	b.n	155c <__aeabi_dadd+0x108>
    1718:	482e      	ldr	r0, [pc, #184]	; (17d4 <__aeabi_dadd+0x380>)
    171a:	4285      	cmp	r5, r0
    171c:	d100      	bne.n	1720 <__aeabi_dadd+0x2cc>
    171e:	e093      	b.n	1848 <__aeabi_dadd+0x3f4>
    1720:	001d      	movs	r5, r3
    1722:	e6d0      	b.n	14c6 <__aeabi_dadd+0x72>
    1724:	0029      	movs	r1, r5
    1726:	3e1f      	subs	r6, #31
    1728:	40f1      	lsrs	r1, r6
    172a:	2b20      	cmp	r3, #32
    172c:	d100      	bne.n	1730 <__aeabi_dadd+0x2dc>
    172e:	e08d      	b.n	184c <__aeabi_dadd+0x3f8>
    1730:	2240      	movs	r2, #64	; 0x40
    1732:	1ad3      	subs	r3, r2, r3
    1734:	409d      	lsls	r5, r3
    1736:	432f      	orrs	r7, r5
    1738:	1e7d      	subs	r5, r7, #1
    173a:	41af      	sbcs	r7, r5
    173c:	2400      	movs	r4, #0
    173e:	430f      	orrs	r7, r1
    1740:	2600      	movs	r6, #0
    1742:	e744      	b.n	15ce <__aeabi_dadd+0x17a>
    1744:	002b      	movs	r3, r5
    1746:	0008      	movs	r0, r1
    1748:	3b20      	subs	r3, #32
    174a:	40d8      	lsrs	r0, r3
    174c:	0003      	movs	r3, r0
    174e:	2d20      	cmp	r5, #32
    1750:	d100      	bne.n	1754 <__aeabi_dadd+0x300>
    1752:	e07d      	b.n	1850 <__aeabi_dadd+0x3fc>
    1754:	2040      	movs	r0, #64	; 0x40
    1756:	1b45      	subs	r5, r0, r5
    1758:	40a9      	lsls	r1, r5
    175a:	430a      	orrs	r2, r1
    175c:	1e51      	subs	r1, r2, #1
    175e:	418a      	sbcs	r2, r1
    1760:	2100      	movs	r1, #0
    1762:	431a      	orrs	r2, r3
    1764:	e6c7      	b.n	14f6 <__aeabi_dadd+0xa2>
    1766:	2e00      	cmp	r6, #0
    1768:	d050      	beq.n	180c <__aeabi_dadd+0x3b8>
    176a:	4e1a      	ldr	r6, [pc, #104]	; (17d4 <__aeabi_dadd+0x380>)
    176c:	42b0      	cmp	r0, r6
    176e:	d057      	beq.n	1820 <__aeabi_dadd+0x3cc>
    1770:	2680      	movs	r6, #128	; 0x80
    1772:	426b      	negs	r3, r5
    1774:	4699      	mov	r9, r3
    1776:	0436      	lsls	r6, r6, #16
    1778:	4334      	orrs	r4, r6
    177a:	464b      	mov	r3, r9
    177c:	2b38      	cmp	r3, #56	; 0x38
    177e:	dd00      	ble.n	1782 <__aeabi_dadd+0x32e>
    1780:	e0d6      	b.n	1930 <__aeabi_dadd+0x4dc>
    1782:	2b1f      	cmp	r3, #31
    1784:	dd00      	ble.n	1788 <__aeabi_dadd+0x334>
    1786:	e135      	b.n	19f4 <__aeabi_dadd+0x5a0>
    1788:	2620      	movs	r6, #32
    178a:	1af5      	subs	r5, r6, r3
    178c:	0026      	movs	r6, r4
    178e:	40ae      	lsls	r6, r5
    1790:	46b2      	mov	sl, r6
    1792:	003e      	movs	r6, r7
    1794:	40de      	lsrs	r6, r3
    1796:	46ac      	mov	ip, r5
    1798:	0035      	movs	r5, r6
    179a:	4656      	mov	r6, sl
    179c:	432e      	orrs	r6, r5
    179e:	4665      	mov	r5, ip
    17a0:	40af      	lsls	r7, r5
    17a2:	1e7d      	subs	r5, r7, #1
    17a4:	41af      	sbcs	r7, r5
    17a6:	40dc      	lsrs	r4, r3
    17a8:	4337      	orrs	r7, r6
    17aa:	1bd7      	subs	r7, r2, r7
    17ac:	42ba      	cmp	r2, r7
    17ae:	4192      	sbcs	r2, r2
    17b0:	1b0c      	subs	r4, r1, r4
    17b2:	4252      	negs	r2, r2
    17b4:	1aa4      	subs	r4, r4, r2
    17b6:	0006      	movs	r6, r0
    17b8:	46d8      	mov	r8, fp
    17ba:	e6a3      	b.n	1504 <__aeabi_dadd+0xb0>
    17bc:	4664      	mov	r4, ip
    17be:	4667      	mov	r7, ip
    17c0:	432c      	orrs	r4, r5
    17c2:	d000      	beq.n	17c6 <__aeabi_dadd+0x372>
    17c4:	e6a2      	b.n	150c <__aeabi_dadd+0xb8>
    17c6:	2500      	movs	r5, #0
    17c8:	2600      	movs	r6, #0
    17ca:	2700      	movs	r7, #0
    17cc:	e706      	b.n	15dc <__aeabi_dadd+0x188>
    17ce:	001e      	movs	r6, r3
    17d0:	e6c4      	b.n	155c <__aeabi_dadd+0x108>
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	000007ff 	.word	0x000007ff
    17d8:	ff7fffff 	.word	0xff7fffff
    17dc:	800fffff 	.word	0x800fffff
    17e0:	2b1f      	cmp	r3, #31
    17e2:	dc63      	bgt.n	18ac <__aeabi_dadd+0x458>
    17e4:	2020      	movs	r0, #32
    17e6:	1ac3      	subs	r3, r0, r3
    17e8:	0008      	movs	r0, r1
    17ea:	4098      	lsls	r0, r3
    17ec:	469c      	mov	ip, r3
    17ee:	4683      	mov	fp, r0
    17f0:	4653      	mov	r3, sl
    17f2:	0010      	movs	r0, r2
    17f4:	40d8      	lsrs	r0, r3
    17f6:	0003      	movs	r3, r0
    17f8:	4658      	mov	r0, fp
    17fa:	4318      	orrs	r0, r3
    17fc:	4663      	mov	r3, ip
    17fe:	409a      	lsls	r2, r3
    1800:	1e53      	subs	r3, r2, #1
    1802:	419a      	sbcs	r2, r3
    1804:	4653      	mov	r3, sl
    1806:	4302      	orrs	r2, r0
    1808:	40d9      	lsrs	r1, r3
    180a:	e703      	b.n	1614 <__aeabi_dadd+0x1c0>
    180c:	0026      	movs	r6, r4
    180e:	433e      	orrs	r6, r7
    1810:	d006      	beq.n	1820 <__aeabi_dadd+0x3cc>
    1812:	43eb      	mvns	r3, r5
    1814:	4699      	mov	r9, r3
    1816:	2b00      	cmp	r3, #0
    1818:	d0c7      	beq.n	17aa <__aeabi_dadd+0x356>
    181a:	4e94      	ldr	r6, [pc, #592]	; (1a6c <__aeabi_dadd+0x618>)
    181c:	42b0      	cmp	r0, r6
    181e:	d1ac      	bne.n	177a <__aeabi_dadd+0x326>
    1820:	000c      	movs	r4, r1
    1822:	0017      	movs	r7, r2
    1824:	0006      	movs	r6, r0
    1826:	46d8      	mov	r8, fp
    1828:	e698      	b.n	155c <__aeabi_dadd+0x108>
    182a:	4b90      	ldr	r3, [pc, #576]	; (1a6c <__aeabi_dadd+0x618>)
    182c:	459a      	cmp	sl, r3
    182e:	d00b      	beq.n	1848 <__aeabi_dadd+0x3f4>
    1830:	4682      	mov	sl, r0
    1832:	e6e7      	b.n	1604 <__aeabi_dadd+0x1b0>
    1834:	2800      	cmp	r0, #0
    1836:	d000      	beq.n	183a <__aeabi_dadd+0x3e6>
    1838:	e09e      	b.n	1978 <__aeabi_dadd+0x524>
    183a:	0018      	movs	r0, r3
    183c:	4310      	orrs	r0, r2
    183e:	d100      	bne.n	1842 <__aeabi_dadd+0x3ee>
    1840:	e0e9      	b.n	1a16 <__aeabi_dadd+0x5c2>
    1842:	001c      	movs	r4, r3
    1844:	0017      	movs	r7, r2
    1846:	46d8      	mov	r8, fp
    1848:	4e88      	ldr	r6, [pc, #544]	; (1a6c <__aeabi_dadd+0x618>)
    184a:	e687      	b.n	155c <__aeabi_dadd+0x108>
    184c:	2500      	movs	r5, #0
    184e:	e772      	b.n	1736 <__aeabi_dadd+0x2e2>
    1850:	2100      	movs	r1, #0
    1852:	e782      	b.n	175a <__aeabi_dadd+0x306>
    1854:	0023      	movs	r3, r4
    1856:	433b      	orrs	r3, r7
    1858:	2e00      	cmp	r6, #0
    185a:	d000      	beq.n	185e <__aeabi_dadd+0x40a>
    185c:	e0ab      	b.n	19b6 <__aeabi_dadd+0x562>
    185e:	2b00      	cmp	r3, #0
    1860:	d100      	bne.n	1864 <__aeabi_dadd+0x410>
    1862:	e0e7      	b.n	1a34 <__aeabi_dadd+0x5e0>
    1864:	000b      	movs	r3, r1
    1866:	4313      	orrs	r3, r2
    1868:	d100      	bne.n	186c <__aeabi_dadd+0x418>
    186a:	e677      	b.n	155c <__aeabi_dadd+0x108>
    186c:	18ba      	adds	r2, r7, r2
    186e:	42ba      	cmp	r2, r7
    1870:	41bf      	sbcs	r7, r7
    1872:	1864      	adds	r4, r4, r1
    1874:	427f      	negs	r7, r7
    1876:	19e4      	adds	r4, r4, r7
    1878:	0223      	lsls	r3, r4, #8
    187a:	d400      	bmi.n	187e <__aeabi_dadd+0x42a>
    187c:	e0f2      	b.n	1a64 <__aeabi_dadd+0x610>
    187e:	4b7c      	ldr	r3, [pc, #496]	; (1a70 <__aeabi_dadd+0x61c>)
    1880:	0017      	movs	r7, r2
    1882:	401c      	ands	r4, r3
    1884:	0006      	movs	r6, r0
    1886:	e669      	b.n	155c <__aeabi_dadd+0x108>
    1888:	0020      	movs	r0, r4
    188a:	4338      	orrs	r0, r7
    188c:	2e00      	cmp	r6, #0
    188e:	d1d1      	bne.n	1834 <__aeabi_dadd+0x3e0>
    1890:	2800      	cmp	r0, #0
    1892:	d15b      	bne.n	194c <__aeabi_dadd+0x4f8>
    1894:	001c      	movs	r4, r3
    1896:	4314      	orrs	r4, r2
    1898:	d100      	bne.n	189c <__aeabi_dadd+0x448>
    189a:	e0a8      	b.n	19ee <__aeabi_dadd+0x59a>
    189c:	001c      	movs	r4, r3
    189e:	0017      	movs	r7, r2
    18a0:	46d8      	mov	r8, fp
    18a2:	e65b      	b.n	155c <__aeabi_dadd+0x108>
    18a4:	0006      	movs	r6, r0
    18a6:	2400      	movs	r4, #0
    18a8:	2700      	movs	r7, #0
    18aa:	e697      	b.n	15dc <__aeabi_dadd+0x188>
    18ac:	4650      	mov	r0, sl
    18ae:	000b      	movs	r3, r1
    18b0:	3820      	subs	r0, #32
    18b2:	40c3      	lsrs	r3, r0
    18b4:	4699      	mov	r9, r3
    18b6:	4653      	mov	r3, sl
    18b8:	2b20      	cmp	r3, #32
    18ba:	d100      	bne.n	18be <__aeabi_dadd+0x46a>
    18bc:	e095      	b.n	19ea <__aeabi_dadd+0x596>
    18be:	2340      	movs	r3, #64	; 0x40
    18c0:	4650      	mov	r0, sl
    18c2:	1a1b      	subs	r3, r3, r0
    18c4:	4099      	lsls	r1, r3
    18c6:	430a      	orrs	r2, r1
    18c8:	1e51      	subs	r1, r2, #1
    18ca:	418a      	sbcs	r2, r1
    18cc:	464b      	mov	r3, r9
    18ce:	2100      	movs	r1, #0
    18d0:	431a      	orrs	r2, r3
    18d2:	e69f      	b.n	1614 <__aeabi_dadd+0x1c0>
    18d4:	2e00      	cmp	r6, #0
    18d6:	d130      	bne.n	193a <__aeabi_dadd+0x4e6>
    18d8:	0026      	movs	r6, r4
    18da:	433e      	orrs	r6, r7
    18dc:	d067      	beq.n	19ae <__aeabi_dadd+0x55a>
    18de:	43db      	mvns	r3, r3
    18e0:	469a      	mov	sl, r3
    18e2:	2b00      	cmp	r3, #0
    18e4:	d01c      	beq.n	1920 <__aeabi_dadd+0x4cc>
    18e6:	4e61      	ldr	r6, [pc, #388]	; (1a6c <__aeabi_dadd+0x618>)
    18e8:	42b0      	cmp	r0, r6
    18ea:	d060      	beq.n	19ae <__aeabi_dadd+0x55a>
    18ec:	4653      	mov	r3, sl
    18ee:	2b38      	cmp	r3, #56	; 0x38
    18f0:	dd00      	ble.n	18f4 <__aeabi_dadd+0x4a0>
    18f2:	e096      	b.n	1a22 <__aeabi_dadd+0x5ce>
    18f4:	2b1f      	cmp	r3, #31
    18f6:	dd00      	ble.n	18fa <__aeabi_dadd+0x4a6>
    18f8:	e09f      	b.n	1a3a <__aeabi_dadd+0x5e6>
    18fa:	2620      	movs	r6, #32
    18fc:	1af3      	subs	r3, r6, r3
    18fe:	0026      	movs	r6, r4
    1900:	409e      	lsls	r6, r3
    1902:	469c      	mov	ip, r3
    1904:	46b3      	mov	fp, r6
    1906:	4653      	mov	r3, sl
    1908:	003e      	movs	r6, r7
    190a:	40de      	lsrs	r6, r3
    190c:	0033      	movs	r3, r6
    190e:	465e      	mov	r6, fp
    1910:	431e      	orrs	r6, r3
    1912:	4663      	mov	r3, ip
    1914:	409f      	lsls	r7, r3
    1916:	1e7b      	subs	r3, r7, #1
    1918:	419f      	sbcs	r7, r3
    191a:	4653      	mov	r3, sl
    191c:	40dc      	lsrs	r4, r3
    191e:	4337      	orrs	r7, r6
    1920:	18bf      	adds	r7, r7, r2
    1922:	4297      	cmp	r7, r2
    1924:	4192      	sbcs	r2, r2
    1926:	1864      	adds	r4, r4, r1
    1928:	4252      	negs	r2, r2
    192a:	18a4      	adds	r4, r4, r2
    192c:	0006      	movs	r6, r0
    192e:	e678      	b.n	1622 <__aeabi_dadd+0x1ce>
    1930:	4327      	orrs	r7, r4
    1932:	1e7c      	subs	r4, r7, #1
    1934:	41a7      	sbcs	r7, r4
    1936:	2400      	movs	r4, #0
    1938:	e737      	b.n	17aa <__aeabi_dadd+0x356>
    193a:	4e4c      	ldr	r6, [pc, #304]	; (1a6c <__aeabi_dadd+0x618>)
    193c:	42b0      	cmp	r0, r6
    193e:	d036      	beq.n	19ae <__aeabi_dadd+0x55a>
    1940:	2680      	movs	r6, #128	; 0x80
    1942:	425b      	negs	r3, r3
    1944:	0436      	lsls	r6, r6, #16
    1946:	469a      	mov	sl, r3
    1948:	4334      	orrs	r4, r6
    194a:	e7cf      	b.n	18ec <__aeabi_dadd+0x498>
    194c:	0018      	movs	r0, r3
    194e:	4310      	orrs	r0, r2
    1950:	d100      	bne.n	1954 <__aeabi_dadd+0x500>
    1952:	e603      	b.n	155c <__aeabi_dadd+0x108>
    1954:	1ab8      	subs	r0, r7, r2
    1956:	4684      	mov	ip, r0
    1958:	4567      	cmp	r7, ip
    195a:	41ad      	sbcs	r5, r5
    195c:	1ae0      	subs	r0, r4, r3
    195e:	426d      	negs	r5, r5
    1960:	1b40      	subs	r0, r0, r5
    1962:	0205      	lsls	r5, r0, #8
    1964:	d400      	bmi.n	1968 <__aeabi_dadd+0x514>
    1966:	e62c      	b.n	15c2 <__aeabi_dadd+0x16e>
    1968:	1bd7      	subs	r7, r2, r7
    196a:	42ba      	cmp	r2, r7
    196c:	4192      	sbcs	r2, r2
    196e:	1b1c      	subs	r4, r3, r4
    1970:	4252      	negs	r2, r2
    1972:	1aa4      	subs	r4, r4, r2
    1974:	46d8      	mov	r8, fp
    1976:	e5f1      	b.n	155c <__aeabi_dadd+0x108>
    1978:	0018      	movs	r0, r3
    197a:	4310      	orrs	r0, r2
    197c:	d100      	bne.n	1980 <__aeabi_dadd+0x52c>
    197e:	e763      	b.n	1848 <__aeabi_dadd+0x3f4>
    1980:	08f8      	lsrs	r0, r7, #3
    1982:	0767      	lsls	r7, r4, #29
    1984:	4307      	orrs	r7, r0
    1986:	2080      	movs	r0, #128	; 0x80
    1988:	08e4      	lsrs	r4, r4, #3
    198a:	0300      	lsls	r0, r0, #12
    198c:	4204      	tst	r4, r0
    198e:	d008      	beq.n	19a2 <__aeabi_dadd+0x54e>
    1990:	08dd      	lsrs	r5, r3, #3
    1992:	4205      	tst	r5, r0
    1994:	d105      	bne.n	19a2 <__aeabi_dadd+0x54e>
    1996:	08d2      	lsrs	r2, r2, #3
    1998:	0759      	lsls	r1, r3, #29
    199a:	4311      	orrs	r1, r2
    199c:	000f      	movs	r7, r1
    199e:	002c      	movs	r4, r5
    19a0:	46d8      	mov	r8, fp
    19a2:	0f7b      	lsrs	r3, r7, #29
    19a4:	00e4      	lsls	r4, r4, #3
    19a6:	431c      	orrs	r4, r3
    19a8:	00ff      	lsls	r7, r7, #3
    19aa:	4e30      	ldr	r6, [pc, #192]	; (1a6c <__aeabi_dadd+0x618>)
    19ac:	e5d6      	b.n	155c <__aeabi_dadd+0x108>
    19ae:	000c      	movs	r4, r1
    19b0:	0017      	movs	r7, r2
    19b2:	0006      	movs	r6, r0
    19b4:	e5d2      	b.n	155c <__aeabi_dadd+0x108>
    19b6:	2b00      	cmp	r3, #0
    19b8:	d038      	beq.n	1a2c <__aeabi_dadd+0x5d8>
    19ba:	000b      	movs	r3, r1
    19bc:	4313      	orrs	r3, r2
    19be:	d100      	bne.n	19c2 <__aeabi_dadd+0x56e>
    19c0:	e742      	b.n	1848 <__aeabi_dadd+0x3f4>
    19c2:	08f8      	lsrs	r0, r7, #3
    19c4:	0767      	lsls	r7, r4, #29
    19c6:	4307      	orrs	r7, r0
    19c8:	2080      	movs	r0, #128	; 0x80
    19ca:	08e4      	lsrs	r4, r4, #3
    19cc:	0300      	lsls	r0, r0, #12
    19ce:	4204      	tst	r4, r0
    19d0:	d0e7      	beq.n	19a2 <__aeabi_dadd+0x54e>
    19d2:	08cb      	lsrs	r3, r1, #3
    19d4:	4203      	tst	r3, r0
    19d6:	d1e4      	bne.n	19a2 <__aeabi_dadd+0x54e>
    19d8:	08d2      	lsrs	r2, r2, #3
    19da:	0749      	lsls	r1, r1, #29
    19dc:	4311      	orrs	r1, r2
    19de:	000f      	movs	r7, r1
    19e0:	001c      	movs	r4, r3
    19e2:	e7de      	b.n	19a2 <__aeabi_dadd+0x54e>
    19e4:	2700      	movs	r7, #0
    19e6:	2400      	movs	r4, #0
    19e8:	e5d5      	b.n	1596 <__aeabi_dadd+0x142>
    19ea:	2100      	movs	r1, #0
    19ec:	e76b      	b.n	18c6 <__aeabi_dadd+0x472>
    19ee:	2500      	movs	r5, #0
    19f0:	2700      	movs	r7, #0
    19f2:	e5f3      	b.n	15dc <__aeabi_dadd+0x188>
    19f4:	464e      	mov	r6, r9
    19f6:	0025      	movs	r5, r4
    19f8:	3e20      	subs	r6, #32
    19fa:	40f5      	lsrs	r5, r6
    19fc:	464b      	mov	r3, r9
    19fe:	002e      	movs	r6, r5
    1a00:	2b20      	cmp	r3, #32
    1a02:	d02d      	beq.n	1a60 <__aeabi_dadd+0x60c>
    1a04:	2540      	movs	r5, #64	; 0x40
    1a06:	1aed      	subs	r5, r5, r3
    1a08:	40ac      	lsls	r4, r5
    1a0a:	4327      	orrs	r7, r4
    1a0c:	1e7c      	subs	r4, r7, #1
    1a0e:	41a7      	sbcs	r7, r4
    1a10:	2400      	movs	r4, #0
    1a12:	4337      	orrs	r7, r6
    1a14:	e6c9      	b.n	17aa <__aeabi_dadd+0x356>
    1a16:	2480      	movs	r4, #128	; 0x80
    1a18:	2500      	movs	r5, #0
    1a1a:	0324      	lsls	r4, r4, #12
    1a1c:	4e13      	ldr	r6, [pc, #76]	; (1a6c <__aeabi_dadd+0x618>)
    1a1e:	2700      	movs	r7, #0
    1a20:	e5dc      	b.n	15dc <__aeabi_dadd+0x188>
    1a22:	4327      	orrs	r7, r4
    1a24:	1e7c      	subs	r4, r7, #1
    1a26:	41a7      	sbcs	r7, r4
    1a28:	2400      	movs	r4, #0
    1a2a:	e779      	b.n	1920 <__aeabi_dadd+0x4cc>
    1a2c:	000c      	movs	r4, r1
    1a2e:	0017      	movs	r7, r2
    1a30:	4e0e      	ldr	r6, [pc, #56]	; (1a6c <__aeabi_dadd+0x618>)
    1a32:	e593      	b.n	155c <__aeabi_dadd+0x108>
    1a34:	000c      	movs	r4, r1
    1a36:	0017      	movs	r7, r2
    1a38:	e590      	b.n	155c <__aeabi_dadd+0x108>
    1a3a:	4656      	mov	r6, sl
    1a3c:	0023      	movs	r3, r4
    1a3e:	3e20      	subs	r6, #32
    1a40:	40f3      	lsrs	r3, r6
    1a42:	4699      	mov	r9, r3
    1a44:	4653      	mov	r3, sl
    1a46:	2b20      	cmp	r3, #32
    1a48:	d00e      	beq.n	1a68 <__aeabi_dadd+0x614>
    1a4a:	2340      	movs	r3, #64	; 0x40
    1a4c:	4656      	mov	r6, sl
    1a4e:	1b9b      	subs	r3, r3, r6
    1a50:	409c      	lsls	r4, r3
    1a52:	4327      	orrs	r7, r4
    1a54:	1e7c      	subs	r4, r7, #1
    1a56:	41a7      	sbcs	r7, r4
    1a58:	464b      	mov	r3, r9
    1a5a:	2400      	movs	r4, #0
    1a5c:	431f      	orrs	r7, r3
    1a5e:	e75f      	b.n	1920 <__aeabi_dadd+0x4cc>
    1a60:	2400      	movs	r4, #0
    1a62:	e7d2      	b.n	1a0a <__aeabi_dadd+0x5b6>
    1a64:	0017      	movs	r7, r2
    1a66:	e5b2      	b.n	15ce <__aeabi_dadd+0x17a>
    1a68:	2400      	movs	r4, #0
    1a6a:	e7f2      	b.n	1a52 <__aeabi_dadd+0x5fe>
    1a6c:	000007ff 	.word	0x000007ff
    1a70:	ff7fffff 	.word	0xff7fffff

00001a74 <__aeabi_ddiv>:
    1a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a76:	4657      	mov	r7, sl
    1a78:	4645      	mov	r5, r8
    1a7a:	46de      	mov	lr, fp
    1a7c:	464e      	mov	r6, r9
    1a7e:	b5e0      	push	{r5, r6, r7, lr}
    1a80:	004c      	lsls	r4, r1, #1
    1a82:	030e      	lsls	r6, r1, #12
    1a84:	b087      	sub	sp, #28
    1a86:	4683      	mov	fp, r0
    1a88:	4692      	mov	sl, r2
    1a8a:	001d      	movs	r5, r3
    1a8c:	4680      	mov	r8, r0
    1a8e:	0b36      	lsrs	r6, r6, #12
    1a90:	0d64      	lsrs	r4, r4, #21
    1a92:	0fcf      	lsrs	r7, r1, #31
    1a94:	2c00      	cmp	r4, #0
    1a96:	d04f      	beq.n	1b38 <__aeabi_ddiv+0xc4>
    1a98:	4b6f      	ldr	r3, [pc, #444]	; (1c58 <__aeabi_ddiv+0x1e4>)
    1a9a:	429c      	cmp	r4, r3
    1a9c:	d035      	beq.n	1b0a <__aeabi_ddiv+0x96>
    1a9e:	2380      	movs	r3, #128	; 0x80
    1aa0:	0f42      	lsrs	r2, r0, #29
    1aa2:	041b      	lsls	r3, r3, #16
    1aa4:	00f6      	lsls	r6, r6, #3
    1aa6:	4313      	orrs	r3, r2
    1aa8:	4333      	orrs	r3, r6
    1aaa:	4699      	mov	r9, r3
    1aac:	00c3      	lsls	r3, r0, #3
    1aae:	4698      	mov	r8, r3
    1ab0:	4b6a      	ldr	r3, [pc, #424]	; (1c5c <__aeabi_ddiv+0x1e8>)
    1ab2:	2600      	movs	r6, #0
    1ab4:	469c      	mov	ip, r3
    1ab6:	2300      	movs	r3, #0
    1ab8:	4464      	add	r4, ip
    1aba:	9303      	str	r3, [sp, #12]
    1abc:	032b      	lsls	r3, r5, #12
    1abe:	0b1b      	lsrs	r3, r3, #12
    1ac0:	469b      	mov	fp, r3
    1ac2:	006b      	lsls	r3, r5, #1
    1ac4:	0fed      	lsrs	r5, r5, #31
    1ac6:	4650      	mov	r0, sl
    1ac8:	0d5b      	lsrs	r3, r3, #21
    1aca:	9501      	str	r5, [sp, #4]
    1acc:	d05e      	beq.n	1b8c <__aeabi_ddiv+0x118>
    1ace:	4a62      	ldr	r2, [pc, #392]	; (1c58 <__aeabi_ddiv+0x1e4>)
    1ad0:	4293      	cmp	r3, r2
    1ad2:	d053      	beq.n	1b7c <__aeabi_ddiv+0x108>
    1ad4:	465a      	mov	r2, fp
    1ad6:	00d1      	lsls	r1, r2, #3
    1ad8:	2280      	movs	r2, #128	; 0x80
    1ada:	0f40      	lsrs	r0, r0, #29
    1adc:	0412      	lsls	r2, r2, #16
    1ade:	4302      	orrs	r2, r0
    1ae0:	430a      	orrs	r2, r1
    1ae2:	4693      	mov	fp, r2
    1ae4:	4652      	mov	r2, sl
    1ae6:	00d1      	lsls	r1, r2, #3
    1ae8:	4a5c      	ldr	r2, [pc, #368]	; (1c5c <__aeabi_ddiv+0x1e8>)
    1aea:	4694      	mov	ip, r2
    1aec:	2200      	movs	r2, #0
    1aee:	4463      	add	r3, ip
    1af0:	0038      	movs	r0, r7
    1af2:	4068      	eors	r0, r5
    1af4:	4684      	mov	ip, r0
    1af6:	9002      	str	r0, [sp, #8]
    1af8:	1ae4      	subs	r4, r4, r3
    1afa:	4316      	orrs	r6, r2
    1afc:	2e0f      	cmp	r6, #15
    1afe:	d900      	bls.n	1b02 <__aeabi_ddiv+0x8e>
    1b00:	e0b4      	b.n	1c6c <__aeabi_ddiv+0x1f8>
    1b02:	4b57      	ldr	r3, [pc, #348]	; (1c60 <__aeabi_ddiv+0x1ec>)
    1b04:	00b6      	lsls	r6, r6, #2
    1b06:	599b      	ldr	r3, [r3, r6]
    1b08:	469f      	mov	pc, r3
    1b0a:	0003      	movs	r3, r0
    1b0c:	4333      	orrs	r3, r6
    1b0e:	4699      	mov	r9, r3
    1b10:	d16c      	bne.n	1bec <__aeabi_ddiv+0x178>
    1b12:	2300      	movs	r3, #0
    1b14:	4698      	mov	r8, r3
    1b16:	3302      	adds	r3, #2
    1b18:	2608      	movs	r6, #8
    1b1a:	9303      	str	r3, [sp, #12]
    1b1c:	e7ce      	b.n	1abc <__aeabi_ddiv+0x48>
    1b1e:	46cb      	mov	fp, r9
    1b20:	4641      	mov	r1, r8
    1b22:	9a03      	ldr	r2, [sp, #12]
    1b24:	9701      	str	r7, [sp, #4]
    1b26:	2a02      	cmp	r2, #2
    1b28:	d165      	bne.n	1bf6 <__aeabi_ddiv+0x182>
    1b2a:	9b01      	ldr	r3, [sp, #4]
    1b2c:	4c4a      	ldr	r4, [pc, #296]	; (1c58 <__aeabi_ddiv+0x1e4>)
    1b2e:	469c      	mov	ip, r3
    1b30:	2300      	movs	r3, #0
    1b32:	2200      	movs	r2, #0
    1b34:	4698      	mov	r8, r3
    1b36:	e06b      	b.n	1c10 <__aeabi_ddiv+0x19c>
    1b38:	0003      	movs	r3, r0
    1b3a:	4333      	orrs	r3, r6
    1b3c:	4699      	mov	r9, r3
    1b3e:	d04e      	beq.n	1bde <__aeabi_ddiv+0x16a>
    1b40:	2e00      	cmp	r6, #0
    1b42:	d100      	bne.n	1b46 <__aeabi_ddiv+0xd2>
    1b44:	e1bc      	b.n	1ec0 <__aeabi_ddiv+0x44c>
    1b46:	0030      	movs	r0, r6
    1b48:	f001 f8ca 	bl	2ce0 <__clzsi2>
    1b4c:	0003      	movs	r3, r0
    1b4e:	3b0b      	subs	r3, #11
    1b50:	2b1c      	cmp	r3, #28
    1b52:	dd00      	ble.n	1b56 <__aeabi_ddiv+0xe2>
    1b54:	e1ac      	b.n	1eb0 <__aeabi_ddiv+0x43c>
    1b56:	221d      	movs	r2, #29
    1b58:	1ad3      	subs	r3, r2, r3
    1b5a:	465a      	mov	r2, fp
    1b5c:	0001      	movs	r1, r0
    1b5e:	40da      	lsrs	r2, r3
    1b60:	3908      	subs	r1, #8
    1b62:	408e      	lsls	r6, r1
    1b64:	0013      	movs	r3, r2
    1b66:	4333      	orrs	r3, r6
    1b68:	4699      	mov	r9, r3
    1b6a:	465b      	mov	r3, fp
    1b6c:	408b      	lsls	r3, r1
    1b6e:	4698      	mov	r8, r3
    1b70:	2300      	movs	r3, #0
    1b72:	4c3c      	ldr	r4, [pc, #240]	; (1c64 <__aeabi_ddiv+0x1f0>)
    1b74:	2600      	movs	r6, #0
    1b76:	1a24      	subs	r4, r4, r0
    1b78:	9303      	str	r3, [sp, #12]
    1b7a:	e79f      	b.n	1abc <__aeabi_ddiv+0x48>
    1b7c:	4651      	mov	r1, sl
    1b7e:	465a      	mov	r2, fp
    1b80:	4311      	orrs	r1, r2
    1b82:	d129      	bne.n	1bd8 <__aeabi_ddiv+0x164>
    1b84:	2200      	movs	r2, #0
    1b86:	4693      	mov	fp, r2
    1b88:	3202      	adds	r2, #2
    1b8a:	e7b1      	b.n	1af0 <__aeabi_ddiv+0x7c>
    1b8c:	4659      	mov	r1, fp
    1b8e:	4301      	orrs	r1, r0
    1b90:	d01e      	beq.n	1bd0 <__aeabi_ddiv+0x15c>
    1b92:	465b      	mov	r3, fp
    1b94:	2b00      	cmp	r3, #0
    1b96:	d100      	bne.n	1b9a <__aeabi_ddiv+0x126>
    1b98:	e19e      	b.n	1ed8 <__aeabi_ddiv+0x464>
    1b9a:	4658      	mov	r0, fp
    1b9c:	f001 f8a0 	bl	2ce0 <__clzsi2>
    1ba0:	0003      	movs	r3, r0
    1ba2:	3b0b      	subs	r3, #11
    1ba4:	2b1c      	cmp	r3, #28
    1ba6:	dd00      	ble.n	1baa <__aeabi_ddiv+0x136>
    1ba8:	e18f      	b.n	1eca <__aeabi_ddiv+0x456>
    1baa:	0002      	movs	r2, r0
    1bac:	4659      	mov	r1, fp
    1bae:	3a08      	subs	r2, #8
    1bb0:	4091      	lsls	r1, r2
    1bb2:	468b      	mov	fp, r1
    1bb4:	211d      	movs	r1, #29
    1bb6:	1acb      	subs	r3, r1, r3
    1bb8:	4651      	mov	r1, sl
    1bba:	40d9      	lsrs	r1, r3
    1bbc:	000b      	movs	r3, r1
    1bbe:	4659      	mov	r1, fp
    1bc0:	430b      	orrs	r3, r1
    1bc2:	4651      	mov	r1, sl
    1bc4:	469b      	mov	fp, r3
    1bc6:	4091      	lsls	r1, r2
    1bc8:	4b26      	ldr	r3, [pc, #152]	; (1c64 <__aeabi_ddiv+0x1f0>)
    1bca:	2200      	movs	r2, #0
    1bcc:	1a1b      	subs	r3, r3, r0
    1bce:	e78f      	b.n	1af0 <__aeabi_ddiv+0x7c>
    1bd0:	2300      	movs	r3, #0
    1bd2:	2201      	movs	r2, #1
    1bd4:	469b      	mov	fp, r3
    1bd6:	e78b      	b.n	1af0 <__aeabi_ddiv+0x7c>
    1bd8:	4651      	mov	r1, sl
    1bda:	2203      	movs	r2, #3
    1bdc:	e788      	b.n	1af0 <__aeabi_ddiv+0x7c>
    1bde:	2300      	movs	r3, #0
    1be0:	4698      	mov	r8, r3
    1be2:	3301      	adds	r3, #1
    1be4:	2604      	movs	r6, #4
    1be6:	2400      	movs	r4, #0
    1be8:	9303      	str	r3, [sp, #12]
    1bea:	e767      	b.n	1abc <__aeabi_ddiv+0x48>
    1bec:	2303      	movs	r3, #3
    1bee:	46b1      	mov	r9, r6
    1bf0:	9303      	str	r3, [sp, #12]
    1bf2:	260c      	movs	r6, #12
    1bf4:	e762      	b.n	1abc <__aeabi_ddiv+0x48>
    1bf6:	2a03      	cmp	r2, #3
    1bf8:	d100      	bne.n	1bfc <__aeabi_ddiv+0x188>
    1bfa:	e25c      	b.n	20b6 <STACK_SIZE+0xb6>
    1bfc:	9b01      	ldr	r3, [sp, #4]
    1bfe:	2a01      	cmp	r2, #1
    1c00:	d000      	beq.n	1c04 <__aeabi_ddiv+0x190>
    1c02:	e1e4      	b.n	1fce <__aeabi_ddiv+0x55a>
    1c04:	4013      	ands	r3, r2
    1c06:	469c      	mov	ip, r3
    1c08:	2300      	movs	r3, #0
    1c0a:	2400      	movs	r4, #0
    1c0c:	2200      	movs	r2, #0
    1c0e:	4698      	mov	r8, r3
    1c10:	2100      	movs	r1, #0
    1c12:	0312      	lsls	r2, r2, #12
    1c14:	0b13      	lsrs	r3, r2, #12
    1c16:	0d0a      	lsrs	r2, r1, #20
    1c18:	0512      	lsls	r2, r2, #20
    1c1a:	431a      	orrs	r2, r3
    1c1c:	0523      	lsls	r3, r4, #20
    1c1e:	4c12      	ldr	r4, [pc, #72]	; (1c68 <__aeabi_ddiv+0x1f4>)
    1c20:	4640      	mov	r0, r8
    1c22:	4022      	ands	r2, r4
    1c24:	4313      	orrs	r3, r2
    1c26:	4662      	mov	r2, ip
    1c28:	005b      	lsls	r3, r3, #1
    1c2a:	07d2      	lsls	r2, r2, #31
    1c2c:	085b      	lsrs	r3, r3, #1
    1c2e:	4313      	orrs	r3, r2
    1c30:	0019      	movs	r1, r3
    1c32:	b007      	add	sp, #28
    1c34:	bc3c      	pop	{r2, r3, r4, r5}
    1c36:	4690      	mov	r8, r2
    1c38:	4699      	mov	r9, r3
    1c3a:	46a2      	mov	sl, r4
    1c3c:	46ab      	mov	fp, r5
    1c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c40:	2300      	movs	r3, #0
    1c42:	2280      	movs	r2, #128	; 0x80
    1c44:	469c      	mov	ip, r3
    1c46:	0312      	lsls	r2, r2, #12
    1c48:	4698      	mov	r8, r3
    1c4a:	4c03      	ldr	r4, [pc, #12]	; (1c58 <__aeabi_ddiv+0x1e4>)
    1c4c:	e7e0      	b.n	1c10 <__aeabi_ddiv+0x19c>
    1c4e:	2300      	movs	r3, #0
    1c50:	4c01      	ldr	r4, [pc, #4]	; (1c58 <__aeabi_ddiv+0x1e4>)
    1c52:	2200      	movs	r2, #0
    1c54:	4698      	mov	r8, r3
    1c56:	e7db      	b.n	1c10 <__aeabi_ddiv+0x19c>
    1c58:	000007ff 	.word	0x000007ff
    1c5c:	fffffc01 	.word	0xfffffc01
    1c60:	00002dc4 	.word	0x00002dc4
    1c64:	fffffc0d 	.word	0xfffffc0d
    1c68:	800fffff 	.word	0x800fffff
    1c6c:	45d9      	cmp	r9, fp
    1c6e:	d900      	bls.n	1c72 <__aeabi_ddiv+0x1fe>
    1c70:	e139      	b.n	1ee6 <__aeabi_ddiv+0x472>
    1c72:	d100      	bne.n	1c76 <__aeabi_ddiv+0x202>
    1c74:	e134      	b.n	1ee0 <__aeabi_ddiv+0x46c>
    1c76:	2300      	movs	r3, #0
    1c78:	4646      	mov	r6, r8
    1c7a:	464d      	mov	r5, r9
    1c7c:	469a      	mov	sl, r3
    1c7e:	3c01      	subs	r4, #1
    1c80:	465b      	mov	r3, fp
    1c82:	0e0a      	lsrs	r2, r1, #24
    1c84:	021b      	lsls	r3, r3, #8
    1c86:	431a      	orrs	r2, r3
    1c88:	020b      	lsls	r3, r1, #8
    1c8a:	0c17      	lsrs	r7, r2, #16
    1c8c:	9303      	str	r3, [sp, #12]
    1c8e:	0413      	lsls	r3, r2, #16
    1c90:	0c1b      	lsrs	r3, r3, #16
    1c92:	0039      	movs	r1, r7
    1c94:	0028      	movs	r0, r5
    1c96:	4690      	mov	r8, r2
    1c98:	9301      	str	r3, [sp, #4]
    1c9a:	f7ff fb4f 	bl	133c <__udivsi3>
    1c9e:	0002      	movs	r2, r0
    1ca0:	9b01      	ldr	r3, [sp, #4]
    1ca2:	4683      	mov	fp, r0
    1ca4:	435a      	muls	r2, r3
    1ca6:	0028      	movs	r0, r5
    1ca8:	0039      	movs	r1, r7
    1caa:	4691      	mov	r9, r2
    1cac:	f7ff fbcc 	bl	1448 <__aeabi_uidivmod>
    1cb0:	0c35      	lsrs	r5, r6, #16
    1cb2:	0409      	lsls	r1, r1, #16
    1cb4:	430d      	orrs	r5, r1
    1cb6:	45a9      	cmp	r9, r5
    1cb8:	d90d      	bls.n	1cd6 <__aeabi_ddiv+0x262>
    1cba:	465b      	mov	r3, fp
    1cbc:	4445      	add	r5, r8
    1cbe:	3b01      	subs	r3, #1
    1cc0:	45a8      	cmp	r8, r5
    1cc2:	d900      	bls.n	1cc6 <__aeabi_ddiv+0x252>
    1cc4:	e13a      	b.n	1f3c <__aeabi_ddiv+0x4c8>
    1cc6:	45a9      	cmp	r9, r5
    1cc8:	d800      	bhi.n	1ccc <__aeabi_ddiv+0x258>
    1cca:	e137      	b.n	1f3c <__aeabi_ddiv+0x4c8>
    1ccc:	2302      	movs	r3, #2
    1cce:	425b      	negs	r3, r3
    1cd0:	469c      	mov	ip, r3
    1cd2:	4445      	add	r5, r8
    1cd4:	44e3      	add	fp, ip
    1cd6:	464b      	mov	r3, r9
    1cd8:	1aeb      	subs	r3, r5, r3
    1cda:	0039      	movs	r1, r7
    1cdc:	0018      	movs	r0, r3
    1cde:	9304      	str	r3, [sp, #16]
    1ce0:	f7ff fb2c 	bl	133c <__udivsi3>
    1ce4:	9b01      	ldr	r3, [sp, #4]
    1ce6:	0005      	movs	r5, r0
    1ce8:	4343      	muls	r3, r0
    1cea:	0039      	movs	r1, r7
    1cec:	9804      	ldr	r0, [sp, #16]
    1cee:	4699      	mov	r9, r3
    1cf0:	f7ff fbaa 	bl	1448 <__aeabi_uidivmod>
    1cf4:	0433      	lsls	r3, r6, #16
    1cf6:	0409      	lsls	r1, r1, #16
    1cf8:	0c1b      	lsrs	r3, r3, #16
    1cfa:	430b      	orrs	r3, r1
    1cfc:	4599      	cmp	r9, r3
    1cfe:	d909      	bls.n	1d14 <__aeabi_ddiv+0x2a0>
    1d00:	4443      	add	r3, r8
    1d02:	1e6a      	subs	r2, r5, #1
    1d04:	4598      	cmp	r8, r3
    1d06:	d900      	bls.n	1d0a <__aeabi_ddiv+0x296>
    1d08:	e11a      	b.n	1f40 <__aeabi_ddiv+0x4cc>
    1d0a:	4599      	cmp	r9, r3
    1d0c:	d800      	bhi.n	1d10 <__aeabi_ddiv+0x29c>
    1d0e:	e117      	b.n	1f40 <__aeabi_ddiv+0x4cc>
    1d10:	3d02      	subs	r5, #2
    1d12:	4443      	add	r3, r8
    1d14:	464a      	mov	r2, r9
    1d16:	1a9b      	subs	r3, r3, r2
    1d18:	465a      	mov	r2, fp
    1d1a:	0412      	lsls	r2, r2, #16
    1d1c:	432a      	orrs	r2, r5
    1d1e:	9903      	ldr	r1, [sp, #12]
    1d20:	4693      	mov	fp, r2
    1d22:	0c10      	lsrs	r0, r2, #16
    1d24:	0c0a      	lsrs	r2, r1, #16
    1d26:	4691      	mov	r9, r2
    1d28:	0409      	lsls	r1, r1, #16
    1d2a:	465a      	mov	r2, fp
    1d2c:	0c09      	lsrs	r1, r1, #16
    1d2e:	464e      	mov	r6, r9
    1d30:	000d      	movs	r5, r1
    1d32:	0412      	lsls	r2, r2, #16
    1d34:	0c12      	lsrs	r2, r2, #16
    1d36:	4345      	muls	r5, r0
    1d38:	9105      	str	r1, [sp, #20]
    1d3a:	4351      	muls	r1, r2
    1d3c:	4372      	muls	r2, r6
    1d3e:	4370      	muls	r0, r6
    1d40:	1952      	adds	r2, r2, r5
    1d42:	0c0e      	lsrs	r6, r1, #16
    1d44:	18b2      	adds	r2, r6, r2
    1d46:	4295      	cmp	r5, r2
    1d48:	d903      	bls.n	1d52 <__aeabi_ddiv+0x2de>
    1d4a:	2580      	movs	r5, #128	; 0x80
    1d4c:	026d      	lsls	r5, r5, #9
    1d4e:	46ac      	mov	ip, r5
    1d50:	4460      	add	r0, ip
    1d52:	0c15      	lsrs	r5, r2, #16
    1d54:	0409      	lsls	r1, r1, #16
    1d56:	0412      	lsls	r2, r2, #16
    1d58:	0c09      	lsrs	r1, r1, #16
    1d5a:	1828      	adds	r0, r5, r0
    1d5c:	1852      	adds	r2, r2, r1
    1d5e:	4283      	cmp	r3, r0
    1d60:	d200      	bcs.n	1d64 <__aeabi_ddiv+0x2f0>
    1d62:	e0ce      	b.n	1f02 <__aeabi_ddiv+0x48e>
    1d64:	d100      	bne.n	1d68 <__aeabi_ddiv+0x2f4>
    1d66:	e0c8      	b.n	1efa <__aeabi_ddiv+0x486>
    1d68:	1a1d      	subs	r5, r3, r0
    1d6a:	4653      	mov	r3, sl
    1d6c:	1a9e      	subs	r6, r3, r2
    1d6e:	45b2      	cmp	sl, r6
    1d70:	4192      	sbcs	r2, r2
    1d72:	4252      	negs	r2, r2
    1d74:	1aab      	subs	r3, r5, r2
    1d76:	469a      	mov	sl, r3
    1d78:	4598      	cmp	r8, r3
    1d7a:	d100      	bne.n	1d7e <__aeabi_ddiv+0x30a>
    1d7c:	e117      	b.n	1fae <__aeabi_ddiv+0x53a>
    1d7e:	0039      	movs	r1, r7
    1d80:	0018      	movs	r0, r3
    1d82:	f7ff fadb 	bl	133c <__udivsi3>
    1d86:	9b01      	ldr	r3, [sp, #4]
    1d88:	0005      	movs	r5, r0
    1d8a:	4343      	muls	r3, r0
    1d8c:	0039      	movs	r1, r7
    1d8e:	4650      	mov	r0, sl
    1d90:	9304      	str	r3, [sp, #16]
    1d92:	f7ff fb59 	bl	1448 <__aeabi_uidivmod>
    1d96:	9804      	ldr	r0, [sp, #16]
    1d98:	040b      	lsls	r3, r1, #16
    1d9a:	0c31      	lsrs	r1, r6, #16
    1d9c:	4319      	orrs	r1, r3
    1d9e:	4288      	cmp	r0, r1
    1da0:	d909      	bls.n	1db6 <__aeabi_ddiv+0x342>
    1da2:	4441      	add	r1, r8
    1da4:	1e6b      	subs	r3, r5, #1
    1da6:	4588      	cmp	r8, r1
    1da8:	d900      	bls.n	1dac <__aeabi_ddiv+0x338>
    1daa:	e107      	b.n	1fbc <__aeabi_ddiv+0x548>
    1dac:	4288      	cmp	r0, r1
    1dae:	d800      	bhi.n	1db2 <__aeabi_ddiv+0x33e>
    1db0:	e104      	b.n	1fbc <__aeabi_ddiv+0x548>
    1db2:	3d02      	subs	r5, #2
    1db4:	4441      	add	r1, r8
    1db6:	9b04      	ldr	r3, [sp, #16]
    1db8:	1acb      	subs	r3, r1, r3
    1dba:	0018      	movs	r0, r3
    1dbc:	0039      	movs	r1, r7
    1dbe:	9304      	str	r3, [sp, #16]
    1dc0:	f7ff fabc 	bl	133c <__udivsi3>
    1dc4:	9b01      	ldr	r3, [sp, #4]
    1dc6:	4682      	mov	sl, r0
    1dc8:	4343      	muls	r3, r0
    1dca:	0039      	movs	r1, r7
    1dcc:	9804      	ldr	r0, [sp, #16]
    1dce:	9301      	str	r3, [sp, #4]
    1dd0:	f7ff fb3a 	bl	1448 <__aeabi_uidivmod>
    1dd4:	9801      	ldr	r0, [sp, #4]
    1dd6:	040b      	lsls	r3, r1, #16
    1dd8:	0431      	lsls	r1, r6, #16
    1dda:	0c09      	lsrs	r1, r1, #16
    1ddc:	4319      	orrs	r1, r3
    1dde:	4288      	cmp	r0, r1
    1de0:	d90d      	bls.n	1dfe <__aeabi_ddiv+0x38a>
    1de2:	4653      	mov	r3, sl
    1de4:	4441      	add	r1, r8
    1de6:	3b01      	subs	r3, #1
    1de8:	4588      	cmp	r8, r1
    1dea:	d900      	bls.n	1dee <__aeabi_ddiv+0x37a>
    1dec:	e0e8      	b.n	1fc0 <__aeabi_ddiv+0x54c>
    1dee:	4288      	cmp	r0, r1
    1df0:	d800      	bhi.n	1df4 <__aeabi_ddiv+0x380>
    1df2:	e0e5      	b.n	1fc0 <__aeabi_ddiv+0x54c>
    1df4:	2302      	movs	r3, #2
    1df6:	425b      	negs	r3, r3
    1df8:	469c      	mov	ip, r3
    1dfa:	4441      	add	r1, r8
    1dfc:	44e2      	add	sl, ip
    1dfe:	9b01      	ldr	r3, [sp, #4]
    1e00:	042d      	lsls	r5, r5, #16
    1e02:	1ace      	subs	r6, r1, r3
    1e04:	4651      	mov	r1, sl
    1e06:	4329      	orrs	r1, r5
    1e08:	9d05      	ldr	r5, [sp, #20]
    1e0a:	464f      	mov	r7, r9
    1e0c:	002a      	movs	r2, r5
    1e0e:	040b      	lsls	r3, r1, #16
    1e10:	0c08      	lsrs	r0, r1, #16
    1e12:	0c1b      	lsrs	r3, r3, #16
    1e14:	435a      	muls	r2, r3
    1e16:	4345      	muls	r5, r0
    1e18:	437b      	muls	r3, r7
    1e1a:	4378      	muls	r0, r7
    1e1c:	195b      	adds	r3, r3, r5
    1e1e:	0c17      	lsrs	r7, r2, #16
    1e20:	18fb      	adds	r3, r7, r3
    1e22:	429d      	cmp	r5, r3
    1e24:	d903      	bls.n	1e2e <__aeabi_ddiv+0x3ba>
    1e26:	2580      	movs	r5, #128	; 0x80
    1e28:	026d      	lsls	r5, r5, #9
    1e2a:	46ac      	mov	ip, r5
    1e2c:	4460      	add	r0, ip
    1e2e:	0c1d      	lsrs	r5, r3, #16
    1e30:	0412      	lsls	r2, r2, #16
    1e32:	041b      	lsls	r3, r3, #16
    1e34:	0c12      	lsrs	r2, r2, #16
    1e36:	1828      	adds	r0, r5, r0
    1e38:	189b      	adds	r3, r3, r2
    1e3a:	4286      	cmp	r6, r0
    1e3c:	d200      	bcs.n	1e40 <__aeabi_ddiv+0x3cc>
    1e3e:	e093      	b.n	1f68 <__aeabi_ddiv+0x4f4>
    1e40:	d100      	bne.n	1e44 <__aeabi_ddiv+0x3d0>
    1e42:	e08e      	b.n	1f62 <__aeabi_ddiv+0x4ee>
    1e44:	2301      	movs	r3, #1
    1e46:	4319      	orrs	r1, r3
    1e48:	4ba0      	ldr	r3, [pc, #640]	; (20cc <STACK_SIZE+0xcc>)
    1e4a:	18e3      	adds	r3, r4, r3
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	dc00      	bgt.n	1e52 <__aeabi_ddiv+0x3de>
    1e50:	e099      	b.n	1f86 <__aeabi_ddiv+0x512>
    1e52:	074a      	lsls	r2, r1, #29
    1e54:	d000      	beq.n	1e58 <__aeabi_ddiv+0x3e4>
    1e56:	e09e      	b.n	1f96 <__aeabi_ddiv+0x522>
    1e58:	465a      	mov	r2, fp
    1e5a:	01d2      	lsls	r2, r2, #7
    1e5c:	d506      	bpl.n	1e6c <__aeabi_ddiv+0x3f8>
    1e5e:	465a      	mov	r2, fp
    1e60:	4b9b      	ldr	r3, [pc, #620]	; (20d0 <STACK_SIZE+0xd0>)
    1e62:	401a      	ands	r2, r3
    1e64:	2380      	movs	r3, #128	; 0x80
    1e66:	4693      	mov	fp, r2
    1e68:	00db      	lsls	r3, r3, #3
    1e6a:	18e3      	adds	r3, r4, r3
    1e6c:	4a99      	ldr	r2, [pc, #612]	; (20d4 <STACK_SIZE+0xd4>)
    1e6e:	4293      	cmp	r3, r2
    1e70:	dd68      	ble.n	1f44 <__aeabi_ddiv+0x4d0>
    1e72:	2301      	movs	r3, #1
    1e74:	9a02      	ldr	r2, [sp, #8]
    1e76:	4c98      	ldr	r4, [pc, #608]	; (20d8 <STACK_SIZE+0xd8>)
    1e78:	401a      	ands	r2, r3
    1e7a:	2300      	movs	r3, #0
    1e7c:	4694      	mov	ip, r2
    1e7e:	4698      	mov	r8, r3
    1e80:	2200      	movs	r2, #0
    1e82:	e6c5      	b.n	1c10 <__aeabi_ddiv+0x19c>
    1e84:	2280      	movs	r2, #128	; 0x80
    1e86:	464b      	mov	r3, r9
    1e88:	0312      	lsls	r2, r2, #12
    1e8a:	4213      	tst	r3, r2
    1e8c:	d00a      	beq.n	1ea4 <__aeabi_ddiv+0x430>
    1e8e:	465b      	mov	r3, fp
    1e90:	4213      	tst	r3, r2
    1e92:	d106      	bne.n	1ea2 <__aeabi_ddiv+0x42e>
    1e94:	431a      	orrs	r2, r3
    1e96:	0312      	lsls	r2, r2, #12
    1e98:	0b12      	lsrs	r2, r2, #12
    1e9a:	46ac      	mov	ip, r5
    1e9c:	4688      	mov	r8, r1
    1e9e:	4c8e      	ldr	r4, [pc, #568]	; (20d8 <STACK_SIZE+0xd8>)
    1ea0:	e6b6      	b.n	1c10 <__aeabi_ddiv+0x19c>
    1ea2:	464b      	mov	r3, r9
    1ea4:	431a      	orrs	r2, r3
    1ea6:	0312      	lsls	r2, r2, #12
    1ea8:	0b12      	lsrs	r2, r2, #12
    1eaa:	46bc      	mov	ip, r7
    1eac:	4c8a      	ldr	r4, [pc, #552]	; (20d8 <STACK_SIZE+0xd8>)
    1eae:	e6af      	b.n	1c10 <__aeabi_ddiv+0x19c>
    1eb0:	0003      	movs	r3, r0
    1eb2:	465a      	mov	r2, fp
    1eb4:	3b28      	subs	r3, #40	; 0x28
    1eb6:	409a      	lsls	r2, r3
    1eb8:	2300      	movs	r3, #0
    1eba:	4691      	mov	r9, r2
    1ebc:	4698      	mov	r8, r3
    1ebe:	e657      	b.n	1b70 <__aeabi_ddiv+0xfc>
    1ec0:	4658      	mov	r0, fp
    1ec2:	f000 ff0d 	bl	2ce0 <__clzsi2>
    1ec6:	3020      	adds	r0, #32
    1ec8:	e640      	b.n	1b4c <__aeabi_ddiv+0xd8>
    1eca:	0003      	movs	r3, r0
    1ecc:	4652      	mov	r2, sl
    1ece:	3b28      	subs	r3, #40	; 0x28
    1ed0:	409a      	lsls	r2, r3
    1ed2:	2100      	movs	r1, #0
    1ed4:	4693      	mov	fp, r2
    1ed6:	e677      	b.n	1bc8 <__aeabi_ddiv+0x154>
    1ed8:	f000 ff02 	bl	2ce0 <__clzsi2>
    1edc:	3020      	adds	r0, #32
    1ede:	e65f      	b.n	1ba0 <__aeabi_ddiv+0x12c>
    1ee0:	4588      	cmp	r8, r1
    1ee2:	d200      	bcs.n	1ee6 <__aeabi_ddiv+0x472>
    1ee4:	e6c7      	b.n	1c76 <__aeabi_ddiv+0x202>
    1ee6:	464b      	mov	r3, r9
    1ee8:	07de      	lsls	r6, r3, #31
    1eea:	085d      	lsrs	r5, r3, #1
    1eec:	4643      	mov	r3, r8
    1eee:	085b      	lsrs	r3, r3, #1
    1ef0:	431e      	orrs	r6, r3
    1ef2:	4643      	mov	r3, r8
    1ef4:	07db      	lsls	r3, r3, #31
    1ef6:	469a      	mov	sl, r3
    1ef8:	e6c2      	b.n	1c80 <__aeabi_ddiv+0x20c>
    1efa:	2500      	movs	r5, #0
    1efc:	4592      	cmp	sl, r2
    1efe:	d300      	bcc.n	1f02 <__aeabi_ddiv+0x48e>
    1f00:	e733      	b.n	1d6a <__aeabi_ddiv+0x2f6>
    1f02:	9e03      	ldr	r6, [sp, #12]
    1f04:	4659      	mov	r1, fp
    1f06:	46b4      	mov	ip, r6
    1f08:	44e2      	add	sl, ip
    1f0a:	45b2      	cmp	sl, r6
    1f0c:	41ad      	sbcs	r5, r5
    1f0e:	426d      	negs	r5, r5
    1f10:	4445      	add	r5, r8
    1f12:	18eb      	adds	r3, r5, r3
    1f14:	3901      	subs	r1, #1
    1f16:	4598      	cmp	r8, r3
    1f18:	d207      	bcs.n	1f2a <__aeabi_ddiv+0x4b6>
    1f1a:	4298      	cmp	r0, r3
    1f1c:	d900      	bls.n	1f20 <__aeabi_ddiv+0x4ac>
    1f1e:	e07f      	b.n	2020 <STACK_SIZE+0x20>
    1f20:	d100      	bne.n	1f24 <__aeabi_ddiv+0x4b0>
    1f22:	e0bc      	b.n	209e <STACK_SIZE+0x9e>
    1f24:	1a1d      	subs	r5, r3, r0
    1f26:	468b      	mov	fp, r1
    1f28:	e71f      	b.n	1d6a <__aeabi_ddiv+0x2f6>
    1f2a:	4598      	cmp	r8, r3
    1f2c:	d1fa      	bne.n	1f24 <__aeabi_ddiv+0x4b0>
    1f2e:	9d03      	ldr	r5, [sp, #12]
    1f30:	4555      	cmp	r5, sl
    1f32:	d9f2      	bls.n	1f1a <__aeabi_ddiv+0x4a6>
    1f34:	4643      	mov	r3, r8
    1f36:	468b      	mov	fp, r1
    1f38:	1a1d      	subs	r5, r3, r0
    1f3a:	e716      	b.n	1d6a <__aeabi_ddiv+0x2f6>
    1f3c:	469b      	mov	fp, r3
    1f3e:	e6ca      	b.n	1cd6 <__aeabi_ddiv+0x262>
    1f40:	0015      	movs	r5, r2
    1f42:	e6e7      	b.n	1d14 <__aeabi_ddiv+0x2a0>
    1f44:	465a      	mov	r2, fp
    1f46:	08c9      	lsrs	r1, r1, #3
    1f48:	0752      	lsls	r2, r2, #29
    1f4a:	430a      	orrs	r2, r1
    1f4c:	055b      	lsls	r3, r3, #21
    1f4e:	4690      	mov	r8, r2
    1f50:	0d5c      	lsrs	r4, r3, #21
    1f52:	465a      	mov	r2, fp
    1f54:	2301      	movs	r3, #1
    1f56:	9902      	ldr	r1, [sp, #8]
    1f58:	0252      	lsls	r2, r2, #9
    1f5a:	4019      	ands	r1, r3
    1f5c:	0b12      	lsrs	r2, r2, #12
    1f5e:	468c      	mov	ip, r1
    1f60:	e656      	b.n	1c10 <__aeabi_ddiv+0x19c>
    1f62:	2b00      	cmp	r3, #0
    1f64:	d100      	bne.n	1f68 <__aeabi_ddiv+0x4f4>
    1f66:	e76f      	b.n	1e48 <__aeabi_ddiv+0x3d4>
    1f68:	4446      	add	r6, r8
    1f6a:	1e4a      	subs	r2, r1, #1
    1f6c:	45b0      	cmp	r8, r6
    1f6e:	d929      	bls.n	1fc4 <__aeabi_ddiv+0x550>
    1f70:	0011      	movs	r1, r2
    1f72:	4286      	cmp	r6, r0
    1f74:	d000      	beq.n	1f78 <__aeabi_ddiv+0x504>
    1f76:	e765      	b.n	1e44 <__aeabi_ddiv+0x3d0>
    1f78:	9a03      	ldr	r2, [sp, #12]
    1f7a:	4293      	cmp	r3, r2
    1f7c:	d000      	beq.n	1f80 <__aeabi_ddiv+0x50c>
    1f7e:	e761      	b.n	1e44 <__aeabi_ddiv+0x3d0>
    1f80:	e762      	b.n	1e48 <__aeabi_ddiv+0x3d4>
    1f82:	2101      	movs	r1, #1
    1f84:	4249      	negs	r1, r1
    1f86:	2001      	movs	r0, #1
    1f88:	1ac2      	subs	r2, r0, r3
    1f8a:	2a38      	cmp	r2, #56	; 0x38
    1f8c:	dd21      	ble.n	1fd2 <__aeabi_ddiv+0x55e>
    1f8e:	9b02      	ldr	r3, [sp, #8]
    1f90:	4003      	ands	r3, r0
    1f92:	469c      	mov	ip, r3
    1f94:	e638      	b.n	1c08 <__aeabi_ddiv+0x194>
    1f96:	220f      	movs	r2, #15
    1f98:	400a      	ands	r2, r1
    1f9a:	2a04      	cmp	r2, #4
    1f9c:	d100      	bne.n	1fa0 <__aeabi_ddiv+0x52c>
    1f9e:	e75b      	b.n	1e58 <__aeabi_ddiv+0x3e4>
    1fa0:	000a      	movs	r2, r1
    1fa2:	1d11      	adds	r1, r2, #4
    1fa4:	4291      	cmp	r1, r2
    1fa6:	4192      	sbcs	r2, r2
    1fa8:	4252      	negs	r2, r2
    1faa:	4493      	add	fp, r2
    1fac:	e754      	b.n	1e58 <__aeabi_ddiv+0x3e4>
    1fae:	4b47      	ldr	r3, [pc, #284]	; (20cc <STACK_SIZE+0xcc>)
    1fb0:	18e3      	adds	r3, r4, r3
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	dde5      	ble.n	1f82 <__aeabi_ddiv+0x50e>
    1fb6:	2201      	movs	r2, #1
    1fb8:	4252      	negs	r2, r2
    1fba:	e7f2      	b.n	1fa2 <__aeabi_ddiv+0x52e>
    1fbc:	001d      	movs	r5, r3
    1fbe:	e6fa      	b.n	1db6 <__aeabi_ddiv+0x342>
    1fc0:	469a      	mov	sl, r3
    1fc2:	e71c      	b.n	1dfe <__aeabi_ddiv+0x38a>
    1fc4:	42b0      	cmp	r0, r6
    1fc6:	d839      	bhi.n	203c <STACK_SIZE+0x3c>
    1fc8:	d06e      	beq.n	20a8 <STACK_SIZE+0xa8>
    1fca:	0011      	movs	r1, r2
    1fcc:	e73a      	b.n	1e44 <__aeabi_ddiv+0x3d0>
    1fce:	9302      	str	r3, [sp, #8]
    1fd0:	e73a      	b.n	1e48 <__aeabi_ddiv+0x3d4>
    1fd2:	2a1f      	cmp	r2, #31
    1fd4:	dc3c      	bgt.n	2050 <STACK_SIZE+0x50>
    1fd6:	2320      	movs	r3, #32
    1fd8:	1a9b      	subs	r3, r3, r2
    1fda:	000c      	movs	r4, r1
    1fdc:	4658      	mov	r0, fp
    1fde:	4099      	lsls	r1, r3
    1fe0:	4098      	lsls	r0, r3
    1fe2:	1e4b      	subs	r3, r1, #1
    1fe4:	4199      	sbcs	r1, r3
    1fe6:	465b      	mov	r3, fp
    1fe8:	40d4      	lsrs	r4, r2
    1fea:	40d3      	lsrs	r3, r2
    1fec:	4320      	orrs	r0, r4
    1fee:	4308      	orrs	r0, r1
    1ff0:	001a      	movs	r2, r3
    1ff2:	0743      	lsls	r3, r0, #29
    1ff4:	d009      	beq.n	200a <STACK_SIZE+0xa>
    1ff6:	230f      	movs	r3, #15
    1ff8:	4003      	ands	r3, r0
    1ffa:	2b04      	cmp	r3, #4
    1ffc:	d005      	beq.n	200a <STACK_SIZE+0xa>
    1ffe:	0001      	movs	r1, r0
    2000:	1d08      	adds	r0, r1, #4
    2002:	4288      	cmp	r0, r1
    2004:	419b      	sbcs	r3, r3
    2006:	425b      	negs	r3, r3
    2008:	18d2      	adds	r2, r2, r3
    200a:	0213      	lsls	r3, r2, #8
    200c:	d53a      	bpl.n	2084 <STACK_SIZE+0x84>
    200e:	2301      	movs	r3, #1
    2010:	9a02      	ldr	r2, [sp, #8]
    2012:	2401      	movs	r4, #1
    2014:	401a      	ands	r2, r3
    2016:	2300      	movs	r3, #0
    2018:	4694      	mov	ip, r2
    201a:	4698      	mov	r8, r3
    201c:	2200      	movs	r2, #0
    201e:	e5f7      	b.n	1c10 <__aeabi_ddiv+0x19c>
    2020:	2102      	movs	r1, #2
    2022:	4249      	negs	r1, r1
    2024:	468c      	mov	ip, r1
    2026:	9d03      	ldr	r5, [sp, #12]
    2028:	44e3      	add	fp, ip
    202a:	46ac      	mov	ip, r5
    202c:	44e2      	add	sl, ip
    202e:	45aa      	cmp	sl, r5
    2030:	41ad      	sbcs	r5, r5
    2032:	426d      	negs	r5, r5
    2034:	4445      	add	r5, r8
    2036:	18ed      	adds	r5, r5, r3
    2038:	1a2d      	subs	r5, r5, r0
    203a:	e696      	b.n	1d6a <__aeabi_ddiv+0x2f6>
    203c:	1e8a      	subs	r2, r1, #2
    203e:	9903      	ldr	r1, [sp, #12]
    2040:	004d      	lsls	r5, r1, #1
    2042:	428d      	cmp	r5, r1
    2044:	4189      	sbcs	r1, r1
    2046:	4249      	negs	r1, r1
    2048:	4441      	add	r1, r8
    204a:	1876      	adds	r6, r6, r1
    204c:	9503      	str	r5, [sp, #12]
    204e:	e78f      	b.n	1f70 <__aeabi_ddiv+0x4fc>
    2050:	201f      	movs	r0, #31
    2052:	4240      	negs	r0, r0
    2054:	1ac3      	subs	r3, r0, r3
    2056:	4658      	mov	r0, fp
    2058:	40d8      	lsrs	r0, r3
    205a:	0003      	movs	r3, r0
    205c:	2a20      	cmp	r2, #32
    205e:	d028      	beq.n	20b2 <STACK_SIZE+0xb2>
    2060:	2040      	movs	r0, #64	; 0x40
    2062:	465d      	mov	r5, fp
    2064:	1a82      	subs	r2, r0, r2
    2066:	4095      	lsls	r5, r2
    2068:	4329      	orrs	r1, r5
    206a:	1e4a      	subs	r2, r1, #1
    206c:	4191      	sbcs	r1, r2
    206e:	4319      	orrs	r1, r3
    2070:	2307      	movs	r3, #7
    2072:	2200      	movs	r2, #0
    2074:	400b      	ands	r3, r1
    2076:	d009      	beq.n	208c <STACK_SIZE+0x8c>
    2078:	230f      	movs	r3, #15
    207a:	2200      	movs	r2, #0
    207c:	400b      	ands	r3, r1
    207e:	0008      	movs	r0, r1
    2080:	2b04      	cmp	r3, #4
    2082:	d1bd      	bne.n	2000 <STACK_SIZE>
    2084:	0001      	movs	r1, r0
    2086:	0753      	lsls	r3, r2, #29
    2088:	0252      	lsls	r2, r2, #9
    208a:	0b12      	lsrs	r2, r2, #12
    208c:	08c9      	lsrs	r1, r1, #3
    208e:	4319      	orrs	r1, r3
    2090:	2301      	movs	r3, #1
    2092:	4688      	mov	r8, r1
    2094:	9902      	ldr	r1, [sp, #8]
    2096:	2400      	movs	r4, #0
    2098:	4019      	ands	r1, r3
    209a:	468c      	mov	ip, r1
    209c:	e5b8      	b.n	1c10 <__aeabi_ddiv+0x19c>
    209e:	4552      	cmp	r2, sl
    20a0:	d8be      	bhi.n	2020 <STACK_SIZE+0x20>
    20a2:	468b      	mov	fp, r1
    20a4:	2500      	movs	r5, #0
    20a6:	e660      	b.n	1d6a <__aeabi_ddiv+0x2f6>
    20a8:	9d03      	ldr	r5, [sp, #12]
    20aa:	429d      	cmp	r5, r3
    20ac:	d3c6      	bcc.n	203c <STACK_SIZE+0x3c>
    20ae:	0011      	movs	r1, r2
    20b0:	e762      	b.n	1f78 <__aeabi_ddiv+0x504>
    20b2:	2500      	movs	r5, #0
    20b4:	e7d8      	b.n	2068 <STACK_SIZE+0x68>
    20b6:	2280      	movs	r2, #128	; 0x80
    20b8:	465b      	mov	r3, fp
    20ba:	0312      	lsls	r2, r2, #12
    20bc:	431a      	orrs	r2, r3
    20be:	9b01      	ldr	r3, [sp, #4]
    20c0:	0312      	lsls	r2, r2, #12
    20c2:	0b12      	lsrs	r2, r2, #12
    20c4:	469c      	mov	ip, r3
    20c6:	4688      	mov	r8, r1
    20c8:	4c03      	ldr	r4, [pc, #12]	; (20d8 <STACK_SIZE+0xd8>)
    20ca:	e5a1      	b.n	1c10 <__aeabi_ddiv+0x19c>
    20cc:	000003ff 	.word	0x000003ff
    20d0:	feffffff 	.word	0xfeffffff
    20d4:	000007fe 	.word	0x000007fe
    20d8:	000007ff 	.word	0x000007ff

000020dc <__aeabi_dmul>:
    20dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20de:	4657      	mov	r7, sl
    20e0:	4645      	mov	r5, r8
    20e2:	46de      	mov	lr, fp
    20e4:	464e      	mov	r6, r9
    20e6:	b5e0      	push	{r5, r6, r7, lr}
    20e8:	030c      	lsls	r4, r1, #12
    20ea:	4698      	mov	r8, r3
    20ec:	004e      	lsls	r6, r1, #1
    20ee:	0b23      	lsrs	r3, r4, #12
    20f0:	b087      	sub	sp, #28
    20f2:	0007      	movs	r7, r0
    20f4:	4692      	mov	sl, r2
    20f6:	469b      	mov	fp, r3
    20f8:	0d76      	lsrs	r6, r6, #21
    20fa:	0fcd      	lsrs	r5, r1, #31
    20fc:	2e00      	cmp	r6, #0
    20fe:	d06b      	beq.n	21d8 <__aeabi_dmul+0xfc>
    2100:	4b6d      	ldr	r3, [pc, #436]	; (22b8 <__aeabi_dmul+0x1dc>)
    2102:	429e      	cmp	r6, r3
    2104:	d035      	beq.n	2172 <__aeabi_dmul+0x96>
    2106:	2480      	movs	r4, #128	; 0x80
    2108:	465b      	mov	r3, fp
    210a:	0f42      	lsrs	r2, r0, #29
    210c:	0424      	lsls	r4, r4, #16
    210e:	00db      	lsls	r3, r3, #3
    2110:	4314      	orrs	r4, r2
    2112:	431c      	orrs	r4, r3
    2114:	00c3      	lsls	r3, r0, #3
    2116:	4699      	mov	r9, r3
    2118:	4b68      	ldr	r3, [pc, #416]	; (22bc <__aeabi_dmul+0x1e0>)
    211a:	46a3      	mov	fp, r4
    211c:	469c      	mov	ip, r3
    211e:	2300      	movs	r3, #0
    2120:	2700      	movs	r7, #0
    2122:	4466      	add	r6, ip
    2124:	9302      	str	r3, [sp, #8]
    2126:	4643      	mov	r3, r8
    2128:	031c      	lsls	r4, r3, #12
    212a:	005a      	lsls	r2, r3, #1
    212c:	0fdb      	lsrs	r3, r3, #31
    212e:	4650      	mov	r0, sl
    2130:	0b24      	lsrs	r4, r4, #12
    2132:	0d52      	lsrs	r2, r2, #21
    2134:	4698      	mov	r8, r3
    2136:	d100      	bne.n	213a <__aeabi_dmul+0x5e>
    2138:	e076      	b.n	2228 <__aeabi_dmul+0x14c>
    213a:	4b5f      	ldr	r3, [pc, #380]	; (22b8 <__aeabi_dmul+0x1dc>)
    213c:	429a      	cmp	r2, r3
    213e:	d06d      	beq.n	221c <__aeabi_dmul+0x140>
    2140:	2380      	movs	r3, #128	; 0x80
    2142:	0f41      	lsrs	r1, r0, #29
    2144:	041b      	lsls	r3, r3, #16
    2146:	430b      	orrs	r3, r1
    2148:	495c      	ldr	r1, [pc, #368]	; (22bc <__aeabi_dmul+0x1e0>)
    214a:	00e4      	lsls	r4, r4, #3
    214c:	468c      	mov	ip, r1
    214e:	431c      	orrs	r4, r3
    2150:	00c3      	lsls	r3, r0, #3
    2152:	2000      	movs	r0, #0
    2154:	4462      	add	r2, ip
    2156:	4641      	mov	r1, r8
    2158:	18b6      	adds	r6, r6, r2
    215a:	4069      	eors	r1, r5
    215c:	1c72      	adds	r2, r6, #1
    215e:	9101      	str	r1, [sp, #4]
    2160:	4694      	mov	ip, r2
    2162:	4307      	orrs	r7, r0
    2164:	2f0f      	cmp	r7, #15
    2166:	d900      	bls.n	216a <__aeabi_dmul+0x8e>
    2168:	e0b0      	b.n	22cc <__aeabi_dmul+0x1f0>
    216a:	4a55      	ldr	r2, [pc, #340]	; (22c0 <__aeabi_dmul+0x1e4>)
    216c:	00bf      	lsls	r7, r7, #2
    216e:	59d2      	ldr	r2, [r2, r7]
    2170:	4697      	mov	pc, r2
    2172:	465b      	mov	r3, fp
    2174:	4303      	orrs	r3, r0
    2176:	4699      	mov	r9, r3
    2178:	d000      	beq.n	217c <__aeabi_dmul+0xa0>
    217a:	e087      	b.n	228c <__aeabi_dmul+0x1b0>
    217c:	2300      	movs	r3, #0
    217e:	469b      	mov	fp, r3
    2180:	3302      	adds	r3, #2
    2182:	2708      	movs	r7, #8
    2184:	9302      	str	r3, [sp, #8]
    2186:	e7ce      	b.n	2126 <__aeabi_dmul+0x4a>
    2188:	4642      	mov	r2, r8
    218a:	9201      	str	r2, [sp, #4]
    218c:	2802      	cmp	r0, #2
    218e:	d067      	beq.n	2260 <__aeabi_dmul+0x184>
    2190:	2803      	cmp	r0, #3
    2192:	d100      	bne.n	2196 <__aeabi_dmul+0xba>
    2194:	e20e      	b.n	25b4 <__aeabi_dmul+0x4d8>
    2196:	2801      	cmp	r0, #1
    2198:	d000      	beq.n	219c <__aeabi_dmul+0xc0>
    219a:	e162      	b.n	2462 <__aeabi_dmul+0x386>
    219c:	2300      	movs	r3, #0
    219e:	2400      	movs	r4, #0
    21a0:	2200      	movs	r2, #0
    21a2:	4699      	mov	r9, r3
    21a4:	9901      	ldr	r1, [sp, #4]
    21a6:	4001      	ands	r1, r0
    21a8:	b2cd      	uxtb	r5, r1
    21aa:	2100      	movs	r1, #0
    21ac:	0312      	lsls	r2, r2, #12
    21ae:	0d0b      	lsrs	r3, r1, #20
    21b0:	0b12      	lsrs	r2, r2, #12
    21b2:	051b      	lsls	r3, r3, #20
    21b4:	4313      	orrs	r3, r2
    21b6:	4a43      	ldr	r2, [pc, #268]	; (22c4 <__aeabi_dmul+0x1e8>)
    21b8:	0524      	lsls	r4, r4, #20
    21ba:	4013      	ands	r3, r2
    21bc:	431c      	orrs	r4, r3
    21be:	0064      	lsls	r4, r4, #1
    21c0:	07ed      	lsls	r5, r5, #31
    21c2:	0864      	lsrs	r4, r4, #1
    21c4:	432c      	orrs	r4, r5
    21c6:	4648      	mov	r0, r9
    21c8:	0021      	movs	r1, r4
    21ca:	b007      	add	sp, #28
    21cc:	bc3c      	pop	{r2, r3, r4, r5}
    21ce:	4690      	mov	r8, r2
    21d0:	4699      	mov	r9, r3
    21d2:	46a2      	mov	sl, r4
    21d4:	46ab      	mov	fp, r5
    21d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21d8:	4303      	orrs	r3, r0
    21da:	4699      	mov	r9, r3
    21dc:	d04f      	beq.n	227e <__aeabi_dmul+0x1a2>
    21de:	465b      	mov	r3, fp
    21e0:	2b00      	cmp	r3, #0
    21e2:	d100      	bne.n	21e6 <__aeabi_dmul+0x10a>
    21e4:	e189      	b.n	24fa <__aeabi_dmul+0x41e>
    21e6:	4658      	mov	r0, fp
    21e8:	f000 fd7a 	bl	2ce0 <__clzsi2>
    21ec:	0003      	movs	r3, r0
    21ee:	3b0b      	subs	r3, #11
    21f0:	2b1c      	cmp	r3, #28
    21f2:	dd00      	ble.n	21f6 <__aeabi_dmul+0x11a>
    21f4:	e17a      	b.n	24ec <__aeabi_dmul+0x410>
    21f6:	221d      	movs	r2, #29
    21f8:	1ad3      	subs	r3, r2, r3
    21fa:	003a      	movs	r2, r7
    21fc:	0001      	movs	r1, r0
    21fe:	465c      	mov	r4, fp
    2200:	40da      	lsrs	r2, r3
    2202:	3908      	subs	r1, #8
    2204:	408c      	lsls	r4, r1
    2206:	0013      	movs	r3, r2
    2208:	408f      	lsls	r7, r1
    220a:	4323      	orrs	r3, r4
    220c:	469b      	mov	fp, r3
    220e:	46b9      	mov	r9, r7
    2210:	2300      	movs	r3, #0
    2212:	4e2d      	ldr	r6, [pc, #180]	; (22c8 <__aeabi_dmul+0x1ec>)
    2214:	2700      	movs	r7, #0
    2216:	1a36      	subs	r6, r6, r0
    2218:	9302      	str	r3, [sp, #8]
    221a:	e784      	b.n	2126 <__aeabi_dmul+0x4a>
    221c:	4653      	mov	r3, sl
    221e:	4323      	orrs	r3, r4
    2220:	d12a      	bne.n	2278 <__aeabi_dmul+0x19c>
    2222:	2400      	movs	r4, #0
    2224:	2002      	movs	r0, #2
    2226:	e796      	b.n	2156 <__aeabi_dmul+0x7a>
    2228:	4653      	mov	r3, sl
    222a:	4323      	orrs	r3, r4
    222c:	d020      	beq.n	2270 <__aeabi_dmul+0x194>
    222e:	2c00      	cmp	r4, #0
    2230:	d100      	bne.n	2234 <__aeabi_dmul+0x158>
    2232:	e157      	b.n	24e4 <__aeabi_dmul+0x408>
    2234:	0020      	movs	r0, r4
    2236:	f000 fd53 	bl	2ce0 <__clzsi2>
    223a:	0003      	movs	r3, r0
    223c:	3b0b      	subs	r3, #11
    223e:	2b1c      	cmp	r3, #28
    2240:	dd00      	ble.n	2244 <__aeabi_dmul+0x168>
    2242:	e149      	b.n	24d8 <__aeabi_dmul+0x3fc>
    2244:	211d      	movs	r1, #29
    2246:	1acb      	subs	r3, r1, r3
    2248:	4651      	mov	r1, sl
    224a:	0002      	movs	r2, r0
    224c:	40d9      	lsrs	r1, r3
    224e:	4653      	mov	r3, sl
    2250:	3a08      	subs	r2, #8
    2252:	4094      	lsls	r4, r2
    2254:	4093      	lsls	r3, r2
    2256:	430c      	orrs	r4, r1
    2258:	4a1b      	ldr	r2, [pc, #108]	; (22c8 <__aeabi_dmul+0x1ec>)
    225a:	1a12      	subs	r2, r2, r0
    225c:	2000      	movs	r0, #0
    225e:	e77a      	b.n	2156 <__aeabi_dmul+0x7a>
    2260:	2501      	movs	r5, #1
    2262:	9b01      	ldr	r3, [sp, #4]
    2264:	4c14      	ldr	r4, [pc, #80]	; (22b8 <__aeabi_dmul+0x1dc>)
    2266:	401d      	ands	r5, r3
    2268:	2300      	movs	r3, #0
    226a:	2200      	movs	r2, #0
    226c:	4699      	mov	r9, r3
    226e:	e79c      	b.n	21aa <__aeabi_dmul+0xce>
    2270:	2400      	movs	r4, #0
    2272:	2200      	movs	r2, #0
    2274:	2001      	movs	r0, #1
    2276:	e76e      	b.n	2156 <__aeabi_dmul+0x7a>
    2278:	4653      	mov	r3, sl
    227a:	2003      	movs	r0, #3
    227c:	e76b      	b.n	2156 <__aeabi_dmul+0x7a>
    227e:	2300      	movs	r3, #0
    2280:	469b      	mov	fp, r3
    2282:	3301      	adds	r3, #1
    2284:	2704      	movs	r7, #4
    2286:	2600      	movs	r6, #0
    2288:	9302      	str	r3, [sp, #8]
    228a:	e74c      	b.n	2126 <__aeabi_dmul+0x4a>
    228c:	2303      	movs	r3, #3
    228e:	4681      	mov	r9, r0
    2290:	270c      	movs	r7, #12
    2292:	9302      	str	r3, [sp, #8]
    2294:	e747      	b.n	2126 <__aeabi_dmul+0x4a>
    2296:	2280      	movs	r2, #128	; 0x80
    2298:	2300      	movs	r3, #0
    229a:	2500      	movs	r5, #0
    229c:	0312      	lsls	r2, r2, #12
    229e:	4699      	mov	r9, r3
    22a0:	4c05      	ldr	r4, [pc, #20]	; (22b8 <__aeabi_dmul+0x1dc>)
    22a2:	e782      	b.n	21aa <__aeabi_dmul+0xce>
    22a4:	465c      	mov	r4, fp
    22a6:	464b      	mov	r3, r9
    22a8:	9802      	ldr	r0, [sp, #8]
    22aa:	e76f      	b.n	218c <__aeabi_dmul+0xb0>
    22ac:	465c      	mov	r4, fp
    22ae:	464b      	mov	r3, r9
    22b0:	9501      	str	r5, [sp, #4]
    22b2:	9802      	ldr	r0, [sp, #8]
    22b4:	e76a      	b.n	218c <__aeabi_dmul+0xb0>
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	000007ff 	.word	0x000007ff
    22bc:	fffffc01 	.word	0xfffffc01
    22c0:	00002e04 	.word	0x00002e04
    22c4:	800fffff 	.word	0x800fffff
    22c8:	fffffc0d 	.word	0xfffffc0d
    22cc:	464a      	mov	r2, r9
    22ce:	4649      	mov	r1, r9
    22d0:	0c17      	lsrs	r7, r2, #16
    22d2:	0c1a      	lsrs	r2, r3, #16
    22d4:	041b      	lsls	r3, r3, #16
    22d6:	0c1b      	lsrs	r3, r3, #16
    22d8:	0408      	lsls	r0, r1, #16
    22da:	0019      	movs	r1, r3
    22dc:	0c00      	lsrs	r0, r0, #16
    22de:	4341      	muls	r1, r0
    22e0:	0015      	movs	r5, r2
    22e2:	4688      	mov	r8, r1
    22e4:	0019      	movs	r1, r3
    22e6:	437d      	muls	r5, r7
    22e8:	4379      	muls	r1, r7
    22ea:	9503      	str	r5, [sp, #12]
    22ec:	4689      	mov	r9, r1
    22ee:	0029      	movs	r1, r5
    22f0:	0015      	movs	r5, r2
    22f2:	4345      	muls	r5, r0
    22f4:	444d      	add	r5, r9
    22f6:	9502      	str	r5, [sp, #8]
    22f8:	4645      	mov	r5, r8
    22fa:	0c2d      	lsrs	r5, r5, #16
    22fc:	46aa      	mov	sl, r5
    22fe:	9d02      	ldr	r5, [sp, #8]
    2300:	4455      	add	r5, sl
    2302:	45a9      	cmp	r9, r5
    2304:	d906      	bls.n	2314 <__aeabi_dmul+0x238>
    2306:	468a      	mov	sl, r1
    2308:	2180      	movs	r1, #128	; 0x80
    230a:	0249      	lsls	r1, r1, #9
    230c:	4689      	mov	r9, r1
    230e:	44ca      	add	sl, r9
    2310:	4651      	mov	r1, sl
    2312:	9103      	str	r1, [sp, #12]
    2314:	0c29      	lsrs	r1, r5, #16
    2316:	9104      	str	r1, [sp, #16]
    2318:	4641      	mov	r1, r8
    231a:	0409      	lsls	r1, r1, #16
    231c:	042d      	lsls	r5, r5, #16
    231e:	0c09      	lsrs	r1, r1, #16
    2320:	4688      	mov	r8, r1
    2322:	0029      	movs	r1, r5
    2324:	0c25      	lsrs	r5, r4, #16
    2326:	0424      	lsls	r4, r4, #16
    2328:	4441      	add	r1, r8
    232a:	0c24      	lsrs	r4, r4, #16
    232c:	9105      	str	r1, [sp, #20]
    232e:	0021      	movs	r1, r4
    2330:	4341      	muls	r1, r0
    2332:	4688      	mov	r8, r1
    2334:	0021      	movs	r1, r4
    2336:	4379      	muls	r1, r7
    2338:	468a      	mov	sl, r1
    233a:	4368      	muls	r0, r5
    233c:	4641      	mov	r1, r8
    233e:	4450      	add	r0, sl
    2340:	4681      	mov	r9, r0
    2342:	0c08      	lsrs	r0, r1, #16
    2344:	4448      	add	r0, r9
    2346:	436f      	muls	r7, r5
    2348:	4582      	cmp	sl, r0
    234a:	d903      	bls.n	2354 <__aeabi_dmul+0x278>
    234c:	2180      	movs	r1, #128	; 0x80
    234e:	0249      	lsls	r1, r1, #9
    2350:	4689      	mov	r9, r1
    2352:	444f      	add	r7, r9
    2354:	0c01      	lsrs	r1, r0, #16
    2356:	4689      	mov	r9, r1
    2358:	0039      	movs	r1, r7
    235a:	4449      	add	r1, r9
    235c:	9102      	str	r1, [sp, #8]
    235e:	4641      	mov	r1, r8
    2360:	040f      	lsls	r7, r1, #16
    2362:	9904      	ldr	r1, [sp, #16]
    2364:	0c3f      	lsrs	r7, r7, #16
    2366:	4688      	mov	r8, r1
    2368:	0400      	lsls	r0, r0, #16
    236a:	19c0      	adds	r0, r0, r7
    236c:	4480      	add	r8, r0
    236e:	4641      	mov	r1, r8
    2370:	9104      	str	r1, [sp, #16]
    2372:	4659      	mov	r1, fp
    2374:	0c0f      	lsrs	r7, r1, #16
    2376:	0409      	lsls	r1, r1, #16
    2378:	0c09      	lsrs	r1, r1, #16
    237a:	4688      	mov	r8, r1
    237c:	4359      	muls	r1, r3
    237e:	468a      	mov	sl, r1
    2380:	0039      	movs	r1, r7
    2382:	4351      	muls	r1, r2
    2384:	4689      	mov	r9, r1
    2386:	4641      	mov	r1, r8
    2388:	434a      	muls	r2, r1
    238a:	4651      	mov	r1, sl
    238c:	0c09      	lsrs	r1, r1, #16
    238e:	468b      	mov	fp, r1
    2390:	437b      	muls	r3, r7
    2392:	18d2      	adds	r2, r2, r3
    2394:	445a      	add	r2, fp
    2396:	4293      	cmp	r3, r2
    2398:	d903      	bls.n	23a2 <__aeabi_dmul+0x2c6>
    239a:	2380      	movs	r3, #128	; 0x80
    239c:	025b      	lsls	r3, r3, #9
    239e:	469b      	mov	fp, r3
    23a0:	44d9      	add	r9, fp
    23a2:	4651      	mov	r1, sl
    23a4:	0409      	lsls	r1, r1, #16
    23a6:	0c09      	lsrs	r1, r1, #16
    23a8:	468a      	mov	sl, r1
    23aa:	4641      	mov	r1, r8
    23ac:	4361      	muls	r1, r4
    23ae:	437c      	muls	r4, r7
    23b0:	0c13      	lsrs	r3, r2, #16
    23b2:	0412      	lsls	r2, r2, #16
    23b4:	444b      	add	r3, r9
    23b6:	4452      	add	r2, sl
    23b8:	46a1      	mov	r9, r4
    23ba:	468a      	mov	sl, r1
    23bc:	003c      	movs	r4, r7
    23be:	4641      	mov	r1, r8
    23c0:	436c      	muls	r4, r5
    23c2:	434d      	muls	r5, r1
    23c4:	4651      	mov	r1, sl
    23c6:	444d      	add	r5, r9
    23c8:	0c0f      	lsrs	r7, r1, #16
    23ca:	197d      	adds	r5, r7, r5
    23cc:	45a9      	cmp	r9, r5
    23ce:	d903      	bls.n	23d8 <__aeabi_dmul+0x2fc>
    23d0:	2180      	movs	r1, #128	; 0x80
    23d2:	0249      	lsls	r1, r1, #9
    23d4:	4688      	mov	r8, r1
    23d6:	4444      	add	r4, r8
    23d8:	9f04      	ldr	r7, [sp, #16]
    23da:	9903      	ldr	r1, [sp, #12]
    23dc:	46b8      	mov	r8, r7
    23de:	4441      	add	r1, r8
    23e0:	468b      	mov	fp, r1
    23e2:	4583      	cmp	fp, r0
    23e4:	4180      	sbcs	r0, r0
    23e6:	4241      	negs	r1, r0
    23e8:	4688      	mov	r8, r1
    23ea:	4651      	mov	r1, sl
    23ec:	0408      	lsls	r0, r1, #16
    23ee:	042f      	lsls	r7, r5, #16
    23f0:	0c00      	lsrs	r0, r0, #16
    23f2:	183f      	adds	r7, r7, r0
    23f4:	4658      	mov	r0, fp
    23f6:	9902      	ldr	r1, [sp, #8]
    23f8:	1810      	adds	r0, r2, r0
    23fa:	4689      	mov	r9, r1
    23fc:	4290      	cmp	r0, r2
    23fe:	4192      	sbcs	r2, r2
    2400:	444f      	add	r7, r9
    2402:	46ba      	mov	sl, r7
    2404:	4252      	negs	r2, r2
    2406:	4699      	mov	r9, r3
    2408:	4693      	mov	fp, r2
    240a:	44c2      	add	sl, r8
    240c:	44d1      	add	r9, sl
    240e:	44cb      	add	fp, r9
    2410:	428f      	cmp	r7, r1
    2412:	41bf      	sbcs	r7, r7
    2414:	45c2      	cmp	sl, r8
    2416:	4189      	sbcs	r1, r1
    2418:	4599      	cmp	r9, r3
    241a:	419b      	sbcs	r3, r3
    241c:	4593      	cmp	fp, r2
    241e:	4192      	sbcs	r2, r2
    2420:	427f      	negs	r7, r7
    2422:	4249      	negs	r1, r1
    2424:	0c2d      	lsrs	r5, r5, #16
    2426:	4252      	negs	r2, r2
    2428:	430f      	orrs	r7, r1
    242a:	425b      	negs	r3, r3
    242c:	4313      	orrs	r3, r2
    242e:	197f      	adds	r7, r7, r5
    2430:	18ff      	adds	r7, r7, r3
    2432:	465b      	mov	r3, fp
    2434:	193c      	adds	r4, r7, r4
    2436:	0ddb      	lsrs	r3, r3, #23
    2438:	9a05      	ldr	r2, [sp, #20]
    243a:	0264      	lsls	r4, r4, #9
    243c:	431c      	orrs	r4, r3
    243e:	0243      	lsls	r3, r0, #9
    2440:	4313      	orrs	r3, r2
    2442:	1e5d      	subs	r5, r3, #1
    2444:	41ab      	sbcs	r3, r5
    2446:	465a      	mov	r2, fp
    2448:	0dc0      	lsrs	r0, r0, #23
    244a:	4303      	orrs	r3, r0
    244c:	0252      	lsls	r2, r2, #9
    244e:	4313      	orrs	r3, r2
    2450:	01e2      	lsls	r2, r4, #7
    2452:	d556      	bpl.n	2502 <__aeabi_dmul+0x426>
    2454:	2001      	movs	r0, #1
    2456:	085a      	lsrs	r2, r3, #1
    2458:	4003      	ands	r3, r0
    245a:	4313      	orrs	r3, r2
    245c:	07e2      	lsls	r2, r4, #31
    245e:	4313      	orrs	r3, r2
    2460:	0864      	lsrs	r4, r4, #1
    2462:	485a      	ldr	r0, [pc, #360]	; (25cc <__aeabi_dmul+0x4f0>)
    2464:	4460      	add	r0, ip
    2466:	2800      	cmp	r0, #0
    2468:	dd4d      	ble.n	2506 <__aeabi_dmul+0x42a>
    246a:	075a      	lsls	r2, r3, #29
    246c:	d009      	beq.n	2482 <__aeabi_dmul+0x3a6>
    246e:	220f      	movs	r2, #15
    2470:	401a      	ands	r2, r3
    2472:	2a04      	cmp	r2, #4
    2474:	d005      	beq.n	2482 <__aeabi_dmul+0x3a6>
    2476:	1d1a      	adds	r2, r3, #4
    2478:	429a      	cmp	r2, r3
    247a:	419b      	sbcs	r3, r3
    247c:	425b      	negs	r3, r3
    247e:	18e4      	adds	r4, r4, r3
    2480:	0013      	movs	r3, r2
    2482:	01e2      	lsls	r2, r4, #7
    2484:	d504      	bpl.n	2490 <__aeabi_dmul+0x3b4>
    2486:	2080      	movs	r0, #128	; 0x80
    2488:	4a51      	ldr	r2, [pc, #324]	; (25d0 <__aeabi_dmul+0x4f4>)
    248a:	00c0      	lsls	r0, r0, #3
    248c:	4014      	ands	r4, r2
    248e:	4460      	add	r0, ip
    2490:	4a50      	ldr	r2, [pc, #320]	; (25d4 <__aeabi_dmul+0x4f8>)
    2492:	4290      	cmp	r0, r2
    2494:	dd00      	ble.n	2498 <__aeabi_dmul+0x3bc>
    2496:	e6e3      	b.n	2260 <__aeabi_dmul+0x184>
    2498:	2501      	movs	r5, #1
    249a:	08db      	lsrs	r3, r3, #3
    249c:	0762      	lsls	r2, r4, #29
    249e:	431a      	orrs	r2, r3
    24a0:	0264      	lsls	r4, r4, #9
    24a2:	9b01      	ldr	r3, [sp, #4]
    24a4:	4691      	mov	r9, r2
    24a6:	0b22      	lsrs	r2, r4, #12
    24a8:	0544      	lsls	r4, r0, #21
    24aa:	0d64      	lsrs	r4, r4, #21
    24ac:	401d      	ands	r5, r3
    24ae:	e67c      	b.n	21aa <__aeabi_dmul+0xce>
    24b0:	2280      	movs	r2, #128	; 0x80
    24b2:	4659      	mov	r1, fp
    24b4:	0312      	lsls	r2, r2, #12
    24b6:	4211      	tst	r1, r2
    24b8:	d008      	beq.n	24cc <__aeabi_dmul+0x3f0>
    24ba:	4214      	tst	r4, r2
    24bc:	d106      	bne.n	24cc <__aeabi_dmul+0x3f0>
    24be:	4322      	orrs	r2, r4
    24c0:	0312      	lsls	r2, r2, #12
    24c2:	0b12      	lsrs	r2, r2, #12
    24c4:	4645      	mov	r5, r8
    24c6:	4699      	mov	r9, r3
    24c8:	4c43      	ldr	r4, [pc, #268]	; (25d8 <__aeabi_dmul+0x4fc>)
    24ca:	e66e      	b.n	21aa <__aeabi_dmul+0xce>
    24cc:	465b      	mov	r3, fp
    24ce:	431a      	orrs	r2, r3
    24d0:	0312      	lsls	r2, r2, #12
    24d2:	0b12      	lsrs	r2, r2, #12
    24d4:	4c40      	ldr	r4, [pc, #256]	; (25d8 <__aeabi_dmul+0x4fc>)
    24d6:	e668      	b.n	21aa <__aeabi_dmul+0xce>
    24d8:	0003      	movs	r3, r0
    24da:	4654      	mov	r4, sl
    24dc:	3b28      	subs	r3, #40	; 0x28
    24de:	409c      	lsls	r4, r3
    24e0:	2300      	movs	r3, #0
    24e2:	e6b9      	b.n	2258 <__aeabi_dmul+0x17c>
    24e4:	f000 fbfc 	bl	2ce0 <__clzsi2>
    24e8:	3020      	adds	r0, #32
    24ea:	e6a6      	b.n	223a <__aeabi_dmul+0x15e>
    24ec:	0003      	movs	r3, r0
    24ee:	3b28      	subs	r3, #40	; 0x28
    24f0:	409f      	lsls	r7, r3
    24f2:	2300      	movs	r3, #0
    24f4:	46bb      	mov	fp, r7
    24f6:	4699      	mov	r9, r3
    24f8:	e68a      	b.n	2210 <__aeabi_dmul+0x134>
    24fa:	f000 fbf1 	bl	2ce0 <__clzsi2>
    24fe:	3020      	adds	r0, #32
    2500:	e674      	b.n	21ec <__aeabi_dmul+0x110>
    2502:	46b4      	mov	ip, r6
    2504:	e7ad      	b.n	2462 <__aeabi_dmul+0x386>
    2506:	2501      	movs	r5, #1
    2508:	1a2a      	subs	r2, r5, r0
    250a:	2a38      	cmp	r2, #56	; 0x38
    250c:	dd06      	ble.n	251c <__aeabi_dmul+0x440>
    250e:	9b01      	ldr	r3, [sp, #4]
    2510:	2400      	movs	r4, #0
    2512:	401d      	ands	r5, r3
    2514:	2300      	movs	r3, #0
    2516:	2200      	movs	r2, #0
    2518:	4699      	mov	r9, r3
    251a:	e646      	b.n	21aa <__aeabi_dmul+0xce>
    251c:	2a1f      	cmp	r2, #31
    251e:	dc21      	bgt.n	2564 <__aeabi_dmul+0x488>
    2520:	2520      	movs	r5, #32
    2522:	0020      	movs	r0, r4
    2524:	1aad      	subs	r5, r5, r2
    2526:	001e      	movs	r6, r3
    2528:	40ab      	lsls	r3, r5
    252a:	40a8      	lsls	r0, r5
    252c:	40d6      	lsrs	r6, r2
    252e:	1e5d      	subs	r5, r3, #1
    2530:	41ab      	sbcs	r3, r5
    2532:	4330      	orrs	r0, r6
    2534:	4318      	orrs	r0, r3
    2536:	40d4      	lsrs	r4, r2
    2538:	0743      	lsls	r3, r0, #29
    253a:	d009      	beq.n	2550 <__aeabi_dmul+0x474>
    253c:	230f      	movs	r3, #15
    253e:	4003      	ands	r3, r0
    2540:	2b04      	cmp	r3, #4
    2542:	d005      	beq.n	2550 <__aeabi_dmul+0x474>
    2544:	0003      	movs	r3, r0
    2546:	1d18      	adds	r0, r3, #4
    2548:	4298      	cmp	r0, r3
    254a:	419b      	sbcs	r3, r3
    254c:	425b      	negs	r3, r3
    254e:	18e4      	adds	r4, r4, r3
    2550:	0223      	lsls	r3, r4, #8
    2552:	d521      	bpl.n	2598 <__aeabi_dmul+0x4bc>
    2554:	2501      	movs	r5, #1
    2556:	9b01      	ldr	r3, [sp, #4]
    2558:	2401      	movs	r4, #1
    255a:	401d      	ands	r5, r3
    255c:	2300      	movs	r3, #0
    255e:	2200      	movs	r2, #0
    2560:	4699      	mov	r9, r3
    2562:	e622      	b.n	21aa <__aeabi_dmul+0xce>
    2564:	251f      	movs	r5, #31
    2566:	0021      	movs	r1, r4
    2568:	426d      	negs	r5, r5
    256a:	1a28      	subs	r0, r5, r0
    256c:	40c1      	lsrs	r1, r0
    256e:	0008      	movs	r0, r1
    2570:	2a20      	cmp	r2, #32
    2572:	d01d      	beq.n	25b0 <__aeabi_dmul+0x4d4>
    2574:	355f      	adds	r5, #95	; 0x5f
    2576:	1aaa      	subs	r2, r5, r2
    2578:	4094      	lsls	r4, r2
    257a:	4323      	orrs	r3, r4
    257c:	1e5c      	subs	r4, r3, #1
    257e:	41a3      	sbcs	r3, r4
    2580:	2507      	movs	r5, #7
    2582:	4303      	orrs	r3, r0
    2584:	401d      	ands	r5, r3
    2586:	2200      	movs	r2, #0
    2588:	2d00      	cmp	r5, #0
    258a:	d009      	beq.n	25a0 <__aeabi_dmul+0x4c4>
    258c:	220f      	movs	r2, #15
    258e:	2400      	movs	r4, #0
    2590:	401a      	ands	r2, r3
    2592:	0018      	movs	r0, r3
    2594:	2a04      	cmp	r2, #4
    2596:	d1d6      	bne.n	2546 <__aeabi_dmul+0x46a>
    2598:	0003      	movs	r3, r0
    259a:	0765      	lsls	r5, r4, #29
    259c:	0264      	lsls	r4, r4, #9
    259e:	0b22      	lsrs	r2, r4, #12
    25a0:	08db      	lsrs	r3, r3, #3
    25a2:	432b      	orrs	r3, r5
    25a4:	2501      	movs	r5, #1
    25a6:	4699      	mov	r9, r3
    25a8:	9b01      	ldr	r3, [sp, #4]
    25aa:	2400      	movs	r4, #0
    25ac:	401d      	ands	r5, r3
    25ae:	e5fc      	b.n	21aa <__aeabi_dmul+0xce>
    25b0:	2400      	movs	r4, #0
    25b2:	e7e2      	b.n	257a <__aeabi_dmul+0x49e>
    25b4:	2280      	movs	r2, #128	; 0x80
    25b6:	2501      	movs	r5, #1
    25b8:	0312      	lsls	r2, r2, #12
    25ba:	4322      	orrs	r2, r4
    25bc:	9901      	ldr	r1, [sp, #4]
    25be:	0312      	lsls	r2, r2, #12
    25c0:	0b12      	lsrs	r2, r2, #12
    25c2:	400d      	ands	r5, r1
    25c4:	4699      	mov	r9, r3
    25c6:	4c04      	ldr	r4, [pc, #16]	; (25d8 <__aeabi_dmul+0x4fc>)
    25c8:	e5ef      	b.n	21aa <__aeabi_dmul+0xce>
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	000003ff 	.word	0x000003ff
    25d0:	feffffff 	.word	0xfeffffff
    25d4:	000007fe 	.word	0x000007fe
    25d8:	000007ff 	.word	0x000007ff

000025dc <__aeabi_dsub>:
    25dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25de:	4646      	mov	r6, r8
    25e0:	46d6      	mov	lr, sl
    25e2:	464f      	mov	r7, r9
    25e4:	030c      	lsls	r4, r1, #12
    25e6:	b5c0      	push	{r6, r7, lr}
    25e8:	0fcd      	lsrs	r5, r1, #31
    25ea:	004e      	lsls	r6, r1, #1
    25ec:	0a61      	lsrs	r1, r4, #9
    25ee:	0f44      	lsrs	r4, r0, #29
    25f0:	430c      	orrs	r4, r1
    25f2:	00c1      	lsls	r1, r0, #3
    25f4:	0058      	lsls	r0, r3, #1
    25f6:	0d40      	lsrs	r0, r0, #21
    25f8:	4684      	mov	ip, r0
    25fa:	468a      	mov	sl, r1
    25fc:	000f      	movs	r7, r1
    25fe:	0319      	lsls	r1, r3, #12
    2600:	0f50      	lsrs	r0, r2, #29
    2602:	0a49      	lsrs	r1, r1, #9
    2604:	4301      	orrs	r1, r0
    2606:	48c6      	ldr	r0, [pc, #792]	; (2920 <__aeabi_dsub+0x344>)
    2608:	0d76      	lsrs	r6, r6, #21
    260a:	46a8      	mov	r8, r5
    260c:	0fdb      	lsrs	r3, r3, #31
    260e:	00d2      	lsls	r2, r2, #3
    2610:	4584      	cmp	ip, r0
    2612:	d100      	bne.n	2616 <__aeabi_dsub+0x3a>
    2614:	e0d8      	b.n	27c8 <__aeabi_dsub+0x1ec>
    2616:	2001      	movs	r0, #1
    2618:	4043      	eors	r3, r0
    261a:	42ab      	cmp	r3, r5
    261c:	d100      	bne.n	2620 <__aeabi_dsub+0x44>
    261e:	e0a6      	b.n	276e <__aeabi_dsub+0x192>
    2620:	4660      	mov	r0, ip
    2622:	1a35      	subs	r5, r6, r0
    2624:	2d00      	cmp	r5, #0
    2626:	dc00      	bgt.n	262a <__aeabi_dsub+0x4e>
    2628:	e105      	b.n	2836 <__aeabi_dsub+0x25a>
    262a:	2800      	cmp	r0, #0
    262c:	d110      	bne.n	2650 <__aeabi_dsub+0x74>
    262e:	000b      	movs	r3, r1
    2630:	4313      	orrs	r3, r2
    2632:	d100      	bne.n	2636 <__aeabi_dsub+0x5a>
    2634:	e0d7      	b.n	27e6 <__aeabi_dsub+0x20a>
    2636:	1e6b      	subs	r3, r5, #1
    2638:	2b00      	cmp	r3, #0
    263a:	d000      	beq.n	263e <__aeabi_dsub+0x62>
    263c:	e14b      	b.n	28d6 <__aeabi_dsub+0x2fa>
    263e:	4653      	mov	r3, sl
    2640:	1a9f      	subs	r7, r3, r2
    2642:	45ba      	cmp	sl, r7
    2644:	4180      	sbcs	r0, r0
    2646:	1a64      	subs	r4, r4, r1
    2648:	4240      	negs	r0, r0
    264a:	1a24      	subs	r4, r4, r0
    264c:	2601      	movs	r6, #1
    264e:	e01e      	b.n	268e <__aeabi_dsub+0xb2>
    2650:	4bb3      	ldr	r3, [pc, #716]	; (2920 <__aeabi_dsub+0x344>)
    2652:	429e      	cmp	r6, r3
    2654:	d048      	beq.n	26e8 <__aeabi_dsub+0x10c>
    2656:	2380      	movs	r3, #128	; 0x80
    2658:	041b      	lsls	r3, r3, #16
    265a:	4319      	orrs	r1, r3
    265c:	2d38      	cmp	r5, #56	; 0x38
    265e:	dd00      	ble.n	2662 <__aeabi_dsub+0x86>
    2660:	e119      	b.n	2896 <__aeabi_dsub+0x2ba>
    2662:	2d1f      	cmp	r5, #31
    2664:	dd00      	ble.n	2668 <__aeabi_dsub+0x8c>
    2666:	e14c      	b.n	2902 <__aeabi_dsub+0x326>
    2668:	2320      	movs	r3, #32
    266a:	000f      	movs	r7, r1
    266c:	1b5b      	subs	r3, r3, r5
    266e:	0010      	movs	r0, r2
    2670:	409a      	lsls	r2, r3
    2672:	409f      	lsls	r7, r3
    2674:	40e8      	lsrs	r0, r5
    2676:	1e53      	subs	r3, r2, #1
    2678:	419a      	sbcs	r2, r3
    267a:	40e9      	lsrs	r1, r5
    267c:	4307      	orrs	r7, r0
    267e:	4317      	orrs	r7, r2
    2680:	4653      	mov	r3, sl
    2682:	1bdf      	subs	r7, r3, r7
    2684:	1a61      	subs	r1, r4, r1
    2686:	45ba      	cmp	sl, r7
    2688:	41a4      	sbcs	r4, r4
    268a:	4264      	negs	r4, r4
    268c:	1b0c      	subs	r4, r1, r4
    268e:	0223      	lsls	r3, r4, #8
    2690:	d400      	bmi.n	2694 <__aeabi_dsub+0xb8>
    2692:	e0c5      	b.n	2820 <__aeabi_dsub+0x244>
    2694:	0264      	lsls	r4, r4, #9
    2696:	0a65      	lsrs	r5, r4, #9
    2698:	2d00      	cmp	r5, #0
    269a:	d100      	bne.n	269e <__aeabi_dsub+0xc2>
    269c:	e0f6      	b.n	288c <__aeabi_dsub+0x2b0>
    269e:	0028      	movs	r0, r5
    26a0:	f000 fb1e 	bl	2ce0 <__clzsi2>
    26a4:	0003      	movs	r3, r0
    26a6:	3b08      	subs	r3, #8
    26a8:	2b1f      	cmp	r3, #31
    26aa:	dd00      	ble.n	26ae <__aeabi_dsub+0xd2>
    26ac:	e0e9      	b.n	2882 <__aeabi_dsub+0x2a6>
    26ae:	2220      	movs	r2, #32
    26b0:	003c      	movs	r4, r7
    26b2:	1ad2      	subs	r2, r2, r3
    26b4:	409d      	lsls	r5, r3
    26b6:	40d4      	lsrs	r4, r2
    26b8:	409f      	lsls	r7, r3
    26ba:	4325      	orrs	r5, r4
    26bc:	429e      	cmp	r6, r3
    26be:	dd00      	ble.n	26c2 <__aeabi_dsub+0xe6>
    26c0:	e0db      	b.n	287a <__aeabi_dsub+0x29e>
    26c2:	1b9e      	subs	r6, r3, r6
    26c4:	1c73      	adds	r3, r6, #1
    26c6:	2b1f      	cmp	r3, #31
    26c8:	dd00      	ble.n	26cc <__aeabi_dsub+0xf0>
    26ca:	e10a      	b.n	28e2 <__aeabi_dsub+0x306>
    26cc:	2220      	movs	r2, #32
    26ce:	0038      	movs	r0, r7
    26d0:	1ad2      	subs	r2, r2, r3
    26d2:	0029      	movs	r1, r5
    26d4:	4097      	lsls	r7, r2
    26d6:	002c      	movs	r4, r5
    26d8:	4091      	lsls	r1, r2
    26da:	40d8      	lsrs	r0, r3
    26dc:	1e7a      	subs	r2, r7, #1
    26de:	4197      	sbcs	r7, r2
    26e0:	40dc      	lsrs	r4, r3
    26e2:	2600      	movs	r6, #0
    26e4:	4301      	orrs	r1, r0
    26e6:	430f      	orrs	r7, r1
    26e8:	077b      	lsls	r3, r7, #29
    26ea:	d009      	beq.n	2700 <__aeabi_dsub+0x124>
    26ec:	230f      	movs	r3, #15
    26ee:	403b      	ands	r3, r7
    26f0:	2b04      	cmp	r3, #4
    26f2:	d005      	beq.n	2700 <__aeabi_dsub+0x124>
    26f4:	1d3b      	adds	r3, r7, #4
    26f6:	42bb      	cmp	r3, r7
    26f8:	41bf      	sbcs	r7, r7
    26fa:	427f      	negs	r7, r7
    26fc:	19e4      	adds	r4, r4, r7
    26fe:	001f      	movs	r7, r3
    2700:	0223      	lsls	r3, r4, #8
    2702:	d525      	bpl.n	2750 <__aeabi_dsub+0x174>
    2704:	4b86      	ldr	r3, [pc, #536]	; (2920 <__aeabi_dsub+0x344>)
    2706:	3601      	adds	r6, #1
    2708:	429e      	cmp	r6, r3
    270a:	d100      	bne.n	270e <__aeabi_dsub+0x132>
    270c:	e0af      	b.n	286e <__aeabi_dsub+0x292>
    270e:	4b85      	ldr	r3, [pc, #532]	; (2924 <__aeabi_dsub+0x348>)
    2710:	2501      	movs	r5, #1
    2712:	401c      	ands	r4, r3
    2714:	4643      	mov	r3, r8
    2716:	0762      	lsls	r2, r4, #29
    2718:	08ff      	lsrs	r7, r7, #3
    271a:	0264      	lsls	r4, r4, #9
    271c:	0576      	lsls	r6, r6, #21
    271e:	4317      	orrs	r7, r2
    2720:	0b24      	lsrs	r4, r4, #12
    2722:	0d76      	lsrs	r6, r6, #21
    2724:	401d      	ands	r5, r3
    2726:	2100      	movs	r1, #0
    2728:	0324      	lsls	r4, r4, #12
    272a:	0b23      	lsrs	r3, r4, #12
    272c:	0d0c      	lsrs	r4, r1, #20
    272e:	4a7e      	ldr	r2, [pc, #504]	; (2928 <__aeabi_dsub+0x34c>)
    2730:	0524      	lsls	r4, r4, #20
    2732:	431c      	orrs	r4, r3
    2734:	4014      	ands	r4, r2
    2736:	0533      	lsls	r3, r6, #20
    2738:	4323      	orrs	r3, r4
    273a:	005b      	lsls	r3, r3, #1
    273c:	07ed      	lsls	r5, r5, #31
    273e:	085b      	lsrs	r3, r3, #1
    2740:	432b      	orrs	r3, r5
    2742:	0038      	movs	r0, r7
    2744:	0019      	movs	r1, r3
    2746:	bc1c      	pop	{r2, r3, r4}
    2748:	4690      	mov	r8, r2
    274a:	4699      	mov	r9, r3
    274c:	46a2      	mov	sl, r4
    274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2750:	2501      	movs	r5, #1
    2752:	4643      	mov	r3, r8
    2754:	0762      	lsls	r2, r4, #29
    2756:	08ff      	lsrs	r7, r7, #3
    2758:	4317      	orrs	r7, r2
    275a:	08e4      	lsrs	r4, r4, #3
    275c:	401d      	ands	r5, r3
    275e:	4b70      	ldr	r3, [pc, #448]	; (2920 <__aeabi_dsub+0x344>)
    2760:	429e      	cmp	r6, r3
    2762:	d036      	beq.n	27d2 <__aeabi_dsub+0x1f6>
    2764:	0324      	lsls	r4, r4, #12
    2766:	0576      	lsls	r6, r6, #21
    2768:	0b24      	lsrs	r4, r4, #12
    276a:	0d76      	lsrs	r6, r6, #21
    276c:	e7db      	b.n	2726 <__aeabi_dsub+0x14a>
    276e:	4663      	mov	r3, ip
    2770:	1af3      	subs	r3, r6, r3
    2772:	2b00      	cmp	r3, #0
    2774:	dc00      	bgt.n	2778 <__aeabi_dsub+0x19c>
    2776:	e094      	b.n	28a2 <__aeabi_dsub+0x2c6>
    2778:	4660      	mov	r0, ip
    277a:	2800      	cmp	r0, #0
    277c:	d035      	beq.n	27ea <__aeabi_dsub+0x20e>
    277e:	4868      	ldr	r0, [pc, #416]	; (2920 <__aeabi_dsub+0x344>)
    2780:	4286      	cmp	r6, r0
    2782:	d0b1      	beq.n	26e8 <__aeabi_dsub+0x10c>
    2784:	2780      	movs	r7, #128	; 0x80
    2786:	043f      	lsls	r7, r7, #16
    2788:	4339      	orrs	r1, r7
    278a:	2b38      	cmp	r3, #56	; 0x38
    278c:	dc00      	bgt.n	2790 <__aeabi_dsub+0x1b4>
    278e:	e0fd      	b.n	298c <__aeabi_dsub+0x3b0>
    2790:	430a      	orrs	r2, r1
    2792:	0017      	movs	r7, r2
    2794:	2100      	movs	r1, #0
    2796:	1e7a      	subs	r2, r7, #1
    2798:	4197      	sbcs	r7, r2
    279a:	4457      	add	r7, sl
    279c:	4557      	cmp	r7, sl
    279e:	4180      	sbcs	r0, r0
    27a0:	1909      	adds	r1, r1, r4
    27a2:	4244      	negs	r4, r0
    27a4:	190c      	adds	r4, r1, r4
    27a6:	0223      	lsls	r3, r4, #8
    27a8:	d53a      	bpl.n	2820 <__aeabi_dsub+0x244>
    27aa:	4b5d      	ldr	r3, [pc, #372]	; (2920 <__aeabi_dsub+0x344>)
    27ac:	3601      	adds	r6, #1
    27ae:	429e      	cmp	r6, r3
    27b0:	d100      	bne.n	27b4 <__aeabi_dsub+0x1d8>
    27b2:	e14b      	b.n	2a4c <__aeabi_dsub+0x470>
    27b4:	2201      	movs	r2, #1
    27b6:	4b5b      	ldr	r3, [pc, #364]	; (2924 <__aeabi_dsub+0x348>)
    27b8:	401c      	ands	r4, r3
    27ba:	087b      	lsrs	r3, r7, #1
    27bc:	4017      	ands	r7, r2
    27be:	431f      	orrs	r7, r3
    27c0:	07e2      	lsls	r2, r4, #31
    27c2:	4317      	orrs	r7, r2
    27c4:	0864      	lsrs	r4, r4, #1
    27c6:	e78f      	b.n	26e8 <__aeabi_dsub+0x10c>
    27c8:	0008      	movs	r0, r1
    27ca:	4310      	orrs	r0, r2
    27cc:	d000      	beq.n	27d0 <__aeabi_dsub+0x1f4>
    27ce:	e724      	b.n	261a <__aeabi_dsub+0x3e>
    27d0:	e721      	b.n	2616 <__aeabi_dsub+0x3a>
    27d2:	0023      	movs	r3, r4
    27d4:	433b      	orrs	r3, r7
    27d6:	d100      	bne.n	27da <__aeabi_dsub+0x1fe>
    27d8:	e1b9      	b.n	2b4e <__aeabi_dsub+0x572>
    27da:	2280      	movs	r2, #128	; 0x80
    27dc:	0312      	lsls	r2, r2, #12
    27de:	4314      	orrs	r4, r2
    27e0:	0324      	lsls	r4, r4, #12
    27e2:	0b24      	lsrs	r4, r4, #12
    27e4:	e79f      	b.n	2726 <__aeabi_dsub+0x14a>
    27e6:	002e      	movs	r6, r5
    27e8:	e77e      	b.n	26e8 <__aeabi_dsub+0x10c>
    27ea:	0008      	movs	r0, r1
    27ec:	4310      	orrs	r0, r2
    27ee:	d100      	bne.n	27f2 <__aeabi_dsub+0x216>
    27f0:	e0ca      	b.n	2988 <__aeabi_dsub+0x3ac>
    27f2:	1e58      	subs	r0, r3, #1
    27f4:	4684      	mov	ip, r0
    27f6:	2800      	cmp	r0, #0
    27f8:	d000      	beq.n	27fc <__aeabi_dsub+0x220>
    27fa:	e0e7      	b.n	29cc <__aeabi_dsub+0x3f0>
    27fc:	4452      	add	r2, sl
    27fe:	4552      	cmp	r2, sl
    2800:	4180      	sbcs	r0, r0
    2802:	1864      	adds	r4, r4, r1
    2804:	4240      	negs	r0, r0
    2806:	1824      	adds	r4, r4, r0
    2808:	0017      	movs	r7, r2
    280a:	2601      	movs	r6, #1
    280c:	0223      	lsls	r3, r4, #8
    280e:	d507      	bpl.n	2820 <__aeabi_dsub+0x244>
    2810:	2602      	movs	r6, #2
    2812:	e7cf      	b.n	27b4 <__aeabi_dsub+0x1d8>
    2814:	4664      	mov	r4, ip
    2816:	432c      	orrs	r4, r5
    2818:	d100      	bne.n	281c <__aeabi_dsub+0x240>
    281a:	e1b3      	b.n	2b84 <__aeabi_dsub+0x5a8>
    281c:	002c      	movs	r4, r5
    281e:	4667      	mov	r7, ip
    2820:	077b      	lsls	r3, r7, #29
    2822:	d000      	beq.n	2826 <__aeabi_dsub+0x24a>
    2824:	e762      	b.n	26ec <__aeabi_dsub+0x110>
    2826:	0763      	lsls	r3, r4, #29
    2828:	08ff      	lsrs	r7, r7, #3
    282a:	431f      	orrs	r7, r3
    282c:	2501      	movs	r5, #1
    282e:	4643      	mov	r3, r8
    2830:	08e4      	lsrs	r4, r4, #3
    2832:	401d      	ands	r5, r3
    2834:	e793      	b.n	275e <__aeabi_dsub+0x182>
    2836:	2d00      	cmp	r5, #0
    2838:	d178      	bne.n	292c <__aeabi_dsub+0x350>
    283a:	1c75      	adds	r5, r6, #1
    283c:	056d      	lsls	r5, r5, #21
    283e:	0d6d      	lsrs	r5, r5, #21
    2840:	2d01      	cmp	r5, #1
    2842:	dc00      	bgt.n	2846 <__aeabi_dsub+0x26a>
    2844:	e0f2      	b.n	2a2c <__aeabi_dsub+0x450>
    2846:	4650      	mov	r0, sl
    2848:	1a80      	subs	r0, r0, r2
    284a:	4582      	cmp	sl, r0
    284c:	41bf      	sbcs	r7, r7
    284e:	1a65      	subs	r5, r4, r1
    2850:	427f      	negs	r7, r7
    2852:	1bed      	subs	r5, r5, r7
    2854:	4684      	mov	ip, r0
    2856:	0228      	lsls	r0, r5, #8
    2858:	d400      	bmi.n	285c <__aeabi_dsub+0x280>
    285a:	e08c      	b.n	2976 <__aeabi_dsub+0x39a>
    285c:	4650      	mov	r0, sl
    285e:	1a17      	subs	r7, r2, r0
    2860:	42ba      	cmp	r2, r7
    2862:	4192      	sbcs	r2, r2
    2864:	1b0c      	subs	r4, r1, r4
    2866:	4255      	negs	r5, r2
    2868:	1b65      	subs	r5, r4, r5
    286a:	4698      	mov	r8, r3
    286c:	e714      	b.n	2698 <__aeabi_dsub+0xbc>
    286e:	2501      	movs	r5, #1
    2870:	4643      	mov	r3, r8
    2872:	2400      	movs	r4, #0
    2874:	401d      	ands	r5, r3
    2876:	2700      	movs	r7, #0
    2878:	e755      	b.n	2726 <__aeabi_dsub+0x14a>
    287a:	4c2a      	ldr	r4, [pc, #168]	; (2924 <__aeabi_dsub+0x348>)
    287c:	1af6      	subs	r6, r6, r3
    287e:	402c      	ands	r4, r5
    2880:	e732      	b.n	26e8 <__aeabi_dsub+0x10c>
    2882:	003d      	movs	r5, r7
    2884:	3828      	subs	r0, #40	; 0x28
    2886:	4085      	lsls	r5, r0
    2888:	2700      	movs	r7, #0
    288a:	e717      	b.n	26bc <__aeabi_dsub+0xe0>
    288c:	0038      	movs	r0, r7
    288e:	f000 fa27 	bl	2ce0 <__clzsi2>
    2892:	3020      	adds	r0, #32
    2894:	e706      	b.n	26a4 <__aeabi_dsub+0xc8>
    2896:	430a      	orrs	r2, r1
    2898:	0017      	movs	r7, r2
    289a:	2100      	movs	r1, #0
    289c:	1e7a      	subs	r2, r7, #1
    289e:	4197      	sbcs	r7, r2
    28a0:	e6ee      	b.n	2680 <__aeabi_dsub+0xa4>
    28a2:	2b00      	cmp	r3, #0
    28a4:	d000      	beq.n	28a8 <__aeabi_dsub+0x2cc>
    28a6:	e0e5      	b.n	2a74 <__aeabi_dsub+0x498>
    28a8:	1c73      	adds	r3, r6, #1
    28aa:	469c      	mov	ip, r3
    28ac:	055b      	lsls	r3, r3, #21
    28ae:	0d5b      	lsrs	r3, r3, #21
    28b0:	2b01      	cmp	r3, #1
    28b2:	dc00      	bgt.n	28b6 <__aeabi_dsub+0x2da>
    28b4:	e09f      	b.n	29f6 <__aeabi_dsub+0x41a>
    28b6:	4b1a      	ldr	r3, [pc, #104]	; (2920 <__aeabi_dsub+0x344>)
    28b8:	459c      	cmp	ip, r3
    28ba:	d100      	bne.n	28be <__aeabi_dsub+0x2e2>
    28bc:	e0c5      	b.n	2a4a <__aeabi_dsub+0x46e>
    28be:	4452      	add	r2, sl
    28c0:	4552      	cmp	r2, sl
    28c2:	4180      	sbcs	r0, r0
    28c4:	1864      	adds	r4, r4, r1
    28c6:	4240      	negs	r0, r0
    28c8:	1824      	adds	r4, r4, r0
    28ca:	07e7      	lsls	r7, r4, #31
    28cc:	0852      	lsrs	r2, r2, #1
    28ce:	4317      	orrs	r7, r2
    28d0:	0864      	lsrs	r4, r4, #1
    28d2:	4666      	mov	r6, ip
    28d4:	e708      	b.n	26e8 <__aeabi_dsub+0x10c>
    28d6:	4812      	ldr	r0, [pc, #72]	; (2920 <__aeabi_dsub+0x344>)
    28d8:	4285      	cmp	r5, r0
    28da:	d100      	bne.n	28de <__aeabi_dsub+0x302>
    28dc:	e085      	b.n	29ea <__aeabi_dsub+0x40e>
    28de:	001d      	movs	r5, r3
    28e0:	e6bc      	b.n	265c <__aeabi_dsub+0x80>
    28e2:	0029      	movs	r1, r5
    28e4:	3e1f      	subs	r6, #31
    28e6:	40f1      	lsrs	r1, r6
    28e8:	2b20      	cmp	r3, #32
    28ea:	d100      	bne.n	28ee <__aeabi_dsub+0x312>
    28ec:	e07f      	b.n	29ee <__aeabi_dsub+0x412>
    28ee:	2240      	movs	r2, #64	; 0x40
    28f0:	1ad3      	subs	r3, r2, r3
    28f2:	409d      	lsls	r5, r3
    28f4:	432f      	orrs	r7, r5
    28f6:	1e7d      	subs	r5, r7, #1
    28f8:	41af      	sbcs	r7, r5
    28fa:	2400      	movs	r4, #0
    28fc:	430f      	orrs	r7, r1
    28fe:	2600      	movs	r6, #0
    2900:	e78e      	b.n	2820 <__aeabi_dsub+0x244>
    2902:	002b      	movs	r3, r5
    2904:	000f      	movs	r7, r1
    2906:	3b20      	subs	r3, #32
    2908:	40df      	lsrs	r7, r3
    290a:	2d20      	cmp	r5, #32
    290c:	d071      	beq.n	29f2 <__aeabi_dsub+0x416>
    290e:	2340      	movs	r3, #64	; 0x40
    2910:	1b5d      	subs	r5, r3, r5
    2912:	40a9      	lsls	r1, r5
    2914:	430a      	orrs	r2, r1
    2916:	1e51      	subs	r1, r2, #1
    2918:	418a      	sbcs	r2, r1
    291a:	2100      	movs	r1, #0
    291c:	4317      	orrs	r7, r2
    291e:	e6af      	b.n	2680 <__aeabi_dsub+0xa4>
    2920:	000007ff 	.word	0x000007ff
    2924:	ff7fffff 	.word	0xff7fffff
    2928:	800fffff 	.word	0x800fffff
    292c:	2e00      	cmp	r6, #0
    292e:	d03e      	beq.n	29ae <__aeabi_dsub+0x3d2>
    2930:	4eb3      	ldr	r6, [pc, #716]	; (2c00 <__aeabi_dsub+0x624>)
    2932:	45b4      	cmp	ip, r6
    2934:	d045      	beq.n	29c2 <__aeabi_dsub+0x3e6>
    2936:	2680      	movs	r6, #128	; 0x80
    2938:	0436      	lsls	r6, r6, #16
    293a:	426d      	negs	r5, r5
    293c:	4334      	orrs	r4, r6
    293e:	2d38      	cmp	r5, #56	; 0x38
    2940:	dd00      	ble.n	2944 <__aeabi_dsub+0x368>
    2942:	e0a8      	b.n	2a96 <__aeabi_dsub+0x4ba>
    2944:	2d1f      	cmp	r5, #31
    2946:	dd00      	ble.n	294a <__aeabi_dsub+0x36e>
    2948:	e11f      	b.n	2b8a <__aeabi_dsub+0x5ae>
    294a:	2620      	movs	r6, #32
    294c:	0027      	movs	r7, r4
    294e:	4650      	mov	r0, sl
    2950:	1b76      	subs	r6, r6, r5
    2952:	40b7      	lsls	r7, r6
    2954:	40e8      	lsrs	r0, r5
    2956:	4307      	orrs	r7, r0
    2958:	4650      	mov	r0, sl
    295a:	40b0      	lsls	r0, r6
    295c:	1e46      	subs	r6, r0, #1
    295e:	41b0      	sbcs	r0, r6
    2960:	40ec      	lsrs	r4, r5
    2962:	4338      	orrs	r0, r7
    2964:	1a17      	subs	r7, r2, r0
    2966:	42ba      	cmp	r2, r7
    2968:	4192      	sbcs	r2, r2
    296a:	1b0c      	subs	r4, r1, r4
    296c:	4252      	negs	r2, r2
    296e:	1aa4      	subs	r4, r4, r2
    2970:	4666      	mov	r6, ip
    2972:	4698      	mov	r8, r3
    2974:	e68b      	b.n	268e <__aeabi_dsub+0xb2>
    2976:	4664      	mov	r4, ip
    2978:	4667      	mov	r7, ip
    297a:	432c      	orrs	r4, r5
    297c:	d000      	beq.n	2980 <__aeabi_dsub+0x3a4>
    297e:	e68b      	b.n	2698 <__aeabi_dsub+0xbc>
    2980:	2500      	movs	r5, #0
    2982:	2600      	movs	r6, #0
    2984:	2700      	movs	r7, #0
    2986:	e6ea      	b.n	275e <__aeabi_dsub+0x182>
    2988:	001e      	movs	r6, r3
    298a:	e6ad      	b.n	26e8 <__aeabi_dsub+0x10c>
    298c:	2b1f      	cmp	r3, #31
    298e:	dc60      	bgt.n	2a52 <__aeabi_dsub+0x476>
    2990:	2720      	movs	r7, #32
    2992:	1af8      	subs	r0, r7, r3
    2994:	000f      	movs	r7, r1
    2996:	4684      	mov	ip, r0
    2998:	4087      	lsls	r7, r0
    299a:	0010      	movs	r0, r2
    299c:	40d8      	lsrs	r0, r3
    299e:	4307      	orrs	r7, r0
    29a0:	4660      	mov	r0, ip
    29a2:	4082      	lsls	r2, r0
    29a4:	1e50      	subs	r0, r2, #1
    29a6:	4182      	sbcs	r2, r0
    29a8:	40d9      	lsrs	r1, r3
    29aa:	4317      	orrs	r7, r2
    29ac:	e6f5      	b.n	279a <__aeabi_dsub+0x1be>
    29ae:	0026      	movs	r6, r4
    29b0:	4650      	mov	r0, sl
    29b2:	4306      	orrs	r6, r0
    29b4:	d005      	beq.n	29c2 <__aeabi_dsub+0x3e6>
    29b6:	43ed      	mvns	r5, r5
    29b8:	2d00      	cmp	r5, #0
    29ba:	d0d3      	beq.n	2964 <__aeabi_dsub+0x388>
    29bc:	4e90      	ldr	r6, [pc, #576]	; (2c00 <__aeabi_dsub+0x624>)
    29be:	45b4      	cmp	ip, r6
    29c0:	d1bd      	bne.n	293e <__aeabi_dsub+0x362>
    29c2:	000c      	movs	r4, r1
    29c4:	0017      	movs	r7, r2
    29c6:	4666      	mov	r6, ip
    29c8:	4698      	mov	r8, r3
    29ca:	e68d      	b.n	26e8 <__aeabi_dsub+0x10c>
    29cc:	488c      	ldr	r0, [pc, #560]	; (2c00 <__aeabi_dsub+0x624>)
    29ce:	4283      	cmp	r3, r0
    29d0:	d00b      	beq.n	29ea <__aeabi_dsub+0x40e>
    29d2:	4663      	mov	r3, ip
    29d4:	e6d9      	b.n	278a <__aeabi_dsub+0x1ae>
    29d6:	2d00      	cmp	r5, #0
    29d8:	d000      	beq.n	29dc <__aeabi_dsub+0x400>
    29da:	e096      	b.n	2b0a <__aeabi_dsub+0x52e>
    29dc:	0008      	movs	r0, r1
    29de:	4310      	orrs	r0, r2
    29e0:	d100      	bne.n	29e4 <__aeabi_dsub+0x408>
    29e2:	e0e2      	b.n	2baa <__aeabi_dsub+0x5ce>
    29e4:	000c      	movs	r4, r1
    29e6:	0017      	movs	r7, r2
    29e8:	4698      	mov	r8, r3
    29ea:	4e85      	ldr	r6, [pc, #532]	; (2c00 <__aeabi_dsub+0x624>)
    29ec:	e67c      	b.n	26e8 <__aeabi_dsub+0x10c>
    29ee:	2500      	movs	r5, #0
    29f0:	e780      	b.n	28f4 <__aeabi_dsub+0x318>
    29f2:	2100      	movs	r1, #0
    29f4:	e78e      	b.n	2914 <__aeabi_dsub+0x338>
    29f6:	0023      	movs	r3, r4
    29f8:	4650      	mov	r0, sl
    29fa:	4303      	orrs	r3, r0
    29fc:	2e00      	cmp	r6, #0
    29fe:	d000      	beq.n	2a02 <__aeabi_dsub+0x426>
    2a00:	e0a8      	b.n	2b54 <__aeabi_dsub+0x578>
    2a02:	2b00      	cmp	r3, #0
    2a04:	d100      	bne.n	2a08 <__aeabi_dsub+0x42c>
    2a06:	e0de      	b.n	2bc6 <__aeabi_dsub+0x5ea>
    2a08:	000b      	movs	r3, r1
    2a0a:	4313      	orrs	r3, r2
    2a0c:	d100      	bne.n	2a10 <__aeabi_dsub+0x434>
    2a0e:	e66b      	b.n	26e8 <__aeabi_dsub+0x10c>
    2a10:	4452      	add	r2, sl
    2a12:	4552      	cmp	r2, sl
    2a14:	4180      	sbcs	r0, r0
    2a16:	1864      	adds	r4, r4, r1
    2a18:	4240      	negs	r0, r0
    2a1a:	1824      	adds	r4, r4, r0
    2a1c:	0017      	movs	r7, r2
    2a1e:	0223      	lsls	r3, r4, #8
    2a20:	d400      	bmi.n	2a24 <__aeabi_dsub+0x448>
    2a22:	e6fd      	b.n	2820 <__aeabi_dsub+0x244>
    2a24:	4b77      	ldr	r3, [pc, #476]	; (2c04 <__aeabi_dsub+0x628>)
    2a26:	4666      	mov	r6, ip
    2a28:	401c      	ands	r4, r3
    2a2a:	e65d      	b.n	26e8 <__aeabi_dsub+0x10c>
    2a2c:	0025      	movs	r5, r4
    2a2e:	4650      	mov	r0, sl
    2a30:	4305      	orrs	r5, r0
    2a32:	2e00      	cmp	r6, #0
    2a34:	d1cf      	bne.n	29d6 <__aeabi_dsub+0x3fa>
    2a36:	2d00      	cmp	r5, #0
    2a38:	d14f      	bne.n	2ada <__aeabi_dsub+0x4fe>
    2a3a:	000c      	movs	r4, r1
    2a3c:	4314      	orrs	r4, r2
    2a3e:	d100      	bne.n	2a42 <__aeabi_dsub+0x466>
    2a40:	e0a0      	b.n	2b84 <__aeabi_dsub+0x5a8>
    2a42:	000c      	movs	r4, r1
    2a44:	0017      	movs	r7, r2
    2a46:	4698      	mov	r8, r3
    2a48:	e64e      	b.n	26e8 <__aeabi_dsub+0x10c>
    2a4a:	4666      	mov	r6, ip
    2a4c:	2400      	movs	r4, #0
    2a4e:	2700      	movs	r7, #0
    2a50:	e685      	b.n	275e <__aeabi_dsub+0x182>
    2a52:	001f      	movs	r7, r3
    2a54:	0008      	movs	r0, r1
    2a56:	3f20      	subs	r7, #32
    2a58:	40f8      	lsrs	r0, r7
    2a5a:	0007      	movs	r7, r0
    2a5c:	2b20      	cmp	r3, #32
    2a5e:	d100      	bne.n	2a62 <__aeabi_dsub+0x486>
    2a60:	e08e      	b.n	2b80 <__aeabi_dsub+0x5a4>
    2a62:	2040      	movs	r0, #64	; 0x40
    2a64:	1ac3      	subs	r3, r0, r3
    2a66:	4099      	lsls	r1, r3
    2a68:	430a      	orrs	r2, r1
    2a6a:	1e51      	subs	r1, r2, #1
    2a6c:	418a      	sbcs	r2, r1
    2a6e:	2100      	movs	r1, #0
    2a70:	4317      	orrs	r7, r2
    2a72:	e692      	b.n	279a <__aeabi_dsub+0x1be>
    2a74:	2e00      	cmp	r6, #0
    2a76:	d114      	bne.n	2aa2 <__aeabi_dsub+0x4c6>
    2a78:	0026      	movs	r6, r4
    2a7a:	4650      	mov	r0, sl
    2a7c:	4306      	orrs	r6, r0
    2a7e:	d062      	beq.n	2b46 <__aeabi_dsub+0x56a>
    2a80:	43db      	mvns	r3, r3
    2a82:	2b00      	cmp	r3, #0
    2a84:	d15c      	bne.n	2b40 <__aeabi_dsub+0x564>
    2a86:	1887      	adds	r7, r0, r2
    2a88:	4297      	cmp	r7, r2
    2a8a:	4192      	sbcs	r2, r2
    2a8c:	1864      	adds	r4, r4, r1
    2a8e:	4252      	negs	r2, r2
    2a90:	18a4      	adds	r4, r4, r2
    2a92:	4666      	mov	r6, ip
    2a94:	e687      	b.n	27a6 <__aeabi_dsub+0x1ca>
    2a96:	4650      	mov	r0, sl
    2a98:	4320      	orrs	r0, r4
    2a9a:	1e44      	subs	r4, r0, #1
    2a9c:	41a0      	sbcs	r0, r4
    2a9e:	2400      	movs	r4, #0
    2aa0:	e760      	b.n	2964 <__aeabi_dsub+0x388>
    2aa2:	4e57      	ldr	r6, [pc, #348]	; (2c00 <__aeabi_dsub+0x624>)
    2aa4:	45b4      	cmp	ip, r6
    2aa6:	d04e      	beq.n	2b46 <__aeabi_dsub+0x56a>
    2aa8:	2680      	movs	r6, #128	; 0x80
    2aaa:	0436      	lsls	r6, r6, #16
    2aac:	425b      	negs	r3, r3
    2aae:	4334      	orrs	r4, r6
    2ab0:	2b38      	cmp	r3, #56	; 0x38
    2ab2:	dd00      	ble.n	2ab6 <__aeabi_dsub+0x4da>
    2ab4:	e07f      	b.n	2bb6 <__aeabi_dsub+0x5da>
    2ab6:	2b1f      	cmp	r3, #31
    2ab8:	dd00      	ble.n	2abc <__aeabi_dsub+0x4e0>
    2aba:	e08b      	b.n	2bd4 <__aeabi_dsub+0x5f8>
    2abc:	2620      	movs	r6, #32
    2abe:	0027      	movs	r7, r4
    2ac0:	4650      	mov	r0, sl
    2ac2:	1af6      	subs	r6, r6, r3
    2ac4:	40b7      	lsls	r7, r6
    2ac6:	40d8      	lsrs	r0, r3
    2ac8:	4307      	orrs	r7, r0
    2aca:	4650      	mov	r0, sl
    2acc:	40b0      	lsls	r0, r6
    2ace:	1e46      	subs	r6, r0, #1
    2ad0:	41b0      	sbcs	r0, r6
    2ad2:	4307      	orrs	r7, r0
    2ad4:	40dc      	lsrs	r4, r3
    2ad6:	18bf      	adds	r7, r7, r2
    2ad8:	e7d6      	b.n	2a88 <__aeabi_dsub+0x4ac>
    2ada:	000d      	movs	r5, r1
    2adc:	4315      	orrs	r5, r2
    2ade:	d100      	bne.n	2ae2 <__aeabi_dsub+0x506>
    2ae0:	e602      	b.n	26e8 <__aeabi_dsub+0x10c>
    2ae2:	4650      	mov	r0, sl
    2ae4:	1a80      	subs	r0, r0, r2
    2ae6:	4582      	cmp	sl, r0
    2ae8:	41bf      	sbcs	r7, r7
    2aea:	1a65      	subs	r5, r4, r1
    2aec:	427f      	negs	r7, r7
    2aee:	1bed      	subs	r5, r5, r7
    2af0:	4684      	mov	ip, r0
    2af2:	0228      	lsls	r0, r5, #8
    2af4:	d400      	bmi.n	2af8 <__aeabi_dsub+0x51c>
    2af6:	e68d      	b.n	2814 <__aeabi_dsub+0x238>
    2af8:	4650      	mov	r0, sl
    2afa:	1a17      	subs	r7, r2, r0
    2afc:	42ba      	cmp	r2, r7
    2afe:	4192      	sbcs	r2, r2
    2b00:	1b0c      	subs	r4, r1, r4
    2b02:	4252      	negs	r2, r2
    2b04:	1aa4      	subs	r4, r4, r2
    2b06:	4698      	mov	r8, r3
    2b08:	e5ee      	b.n	26e8 <__aeabi_dsub+0x10c>
    2b0a:	000d      	movs	r5, r1
    2b0c:	4315      	orrs	r5, r2
    2b0e:	d100      	bne.n	2b12 <__aeabi_dsub+0x536>
    2b10:	e76b      	b.n	29ea <__aeabi_dsub+0x40e>
    2b12:	4650      	mov	r0, sl
    2b14:	0767      	lsls	r7, r4, #29
    2b16:	08c0      	lsrs	r0, r0, #3
    2b18:	4307      	orrs	r7, r0
    2b1a:	2080      	movs	r0, #128	; 0x80
    2b1c:	08e4      	lsrs	r4, r4, #3
    2b1e:	0300      	lsls	r0, r0, #12
    2b20:	4204      	tst	r4, r0
    2b22:	d007      	beq.n	2b34 <__aeabi_dsub+0x558>
    2b24:	08cd      	lsrs	r5, r1, #3
    2b26:	4205      	tst	r5, r0
    2b28:	d104      	bne.n	2b34 <__aeabi_dsub+0x558>
    2b2a:	002c      	movs	r4, r5
    2b2c:	4698      	mov	r8, r3
    2b2e:	08d7      	lsrs	r7, r2, #3
    2b30:	0749      	lsls	r1, r1, #29
    2b32:	430f      	orrs	r7, r1
    2b34:	0f7b      	lsrs	r3, r7, #29
    2b36:	00e4      	lsls	r4, r4, #3
    2b38:	431c      	orrs	r4, r3
    2b3a:	00ff      	lsls	r7, r7, #3
    2b3c:	4e30      	ldr	r6, [pc, #192]	; (2c00 <__aeabi_dsub+0x624>)
    2b3e:	e5d3      	b.n	26e8 <__aeabi_dsub+0x10c>
    2b40:	4e2f      	ldr	r6, [pc, #188]	; (2c00 <__aeabi_dsub+0x624>)
    2b42:	45b4      	cmp	ip, r6
    2b44:	d1b4      	bne.n	2ab0 <__aeabi_dsub+0x4d4>
    2b46:	000c      	movs	r4, r1
    2b48:	0017      	movs	r7, r2
    2b4a:	4666      	mov	r6, ip
    2b4c:	e5cc      	b.n	26e8 <__aeabi_dsub+0x10c>
    2b4e:	2700      	movs	r7, #0
    2b50:	2400      	movs	r4, #0
    2b52:	e5e8      	b.n	2726 <__aeabi_dsub+0x14a>
    2b54:	2b00      	cmp	r3, #0
    2b56:	d039      	beq.n	2bcc <__aeabi_dsub+0x5f0>
    2b58:	000b      	movs	r3, r1
    2b5a:	4313      	orrs	r3, r2
    2b5c:	d100      	bne.n	2b60 <__aeabi_dsub+0x584>
    2b5e:	e744      	b.n	29ea <__aeabi_dsub+0x40e>
    2b60:	08c0      	lsrs	r0, r0, #3
    2b62:	0767      	lsls	r7, r4, #29
    2b64:	4307      	orrs	r7, r0
    2b66:	2080      	movs	r0, #128	; 0x80
    2b68:	08e4      	lsrs	r4, r4, #3
    2b6a:	0300      	lsls	r0, r0, #12
    2b6c:	4204      	tst	r4, r0
    2b6e:	d0e1      	beq.n	2b34 <__aeabi_dsub+0x558>
    2b70:	08cb      	lsrs	r3, r1, #3
    2b72:	4203      	tst	r3, r0
    2b74:	d1de      	bne.n	2b34 <__aeabi_dsub+0x558>
    2b76:	08d7      	lsrs	r7, r2, #3
    2b78:	0749      	lsls	r1, r1, #29
    2b7a:	430f      	orrs	r7, r1
    2b7c:	001c      	movs	r4, r3
    2b7e:	e7d9      	b.n	2b34 <__aeabi_dsub+0x558>
    2b80:	2100      	movs	r1, #0
    2b82:	e771      	b.n	2a68 <__aeabi_dsub+0x48c>
    2b84:	2500      	movs	r5, #0
    2b86:	2700      	movs	r7, #0
    2b88:	e5e9      	b.n	275e <__aeabi_dsub+0x182>
    2b8a:	002e      	movs	r6, r5
    2b8c:	0027      	movs	r7, r4
    2b8e:	3e20      	subs	r6, #32
    2b90:	40f7      	lsrs	r7, r6
    2b92:	2d20      	cmp	r5, #32
    2b94:	d02f      	beq.n	2bf6 <__aeabi_dsub+0x61a>
    2b96:	2640      	movs	r6, #64	; 0x40
    2b98:	1b75      	subs	r5, r6, r5
    2b9a:	40ac      	lsls	r4, r5
    2b9c:	4650      	mov	r0, sl
    2b9e:	4320      	orrs	r0, r4
    2ba0:	1e44      	subs	r4, r0, #1
    2ba2:	41a0      	sbcs	r0, r4
    2ba4:	2400      	movs	r4, #0
    2ba6:	4338      	orrs	r0, r7
    2ba8:	e6dc      	b.n	2964 <__aeabi_dsub+0x388>
    2baa:	2480      	movs	r4, #128	; 0x80
    2bac:	2500      	movs	r5, #0
    2bae:	0324      	lsls	r4, r4, #12
    2bb0:	4e13      	ldr	r6, [pc, #76]	; (2c00 <__aeabi_dsub+0x624>)
    2bb2:	2700      	movs	r7, #0
    2bb4:	e5d3      	b.n	275e <__aeabi_dsub+0x182>
    2bb6:	4650      	mov	r0, sl
    2bb8:	4320      	orrs	r0, r4
    2bba:	0007      	movs	r7, r0
    2bbc:	1e78      	subs	r0, r7, #1
    2bbe:	4187      	sbcs	r7, r0
    2bc0:	2400      	movs	r4, #0
    2bc2:	18bf      	adds	r7, r7, r2
    2bc4:	e760      	b.n	2a88 <__aeabi_dsub+0x4ac>
    2bc6:	000c      	movs	r4, r1
    2bc8:	0017      	movs	r7, r2
    2bca:	e58d      	b.n	26e8 <__aeabi_dsub+0x10c>
    2bcc:	000c      	movs	r4, r1
    2bce:	0017      	movs	r7, r2
    2bd0:	4e0b      	ldr	r6, [pc, #44]	; (2c00 <__aeabi_dsub+0x624>)
    2bd2:	e589      	b.n	26e8 <__aeabi_dsub+0x10c>
    2bd4:	001e      	movs	r6, r3
    2bd6:	0027      	movs	r7, r4
    2bd8:	3e20      	subs	r6, #32
    2bda:	40f7      	lsrs	r7, r6
    2bdc:	2b20      	cmp	r3, #32
    2bde:	d00c      	beq.n	2bfa <__aeabi_dsub+0x61e>
    2be0:	2640      	movs	r6, #64	; 0x40
    2be2:	1af3      	subs	r3, r6, r3
    2be4:	409c      	lsls	r4, r3
    2be6:	4650      	mov	r0, sl
    2be8:	4320      	orrs	r0, r4
    2bea:	1e44      	subs	r4, r0, #1
    2bec:	41a0      	sbcs	r0, r4
    2bee:	4307      	orrs	r7, r0
    2bf0:	2400      	movs	r4, #0
    2bf2:	18bf      	adds	r7, r7, r2
    2bf4:	e748      	b.n	2a88 <__aeabi_dsub+0x4ac>
    2bf6:	2400      	movs	r4, #0
    2bf8:	e7d0      	b.n	2b9c <__aeabi_dsub+0x5c0>
    2bfa:	2400      	movs	r4, #0
    2bfc:	e7f3      	b.n	2be6 <__aeabi_dsub+0x60a>
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	000007ff 	.word	0x000007ff
    2c04:	ff7fffff 	.word	0xff7fffff

00002c08 <__aeabi_d2iz>:
    2c08:	b530      	push	{r4, r5, lr}
    2c0a:	4d13      	ldr	r5, [pc, #76]	; (2c58 <__aeabi_d2iz+0x50>)
    2c0c:	030a      	lsls	r2, r1, #12
    2c0e:	004b      	lsls	r3, r1, #1
    2c10:	0b12      	lsrs	r2, r2, #12
    2c12:	0d5b      	lsrs	r3, r3, #21
    2c14:	0fc9      	lsrs	r1, r1, #31
    2c16:	2400      	movs	r4, #0
    2c18:	42ab      	cmp	r3, r5
    2c1a:	dd10      	ble.n	2c3e <__aeabi_d2iz+0x36>
    2c1c:	4c0f      	ldr	r4, [pc, #60]	; (2c5c <__aeabi_d2iz+0x54>)
    2c1e:	42a3      	cmp	r3, r4
    2c20:	dc0f      	bgt.n	2c42 <__aeabi_d2iz+0x3a>
    2c22:	2480      	movs	r4, #128	; 0x80
    2c24:	4d0e      	ldr	r5, [pc, #56]	; (2c60 <__aeabi_d2iz+0x58>)
    2c26:	0364      	lsls	r4, r4, #13
    2c28:	4322      	orrs	r2, r4
    2c2a:	1aed      	subs	r5, r5, r3
    2c2c:	2d1f      	cmp	r5, #31
    2c2e:	dd0b      	ble.n	2c48 <__aeabi_d2iz+0x40>
    2c30:	480c      	ldr	r0, [pc, #48]	; (2c64 <__aeabi_d2iz+0x5c>)
    2c32:	1ac3      	subs	r3, r0, r3
    2c34:	40da      	lsrs	r2, r3
    2c36:	4254      	negs	r4, r2
    2c38:	2900      	cmp	r1, #0
    2c3a:	d100      	bne.n	2c3e <__aeabi_d2iz+0x36>
    2c3c:	0014      	movs	r4, r2
    2c3e:	0020      	movs	r0, r4
    2c40:	bd30      	pop	{r4, r5, pc}
    2c42:	4b09      	ldr	r3, [pc, #36]	; (2c68 <__aeabi_d2iz+0x60>)
    2c44:	18cc      	adds	r4, r1, r3
    2c46:	e7fa      	b.n	2c3e <__aeabi_d2iz+0x36>
    2c48:	4c08      	ldr	r4, [pc, #32]	; (2c6c <__aeabi_d2iz+0x64>)
    2c4a:	40e8      	lsrs	r0, r5
    2c4c:	46a4      	mov	ip, r4
    2c4e:	4463      	add	r3, ip
    2c50:	409a      	lsls	r2, r3
    2c52:	4302      	orrs	r2, r0
    2c54:	e7ef      	b.n	2c36 <__aeabi_d2iz+0x2e>
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	000003fe 	.word	0x000003fe
    2c5c:	0000041d 	.word	0x0000041d
    2c60:	00000433 	.word	0x00000433
    2c64:	00000413 	.word	0x00000413
    2c68:	7fffffff 	.word	0x7fffffff
    2c6c:	fffffbed 	.word	0xfffffbed

00002c70 <__aeabi_ui2d>:
    2c70:	b510      	push	{r4, lr}
    2c72:	1e04      	subs	r4, r0, #0
    2c74:	d028      	beq.n	2cc8 <__aeabi_ui2d+0x58>
    2c76:	f000 f833 	bl	2ce0 <__clzsi2>
    2c7a:	4b15      	ldr	r3, [pc, #84]	; (2cd0 <__aeabi_ui2d+0x60>)
    2c7c:	4a15      	ldr	r2, [pc, #84]	; (2cd4 <__aeabi_ui2d+0x64>)
    2c7e:	1a1b      	subs	r3, r3, r0
    2c80:	1ad2      	subs	r2, r2, r3
    2c82:	2a1f      	cmp	r2, #31
    2c84:	dd15      	ble.n	2cb2 <__aeabi_ui2d+0x42>
    2c86:	4a14      	ldr	r2, [pc, #80]	; (2cd8 <__aeabi_ui2d+0x68>)
    2c88:	1ad2      	subs	r2, r2, r3
    2c8a:	4094      	lsls	r4, r2
    2c8c:	2200      	movs	r2, #0
    2c8e:	0324      	lsls	r4, r4, #12
    2c90:	055b      	lsls	r3, r3, #21
    2c92:	0b24      	lsrs	r4, r4, #12
    2c94:	0d5b      	lsrs	r3, r3, #21
    2c96:	2100      	movs	r1, #0
    2c98:	0010      	movs	r0, r2
    2c9a:	0324      	lsls	r4, r4, #12
    2c9c:	0d0a      	lsrs	r2, r1, #20
    2c9e:	0b24      	lsrs	r4, r4, #12
    2ca0:	0512      	lsls	r2, r2, #20
    2ca2:	4322      	orrs	r2, r4
    2ca4:	4c0d      	ldr	r4, [pc, #52]	; (2cdc <__aeabi_ui2d+0x6c>)
    2ca6:	051b      	lsls	r3, r3, #20
    2ca8:	4022      	ands	r2, r4
    2caa:	4313      	orrs	r3, r2
    2cac:	005b      	lsls	r3, r3, #1
    2cae:	0859      	lsrs	r1, r3, #1
    2cb0:	bd10      	pop	{r4, pc}
    2cb2:	0021      	movs	r1, r4
    2cb4:	4091      	lsls	r1, r2
    2cb6:	000a      	movs	r2, r1
    2cb8:	210b      	movs	r1, #11
    2cba:	1a08      	subs	r0, r1, r0
    2cbc:	40c4      	lsrs	r4, r0
    2cbe:	055b      	lsls	r3, r3, #21
    2cc0:	0324      	lsls	r4, r4, #12
    2cc2:	0b24      	lsrs	r4, r4, #12
    2cc4:	0d5b      	lsrs	r3, r3, #21
    2cc6:	e7e6      	b.n	2c96 <__aeabi_ui2d+0x26>
    2cc8:	2300      	movs	r3, #0
    2cca:	2400      	movs	r4, #0
    2ccc:	2200      	movs	r2, #0
    2cce:	e7e2      	b.n	2c96 <__aeabi_ui2d+0x26>
    2cd0:	0000041e 	.word	0x0000041e
    2cd4:	00000433 	.word	0x00000433
    2cd8:	00000413 	.word	0x00000413
    2cdc:	800fffff 	.word	0x800fffff

00002ce0 <__clzsi2>:
    2ce0:	211c      	movs	r1, #28
    2ce2:	2301      	movs	r3, #1
    2ce4:	041b      	lsls	r3, r3, #16
    2ce6:	4298      	cmp	r0, r3
    2ce8:	d301      	bcc.n	2cee <__clzsi2+0xe>
    2cea:	0c00      	lsrs	r0, r0, #16
    2cec:	3910      	subs	r1, #16
    2cee:	0a1b      	lsrs	r3, r3, #8
    2cf0:	4298      	cmp	r0, r3
    2cf2:	d301      	bcc.n	2cf8 <__clzsi2+0x18>
    2cf4:	0a00      	lsrs	r0, r0, #8
    2cf6:	3908      	subs	r1, #8
    2cf8:	091b      	lsrs	r3, r3, #4
    2cfa:	4298      	cmp	r0, r3
    2cfc:	d301      	bcc.n	2d02 <__clzsi2+0x22>
    2cfe:	0900      	lsrs	r0, r0, #4
    2d00:	3904      	subs	r1, #4
    2d02:	a202      	add	r2, pc, #8	; (adr r2, 2d0c <__clzsi2+0x2c>)
    2d04:	5c10      	ldrb	r0, [r2, r0]
    2d06:	1840      	adds	r0, r0, r1
    2d08:	4770      	bx	lr
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	02020304 	.word	0x02020304
    2d10:	01010101 	.word	0x01010101
	...

00002d1c <__libc_init_array>:
    2d1c:	b570      	push	{r4, r5, r6, lr}
    2d1e:	2600      	movs	r6, #0
    2d20:	4d0c      	ldr	r5, [pc, #48]	; (2d54 <__libc_init_array+0x38>)
    2d22:	4c0d      	ldr	r4, [pc, #52]	; (2d58 <__libc_init_array+0x3c>)
    2d24:	1b64      	subs	r4, r4, r5
    2d26:	10a4      	asrs	r4, r4, #2
    2d28:	42a6      	cmp	r6, r4
    2d2a:	d109      	bne.n	2d40 <__libc_init_array+0x24>
    2d2c:	2600      	movs	r6, #0
    2d2e:	f000 f889 	bl	2e44 <_init>
    2d32:	4d0a      	ldr	r5, [pc, #40]	; (2d5c <__libc_init_array+0x40>)
    2d34:	4c0a      	ldr	r4, [pc, #40]	; (2d60 <__libc_init_array+0x44>)
    2d36:	1b64      	subs	r4, r4, r5
    2d38:	10a4      	asrs	r4, r4, #2
    2d3a:	42a6      	cmp	r6, r4
    2d3c:	d105      	bne.n	2d4a <__libc_init_array+0x2e>
    2d3e:	bd70      	pop	{r4, r5, r6, pc}
    2d40:	00b3      	lsls	r3, r6, #2
    2d42:	58eb      	ldr	r3, [r5, r3]
    2d44:	4798      	blx	r3
    2d46:	3601      	adds	r6, #1
    2d48:	e7ee      	b.n	2d28 <__libc_init_array+0xc>
    2d4a:	00b3      	lsls	r3, r6, #2
    2d4c:	58eb      	ldr	r3, [r5, r3]
    2d4e:	4798      	blx	r3
    2d50:	3601      	adds	r6, #1
    2d52:	e7f2      	b.n	2d3a <__libc_init_array+0x1e>
    2d54:	00002e50 	.word	0x00002e50
    2d58:	00002e50 	.word	0x00002e50
    2d5c:	00002e50 	.word	0x00002e50
    2d60:	00002e54 	.word	0x00002e54
    2d64:	42000800 	.word	0x42000800
    2d68:	42000c00 	.word	0x42000c00
    2d6c:	42001000 	.word	0x42001000
    2d70:	42001400 	.word	0x42001400
    2d74:	42001800 	.word	0x42001800
    2d78:	42001c00 	.word	0x42001c00
    2d7c:	00000b62 	.word	0x00000b62
    2d80:	00000b5e 	.word	0x00000b5e
    2d84:	00000b5e 	.word	0x00000b5e
    2d88:	00000bc4 	.word	0x00000bc4
    2d8c:	00000bc4 	.word	0x00000bc4
    2d90:	00000b76 	.word	0x00000b76
    2d94:	00000b68 	.word	0x00000b68
    2d98:	00000b7c 	.word	0x00000b7c
    2d9c:	00000bb2 	.word	0x00000bb2
    2da0:	00000c4c 	.word	0x00000c4c
    2da4:	00000c2c 	.word	0x00000c2c
    2da8:	00000c2c 	.word	0x00000c2c
    2dac:	00000cb8 	.word	0x00000cb8
    2db0:	00000c3e 	.word	0x00000c3e
    2db4:	00000c5a 	.word	0x00000c5a
    2db8:	00000c30 	.word	0x00000c30
    2dbc:	00000c68 	.word	0x00000c68
    2dc0:	00000ca8 	.word	0x00000ca8
    2dc4:	00001c6c 	.word	0x00001c6c
    2dc8:	00001c4e 	.word	0x00001c4e
    2dcc:	00001c08 	.word	0x00001c08
    2dd0:	00001b26 	.word	0x00001b26
    2dd4:	00001c08 	.word	0x00001c08
    2dd8:	00001c40 	.word	0x00001c40
    2ddc:	00001c08 	.word	0x00001c08
    2de0:	00001b26 	.word	0x00001b26
    2de4:	00001c4e 	.word	0x00001c4e
    2de8:	00001c4e 	.word	0x00001c4e
    2dec:	00001c40 	.word	0x00001c40
    2df0:	00001b26 	.word	0x00001b26
    2df4:	00001b1e 	.word	0x00001b1e
    2df8:	00001b1e 	.word	0x00001b1e
    2dfc:	00001b1e 	.word	0x00001b1e
    2e00:	00001e84 	.word	0x00001e84
    2e04:	000022cc 	.word	0x000022cc
    2e08:	0000218c 	.word	0x0000218c
    2e0c:	0000218c 	.word	0x0000218c
    2e10:	00002188 	.word	0x00002188
    2e14:	000022a4 	.word	0x000022a4
    2e18:	000022a4 	.word	0x000022a4
    2e1c:	00002296 	.word	0x00002296
    2e20:	00002188 	.word	0x00002188
    2e24:	000022a4 	.word	0x000022a4
    2e28:	00002296 	.word	0x00002296
    2e2c:	000022a4 	.word	0x000022a4
    2e30:	00002188 	.word	0x00002188
    2e34:	000022ac 	.word	0x000022ac
    2e38:	000022ac 	.word	0x000022ac
    2e3c:	000022ac 	.word	0x000022ac
    2e40:	000024b0 	.word	0x000024b0

00002e44 <_init>:
    2e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e4a:	bc08      	pop	{r3}
    2e4c:	469e      	mov	lr, r3
    2e4e:	4770      	bx	lr

00002e50 <__init_array_start>:
    2e50:	000000dd 	.word	0x000000dd

00002e54 <_fini>:
    2e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e5a:	bc08      	pop	{r3}
    2e5c:	469e      	mov	lr, r3
    2e5e:	4770      	bx	lr

00002e60 <__fini_array_start>:
    2e60:	000000b5 	.word	0x000000b5
