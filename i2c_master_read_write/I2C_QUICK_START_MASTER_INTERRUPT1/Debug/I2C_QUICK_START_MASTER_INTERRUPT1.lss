
I2C_QUICK_START_MASTER_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000302c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  0000302c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d0  20000008  00003034  00020008  2**2
                  ALLOC
  3 .stack        00002000  200000d8  00003104  00020008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  6 .debug_info   000201d3  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d67  00000000  00000000  0004025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003f96  00000000  00000000  00042fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000440  00000000  00000000  00046f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000420  00000000  00000000  00047399  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019c1b  00000000  00000000  000477b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009a12  00000000  00000000  000613d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008dee7  00000000  00000000  0006ade6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bc4  00000000  00000000  000f8cd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 20 00 20 55 12 00 00 51 12 00 00 51 12 00 00     . . U...Q...Q...
	...
      2c:	51 12 00 00 00 00 00 00 00 00 00 00 51 12 00 00     Q...........Q...
      3c:	51 12 00 00 51 12 00 00 51 12 00 00 51 12 00 00     Q...Q...Q...Q...
      4c:	51 12 00 00 51 12 00 00 51 12 00 00 51 12 00 00     Q...Q...Q...Q...
      5c:	51 12 00 00 51 12 00 00 39 0c 00 00 49 0c 00 00     Q...Q...9...I...
      6c:	59 0c 00 00 69 0c 00 00 79 0c 00 00 89 0c 00 00     Y...i...y.......
      7c:	51 12 00 00 51 12 00 00 51 12 00 00 51 12 00 00     Q...Q...Q...Q...
      8c:	51 12 00 00 51 12 00 00 51 12 00 00 51 12 00 00     Q...Q...Q...Q...
      9c:	51 12 00 00 51 12 00 00 51 12 00 00 51 12 00 00     Q...Q...Q...Q...
      ac:	51 12 00 00 00 00 00 00                             Q.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	0000302c 	.word	0x0000302c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000000c 	.word	0x2000000c
     108:	0000302c 	.word	0x0000302c
     10c:	0000302c 	.word	0x0000302c
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     114:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     116:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_cycles_us+0x24>)
     118:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     11a:	4a08      	ldr	r2, [pc, #32]	; (13c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     11c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     11e:	2180      	movs	r1, #128	; 0x80
     120:	0249      	lsls	r1, r1, #9
	while (n--) {
     122:	3801      	subs	r0, #1
     124:	d307      	bcc.n	136 <delay_cycles_us+0x22>
	if (n > 0) {
     126:	2c00      	cmp	r4, #0
     128:	d0fb      	beq.n	122 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     12a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     12c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	6813      	ldr	r3, [r2, #0]
     130:	420b      	tst	r3, r1
     132:	d0fc      	beq.n	12e <delay_cycles_us+0x1a>
     134:	e7f5      	b.n	122 <delay_cycles_us+0xe>
	}
}
     136:	bd30      	pop	{r4, r5, pc}
     138:	20000000 	.word	0x20000000
     13c:	e000e010 	.word	0xe000e010

00000140 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     140:	4b0c      	ldr	r3, [pc, #48]	; (174 <cpu_irq_enter_critical+0x34>)
     142:	681b      	ldr	r3, [r3, #0]
     144:	2b00      	cmp	r3, #0
     146:	d106      	bne.n	156 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     148:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     14c:	2b00      	cmp	r3, #0
     14e:	d007      	beq.n	160 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     150:	2200      	movs	r2, #0
     152:	4b09      	ldr	r3, [pc, #36]	; (178 <cpu_irq_enter_critical+0x38>)
     154:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     156:	4a07      	ldr	r2, [pc, #28]	; (174 <cpu_irq_enter_critical+0x34>)
     158:	6813      	ldr	r3, [r2, #0]
     15a:	3301      	adds	r3, #1
     15c:	6013      	str	r3, [r2, #0]
}
     15e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     160:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     162:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     166:	2200      	movs	r2, #0
     168:	4b04      	ldr	r3, [pc, #16]	; (17c <cpu_irq_enter_critical+0x3c>)
     16a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     16c:	3201      	adds	r2, #1
     16e:	4b02      	ldr	r3, [pc, #8]	; (178 <cpu_irq_enter_critical+0x38>)
     170:	701a      	strb	r2, [r3, #0]
     172:	e7f0      	b.n	156 <cpu_irq_enter_critical+0x16>
     174:	20000024 	.word	0x20000024
     178:	20000028 	.word	0x20000028
     17c:	20000004 	.word	0x20000004

00000180 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     180:	4b08      	ldr	r3, [pc, #32]	; (1a4 <cpu_irq_leave_critical+0x24>)
     182:	681a      	ldr	r2, [r3, #0]
     184:	3a01      	subs	r2, #1
     186:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     188:	681b      	ldr	r3, [r3, #0]
     18a:	2b00      	cmp	r3, #0
     18c:	d109      	bne.n	1a2 <cpu_irq_leave_critical+0x22>
     18e:	4b06      	ldr	r3, [pc, #24]	; (1a8 <cpu_irq_leave_critical+0x28>)
     190:	781b      	ldrb	r3, [r3, #0]
     192:	2b00      	cmp	r3, #0
     194:	d005      	beq.n	1a2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     196:	2201      	movs	r2, #1
     198:	4b04      	ldr	r3, [pc, #16]	; (1ac <cpu_irq_leave_critical+0x2c>)
     19a:	701a      	strb	r2, [r3, #0]
     19c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1a0:	b662      	cpsie	i
	}
}
     1a2:	4770      	bx	lr
     1a4:	20000024 	.word	0x20000024
     1a8:	20000028 	.word	0x20000028
     1ac:	20000004 	.word	0x20000004

000001b0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1b2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1b4:	ac01      	add	r4, sp, #4
     1b6:	2501      	movs	r5, #1
     1b8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1ba:	2700      	movs	r7, #0
     1bc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1be:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1c0:	0021      	movs	r1, r4
     1c2:	203e      	movs	r0, #62	; 0x3e
     1c4:	4e06      	ldr	r6, [pc, #24]	; (1e0 <system_board_init+0x30>)
     1c6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1c8:	2280      	movs	r2, #128	; 0x80
     1ca:	05d2      	lsls	r2, r2, #23
     1cc:	4b05      	ldr	r3, [pc, #20]	; (1e4 <system_board_init+0x34>)
     1ce:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1d0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1d2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1d4:	0021      	movs	r1, r4
     1d6:	200f      	movs	r0, #15
     1d8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     1da:	b003      	add	sp, #12
     1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	000001e9 	.word	0x000001e9
     1e4:	41004480 	.word	0x41004480

000001e8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1e8:	b500      	push	{lr}
     1ea:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1ec:	ab01      	add	r3, sp, #4
     1ee:	2280      	movs	r2, #128	; 0x80
     1f0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1f2:	780a      	ldrb	r2, [r1, #0]
     1f4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1f6:	784a      	ldrb	r2, [r1, #1]
     1f8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1fa:	788a      	ldrb	r2, [r1, #2]
     1fc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1fe:	0019      	movs	r1, r3
     200:	4b01      	ldr	r3, [pc, #4]	; (208 <port_pin_set_config+0x20>)
     202:	4798      	blx	r3
}
     204:	b003      	add	sp, #12
     206:	bd00      	pop	{pc}
     208:	000011f1 	.word	0x000011f1

0000020c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     20c:	b5f0      	push	{r4, r5, r6, r7, lr}
     20e:	46d6      	mov	lr, sl
     210:	464f      	mov	r7, r9
     212:	4646      	mov	r6, r8
     214:	b5c0      	push	{r6, r7, lr}
     216:	b08a      	sub	sp, #40	; 0x28
     218:	0006      	movs	r6, r0
     21a:	000f      	movs	r7, r1
     21c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     21e:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     220:	0008      	movs	r0, r1
     222:	4ba0      	ldr	r3, [pc, #640]	; (4a4 <i2c_master_init+0x298>)
     224:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     226:	4aa0      	ldr	r2, [pc, #640]	; (4a8 <i2c_master_init+0x29c>)
     228:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     22a:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     22c:	2301      	movs	r3, #1
     22e:	40ab      	lsls	r3, r5
     230:	430b      	orrs	r3, r1
     232:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     234:	a909      	add	r1, sp, #36	; 0x24
     236:	7b23      	ldrb	r3, [r4, #12]
     238:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     23a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     23c:	b2c5      	uxtb	r5, r0
     23e:	0028      	movs	r0, r5
     240:	4b9a      	ldr	r3, [pc, #616]	; (4ac <i2c_master_init+0x2a0>)
     242:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     244:	0028      	movs	r0, r5
     246:	4b9a      	ldr	r3, [pc, #616]	; (4b0 <i2c_master_init+0x2a4>)
     248:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     24a:	7b20      	ldrb	r0, [r4, #12]
     24c:	2100      	movs	r1, #0
     24e:	4b99      	ldr	r3, [pc, #612]	; (4b4 <i2c_master_init+0x2a8>)
     250:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     252:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     254:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     256:	079b      	lsls	r3, r3, #30
     258:	d505      	bpl.n	266 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     25a:	b00a      	add	sp, #40	; 0x28
     25c:	bc1c      	pop	{r2, r3, r4}
     25e:	4690      	mov	r8, r2
     260:	4699      	mov	r9, r3
     262:	46a2      	mov	sl, r4
     264:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     266:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     268:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     26a:	07db      	lsls	r3, r3, #31
     26c:	d4f5      	bmi.n	25a <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     26e:	6830      	ldr	r0, [r6, #0]
     270:	4b8c      	ldr	r3, [pc, #560]	; (4a4 <i2c_master_init+0x298>)
     272:	4699      	mov	r9, r3
     274:	4798      	blx	r3
     276:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     278:	498f      	ldr	r1, [pc, #572]	; (4b8 <i2c_master_init+0x2ac>)
     27a:	4b90      	ldr	r3, [pc, #576]	; (4bc <i2c_master_init+0x2b0>)
     27c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     27e:	00ad      	lsls	r5, r5, #2
     280:	4b8f      	ldr	r3, [pc, #572]	; (4c0 <i2c_master_init+0x2b4>)
     282:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     284:	2300      	movs	r3, #0
     286:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     288:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     28a:	2500      	movs	r5, #0
     28c:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     28e:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     290:	2225      	movs	r2, #37	; 0x25
     292:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     294:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     296:	3314      	adds	r3, #20
     298:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     29a:	6833      	ldr	r3, [r6, #0]
     29c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     29e:	0018      	movs	r0, r3
     2a0:	47c8      	blx	r9
     2a2:	4681      	mov	r9, r0
     2a4:	2380      	movs	r3, #128	; 0x80
     2a6:	aa08      	add	r2, sp, #32
     2a8:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2aa:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2ac:	2301      	movs	r3, #1
     2ae:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     2b0:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     2b2:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     2b4:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     2b6:	2800      	cmp	r0, #0
     2b8:	d100      	bne.n	2bc <i2c_master_init+0xb0>
     2ba:	e0af      	b.n	41c <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     2bc:	ab08      	add	r3, sp, #32
     2be:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2c0:	2302      	movs	r3, #2
     2c2:	aa08      	add	r2, sp, #32
     2c4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2c6:	0c00      	lsrs	r0, r0, #16
     2c8:	b2c0      	uxtb	r0, r0
     2ca:	0011      	movs	r1, r2
     2cc:	4b7d      	ldr	r3, [pc, #500]	; (4c4 <i2c_master_init+0x2b8>)
     2ce:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     2d0:	2f00      	cmp	r7, #0
     2d2:	d100      	bne.n	2d6 <i2c_master_init+0xca>
     2d4:	e0a7      	b.n	426 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     2d6:	ab08      	add	r3, sp, #32
     2d8:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2da:	2302      	movs	r3, #2
     2dc:	aa08      	add	r2, sp, #32
     2de:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     2e0:	0c3f      	lsrs	r7, r7, #16
     2e2:	b2f8      	uxtb	r0, r7
     2e4:	0011      	movs	r1, r2
     2e6:	4b77      	ldr	r3, [pc, #476]	; (4c4 <i2c_master_init+0x2b8>)
     2e8:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     2ea:	8aa3      	ldrh	r3, [r4, #20]
     2ec:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     2ee:	8ae3      	ldrh	r3, [r4, #22]
     2f0:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     2f2:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2f4:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     2f6:	2b00      	cmp	r3, #0
     2f8:	d104      	bne.n	304 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2fa:	4b73      	ldr	r3, [pc, #460]	; (4c8 <i2c_master_init+0x2bc>)
     2fc:	789b      	ldrb	r3, [r3, #2]
     2fe:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     300:	0fdb      	lsrs	r3, r3, #31
     302:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     304:	68a1      	ldr	r1, [r4, #8]
     306:	6923      	ldr	r3, [r4, #16]
     308:	430b      	orrs	r3, r1
     30a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     30c:	2224      	movs	r2, #36	; 0x24
     30e:	5ca2      	ldrb	r2, [r4, r2]
     310:	2a00      	cmp	r2, #0
     312:	d002      	beq.n	31a <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     314:	2280      	movs	r2, #128	; 0x80
     316:	05d2      	lsls	r2, r2, #23
     318:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     31a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     31c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     31e:	222c      	movs	r2, #44	; 0x2c
     320:	5ca2      	ldrb	r2, [r4, r2]
     322:	2a00      	cmp	r2, #0
     324:	d103      	bne.n	32e <i2c_master_init+0x122>
     326:	2280      	movs	r2, #128	; 0x80
     328:	0492      	lsls	r2, r2, #18
     32a:	4291      	cmp	r1, r2
     32c:	d102      	bne.n	334 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     32e:	2280      	movs	r2, #128	; 0x80
     330:	0512      	lsls	r2, r2, #20
     332:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     334:	222d      	movs	r2, #45	; 0x2d
     336:	5ca2      	ldrb	r2, [r4, r2]
     338:	2a00      	cmp	r2, #0
     33a:	d002      	beq.n	342 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     33c:	2280      	movs	r2, #128	; 0x80
     33e:	0412      	lsls	r2, r2, #16
     340:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     342:	222e      	movs	r2, #46	; 0x2e
     344:	5ca2      	ldrb	r2, [r4, r2]
     346:	2a00      	cmp	r2, #0
     348:	d002      	beq.n	350 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     34a:	2280      	movs	r2, #128	; 0x80
     34c:	03d2      	lsls	r2, r2, #15
     34e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     350:	4642      	mov	r2, r8
     352:	6812      	ldr	r2, [r2, #0]
     354:	4313      	orrs	r3, r2
     356:	4642      	mov	r2, r8
     358:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     35a:	2380      	movs	r3, #128	; 0x80
     35c:	005b      	lsls	r3, r3, #1
     35e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     360:	4648      	mov	r0, r9
     362:	3014      	adds	r0, #20
     364:	b2c0      	uxtb	r0, r0
     366:	4b59      	ldr	r3, [pc, #356]	; (4cc <i2c_master_init+0x2c0>)
     368:	4798      	blx	r3
     36a:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     36c:	23fa      	movs	r3, #250	; 0xfa
     36e:	009b      	lsls	r3, r3, #2
     370:	6822      	ldr	r2, [r4, #0]
     372:	435a      	muls	r2, r3
     374:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     376:	6863      	ldr	r3, [r4, #4]
     378:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     37a:	4d55      	ldr	r5, [pc, #340]	; (4d0 <i2c_master_init+0x2c4>)
     37c:	47a8      	blx	r5
     37e:	9000      	str	r0, [sp, #0]
     380:	9101      	str	r1, [sp, #4]
     382:	464b      	mov	r3, r9
     384:	0058      	lsls	r0, r3, #1
     386:	47a8      	blx	r5
     388:	9002      	str	r0, [sp, #8]
     38a:	9103      	str	r1, [sp, #12]
     38c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     38e:	47a8      	blx	r5
     390:	9004      	str	r0, [sp, #16]
     392:	9105      	str	r1, [sp, #20]
     394:	4f4f      	ldr	r7, [pc, #316]	; (4d4 <i2c_master_init+0x2c8>)
     396:	4a50      	ldr	r2, [pc, #320]	; (4d8 <i2c_master_init+0x2cc>)
     398:	4b50      	ldr	r3, [pc, #320]	; (4dc <i2c_master_init+0x2d0>)
     39a:	9800      	ldr	r0, [sp, #0]
     39c:	9901      	ldr	r1, [sp, #4]
     39e:	47b8      	blx	r7
     3a0:	0002      	movs	r2, r0
     3a2:	000b      	movs	r3, r1
     3a4:	9804      	ldr	r0, [sp, #16]
     3a6:	9905      	ldr	r1, [sp, #20]
     3a8:	47b8      	blx	r7
     3aa:	4e4d      	ldr	r6, [pc, #308]	; (4e0 <i2c_master_init+0x2d4>)
     3ac:	2200      	movs	r2, #0
     3ae:	4b4d      	ldr	r3, [pc, #308]	; (4e4 <i2c_master_init+0x2d8>)
     3b0:	47b0      	blx	r6
     3b2:	9004      	str	r0, [sp, #16]
     3b4:	9105      	str	r1, [sp, #20]
     3b6:	4648      	mov	r0, r9
     3b8:	47a8      	blx	r5
     3ba:	0002      	movs	r2, r0
     3bc:	000b      	movs	r3, r1
     3be:	9804      	ldr	r0, [sp, #16]
     3c0:	9905      	ldr	r1, [sp, #20]
     3c2:	47b8      	blx	r7
     3c4:	0002      	movs	r2, r0
     3c6:	000b      	movs	r3, r1
     3c8:	4d47      	ldr	r5, [pc, #284]	; (4e8 <i2c_master_init+0x2dc>)
     3ca:	9800      	ldr	r0, [sp, #0]
     3cc:	9901      	ldr	r1, [sp, #4]
     3ce:	47a8      	blx	r5
     3d0:	9a02      	ldr	r2, [sp, #8]
     3d2:	9b03      	ldr	r3, [sp, #12]
     3d4:	47b0      	blx	r6
     3d6:	2200      	movs	r2, #0
     3d8:	4b44      	ldr	r3, [pc, #272]	; (4ec <i2c_master_init+0x2e0>)
     3da:	47a8      	blx	r5
     3dc:	9a02      	ldr	r2, [sp, #8]
     3de:	9b03      	ldr	r3, [sp, #12]
     3e0:	4d43      	ldr	r5, [pc, #268]	; (4f0 <i2c_master_init+0x2e4>)
     3e2:	47a8      	blx	r5
     3e4:	4b43      	ldr	r3, [pc, #268]	; (4f4 <i2c_master_init+0x2e8>)
     3e6:	4798      	blx	r3
     3e8:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     3ea:	2380      	movs	r3, #128	; 0x80
     3ec:	049b      	lsls	r3, r3, #18
     3ee:	68a2      	ldr	r2, [r4, #8]
     3f0:	429a      	cmp	r2, r3
     3f2:	d01e      	beq.n	432 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3f4:	0003      	movs	r3, r0
     3f6:	2040      	movs	r0, #64	; 0x40
     3f8:	2dff      	cmp	r5, #255	; 0xff
     3fa:	d900      	bls.n	3fe <i2c_master_init+0x1f2>
     3fc:	e72d      	b.n	25a <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     3fe:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     400:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     402:	25ff      	movs	r5, #255	; 0xff
     404:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     406:	0624      	lsls	r4, r4, #24
     408:	4325      	orrs	r5, r4
     40a:	0400      	lsls	r0, r0, #16
     40c:	23ff      	movs	r3, #255	; 0xff
     40e:	041b      	lsls	r3, r3, #16
     410:	4018      	ands	r0, r3
     412:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     414:	4643      	mov	r3, r8
     416:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     418:	2000      	movs	r0, #0
     41a:	e71e      	b.n	25a <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     41c:	2100      	movs	r1, #0
     41e:	4640      	mov	r0, r8
     420:	4b35      	ldr	r3, [pc, #212]	; (4f8 <i2c_master_init+0x2ec>)
     422:	4798      	blx	r3
     424:	e74a      	b.n	2bc <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     426:	2101      	movs	r1, #1
     428:	4640      	mov	r0, r8
     42a:	4b33      	ldr	r3, [pc, #204]	; (4f8 <i2c_master_init+0x2ec>)
     42c:	4798      	blx	r3
     42e:	0007      	movs	r7, r0
     430:	e751      	b.n	2d6 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     432:	26fa      	movs	r6, #250	; 0xfa
     434:	00b6      	lsls	r6, r6, #2
     436:	4653      	mov	r3, sl
     438:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     43a:	9800      	ldr	r0, [sp, #0]
     43c:	9901      	ldr	r1, [sp, #4]
     43e:	0002      	movs	r2, r0
     440:	000b      	movs	r3, r1
     442:	4c27      	ldr	r4, [pc, #156]	; (4e0 <i2c_master_init+0x2d4>)
     444:	47a0      	blx	r4
     446:	9000      	str	r0, [sp, #0]
     448:	9101      	str	r1, [sp, #4]
     44a:	0030      	movs	r0, r6
     44c:	4b20      	ldr	r3, [pc, #128]	; (4d0 <i2c_master_init+0x2c4>)
     44e:	4798      	blx	r3
     450:	2200      	movs	r2, #0
     452:	4b2a      	ldr	r3, [pc, #168]	; (4fc <i2c_master_init+0x2f0>)
     454:	47b8      	blx	r7
     456:	0002      	movs	r2, r0
     458:	000b      	movs	r3, r1
     45a:	9800      	ldr	r0, [sp, #0]
     45c:	9901      	ldr	r1, [sp, #4]
     45e:	4c24      	ldr	r4, [pc, #144]	; (4f0 <i2c_master_init+0x2e4>)
     460:	47a0      	blx	r4
     462:	2200      	movs	r2, #0
     464:	4b21      	ldr	r3, [pc, #132]	; (4ec <i2c_master_init+0x2e0>)
     466:	4c20      	ldr	r4, [pc, #128]	; (4e8 <i2c_master_init+0x2dc>)
     468:	47a0      	blx	r4
     46a:	4b22      	ldr	r3, [pc, #136]	; (4f4 <i2c_master_init+0x2e8>)
     46c:	4798      	blx	r3
     46e:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     470:	d00c      	beq.n	48c <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     472:	0031      	movs	r1, r6
     474:	9807      	ldr	r0, [sp, #28]
     476:	4b22      	ldr	r3, [pc, #136]	; (500 <i2c_master_init+0x2f4>)
     478:	4798      	blx	r3
     47a:	3802      	subs	r0, #2
     47c:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     47e:	002b      	movs	r3, r5
     480:	2dff      	cmp	r5, #255	; 0xff
     482:	d80c      	bhi.n	49e <i2c_master_init+0x292>
     484:	28ff      	cmp	r0, #255	; 0xff
     486:	d9bc      	bls.n	402 <i2c_master_init+0x1f6>
     488:	2040      	movs	r0, #64	; 0x40
     48a:	e6e6      	b.n	25a <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     48c:	0071      	lsls	r1, r6, #1
     48e:	1e48      	subs	r0, r1, #1
     490:	9b07      	ldr	r3, [sp, #28]
     492:	469c      	mov	ip, r3
     494:	4460      	add	r0, ip
     496:	4b1a      	ldr	r3, [pc, #104]	; (500 <i2c_master_init+0x2f4>)
     498:	4798      	blx	r3
     49a:	3801      	subs	r0, #1
     49c:	e7ef      	b.n	47e <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     49e:	2040      	movs	r0, #64	; 0x40
     4a0:	e6db      	b.n	25a <i2c_master_init+0x4e>
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	00000b91 	.word	0x00000b91
     4a8:	40000400 	.word	0x40000400
     4ac:	000010f9 	.word	0x000010f9
     4b0:	0000106d 	.word	0x0000106d
     4b4:	000009cd 	.word	0x000009cd
     4b8:	000007e1 	.word	0x000007e1
     4bc:	00000bcd 	.word	0x00000bcd
     4c0:	20000080 	.word	0x20000080
     4c4:	000011f1 	.word	0x000011f1
     4c8:	41002000 	.word	0x41002000
     4cc:	00001115 	.word	0x00001115
     4d0:	00002e39 	.word	0x00002e39
     4d4:	000022a5 	.word	0x000022a5
     4d8:	e826d695 	.word	0xe826d695
     4dc:	3e112e0b 	.word	0x3e112e0b
     4e0:	0000161d 	.word	0x0000161d
     4e4:	40240000 	.word	0x40240000
     4e8:	000027a5 	.word	0x000027a5
     4ec:	3ff00000 	.word	0x3ff00000
     4f0:	00001c3d 	.word	0x00001c3d
     4f4:	00002dd1 	.word	0x00002dd1
     4f8:	00000a19 	.word	0x00000a19
     4fc:	40080000 	.word	0x40080000
     500:	00001505 	.word	0x00001505

00000504 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     504:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     506:	7e1a      	ldrb	r2, [r3, #24]
     508:	0792      	lsls	r2, r2, #30
     50a:	d507      	bpl.n	51c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     50c:	2202      	movs	r2, #2
     50e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     510:	8b5b      	ldrh	r3, [r3, #26]
     512:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     514:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     516:	17db      	asrs	r3, r3, #31
     518:	4018      	ands	r0, r3
}
     51a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     51c:	8b5a      	ldrh	r2, [r3, #26]
     51e:	0752      	lsls	r2, r2, #29
     520:	d506      	bpl.n	530 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     522:	6859      	ldr	r1, [r3, #4]
     524:	22c0      	movs	r2, #192	; 0xc0
     526:	0292      	lsls	r2, r2, #10
     528:	430a      	orrs	r2, r1
     52a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     52c:	2018      	movs	r0, #24
     52e:	e7f4      	b.n	51a <_i2c_master_address_response+0x16>
	return STATUS_OK;
     530:	2000      	movs	r0, #0
     532:	e7f2      	b.n	51a <_i2c_master_address_response+0x16>

00000534 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     534:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     536:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     538:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     53a:	2401      	movs	r4, #1
     53c:	2502      	movs	r5, #2
     53e:	7e11      	ldrb	r1, [r2, #24]
     540:	4221      	tst	r1, r4
     542:	d10b      	bne.n	55c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     544:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     546:	4229      	tst	r1, r5
     548:	d106      	bne.n	558 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     54a:	3301      	adds	r3, #1
     54c:	b29b      	uxth	r3, r3
     54e:	8901      	ldrh	r1, [r0, #8]
     550:	4299      	cmp	r1, r3
     552:	d8f4      	bhi.n	53e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     554:	2012      	movs	r0, #18
     556:	e002      	b.n	55e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     558:	2000      	movs	r0, #0
     55a:	e000      	b.n	55e <_i2c_master_wait_for_bus+0x2a>
     55c:	2000      	movs	r0, #0
}
     55e:	bd30      	pop	{r4, r5, pc}

00000560 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     560:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     562:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     564:	6862      	ldr	r2, [r4, #4]
     566:	2380      	movs	r3, #128	; 0x80
     568:	02db      	lsls	r3, r3, #11
     56a:	4313      	orrs	r3, r2
     56c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     56e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     570:	4b02      	ldr	r3, [pc, #8]	; (57c <_i2c_master_send_hs_master_code+0x1c>)
     572:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     574:	2301      	movs	r3, #1
     576:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     578:	bd10      	pop	{r4, pc}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	00000535 	.word	0x00000535

00000580 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     580:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     582:	2207      	movs	r2, #7
     584:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     586:	421a      	tst	r2, r3
     588:	d1fc      	bne.n	584 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     58a:	4770      	bx	lr

0000058c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     590:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     592:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     594:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     596:	8b83      	ldrh	r3, [r0, #28]
     598:	1aed      	subs	r5, r5, r3
     59a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     59c:	8b83      	ldrh	r3, [r0, #28]
     59e:	3b01      	subs	r3, #1
     5a0:	b29b      	uxth	r3, r3
     5a2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     5a4:	0113      	lsls	r3, r2, #4
     5a6:	d51d      	bpl.n	5e4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     5a8:	7ac3      	ldrb	r3, [r0, #11]
     5aa:	2b00      	cmp	r3, #0
     5ac:	d003      	beq.n	5b6 <_i2c_master_read+0x2a>
     5ae:	8b83      	ldrh	r3, [r0, #28]
     5b0:	b29b      	uxth	r3, r3
     5b2:	2b01      	cmp	r3, #1
     5b4:	d010      	beq.n	5d8 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     5b6:	8ba3      	ldrh	r3, [r4, #28]
     5b8:	b29b      	uxth	r3, r3
     5ba:	2b00      	cmp	r3, #0
     5bc:	d102      	bne.n	5c4 <_i2c_master_read+0x38>
		if (module->send_stop) {
     5be:	7aa3      	ldrb	r3, [r4, #10]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d11c      	bne.n	5fe <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     5c4:	0020      	movs	r0, r4
     5c6:	4b12      	ldr	r3, [pc, #72]	; (610 <_i2c_master_read+0x84>)
     5c8:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     5ca:	6a23      	ldr	r3, [r4, #32]
     5cc:	195d      	adds	r5, r3, r5
     5ce:	2328      	movs	r3, #40	; 0x28
     5d0:	5cf3      	ldrb	r3, [r6, r3]
     5d2:	b2db      	uxtb	r3, r3
     5d4:	702b      	strb	r3, [r5, #0]
}
     5d6:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5d8:	6872      	ldr	r2, [r6, #4]
     5da:	2380      	movs	r3, #128	; 0x80
     5dc:	02db      	lsls	r3, r3, #11
     5de:	4313      	orrs	r3, r2
     5e0:	6073      	str	r3, [r6, #4]
     5e2:	e7e8      	b.n	5b6 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     5e4:	7ac3      	ldrb	r3, [r0, #11]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d0e5      	beq.n	5b6 <_i2c_master_read+0x2a>
     5ea:	8b83      	ldrh	r3, [r0, #28]
     5ec:	b29b      	uxth	r3, r3
     5ee:	2b00      	cmp	r3, #0
     5f0:	d1e1      	bne.n	5b6 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5f2:	6872      	ldr	r2, [r6, #4]
     5f4:	2380      	movs	r3, #128	; 0x80
     5f6:	02db      	lsls	r3, r3, #11
     5f8:	4313      	orrs	r3, r2
     5fa:	6073      	str	r3, [r6, #4]
     5fc:	e7db      	b.n	5b6 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     5fe:	0020      	movs	r0, r4
     600:	4b03      	ldr	r3, [pc, #12]	; (610 <_i2c_master_read+0x84>)
     602:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     604:	6872      	ldr	r2, [r6, #4]
     606:	23c0      	movs	r3, #192	; 0xc0
     608:	029b      	lsls	r3, r3, #10
     60a:	4313      	orrs	r3, r2
     60c:	6073      	str	r3, [r6, #4]
     60e:	e7d9      	b.n	5c4 <_i2c_master_read+0x38>
     610:	00000581 	.word	0x00000581

00000614 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     618:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     61a:	8b6b      	ldrh	r3, [r5, #26]
     61c:	075b      	lsls	r3, r3, #29
     61e:	d503      	bpl.n	628 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     620:	221e      	movs	r2, #30
     622:	2325      	movs	r3, #37	; 0x25
     624:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     626:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     628:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     62a:	8b83      	ldrh	r3, [r0, #28]
     62c:	1af6      	subs	r6, r6, r3
     62e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     630:	8b83      	ldrh	r3, [r0, #28]
     632:	3b01      	subs	r3, #1
     634:	b29b      	uxth	r3, r3
     636:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     638:	4b04      	ldr	r3, [pc, #16]	; (64c <_i2c_master_write+0x38>)
     63a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     63c:	6a23      	ldr	r3, [r4, #32]
     63e:	199e      	adds	r6, r3, r6
     640:	7833      	ldrb	r3, [r6, #0]
     642:	b2db      	uxtb	r3, r3
     644:	2228      	movs	r2, #40	; 0x28
     646:	54ab      	strb	r3, [r5, r2]
     648:	e7ed      	b.n	626 <_i2c_master_write+0x12>
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	00000581 	.word	0x00000581

00000650 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     650:	b570      	push	{r4, r5, r6, lr}
     652:	0005      	movs	r5, r0
     654:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     656:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     658:	7a4b      	ldrb	r3, [r1, #9]
     65a:	2b00      	cmp	r3, #0
     65c:	d11a      	bne.n	694 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     65e:	6873      	ldr	r3, [r6, #4]
     660:	4a13      	ldr	r2, [pc, #76]	; (6b0 <_i2c_master_write_packet+0x60>)
     662:	4013      	ands	r3, r2
     664:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     666:	6863      	ldr	r3, [r4, #4]
     668:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     66a:	8863      	ldrh	r3, [r4, #2]
     66c:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     66e:	2200      	movs	r2, #0
     670:	2324      	movs	r3, #36	; 0x24
     672:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     674:	3205      	adds	r2, #5
     676:	3301      	adds	r3, #1
     678:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     67a:	3b22      	subs	r3, #34	; 0x22
     67c:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     67e:	7a23      	ldrb	r3, [r4, #8]
     680:	2b00      	cmp	r3, #0
     682:	d10b      	bne.n	69c <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     684:	8823      	ldrh	r3, [r4, #0]
     686:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     688:	7a62      	ldrb	r2, [r4, #9]
     68a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     68c:	4313      	orrs	r3, r2
     68e:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     690:	2000      	movs	r0, #0
     692:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     694:	7a89      	ldrb	r1, [r1, #10]
     696:	4b07      	ldr	r3, [pc, #28]	; (6b4 <_i2c_master_write_packet+0x64>)
     698:	4798      	blx	r3
     69a:	e7e0      	b.n	65e <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     69c:	8823      	ldrh	r3, [r4, #0]
     69e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6a0:	7a62      	ldrb	r2, [r4, #9]
     6a2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6a4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6a6:	2280      	movs	r2, #128	; 0x80
     6a8:	0212      	lsls	r2, r2, #8
     6aa:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6ac:	6273      	str	r3, [r6, #36]	; 0x24
     6ae:	e7ef      	b.n	690 <_i2c_master_write_packet+0x40>
     6b0:	fffbffff 	.word	0xfffbffff
     6b4:	00000561 	.word	0x00000561

000006b8 <_i2c_master_read_packet>:
{
     6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6ba:	0005      	movs	r5, r0
     6bc:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6be:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     6c0:	684b      	ldr	r3, [r1, #4]
     6c2:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     6c4:	884b      	ldrh	r3, [r1, #2]
     6c6:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     6c8:	2201      	movs	r2, #1
     6ca:	2324      	movs	r3, #36	; 0x24
     6cc:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     6ce:	3204      	adds	r2, #4
     6d0:	3301      	adds	r3, #1
     6d2:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6d4:	6837      	ldr	r7, [r6, #0]
     6d6:	013f      	lsls	r7, r7, #4
     6d8:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     6da:	7a4b      	ldrb	r3, [r1, #9]
     6dc:	2b00      	cmp	r3, #0
     6de:	d117      	bne.n	710 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     6e0:	2f00      	cmp	r7, #0
     6e2:	d002      	beq.n	6ea <_i2c_master_read_packet+0x32>
     6e4:	8863      	ldrh	r3, [r4, #2]
     6e6:	2b01      	cmp	r3, #1
     6e8:	d016      	beq.n	718 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6ea:	6873      	ldr	r3, [r6, #4]
     6ec:	4a20      	ldr	r2, [pc, #128]	; (770 <_i2c_master_read_packet+0xb8>)
     6ee:	4013      	ands	r3, r2
     6f0:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     6f2:	7a23      	ldrb	r3, [r4, #8]
     6f4:	2b00      	cmp	r3, #0
     6f6:	d115      	bne.n	724 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     6f8:	2303      	movs	r3, #3
     6fa:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     6fc:	8823      	ldrh	r3, [r4, #0]
     6fe:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     700:	7a62      	ldrb	r2, [r4, #9]
     702:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     704:	4313      	orrs	r3, r2
     706:	2201      	movs	r2, #1
     708:	4313      	orrs	r3, r2
     70a:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     70c:	2000      	movs	r0, #0
}
     70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     710:	7a89      	ldrb	r1, [r1, #10]
     712:	4b18      	ldr	r3, [pc, #96]	; (774 <_i2c_master_read_packet+0xbc>)
     714:	4798      	blx	r3
     716:	e7e3      	b.n	6e0 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     718:	6872      	ldr	r2, [r6, #4]
     71a:	2380      	movs	r3, #128	; 0x80
     71c:	02db      	lsls	r3, r3, #11
     71e:	4313      	orrs	r3, r2
     720:	6073      	str	r3, [r6, #4]
     722:	e7e6      	b.n	6f2 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     724:	8823      	ldrh	r3, [r4, #0]
     726:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     728:	7a62      	ldrb	r2, [r4, #9]
     72a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     72c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     72e:	2280      	movs	r2, #128	; 0x80
     730:	0212      	lsls	r2, r2, #8
     732:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     734:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     736:	0028      	movs	r0, r5
     738:	4b0f      	ldr	r3, [pc, #60]	; (778 <_i2c_master_read_packet+0xc0>)
     73a:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     73c:	6873      	ldr	r3, [r6, #4]
     73e:	4a0c      	ldr	r2, [pc, #48]	; (770 <_i2c_master_read_packet+0xb8>)
     740:	4013      	ands	r3, r2
     742:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     744:	2800      	cmp	r0, #0
     746:	d1e2      	bne.n	70e <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     748:	0028      	movs	r0, r5
     74a:	4b0c      	ldr	r3, [pc, #48]	; (77c <_i2c_master_read_packet+0xc4>)
     74c:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     74e:	2800      	cmp	r0, #0
     750:	d1dd      	bne.n	70e <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     752:	2303      	movs	r3, #3
     754:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     756:	8823      	ldrh	r3, [r4, #0]
     758:	0a1b      	lsrs	r3, r3, #8
     75a:	2278      	movs	r2, #120	; 0x78
     75c:	4313      	orrs	r3, r2
     75e:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     760:	7a62      	ldrb	r2, [r4, #9]
     762:	0392      	lsls	r2, r2, #14
     764:	2101      	movs	r1, #1
     766:	430a      	orrs	r2, r1
     768:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     76a:	6273      	str	r3, [r6, #36]	; 0x24
     76c:	e7cf      	b.n	70e <_i2c_master_read_packet+0x56>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	fffbffff 	.word	0xfffbffff
     774:	00000561 	.word	0x00000561
     778:	00000535 	.word	0x00000535
     77c:	00000505 	.word	0x00000505

00000780 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     780:	1c93      	adds	r3, r2, #2
     782:	009b      	lsls	r3, r3, #2
     784:	18c3      	adds	r3, r0, r3
     786:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     788:	7e03      	ldrb	r3, [r0, #24]
     78a:	2101      	movs	r1, #1
     78c:	4091      	lsls	r1, r2
     78e:	430b      	orrs	r3, r1
     790:	b2db      	uxtb	r3, r3
     792:	7603      	strb	r3, [r0, #24]
}
     794:	4770      	bx	lr
	...

00000798 <i2c_master_read_packet_job>:
{
     798:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     79a:	8b83      	ldrh	r3, [r0, #28]
     79c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     79e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7a0:	2b00      	cmp	r3, #0
     7a2:	d001      	beq.n	7a8 <i2c_master_read_packet_job+0x10>
}
     7a4:	0010      	movs	r0, r2
     7a6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7a8:	3301      	adds	r3, #1
     7aa:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7ac:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     7ae:	4b02      	ldr	r3, [pc, #8]	; (7b8 <i2c_master_read_packet_job+0x20>)
     7b0:	4798      	blx	r3
     7b2:	0002      	movs	r2, r0
     7b4:	e7f6      	b.n	7a4 <i2c_master_read_packet_job+0xc>
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	000006b9 	.word	0x000006b9

000007bc <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7bc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     7be:	8b83      	ldrh	r3, [r0, #28]
     7c0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7c2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7c4:	2b00      	cmp	r3, #0
     7c6:	d001      	beq.n	7cc <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     7c8:	0010      	movs	r0, r2
     7ca:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7cc:	3301      	adds	r3, #1
     7ce:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7d0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     7d2:	4b02      	ldr	r3, [pc, #8]	; (7dc <i2c_master_write_packet_job+0x20>)
     7d4:	4798      	blx	r3
     7d6:	0002      	movs	r2, r0
     7d8:	e7f6      	b.n	7c8 <i2c_master_write_packet_job+0xc>
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	00000651 	.word	0x00000651

000007e0 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     7e0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     7e2:	0080      	lsls	r0, r0, #2
     7e4:	4b75      	ldr	r3, [pc, #468]	; (9bc <_i2c_master_interrupt_handler+0x1dc>)
     7e6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7e8:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7ea:	682b      	ldr	r3, [r5, #0]
     7ec:	011b      	lsls	r3, r3, #4
     7ee:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     7f0:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     7f2:	7e26      	ldrb	r6, [r4, #24]
     7f4:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     7f6:	8b63      	ldrh	r3, [r4, #26]
     7f8:	b29b      	uxth	r3, r3
     7fa:	2b00      	cmp	r3, #0
     7fc:	d103      	bne.n	806 <_i2c_master_interrupt_handler+0x26>
     7fe:	8ba3      	ldrh	r3, [r4, #28]
     800:	b29b      	uxth	r3, r3
     802:	2b00      	cmp	r3, #0
     804:	d123      	bne.n	84e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     806:	8b63      	ldrh	r3, [r4, #26]
     808:	b29b      	uxth	r3, r3
     80a:	2b00      	cmp	r3, #0
     80c:	d008      	beq.n	820 <_i2c_master_interrupt_handler+0x40>
     80e:	8ba3      	ldrh	r3, [r4, #28]
     810:	b29b      	uxth	r3, r3
     812:	2b00      	cmp	r3, #0
     814:	d104      	bne.n	820 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     816:	3325      	adds	r3, #37	; 0x25
     818:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     81a:	2b05      	cmp	r3, #5
     81c:	d100      	bne.n	820 <_i2c_master_interrupt_handler+0x40>
     81e:	e06d      	b.n	8fc <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     820:	8b63      	ldrh	r3, [r4, #26]
     822:	b29b      	uxth	r3, r3
     824:	2b00      	cmp	r3, #0
     826:	d024      	beq.n	872 <_i2c_master_interrupt_handler+0x92>
     828:	8ba3      	ldrh	r3, [r4, #28]
     82a:	b29b      	uxth	r3, r3
     82c:	2b00      	cmp	r3, #0
     82e:	d020      	beq.n	872 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     830:	8b6b      	ldrh	r3, [r5, #26]
     832:	069b      	lsls	r3, r3, #26
     834:	d500      	bpl.n	838 <_i2c_master_interrupt_handler+0x58>
     836:	e081      	b.n	93c <_i2c_master_interrupt_handler+0x15c>
     838:	2a00      	cmp	r2, #0
     83a:	d004      	beq.n	846 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     83c:	8ba3      	ldrh	r3, [r4, #28]
     83e:	b29b      	uxth	r3, r3
     840:	2b01      	cmp	r3, #1
     842:	d100      	bne.n	846 <_i2c_master_interrupt_handler+0x66>
     844:	e07a      	b.n	93c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     846:	2241      	movs	r2, #65	; 0x41
     848:	2325      	movs	r3, #37	; 0x25
     84a:	54e2      	strb	r2, [r4, r3]
     84c:	e011      	b.n	872 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     84e:	7e2b      	ldrb	r3, [r5, #24]
     850:	07db      	lsls	r3, r3, #31
     852:	d507      	bpl.n	864 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     854:	2301      	movs	r3, #1
     856:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     858:	8b6b      	ldrh	r3, [r5, #26]
     85a:	079b      	lsls	r3, r3, #30
     85c:	d52e      	bpl.n	8bc <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     85e:	2241      	movs	r2, #65	; 0x41
     860:	2325      	movs	r3, #37	; 0x25
     862:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     864:	8ba3      	ldrh	r3, [r4, #28]
     866:	b29b      	uxth	r3, r3
     868:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     86a:	2325      	movs	r3, #37	; 0x25
     86c:	5ce3      	ldrb	r3, [r4, r3]
     86e:	2b05      	cmp	r3, #5
     870:	d038      	beq.n	8e4 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     872:	8b63      	ldrh	r3, [r4, #26]
     874:	b29b      	uxth	r3, r3
     876:	2b00      	cmp	r3, #0
     878:	d007      	beq.n	88a <_i2c_master_interrupt_handler+0xaa>
     87a:	8ba3      	ldrh	r3, [r4, #28]
     87c:	b29b      	uxth	r3, r3
     87e:	2b00      	cmp	r3, #0
     880:	d103      	bne.n	88a <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     882:	3325      	adds	r3, #37	; 0x25
     884:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     886:	2b05      	cmp	r3, #5
     888:	d064      	beq.n	954 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     88a:	2325      	movs	r3, #37	; 0x25
     88c:	5ce3      	ldrb	r3, [r4, r3]
     88e:	2b05      	cmp	r3, #5
     890:	d013      	beq.n	8ba <_i2c_master_interrupt_handler+0xda>
     892:	2325      	movs	r3, #37	; 0x25
     894:	5ce3      	ldrb	r3, [r4, r3]
     896:	2b00      	cmp	r3, #0
     898:	d00f      	beq.n	8ba <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     89a:	2303      	movs	r3, #3
     89c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     89e:	2300      	movs	r3, #0
     8a0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     8a2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     8a4:	3325      	adds	r3, #37	; 0x25
     8a6:	5ce3      	ldrb	r3, [r4, r3]
     8a8:	2b41      	cmp	r3, #65	; 0x41
     8aa:	d003      	beq.n	8b4 <_i2c_master_interrupt_handler+0xd4>
     8ac:	7aa3      	ldrb	r3, [r4, #10]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d000      	beq.n	8b4 <_i2c_master_interrupt_handler+0xd4>
     8b2:	e075      	b.n	9a0 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     8b4:	0773      	lsls	r3, r6, #29
     8b6:	d500      	bpl.n	8ba <_i2c_master_interrupt_handler+0xda>
     8b8:	e07b      	b.n	9b2 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     8ba:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8bc:	8b6b      	ldrh	r3, [r5, #26]
     8be:	075b      	lsls	r3, r3, #29
     8c0:	d5d0      	bpl.n	864 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     8c2:	2218      	movs	r2, #24
     8c4:	2325      	movs	r3, #37	; 0x25
     8c6:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     8c8:	2300      	movs	r3, #0
     8ca:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     8cc:	7aa3      	ldrb	r3, [r4, #10]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d0c8      	beq.n	864 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     8d2:	0020      	movs	r0, r4
     8d4:	4b3a      	ldr	r3, [pc, #232]	; (9c0 <_i2c_master_interrupt_handler+0x1e0>)
     8d6:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8d8:	686a      	ldr	r2, [r5, #4]
     8da:	23c0      	movs	r3, #192	; 0xc0
     8dc:	029b      	lsls	r3, r3, #10
     8de:	4313      	orrs	r3, r2
     8e0:	606b      	str	r3, [r5, #4]
     8e2:	e7bf      	b.n	864 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8e4:	331f      	adds	r3, #31
     8e6:	5ce3      	ldrb	r3, [r4, r3]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d003      	beq.n	8f4 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     8ec:	0020      	movs	r0, r4
     8ee:	4b35      	ldr	r3, [pc, #212]	; (9c4 <_i2c_master_interrupt_handler+0x1e4>)
     8f0:	4798      	blx	r3
     8f2:	e7be      	b.n	872 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     8f4:	0020      	movs	r0, r4
     8f6:	4b34      	ldr	r3, [pc, #208]	; (9c8 <_i2c_master_interrupt_handler+0x1e8>)
     8f8:	4798      	blx	r3
     8fa:	e7ba      	b.n	872 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8fc:	331f      	adds	r3, #31
     8fe:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     900:	2b00      	cmp	r3, #0
     902:	d000      	beq.n	906 <_i2c_master_interrupt_handler+0x126>
     904:	e78c      	b.n	820 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     906:	3303      	adds	r3, #3
     908:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     90a:	2300      	movs	r3, #0
     90c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     90e:	3325      	adds	r3, #37	; 0x25
     910:	2200      	movs	r2, #0
     912:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     914:	7aa3      	ldrb	r3, [r4, #10]
     916:	2b00      	cmp	r3, #0
     918:	d107      	bne.n	92a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     91a:	2301      	movs	r3, #1
     91c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     91e:	07f3      	lsls	r3, r6, #31
     920:	d5a7      	bpl.n	872 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     922:	68e3      	ldr	r3, [r4, #12]
     924:	0020      	movs	r0, r4
     926:	4798      	blx	r3
     928:	e7a3      	b.n	872 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     92a:	0020      	movs	r0, r4
     92c:	4b24      	ldr	r3, [pc, #144]	; (9c0 <_i2c_master_interrupt_handler+0x1e0>)
     92e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     930:	686a      	ldr	r2, [r5, #4]
     932:	23c0      	movs	r3, #192	; 0xc0
     934:	029b      	lsls	r3, r3, #10
     936:	4313      	orrs	r3, r2
     938:	606b      	str	r3, [r5, #4]
     93a:	e7f0      	b.n	91e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     93c:	2324      	movs	r3, #36	; 0x24
     93e:	5ce3      	ldrb	r3, [r4, r3]
     940:	2b00      	cmp	r3, #0
     942:	d103      	bne.n	94c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     944:	0020      	movs	r0, r4
     946:	4b20      	ldr	r3, [pc, #128]	; (9c8 <_i2c_master_interrupt_handler+0x1e8>)
     948:	4798      	blx	r3
     94a:	e792      	b.n	872 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     94c:	0020      	movs	r0, r4
     94e:	4b1d      	ldr	r3, [pc, #116]	; (9c4 <_i2c_master_interrupt_handler+0x1e4>)
     950:	4798      	blx	r3
     952:	e78e      	b.n	872 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     954:	331f      	adds	r3, #31
     956:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     958:	2b01      	cmp	r3, #1
     95a:	d196      	bne.n	88a <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     95c:	7e2b      	ldrb	r3, [r5, #24]
     95e:	079b      	lsls	r3, r3, #30
     960:	d501      	bpl.n	966 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     962:	2302      	movs	r3, #2
     964:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     966:	2303      	movs	r3, #3
     968:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     96a:	2300      	movs	r3, #0
     96c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     96e:	3325      	adds	r3, #37	; 0x25
     970:	2200      	movs	r2, #0
     972:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     974:	07b3      	lsls	r3, r6, #30
     976:	d503      	bpl.n	980 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     978:	2324      	movs	r3, #36	; 0x24
     97a:	5ce3      	ldrb	r3, [r4, r3]
     97c:	2b01      	cmp	r3, #1
     97e:	d00b      	beq.n	998 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     980:	07f3      	lsls	r3, r6, #31
     982:	d400      	bmi.n	986 <_i2c_master_interrupt_handler+0x1a6>
     984:	e781      	b.n	88a <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     986:	2324      	movs	r3, #36	; 0x24
     988:	5ce3      	ldrb	r3, [r4, r3]
     98a:	2b00      	cmp	r3, #0
     98c:	d000      	beq.n	990 <_i2c_master_interrupt_handler+0x1b0>
     98e:	e77c      	b.n	88a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     990:	68e3      	ldr	r3, [r4, #12]
     992:	0020      	movs	r0, r4
     994:	4798      	blx	r3
     996:	e778      	b.n	88a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     998:	6923      	ldr	r3, [r4, #16]
     99a:	0020      	movs	r0, r4
     99c:	4798      	blx	r3
     99e:	e774      	b.n	88a <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     9a0:	0020      	movs	r0, r4
     9a2:	4b07      	ldr	r3, [pc, #28]	; (9c0 <_i2c_master_interrupt_handler+0x1e0>)
     9a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     9a6:	686a      	ldr	r2, [r5, #4]
     9a8:	23e0      	movs	r3, #224	; 0xe0
     9aa:	02db      	lsls	r3, r3, #11
     9ac:	4313      	orrs	r3, r2
     9ae:	606b      	str	r3, [r5, #4]
     9b0:	e780      	b.n	8b4 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     9b2:	6963      	ldr	r3, [r4, #20]
     9b4:	0020      	movs	r0, r4
     9b6:	4798      	blx	r3
}
     9b8:	e77f      	b.n	8ba <_i2c_master_interrupt_handler+0xda>
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	20000080 	.word	0x20000080
     9c0:	00000581 	.word	0x00000581
     9c4:	0000058d 	.word	0x0000058d
     9c8:	00000615 	.word	0x00000615

000009cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9cc:	b510      	push	{r4, lr}
     9ce:	b082      	sub	sp, #8
     9d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9d2:	4b0e      	ldr	r3, [pc, #56]	; (a0c <sercom_set_gclk_generator+0x40>)
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	2b00      	cmp	r3, #0
     9d8:	d007      	beq.n	9ea <sercom_set_gclk_generator+0x1e>
     9da:	2900      	cmp	r1, #0
     9dc:	d105      	bne.n	9ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     9de:	4b0b      	ldr	r3, [pc, #44]	; (a0c <sercom_set_gclk_generator+0x40>)
     9e0:	785b      	ldrb	r3, [r3, #1]
     9e2:	4283      	cmp	r3, r0
     9e4:	d010      	beq.n	a08 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     9e6:	201d      	movs	r0, #29
     9e8:	e00c      	b.n	a04 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     9ea:	a901      	add	r1, sp, #4
     9ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     9ee:	2013      	movs	r0, #19
     9f0:	4b07      	ldr	r3, [pc, #28]	; (a10 <sercom_set_gclk_generator+0x44>)
     9f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     9f4:	2013      	movs	r0, #19
     9f6:	4b07      	ldr	r3, [pc, #28]	; (a14 <sercom_set_gclk_generator+0x48>)
     9f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     9fa:	4b04      	ldr	r3, [pc, #16]	; (a0c <sercom_set_gclk_generator+0x40>)
     9fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     9fe:	2201      	movs	r2, #1
     a00:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     a02:	2000      	movs	r0, #0
}
     a04:	b002      	add	sp, #8
     a06:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     a08:	2000      	movs	r0, #0
     a0a:	e7fb      	b.n	a04 <sercom_set_gclk_generator+0x38>
     a0c:	2000002c 	.word	0x2000002c
     a10:	000010f9 	.word	0x000010f9
     a14:	0000106d 	.word	0x0000106d

00000a18 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     a18:	4b40      	ldr	r3, [pc, #256]	; (b1c <_sercom_get_default_pad+0x104>)
     a1a:	4298      	cmp	r0, r3
     a1c:	d031      	beq.n	a82 <_sercom_get_default_pad+0x6a>
     a1e:	d90a      	bls.n	a36 <_sercom_get_default_pad+0x1e>
     a20:	4b3f      	ldr	r3, [pc, #252]	; (b20 <_sercom_get_default_pad+0x108>)
     a22:	4298      	cmp	r0, r3
     a24:	d04d      	beq.n	ac2 <_sercom_get_default_pad+0xaa>
     a26:	4b3f      	ldr	r3, [pc, #252]	; (b24 <_sercom_get_default_pad+0x10c>)
     a28:	4298      	cmp	r0, r3
     a2a:	d05a      	beq.n	ae2 <_sercom_get_default_pad+0xca>
     a2c:	4b3e      	ldr	r3, [pc, #248]	; (b28 <_sercom_get_default_pad+0x110>)
     a2e:	4298      	cmp	r0, r3
     a30:	d037      	beq.n	aa2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     a32:	2000      	movs	r0, #0
}
     a34:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     a36:	4b3d      	ldr	r3, [pc, #244]	; (b2c <_sercom_get_default_pad+0x114>)
     a38:	4298      	cmp	r0, r3
     a3a:	d00c      	beq.n	a56 <_sercom_get_default_pad+0x3e>
     a3c:	4b3c      	ldr	r3, [pc, #240]	; (b30 <_sercom_get_default_pad+0x118>)
     a3e:	4298      	cmp	r0, r3
     a40:	d1f7      	bne.n	a32 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a42:	2901      	cmp	r1, #1
     a44:	d017      	beq.n	a76 <_sercom_get_default_pad+0x5e>
     a46:	2900      	cmp	r1, #0
     a48:	d05d      	beq.n	b06 <_sercom_get_default_pad+0xee>
     a4a:	2902      	cmp	r1, #2
     a4c:	d015      	beq.n	a7a <_sercom_get_default_pad+0x62>
     a4e:	2903      	cmp	r1, #3
     a50:	d015      	beq.n	a7e <_sercom_get_default_pad+0x66>
	return 0;
     a52:	2000      	movs	r0, #0
     a54:	e7ee      	b.n	a34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a56:	2901      	cmp	r1, #1
     a58:	d007      	beq.n	a6a <_sercom_get_default_pad+0x52>
     a5a:	2900      	cmp	r1, #0
     a5c:	d051      	beq.n	b02 <_sercom_get_default_pad+0xea>
     a5e:	2902      	cmp	r1, #2
     a60:	d005      	beq.n	a6e <_sercom_get_default_pad+0x56>
     a62:	2903      	cmp	r1, #3
     a64:	d005      	beq.n	a72 <_sercom_get_default_pad+0x5a>
	return 0;
     a66:	2000      	movs	r0, #0
     a68:	e7e4      	b.n	a34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a6a:	4832      	ldr	r0, [pc, #200]	; (b34 <_sercom_get_default_pad+0x11c>)
     a6c:	e7e2      	b.n	a34 <_sercom_get_default_pad+0x1c>
     a6e:	4832      	ldr	r0, [pc, #200]	; (b38 <_sercom_get_default_pad+0x120>)
     a70:	e7e0      	b.n	a34 <_sercom_get_default_pad+0x1c>
     a72:	4832      	ldr	r0, [pc, #200]	; (b3c <_sercom_get_default_pad+0x124>)
     a74:	e7de      	b.n	a34 <_sercom_get_default_pad+0x1c>
     a76:	4832      	ldr	r0, [pc, #200]	; (b40 <_sercom_get_default_pad+0x128>)
     a78:	e7dc      	b.n	a34 <_sercom_get_default_pad+0x1c>
     a7a:	4832      	ldr	r0, [pc, #200]	; (b44 <_sercom_get_default_pad+0x12c>)
     a7c:	e7da      	b.n	a34 <_sercom_get_default_pad+0x1c>
     a7e:	4832      	ldr	r0, [pc, #200]	; (b48 <_sercom_get_default_pad+0x130>)
     a80:	e7d8      	b.n	a34 <_sercom_get_default_pad+0x1c>
     a82:	2901      	cmp	r1, #1
     a84:	d007      	beq.n	a96 <_sercom_get_default_pad+0x7e>
     a86:	2900      	cmp	r1, #0
     a88:	d03f      	beq.n	b0a <_sercom_get_default_pad+0xf2>
     a8a:	2902      	cmp	r1, #2
     a8c:	d005      	beq.n	a9a <_sercom_get_default_pad+0x82>
     a8e:	2903      	cmp	r1, #3
     a90:	d005      	beq.n	a9e <_sercom_get_default_pad+0x86>
	return 0;
     a92:	2000      	movs	r0, #0
     a94:	e7ce      	b.n	a34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a96:	482d      	ldr	r0, [pc, #180]	; (b4c <_sercom_get_default_pad+0x134>)
     a98:	e7cc      	b.n	a34 <_sercom_get_default_pad+0x1c>
     a9a:	482d      	ldr	r0, [pc, #180]	; (b50 <_sercom_get_default_pad+0x138>)
     a9c:	e7ca      	b.n	a34 <_sercom_get_default_pad+0x1c>
     a9e:	482d      	ldr	r0, [pc, #180]	; (b54 <_sercom_get_default_pad+0x13c>)
     aa0:	e7c8      	b.n	a34 <_sercom_get_default_pad+0x1c>
     aa2:	2901      	cmp	r1, #1
     aa4:	d007      	beq.n	ab6 <_sercom_get_default_pad+0x9e>
     aa6:	2900      	cmp	r1, #0
     aa8:	d031      	beq.n	b0e <_sercom_get_default_pad+0xf6>
     aaa:	2902      	cmp	r1, #2
     aac:	d005      	beq.n	aba <_sercom_get_default_pad+0xa2>
     aae:	2903      	cmp	r1, #3
     ab0:	d005      	beq.n	abe <_sercom_get_default_pad+0xa6>
	return 0;
     ab2:	2000      	movs	r0, #0
     ab4:	e7be      	b.n	a34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ab6:	4828      	ldr	r0, [pc, #160]	; (b58 <_sercom_get_default_pad+0x140>)
     ab8:	e7bc      	b.n	a34 <_sercom_get_default_pad+0x1c>
     aba:	4828      	ldr	r0, [pc, #160]	; (b5c <_sercom_get_default_pad+0x144>)
     abc:	e7ba      	b.n	a34 <_sercom_get_default_pad+0x1c>
     abe:	4828      	ldr	r0, [pc, #160]	; (b60 <_sercom_get_default_pad+0x148>)
     ac0:	e7b8      	b.n	a34 <_sercom_get_default_pad+0x1c>
     ac2:	2901      	cmp	r1, #1
     ac4:	d007      	beq.n	ad6 <_sercom_get_default_pad+0xbe>
     ac6:	2900      	cmp	r1, #0
     ac8:	d023      	beq.n	b12 <_sercom_get_default_pad+0xfa>
     aca:	2902      	cmp	r1, #2
     acc:	d005      	beq.n	ada <_sercom_get_default_pad+0xc2>
     ace:	2903      	cmp	r1, #3
     ad0:	d005      	beq.n	ade <_sercom_get_default_pad+0xc6>
	return 0;
     ad2:	2000      	movs	r0, #0
     ad4:	e7ae      	b.n	a34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ad6:	4823      	ldr	r0, [pc, #140]	; (b64 <_sercom_get_default_pad+0x14c>)
     ad8:	e7ac      	b.n	a34 <_sercom_get_default_pad+0x1c>
     ada:	4823      	ldr	r0, [pc, #140]	; (b68 <_sercom_get_default_pad+0x150>)
     adc:	e7aa      	b.n	a34 <_sercom_get_default_pad+0x1c>
     ade:	4823      	ldr	r0, [pc, #140]	; (b6c <_sercom_get_default_pad+0x154>)
     ae0:	e7a8      	b.n	a34 <_sercom_get_default_pad+0x1c>
     ae2:	2901      	cmp	r1, #1
     ae4:	d007      	beq.n	af6 <_sercom_get_default_pad+0xde>
     ae6:	2900      	cmp	r1, #0
     ae8:	d015      	beq.n	b16 <_sercom_get_default_pad+0xfe>
     aea:	2902      	cmp	r1, #2
     aec:	d005      	beq.n	afa <_sercom_get_default_pad+0xe2>
     aee:	2903      	cmp	r1, #3
     af0:	d005      	beq.n	afe <_sercom_get_default_pad+0xe6>
	return 0;
     af2:	2000      	movs	r0, #0
     af4:	e79e      	b.n	a34 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     af6:	481e      	ldr	r0, [pc, #120]	; (b70 <_sercom_get_default_pad+0x158>)
     af8:	e79c      	b.n	a34 <_sercom_get_default_pad+0x1c>
     afa:	481e      	ldr	r0, [pc, #120]	; (b74 <_sercom_get_default_pad+0x15c>)
     afc:	e79a      	b.n	a34 <_sercom_get_default_pad+0x1c>
     afe:	481e      	ldr	r0, [pc, #120]	; (b78 <_sercom_get_default_pad+0x160>)
     b00:	e798      	b.n	a34 <_sercom_get_default_pad+0x1c>
     b02:	481e      	ldr	r0, [pc, #120]	; (b7c <_sercom_get_default_pad+0x164>)
     b04:	e796      	b.n	a34 <_sercom_get_default_pad+0x1c>
     b06:	2003      	movs	r0, #3
     b08:	e794      	b.n	a34 <_sercom_get_default_pad+0x1c>
     b0a:	481d      	ldr	r0, [pc, #116]	; (b80 <_sercom_get_default_pad+0x168>)
     b0c:	e792      	b.n	a34 <_sercom_get_default_pad+0x1c>
     b0e:	481d      	ldr	r0, [pc, #116]	; (b84 <_sercom_get_default_pad+0x16c>)
     b10:	e790      	b.n	a34 <_sercom_get_default_pad+0x1c>
     b12:	481d      	ldr	r0, [pc, #116]	; (b88 <_sercom_get_default_pad+0x170>)
     b14:	e78e      	b.n	a34 <_sercom_get_default_pad+0x1c>
     b16:	481d      	ldr	r0, [pc, #116]	; (b8c <_sercom_get_default_pad+0x174>)
     b18:	e78c      	b.n	a34 <_sercom_get_default_pad+0x1c>
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	42001000 	.word	0x42001000
     b20:	42001800 	.word	0x42001800
     b24:	42001c00 	.word	0x42001c00
     b28:	42001400 	.word	0x42001400
     b2c:	42000800 	.word	0x42000800
     b30:	42000c00 	.word	0x42000c00
     b34:	00050003 	.word	0x00050003
     b38:	00060003 	.word	0x00060003
     b3c:	00070003 	.word	0x00070003
     b40:	00010003 	.word	0x00010003
     b44:	001e0003 	.word	0x001e0003
     b48:	001f0003 	.word	0x001f0003
     b4c:	00090003 	.word	0x00090003
     b50:	000a0003 	.word	0x000a0003
     b54:	000b0003 	.word	0x000b0003
     b58:	00110003 	.word	0x00110003
     b5c:	00120003 	.word	0x00120003
     b60:	00130003 	.word	0x00130003
     b64:	000d0003 	.word	0x000d0003
     b68:	000e0003 	.word	0x000e0003
     b6c:	000f0003 	.word	0x000f0003
     b70:	00170003 	.word	0x00170003
     b74:	00180003 	.word	0x00180003
     b78:	00190003 	.word	0x00190003
     b7c:	00040003 	.word	0x00040003
     b80:	00080003 	.word	0x00080003
     b84:	00100003 	.word	0x00100003
     b88:	000c0003 	.word	0x000c0003
     b8c:	00160003 	.word	0x00160003

00000b90 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b90:	b530      	push	{r4, r5, lr}
     b92:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b94:	4b0b      	ldr	r3, [pc, #44]	; (bc4 <_sercom_get_sercom_inst_index+0x34>)
     b96:	466a      	mov	r2, sp
     b98:	cb32      	ldmia	r3!, {r1, r4, r5}
     b9a:	c232      	stmia	r2!, {r1, r4, r5}
     b9c:	cb32      	ldmia	r3!, {r1, r4, r5}
     b9e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ba0:	9b00      	ldr	r3, [sp, #0]
     ba2:	4283      	cmp	r3, r0
     ba4:	d00b      	beq.n	bbe <_sercom_get_sercom_inst_index+0x2e>
     ba6:	2301      	movs	r3, #1
     ba8:	009a      	lsls	r2, r3, #2
     baa:	4669      	mov	r1, sp
     bac:	5852      	ldr	r2, [r2, r1]
     bae:	4282      	cmp	r2, r0
     bb0:	d006      	beq.n	bc0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bb2:	3301      	adds	r3, #1
     bb4:	2b06      	cmp	r3, #6
     bb6:	d1f7      	bne.n	ba8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     bb8:	2000      	movs	r0, #0
}
     bba:	b007      	add	sp, #28
     bbc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bbe:	2300      	movs	r3, #0
			return i;
     bc0:	b2d8      	uxtb	r0, r3
     bc2:	e7fa      	b.n	bba <_sercom_get_sercom_inst_index+0x2a>
     bc4:	00002f2c 	.word	0x00002f2c

00000bc8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     bc8:	4770      	bx	lr
	...

00000bcc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     bce:	4b0a      	ldr	r3, [pc, #40]	; (bf8 <_sercom_set_handler+0x2c>)
     bd0:	781b      	ldrb	r3, [r3, #0]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d10c      	bne.n	bf0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bd6:	4f09      	ldr	r7, [pc, #36]	; (bfc <_sercom_set_handler+0x30>)
     bd8:	4e09      	ldr	r6, [pc, #36]	; (c00 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     bda:	4d0a      	ldr	r5, [pc, #40]	; (c04 <_sercom_set_handler+0x38>)
     bdc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bde:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     be0:	195a      	adds	r2, r3, r5
     be2:	6014      	str	r4, [r2, #0]
     be4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     be6:	2b18      	cmp	r3, #24
     be8:	d1f9      	bne.n	bde <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     bea:	2201      	movs	r2, #1
     bec:	4b02      	ldr	r3, [pc, #8]	; (bf8 <_sercom_set_handler+0x2c>)
     bee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     bf0:	0080      	lsls	r0, r0, #2
     bf2:	4b02      	ldr	r3, [pc, #8]	; (bfc <_sercom_set_handler+0x30>)
     bf4:	50c1      	str	r1, [r0, r3]
}
     bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bf8:	2000002e 	.word	0x2000002e
     bfc:	20000030 	.word	0x20000030
     c00:	00000bc9 	.word	0x00000bc9
     c04:	20000080 	.word	0x20000080

00000c08 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c08:	b500      	push	{lr}
     c0a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c0c:	2309      	movs	r3, #9
     c0e:	466a      	mov	r2, sp
     c10:	7013      	strb	r3, [r2, #0]
     c12:	3301      	adds	r3, #1
     c14:	7053      	strb	r3, [r2, #1]
     c16:	3301      	adds	r3, #1
     c18:	7093      	strb	r3, [r2, #2]
     c1a:	3301      	adds	r3, #1
     c1c:	70d3      	strb	r3, [r2, #3]
     c1e:	3301      	adds	r3, #1
     c20:	7113      	strb	r3, [r2, #4]
     c22:	3301      	adds	r3, #1
     c24:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c26:	4b03      	ldr	r3, [pc, #12]	; (c34 <_sercom_get_interrupt_vector+0x2c>)
     c28:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c2a:	466b      	mov	r3, sp
     c2c:	5618      	ldrsb	r0, [r3, r0]
}
     c2e:	b003      	add	sp, #12
     c30:	bd00      	pop	{pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	00000b91 	.word	0x00000b91

00000c38 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c38:	b510      	push	{r4, lr}
     c3a:	4b02      	ldr	r3, [pc, #8]	; (c44 <SERCOM0_Handler+0xc>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	2000      	movs	r0, #0
     c40:	4798      	blx	r3
     c42:	bd10      	pop	{r4, pc}
     c44:	20000030 	.word	0x20000030

00000c48 <SERCOM1_Handler>:
     c48:	b510      	push	{r4, lr}
     c4a:	4b02      	ldr	r3, [pc, #8]	; (c54 <SERCOM1_Handler+0xc>)
     c4c:	685b      	ldr	r3, [r3, #4]
     c4e:	2001      	movs	r0, #1
     c50:	4798      	blx	r3
     c52:	bd10      	pop	{r4, pc}
     c54:	20000030 	.word	0x20000030

00000c58 <SERCOM2_Handler>:
     c58:	b510      	push	{r4, lr}
     c5a:	4b02      	ldr	r3, [pc, #8]	; (c64 <SERCOM2_Handler+0xc>)
     c5c:	689b      	ldr	r3, [r3, #8]
     c5e:	2002      	movs	r0, #2
     c60:	4798      	blx	r3
     c62:	bd10      	pop	{r4, pc}
     c64:	20000030 	.word	0x20000030

00000c68 <SERCOM3_Handler>:
     c68:	b510      	push	{r4, lr}
     c6a:	4b02      	ldr	r3, [pc, #8]	; (c74 <SERCOM3_Handler+0xc>)
     c6c:	68db      	ldr	r3, [r3, #12]
     c6e:	2003      	movs	r0, #3
     c70:	4798      	blx	r3
     c72:	bd10      	pop	{r4, pc}
     c74:	20000030 	.word	0x20000030

00000c78 <SERCOM4_Handler>:
     c78:	b510      	push	{r4, lr}
     c7a:	4b02      	ldr	r3, [pc, #8]	; (c84 <SERCOM4_Handler+0xc>)
     c7c:	691b      	ldr	r3, [r3, #16]
     c7e:	2004      	movs	r0, #4
     c80:	4798      	blx	r3
     c82:	bd10      	pop	{r4, pc}
     c84:	20000030 	.word	0x20000030

00000c88 <SERCOM5_Handler>:
     c88:	b510      	push	{r4, lr}
     c8a:	4b02      	ldr	r3, [pc, #8]	; (c94 <SERCOM5_Handler+0xc>)
     c8c:	695b      	ldr	r3, [r3, #20]
     c8e:	2005      	movs	r0, #5
     c90:	4798      	blx	r3
     c92:	bd10      	pop	{r4, pc}
     c94:	20000030 	.word	0x20000030

00000c98 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c98:	b510      	push	{r4, lr}
	switch (clock_source) {
     c9a:	2808      	cmp	r0, #8
     c9c:	d803      	bhi.n	ca6 <system_clock_source_get_hz+0xe>
     c9e:	0080      	lsls	r0, r0, #2
     ca0:	4b1c      	ldr	r3, [pc, #112]	; (d14 <system_clock_source_get_hz+0x7c>)
     ca2:	581b      	ldr	r3, [r3, r0]
     ca4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     ca6:	2000      	movs	r0, #0
     ca8:	e032      	b.n	d10 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     caa:	4b1b      	ldr	r3, [pc, #108]	; (d18 <system_clock_source_get_hz+0x80>)
     cac:	6918      	ldr	r0, [r3, #16]
     cae:	e02f      	b.n	d10 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     cb0:	4b1a      	ldr	r3, [pc, #104]	; (d1c <system_clock_source_get_hz+0x84>)
     cb2:	6a1b      	ldr	r3, [r3, #32]
     cb4:	059b      	lsls	r3, r3, #22
     cb6:	0f9b      	lsrs	r3, r3, #30
     cb8:	4819      	ldr	r0, [pc, #100]	; (d20 <system_clock_source_get_hz+0x88>)
     cba:	40d8      	lsrs	r0, r3
     cbc:	e028      	b.n	d10 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     cbe:	4b16      	ldr	r3, [pc, #88]	; (d18 <system_clock_source_get_hz+0x80>)
     cc0:	6958      	ldr	r0, [r3, #20]
     cc2:	e025      	b.n	d10 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cc4:	4b14      	ldr	r3, [pc, #80]	; (d18 <system_clock_source_get_hz+0x80>)
     cc6:	681b      	ldr	r3, [r3, #0]
			return 0;
     cc8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cca:	079b      	lsls	r3, r3, #30
     ccc:	d520      	bpl.n	d10 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     cce:	4913      	ldr	r1, [pc, #76]	; (d1c <system_clock_source_get_hz+0x84>)
     cd0:	2210      	movs	r2, #16
     cd2:	68cb      	ldr	r3, [r1, #12]
     cd4:	421a      	tst	r2, r3
     cd6:	d0fc      	beq.n	cd2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     cd8:	4b0f      	ldr	r3, [pc, #60]	; (d18 <system_clock_source_get_hz+0x80>)
     cda:	681a      	ldr	r2, [r3, #0]
     cdc:	2324      	movs	r3, #36	; 0x24
     cde:	4013      	ands	r3, r2
     ce0:	2b04      	cmp	r3, #4
     ce2:	d001      	beq.n	ce8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     ce4:	480f      	ldr	r0, [pc, #60]	; (d24 <system_clock_source_get_hz+0x8c>)
     ce6:	e013      	b.n	d10 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ce8:	2000      	movs	r0, #0
     cea:	4b0f      	ldr	r3, [pc, #60]	; (d28 <system_clock_source_get_hz+0x90>)
     cec:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     cee:	4b0a      	ldr	r3, [pc, #40]	; (d18 <system_clock_source_get_hz+0x80>)
     cf0:	689b      	ldr	r3, [r3, #8]
     cf2:	041b      	lsls	r3, r3, #16
     cf4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cf6:	4358      	muls	r0, r3
     cf8:	e00a      	b.n	d10 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cfa:	2350      	movs	r3, #80	; 0x50
     cfc:	4a07      	ldr	r2, [pc, #28]	; (d1c <system_clock_source_get_hz+0x84>)
     cfe:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d00:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d02:	075b      	lsls	r3, r3, #29
     d04:	d504      	bpl.n	d10 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     d06:	4b04      	ldr	r3, [pc, #16]	; (d18 <system_clock_source_get_hz+0x80>)
     d08:	68d8      	ldr	r0, [r3, #12]
     d0a:	e001      	b.n	d10 <system_clock_source_get_hz+0x78>
		return 32768UL;
     d0c:	2080      	movs	r0, #128	; 0x80
     d0e:	0200      	lsls	r0, r0, #8
	}
}
     d10:	bd10      	pop	{r4, pc}
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	00002f44 	.word	0x00002f44
     d18:	20000048 	.word	0x20000048
     d1c:	40000800 	.word	0x40000800
     d20:	007a1200 	.word	0x007a1200
     d24:	02dc6c00 	.word	0x02dc6c00
     d28:	00001115 	.word	0x00001115

00000d2c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d2c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d2e:	490c      	ldr	r1, [pc, #48]	; (d60 <system_clock_source_osc8m_set_config+0x34>)
     d30:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d32:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d34:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d36:	7840      	ldrb	r0, [r0, #1]
     d38:	2201      	movs	r2, #1
     d3a:	4010      	ands	r0, r2
     d3c:	0180      	lsls	r0, r0, #6
     d3e:	2640      	movs	r6, #64	; 0x40
     d40:	43b3      	bics	r3, r6
     d42:	4303      	orrs	r3, r0
     d44:	402a      	ands	r2, r5
     d46:	01d2      	lsls	r2, r2, #7
     d48:	2080      	movs	r0, #128	; 0x80
     d4a:	4383      	bics	r3, r0
     d4c:	4313      	orrs	r3, r2
     d4e:	2203      	movs	r2, #3
     d50:	4022      	ands	r2, r4
     d52:	0212      	lsls	r2, r2, #8
     d54:	4803      	ldr	r0, [pc, #12]	; (d64 <system_clock_source_osc8m_set_config+0x38>)
     d56:	4003      	ands	r3, r0
     d58:	4313      	orrs	r3, r2
     d5a:	620b      	str	r3, [r1, #32]
}
     d5c:	bd70      	pop	{r4, r5, r6, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	40000800 	.word	0x40000800
     d64:	fffffcff 	.word	0xfffffcff

00000d68 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     d68:	2808      	cmp	r0, #8
     d6a:	d803      	bhi.n	d74 <system_clock_source_enable+0xc>
     d6c:	0080      	lsls	r0, r0, #2
     d6e:	4b25      	ldr	r3, [pc, #148]	; (e04 <system_clock_source_enable+0x9c>)
     d70:	581b      	ldr	r3, [r3, r0]
     d72:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d74:	2017      	movs	r0, #23
     d76:	e044      	b.n	e02 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d78:	4a23      	ldr	r2, [pc, #140]	; (e08 <system_clock_source_enable+0xa0>)
     d7a:	6a13      	ldr	r3, [r2, #32]
     d7c:	2102      	movs	r1, #2
     d7e:	430b      	orrs	r3, r1
     d80:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d82:	2000      	movs	r0, #0
     d84:	e03d      	b.n	e02 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d86:	4a20      	ldr	r2, [pc, #128]	; (e08 <system_clock_source_enable+0xa0>)
     d88:	6993      	ldr	r3, [r2, #24]
     d8a:	2102      	movs	r1, #2
     d8c:	430b      	orrs	r3, r1
     d8e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     d90:	2000      	movs	r0, #0
		break;
     d92:	e036      	b.n	e02 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d94:	4a1c      	ldr	r2, [pc, #112]	; (e08 <system_clock_source_enable+0xa0>)
     d96:	8a13      	ldrh	r3, [r2, #16]
     d98:	2102      	movs	r1, #2
     d9a:	430b      	orrs	r3, r1
     d9c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     d9e:	2000      	movs	r0, #0
		break;
     da0:	e02f      	b.n	e02 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     da2:	4a19      	ldr	r2, [pc, #100]	; (e08 <system_clock_source_enable+0xa0>)
     da4:	8a93      	ldrh	r3, [r2, #20]
     da6:	2102      	movs	r1, #2
     da8:	430b      	orrs	r3, r1
     daa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     dac:	2000      	movs	r0, #0
		break;
     dae:	e028      	b.n	e02 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     db0:	4916      	ldr	r1, [pc, #88]	; (e0c <system_clock_source_enable+0xa4>)
     db2:	680b      	ldr	r3, [r1, #0]
     db4:	2202      	movs	r2, #2
     db6:	4313      	orrs	r3, r2
     db8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     dba:	4b13      	ldr	r3, [pc, #76]	; (e08 <system_clock_source_enable+0xa0>)
     dbc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dbe:	0019      	movs	r1, r3
     dc0:	320e      	adds	r2, #14
     dc2:	68cb      	ldr	r3, [r1, #12]
     dc4:	421a      	tst	r2, r3
     dc6:	d0fc      	beq.n	dc2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     dc8:	4a10      	ldr	r2, [pc, #64]	; (e0c <system_clock_source_enable+0xa4>)
     dca:	6891      	ldr	r1, [r2, #8]
     dcc:	4b0e      	ldr	r3, [pc, #56]	; (e08 <system_clock_source_enable+0xa0>)
     dce:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     dd0:	6852      	ldr	r2, [r2, #4]
     dd2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     dd4:	2200      	movs	r2, #0
     dd6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dd8:	0019      	movs	r1, r3
     dda:	3210      	adds	r2, #16
     ddc:	68cb      	ldr	r3, [r1, #12]
     dde:	421a      	tst	r2, r3
     de0:	d0fc      	beq.n	ddc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     de2:	4b0a      	ldr	r3, [pc, #40]	; (e0c <system_clock_source_enable+0xa4>)
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	b29b      	uxth	r3, r3
     de8:	4a07      	ldr	r2, [pc, #28]	; (e08 <system_clock_source_enable+0xa0>)
     dea:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     dec:	2000      	movs	r0, #0
     dee:	e008      	b.n	e02 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     df0:	4905      	ldr	r1, [pc, #20]	; (e08 <system_clock_source_enable+0xa0>)
     df2:	2244      	movs	r2, #68	; 0x44
     df4:	5c8b      	ldrb	r3, [r1, r2]
     df6:	2002      	movs	r0, #2
     df8:	4303      	orrs	r3, r0
     dfa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     dfc:	2000      	movs	r0, #0
		break;
     dfe:	e000      	b.n	e02 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e00:	2000      	movs	r0, #0
}
     e02:	4770      	bx	lr
     e04:	00002f68 	.word	0x00002f68
     e08:	40000800 	.word	0x40000800
     e0c:	20000048 	.word	0x20000048

00000e10 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e10:	b5f0      	push	{r4, r5, r6, r7, lr}
     e12:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e14:	22c2      	movs	r2, #194	; 0xc2
     e16:	00d2      	lsls	r2, r2, #3
     e18:	4b20      	ldr	r3, [pc, #128]	; (e9c <system_clock_init+0x8c>)
     e1a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e1c:	4a20      	ldr	r2, [pc, #128]	; (ea0 <system_clock_init+0x90>)
     e1e:	6853      	ldr	r3, [r2, #4]
     e20:	211e      	movs	r1, #30
     e22:	438b      	bics	r3, r1
     e24:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     e26:	2302      	movs	r3, #2
     e28:	466a      	mov	r2, sp
     e2a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e2c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e2e:	4d1d      	ldr	r5, [pc, #116]	; (ea4 <system_clock_init+0x94>)
     e30:	b2e0      	uxtb	r0, r4
     e32:	4669      	mov	r1, sp
     e34:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e36:	3401      	adds	r4, #1
     e38:	2c25      	cmp	r4, #37	; 0x25
     e3a:	d1f9      	bne.n	e30 <system_clock_init+0x20>
	config->run_in_standby  = false;
     e3c:	a803      	add	r0, sp, #12
     e3e:	2400      	movs	r4, #0
     e40:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     e42:	2501      	movs	r5, #1
     e44:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e46:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e48:	4b17      	ldr	r3, [pc, #92]	; (ea8 <system_clock_init+0x98>)
     e4a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e4c:	2006      	movs	r0, #6
     e4e:	4b17      	ldr	r3, [pc, #92]	; (eac <system_clock_init+0x9c>)
     e50:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e52:	4b17      	ldr	r3, [pc, #92]	; (eb0 <system_clock_init+0xa0>)
     e54:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e56:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     e58:	466b      	mov	r3, sp
     e5a:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     e5c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     e5e:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     e60:	2304      	movs	r3, #4
     e62:	466a      	mov	r2, sp
     e64:	7013      	strb	r3, [r2, #0]
     e66:	4669      	mov	r1, sp
     e68:	2001      	movs	r0, #1
     e6a:	4f12      	ldr	r7, [pc, #72]	; (eb4 <system_clock_init+0xa4>)
     e6c:	47b8      	blx	r7
     e6e:	2001      	movs	r0, #1
     e70:	4e11      	ldr	r6, [pc, #68]	; (eb8 <system_clock_init+0xa8>)
     e72:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
     e74:	4b11      	ldr	r3, [pc, #68]	; (ebc <system_clock_init+0xac>)
     e76:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e78:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e7a:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e7c:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     e7e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     e80:	466b      	mov	r3, sp
     e82:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e84:	2306      	movs	r3, #6
     e86:	466a      	mov	r2, sp
     e88:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     e8a:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     e8c:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e8e:	4669      	mov	r1, sp
     e90:	2000      	movs	r0, #0
     e92:	47b8      	blx	r7
     e94:	2000      	movs	r0, #0
     e96:	47b0      	blx	r6
#endif
}
     e98:	b005      	add	sp, #20
     e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e9c:	40000800 	.word	0x40000800
     ea0:	41004000 	.word	0x41004000
     ea4:	000010f9 	.word	0x000010f9
     ea8:	00000d2d 	.word	0x00000d2d
     eac:	00000d69 	.word	0x00000d69
     eb0:	00000ec1 	.word	0x00000ec1
     eb4:	00000ee5 	.word	0x00000ee5
     eb8:	00000f9d 	.word	0x00000f9d
     ebc:	40000400 	.word	0x40000400

00000ec0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     ec0:	4a06      	ldr	r2, [pc, #24]	; (edc <system_gclk_init+0x1c>)
     ec2:	6993      	ldr	r3, [r2, #24]
     ec4:	2108      	movs	r1, #8
     ec6:	430b      	orrs	r3, r1
     ec8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     eca:	2201      	movs	r2, #1
     ecc:	4b04      	ldr	r3, [pc, #16]	; (ee0 <system_gclk_init+0x20>)
     ece:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     ed0:	0019      	movs	r1, r3
     ed2:	780b      	ldrb	r3, [r1, #0]
     ed4:	4213      	tst	r3, r2
     ed6:	d1fc      	bne.n	ed2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     ed8:	4770      	bx	lr
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	40000400 	.word	0x40000400
     ee0:	40000c00 	.word	0x40000c00

00000ee4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ee4:	b570      	push	{r4, r5, r6, lr}
     ee6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     ee8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     eea:	780d      	ldrb	r5, [r1, #0]
     eec:	022d      	lsls	r5, r5, #8
     eee:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     ef0:	784b      	ldrb	r3, [r1, #1]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d002      	beq.n	efc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ef6:	2380      	movs	r3, #128	; 0x80
     ef8:	02db      	lsls	r3, r3, #11
     efa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     efc:	7a4b      	ldrb	r3, [r1, #9]
     efe:	2b00      	cmp	r3, #0
     f00:	d002      	beq.n	f08 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     f02:	2380      	movs	r3, #128	; 0x80
     f04:	031b      	lsls	r3, r3, #12
     f06:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     f08:	6848      	ldr	r0, [r1, #4]
     f0a:	2801      	cmp	r0, #1
     f0c:	d910      	bls.n	f30 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f0e:	1e43      	subs	r3, r0, #1
     f10:	4218      	tst	r0, r3
     f12:	d134      	bne.n	f7e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f14:	2802      	cmp	r0, #2
     f16:	d930      	bls.n	f7a <system_gclk_gen_set_config+0x96>
     f18:	2302      	movs	r3, #2
     f1a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     f1c:	3201      	adds	r2, #1
						mask <<= 1) {
     f1e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f20:	4298      	cmp	r0, r3
     f22:	d8fb      	bhi.n	f1c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f24:	0212      	lsls	r2, r2, #8
     f26:	4332      	orrs	r2, r6
     f28:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f2a:	2380      	movs	r3, #128	; 0x80
     f2c:	035b      	lsls	r3, r3, #13
     f2e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f30:	7a0b      	ldrb	r3, [r1, #8]
     f32:	2b00      	cmp	r3, #0
     f34:	d002      	beq.n	f3c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f36:	2380      	movs	r3, #128	; 0x80
     f38:	039b      	lsls	r3, r3, #14
     f3a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f3c:	4a13      	ldr	r2, [pc, #76]	; (f8c <system_gclk_gen_set_config+0xa8>)
     f3e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     f40:	b25b      	sxtb	r3, r3
     f42:	2b00      	cmp	r3, #0
     f44:	dbfb      	blt.n	f3e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f46:	4b12      	ldr	r3, [pc, #72]	; (f90 <system_gclk_gen_set_config+0xac>)
     f48:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f4a:	4b12      	ldr	r3, [pc, #72]	; (f94 <system_gclk_gen_set_config+0xb0>)
     f4c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f4e:	4a0f      	ldr	r2, [pc, #60]	; (f8c <system_gclk_gen_set_config+0xa8>)
     f50:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f52:	b25b      	sxtb	r3, r3
     f54:	2b00      	cmp	r3, #0
     f56:	dbfb      	blt.n	f50 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f58:	4b0c      	ldr	r3, [pc, #48]	; (f8c <system_gclk_gen_set_config+0xa8>)
     f5a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f5c:	001a      	movs	r2, r3
     f5e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     f60:	b25b      	sxtb	r3, r3
     f62:	2b00      	cmp	r3, #0
     f64:	dbfb      	blt.n	f5e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f66:	4a09      	ldr	r2, [pc, #36]	; (f8c <system_gclk_gen_set_config+0xa8>)
     f68:	6853      	ldr	r3, [r2, #4]
     f6a:	2180      	movs	r1, #128	; 0x80
     f6c:	0249      	lsls	r1, r1, #9
     f6e:	400b      	ands	r3, r1
     f70:	431d      	orrs	r5, r3
     f72:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f74:	4b08      	ldr	r3, [pc, #32]	; (f98 <system_gclk_gen_set_config+0xb4>)
     f76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f78:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     f7a:	2200      	movs	r2, #0
     f7c:	e7d2      	b.n	f24 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     f7e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     f80:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f82:	2380      	movs	r3, #128	; 0x80
     f84:	029b      	lsls	r3, r3, #10
     f86:	431d      	orrs	r5, r3
     f88:	e7d2      	b.n	f30 <system_gclk_gen_set_config+0x4c>
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	40000c00 	.word	0x40000c00
     f90:	00000141 	.word	0x00000141
     f94:	40000c08 	.word	0x40000c08
     f98:	00000181 	.word	0x00000181

00000f9c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f9c:	b510      	push	{r4, lr}
     f9e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fa0:	4a0b      	ldr	r2, [pc, #44]	; (fd0 <system_gclk_gen_enable+0x34>)
     fa2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fa4:	b25b      	sxtb	r3, r3
     fa6:	2b00      	cmp	r3, #0
     fa8:	dbfb      	blt.n	fa2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     faa:	4b0a      	ldr	r3, [pc, #40]	; (fd4 <system_gclk_gen_enable+0x38>)
     fac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fae:	4b0a      	ldr	r3, [pc, #40]	; (fd8 <system_gclk_gen_enable+0x3c>)
     fb0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fb2:	4a07      	ldr	r2, [pc, #28]	; (fd0 <system_gclk_gen_enable+0x34>)
     fb4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fb6:	b25b      	sxtb	r3, r3
     fb8:	2b00      	cmp	r3, #0
     fba:	dbfb      	blt.n	fb4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     fbc:	4a04      	ldr	r2, [pc, #16]	; (fd0 <system_gclk_gen_enable+0x34>)
     fbe:	6851      	ldr	r1, [r2, #4]
     fc0:	2380      	movs	r3, #128	; 0x80
     fc2:	025b      	lsls	r3, r3, #9
     fc4:	430b      	orrs	r3, r1
     fc6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     fc8:	4b04      	ldr	r3, [pc, #16]	; (fdc <system_gclk_gen_enable+0x40>)
     fca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fcc:	bd10      	pop	{r4, pc}
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	40000c00 	.word	0x40000c00
     fd4:	00000141 	.word	0x00000141
     fd8:	40000c04 	.word	0x40000c04
     fdc:	00000181 	.word	0x00000181

00000fe0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fe4:	4a1a      	ldr	r2, [pc, #104]	; (1050 <system_gclk_gen_get_hz+0x70>)
     fe6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fe8:	b25b      	sxtb	r3, r3
     fea:	2b00      	cmp	r3, #0
     fec:	dbfb      	blt.n	fe6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     fee:	4b19      	ldr	r3, [pc, #100]	; (1054 <system_gclk_gen_get_hz+0x74>)
     ff0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ff2:	4b19      	ldr	r3, [pc, #100]	; (1058 <system_gclk_gen_get_hz+0x78>)
     ff4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ff6:	4a16      	ldr	r2, [pc, #88]	; (1050 <system_gclk_gen_get_hz+0x70>)
     ff8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ffa:	b25b      	sxtb	r3, r3
     ffc:	2b00      	cmp	r3, #0
     ffe:	dbfb      	blt.n	ff8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1000:	4e13      	ldr	r6, [pc, #76]	; (1050 <system_gclk_gen_get_hz+0x70>)
    1002:	6870      	ldr	r0, [r6, #4]
    1004:	04c0      	lsls	r0, r0, #19
    1006:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1008:	4b14      	ldr	r3, [pc, #80]	; (105c <system_gclk_gen_get_hz+0x7c>)
    100a:	4798      	blx	r3
    100c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    100e:	4b12      	ldr	r3, [pc, #72]	; (1058 <system_gclk_gen_get_hz+0x78>)
    1010:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1012:	6876      	ldr	r6, [r6, #4]
    1014:	02f6      	lsls	r6, r6, #11
    1016:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1018:	4b11      	ldr	r3, [pc, #68]	; (1060 <system_gclk_gen_get_hz+0x80>)
    101a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    101c:	4a0c      	ldr	r2, [pc, #48]	; (1050 <system_gclk_gen_get_hz+0x70>)
    101e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1020:	b25b      	sxtb	r3, r3
    1022:	2b00      	cmp	r3, #0
    1024:	dbfb      	blt.n	101e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1026:	4b0a      	ldr	r3, [pc, #40]	; (1050 <system_gclk_gen_get_hz+0x70>)
    1028:	689c      	ldr	r4, [r3, #8]
    102a:	0224      	lsls	r4, r4, #8
    102c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    102e:	4b0d      	ldr	r3, [pc, #52]	; (1064 <system_gclk_gen_get_hz+0x84>)
    1030:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1032:	2e00      	cmp	r6, #0
    1034:	d107      	bne.n	1046 <system_gclk_gen_get_hz+0x66>
    1036:	2c01      	cmp	r4, #1
    1038:	d907      	bls.n	104a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    103a:	0021      	movs	r1, r4
    103c:	0028      	movs	r0, r5
    103e:	4b0a      	ldr	r3, [pc, #40]	; (1068 <system_gclk_gen_get_hz+0x88>)
    1040:	4798      	blx	r3
    1042:	0005      	movs	r5, r0
    1044:	e001      	b.n	104a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1046:	3401      	adds	r4, #1
    1048:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    104a:	0028      	movs	r0, r5
    104c:	bd70      	pop	{r4, r5, r6, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	40000c00 	.word	0x40000c00
    1054:	00000141 	.word	0x00000141
    1058:	40000c04 	.word	0x40000c04
    105c:	00000c99 	.word	0x00000c99
    1060:	40000c08 	.word	0x40000c08
    1064:	00000181 	.word	0x00000181
    1068:	00001505 	.word	0x00001505

0000106c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    106c:	b510      	push	{r4, lr}
    106e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1070:	4b06      	ldr	r3, [pc, #24]	; (108c <system_gclk_chan_enable+0x20>)
    1072:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1074:	4b06      	ldr	r3, [pc, #24]	; (1090 <system_gclk_chan_enable+0x24>)
    1076:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1078:	4a06      	ldr	r2, [pc, #24]	; (1094 <system_gclk_chan_enable+0x28>)
    107a:	8853      	ldrh	r3, [r2, #2]
    107c:	2180      	movs	r1, #128	; 0x80
    107e:	01c9      	lsls	r1, r1, #7
    1080:	430b      	orrs	r3, r1
    1082:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1084:	4b04      	ldr	r3, [pc, #16]	; (1098 <system_gclk_chan_enable+0x2c>)
    1086:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1088:	bd10      	pop	{r4, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	00000141 	.word	0x00000141
    1090:	40000c02 	.word	0x40000c02
    1094:	40000c00 	.word	0x40000c00
    1098:	00000181 	.word	0x00000181

0000109c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    109c:	b510      	push	{r4, lr}
    109e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10a0:	4b0f      	ldr	r3, [pc, #60]	; (10e0 <system_gclk_chan_disable+0x44>)
    10a2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10a4:	4b0f      	ldr	r3, [pc, #60]	; (10e4 <system_gclk_chan_disable+0x48>)
    10a6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    10a8:	4a0f      	ldr	r2, [pc, #60]	; (10e8 <system_gclk_chan_disable+0x4c>)
    10aa:	8853      	ldrh	r3, [r2, #2]
    10ac:	051b      	lsls	r3, r3, #20
    10ae:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    10b0:	8853      	ldrh	r3, [r2, #2]
    10b2:	490e      	ldr	r1, [pc, #56]	; (10ec <system_gclk_chan_disable+0x50>)
    10b4:	400b      	ands	r3, r1
    10b6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    10b8:	8853      	ldrh	r3, [r2, #2]
    10ba:	490d      	ldr	r1, [pc, #52]	; (10f0 <system_gclk_chan_disable+0x54>)
    10bc:	400b      	ands	r3, r1
    10be:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    10c0:	0011      	movs	r1, r2
    10c2:	2280      	movs	r2, #128	; 0x80
    10c4:	01d2      	lsls	r2, r2, #7
    10c6:	884b      	ldrh	r3, [r1, #2]
    10c8:	4213      	tst	r3, r2
    10ca:	d1fc      	bne.n	10c6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    10cc:	4906      	ldr	r1, [pc, #24]	; (10e8 <system_gclk_chan_disable+0x4c>)
    10ce:	884a      	ldrh	r2, [r1, #2]
    10d0:	0203      	lsls	r3, r0, #8
    10d2:	4806      	ldr	r0, [pc, #24]	; (10ec <system_gclk_chan_disable+0x50>)
    10d4:	4002      	ands	r2, r0
    10d6:	4313      	orrs	r3, r2
    10d8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    10da:	4b06      	ldr	r3, [pc, #24]	; (10f4 <system_gclk_chan_disable+0x58>)
    10dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10de:	bd10      	pop	{r4, pc}
    10e0:	00000141 	.word	0x00000141
    10e4:	40000c02 	.word	0x40000c02
    10e8:	40000c00 	.word	0x40000c00
    10ec:	fffff0ff 	.word	0xfffff0ff
    10f0:	ffffbfff 	.word	0xffffbfff
    10f4:	00000181 	.word	0x00000181

000010f8 <system_gclk_chan_set_config>:
{
    10f8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    10fa:	780c      	ldrb	r4, [r1, #0]
    10fc:	0224      	lsls	r4, r4, #8
    10fe:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1100:	4b02      	ldr	r3, [pc, #8]	; (110c <system_gclk_chan_set_config+0x14>)
    1102:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1104:	b2a4      	uxth	r4, r4
    1106:	4b02      	ldr	r3, [pc, #8]	; (1110 <system_gclk_chan_set_config+0x18>)
    1108:	805c      	strh	r4, [r3, #2]
}
    110a:	bd10      	pop	{r4, pc}
    110c:	0000109d 	.word	0x0000109d
    1110:	40000c00 	.word	0x40000c00

00001114 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1114:	b510      	push	{r4, lr}
    1116:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1118:	4b06      	ldr	r3, [pc, #24]	; (1134 <system_gclk_chan_get_hz+0x20>)
    111a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    111c:	4b06      	ldr	r3, [pc, #24]	; (1138 <system_gclk_chan_get_hz+0x24>)
    111e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1120:	4b06      	ldr	r3, [pc, #24]	; (113c <system_gclk_chan_get_hz+0x28>)
    1122:	885c      	ldrh	r4, [r3, #2]
    1124:	0524      	lsls	r4, r4, #20
    1126:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1128:	4b05      	ldr	r3, [pc, #20]	; (1140 <system_gclk_chan_get_hz+0x2c>)
    112a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    112c:	0020      	movs	r0, r4
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <system_gclk_chan_get_hz+0x30>)
    1130:	4798      	blx	r3
}
    1132:	bd10      	pop	{r4, pc}
    1134:	00000141 	.word	0x00000141
    1138:	40000c02 	.word	0x40000c02
    113c:	40000c00 	.word	0x40000c00
    1140:	00000181 	.word	0x00000181
    1144:	00000fe1 	.word	0x00000fe1

00001148 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1148:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    114a:	78d3      	ldrb	r3, [r2, #3]
    114c:	2b00      	cmp	r3, #0
    114e:	d135      	bne.n	11bc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1150:	7813      	ldrb	r3, [r2, #0]
    1152:	2b80      	cmp	r3, #128	; 0x80
    1154:	d029      	beq.n	11aa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1156:	061b      	lsls	r3, r3, #24
    1158:	2480      	movs	r4, #128	; 0x80
    115a:	0264      	lsls	r4, r4, #9
    115c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    115e:	7854      	ldrb	r4, [r2, #1]
    1160:	2502      	movs	r5, #2
    1162:	43ac      	bics	r4, r5
    1164:	d106      	bne.n	1174 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1166:	7894      	ldrb	r4, [r2, #2]
    1168:	2c00      	cmp	r4, #0
    116a:	d120      	bne.n	11ae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    116c:	2480      	movs	r4, #128	; 0x80
    116e:	02a4      	lsls	r4, r4, #10
    1170:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1172:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1174:	7854      	ldrb	r4, [r2, #1]
    1176:	3c01      	subs	r4, #1
    1178:	2c01      	cmp	r4, #1
    117a:	d91c      	bls.n	11b6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    117c:	040d      	lsls	r5, r1, #16
    117e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1180:	24a0      	movs	r4, #160	; 0xa0
    1182:	05e4      	lsls	r4, r4, #23
    1184:	432c      	orrs	r4, r5
    1186:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1188:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    118a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    118c:	24d0      	movs	r4, #208	; 0xd0
    118e:	0624      	lsls	r4, r4, #24
    1190:	432c      	orrs	r4, r5
    1192:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1194:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1196:	78d4      	ldrb	r4, [r2, #3]
    1198:	2c00      	cmp	r4, #0
    119a:	d122      	bne.n	11e2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    119c:	035b      	lsls	r3, r3, #13
    119e:	d51c      	bpl.n	11da <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    11a0:	7893      	ldrb	r3, [r2, #2]
    11a2:	2b01      	cmp	r3, #1
    11a4:	d01e      	beq.n	11e4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    11a6:	6141      	str	r1, [r0, #20]
    11a8:	e017      	b.n	11da <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    11aa:	2300      	movs	r3, #0
    11ac:	e7d7      	b.n	115e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    11ae:	24c0      	movs	r4, #192	; 0xc0
    11b0:	02e4      	lsls	r4, r4, #11
    11b2:	4323      	orrs	r3, r4
    11b4:	e7dd      	b.n	1172 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    11b6:	4c0d      	ldr	r4, [pc, #52]	; (11ec <_system_pinmux_config+0xa4>)
    11b8:	4023      	ands	r3, r4
    11ba:	e7df      	b.n	117c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    11bc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    11be:	040c      	lsls	r4, r1, #16
    11c0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11c2:	23a0      	movs	r3, #160	; 0xa0
    11c4:	05db      	lsls	r3, r3, #23
    11c6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11c8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    11ca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11cc:	23d0      	movs	r3, #208	; 0xd0
    11ce:	061b      	lsls	r3, r3, #24
    11d0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11d2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    11d4:	78d3      	ldrb	r3, [r2, #3]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d103      	bne.n	11e2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11da:	7853      	ldrb	r3, [r2, #1]
    11dc:	3b01      	subs	r3, #1
    11de:	2b01      	cmp	r3, #1
    11e0:	d902      	bls.n	11e8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    11e2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    11e4:	6181      	str	r1, [r0, #24]
    11e6:	e7f8      	b.n	11da <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    11e8:	6081      	str	r1, [r0, #8]
}
    11ea:	e7fa      	b.n	11e2 <_system_pinmux_config+0x9a>
    11ec:	fffbffff 	.word	0xfffbffff

000011f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    11f0:	b510      	push	{r4, lr}
    11f2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11f4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11f8:	2900      	cmp	r1, #0
    11fa:	d104      	bne.n	1206 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    11fc:	0943      	lsrs	r3, r0, #5
    11fe:	01db      	lsls	r3, r3, #7
    1200:	4905      	ldr	r1, [pc, #20]	; (1218 <system_pinmux_pin_set_config+0x28>)
    1202:	468c      	mov	ip, r1
    1204:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1206:	241f      	movs	r4, #31
    1208:	4020      	ands	r0, r4
    120a:	2101      	movs	r1, #1
    120c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    120e:	0018      	movs	r0, r3
    1210:	4b02      	ldr	r3, [pc, #8]	; (121c <system_pinmux_pin_set_config+0x2c>)
    1212:	4798      	blx	r3
}
    1214:	bd10      	pop	{r4, pc}
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	41004400 	.word	0x41004400
    121c:	00001149 	.word	0x00001149

00001220 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1220:	4770      	bx	lr
	...

00001224 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1224:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1226:	4b05      	ldr	r3, [pc, #20]	; (123c <system_init+0x18>)
    1228:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    122a:	4b05      	ldr	r3, [pc, #20]	; (1240 <system_init+0x1c>)
    122c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    122e:	4b05      	ldr	r3, [pc, #20]	; (1244 <system_init+0x20>)
    1230:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1232:	4b05      	ldr	r3, [pc, #20]	; (1248 <system_init+0x24>)
    1234:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1236:	4b05      	ldr	r3, [pc, #20]	; (124c <system_init+0x28>)
    1238:	4798      	blx	r3
}
    123a:	bd10      	pop	{r4, pc}
    123c:	00000e11 	.word	0x00000e11
    1240:	000001b1 	.word	0x000001b1
    1244:	00001221 	.word	0x00001221
    1248:	00001221 	.word	0x00001221
    124c:	00001221 	.word	0x00001221

00001250 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1250:	e7fe      	b.n	1250 <Dummy_Handler>
	...

00001254 <Reset_Handler>:
{
    1254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1256:	4a2a      	ldr	r2, [pc, #168]	; (1300 <Reset_Handler+0xac>)
    1258:	4b2a      	ldr	r3, [pc, #168]	; (1304 <Reset_Handler+0xb0>)
    125a:	429a      	cmp	r2, r3
    125c:	d011      	beq.n	1282 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    125e:	001a      	movs	r2, r3
    1260:	4b29      	ldr	r3, [pc, #164]	; (1308 <Reset_Handler+0xb4>)
    1262:	429a      	cmp	r2, r3
    1264:	d20d      	bcs.n	1282 <Reset_Handler+0x2e>
    1266:	4a29      	ldr	r2, [pc, #164]	; (130c <Reset_Handler+0xb8>)
    1268:	3303      	adds	r3, #3
    126a:	1a9b      	subs	r3, r3, r2
    126c:	089b      	lsrs	r3, r3, #2
    126e:	3301      	adds	r3, #1
    1270:	009b      	lsls	r3, r3, #2
    1272:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1274:	4823      	ldr	r0, [pc, #140]	; (1304 <Reset_Handler+0xb0>)
    1276:	4922      	ldr	r1, [pc, #136]	; (1300 <Reset_Handler+0xac>)
    1278:	588c      	ldr	r4, [r1, r2]
    127a:	5084      	str	r4, [r0, r2]
    127c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    127e:	429a      	cmp	r2, r3
    1280:	d1fa      	bne.n	1278 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1282:	4a23      	ldr	r2, [pc, #140]	; (1310 <Reset_Handler+0xbc>)
    1284:	4b23      	ldr	r3, [pc, #140]	; (1314 <Reset_Handler+0xc0>)
    1286:	429a      	cmp	r2, r3
    1288:	d20a      	bcs.n	12a0 <Reset_Handler+0x4c>
    128a:	43d3      	mvns	r3, r2
    128c:	4921      	ldr	r1, [pc, #132]	; (1314 <Reset_Handler+0xc0>)
    128e:	185b      	adds	r3, r3, r1
    1290:	2103      	movs	r1, #3
    1292:	438b      	bics	r3, r1
    1294:	3304      	adds	r3, #4
    1296:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1298:	2100      	movs	r1, #0
    129a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    129c:	4293      	cmp	r3, r2
    129e:	d1fc      	bne.n	129a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    12a0:	4a1d      	ldr	r2, [pc, #116]	; (1318 <Reset_Handler+0xc4>)
    12a2:	21ff      	movs	r1, #255	; 0xff
    12a4:	4b1d      	ldr	r3, [pc, #116]	; (131c <Reset_Handler+0xc8>)
    12a6:	438b      	bics	r3, r1
    12a8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    12aa:	39fd      	subs	r1, #253	; 0xfd
    12ac:	2390      	movs	r3, #144	; 0x90
    12ae:	005b      	lsls	r3, r3, #1
    12b0:	4a1b      	ldr	r2, [pc, #108]	; (1320 <Reset_Handler+0xcc>)
    12b2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    12b4:	4a1b      	ldr	r2, [pc, #108]	; (1324 <Reset_Handler+0xd0>)
    12b6:	78d3      	ldrb	r3, [r2, #3]
    12b8:	2503      	movs	r5, #3
    12ba:	43ab      	bics	r3, r5
    12bc:	2402      	movs	r4, #2
    12be:	4323      	orrs	r3, r4
    12c0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    12c2:	78d3      	ldrb	r3, [r2, #3]
    12c4:	270c      	movs	r7, #12
    12c6:	43bb      	bics	r3, r7
    12c8:	2608      	movs	r6, #8
    12ca:	4333      	orrs	r3, r6
    12cc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    12ce:	4b16      	ldr	r3, [pc, #88]	; (1328 <Reset_Handler+0xd4>)
    12d0:	7b98      	ldrb	r0, [r3, #14]
    12d2:	2230      	movs	r2, #48	; 0x30
    12d4:	4390      	bics	r0, r2
    12d6:	2220      	movs	r2, #32
    12d8:	4310      	orrs	r0, r2
    12da:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    12dc:	7b99      	ldrb	r1, [r3, #14]
    12de:	43b9      	bics	r1, r7
    12e0:	4331      	orrs	r1, r6
    12e2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    12e4:	7b9a      	ldrb	r2, [r3, #14]
    12e6:	43aa      	bics	r2, r5
    12e8:	4322      	orrs	r2, r4
    12ea:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    12ec:	4a0f      	ldr	r2, [pc, #60]	; (132c <Reset_Handler+0xd8>)
    12ee:	6853      	ldr	r3, [r2, #4]
    12f0:	2180      	movs	r1, #128	; 0x80
    12f2:	430b      	orrs	r3, r1
    12f4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    12f6:	4b0e      	ldr	r3, [pc, #56]	; (1330 <Reset_Handler+0xdc>)
    12f8:	4798      	blx	r3
        main();
    12fa:	4b0e      	ldr	r3, [pc, #56]	; (1334 <Reset_Handler+0xe0>)
    12fc:	4798      	blx	r3
    12fe:	e7fe      	b.n	12fe <Reset_Handler+0xaa>
    1300:	0000302c 	.word	0x0000302c
    1304:	20000000 	.word	0x20000000
    1308:	20000008 	.word	0x20000008
    130c:	20000004 	.word	0x20000004
    1310:	20000008 	.word	0x20000008
    1314:	200000d8 	.word	0x200000d8
    1318:	e000ed00 	.word	0xe000ed00
    131c:	00000000 	.word	0x00000000
    1320:	41007000 	.word	0x41007000
    1324:	41005000 	.word	0x41005000
    1328:	41004800 	.word	0x41004800
    132c:	41004000 	.word	0x41004000
    1330:	00002ee5 	.word	0x00002ee5
    1334:	00001415 	.word	0x00001415

00001338 <i2c_write_complete_callback>:

void i2c_write_complete_callback(
  struct i2c_master_module *
  const module) {

}
    1338:	4770      	bx	lr

0000133a <i2c_read_complete_callback>:

void i2c_read_complete_callback(
  struct i2c_master_module *
  const module) {
}
    133a:	4770      	bx	lr

0000133c <configure_i2c>:

void configure_i2c(void) {
    133c:	b530      	push	{r4, r5, lr}
    133e:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1340:	ab01      	add	r3, sp, #4
    1342:	2264      	movs	r2, #100	; 0x64
    1344:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1346:	4a21      	ldr	r2, [pc, #132]	; (13cc <configure_i2c+0x90>)
    1348:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    134a:	2200      	movs	r2, #0
    134c:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    134e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1350:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1352:	2180      	movs	r1, #128	; 0x80
    1354:	0389      	lsls	r1, r1, #14
    1356:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1358:	2101      	movs	r1, #1
    135a:	4249      	negs	r1, r1
    135c:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    135e:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1360:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1362:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    1364:	3125      	adds	r1, #37	; 0x25
    1366:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1368:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    136a:	3108      	adds	r1, #8
    136c:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    136e:	3101      	adds	r1, #1
    1370:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1372:	3101      	adds	r1, #1
    1374:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1376:	32d7      	adds	r2, #215	; 0xd7
    1378:	861a      	strh	r2, [r3, #48]	; 0x30
  config_i2c_master.pinmux_pad0 = CONF_MASTER_SDA_PINMUX;
  config_i2c_master.pinmux_pad1 = CONF_MASTER_SCK_PINMUX;
  #endif


  while (i2c_master_init( & i2c_master_instance, CONF_I2C_MASTER_MODULE, & config_i2c_master) !=
    137a:	4d15      	ldr	r5, [pc, #84]	; (13d0 <configure_i2c+0x94>)
    137c:	4c15      	ldr	r4, [pc, #84]	; (13d4 <configure_i2c+0x98>)
    137e:	aa01      	add	r2, sp, #4
    1380:	4915      	ldr	r1, [pc, #84]	; (13d8 <configure_i2c+0x9c>)
    1382:	0028      	movs	r0, r5
    1384:	47a0      	blx	r4
    1386:	2800      	cmp	r0, #0
    1388:	d1f9      	bne.n	137e <configure_i2c+0x42>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    138a:	4b11      	ldr	r3, [pc, #68]	; (13d0 <configure_i2c+0x94>)
    138c:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    138e:	2207      	movs	r2, #7
    1390:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1392:	421a      	tst	r2, r3
    1394:	d1fc      	bne.n	1390 <configure_i2c+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1396:	6823      	ldr	r3, [r4, #0]
    1398:	2202      	movs	r2, #2
    139a:	4313      	orrs	r3, r2
    139c:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    139e:	4d0c      	ldr	r5, [pc, #48]	; (13d0 <configure_i2c+0x94>)
    13a0:	6828      	ldr	r0, [r5, #0]
    13a2:	4b0e      	ldr	r3, [pc, #56]	; (13dc <configure_i2c+0xa0>)
    13a4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    13a6:	231f      	movs	r3, #31
    13a8:	4018      	ands	r0, r3
    13aa:	3b1e      	subs	r3, #30
    13ac:	4083      	lsls	r3, r0
    13ae:	4a0c      	ldr	r2, [pc, #48]	; (13e0 <configure_i2c+0xa4>)
    13b0:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    13b2:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    13b4:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    13b6:	2110      	movs	r1, #16
    13b8:	8b62      	ldrh	r2, [r4, #26]
    13ba:	420a      	tst	r2, r1
    13bc:	d104      	bne.n	13c8 <configure_i2c+0x8c>
		timeout_counter++;
    13be:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    13c0:	4283      	cmp	r3, r0
    13c2:	d3f9      	bcc.n	13b8 <configure_i2c+0x7c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    13c4:	2310      	movs	r3, #16
    13c6:	8363      	strh	r3, [r4, #26]
    STATUS_OK);

  i2c_master_enable( & i2c_master_instance);

}
    13c8:	b00f      	add	sp, #60	; 0x3c
    13ca:	bd30      	pop	{r4, r5, pc}
    13cc:	00000d48 	.word	0x00000d48
    13d0:	200000a4 	.word	0x200000a4
    13d4:	0000020d 	.word	0x0000020d
    13d8:	42001000 	.word	0x42001000
    13dc:	00000c09 	.word	0x00000c09
    13e0:	e000e100 	.word	0xe000e100

000013e4 <configure_i2c_callbacks>:



void configure_i2c_callbacks(void) {
    13e4:	b570      	push	{r4, r5, r6, lr}

  i2c_master_register_callback( & i2c_master_instance, i2c_write_complete_callback,
    13e6:	4c07      	ldr	r4, [pc, #28]	; (1404 <configure_i2c_callbacks+0x20>)
    13e8:	2200      	movs	r2, #0
    13ea:	4907      	ldr	r1, [pc, #28]	; (1408 <configure_i2c_callbacks+0x24>)
    13ec:	0020      	movs	r0, r4
    13ee:	4d07      	ldr	r5, [pc, #28]	; (140c <configure_i2c_callbacks+0x28>)
    13f0:	47a8      	blx	r5
    I2C_MASTER_CALLBACK_WRITE_COMPLETE);

  i2c_master_register_callback( & i2c_master_instance, i2c_read_complete_callback,
    13f2:	2201      	movs	r2, #1
    13f4:	4906      	ldr	r1, [pc, #24]	; (1410 <configure_i2c_callbacks+0x2c>)
    13f6:	0020      	movs	r0, r4
    13f8:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    13fa:	7e63      	ldrb	r3, [r4, #25]
    13fc:	2201      	movs	r2, #1
    13fe:	4313      	orrs	r3, r2
    1400:	7663      	strb	r3, [r4, #25]
    I2C_MASTER_CALLBACK_READ_COMPLETE);
	
  i2c_master_enable_callback( & i2c_master_instance,
    I2C_MASTER_CALLBACK_WRITE_COMPLETE);

}
    1402:	bd70      	pop	{r4, r5, r6, pc}
    1404:	200000a4 	.word	0x200000a4
    1408:	00001339 	.word	0x00001339
    140c:	00000781 	.word	0x00000781
    1410:	0000133b 	.word	0x0000133b

00001414 <main>:


int main(void) {
    1414:	b570      	push	{r4, r5, r6, lr}
  system_init();
    1416:	4b2f      	ldr	r3, [pc, #188]	; (14d4 <main+0xc0>)
    1418:	4798      	blx	r3
  configure_i2c();
    141a:	4b2f      	ldr	r3, [pc, #188]	; (14d8 <main+0xc4>)
    141c:	4798      	blx	r3
  configure_i2c_callbacks();
    141e:	4b2f      	ldr	r3, [pc, #188]	; (14dc <main+0xc8>)
    1420:	4798      	blx	r3

  wr_packet.address = SLAVE_ADDRESS;
    1422:	4b2f      	ldr	r3, [pc, #188]	; (14e0 <main+0xcc>)
    1424:	2277      	movs	r2, #119	; 0x77
    1426:	801a      	strh	r2, [r3, #0]
  wr_packet.data_length = 1;
    1428:	2101      	movs	r1, #1
    142a:	8059      	strh	r1, [r3, #2]
  wr_packet.data = wr_buffer;
    142c:	492d      	ldr	r1, [pc, #180]	; (14e4 <main+0xd0>)
    142e:	6059      	str	r1, [r3, #4]
  rd_packet.address = SLAVE_ADDRESS;
    1430:	4b2d      	ldr	r3, [pc, #180]	; (14e8 <main+0xd4>)
    1432:	801a      	strh	r2, [r3, #0]
  //rd_packet.data_length = 2;
  rd_packet.data = rd_buffer;
    1434:	4a2d      	ldr	r2, [pc, #180]	; (14ec <main+0xd8>)
    1436:	605a      	str	r2, [r3, #4]
	return (port_base->IN.reg & pin_mask);
    1438:	4d2d      	ldr	r5, [pc, #180]	; (14f0 <main+0xdc>)
	/* Check sanity */
	Assert(module);
	Assert(module->hw);

	/* Return current status code */
	return module->status;
    143a:	2425      	movs	r4, #37	; 0x25
      //while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);

      wr_buffer[0] = 0xF4;
      i2c_master_write_packet_job( & i2c_master_instance, & wr_packet);
      while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
      rd_packet.data_length = 2;
    143c:	2602      	movs	r6, #2
    143e:	2280      	movs	r2, #128	; 0x80
    1440:	0212      	lsls	r2, r2, #8
    1442:	6a2b      	ldr	r3, [r5, #32]
    if (!port_pin_get_input_level(BUTTON_0_PIN)) {
    1444:	4213      	tst	r3, r2
    1446:	d1fc      	bne.n	1442 <main+0x2e>
    1448:	2280      	movs	r2, #128	; 0x80
    144a:	0212      	lsls	r2, r2, #8
    144c:	6a2b      	ldr	r3, [r5, #32]
      while (!port_pin_get_input_level(BUTTON_0_PIN)) {}
    144e:	4213      	tst	r3, r2
    1450:	d0fc      	beq.n	144c <main+0x38>
      wr_buffer[0] = 0xF4;
    1452:	22f4      	movs	r2, #244	; 0xf4
    1454:	4b23      	ldr	r3, [pc, #140]	; (14e4 <main+0xd0>)
    1456:	701a      	strb	r2, [r3, #0]
      i2c_master_write_packet_job( & i2c_master_instance, & wr_packet);
    1458:	4921      	ldr	r1, [pc, #132]	; (14e0 <main+0xcc>)
    145a:	4826      	ldr	r0, [pc, #152]	; (14f4 <main+0xe0>)
    145c:	4b26      	ldr	r3, [pc, #152]	; (14f8 <main+0xe4>)
    145e:	4798      	blx	r3
    1460:	4a24      	ldr	r2, [pc, #144]	; (14f4 <main+0xe0>)
    1462:	5d13      	ldrb	r3, [r2, r4]
      while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    1464:	2b00      	cmp	r3, #0
    1466:	d1fc      	bne.n	1462 <main+0x4e>
      rd_packet.data_length = 2;
    1468:	491f      	ldr	r1, [pc, #124]	; (14e8 <main+0xd4>)
    146a:	804e      	strh	r6, [r1, #2]
      i2c_master_read_packet_job( & i2c_master_instance, & rd_packet);
    146c:	4821      	ldr	r0, [pc, #132]	; (14f4 <main+0xe0>)
    146e:	4b23      	ldr	r3, [pc, #140]	; (14fc <main+0xe8>)
    1470:	4798      	blx	r3
    1472:	4a20      	ldr	r2, [pc, #128]	; (14f4 <main+0xe0>)
    1474:	5d13      	ldrb	r3, [r2, r4]
      while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    1476:	2b00      	cmp	r3, #0
    1478:	d1fc      	bne.n	1474 <main+0x60>
	  
	  
	  wr_buffer[0] = 0x2E;
    147a:	222e      	movs	r2, #46	; 0x2e
    147c:	4b19      	ldr	r3, [pc, #100]	; (14e4 <main+0xd0>)
    147e:	701a      	strb	r2, [r3, #0]
	  i2c_master_write_packet_job( & i2c_master_instance, & wr_packet);
    1480:	4917      	ldr	r1, [pc, #92]	; (14e0 <main+0xcc>)
    1482:	481c      	ldr	r0, [pc, #112]	; (14f4 <main+0xe0>)
    1484:	4b1c      	ldr	r3, [pc, #112]	; (14f8 <main+0xe4>)
    1486:	4798      	blx	r3
    1488:	4a1a      	ldr	r2, [pc, #104]	; (14f4 <main+0xe0>)
    148a:	5d13      	ldrb	r3, [r2, r4]
	  while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    148c:	2b00      	cmp	r3, #0
    148e:	d1fc      	bne.n	148a <main+0x76>
	  rd_packet.data_length = 2;
    1490:	4915      	ldr	r1, [pc, #84]	; (14e8 <main+0xd4>)
    1492:	804e      	strh	r6, [r1, #2]
	  i2c_master_read_packet_job( & i2c_master_instance, & rd_packet);
    1494:	4817      	ldr	r0, [pc, #92]	; (14f4 <main+0xe0>)
    1496:	4b19      	ldr	r3, [pc, #100]	; (14fc <main+0xe8>)
    1498:	4798      	blx	r3
    149a:	4a16      	ldr	r2, [pc, #88]	; (14f4 <main+0xe0>)
    149c:	5d13      	ldrb	r3, [r2, r4]
	  while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    149e:	2b00      	cmp	r3, #0
    14a0:	d1fc      	bne.n	149c <main+0x88>
	  
	  delay_us(100);
    14a2:	2064      	movs	r0, #100	; 0x64
    14a4:	4b16      	ldr	r3, [pc, #88]	; (1500 <main+0xec>)
    14a6:	4798      	blx	r3
	  
	  wr_buffer[0] = 0xF6;
    14a8:	22f6      	movs	r2, #246	; 0xf6
    14aa:	4b0e      	ldr	r3, [pc, #56]	; (14e4 <main+0xd0>)
    14ac:	701a      	strb	r2, [r3, #0]
	  i2c_master_write_packet_job( & i2c_master_instance, & wr_packet);
    14ae:	490c      	ldr	r1, [pc, #48]	; (14e0 <main+0xcc>)
    14b0:	4810      	ldr	r0, [pc, #64]	; (14f4 <main+0xe0>)
    14b2:	4b11      	ldr	r3, [pc, #68]	; (14f8 <main+0xe4>)
    14b4:	4798      	blx	r3
    14b6:	4a0f      	ldr	r2, [pc, #60]	; (14f4 <main+0xe0>)
    14b8:	5d13      	ldrb	r3, [r2, r4]
	  while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    14ba:	2b00      	cmp	r3, #0
    14bc:	d1fc      	bne.n	14b8 <main+0xa4>
	  rd_packet.data_length = 2;
    14be:	490a      	ldr	r1, [pc, #40]	; (14e8 <main+0xd4>)
    14c0:	804e      	strh	r6, [r1, #2]
	  i2c_master_read_packet_job( & i2c_master_instance, & rd_packet);
    14c2:	480c      	ldr	r0, [pc, #48]	; (14f4 <main+0xe0>)
    14c4:	4b0d      	ldr	r3, [pc, #52]	; (14fc <main+0xe8>)
    14c6:	4798      	blx	r3
    14c8:	4a0a      	ldr	r2, [pc, #40]	; (14f4 <main+0xe0>)
    14ca:	5d13      	ldrb	r3, [r2, r4]
	  while (i2c_master_get_job_status( & i2c_master_instance) != STATUS_OK);
    14cc:	2b00      	cmp	r3, #0
    14ce:	d1fc      	bne.n	14ca <main+0xb6>
    14d0:	e7b5      	b.n	143e <main+0x2a>
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	00001225 	.word	0x00001225
    14d8:	0000133d 	.word	0x0000133d
    14dc:	000013e5 	.word	0x000013e5
    14e0:	20000098 	.word	0x20000098
    14e4:	20000070 	.word	0x20000070
    14e8:	200000cc 	.word	0x200000cc
    14ec:	20000060 	.word	0x20000060
    14f0:	41004400 	.word	0x41004400
    14f4:	200000a4 	.word	0x200000a4
    14f8:	000007bd 	.word	0x000007bd
    14fc:	00000799 	.word	0x00000799
    1500:	00000115 	.word	0x00000115

00001504 <__udivsi3>:
    1504:	2200      	movs	r2, #0
    1506:	0843      	lsrs	r3, r0, #1
    1508:	428b      	cmp	r3, r1
    150a:	d374      	bcc.n	15f6 <__udivsi3+0xf2>
    150c:	0903      	lsrs	r3, r0, #4
    150e:	428b      	cmp	r3, r1
    1510:	d35f      	bcc.n	15d2 <__udivsi3+0xce>
    1512:	0a03      	lsrs	r3, r0, #8
    1514:	428b      	cmp	r3, r1
    1516:	d344      	bcc.n	15a2 <__udivsi3+0x9e>
    1518:	0b03      	lsrs	r3, r0, #12
    151a:	428b      	cmp	r3, r1
    151c:	d328      	bcc.n	1570 <__udivsi3+0x6c>
    151e:	0c03      	lsrs	r3, r0, #16
    1520:	428b      	cmp	r3, r1
    1522:	d30d      	bcc.n	1540 <__udivsi3+0x3c>
    1524:	22ff      	movs	r2, #255	; 0xff
    1526:	0209      	lsls	r1, r1, #8
    1528:	ba12      	rev	r2, r2
    152a:	0c03      	lsrs	r3, r0, #16
    152c:	428b      	cmp	r3, r1
    152e:	d302      	bcc.n	1536 <__udivsi3+0x32>
    1530:	1212      	asrs	r2, r2, #8
    1532:	0209      	lsls	r1, r1, #8
    1534:	d065      	beq.n	1602 <__udivsi3+0xfe>
    1536:	0b03      	lsrs	r3, r0, #12
    1538:	428b      	cmp	r3, r1
    153a:	d319      	bcc.n	1570 <__udivsi3+0x6c>
    153c:	e000      	b.n	1540 <__udivsi3+0x3c>
    153e:	0a09      	lsrs	r1, r1, #8
    1540:	0bc3      	lsrs	r3, r0, #15
    1542:	428b      	cmp	r3, r1
    1544:	d301      	bcc.n	154a <__udivsi3+0x46>
    1546:	03cb      	lsls	r3, r1, #15
    1548:	1ac0      	subs	r0, r0, r3
    154a:	4152      	adcs	r2, r2
    154c:	0b83      	lsrs	r3, r0, #14
    154e:	428b      	cmp	r3, r1
    1550:	d301      	bcc.n	1556 <__udivsi3+0x52>
    1552:	038b      	lsls	r3, r1, #14
    1554:	1ac0      	subs	r0, r0, r3
    1556:	4152      	adcs	r2, r2
    1558:	0b43      	lsrs	r3, r0, #13
    155a:	428b      	cmp	r3, r1
    155c:	d301      	bcc.n	1562 <__udivsi3+0x5e>
    155e:	034b      	lsls	r3, r1, #13
    1560:	1ac0      	subs	r0, r0, r3
    1562:	4152      	adcs	r2, r2
    1564:	0b03      	lsrs	r3, r0, #12
    1566:	428b      	cmp	r3, r1
    1568:	d301      	bcc.n	156e <__udivsi3+0x6a>
    156a:	030b      	lsls	r3, r1, #12
    156c:	1ac0      	subs	r0, r0, r3
    156e:	4152      	adcs	r2, r2
    1570:	0ac3      	lsrs	r3, r0, #11
    1572:	428b      	cmp	r3, r1
    1574:	d301      	bcc.n	157a <__udivsi3+0x76>
    1576:	02cb      	lsls	r3, r1, #11
    1578:	1ac0      	subs	r0, r0, r3
    157a:	4152      	adcs	r2, r2
    157c:	0a83      	lsrs	r3, r0, #10
    157e:	428b      	cmp	r3, r1
    1580:	d301      	bcc.n	1586 <__udivsi3+0x82>
    1582:	028b      	lsls	r3, r1, #10
    1584:	1ac0      	subs	r0, r0, r3
    1586:	4152      	adcs	r2, r2
    1588:	0a43      	lsrs	r3, r0, #9
    158a:	428b      	cmp	r3, r1
    158c:	d301      	bcc.n	1592 <__udivsi3+0x8e>
    158e:	024b      	lsls	r3, r1, #9
    1590:	1ac0      	subs	r0, r0, r3
    1592:	4152      	adcs	r2, r2
    1594:	0a03      	lsrs	r3, r0, #8
    1596:	428b      	cmp	r3, r1
    1598:	d301      	bcc.n	159e <__udivsi3+0x9a>
    159a:	020b      	lsls	r3, r1, #8
    159c:	1ac0      	subs	r0, r0, r3
    159e:	4152      	adcs	r2, r2
    15a0:	d2cd      	bcs.n	153e <__udivsi3+0x3a>
    15a2:	09c3      	lsrs	r3, r0, #7
    15a4:	428b      	cmp	r3, r1
    15a6:	d301      	bcc.n	15ac <__udivsi3+0xa8>
    15a8:	01cb      	lsls	r3, r1, #7
    15aa:	1ac0      	subs	r0, r0, r3
    15ac:	4152      	adcs	r2, r2
    15ae:	0983      	lsrs	r3, r0, #6
    15b0:	428b      	cmp	r3, r1
    15b2:	d301      	bcc.n	15b8 <__udivsi3+0xb4>
    15b4:	018b      	lsls	r3, r1, #6
    15b6:	1ac0      	subs	r0, r0, r3
    15b8:	4152      	adcs	r2, r2
    15ba:	0943      	lsrs	r3, r0, #5
    15bc:	428b      	cmp	r3, r1
    15be:	d301      	bcc.n	15c4 <__udivsi3+0xc0>
    15c0:	014b      	lsls	r3, r1, #5
    15c2:	1ac0      	subs	r0, r0, r3
    15c4:	4152      	adcs	r2, r2
    15c6:	0903      	lsrs	r3, r0, #4
    15c8:	428b      	cmp	r3, r1
    15ca:	d301      	bcc.n	15d0 <__udivsi3+0xcc>
    15cc:	010b      	lsls	r3, r1, #4
    15ce:	1ac0      	subs	r0, r0, r3
    15d0:	4152      	adcs	r2, r2
    15d2:	08c3      	lsrs	r3, r0, #3
    15d4:	428b      	cmp	r3, r1
    15d6:	d301      	bcc.n	15dc <__udivsi3+0xd8>
    15d8:	00cb      	lsls	r3, r1, #3
    15da:	1ac0      	subs	r0, r0, r3
    15dc:	4152      	adcs	r2, r2
    15de:	0883      	lsrs	r3, r0, #2
    15e0:	428b      	cmp	r3, r1
    15e2:	d301      	bcc.n	15e8 <__udivsi3+0xe4>
    15e4:	008b      	lsls	r3, r1, #2
    15e6:	1ac0      	subs	r0, r0, r3
    15e8:	4152      	adcs	r2, r2
    15ea:	0843      	lsrs	r3, r0, #1
    15ec:	428b      	cmp	r3, r1
    15ee:	d301      	bcc.n	15f4 <__udivsi3+0xf0>
    15f0:	004b      	lsls	r3, r1, #1
    15f2:	1ac0      	subs	r0, r0, r3
    15f4:	4152      	adcs	r2, r2
    15f6:	1a41      	subs	r1, r0, r1
    15f8:	d200      	bcs.n	15fc <__udivsi3+0xf8>
    15fa:	4601      	mov	r1, r0
    15fc:	4152      	adcs	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	4770      	bx	lr
    1602:	e7ff      	b.n	1604 <__udivsi3+0x100>
    1604:	b501      	push	{r0, lr}
    1606:	2000      	movs	r0, #0
    1608:	f000 f806 	bl	1618 <__aeabi_idiv0>
    160c:	bd02      	pop	{r1, pc}
    160e:	46c0      	nop			; (mov r8, r8)

00001610 <__aeabi_uidivmod>:
    1610:	2900      	cmp	r1, #0
    1612:	d0f7      	beq.n	1604 <__udivsi3+0x100>
    1614:	e776      	b.n	1504 <__udivsi3>
    1616:	4770      	bx	lr

00001618 <__aeabi_idiv0>:
    1618:	4770      	bx	lr
    161a:	46c0      	nop			; (mov r8, r8)

0000161c <__aeabi_dadd>:
    161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    161e:	4645      	mov	r5, r8
    1620:	46de      	mov	lr, fp
    1622:	4657      	mov	r7, sl
    1624:	464e      	mov	r6, r9
    1626:	030c      	lsls	r4, r1, #12
    1628:	b5e0      	push	{r5, r6, r7, lr}
    162a:	004e      	lsls	r6, r1, #1
    162c:	0fc9      	lsrs	r1, r1, #31
    162e:	4688      	mov	r8, r1
    1630:	000d      	movs	r5, r1
    1632:	0a61      	lsrs	r1, r4, #9
    1634:	0f44      	lsrs	r4, r0, #29
    1636:	430c      	orrs	r4, r1
    1638:	00c7      	lsls	r7, r0, #3
    163a:	0319      	lsls	r1, r3, #12
    163c:	0058      	lsls	r0, r3, #1
    163e:	0fdb      	lsrs	r3, r3, #31
    1640:	469b      	mov	fp, r3
    1642:	0a4b      	lsrs	r3, r1, #9
    1644:	0f51      	lsrs	r1, r2, #29
    1646:	430b      	orrs	r3, r1
    1648:	0d76      	lsrs	r6, r6, #21
    164a:	0d40      	lsrs	r0, r0, #21
    164c:	0019      	movs	r1, r3
    164e:	00d2      	lsls	r2, r2, #3
    1650:	45d8      	cmp	r8, fp
    1652:	d100      	bne.n	1656 <__aeabi_dadd+0x3a>
    1654:	e0ae      	b.n	17b4 <__aeabi_dadd+0x198>
    1656:	1a35      	subs	r5, r6, r0
    1658:	2d00      	cmp	r5, #0
    165a:	dc00      	bgt.n	165e <__aeabi_dadd+0x42>
    165c:	e0f6      	b.n	184c <__aeabi_dadd+0x230>
    165e:	2800      	cmp	r0, #0
    1660:	d10f      	bne.n	1682 <__aeabi_dadd+0x66>
    1662:	4313      	orrs	r3, r2
    1664:	d100      	bne.n	1668 <__aeabi_dadd+0x4c>
    1666:	e0db      	b.n	1820 <__aeabi_dadd+0x204>
    1668:	1e6b      	subs	r3, r5, #1
    166a:	2b00      	cmp	r3, #0
    166c:	d000      	beq.n	1670 <__aeabi_dadd+0x54>
    166e:	e137      	b.n	18e0 <__aeabi_dadd+0x2c4>
    1670:	1aba      	subs	r2, r7, r2
    1672:	4297      	cmp	r7, r2
    1674:	41bf      	sbcs	r7, r7
    1676:	1a64      	subs	r4, r4, r1
    1678:	427f      	negs	r7, r7
    167a:	1be4      	subs	r4, r4, r7
    167c:	2601      	movs	r6, #1
    167e:	0017      	movs	r7, r2
    1680:	e024      	b.n	16cc <__aeabi_dadd+0xb0>
    1682:	4bc6      	ldr	r3, [pc, #792]	; (199c <__aeabi_dadd+0x380>)
    1684:	429e      	cmp	r6, r3
    1686:	d04d      	beq.n	1724 <__aeabi_dadd+0x108>
    1688:	2380      	movs	r3, #128	; 0x80
    168a:	041b      	lsls	r3, r3, #16
    168c:	4319      	orrs	r1, r3
    168e:	2d38      	cmp	r5, #56	; 0x38
    1690:	dd00      	ble.n	1694 <__aeabi_dadd+0x78>
    1692:	e107      	b.n	18a4 <__aeabi_dadd+0x288>
    1694:	2d1f      	cmp	r5, #31
    1696:	dd00      	ble.n	169a <__aeabi_dadd+0x7e>
    1698:	e138      	b.n	190c <__aeabi_dadd+0x2f0>
    169a:	2020      	movs	r0, #32
    169c:	1b43      	subs	r3, r0, r5
    169e:	469a      	mov	sl, r3
    16a0:	000b      	movs	r3, r1
    16a2:	4650      	mov	r0, sl
    16a4:	4083      	lsls	r3, r0
    16a6:	4699      	mov	r9, r3
    16a8:	0013      	movs	r3, r2
    16aa:	4648      	mov	r0, r9
    16ac:	40eb      	lsrs	r3, r5
    16ae:	4318      	orrs	r0, r3
    16b0:	0003      	movs	r3, r0
    16b2:	4650      	mov	r0, sl
    16b4:	4082      	lsls	r2, r0
    16b6:	1e50      	subs	r0, r2, #1
    16b8:	4182      	sbcs	r2, r0
    16ba:	40e9      	lsrs	r1, r5
    16bc:	431a      	orrs	r2, r3
    16be:	1aba      	subs	r2, r7, r2
    16c0:	1a61      	subs	r1, r4, r1
    16c2:	4297      	cmp	r7, r2
    16c4:	41a4      	sbcs	r4, r4
    16c6:	0017      	movs	r7, r2
    16c8:	4264      	negs	r4, r4
    16ca:	1b0c      	subs	r4, r1, r4
    16cc:	0223      	lsls	r3, r4, #8
    16ce:	d562      	bpl.n	1796 <__aeabi_dadd+0x17a>
    16d0:	0264      	lsls	r4, r4, #9
    16d2:	0a65      	lsrs	r5, r4, #9
    16d4:	2d00      	cmp	r5, #0
    16d6:	d100      	bne.n	16da <__aeabi_dadd+0xbe>
    16d8:	e0df      	b.n	189a <__aeabi_dadd+0x27e>
    16da:	0028      	movs	r0, r5
    16dc:	f001 fbe4 	bl	2ea8 <__clzsi2>
    16e0:	0003      	movs	r3, r0
    16e2:	3b08      	subs	r3, #8
    16e4:	2b1f      	cmp	r3, #31
    16e6:	dd00      	ble.n	16ea <__aeabi_dadd+0xce>
    16e8:	e0d2      	b.n	1890 <__aeabi_dadd+0x274>
    16ea:	2220      	movs	r2, #32
    16ec:	003c      	movs	r4, r7
    16ee:	1ad2      	subs	r2, r2, r3
    16f0:	409d      	lsls	r5, r3
    16f2:	40d4      	lsrs	r4, r2
    16f4:	409f      	lsls	r7, r3
    16f6:	4325      	orrs	r5, r4
    16f8:	429e      	cmp	r6, r3
    16fa:	dd00      	ble.n	16fe <__aeabi_dadd+0xe2>
    16fc:	e0c4      	b.n	1888 <__aeabi_dadd+0x26c>
    16fe:	1b9e      	subs	r6, r3, r6
    1700:	1c73      	adds	r3, r6, #1
    1702:	2b1f      	cmp	r3, #31
    1704:	dd00      	ble.n	1708 <__aeabi_dadd+0xec>
    1706:	e0f1      	b.n	18ec <__aeabi_dadd+0x2d0>
    1708:	2220      	movs	r2, #32
    170a:	0038      	movs	r0, r7
    170c:	0029      	movs	r1, r5
    170e:	1ad2      	subs	r2, r2, r3
    1710:	40d8      	lsrs	r0, r3
    1712:	4091      	lsls	r1, r2
    1714:	4097      	lsls	r7, r2
    1716:	002c      	movs	r4, r5
    1718:	4301      	orrs	r1, r0
    171a:	1e78      	subs	r0, r7, #1
    171c:	4187      	sbcs	r7, r0
    171e:	40dc      	lsrs	r4, r3
    1720:	2600      	movs	r6, #0
    1722:	430f      	orrs	r7, r1
    1724:	077b      	lsls	r3, r7, #29
    1726:	d009      	beq.n	173c <__aeabi_dadd+0x120>
    1728:	230f      	movs	r3, #15
    172a:	403b      	ands	r3, r7
    172c:	2b04      	cmp	r3, #4
    172e:	d005      	beq.n	173c <__aeabi_dadd+0x120>
    1730:	1d3b      	adds	r3, r7, #4
    1732:	42bb      	cmp	r3, r7
    1734:	41bf      	sbcs	r7, r7
    1736:	427f      	negs	r7, r7
    1738:	19e4      	adds	r4, r4, r7
    173a:	001f      	movs	r7, r3
    173c:	0223      	lsls	r3, r4, #8
    173e:	d52c      	bpl.n	179a <__aeabi_dadd+0x17e>
    1740:	4b96      	ldr	r3, [pc, #600]	; (199c <__aeabi_dadd+0x380>)
    1742:	3601      	adds	r6, #1
    1744:	429e      	cmp	r6, r3
    1746:	d100      	bne.n	174a <__aeabi_dadd+0x12e>
    1748:	e09a      	b.n	1880 <__aeabi_dadd+0x264>
    174a:	4645      	mov	r5, r8
    174c:	4b94      	ldr	r3, [pc, #592]	; (19a0 <__aeabi_dadd+0x384>)
    174e:	08ff      	lsrs	r7, r7, #3
    1750:	401c      	ands	r4, r3
    1752:	0760      	lsls	r0, r4, #29
    1754:	0576      	lsls	r6, r6, #21
    1756:	0264      	lsls	r4, r4, #9
    1758:	4307      	orrs	r7, r0
    175a:	0b24      	lsrs	r4, r4, #12
    175c:	0d76      	lsrs	r6, r6, #21
    175e:	2100      	movs	r1, #0
    1760:	0324      	lsls	r4, r4, #12
    1762:	0b23      	lsrs	r3, r4, #12
    1764:	0d0c      	lsrs	r4, r1, #20
    1766:	4a8f      	ldr	r2, [pc, #572]	; (19a4 <__aeabi_dadd+0x388>)
    1768:	0524      	lsls	r4, r4, #20
    176a:	431c      	orrs	r4, r3
    176c:	4014      	ands	r4, r2
    176e:	0533      	lsls	r3, r6, #20
    1770:	4323      	orrs	r3, r4
    1772:	005b      	lsls	r3, r3, #1
    1774:	07ed      	lsls	r5, r5, #31
    1776:	085b      	lsrs	r3, r3, #1
    1778:	432b      	orrs	r3, r5
    177a:	0038      	movs	r0, r7
    177c:	0019      	movs	r1, r3
    177e:	bc3c      	pop	{r2, r3, r4, r5}
    1780:	4690      	mov	r8, r2
    1782:	4699      	mov	r9, r3
    1784:	46a2      	mov	sl, r4
    1786:	46ab      	mov	fp, r5
    1788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    178a:	4664      	mov	r4, ip
    178c:	4304      	orrs	r4, r0
    178e:	d100      	bne.n	1792 <__aeabi_dadd+0x176>
    1790:	e211      	b.n	1bb6 <__aeabi_dadd+0x59a>
    1792:	0004      	movs	r4, r0
    1794:	4667      	mov	r7, ip
    1796:	077b      	lsls	r3, r7, #29
    1798:	d1c6      	bne.n	1728 <__aeabi_dadd+0x10c>
    179a:	4645      	mov	r5, r8
    179c:	0760      	lsls	r0, r4, #29
    179e:	08ff      	lsrs	r7, r7, #3
    17a0:	4307      	orrs	r7, r0
    17a2:	08e4      	lsrs	r4, r4, #3
    17a4:	4b7d      	ldr	r3, [pc, #500]	; (199c <__aeabi_dadd+0x380>)
    17a6:	429e      	cmp	r6, r3
    17a8:	d030      	beq.n	180c <__aeabi_dadd+0x1f0>
    17aa:	0324      	lsls	r4, r4, #12
    17ac:	0576      	lsls	r6, r6, #21
    17ae:	0b24      	lsrs	r4, r4, #12
    17b0:	0d76      	lsrs	r6, r6, #21
    17b2:	e7d4      	b.n	175e <__aeabi_dadd+0x142>
    17b4:	1a33      	subs	r3, r6, r0
    17b6:	469a      	mov	sl, r3
    17b8:	2b00      	cmp	r3, #0
    17ba:	dd78      	ble.n	18ae <__aeabi_dadd+0x292>
    17bc:	2800      	cmp	r0, #0
    17be:	d031      	beq.n	1824 <__aeabi_dadd+0x208>
    17c0:	4876      	ldr	r0, [pc, #472]	; (199c <__aeabi_dadd+0x380>)
    17c2:	4286      	cmp	r6, r0
    17c4:	d0ae      	beq.n	1724 <__aeabi_dadd+0x108>
    17c6:	2080      	movs	r0, #128	; 0x80
    17c8:	0400      	lsls	r0, r0, #16
    17ca:	4301      	orrs	r1, r0
    17cc:	4653      	mov	r3, sl
    17ce:	2b38      	cmp	r3, #56	; 0x38
    17d0:	dc00      	bgt.n	17d4 <__aeabi_dadd+0x1b8>
    17d2:	e0e9      	b.n	19a8 <__aeabi_dadd+0x38c>
    17d4:	430a      	orrs	r2, r1
    17d6:	1e51      	subs	r1, r2, #1
    17d8:	418a      	sbcs	r2, r1
    17da:	2100      	movs	r1, #0
    17dc:	19d2      	adds	r2, r2, r7
    17de:	42ba      	cmp	r2, r7
    17e0:	41bf      	sbcs	r7, r7
    17e2:	1909      	adds	r1, r1, r4
    17e4:	427c      	negs	r4, r7
    17e6:	0017      	movs	r7, r2
    17e8:	190c      	adds	r4, r1, r4
    17ea:	0223      	lsls	r3, r4, #8
    17ec:	d5d3      	bpl.n	1796 <__aeabi_dadd+0x17a>
    17ee:	4b6b      	ldr	r3, [pc, #428]	; (199c <__aeabi_dadd+0x380>)
    17f0:	3601      	adds	r6, #1
    17f2:	429e      	cmp	r6, r3
    17f4:	d100      	bne.n	17f8 <__aeabi_dadd+0x1dc>
    17f6:	e13a      	b.n	1a6e <__aeabi_dadd+0x452>
    17f8:	2001      	movs	r0, #1
    17fa:	4b69      	ldr	r3, [pc, #420]	; (19a0 <__aeabi_dadd+0x384>)
    17fc:	401c      	ands	r4, r3
    17fe:	087b      	lsrs	r3, r7, #1
    1800:	4007      	ands	r7, r0
    1802:	431f      	orrs	r7, r3
    1804:	07e0      	lsls	r0, r4, #31
    1806:	4307      	orrs	r7, r0
    1808:	0864      	lsrs	r4, r4, #1
    180a:	e78b      	b.n	1724 <__aeabi_dadd+0x108>
    180c:	0023      	movs	r3, r4
    180e:	433b      	orrs	r3, r7
    1810:	d100      	bne.n	1814 <__aeabi_dadd+0x1f8>
    1812:	e1cb      	b.n	1bac <__aeabi_dadd+0x590>
    1814:	2280      	movs	r2, #128	; 0x80
    1816:	0312      	lsls	r2, r2, #12
    1818:	4314      	orrs	r4, r2
    181a:	0324      	lsls	r4, r4, #12
    181c:	0b24      	lsrs	r4, r4, #12
    181e:	e79e      	b.n	175e <__aeabi_dadd+0x142>
    1820:	002e      	movs	r6, r5
    1822:	e77f      	b.n	1724 <__aeabi_dadd+0x108>
    1824:	0008      	movs	r0, r1
    1826:	4310      	orrs	r0, r2
    1828:	d100      	bne.n	182c <__aeabi_dadd+0x210>
    182a:	e0b4      	b.n	1996 <__aeabi_dadd+0x37a>
    182c:	1e58      	subs	r0, r3, #1
    182e:	2800      	cmp	r0, #0
    1830:	d000      	beq.n	1834 <__aeabi_dadd+0x218>
    1832:	e0de      	b.n	19f2 <__aeabi_dadd+0x3d6>
    1834:	18ba      	adds	r2, r7, r2
    1836:	42ba      	cmp	r2, r7
    1838:	419b      	sbcs	r3, r3
    183a:	1864      	adds	r4, r4, r1
    183c:	425b      	negs	r3, r3
    183e:	18e4      	adds	r4, r4, r3
    1840:	0017      	movs	r7, r2
    1842:	2601      	movs	r6, #1
    1844:	0223      	lsls	r3, r4, #8
    1846:	d5a6      	bpl.n	1796 <__aeabi_dadd+0x17a>
    1848:	2602      	movs	r6, #2
    184a:	e7d5      	b.n	17f8 <__aeabi_dadd+0x1dc>
    184c:	2d00      	cmp	r5, #0
    184e:	d16e      	bne.n	192e <__aeabi_dadd+0x312>
    1850:	1c70      	adds	r0, r6, #1
    1852:	0540      	lsls	r0, r0, #21
    1854:	0d40      	lsrs	r0, r0, #21
    1856:	2801      	cmp	r0, #1
    1858:	dc00      	bgt.n	185c <__aeabi_dadd+0x240>
    185a:	e0f9      	b.n	1a50 <__aeabi_dadd+0x434>
    185c:	1ab8      	subs	r0, r7, r2
    185e:	4684      	mov	ip, r0
    1860:	4287      	cmp	r7, r0
    1862:	4180      	sbcs	r0, r0
    1864:	1ae5      	subs	r5, r4, r3
    1866:	4240      	negs	r0, r0
    1868:	1a2d      	subs	r5, r5, r0
    186a:	0228      	lsls	r0, r5, #8
    186c:	d400      	bmi.n	1870 <__aeabi_dadd+0x254>
    186e:	e089      	b.n	1984 <__aeabi_dadd+0x368>
    1870:	1bd7      	subs	r7, r2, r7
    1872:	42ba      	cmp	r2, r7
    1874:	4192      	sbcs	r2, r2
    1876:	1b1c      	subs	r4, r3, r4
    1878:	4252      	negs	r2, r2
    187a:	1aa5      	subs	r5, r4, r2
    187c:	46d8      	mov	r8, fp
    187e:	e729      	b.n	16d4 <__aeabi_dadd+0xb8>
    1880:	4645      	mov	r5, r8
    1882:	2400      	movs	r4, #0
    1884:	2700      	movs	r7, #0
    1886:	e76a      	b.n	175e <__aeabi_dadd+0x142>
    1888:	4c45      	ldr	r4, [pc, #276]	; (19a0 <__aeabi_dadd+0x384>)
    188a:	1af6      	subs	r6, r6, r3
    188c:	402c      	ands	r4, r5
    188e:	e749      	b.n	1724 <__aeabi_dadd+0x108>
    1890:	003d      	movs	r5, r7
    1892:	3828      	subs	r0, #40	; 0x28
    1894:	4085      	lsls	r5, r0
    1896:	2700      	movs	r7, #0
    1898:	e72e      	b.n	16f8 <__aeabi_dadd+0xdc>
    189a:	0038      	movs	r0, r7
    189c:	f001 fb04 	bl	2ea8 <__clzsi2>
    18a0:	3020      	adds	r0, #32
    18a2:	e71d      	b.n	16e0 <__aeabi_dadd+0xc4>
    18a4:	430a      	orrs	r2, r1
    18a6:	1e51      	subs	r1, r2, #1
    18a8:	418a      	sbcs	r2, r1
    18aa:	2100      	movs	r1, #0
    18ac:	e707      	b.n	16be <__aeabi_dadd+0xa2>
    18ae:	2b00      	cmp	r3, #0
    18b0:	d000      	beq.n	18b4 <__aeabi_dadd+0x298>
    18b2:	e0f3      	b.n	1a9c <__aeabi_dadd+0x480>
    18b4:	1c70      	adds	r0, r6, #1
    18b6:	0543      	lsls	r3, r0, #21
    18b8:	0d5b      	lsrs	r3, r3, #21
    18ba:	2b01      	cmp	r3, #1
    18bc:	dc00      	bgt.n	18c0 <__aeabi_dadd+0x2a4>
    18be:	e0ad      	b.n	1a1c <__aeabi_dadd+0x400>
    18c0:	4b36      	ldr	r3, [pc, #216]	; (199c <__aeabi_dadd+0x380>)
    18c2:	4298      	cmp	r0, r3
    18c4:	d100      	bne.n	18c8 <__aeabi_dadd+0x2ac>
    18c6:	e0d1      	b.n	1a6c <__aeabi_dadd+0x450>
    18c8:	18ba      	adds	r2, r7, r2
    18ca:	42ba      	cmp	r2, r7
    18cc:	41bf      	sbcs	r7, r7
    18ce:	1864      	adds	r4, r4, r1
    18d0:	427f      	negs	r7, r7
    18d2:	19e4      	adds	r4, r4, r7
    18d4:	07e7      	lsls	r7, r4, #31
    18d6:	0852      	lsrs	r2, r2, #1
    18d8:	4317      	orrs	r7, r2
    18da:	0864      	lsrs	r4, r4, #1
    18dc:	0006      	movs	r6, r0
    18de:	e721      	b.n	1724 <__aeabi_dadd+0x108>
    18e0:	482e      	ldr	r0, [pc, #184]	; (199c <__aeabi_dadd+0x380>)
    18e2:	4285      	cmp	r5, r0
    18e4:	d100      	bne.n	18e8 <__aeabi_dadd+0x2cc>
    18e6:	e093      	b.n	1a10 <__aeabi_dadd+0x3f4>
    18e8:	001d      	movs	r5, r3
    18ea:	e6d0      	b.n	168e <__aeabi_dadd+0x72>
    18ec:	0029      	movs	r1, r5
    18ee:	3e1f      	subs	r6, #31
    18f0:	40f1      	lsrs	r1, r6
    18f2:	2b20      	cmp	r3, #32
    18f4:	d100      	bne.n	18f8 <__aeabi_dadd+0x2dc>
    18f6:	e08d      	b.n	1a14 <__aeabi_dadd+0x3f8>
    18f8:	2240      	movs	r2, #64	; 0x40
    18fa:	1ad3      	subs	r3, r2, r3
    18fc:	409d      	lsls	r5, r3
    18fe:	432f      	orrs	r7, r5
    1900:	1e7d      	subs	r5, r7, #1
    1902:	41af      	sbcs	r7, r5
    1904:	2400      	movs	r4, #0
    1906:	430f      	orrs	r7, r1
    1908:	2600      	movs	r6, #0
    190a:	e744      	b.n	1796 <__aeabi_dadd+0x17a>
    190c:	002b      	movs	r3, r5
    190e:	0008      	movs	r0, r1
    1910:	3b20      	subs	r3, #32
    1912:	40d8      	lsrs	r0, r3
    1914:	0003      	movs	r3, r0
    1916:	2d20      	cmp	r5, #32
    1918:	d100      	bne.n	191c <__aeabi_dadd+0x300>
    191a:	e07d      	b.n	1a18 <__aeabi_dadd+0x3fc>
    191c:	2040      	movs	r0, #64	; 0x40
    191e:	1b45      	subs	r5, r0, r5
    1920:	40a9      	lsls	r1, r5
    1922:	430a      	orrs	r2, r1
    1924:	1e51      	subs	r1, r2, #1
    1926:	418a      	sbcs	r2, r1
    1928:	2100      	movs	r1, #0
    192a:	431a      	orrs	r2, r3
    192c:	e6c7      	b.n	16be <__aeabi_dadd+0xa2>
    192e:	2e00      	cmp	r6, #0
    1930:	d050      	beq.n	19d4 <__aeabi_dadd+0x3b8>
    1932:	4e1a      	ldr	r6, [pc, #104]	; (199c <__aeabi_dadd+0x380>)
    1934:	42b0      	cmp	r0, r6
    1936:	d057      	beq.n	19e8 <__aeabi_dadd+0x3cc>
    1938:	2680      	movs	r6, #128	; 0x80
    193a:	426b      	negs	r3, r5
    193c:	4699      	mov	r9, r3
    193e:	0436      	lsls	r6, r6, #16
    1940:	4334      	orrs	r4, r6
    1942:	464b      	mov	r3, r9
    1944:	2b38      	cmp	r3, #56	; 0x38
    1946:	dd00      	ble.n	194a <__aeabi_dadd+0x32e>
    1948:	e0d6      	b.n	1af8 <__aeabi_dadd+0x4dc>
    194a:	2b1f      	cmp	r3, #31
    194c:	dd00      	ble.n	1950 <__aeabi_dadd+0x334>
    194e:	e135      	b.n	1bbc <__aeabi_dadd+0x5a0>
    1950:	2620      	movs	r6, #32
    1952:	1af5      	subs	r5, r6, r3
    1954:	0026      	movs	r6, r4
    1956:	40ae      	lsls	r6, r5
    1958:	46b2      	mov	sl, r6
    195a:	003e      	movs	r6, r7
    195c:	40de      	lsrs	r6, r3
    195e:	46ac      	mov	ip, r5
    1960:	0035      	movs	r5, r6
    1962:	4656      	mov	r6, sl
    1964:	432e      	orrs	r6, r5
    1966:	4665      	mov	r5, ip
    1968:	40af      	lsls	r7, r5
    196a:	1e7d      	subs	r5, r7, #1
    196c:	41af      	sbcs	r7, r5
    196e:	40dc      	lsrs	r4, r3
    1970:	4337      	orrs	r7, r6
    1972:	1bd7      	subs	r7, r2, r7
    1974:	42ba      	cmp	r2, r7
    1976:	4192      	sbcs	r2, r2
    1978:	1b0c      	subs	r4, r1, r4
    197a:	4252      	negs	r2, r2
    197c:	1aa4      	subs	r4, r4, r2
    197e:	0006      	movs	r6, r0
    1980:	46d8      	mov	r8, fp
    1982:	e6a3      	b.n	16cc <__aeabi_dadd+0xb0>
    1984:	4664      	mov	r4, ip
    1986:	4667      	mov	r7, ip
    1988:	432c      	orrs	r4, r5
    198a:	d000      	beq.n	198e <__aeabi_dadd+0x372>
    198c:	e6a2      	b.n	16d4 <__aeabi_dadd+0xb8>
    198e:	2500      	movs	r5, #0
    1990:	2600      	movs	r6, #0
    1992:	2700      	movs	r7, #0
    1994:	e706      	b.n	17a4 <__aeabi_dadd+0x188>
    1996:	001e      	movs	r6, r3
    1998:	e6c4      	b.n	1724 <__aeabi_dadd+0x108>
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	000007ff 	.word	0x000007ff
    19a0:	ff7fffff 	.word	0xff7fffff
    19a4:	800fffff 	.word	0x800fffff
    19a8:	2b1f      	cmp	r3, #31
    19aa:	dc63      	bgt.n	1a74 <__aeabi_dadd+0x458>
    19ac:	2020      	movs	r0, #32
    19ae:	1ac3      	subs	r3, r0, r3
    19b0:	0008      	movs	r0, r1
    19b2:	4098      	lsls	r0, r3
    19b4:	469c      	mov	ip, r3
    19b6:	4683      	mov	fp, r0
    19b8:	4653      	mov	r3, sl
    19ba:	0010      	movs	r0, r2
    19bc:	40d8      	lsrs	r0, r3
    19be:	0003      	movs	r3, r0
    19c0:	4658      	mov	r0, fp
    19c2:	4318      	orrs	r0, r3
    19c4:	4663      	mov	r3, ip
    19c6:	409a      	lsls	r2, r3
    19c8:	1e53      	subs	r3, r2, #1
    19ca:	419a      	sbcs	r2, r3
    19cc:	4653      	mov	r3, sl
    19ce:	4302      	orrs	r2, r0
    19d0:	40d9      	lsrs	r1, r3
    19d2:	e703      	b.n	17dc <__aeabi_dadd+0x1c0>
    19d4:	0026      	movs	r6, r4
    19d6:	433e      	orrs	r6, r7
    19d8:	d006      	beq.n	19e8 <__aeabi_dadd+0x3cc>
    19da:	43eb      	mvns	r3, r5
    19dc:	4699      	mov	r9, r3
    19de:	2b00      	cmp	r3, #0
    19e0:	d0c7      	beq.n	1972 <__aeabi_dadd+0x356>
    19e2:	4e94      	ldr	r6, [pc, #592]	; (1c34 <__aeabi_dadd+0x618>)
    19e4:	42b0      	cmp	r0, r6
    19e6:	d1ac      	bne.n	1942 <__aeabi_dadd+0x326>
    19e8:	000c      	movs	r4, r1
    19ea:	0017      	movs	r7, r2
    19ec:	0006      	movs	r6, r0
    19ee:	46d8      	mov	r8, fp
    19f0:	e698      	b.n	1724 <__aeabi_dadd+0x108>
    19f2:	4b90      	ldr	r3, [pc, #576]	; (1c34 <__aeabi_dadd+0x618>)
    19f4:	459a      	cmp	sl, r3
    19f6:	d00b      	beq.n	1a10 <__aeabi_dadd+0x3f4>
    19f8:	4682      	mov	sl, r0
    19fa:	e6e7      	b.n	17cc <__aeabi_dadd+0x1b0>
    19fc:	2800      	cmp	r0, #0
    19fe:	d000      	beq.n	1a02 <__aeabi_dadd+0x3e6>
    1a00:	e09e      	b.n	1b40 <__aeabi_dadd+0x524>
    1a02:	0018      	movs	r0, r3
    1a04:	4310      	orrs	r0, r2
    1a06:	d100      	bne.n	1a0a <__aeabi_dadd+0x3ee>
    1a08:	e0e9      	b.n	1bde <__aeabi_dadd+0x5c2>
    1a0a:	001c      	movs	r4, r3
    1a0c:	0017      	movs	r7, r2
    1a0e:	46d8      	mov	r8, fp
    1a10:	4e88      	ldr	r6, [pc, #544]	; (1c34 <__aeabi_dadd+0x618>)
    1a12:	e687      	b.n	1724 <__aeabi_dadd+0x108>
    1a14:	2500      	movs	r5, #0
    1a16:	e772      	b.n	18fe <__aeabi_dadd+0x2e2>
    1a18:	2100      	movs	r1, #0
    1a1a:	e782      	b.n	1922 <__aeabi_dadd+0x306>
    1a1c:	0023      	movs	r3, r4
    1a1e:	433b      	orrs	r3, r7
    1a20:	2e00      	cmp	r6, #0
    1a22:	d000      	beq.n	1a26 <__aeabi_dadd+0x40a>
    1a24:	e0ab      	b.n	1b7e <__aeabi_dadd+0x562>
    1a26:	2b00      	cmp	r3, #0
    1a28:	d100      	bne.n	1a2c <__aeabi_dadd+0x410>
    1a2a:	e0e7      	b.n	1bfc <__aeabi_dadd+0x5e0>
    1a2c:	000b      	movs	r3, r1
    1a2e:	4313      	orrs	r3, r2
    1a30:	d100      	bne.n	1a34 <__aeabi_dadd+0x418>
    1a32:	e677      	b.n	1724 <__aeabi_dadd+0x108>
    1a34:	18ba      	adds	r2, r7, r2
    1a36:	42ba      	cmp	r2, r7
    1a38:	41bf      	sbcs	r7, r7
    1a3a:	1864      	adds	r4, r4, r1
    1a3c:	427f      	negs	r7, r7
    1a3e:	19e4      	adds	r4, r4, r7
    1a40:	0223      	lsls	r3, r4, #8
    1a42:	d400      	bmi.n	1a46 <__aeabi_dadd+0x42a>
    1a44:	e0f2      	b.n	1c2c <__aeabi_dadd+0x610>
    1a46:	4b7c      	ldr	r3, [pc, #496]	; (1c38 <__aeabi_dadd+0x61c>)
    1a48:	0017      	movs	r7, r2
    1a4a:	401c      	ands	r4, r3
    1a4c:	0006      	movs	r6, r0
    1a4e:	e669      	b.n	1724 <__aeabi_dadd+0x108>
    1a50:	0020      	movs	r0, r4
    1a52:	4338      	orrs	r0, r7
    1a54:	2e00      	cmp	r6, #0
    1a56:	d1d1      	bne.n	19fc <__aeabi_dadd+0x3e0>
    1a58:	2800      	cmp	r0, #0
    1a5a:	d15b      	bne.n	1b14 <__aeabi_dadd+0x4f8>
    1a5c:	001c      	movs	r4, r3
    1a5e:	4314      	orrs	r4, r2
    1a60:	d100      	bne.n	1a64 <__aeabi_dadd+0x448>
    1a62:	e0a8      	b.n	1bb6 <__aeabi_dadd+0x59a>
    1a64:	001c      	movs	r4, r3
    1a66:	0017      	movs	r7, r2
    1a68:	46d8      	mov	r8, fp
    1a6a:	e65b      	b.n	1724 <__aeabi_dadd+0x108>
    1a6c:	0006      	movs	r6, r0
    1a6e:	2400      	movs	r4, #0
    1a70:	2700      	movs	r7, #0
    1a72:	e697      	b.n	17a4 <__aeabi_dadd+0x188>
    1a74:	4650      	mov	r0, sl
    1a76:	000b      	movs	r3, r1
    1a78:	3820      	subs	r0, #32
    1a7a:	40c3      	lsrs	r3, r0
    1a7c:	4699      	mov	r9, r3
    1a7e:	4653      	mov	r3, sl
    1a80:	2b20      	cmp	r3, #32
    1a82:	d100      	bne.n	1a86 <__aeabi_dadd+0x46a>
    1a84:	e095      	b.n	1bb2 <__aeabi_dadd+0x596>
    1a86:	2340      	movs	r3, #64	; 0x40
    1a88:	4650      	mov	r0, sl
    1a8a:	1a1b      	subs	r3, r3, r0
    1a8c:	4099      	lsls	r1, r3
    1a8e:	430a      	orrs	r2, r1
    1a90:	1e51      	subs	r1, r2, #1
    1a92:	418a      	sbcs	r2, r1
    1a94:	464b      	mov	r3, r9
    1a96:	2100      	movs	r1, #0
    1a98:	431a      	orrs	r2, r3
    1a9a:	e69f      	b.n	17dc <__aeabi_dadd+0x1c0>
    1a9c:	2e00      	cmp	r6, #0
    1a9e:	d130      	bne.n	1b02 <__aeabi_dadd+0x4e6>
    1aa0:	0026      	movs	r6, r4
    1aa2:	433e      	orrs	r6, r7
    1aa4:	d067      	beq.n	1b76 <__aeabi_dadd+0x55a>
    1aa6:	43db      	mvns	r3, r3
    1aa8:	469a      	mov	sl, r3
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d01c      	beq.n	1ae8 <__aeabi_dadd+0x4cc>
    1aae:	4e61      	ldr	r6, [pc, #388]	; (1c34 <__aeabi_dadd+0x618>)
    1ab0:	42b0      	cmp	r0, r6
    1ab2:	d060      	beq.n	1b76 <__aeabi_dadd+0x55a>
    1ab4:	4653      	mov	r3, sl
    1ab6:	2b38      	cmp	r3, #56	; 0x38
    1ab8:	dd00      	ble.n	1abc <__aeabi_dadd+0x4a0>
    1aba:	e096      	b.n	1bea <__aeabi_dadd+0x5ce>
    1abc:	2b1f      	cmp	r3, #31
    1abe:	dd00      	ble.n	1ac2 <__aeabi_dadd+0x4a6>
    1ac0:	e09f      	b.n	1c02 <__aeabi_dadd+0x5e6>
    1ac2:	2620      	movs	r6, #32
    1ac4:	1af3      	subs	r3, r6, r3
    1ac6:	0026      	movs	r6, r4
    1ac8:	409e      	lsls	r6, r3
    1aca:	469c      	mov	ip, r3
    1acc:	46b3      	mov	fp, r6
    1ace:	4653      	mov	r3, sl
    1ad0:	003e      	movs	r6, r7
    1ad2:	40de      	lsrs	r6, r3
    1ad4:	0033      	movs	r3, r6
    1ad6:	465e      	mov	r6, fp
    1ad8:	431e      	orrs	r6, r3
    1ada:	4663      	mov	r3, ip
    1adc:	409f      	lsls	r7, r3
    1ade:	1e7b      	subs	r3, r7, #1
    1ae0:	419f      	sbcs	r7, r3
    1ae2:	4653      	mov	r3, sl
    1ae4:	40dc      	lsrs	r4, r3
    1ae6:	4337      	orrs	r7, r6
    1ae8:	18bf      	adds	r7, r7, r2
    1aea:	4297      	cmp	r7, r2
    1aec:	4192      	sbcs	r2, r2
    1aee:	1864      	adds	r4, r4, r1
    1af0:	4252      	negs	r2, r2
    1af2:	18a4      	adds	r4, r4, r2
    1af4:	0006      	movs	r6, r0
    1af6:	e678      	b.n	17ea <__aeabi_dadd+0x1ce>
    1af8:	4327      	orrs	r7, r4
    1afa:	1e7c      	subs	r4, r7, #1
    1afc:	41a7      	sbcs	r7, r4
    1afe:	2400      	movs	r4, #0
    1b00:	e737      	b.n	1972 <__aeabi_dadd+0x356>
    1b02:	4e4c      	ldr	r6, [pc, #304]	; (1c34 <__aeabi_dadd+0x618>)
    1b04:	42b0      	cmp	r0, r6
    1b06:	d036      	beq.n	1b76 <__aeabi_dadd+0x55a>
    1b08:	2680      	movs	r6, #128	; 0x80
    1b0a:	425b      	negs	r3, r3
    1b0c:	0436      	lsls	r6, r6, #16
    1b0e:	469a      	mov	sl, r3
    1b10:	4334      	orrs	r4, r6
    1b12:	e7cf      	b.n	1ab4 <__aeabi_dadd+0x498>
    1b14:	0018      	movs	r0, r3
    1b16:	4310      	orrs	r0, r2
    1b18:	d100      	bne.n	1b1c <__aeabi_dadd+0x500>
    1b1a:	e603      	b.n	1724 <__aeabi_dadd+0x108>
    1b1c:	1ab8      	subs	r0, r7, r2
    1b1e:	4684      	mov	ip, r0
    1b20:	4567      	cmp	r7, ip
    1b22:	41ad      	sbcs	r5, r5
    1b24:	1ae0      	subs	r0, r4, r3
    1b26:	426d      	negs	r5, r5
    1b28:	1b40      	subs	r0, r0, r5
    1b2a:	0205      	lsls	r5, r0, #8
    1b2c:	d400      	bmi.n	1b30 <__aeabi_dadd+0x514>
    1b2e:	e62c      	b.n	178a <__aeabi_dadd+0x16e>
    1b30:	1bd7      	subs	r7, r2, r7
    1b32:	42ba      	cmp	r2, r7
    1b34:	4192      	sbcs	r2, r2
    1b36:	1b1c      	subs	r4, r3, r4
    1b38:	4252      	negs	r2, r2
    1b3a:	1aa4      	subs	r4, r4, r2
    1b3c:	46d8      	mov	r8, fp
    1b3e:	e5f1      	b.n	1724 <__aeabi_dadd+0x108>
    1b40:	0018      	movs	r0, r3
    1b42:	4310      	orrs	r0, r2
    1b44:	d100      	bne.n	1b48 <__aeabi_dadd+0x52c>
    1b46:	e763      	b.n	1a10 <__aeabi_dadd+0x3f4>
    1b48:	08f8      	lsrs	r0, r7, #3
    1b4a:	0767      	lsls	r7, r4, #29
    1b4c:	4307      	orrs	r7, r0
    1b4e:	2080      	movs	r0, #128	; 0x80
    1b50:	08e4      	lsrs	r4, r4, #3
    1b52:	0300      	lsls	r0, r0, #12
    1b54:	4204      	tst	r4, r0
    1b56:	d008      	beq.n	1b6a <__aeabi_dadd+0x54e>
    1b58:	08dd      	lsrs	r5, r3, #3
    1b5a:	4205      	tst	r5, r0
    1b5c:	d105      	bne.n	1b6a <__aeabi_dadd+0x54e>
    1b5e:	08d2      	lsrs	r2, r2, #3
    1b60:	0759      	lsls	r1, r3, #29
    1b62:	4311      	orrs	r1, r2
    1b64:	000f      	movs	r7, r1
    1b66:	002c      	movs	r4, r5
    1b68:	46d8      	mov	r8, fp
    1b6a:	0f7b      	lsrs	r3, r7, #29
    1b6c:	00e4      	lsls	r4, r4, #3
    1b6e:	431c      	orrs	r4, r3
    1b70:	00ff      	lsls	r7, r7, #3
    1b72:	4e30      	ldr	r6, [pc, #192]	; (1c34 <__aeabi_dadd+0x618>)
    1b74:	e5d6      	b.n	1724 <__aeabi_dadd+0x108>
    1b76:	000c      	movs	r4, r1
    1b78:	0017      	movs	r7, r2
    1b7a:	0006      	movs	r6, r0
    1b7c:	e5d2      	b.n	1724 <__aeabi_dadd+0x108>
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d038      	beq.n	1bf4 <__aeabi_dadd+0x5d8>
    1b82:	000b      	movs	r3, r1
    1b84:	4313      	orrs	r3, r2
    1b86:	d100      	bne.n	1b8a <__aeabi_dadd+0x56e>
    1b88:	e742      	b.n	1a10 <__aeabi_dadd+0x3f4>
    1b8a:	08f8      	lsrs	r0, r7, #3
    1b8c:	0767      	lsls	r7, r4, #29
    1b8e:	4307      	orrs	r7, r0
    1b90:	2080      	movs	r0, #128	; 0x80
    1b92:	08e4      	lsrs	r4, r4, #3
    1b94:	0300      	lsls	r0, r0, #12
    1b96:	4204      	tst	r4, r0
    1b98:	d0e7      	beq.n	1b6a <__aeabi_dadd+0x54e>
    1b9a:	08cb      	lsrs	r3, r1, #3
    1b9c:	4203      	tst	r3, r0
    1b9e:	d1e4      	bne.n	1b6a <__aeabi_dadd+0x54e>
    1ba0:	08d2      	lsrs	r2, r2, #3
    1ba2:	0749      	lsls	r1, r1, #29
    1ba4:	4311      	orrs	r1, r2
    1ba6:	000f      	movs	r7, r1
    1ba8:	001c      	movs	r4, r3
    1baa:	e7de      	b.n	1b6a <__aeabi_dadd+0x54e>
    1bac:	2700      	movs	r7, #0
    1bae:	2400      	movs	r4, #0
    1bb0:	e5d5      	b.n	175e <__aeabi_dadd+0x142>
    1bb2:	2100      	movs	r1, #0
    1bb4:	e76b      	b.n	1a8e <__aeabi_dadd+0x472>
    1bb6:	2500      	movs	r5, #0
    1bb8:	2700      	movs	r7, #0
    1bba:	e5f3      	b.n	17a4 <__aeabi_dadd+0x188>
    1bbc:	464e      	mov	r6, r9
    1bbe:	0025      	movs	r5, r4
    1bc0:	3e20      	subs	r6, #32
    1bc2:	40f5      	lsrs	r5, r6
    1bc4:	464b      	mov	r3, r9
    1bc6:	002e      	movs	r6, r5
    1bc8:	2b20      	cmp	r3, #32
    1bca:	d02d      	beq.n	1c28 <__aeabi_dadd+0x60c>
    1bcc:	2540      	movs	r5, #64	; 0x40
    1bce:	1aed      	subs	r5, r5, r3
    1bd0:	40ac      	lsls	r4, r5
    1bd2:	4327      	orrs	r7, r4
    1bd4:	1e7c      	subs	r4, r7, #1
    1bd6:	41a7      	sbcs	r7, r4
    1bd8:	2400      	movs	r4, #0
    1bda:	4337      	orrs	r7, r6
    1bdc:	e6c9      	b.n	1972 <__aeabi_dadd+0x356>
    1bde:	2480      	movs	r4, #128	; 0x80
    1be0:	2500      	movs	r5, #0
    1be2:	0324      	lsls	r4, r4, #12
    1be4:	4e13      	ldr	r6, [pc, #76]	; (1c34 <__aeabi_dadd+0x618>)
    1be6:	2700      	movs	r7, #0
    1be8:	e5dc      	b.n	17a4 <__aeabi_dadd+0x188>
    1bea:	4327      	orrs	r7, r4
    1bec:	1e7c      	subs	r4, r7, #1
    1bee:	41a7      	sbcs	r7, r4
    1bf0:	2400      	movs	r4, #0
    1bf2:	e779      	b.n	1ae8 <__aeabi_dadd+0x4cc>
    1bf4:	000c      	movs	r4, r1
    1bf6:	0017      	movs	r7, r2
    1bf8:	4e0e      	ldr	r6, [pc, #56]	; (1c34 <__aeabi_dadd+0x618>)
    1bfa:	e593      	b.n	1724 <__aeabi_dadd+0x108>
    1bfc:	000c      	movs	r4, r1
    1bfe:	0017      	movs	r7, r2
    1c00:	e590      	b.n	1724 <__aeabi_dadd+0x108>
    1c02:	4656      	mov	r6, sl
    1c04:	0023      	movs	r3, r4
    1c06:	3e20      	subs	r6, #32
    1c08:	40f3      	lsrs	r3, r6
    1c0a:	4699      	mov	r9, r3
    1c0c:	4653      	mov	r3, sl
    1c0e:	2b20      	cmp	r3, #32
    1c10:	d00e      	beq.n	1c30 <__aeabi_dadd+0x614>
    1c12:	2340      	movs	r3, #64	; 0x40
    1c14:	4656      	mov	r6, sl
    1c16:	1b9b      	subs	r3, r3, r6
    1c18:	409c      	lsls	r4, r3
    1c1a:	4327      	orrs	r7, r4
    1c1c:	1e7c      	subs	r4, r7, #1
    1c1e:	41a7      	sbcs	r7, r4
    1c20:	464b      	mov	r3, r9
    1c22:	2400      	movs	r4, #0
    1c24:	431f      	orrs	r7, r3
    1c26:	e75f      	b.n	1ae8 <__aeabi_dadd+0x4cc>
    1c28:	2400      	movs	r4, #0
    1c2a:	e7d2      	b.n	1bd2 <__aeabi_dadd+0x5b6>
    1c2c:	0017      	movs	r7, r2
    1c2e:	e5b2      	b.n	1796 <__aeabi_dadd+0x17a>
    1c30:	2400      	movs	r4, #0
    1c32:	e7f2      	b.n	1c1a <__aeabi_dadd+0x5fe>
    1c34:	000007ff 	.word	0x000007ff
    1c38:	ff7fffff 	.word	0xff7fffff

00001c3c <__aeabi_ddiv>:
    1c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3e:	4657      	mov	r7, sl
    1c40:	4645      	mov	r5, r8
    1c42:	46de      	mov	lr, fp
    1c44:	464e      	mov	r6, r9
    1c46:	b5e0      	push	{r5, r6, r7, lr}
    1c48:	004c      	lsls	r4, r1, #1
    1c4a:	030e      	lsls	r6, r1, #12
    1c4c:	b087      	sub	sp, #28
    1c4e:	4683      	mov	fp, r0
    1c50:	4692      	mov	sl, r2
    1c52:	001d      	movs	r5, r3
    1c54:	4680      	mov	r8, r0
    1c56:	0b36      	lsrs	r6, r6, #12
    1c58:	0d64      	lsrs	r4, r4, #21
    1c5a:	0fcf      	lsrs	r7, r1, #31
    1c5c:	2c00      	cmp	r4, #0
    1c5e:	d04f      	beq.n	1d00 <__aeabi_ddiv+0xc4>
    1c60:	4b6f      	ldr	r3, [pc, #444]	; (1e20 <__aeabi_ddiv+0x1e4>)
    1c62:	429c      	cmp	r4, r3
    1c64:	d035      	beq.n	1cd2 <__aeabi_ddiv+0x96>
    1c66:	2380      	movs	r3, #128	; 0x80
    1c68:	0f42      	lsrs	r2, r0, #29
    1c6a:	041b      	lsls	r3, r3, #16
    1c6c:	00f6      	lsls	r6, r6, #3
    1c6e:	4313      	orrs	r3, r2
    1c70:	4333      	orrs	r3, r6
    1c72:	4699      	mov	r9, r3
    1c74:	00c3      	lsls	r3, r0, #3
    1c76:	4698      	mov	r8, r3
    1c78:	4b6a      	ldr	r3, [pc, #424]	; (1e24 <__aeabi_ddiv+0x1e8>)
    1c7a:	2600      	movs	r6, #0
    1c7c:	469c      	mov	ip, r3
    1c7e:	2300      	movs	r3, #0
    1c80:	4464      	add	r4, ip
    1c82:	9303      	str	r3, [sp, #12]
    1c84:	032b      	lsls	r3, r5, #12
    1c86:	0b1b      	lsrs	r3, r3, #12
    1c88:	469b      	mov	fp, r3
    1c8a:	006b      	lsls	r3, r5, #1
    1c8c:	0fed      	lsrs	r5, r5, #31
    1c8e:	4650      	mov	r0, sl
    1c90:	0d5b      	lsrs	r3, r3, #21
    1c92:	9501      	str	r5, [sp, #4]
    1c94:	d05e      	beq.n	1d54 <__aeabi_ddiv+0x118>
    1c96:	4a62      	ldr	r2, [pc, #392]	; (1e20 <__aeabi_ddiv+0x1e4>)
    1c98:	4293      	cmp	r3, r2
    1c9a:	d053      	beq.n	1d44 <__aeabi_ddiv+0x108>
    1c9c:	465a      	mov	r2, fp
    1c9e:	00d1      	lsls	r1, r2, #3
    1ca0:	2280      	movs	r2, #128	; 0x80
    1ca2:	0f40      	lsrs	r0, r0, #29
    1ca4:	0412      	lsls	r2, r2, #16
    1ca6:	4302      	orrs	r2, r0
    1ca8:	430a      	orrs	r2, r1
    1caa:	4693      	mov	fp, r2
    1cac:	4652      	mov	r2, sl
    1cae:	00d1      	lsls	r1, r2, #3
    1cb0:	4a5c      	ldr	r2, [pc, #368]	; (1e24 <__aeabi_ddiv+0x1e8>)
    1cb2:	4694      	mov	ip, r2
    1cb4:	2200      	movs	r2, #0
    1cb6:	4463      	add	r3, ip
    1cb8:	0038      	movs	r0, r7
    1cba:	4068      	eors	r0, r5
    1cbc:	4684      	mov	ip, r0
    1cbe:	9002      	str	r0, [sp, #8]
    1cc0:	1ae4      	subs	r4, r4, r3
    1cc2:	4316      	orrs	r6, r2
    1cc4:	2e0f      	cmp	r6, #15
    1cc6:	d900      	bls.n	1cca <__aeabi_ddiv+0x8e>
    1cc8:	e0b4      	b.n	1e34 <__aeabi_ddiv+0x1f8>
    1cca:	4b57      	ldr	r3, [pc, #348]	; (1e28 <__aeabi_ddiv+0x1ec>)
    1ccc:	00b6      	lsls	r6, r6, #2
    1cce:	599b      	ldr	r3, [r3, r6]
    1cd0:	469f      	mov	pc, r3
    1cd2:	0003      	movs	r3, r0
    1cd4:	4333      	orrs	r3, r6
    1cd6:	4699      	mov	r9, r3
    1cd8:	d16c      	bne.n	1db4 <__aeabi_ddiv+0x178>
    1cda:	2300      	movs	r3, #0
    1cdc:	4698      	mov	r8, r3
    1cde:	3302      	adds	r3, #2
    1ce0:	2608      	movs	r6, #8
    1ce2:	9303      	str	r3, [sp, #12]
    1ce4:	e7ce      	b.n	1c84 <__aeabi_ddiv+0x48>
    1ce6:	46cb      	mov	fp, r9
    1ce8:	4641      	mov	r1, r8
    1cea:	9a03      	ldr	r2, [sp, #12]
    1cec:	9701      	str	r7, [sp, #4]
    1cee:	2a02      	cmp	r2, #2
    1cf0:	d165      	bne.n	1dbe <__aeabi_ddiv+0x182>
    1cf2:	9b01      	ldr	r3, [sp, #4]
    1cf4:	4c4a      	ldr	r4, [pc, #296]	; (1e20 <__aeabi_ddiv+0x1e4>)
    1cf6:	469c      	mov	ip, r3
    1cf8:	2300      	movs	r3, #0
    1cfa:	2200      	movs	r2, #0
    1cfc:	4698      	mov	r8, r3
    1cfe:	e06b      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    1d00:	0003      	movs	r3, r0
    1d02:	4333      	orrs	r3, r6
    1d04:	4699      	mov	r9, r3
    1d06:	d04e      	beq.n	1da6 <__aeabi_ddiv+0x16a>
    1d08:	2e00      	cmp	r6, #0
    1d0a:	d100      	bne.n	1d0e <__aeabi_ddiv+0xd2>
    1d0c:	e1bc      	b.n	2088 <STACK_SIZE+0x88>
    1d0e:	0030      	movs	r0, r6
    1d10:	f001 f8ca 	bl	2ea8 <__clzsi2>
    1d14:	0003      	movs	r3, r0
    1d16:	3b0b      	subs	r3, #11
    1d18:	2b1c      	cmp	r3, #28
    1d1a:	dd00      	ble.n	1d1e <__aeabi_ddiv+0xe2>
    1d1c:	e1ac      	b.n	2078 <STACK_SIZE+0x78>
    1d1e:	221d      	movs	r2, #29
    1d20:	1ad3      	subs	r3, r2, r3
    1d22:	465a      	mov	r2, fp
    1d24:	0001      	movs	r1, r0
    1d26:	40da      	lsrs	r2, r3
    1d28:	3908      	subs	r1, #8
    1d2a:	408e      	lsls	r6, r1
    1d2c:	0013      	movs	r3, r2
    1d2e:	4333      	orrs	r3, r6
    1d30:	4699      	mov	r9, r3
    1d32:	465b      	mov	r3, fp
    1d34:	408b      	lsls	r3, r1
    1d36:	4698      	mov	r8, r3
    1d38:	2300      	movs	r3, #0
    1d3a:	4c3c      	ldr	r4, [pc, #240]	; (1e2c <__aeabi_ddiv+0x1f0>)
    1d3c:	2600      	movs	r6, #0
    1d3e:	1a24      	subs	r4, r4, r0
    1d40:	9303      	str	r3, [sp, #12]
    1d42:	e79f      	b.n	1c84 <__aeabi_ddiv+0x48>
    1d44:	4651      	mov	r1, sl
    1d46:	465a      	mov	r2, fp
    1d48:	4311      	orrs	r1, r2
    1d4a:	d129      	bne.n	1da0 <__aeabi_ddiv+0x164>
    1d4c:	2200      	movs	r2, #0
    1d4e:	4693      	mov	fp, r2
    1d50:	3202      	adds	r2, #2
    1d52:	e7b1      	b.n	1cb8 <__aeabi_ddiv+0x7c>
    1d54:	4659      	mov	r1, fp
    1d56:	4301      	orrs	r1, r0
    1d58:	d01e      	beq.n	1d98 <__aeabi_ddiv+0x15c>
    1d5a:	465b      	mov	r3, fp
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d100      	bne.n	1d62 <__aeabi_ddiv+0x126>
    1d60:	e19e      	b.n	20a0 <STACK_SIZE+0xa0>
    1d62:	4658      	mov	r0, fp
    1d64:	f001 f8a0 	bl	2ea8 <__clzsi2>
    1d68:	0003      	movs	r3, r0
    1d6a:	3b0b      	subs	r3, #11
    1d6c:	2b1c      	cmp	r3, #28
    1d6e:	dd00      	ble.n	1d72 <__aeabi_ddiv+0x136>
    1d70:	e18f      	b.n	2092 <STACK_SIZE+0x92>
    1d72:	0002      	movs	r2, r0
    1d74:	4659      	mov	r1, fp
    1d76:	3a08      	subs	r2, #8
    1d78:	4091      	lsls	r1, r2
    1d7a:	468b      	mov	fp, r1
    1d7c:	211d      	movs	r1, #29
    1d7e:	1acb      	subs	r3, r1, r3
    1d80:	4651      	mov	r1, sl
    1d82:	40d9      	lsrs	r1, r3
    1d84:	000b      	movs	r3, r1
    1d86:	4659      	mov	r1, fp
    1d88:	430b      	orrs	r3, r1
    1d8a:	4651      	mov	r1, sl
    1d8c:	469b      	mov	fp, r3
    1d8e:	4091      	lsls	r1, r2
    1d90:	4b26      	ldr	r3, [pc, #152]	; (1e2c <__aeabi_ddiv+0x1f0>)
    1d92:	2200      	movs	r2, #0
    1d94:	1a1b      	subs	r3, r3, r0
    1d96:	e78f      	b.n	1cb8 <__aeabi_ddiv+0x7c>
    1d98:	2300      	movs	r3, #0
    1d9a:	2201      	movs	r2, #1
    1d9c:	469b      	mov	fp, r3
    1d9e:	e78b      	b.n	1cb8 <__aeabi_ddiv+0x7c>
    1da0:	4651      	mov	r1, sl
    1da2:	2203      	movs	r2, #3
    1da4:	e788      	b.n	1cb8 <__aeabi_ddiv+0x7c>
    1da6:	2300      	movs	r3, #0
    1da8:	4698      	mov	r8, r3
    1daa:	3301      	adds	r3, #1
    1dac:	2604      	movs	r6, #4
    1dae:	2400      	movs	r4, #0
    1db0:	9303      	str	r3, [sp, #12]
    1db2:	e767      	b.n	1c84 <__aeabi_ddiv+0x48>
    1db4:	2303      	movs	r3, #3
    1db6:	46b1      	mov	r9, r6
    1db8:	9303      	str	r3, [sp, #12]
    1dba:	260c      	movs	r6, #12
    1dbc:	e762      	b.n	1c84 <__aeabi_ddiv+0x48>
    1dbe:	2a03      	cmp	r2, #3
    1dc0:	d100      	bne.n	1dc4 <__aeabi_ddiv+0x188>
    1dc2:	e25c      	b.n	227e <STACK_SIZE+0x27e>
    1dc4:	9b01      	ldr	r3, [sp, #4]
    1dc6:	2a01      	cmp	r2, #1
    1dc8:	d000      	beq.n	1dcc <__aeabi_ddiv+0x190>
    1dca:	e1e4      	b.n	2196 <STACK_SIZE+0x196>
    1dcc:	4013      	ands	r3, r2
    1dce:	469c      	mov	ip, r3
    1dd0:	2300      	movs	r3, #0
    1dd2:	2400      	movs	r4, #0
    1dd4:	2200      	movs	r2, #0
    1dd6:	4698      	mov	r8, r3
    1dd8:	2100      	movs	r1, #0
    1dda:	0312      	lsls	r2, r2, #12
    1ddc:	0b13      	lsrs	r3, r2, #12
    1dde:	0d0a      	lsrs	r2, r1, #20
    1de0:	0512      	lsls	r2, r2, #20
    1de2:	431a      	orrs	r2, r3
    1de4:	0523      	lsls	r3, r4, #20
    1de6:	4c12      	ldr	r4, [pc, #72]	; (1e30 <__aeabi_ddiv+0x1f4>)
    1de8:	4640      	mov	r0, r8
    1dea:	4022      	ands	r2, r4
    1dec:	4313      	orrs	r3, r2
    1dee:	4662      	mov	r2, ip
    1df0:	005b      	lsls	r3, r3, #1
    1df2:	07d2      	lsls	r2, r2, #31
    1df4:	085b      	lsrs	r3, r3, #1
    1df6:	4313      	orrs	r3, r2
    1df8:	0019      	movs	r1, r3
    1dfa:	b007      	add	sp, #28
    1dfc:	bc3c      	pop	{r2, r3, r4, r5}
    1dfe:	4690      	mov	r8, r2
    1e00:	4699      	mov	r9, r3
    1e02:	46a2      	mov	sl, r4
    1e04:	46ab      	mov	fp, r5
    1e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e08:	2300      	movs	r3, #0
    1e0a:	2280      	movs	r2, #128	; 0x80
    1e0c:	469c      	mov	ip, r3
    1e0e:	0312      	lsls	r2, r2, #12
    1e10:	4698      	mov	r8, r3
    1e12:	4c03      	ldr	r4, [pc, #12]	; (1e20 <__aeabi_ddiv+0x1e4>)
    1e14:	e7e0      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    1e16:	2300      	movs	r3, #0
    1e18:	4c01      	ldr	r4, [pc, #4]	; (1e20 <__aeabi_ddiv+0x1e4>)
    1e1a:	2200      	movs	r2, #0
    1e1c:	4698      	mov	r8, r3
    1e1e:	e7db      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    1e20:	000007ff 	.word	0x000007ff
    1e24:	fffffc01 	.word	0xfffffc01
    1e28:	00002f8c 	.word	0x00002f8c
    1e2c:	fffffc0d 	.word	0xfffffc0d
    1e30:	800fffff 	.word	0x800fffff
    1e34:	45d9      	cmp	r9, fp
    1e36:	d900      	bls.n	1e3a <__aeabi_ddiv+0x1fe>
    1e38:	e139      	b.n	20ae <STACK_SIZE+0xae>
    1e3a:	d100      	bne.n	1e3e <__aeabi_ddiv+0x202>
    1e3c:	e134      	b.n	20a8 <STACK_SIZE+0xa8>
    1e3e:	2300      	movs	r3, #0
    1e40:	4646      	mov	r6, r8
    1e42:	464d      	mov	r5, r9
    1e44:	469a      	mov	sl, r3
    1e46:	3c01      	subs	r4, #1
    1e48:	465b      	mov	r3, fp
    1e4a:	0e0a      	lsrs	r2, r1, #24
    1e4c:	021b      	lsls	r3, r3, #8
    1e4e:	431a      	orrs	r2, r3
    1e50:	020b      	lsls	r3, r1, #8
    1e52:	0c17      	lsrs	r7, r2, #16
    1e54:	9303      	str	r3, [sp, #12]
    1e56:	0413      	lsls	r3, r2, #16
    1e58:	0c1b      	lsrs	r3, r3, #16
    1e5a:	0039      	movs	r1, r7
    1e5c:	0028      	movs	r0, r5
    1e5e:	4690      	mov	r8, r2
    1e60:	9301      	str	r3, [sp, #4]
    1e62:	f7ff fb4f 	bl	1504 <__udivsi3>
    1e66:	0002      	movs	r2, r0
    1e68:	9b01      	ldr	r3, [sp, #4]
    1e6a:	4683      	mov	fp, r0
    1e6c:	435a      	muls	r2, r3
    1e6e:	0028      	movs	r0, r5
    1e70:	0039      	movs	r1, r7
    1e72:	4691      	mov	r9, r2
    1e74:	f7ff fbcc 	bl	1610 <__aeabi_uidivmod>
    1e78:	0c35      	lsrs	r5, r6, #16
    1e7a:	0409      	lsls	r1, r1, #16
    1e7c:	430d      	orrs	r5, r1
    1e7e:	45a9      	cmp	r9, r5
    1e80:	d90d      	bls.n	1e9e <__aeabi_ddiv+0x262>
    1e82:	465b      	mov	r3, fp
    1e84:	4445      	add	r5, r8
    1e86:	3b01      	subs	r3, #1
    1e88:	45a8      	cmp	r8, r5
    1e8a:	d900      	bls.n	1e8e <__aeabi_ddiv+0x252>
    1e8c:	e13a      	b.n	2104 <STACK_SIZE+0x104>
    1e8e:	45a9      	cmp	r9, r5
    1e90:	d800      	bhi.n	1e94 <__aeabi_ddiv+0x258>
    1e92:	e137      	b.n	2104 <STACK_SIZE+0x104>
    1e94:	2302      	movs	r3, #2
    1e96:	425b      	negs	r3, r3
    1e98:	469c      	mov	ip, r3
    1e9a:	4445      	add	r5, r8
    1e9c:	44e3      	add	fp, ip
    1e9e:	464b      	mov	r3, r9
    1ea0:	1aeb      	subs	r3, r5, r3
    1ea2:	0039      	movs	r1, r7
    1ea4:	0018      	movs	r0, r3
    1ea6:	9304      	str	r3, [sp, #16]
    1ea8:	f7ff fb2c 	bl	1504 <__udivsi3>
    1eac:	9b01      	ldr	r3, [sp, #4]
    1eae:	0005      	movs	r5, r0
    1eb0:	4343      	muls	r3, r0
    1eb2:	0039      	movs	r1, r7
    1eb4:	9804      	ldr	r0, [sp, #16]
    1eb6:	4699      	mov	r9, r3
    1eb8:	f7ff fbaa 	bl	1610 <__aeabi_uidivmod>
    1ebc:	0433      	lsls	r3, r6, #16
    1ebe:	0409      	lsls	r1, r1, #16
    1ec0:	0c1b      	lsrs	r3, r3, #16
    1ec2:	430b      	orrs	r3, r1
    1ec4:	4599      	cmp	r9, r3
    1ec6:	d909      	bls.n	1edc <__aeabi_ddiv+0x2a0>
    1ec8:	4443      	add	r3, r8
    1eca:	1e6a      	subs	r2, r5, #1
    1ecc:	4598      	cmp	r8, r3
    1ece:	d900      	bls.n	1ed2 <__aeabi_ddiv+0x296>
    1ed0:	e11a      	b.n	2108 <STACK_SIZE+0x108>
    1ed2:	4599      	cmp	r9, r3
    1ed4:	d800      	bhi.n	1ed8 <__aeabi_ddiv+0x29c>
    1ed6:	e117      	b.n	2108 <STACK_SIZE+0x108>
    1ed8:	3d02      	subs	r5, #2
    1eda:	4443      	add	r3, r8
    1edc:	464a      	mov	r2, r9
    1ede:	1a9b      	subs	r3, r3, r2
    1ee0:	465a      	mov	r2, fp
    1ee2:	0412      	lsls	r2, r2, #16
    1ee4:	432a      	orrs	r2, r5
    1ee6:	9903      	ldr	r1, [sp, #12]
    1ee8:	4693      	mov	fp, r2
    1eea:	0c10      	lsrs	r0, r2, #16
    1eec:	0c0a      	lsrs	r2, r1, #16
    1eee:	4691      	mov	r9, r2
    1ef0:	0409      	lsls	r1, r1, #16
    1ef2:	465a      	mov	r2, fp
    1ef4:	0c09      	lsrs	r1, r1, #16
    1ef6:	464e      	mov	r6, r9
    1ef8:	000d      	movs	r5, r1
    1efa:	0412      	lsls	r2, r2, #16
    1efc:	0c12      	lsrs	r2, r2, #16
    1efe:	4345      	muls	r5, r0
    1f00:	9105      	str	r1, [sp, #20]
    1f02:	4351      	muls	r1, r2
    1f04:	4372      	muls	r2, r6
    1f06:	4370      	muls	r0, r6
    1f08:	1952      	adds	r2, r2, r5
    1f0a:	0c0e      	lsrs	r6, r1, #16
    1f0c:	18b2      	adds	r2, r6, r2
    1f0e:	4295      	cmp	r5, r2
    1f10:	d903      	bls.n	1f1a <__aeabi_ddiv+0x2de>
    1f12:	2580      	movs	r5, #128	; 0x80
    1f14:	026d      	lsls	r5, r5, #9
    1f16:	46ac      	mov	ip, r5
    1f18:	4460      	add	r0, ip
    1f1a:	0c15      	lsrs	r5, r2, #16
    1f1c:	0409      	lsls	r1, r1, #16
    1f1e:	0412      	lsls	r2, r2, #16
    1f20:	0c09      	lsrs	r1, r1, #16
    1f22:	1828      	adds	r0, r5, r0
    1f24:	1852      	adds	r2, r2, r1
    1f26:	4283      	cmp	r3, r0
    1f28:	d200      	bcs.n	1f2c <__aeabi_ddiv+0x2f0>
    1f2a:	e0ce      	b.n	20ca <STACK_SIZE+0xca>
    1f2c:	d100      	bne.n	1f30 <__aeabi_ddiv+0x2f4>
    1f2e:	e0c8      	b.n	20c2 <STACK_SIZE+0xc2>
    1f30:	1a1d      	subs	r5, r3, r0
    1f32:	4653      	mov	r3, sl
    1f34:	1a9e      	subs	r6, r3, r2
    1f36:	45b2      	cmp	sl, r6
    1f38:	4192      	sbcs	r2, r2
    1f3a:	4252      	negs	r2, r2
    1f3c:	1aab      	subs	r3, r5, r2
    1f3e:	469a      	mov	sl, r3
    1f40:	4598      	cmp	r8, r3
    1f42:	d100      	bne.n	1f46 <__aeabi_ddiv+0x30a>
    1f44:	e117      	b.n	2176 <STACK_SIZE+0x176>
    1f46:	0039      	movs	r1, r7
    1f48:	0018      	movs	r0, r3
    1f4a:	f7ff fadb 	bl	1504 <__udivsi3>
    1f4e:	9b01      	ldr	r3, [sp, #4]
    1f50:	0005      	movs	r5, r0
    1f52:	4343      	muls	r3, r0
    1f54:	0039      	movs	r1, r7
    1f56:	4650      	mov	r0, sl
    1f58:	9304      	str	r3, [sp, #16]
    1f5a:	f7ff fb59 	bl	1610 <__aeabi_uidivmod>
    1f5e:	9804      	ldr	r0, [sp, #16]
    1f60:	040b      	lsls	r3, r1, #16
    1f62:	0c31      	lsrs	r1, r6, #16
    1f64:	4319      	orrs	r1, r3
    1f66:	4288      	cmp	r0, r1
    1f68:	d909      	bls.n	1f7e <__aeabi_ddiv+0x342>
    1f6a:	4441      	add	r1, r8
    1f6c:	1e6b      	subs	r3, r5, #1
    1f6e:	4588      	cmp	r8, r1
    1f70:	d900      	bls.n	1f74 <__aeabi_ddiv+0x338>
    1f72:	e107      	b.n	2184 <STACK_SIZE+0x184>
    1f74:	4288      	cmp	r0, r1
    1f76:	d800      	bhi.n	1f7a <__aeabi_ddiv+0x33e>
    1f78:	e104      	b.n	2184 <STACK_SIZE+0x184>
    1f7a:	3d02      	subs	r5, #2
    1f7c:	4441      	add	r1, r8
    1f7e:	9b04      	ldr	r3, [sp, #16]
    1f80:	1acb      	subs	r3, r1, r3
    1f82:	0018      	movs	r0, r3
    1f84:	0039      	movs	r1, r7
    1f86:	9304      	str	r3, [sp, #16]
    1f88:	f7ff fabc 	bl	1504 <__udivsi3>
    1f8c:	9b01      	ldr	r3, [sp, #4]
    1f8e:	4682      	mov	sl, r0
    1f90:	4343      	muls	r3, r0
    1f92:	0039      	movs	r1, r7
    1f94:	9804      	ldr	r0, [sp, #16]
    1f96:	9301      	str	r3, [sp, #4]
    1f98:	f7ff fb3a 	bl	1610 <__aeabi_uidivmod>
    1f9c:	9801      	ldr	r0, [sp, #4]
    1f9e:	040b      	lsls	r3, r1, #16
    1fa0:	0431      	lsls	r1, r6, #16
    1fa2:	0c09      	lsrs	r1, r1, #16
    1fa4:	4319      	orrs	r1, r3
    1fa6:	4288      	cmp	r0, r1
    1fa8:	d90d      	bls.n	1fc6 <__aeabi_ddiv+0x38a>
    1faa:	4653      	mov	r3, sl
    1fac:	4441      	add	r1, r8
    1fae:	3b01      	subs	r3, #1
    1fb0:	4588      	cmp	r8, r1
    1fb2:	d900      	bls.n	1fb6 <__aeabi_ddiv+0x37a>
    1fb4:	e0e8      	b.n	2188 <STACK_SIZE+0x188>
    1fb6:	4288      	cmp	r0, r1
    1fb8:	d800      	bhi.n	1fbc <__aeabi_ddiv+0x380>
    1fba:	e0e5      	b.n	2188 <STACK_SIZE+0x188>
    1fbc:	2302      	movs	r3, #2
    1fbe:	425b      	negs	r3, r3
    1fc0:	469c      	mov	ip, r3
    1fc2:	4441      	add	r1, r8
    1fc4:	44e2      	add	sl, ip
    1fc6:	9b01      	ldr	r3, [sp, #4]
    1fc8:	042d      	lsls	r5, r5, #16
    1fca:	1ace      	subs	r6, r1, r3
    1fcc:	4651      	mov	r1, sl
    1fce:	4329      	orrs	r1, r5
    1fd0:	9d05      	ldr	r5, [sp, #20]
    1fd2:	464f      	mov	r7, r9
    1fd4:	002a      	movs	r2, r5
    1fd6:	040b      	lsls	r3, r1, #16
    1fd8:	0c08      	lsrs	r0, r1, #16
    1fda:	0c1b      	lsrs	r3, r3, #16
    1fdc:	435a      	muls	r2, r3
    1fde:	4345      	muls	r5, r0
    1fe0:	437b      	muls	r3, r7
    1fe2:	4378      	muls	r0, r7
    1fe4:	195b      	adds	r3, r3, r5
    1fe6:	0c17      	lsrs	r7, r2, #16
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	429d      	cmp	r5, r3
    1fec:	d903      	bls.n	1ff6 <__aeabi_ddiv+0x3ba>
    1fee:	2580      	movs	r5, #128	; 0x80
    1ff0:	026d      	lsls	r5, r5, #9
    1ff2:	46ac      	mov	ip, r5
    1ff4:	4460      	add	r0, ip
    1ff6:	0c1d      	lsrs	r5, r3, #16
    1ff8:	0412      	lsls	r2, r2, #16
    1ffa:	041b      	lsls	r3, r3, #16
    1ffc:	0c12      	lsrs	r2, r2, #16
    1ffe:	1828      	adds	r0, r5, r0
    2000:	189b      	adds	r3, r3, r2
    2002:	4286      	cmp	r6, r0
    2004:	d200      	bcs.n	2008 <STACK_SIZE+0x8>
    2006:	e093      	b.n	2130 <STACK_SIZE+0x130>
    2008:	d100      	bne.n	200c <STACK_SIZE+0xc>
    200a:	e08e      	b.n	212a <STACK_SIZE+0x12a>
    200c:	2301      	movs	r3, #1
    200e:	4319      	orrs	r1, r3
    2010:	4ba0      	ldr	r3, [pc, #640]	; (2294 <STACK_SIZE+0x294>)
    2012:	18e3      	adds	r3, r4, r3
    2014:	2b00      	cmp	r3, #0
    2016:	dc00      	bgt.n	201a <STACK_SIZE+0x1a>
    2018:	e099      	b.n	214e <STACK_SIZE+0x14e>
    201a:	074a      	lsls	r2, r1, #29
    201c:	d000      	beq.n	2020 <STACK_SIZE+0x20>
    201e:	e09e      	b.n	215e <STACK_SIZE+0x15e>
    2020:	465a      	mov	r2, fp
    2022:	01d2      	lsls	r2, r2, #7
    2024:	d506      	bpl.n	2034 <STACK_SIZE+0x34>
    2026:	465a      	mov	r2, fp
    2028:	4b9b      	ldr	r3, [pc, #620]	; (2298 <STACK_SIZE+0x298>)
    202a:	401a      	ands	r2, r3
    202c:	2380      	movs	r3, #128	; 0x80
    202e:	4693      	mov	fp, r2
    2030:	00db      	lsls	r3, r3, #3
    2032:	18e3      	adds	r3, r4, r3
    2034:	4a99      	ldr	r2, [pc, #612]	; (229c <STACK_SIZE+0x29c>)
    2036:	4293      	cmp	r3, r2
    2038:	dd68      	ble.n	210c <STACK_SIZE+0x10c>
    203a:	2301      	movs	r3, #1
    203c:	9a02      	ldr	r2, [sp, #8]
    203e:	4c98      	ldr	r4, [pc, #608]	; (22a0 <STACK_SIZE+0x2a0>)
    2040:	401a      	ands	r2, r3
    2042:	2300      	movs	r3, #0
    2044:	4694      	mov	ip, r2
    2046:	4698      	mov	r8, r3
    2048:	2200      	movs	r2, #0
    204a:	e6c5      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    204c:	2280      	movs	r2, #128	; 0x80
    204e:	464b      	mov	r3, r9
    2050:	0312      	lsls	r2, r2, #12
    2052:	4213      	tst	r3, r2
    2054:	d00a      	beq.n	206c <STACK_SIZE+0x6c>
    2056:	465b      	mov	r3, fp
    2058:	4213      	tst	r3, r2
    205a:	d106      	bne.n	206a <STACK_SIZE+0x6a>
    205c:	431a      	orrs	r2, r3
    205e:	0312      	lsls	r2, r2, #12
    2060:	0b12      	lsrs	r2, r2, #12
    2062:	46ac      	mov	ip, r5
    2064:	4688      	mov	r8, r1
    2066:	4c8e      	ldr	r4, [pc, #568]	; (22a0 <STACK_SIZE+0x2a0>)
    2068:	e6b6      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    206a:	464b      	mov	r3, r9
    206c:	431a      	orrs	r2, r3
    206e:	0312      	lsls	r2, r2, #12
    2070:	0b12      	lsrs	r2, r2, #12
    2072:	46bc      	mov	ip, r7
    2074:	4c8a      	ldr	r4, [pc, #552]	; (22a0 <STACK_SIZE+0x2a0>)
    2076:	e6af      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    2078:	0003      	movs	r3, r0
    207a:	465a      	mov	r2, fp
    207c:	3b28      	subs	r3, #40	; 0x28
    207e:	409a      	lsls	r2, r3
    2080:	2300      	movs	r3, #0
    2082:	4691      	mov	r9, r2
    2084:	4698      	mov	r8, r3
    2086:	e657      	b.n	1d38 <__aeabi_ddiv+0xfc>
    2088:	4658      	mov	r0, fp
    208a:	f000 ff0d 	bl	2ea8 <__clzsi2>
    208e:	3020      	adds	r0, #32
    2090:	e640      	b.n	1d14 <__aeabi_ddiv+0xd8>
    2092:	0003      	movs	r3, r0
    2094:	4652      	mov	r2, sl
    2096:	3b28      	subs	r3, #40	; 0x28
    2098:	409a      	lsls	r2, r3
    209a:	2100      	movs	r1, #0
    209c:	4693      	mov	fp, r2
    209e:	e677      	b.n	1d90 <__aeabi_ddiv+0x154>
    20a0:	f000 ff02 	bl	2ea8 <__clzsi2>
    20a4:	3020      	adds	r0, #32
    20a6:	e65f      	b.n	1d68 <__aeabi_ddiv+0x12c>
    20a8:	4588      	cmp	r8, r1
    20aa:	d200      	bcs.n	20ae <STACK_SIZE+0xae>
    20ac:	e6c7      	b.n	1e3e <__aeabi_ddiv+0x202>
    20ae:	464b      	mov	r3, r9
    20b0:	07de      	lsls	r6, r3, #31
    20b2:	085d      	lsrs	r5, r3, #1
    20b4:	4643      	mov	r3, r8
    20b6:	085b      	lsrs	r3, r3, #1
    20b8:	431e      	orrs	r6, r3
    20ba:	4643      	mov	r3, r8
    20bc:	07db      	lsls	r3, r3, #31
    20be:	469a      	mov	sl, r3
    20c0:	e6c2      	b.n	1e48 <__aeabi_ddiv+0x20c>
    20c2:	2500      	movs	r5, #0
    20c4:	4592      	cmp	sl, r2
    20c6:	d300      	bcc.n	20ca <STACK_SIZE+0xca>
    20c8:	e733      	b.n	1f32 <__aeabi_ddiv+0x2f6>
    20ca:	9e03      	ldr	r6, [sp, #12]
    20cc:	4659      	mov	r1, fp
    20ce:	46b4      	mov	ip, r6
    20d0:	44e2      	add	sl, ip
    20d2:	45b2      	cmp	sl, r6
    20d4:	41ad      	sbcs	r5, r5
    20d6:	426d      	negs	r5, r5
    20d8:	4445      	add	r5, r8
    20da:	18eb      	adds	r3, r5, r3
    20dc:	3901      	subs	r1, #1
    20de:	4598      	cmp	r8, r3
    20e0:	d207      	bcs.n	20f2 <STACK_SIZE+0xf2>
    20e2:	4298      	cmp	r0, r3
    20e4:	d900      	bls.n	20e8 <STACK_SIZE+0xe8>
    20e6:	e07f      	b.n	21e8 <STACK_SIZE+0x1e8>
    20e8:	d100      	bne.n	20ec <STACK_SIZE+0xec>
    20ea:	e0bc      	b.n	2266 <STACK_SIZE+0x266>
    20ec:	1a1d      	subs	r5, r3, r0
    20ee:	468b      	mov	fp, r1
    20f0:	e71f      	b.n	1f32 <__aeabi_ddiv+0x2f6>
    20f2:	4598      	cmp	r8, r3
    20f4:	d1fa      	bne.n	20ec <STACK_SIZE+0xec>
    20f6:	9d03      	ldr	r5, [sp, #12]
    20f8:	4555      	cmp	r5, sl
    20fa:	d9f2      	bls.n	20e2 <STACK_SIZE+0xe2>
    20fc:	4643      	mov	r3, r8
    20fe:	468b      	mov	fp, r1
    2100:	1a1d      	subs	r5, r3, r0
    2102:	e716      	b.n	1f32 <__aeabi_ddiv+0x2f6>
    2104:	469b      	mov	fp, r3
    2106:	e6ca      	b.n	1e9e <__aeabi_ddiv+0x262>
    2108:	0015      	movs	r5, r2
    210a:	e6e7      	b.n	1edc <__aeabi_ddiv+0x2a0>
    210c:	465a      	mov	r2, fp
    210e:	08c9      	lsrs	r1, r1, #3
    2110:	0752      	lsls	r2, r2, #29
    2112:	430a      	orrs	r2, r1
    2114:	055b      	lsls	r3, r3, #21
    2116:	4690      	mov	r8, r2
    2118:	0d5c      	lsrs	r4, r3, #21
    211a:	465a      	mov	r2, fp
    211c:	2301      	movs	r3, #1
    211e:	9902      	ldr	r1, [sp, #8]
    2120:	0252      	lsls	r2, r2, #9
    2122:	4019      	ands	r1, r3
    2124:	0b12      	lsrs	r2, r2, #12
    2126:	468c      	mov	ip, r1
    2128:	e656      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    212a:	2b00      	cmp	r3, #0
    212c:	d100      	bne.n	2130 <STACK_SIZE+0x130>
    212e:	e76f      	b.n	2010 <STACK_SIZE+0x10>
    2130:	4446      	add	r6, r8
    2132:	1e4a      	subs	r2, r1, #1
    2134:	45b0      	cmp	r8, r6
    2136:	d929      	bls.n	218c <STACK_SIZE+0x18c>
    2138:	0011      	movs	r1, r2
    213a:	4286      	cmp	r6, r0
    213c:	d000      	beq.n	2140 <STACK_SIZE+0x140>
    213e:	e765      	b.n	200c <STACK_SIZE+0xc>
    2140:	9a03      	ldr	r2, [sp, #12]
    2142:	4293      	cmp	r3, r2
    2144:	d000      	beq.n	2148 <STACK_SIZE+0x148>
    2146:	e761      	b.n	200c <STACK_SIZE+0xc>
    2148:	e762      	b.n	2010 <STACK_SIZE+0x10>
    214a:	2101      	movs	r1, #1
    214c:	4249      	negs	r1, r1
    214e:	2001      	movs	r0, #1
    2150:	1ac2      	subs	r2, r0, r3
    2152:	2a38      	cmp	r2, #56	; 0x38
    2154:	dd21      	ble.n	219a <STACK_SIZE+0x19a>
    2156:	9b02      	ldr	r3, [sp, #8]
    2158:	4003      	ands	r3, r0
    215a:	469c      	mov	ip, r3
    215c:	e638      	b.n	1dd0 <__aeabi_ddiv+0x194>
    215e:	220f      	movs	r2, #15
    2160:	400a      	ands	r2, r1
    2162:	2a04      	cmp	r2, #4
    2164:	d100      	bne.n	2168 <STACK_SIZE+0x168>
    2166:	e75b      	b.n	2020 <STACK_SIZE+0x20>
    2168:	000a      	movs	r2, r1
    216a:	1d11      	adds	r1, r2, #4
    216c:	4291      	cmp	r1, r2
    216e:	4192      	sbcs	r2, r2
    2170:	4252      	negs	r2, r2
    2172:	4493      	add	fp, r2
    2174:	e754      	b.n	2020 <STACK_SIZE+0x20>
    2176:	4b47      	ldr	r3, [pc, #284]	; (2294 <STACK_SIZE+0x294>)
    2178:	18e3      	adds	r3, r4, r3
    217a:	2b00      	cmp	r3, #0
    217c:	dde5      	ble.n	214a <STACK_SIZE+0x14a>
    217e:	2201      	movs	r2, #1
    2180:	4252      	negs	r2, r2
    2182:	e7f2      	b.n	216a <STACK_SIZE+0x16a>
    2184:	001d      	movs	r5, r3
    2186:	e6fa      	b.n	1f7e <__aeabi_ddiv+0x342>
    2188:	469a      	mov	sl, r3
    218a:	e71c      	b.n	1fc6 <__aeabi_ddiv+0x38a>
    218c:	42b0      	cmp	r0, r6
    218e:	d839      	bhi.n	2204 <STACK_SIZE+0x204>
    2190:	d06e      	beq.n	2270 <STACK_SIZE+0x270>
    2192:	0011      	movs	r1, r2
    2194:	e73a      	b.n	200c <STACK_SIZE+0xc>
    2196:	9302      	str	r3, [sp, #8]
    2198:	e73a      	b.n	2010 <STACK_SIZE+0x10>
    219a:	2a1f      	cmp	r2, #31
    219c:	dc3c      	bgt.n	2218 <STACK_SIZE+0x218>
    219e:	2320      	movs	r3, #32
    21a0:	1a9b      	subs	r3, r3, r2
    21a2:	000c      	movs	r4, r1
    21a4:	4658      	mov	r0, fp
    21a6:	4099      	lsls	r1, r3
    21a8:	4098      	lsls	r0, r3
    21aa:	1e4b      	subs	r3, r1, #1
    21ac:	4199      	sbcs	r1, r3
    21ae:	465b      	mov	r3, fp
    21b0:	40d4      	lsrs	r4, r2
    21b2:	40d3      	lsrs	r3, r2
    21b4:	4320      	orrs	r0, r4
    21b6:	4308      	orrs	r0, r1
    21b8:	001a      	movs	r2, r3
    21ba:	0743      	lsls	r3, r0, #29
    21bc:	d009      	beq.n	21d2 <STACK_SIZE+0x1d2>
    21be:	230f      	movs	r3, #15
    21c0:	4003      	ands	r3, r0
    21c2:	2b04      	cmp	r3, #4
    21c4:	d005      	beq.n	21d2 <STACK_SIZE+0x1d2>
    21c6:	0001      	movs	r1, r0
    21c8:	1d08      	adds	r0, r1, #4
    21ca:	4288      	cmp	r0, r1
    21cc:	419b      	sbcs	r3, r3
    21ce:	425b      	negs	r3, r3
    21d0:	18d2      	adds	r2, r2, r3
    21d2:	0213      	lsls	r3, r2, #8
    21d4:	d53a      	bpl.n	224c <STACK_SIZE+0x24c>
    21d6:	2301      	movs	r3, #1
    21d8:	9a02      	ldr	r2, [sp, #8]
    21da:	2401      	movs	r4, #1
    21dc:	401a      	ands	r2, r3
    21de:	2300      	movs	r3, #0
    21e0:	4694      	mov	ip, r2
    21e2:	4698      	mov	r8, r3
    21e4:	2200      	movs	r2, #0
    21e6:	e5f7      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    21e8:	2102      	movs	r1, #2
    21ea:	4249      	negs	r1, r1
    21ec:	468c      	mov	ip, r1
    21ee:	9d03      	ldr	r5, [sp, #12]
    21f0:	44e3      	add	fp, ip
    21f2:	46ac      	mov	ip, r5
    21f4:	44e2      	add	sl, ip
    21f6:	45aa      	cmp	sl, r5
    21f8:	41ad      	sbcs	r5, r5
    21fa:	426d      	negs	r5, r5
    21fc:	4445      	add	r5, r8
    21fe:	18ed      	adds	r5, r5, r3
    2200:	1a2d      	subs	r5, r5, r0
    2202:	e696      	b.n	1f32 <__aeabi_ddiv+0x2f6>
    2204:	1e8a      	subs	r2, r1, #2
    2206:	9903      	ldr	r1, [sp, #12]
    2208:	004d      	lsls	r5, r1, #1
    220a:	428d      	cmp	r5, r1
    220c:	4189      	sbcs	r1, r1
    220e:	4249      	negs	r1, r1
    2210:	4441      	add	r1, r8
    2212:	1876      	adds	r6, r6, r1
    2214:	9503      	str	r5, [sp, #12]
    2216:	e78f      	b.n	2138 <STACK_SIZE+0x138>
    2218:	201f      	movs	r0, #31
    221a:	4240      	negs	r0, r0
    221c:	1ac3      	subs	r3, r0, r3
    221e:	4658      	mov	r0, fp
    2220:	40d8      	lsrs	r0, r3
    2222:	0003      	movs	r3, r0
    2224:	2a20      	cmp	r2, #32
    2226:	d028      	beq.n	227a <STACK_SIZE+0x27a>
    2228:	2040      	movs	r0, #64	; 0x40
    222a:	465d      	mov	r5, fp
    222c:	1a82      	subs	r2, r0, r2
    222e:	4095      	lsls	r5, r2
    2230:	4329      	orrs	r1, r5
    2232:	1e4a      	subs	r2, r1, #1
    2234:	4191      	sbcs	r1, r2
    2236:	4319      	orrs	r1, r3
    2238:	2307      	movs	r3, #7
    223a:	2200      	movs	r2, #0
    223c:	400b      	ands	r3, r1
    223e:	d009      	beq.n	2254 <STACK_SIZE+0x254>
    2240:	230f      	movs	r3, #15
    2242:	2200      	movs	r2, #0
    2244:	400b      	ands	r3, r1
    2246:	0008      	movs	r0, r1
    2248:	2b04      	cmp	r3, #4
    224a:	d1bd      	bne.n	21c8 <STACK_SIZE+0x1c8>
    224c:	0001      	movs	r1, r0
    224e:	0753      	lsls	r3, r2, #29
    2250:	0252      	lsls	r2, r2, #9
    2252:	0b12      	lsrs	r2, r2, #12
    2254:	08c9      	lsrs	r1, r1, #3
    2256:	4319      	orrs	r1, r3
    2258:	2301      	movs	r3, #1
    225a:	4688      	mov	r8, r1
    225c:	9902      	ldr	r1, [sp, #8]
    225e:	2400      	movs	r4, #0
    2260:	4019      	ands	r1, r3
    2262:	468c      	mov	ip, r1
    2264:	e5b8      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    2266:	4552      	cmp	r2, sl
    2268:	d8be      	bhi.n	21e8 <STACK_SIZE+0x1e8>
    226a:	468b      	mov	fp, r1
    226c:	2500      	movs	r5, #0
    226e:	e660      	b.n	1f32 <__aeabi_ddiv+0x2f6>
    2270:	9d03      	ldr	r5, [sp, #12]
    2272:	429d      	cmp	r5, r3
    2274:	d3c6      	bcc.n	2204 <STACK_SIZE+0x204>
    2276:	0011      	movs	r1, r2
    2278:	e762      	b.n	2140 <STACK_SIZE+0x140>
    227a:	2500      	movs	r5, #0
    227c:	e7d8      	b.n	2230 <STACK_SIZE+0x230>
    227e:	2280      	movs	r2, #128	; 0x80
    2280:	465b      	mov	r3, fp
    2282:	0312      	lsls	r2, r2, #12
    2284:	431a      	orrs	r2, r3
    2286:	9b01      	ldr	r3, [sp, #4]
    2288:	0312      	lsls	r2, r2, #12
    228a:	0b12      	lsrs	r2, r2, #12
    228c:	469c      	mov	ip, r3
    228e:	4688      	mov	r8, r1
    2290:	4c03      	ldr	r4, [pc, #12]	; (22a0 <STACK_SIZE+0x2a0>)
    2292:	e5a1      	b.n	1dd8 <__aeabi_ddiv+0x19c>
    2294:	000003ff 	.word	0x000003ff
    2298:	feffffff 	.word	0xfeffffff
    229c:	000007fe 	.word	0x000007fe
    22a0:	000007ff 	.word	0x000007ff

000022a4 <__aeabi_dmul>:
    22a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22a6:	4657      	mov	r7, sl
    22a8:	4645      	mov	r5, r8
    22aa:	46de      	mov	lr, fp
    22ac:	464e      	mov	r6, r9
    22ae:	b5e0      	push	{r5, r6, r7, lr}
    22b0:	030c      	lsls	r4, r1, #12
    22b2:	4698      	mov	r8, r3
    22b4:	004e      	lsls	r6, r1, #1
    22b6:	0b23      	lsrs	r3, r4, #12
    22b8:	b087      	sub	sp, #28
    22ba:	0007      	movs	r7, r0
    22bc:	4692      	mov	sl, r2
    22be:	469b      	mov	fp, r3
    22c0:	0d76      	lsrs	r6, r6, #21
    22c2:	0fcd      	lsrs	r5, r1, #31
    22c4:	2e00      	cmp	r6, #0
    22c6:	d06b      	beq.n	23a0 <__aeabi_dmul+0xfc>
    22c8:	4b6d      	ldr	r3, [pc, #436]	; (2480 <__aeabi_dmul+0x1dc>)
    22ca:	429e      	cmp	r6, r3
    22cc:	d035      	beq.n	233a <__aeabi_dmul+0x96>
    22ce:	2480      	movs	r4, #128	; 0x80
    22d0:	465b      	mov	r3, fp
    22d2:	0f42      	lsrs	r2, r0, #29
    22d4:	0424      	lsls	r4, r4, #16
    22d6:	00db      	lsls	r3, r3, #3
    22d8:	4314      	orrs	r4, r2
    22da:	431c      	orrs	r4, r3
    22dc:	00c3      	lsls	r3, r0, #3
    22de:	4699      	mov	r9, r3
    22e0:	4b68      	ldr	r3, [pc, #416]	; (2484 <__aeabi_dmul+0x1e0>)
    22e2:	46a3      	mov	fp, r4
    22e4:	469c      	mov	ip, r3
    22e6:	2300      	movs	r3, #0
    22e8:	2700      	movs	r7, #0
    22ea:	4466      	add	r6, ip
    22ec:	9302      	str	r3, [sp, #8]
    22ee:	4643      	mov	r3, r8
    22f0:	031c      	lsls	r4, r3, #12
    22f2:	005a      	lsls	r2, r3, #1
    22f4:	0fdb      	lsrs	r3, r3, #31
    22f6:	4650      	mov	r0, sl
    22f8:	0b24      	lsrs	r4, r4, #12
    22fa:	0d52      	lsrs	r2, r2, #21
    22fc:	4698      	mov	r8, r3
    22fe:	d100      	bne.n	2302 <__aeabi_dmul+0x5e>
    2300:	e076      	b.n	23f0 <__aeabi_dmul+0x14c>
    2302:	4b5f      	ldr	r3, [pc, #380]	; (2480 <__aeabi_dmul+0x1dc>)
    2304:	429a      	cmp	r2, r3
    2306:	d06d      	beq.n	23e4 <__aeabi_dmul+0x140>
    2308:	2380      	movs	r3, #128	; 0x80
    230a:	0f41      	lsrs	r1, r0, #29
    230c:	041b      	lsls	r3, r3, #16
    230e:	430b      	orrs	r3, r1
    2310:	495c      	ldr	r1, [pc, #368]	; (2484 <__aeabi_dmul+0x1e0>)
    2312:	00e4      	lsls	r4, r4, #3
    2314:	468c      	mov	ip, r1
    2316:	431c      	orrs	r4, r3
    2318:	00c3      	lsls	r3, r0, #3
    231a:	2000      	movs	r0, #0
    231c:	4462      	add	r2, ip
    231e:	4641      	mov	r1, r8
    2320:	18b6      	adds	r6, r6, r2
    2322:	4069      	eors	r1, r5
    2324:	1c72      	adds	r2, r6, #1
    2326:	9101      	str	r1, [sp, #4]
    2328:	4694      	mov	ip, r2
    232a:	4307      	orrs	r7, r0
    232c:	2f0f      	cmp	r7, #15
    232e:	d900      	bls.n	2332 <__aeabi_dmul+0x8e>
    2330:	e0b0      	b.n	2494 <__aeabi_dmul+0x1f0>
    2332:	4a55      	ldr	r2, [pc, #340]	; (2488 <__aeabi_dmul+0x1e4>)
    2334:	00bf      	lsls	r7, r7, #2
    2336:	59d2      	ldr	r2, [r2, r7]
    2338:	4697      	mov	pc, r2
    233a:	465b      	mov	r3, fp
    233c:	4303      	orrs	r3, r0
    233e:	4699      	mov	r9, r3
    2340:	d000      	beq.n	2344 <__aeabi_dmul+0xa0>
    2342:	e087      	b.n	2454 <__aeabi_dmul+0x1b0>
    2344:	2300      	movs	r3, #0
    2346:	469b      	mov	fp, r3
    2348:	3302      	adds	r3, #2
    234a:	2708      	movs	r7, #8
    234c:	9302      	str	r3, [sp, #8]
    234e:	e7ce      	b.n	22ee <__aeabi_dmul+0x4a>
    2350:	4642      	mov	r2, r8
    2352:	9201      	str	r2, [sp, #4]
    2354:	2802      	cmp	r0, #2
    2356:	d067      	beq.n	2428 <__aeabi_dmul+0x184>
    2358:	2803      	cmp	r0, #3
    235a:	d100      	bne.n	235e <__aeabi_dmul+0xba>
    235c:	e20e      	b.n	277c <__aeabi_dmul+0x4d8>
    235e:	2801      	cmp	r0, #1
    2360:	d000      	beq.n	2364 <__aeabi_dmul+0xc0>
    2362:	e162      	b.n	262a <__aeabi_dmul+0x386>
    2364:	2300      	movs	r3, #0
    2366:	2400      	movs	r4, #0
    2368:	2200      	movs	r2, #0
    236a:	4699      	mov	r9, r3
    236c:	9901      	ldr	r1, [sp, #4]
    236e:	4001      	ands	r1, r0
    2370:	b2cd      	uxtb	r5, r1
    2372:	2100      	movs	r1, #0
    2374:	0312      	lsls	r2, r2, #12
    2376:	0d0b      	lsrs	r3, r1, #20
    2378:	0b12      	lsrs	r2, r2, #12
    237a:	051b      	lsls	r3, r3, #20
    237c:	4313      	orrs	r3, r2
    237e:	4a43      	ldr	r2, [pc, #268]	; (248c <__aeabi_dmul+0x1e8>)
    2380:	0524      	lsls	r4, r4, #20
    2382:	4013      	ands	r3, r2
    2384:	431c      	orrs	r4, r3
    2386:	0064      	lsls	r4, r4, #1
    2388:	07ed      	lsls	r5, r5, #31
    238a:	0864      	lsrs	r4, r4, #1
    238c:	432c      	orrs	r4, r5
    238e:	4648      	mov	r0, r9
    2390:	0021      	movs	r1, r4
    2392:	b007      	add	sp, #28
    2394:	bc3c      	pop	{r2, r3, r4, r5}
    2396:	4690      	mov	r8, r2
    2398:	4699      	mov	r9, r3
    239a:	46a2      	mov	sl, r4
    239c:	46ab      	mov	fp, r5
    239e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a0:	4303      	orrs	r3, r0
    23a2:	4699      	mov	r9, r3
    23a4:	d04f      	beq.n	2446 <__aeabi_dmul+0x1a2>
    23a6:	465b      	mov	r3, fp
    23a8:	2b00      	cmp	r3, #0
    23aa:	d100      	bne.n	23ae <__aeabi_dmul+0x10a>
    23ac:	e189      	b.n	26c2 <__aeabi_dmul+0x41e>
    23ae:	4658      	mov	r0, fp
    23b0:	f000 fd7a 	bl	2ea8 <__clzsi2>
    23b4:	0003      	movs	r3, r0
    23b6:	3b0b      	subs	r3, #11
    23b8:	2b1c      	cmp	r3, #28
    23ba:	dd00      	ble.n	23be <__aeabi_dmul+0x11a>
    23bc:	e17a      	b.n	26b4 <__aeabi_dmul+0x410>
    23be:	221d      	movs	r2, #29
    23c0:	1ad3      	subs	r3, r2, r3
    23c2:	003a      	movs	r2, r7
    23c4:	0001      	movs	r1, r0
    23c6:	465c      	mov	r4, fp
    23c8:	40da      	lsrs	r2, r3
    23ca:	3908      	subs	r1, #8
    23cc:	408c      	lsls	r4, r1
    23ce:	0013      	movs	r3, r2
    23d0:	408f      	lsls	r7, r1
    23d2:	4323      	orrs	r3, r4
    23d4:	469b      	mov	fp, r3
    23d6:	46b9      	mov	r9, r7
    23d8:	2300      	movs	r3, #0
    23da:	4e2d      	ldr	r6, [pc, #180]	; (2490 <__aeabi_dmul+0x1ec>)
    23dc:	2700      	movs	r7, #0
    23de:	1a36      	subs	r6, r6, r0
    23e0:	9302      	str	r3, [sp, #8]
    23e2:	e784      	b.n	22ee <__aeabi_dmul+0x4a>
    23e4:	4653      	mov	r3, sl
    23e6:	4323      	orrs	r3, r4
    23e8:	d12a      	bne.n	2440 <__aeabi_dmul+0x19c>
    23ea:	2400      	movs	r4, #0
    23ec:	2002      	movs	r0, #2
    23ee:	e796      	b.n	231e <__aeabi_dmul+0x7a>
    23f0:	4653      	mov	r3, sl
    23f2:	4323      	orrs	r3, r4
    23f4:	d020      	beq.n	2438 <__aeabi_dmul+0x194>
    23f6:	2c00      	cmp	r4, #0
    23f8:	d100      	bne.n	23fc <__aeabi_dmul+0x158>
    23fa:	e157      	b.n	26ac <__aeabi_dmul+0x408>
    23fc:	0020      	movs	r0, r4
    23fe:	f000 fd53 	bl	2ea8 <__clzsi2>
    2402:	0003      	movs	r3, r0
    2404:	3b0b      	subs	r3, #11
    2406:	2b1c      	cmp	r3, #28
    2408:	dd00      	ble.n	240c <__aeabi_dmul+0x168>
    240a:	e149      	b.n	26a0 <__aeabi_dmul+0x3fc>
    240c:	211d      	movs	r1, #29
    240e:	1acb      	subs	r3, r1, r3
    2410:	4651      	mov	r1, sl
    2412:	0002      	movs	r2, r0
    2414:	40d9      	lsrs	r1, r3
    2416:	4653      	mov	r3, sl
    2418:	3a08      	subs	r2, #8
    241a:	4094      	lsls	r4, r2
    241c:	4093      	lsls	r3, r2
    241e:	430c      	orrs	r4, r1
    2420:	4a1b      	ldr	r2, [pc, #108]	; (2490 <__aeabi_dmul+0x1ec>)
    2422:	1a12      	subs	r2, r2, r0
    2424:	2000      	movs	r0, #0
    2426:	e77a      	b.n	231e <__aeabi_dmul+0x7a>
    2428:	2501      	movs	r5, #1
    242a:	9b01      	ldr	r3, [sp, #4]
    242c:	4c14      	ldr	r4, [pc, #80]	; (2480 <__aeabi_dmul+0x1dc>)
    242e:	401d      	ands	r5, r3
    2430:	2300      	movs	r3, #0
    2432:	2200      	movs	r2, #0
    2434:	4699      	mov	r9, r3
    2436:	e79c      	b.n	2372 <__aeabi_dmul+0xce>
    2438:	2400      	movs	r4, #0
    243a:	2200      	movs	r2, #0
    243c:	2001      	movs	r0, #1
    243e:	e76e      	b.n	231e <__aeabi_dmul+0x7a>
    2440:	4653      	mov	r3, sl
    2442:	2003      	movs	r0, #3
    2444:	e76b      	b.n	231e <__aeabi_dmul+0x7a>
    2446:	2300      	movs	r3, #0
    2448:	469b      	mov	fp, r3
    244a:	3301      	adds	r3, #1
    244c:	2704      	movs	r7, #4
    244e:	2600      	movs	r6, #0
    2450:	9302      	str	r3, [sp, #8]
    2452:	e74c      	b.n	22ee <__aeabi_dmul+0x4a>
    2454:	2303      	movs	r3, #3
    2456:	4681      	mov	r9, r0
    2458:	270c      	movs	r7, #12
    245a:	9302      	str	r3, [sp, #8]
    245c:	e747      	b.n	22ee <__aeabi_dmul+0x4a>
    245e:	2280      	movs	r2, #128	; 0x80
    2460:	2300      	movs	r3, #0
    2462:	2500      	movs	r5, #0
    2464:	0312      	lsls	r2, r2, #12
    2466:	4699      	mov	r9, r3
    2468:	4c05      	ldr	r4, [pc, #20]	; (2480 <__aeabi_dmul+0x1dc>)
    246a:	e782      	b.n	2372 <__aeabi_dmul+0xce>
    246c:	465c      	mov	r4, fp
    246e:	464b      	mov	r3, r9
    2470:	9802      	ldr	r0, [sp, #8]
    2472:	e76f      	b.n	2354 <__aeabi_dmul+0xb0>
    2474:	465c      	mov	r4, fp
    2476:	464b      	mov	r3, r9
    2478:	9501      	str	r5, [sp, #4]
    247a:	9802      	ldr	r0, [sp, #8]
    247c:	e76a      	b.n	2354 <__aeabi_dmul+0xb0>
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	000007ff 	.word	0x000007ff
    2484:	fffffc01 	.word	0xfffffc01
    2488:	00002fcc 	.word	0x00002fcc
    248c:	800fffff 	.word	0x800fffff
    2490:	fffffc0d 	.word	0xfffffc0d
    2494:	464a      	mov	r2, r9
    2496:	4649      	mov	r1, r9
    2498:	0c17      	lsrs	r7, r2, #16
    249a:	0c1a      	lsrs	r2, r3, #16
    249c:	041b      	lsls	r3, r3, #16
    249e:	0c1b      	lsrs	r3, r3, #16
    24a0:	0408      	lsls	r0, r1, #16
    24a2:	0019      	movs	r1, r3
    24a4:	0c00      	lsrs	r0, r0, #16
    24a6:	4341      	muls	r1, r0
    24a8:	0015      	movs	r5, r2
    24aa:	4688      	mov	r8, r1
    24ac:	0019      	movs	r1, r3
    24ae:	437d      	muls	r5, r7
    24b0:	4379      	muls	r1, r7
    24b2:	9503      	str	r5, [sp, #12]
    24b4:	4689      	mov	r9, r1
    24b6:	0029      	movs	r1, r5
    24b8:	0015      	movs	r5, r2
    24ba:	4345      	muls	r5, r0
    24bc:	444d      	add	r5, r9
    24be:	9502      	str	r5, [sp, #8]
    24c0:	4645      	mov	r5, r8
    24c2:	0c2d      	lsrs	r5, r5, #16
    24c4:	46aa      	mov	sl, r5
    24c6:	9d02      	ldr	r5, [sp, #8]
    24c8:	4455      	add	r5, sl
    24ca:	45a9      	cmp	r9, r5
    24cc:	d906      	bls.n	24dc <__aeabi_dmul+0x238>
    24ce:	468a      	mov	sl, r1
    24d0:	2180      	movs	r1, #128	; 0x80
    24d2:	0249      	lsls	r1, r1, #9
    24d4:	4689      	mov	r9, r1
    24d6:	44ca      	add	sl, r9
    24d8:	4651      	mov	r1, sl
    24da:	9103      	str	r1, [sp, #12]
    24dc:	0c29      	lsrs	r1, r5, #16
    24de:	9104      	str	r1, [sp, #16]
    24e0:	4641      	mov	r1, r8
    24e2:	0409      	lsls	r1, r1, #16
    24e4:	042d      	lsls	r5, r5, #16
    24e6:	0c09      	lsrs	r1, r1, #16
    24e8:	4688      	mov	r8, r1
    24ea:	0029      	movs	r1, r5
    24ec:	0c25      	lsrs	r5, r4, #16
    24ee:	0424      	lsls	r4, r4, #16
    24f0:	4441      	add	r1, r8
    24f2:	0c24      	lsrs	r4, r4, #16
    24f4:	9105      	str	r1, [sp, #20]
    24f6:	0021      	movs	r1, r4
    24f8:	4341      	muls	r1, r0
    24fa:	4688      	mov	r8, r1
    24fc:	0021      	movs	r1, r4
    24fe:	4379      	muls	r1, r7
    2500:	468a      	mov	sl, r1
    2502:	4368      	muls	r0, r5
    2504:	4641      	mov	r1, r8
    2506:	4450      	add	r0, sl
    2508:	4681      	mov	r9, r0
    250a:	0c08      	lsrs	r0, r1, #16
    250c:	4448      	add	r0, r9
    250e:	436f      	muls	r7, r5
    2510:	4582      	cmp	sl, r0
    2512:	d903      	bls.n	251c <__aeabi_dmul+0x278>
    2514:	2180      	movs	r1, #128	; 0x80
    2516:	0249      	lsls	r1, r1, #9
    2518:	4689      	mov	r9, r1
    251a:	444f      	add	r7, r9
    251c:	0c01      	lsrs	r1, r0, #16
    251e:	4689      	mov	r9, r1
    2520:	0039      	movs	r1, r7
    2522:	4449      	add	r1, r9
    2524:	9102      	str	r1, [sp, #8]
    2526:	4641      	mov	r1, r8
    2528:	040f      	lsls	r7, r1, #16
    252a:	9904      	ldr	r1, [sp, #16]
    252c:	0c3f      	lsrs	r7, r7, #16
    252e:	4688      	mov	r8, r1
    2530:	0400      	lsls	r0, r0, #16
    2532:	19c0      	adds	r0, r0, r7
    2534:	4480      	add	r8, r0
    2536:	4641      	mov	r1, r8
    2538:	9104      	str	r1, [sp, #16]
    253a:	4659      	mov	r1, fp
    253c:	0c0f      	lsrs	r7, r1, #16
    253e:	0409      	lsls	r1, r1, #16
    2540:	0c09      	lsrs	r1, r1, #16
    2542:	4688      	mov	r8, r1
    2544:	4359      	muls	r1, r3
    2546:	468a      	mov	sl, r1
    2548:	0039      	movs	r1, r7
    254a:	4351      	muls	r1, r2
    254c:	4689      	mov	r9, r1
    254e:	4641      	mov	r1, r8
    2550:	434a      	muls	r2, r1
    2552:	4651      	mov	r1, sl
    2554:	0c09      	lsrs	r1, r1, #16
    2556:	468b      	mov	fp, r1
    2558:	437b      	muls	r3, r7
    255a:	18d2      	adds	r2, r2, r3
    255c:	445a      	add	r2, fp
    255e:	4293      	cmp	r3, r2
    2560:	d903      	bls.n	256a <__aeabi_dmul+0x2c6>
    2562:	2380      	movs	r3, #128	; 0x80
    2564:	025b      	lsls	r3, r3, #9
    2566:	469b      	mov	fp, r3
    2568:	44d9      	add	r9, fp
    256a:	4651      	mov	r1, sl
    256c:	0409      	lsls	r1, r1, #16
    256e:	0c09      	lsrs	r1, r1, #16
    2570:	468a      	mov	sl, r1
    2572:	4641      	mov	r1, r8
    2574:	4361      	muls	r1, r4
    2576:	437c      	muls	r4, r7
    2578:	0c13      	lsrs	r3, r2, #16
    257a:	0412      	lsls	r2, r2, #16
    257c:	444b      	add	r3, r9
    257e:	4452      	add	r2, sl
    2580:	46a1      	mov	r9, r4
    2582:	468a      	mov	sl, r1
    2584:	003c      	movs	r4, r7
    2586:	4641      	mov	r1, r8
    2588:	436c      	muls	r4, r5
    258a:	434d      	muls	r5, r1
    258c:	4651      	mov	r1, sl
    258e:	444d      	add	r5, r9
    2590:	0c0f      	lsrs	r7, r1, #16
    2592:	197d      	adds	r5, r7, r5
    2594:	45a9      	cmp	r9, r5
    2596:	d903      	bls.n	25a0 <__aeabi_dmul+0x2fc>
    2598:	2180      	movs	r1, #128	; 0x80
    259a:	0249      	lsls	r1, r1, #9
    259c:	4688      	mov	r8, r1
    259e:	4444      	add	r4, r8
    25a0:	9f04      	ldr	r7, [sp, #16]
    25a2:	9903      	ldr	r1, [sp, #12]
    25a4:	46b8      	mov	r8, r7
    25a6:	4441      	add	r1, r8
    25a8:	468b      	mov	fp, r1
    25aa:	4583      	cmp	fp, r0
    25ac:	4180      	sbcs	r0, r0
    25ae:	4241      	negs	r1, r0
    25b0:	4688      	mov	r8, r1
    25b2:	4651      	mov	r1, sl
    25b4:	0408      	lsls	r0, r1, #16
    25b6:	042f      	lsls	r7, r5, #16
    25b8:	0c00      	lsrs	r0, r0, #16
    25ba:	183f      	adds	r7, r7, r0
    25bc:	4658      	mov	r0, fp
    25be:	9902      	ldr	r1, [sp, #8]
    25c0:	1810      	adds	r0, r2, r0
    25c2:	4689      	mov	r9, r1
    25c4:	4290      	cmp	r0, r2
    25c6:	4192      	sbcs	r2, r2
    25c8:	444f      	add	r7, r9
    25ca:	46ba      	mov	sl, r7
    25cc:	4252      	negs	r2, r2
    25ce:	4699      	mov	r9, r3
    25d0:	4693      	mov	fp, r2
    25d2:	44c2      	add	sl, r8
    25d4:	44d1      	add	r9, sl
    25d6:	44cb      	add	fp, r9
    25d8:	428f      	cmp	r7, r1
    25da:	41bf      	sbcs	r7, r7
    25dc:	45c2      	cmp	sl, r8
    25de:	4189      	sbcs	r1, r1
    25e0:	4599      	cmp	r9, r3
    25e2:	419b      	sbcs	r3, r3
    25e4:	4593      	cmp	fp, r2
    25e6:	4192      	sbcs	r2, r2
    25e8:	427f      	negs	r7, r7
    25ea:	4249      	negs	r1, r1
    25ec:	0c2d      	lsrs	r5, r5, #16
    25ee:	4252      	negs	r2, r2
    25f0:	430f      	orrs	r7, r1
    25f2:	425b      	negs	r3, r3
    25f4:	4313      	orrs	r3, r2
    25f6:	197f      	adds	r7, r7, r5
    25f8:	18ff      	adds	r7, r7, r3
    25fa:	465b      	mov	r3, fp
    25fc:	193c      	adds	r4, r7, r4
    25fe:	0ddb      	lsrs	r3, r3, #23
    2600:	9a05      	ldr	r2, [sp, #20]
    2602:	0264      	lsls	r4, r4, #9
    2604:	431c      	orrs	r4, r3
    2606:	0243      	lsls	r3, r0, #9
    2608:	4313      	orrs	r3, r2
    260a:	1e5d      	subs	r5, r3, #1
    260c:	41ab      	sbcs	r3, r5
    260e:	465a      	mov	r2, fp
    2610:	0dc0      	lsrs	r0, r0, #23
    2612:	4303      	orrs	r3, r0
    2614:	0252      	lsls	r2, r2, #9
    2616:	4313      	orrs	r3, r2
    2618:	01e2      	lsls	r2, r4, #7
    261a:	d556      	bpl.n	26ca <__aeabi_dmul+0x426>
    261c:	2001      	movs	r0, #1
    261e:	085a      	lsrs	r2, r3, #1
    2620:	4003      	ands	r3, r0
    2622:	4313      	orrs	r3, r2
    2624:	07e2      	lsls	r2, r4, #31
    2626:	4313      	orrs	r3, r2
    2628:	0864      	lsrs	r4, r4, #1
    262a:	485a      	ldr	r0, [pc, #360]	; (2794 <__aeabi_dmul+0x4f0>)
    262c:	4460      	add	r0, ip
    262e:	2800      	cmp	r0, #0
    2630:	dd4d      	ble.n	26ce <__aeabi_dmul+0x42a>
    2632:	075a      	lsls	r2, r3, #29
    2634:	d009      	beq.n	264a <__aeabi_dmul+0x3a6>
    2636:	220f      	movs	r2, #15
    2638:	401a      	ands	r2, r3
    263a:	2a04      	cmp	r2, #4
    263c:	d005      	beq.n	264a <__aeabi_dmul+0x3a6>
    263e:	1d1a      	adds	r2, r3, #4
    2640:	429a      	cmp	r2, r3
    2642:	419b      	sbcs	r3, r3
    2644:	425b      	negs	r3, r3
    2646:	18e4      	adds	r4, r4, r3
    2648:	0013      	movs	r3, r2
    264a:	01e2      	lsls	r2, r4, #7
    264c:	d504      	bpl.n	2658 <__aeabi_dmul+0x3b4>
    264e:	2080      	movs	r0, #128	; 0x80
    2650:	4a51      	ldr	r2, [pc, #324]	; (2798 <__aeabi_dmul+0x4f4>)
    2652:	00c0      	lsls	r0, r0, #3
    2654:	4014      	ands	r4, r2
    2656:	4460      	add	r0, ip
    2658:	4a50      	ldr	r2, [pc, #320]	; (279c <__aeabi_dmul+0x4f8>)
    265a:	4290      	cmp	r0, r2
    265c:	dd00      	ble.n	2660 <__aeabi_dmul+0x3bc>
    265e:	e6e3      	b.n	2428 <__aeabi_dmul+0x184>
    2660:	2501      	movs	r5, #1
    2662:	08db      	lsrs	r3, r3, #3
    2664:	0762      	lsls	r2, r4, #29
    2666:	431a      	orrs	r2, r3
    2668:	0264      	lsls	r4, r4, #9
    266a:	9b01      	ldr	r3, [sp, #4]
    266c:	4691      	mov	r9, r2
    266e:	0b22      	lsrs	r2, r4, #12
    2670:	0544      	lsls	r4, r0, #21
    2672:	0d64      	lsrs	r4, r4, #21
    2674:	401d      	ands	r5, r3
    2676:	e67c      	b.n	2372 <__aeabi_dmul+0xce>
    2678:	2280      	movs	r2, #128	; 0x80
    267a:	4659      	mov	r1, fp
    267c:	0312      	lsls	r2, r2, #12
    267e:	4211      	tst	r1, r2
    2680:	d008      	beq.n	2694 <__aeabi_dmul+0x3f0>
    2682:	4214      	tst	r4, r2
    2684:	d106      	bne.n	2694 <__aeabi_dmul+0x3f0>
    2686:	4322      	orrs	r2, r4
    2688:	0312      	lsls	r2, r2, #12
    268a:	0b12      	lsrs	r2, r2, #12
    268c:	4645      	mov	r5, r8
    268e:	4699      	mov	r9, r3
    2690:	4c43      	ldr	r4, [pc, #268]	; (27a0 <__aeabi_dmul+0x4fc>)
    2692:	e66e      	b.n	2372 <__aeabi_dmul+0xce>
    2694:	465b      	mov	r3, fp
    2696:	431a      	orrs	r2, r3
    2698:	0312      	lsls	r2, r2, #12
    269a:	0b12      	lsrs	r2, r2, #12
    269c:	4c40      	ldr	r4, [pc, #256]	; (27a0 <__aeabi_dmul+0x4fc>)
    269e:	e668      	b.n	2372 <__aeabi_dmul+0xce>
    26a0:	0003      	movs	r3, r0
    26a2:	4654      	mov	r4, sl
    26a4:	3b28      	subs	r3, #40	; 0x28
    26a6:	409c      	lsls	r4, r3
    26a8:	2300      	movs	r3, #0
    26aa:	e6b9      	b.n	2420 <__aeabi_dmul+0x17c>
    26ac:	f000 fbfc 	bl	2ea8 <__clzsi2>
    26b0:	3020      	adds	r0, #32
    26b2:	e6a6      	b.n	2402 <__aeabi_dmul+0x15e>
    26b4:	0003      	movs	r3, r0
    26b6:	3b28      	subs	r3, #40	; 0x28
    26b8:	409f      	lsls	r7, r3
    26ba:	2300      	movs	r3, #0
    26bc:	46bb      	mov	fp, r7
    26be:	4699      	mov	r9, r3
    26c0:	e68a      	b.n	23d8 <__aeabi_dmul+0x134>
    26c2:	f000 fbf1 	bl	2ea8 <__clzsi2>
    26c6:	3020      	adds	r0, #32
    26c8:	e674      	b.n	23b4 <__aeabi_dmul+0x110>
    26ca:	46b4      	mov	ip, r6
    26cc:	e7ad      	b.n	262a <__aeabi_dmul+0x386>
    26ce:	2501      	movs	r5, #1
    26d0:	1a2a      	subs	r2, r5, r0
    26d2:	2a38      	cmp	r2, #56	; 0x38
    26d4:	dd06      	ble.n	26e4 <__aeabi_dmul+0x440>
    26d6:	9b01      	ldr	r3, [sp, #4]
    26d8:	2400      	movs	r4, #0
    26da:	401d      	ands	r5, r3
    26dc:	2300      	movs	r3, #0
    26de:	2200      	movs	r2, #0
    26e0:	4699      	mov	r9, r3
    26e2:	e646      	b.n	2372 <__aeabi_dmul+0xce>
    26e4:	2a1f      	cmp	r2, #31
    26e6:	dc21      	bgt.n	272c <__aeabi_dmul+0x488>
    26e8:	2520      	movs	r5, #32
    26ea:	0020      	movs	r0, r4
    26ec:	1aad      	subs	r5, r5, r2
    26ee:	001e      	movs	r6, r3
    26f0:	40ab      	lsls	r3, r5
    26f2:	40a8      	lsls	r0, r5
    26f4:	40d6      	lsrs	r6, r2
    26f6:	1e5d      	subs	r5, r3, #1
    26f8:	41ab      	sbcs	r3, r5
    26fa:	4330      	orrs	r0, r6
    26fc:	4318      	orrs	r0, r3
    26fe:	40d4      	lsrs	r4, r2
    2700:	0743      	lsls	r3, r0, #29
    2702:	d009      	beq.n	2718 <__aeabi_dmul+0x474>
    2704:	230f      	movs	r3, #15
    2706:	4003      	ands	r3, r0
    2708:	2b04      	cmp	r3, #4
    270a:	d005      	beq.n	2718 <__aeabi_dmul+0x474>
    270c:	0003      	movs	r3, r0
    270e:	1d18      	adds	r0, r3, #4
    2710:	4298      	cmp	r0, r3
    2712:	419b      	sbcs	r3, r3
    2714:	425b      	negs	r3, r3
    2716:	18e4      	adds	r4, r4, r3
    2718:	0223      	lsls	r3, r4, #8
    271a:	d521      	bpl.n	2760 <__aeabi_dmul+0x4bc>
    271c:	2501      	movs	r5, #1
    271e:	9b01      	ldr	r3, [sp, #4]
    2720:	2401      	movs	r4, #1
    2722:	401d      	ands	r5, r3
    2724:	2300      	movs	r3, #0
    2726:	2200      	movs	r2, #0
    2728:	4699      	mov	r9, r3
    272a:	e622      	b.n	2372 <__aeabi_dmul+0xce>
    272c:	251f      	movs	r5, #31
    272e:	0021      	movs	r1, r4
    2730:	426d      	negs	r5, r5
    2732:	1a28      	subs	r0, r5, r0
    2734:	40c1      	lsrs	r1, r0
    2736:	0008      	movs	r0, r1
    2738:	2a20      	cmp	r2, #32
    273a:	d01d      	beq.n	2778 <__aeabi_dmul+0x4d4>
    273c:	355f      	adds	r5, #95	; 0x5f
    273e:	1aaa      	subs	r2, r5, r2
    2740:	4094      	lsls	r4, r2
    2742:	4323      	orrs	r3, r4
    2744:	1e5c      	subs	r4, r3, #1
    2746:	41a3      	sbcs	r3, r4
    2748:	2507      	movs	r5, #7
    274a:	4303      	orrs	r3, r0
    274c:	401d      	ands	r5, r3
    274e:	2200      	movs	r2, #0
    2750:	2d00      	cmp	r5, #0
    2752:	d009      	beq.n	2768 <__aeabi_dmul+0x4c4>
    2754:	220f      	movs	r2, #15
    2756:	2400      	movs	r4, #0
    2758:	401a      	ands	r2, r3
    275a:	0018      	movs	r0, r3
    275c:	2a04      	cmp	r2, #4
    275e:	d1d6      	bne.n	270e <__aeabi_dmul+0x46a>
    2760:	0003      	movs	r3, r0
    2762:	0765      	lsls	r5, r4, #29
    2764:	0264      	lsls	r4, r4, #9
    2766:	0b22      	lsrs	r2, r4, #12
    2768:	08db      	lsrs	r3, r3, #3
    276a:	432b      	orrs	r3, r5
    276c:	2501      	movs	r5, #1
    276e:	4699      	mov	r9, r3
    2770:	9b01      	ldr	r3, [sp, #4]
    2772:	2400      	movs	r4, #0
    2774:	401d      	ands	r5, r3
    2776:	e5fc      	b.n	2372 <__aeabi_dmul+0xce>
    2778:	2400      	movs	r4, #0
    277a:	e7e2      	b.n	2742 <__aeabi_dmul+0x49e>
    277c:	2280      	movs	r2, #128	; 0x80
    277e:	2501      	movs	r5, #1
    2780:	0312      	lsls	r2, r2, #12
    2782:	4322      	orrs	r2, r4
    2784:	9901      	ldr	r1, [sp, #4]
    2786:	0312      	lsls	r2, r2, #12
    2788:	0b12      	lsrs	r2, r2, #12
    278a:	400d      	ands	r5, r1
    278c:	4699      	mov	r9, r3
    278e:	4c04      	ldr	r4, [pc, #16]	; (27a0 <__aeabi_dmul+0x4fc>)
    2790:	e5ef      	b.n	2372 <__aeabi_dmul+0xce>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	000003ff 	.word	0x000003ff
    2798:	feffffff 	.word	0xfeffffff
    279c:	000007fe 	.word	0x000007fe
    27a0:	000007ff 	.word	0x000007ff

000027a4 <__aeabi_dsub>:
    27a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a6:	4646      	mov	r6, r8
    27a8:	46d6      	mov	lr, sl
    27aa:	464f      	mov	r7, r9
    27ac:	030c      	lsls	r4, r1, #12
    27ae:	b5c0      	push	{r6, r7, lr}
    27b0:	0fcd      	lsrs	r5, r1, #31
    27b2:	004e      	lsls	r6, r1, #1
    27b4:	0a61      	lsrs	r1, r4, #9
    27b6:	0f44      	lsrs	r4, r0, #29
    27b8:	430c      	orrs	r4, r1
    27ba:	00c1      	lsls	r1, r0, #3
    27bc:	0058      	lsls	r0, r3, #1
    27be:	0d40      	lsrs	r0, r0, #21
    27c0:	4684      	mov	ip, r0
    27c2:	468a      	mov	sl, r1
    27c4:	000f      	movs	r7, r1
    27c6:	0319      	lsls	r1, r3, #12
    27c8:	0f50      	lsrs	r0, r2, #29
    27ca:	0a49      	lsrs	r1, r1, #9
    27cc:	4301      	orrs	r1, r0
    27ce:	48c6      	ldr	r0, [pc, #792]	; (2ae8 <__aeabi_dsub+0x344>)
    27d0:	0d76      	lsrs	r6, r6, #21
    27d2:	46a8      	mov	r8, r5
    27d4:	0fdb      	lsrs	r3, r3, #31
    27d6:	00d2      	lsls	r2, r2, #3
    27d8:	4584      	cmp	ip, r0
    27da:	d100      	bne.n	27de <__aeabi_dsub+0x3a>
    27dc:	e0d8      	b.n	2990 <__aeabi_dsub+0x1ec>
    27de:	2001      	movs	r0, #1
    27e0:	4043      	eors	r3, r0
    27e2:	42ab      	cmp	r3, r5
    27e4:	d100      	bne.n	27e8 <__aeabi_dsub+0x44>
    27e6:	e0a6      	b.n	2936 <__aeabi_dsub+0x192>
    27e8:	4660      	mov	r0, ip
    27ea:	1a35      	subs	r5, r6, r0
    27ec:	2d00      	cmp	r5, #0
    27ee:	dc00      	bgt.n	27f2 <__aeabi_dsub+0x4e>
    27f0:	e105      	b.n	29fe <__aeabi_dsub+0x25a>
    27f2:	2800      	cmp	r0, #0
    27f4:	d110      	bne.n	2818 <__aeabi_dsub+0x74>
    27f6:	000b      	movs	r3, r1
    27f8:	4313      	orrs	r3, r2
    27fa:	d100      	bne.n	27fe <__aeabi_dsub+0x5a>
    27fc:	e0d7      	b.n	29ae <__aeabi_dsub+0x20a>
    27fe:	1e6b      	subs	r3, r5, #1
    2800:	2b00      	cmp	r3, #0
    2802:	d000      	beq.n	2806 <__aeabi_dsub+0x62>
    2804:	e14b      	b.n	2a9e <__aeabi_dsub+0x2fa>
    2806:	4653      	mov	r3, sl
    2808:	1a9f      	subs	r7, r3, r2
    280a:	45ba      	cmp	sl, r7
    280c:	4180      	sbcs	r0, r0
    280e:	1a64      	subs	r4, r4, r1
    2810:	4240      	negs	r0, r0
    2812:	1a24      	subs	r4, r4, r0
    2814:	2601      	movs	r6, #1
    2816:	e01e      	b.n	2856 <__aeabi_dsub+0xb2>
    2818:	4bb3      	ldr	r3, [pc, #716]	; (2ae8 <__aeabi_dsub+0x344>)
    281a:	429e      	cmp	r6, r3
    281c:	d048      	beq.n	28b0 <__aeabi_dsub+0x10c>
    281e:	2380      	movs	r3, #128	; 0x80
    2820:	041b      	lsls	r3, r3, #16
    2822:	4319      	orrs	r1, r3
    2824:	2d38      	cmp	r5, #56	; 0x38
    2826:	dd00      	ble.n	282a <__aeabi_dsub+0x86>
    2828:	e119      	b.n	2a5e <__aeabi_dsub+0x2ba>
    282a:	2d1f      	cmp	r5, #31
    282c:	dd00      	ble.n	2830 <__aeabi_dsub+0x8c>
    282e:	e14c      	b.n	2aca <__aeabi_dsub+0x326>
    2830:	2320      	movs	r3, #32
    2832:	000f      	movs	r7, r1
    2834:	1b5b      	subs	r3, r3, r5
    2836:	0010      	movs	r0, r2
    2838:	409a      	lsls	r2, r3
    283a:	409f      	lsls	r7, r3
    283c:	40e8      	lsrs	r0, r5
    283e:	1e53      	subs	r3, r2, #1
    2840:	419a      	sbcs	r2, r3
    2842:	40e9      	lsrs	r1, r5
    2844:	4307      	orrs	r7, r0
    2846:	4317      	orrs	r7, r2
    2848:	4653      	mov	r3, sl
    284a:	1bdf      	subs	r7, r3, r7
    284c:	1a61      	subs	r1, r4, r1
    284e:	45ba      	cmp	sl, r7
    2850:	41a4      	sbcs	r4, r4
    2852:	4264      	negs	r4, r4
    2854:	1b0c      	subs	r4, r1, r4
    2856:	0223      	lsls	r3, r4, #8
    2858:	d400      	bmi.n	285c <__aeabi_dsub+0xb8>
    285a:	e0c5      	b.n	29e8 <__aeabi_dsub+0x244>
    285c:	0264      	lsls	r4, r4, #9
    285e:	0a65      	lsrs	r5, r4, #9
    2860:	2d00      	cmp	r5, #0
    2862:	d100      	bne.n	2866 <__aeabi_dsub+0xc2>
    2864:	e0f6      	b.n	2a54 <__aeabi_dsub+0x2b0>
    2866:	0028      	movs	r0, r5
    2868:	f000 fb1e 	bl	2ea8 <__clzsi2>
    286c:	0003      	movs	r3, r0
    286e:	3b08      	subs	r3, #8
    2870:	2b1f      	cmp	r3, #31
    2872:	dd00      	ble.n	2876 <__aeabi_dsub+0xd2>
    2874:	e0e9      	b.n	2a4a <__aeabi_dsub+0x2a6>
    2876:	2220      	movs	r2, #32
    2878:	003c      	movs	r4, r7
    287a:	1ad2      	subs	r2, r2, r3
    287c:	409d      	lsls	r5, r3
    287e:	40d4      	lsrs	r4, r2
    2880:	409f      	lsls	r7, r3
    2882:	4325      	orrs	r5, r4
    2884:	429e      	cmp	r6, r3
    2886:	dd00      	ble.n	288a <__aeabi_dsub+0xe6>
    2888:	e0db      	b.n	2a42 <__aeabi_dsub+0x29e>
    288a:	1b9e      	subs	r6, r3, r6
    288c:	1c73      	adds	r3, r6, #1
    288e:	2b1f      	cmp	r3, #31
    2890:	dd00      	ble.n	2894 <__aeabi_dsub+0xf0>
    2892:	e10a      	b.n	2aaa <__aeabi_dsub+0x306>
    2894:	2220      	movs	r2, #32
    2896:	0038      	movs	r0, r7
    2898:	1ad2      	subs	r2, r2, r3
    289a:	0029      	movs	r1, r5
    289c:	4097      	lsls	r7, r2
    289e:	002c      	movs	r4, r5
    28a0:	4091      	lsls	r1, r2
    28a2:	40d8      	lsrs	r0, r3
    28a4:	1e7a      	subs	r2, r7, #1
    28a6:	4197      	sbcs	r7, r2
    28a8:	40dc      	lsrs	r4, r3
    28aa:	2600      	movs	r6, #0
    28ac:	4301      	orrs	r1, r0
    28ae:	430f      	orrs	r7, r1
    28b0:	077b      	lsls	r3, r7, #29
    28b2:	d009      	beq.n	28c8 <__aeabi_dsub+0x124>
    28b4:	230f      	movs	r3, #15
    28b6:	403b      	ands	r3, r7
    28b8:	2b04      	cmp	r3, #4
    28ba:	d005      	beq.n	28c8 <__aeabi_dsub+0x124>
    28bc:	1d3b      	adds	r3, r7, #4
    28be:	42bb      	cmp	r3, r7
    28c0:	41bf      	sbcs	r7, r7
    28c2:	427f      	negs	r7, r7
    28c4:	19e4      	adds	r4, r4, r7
    28c6:	001f      	movs	r7, r3
    28c8:	0223      	lsls	r3, r4, #8
    28ca:	d525      	bpl.n	2918 <__aeabi_dsub+0x174>
    28cc:	4b86      	ldr	r3, [pc, #536]	; (2ae8 <__aeabi_dsub+0x344>)
    28ce:	3601      	adds	r6, #1
    28d0:	429e      	cmp	r6, r3
    28d2:	d100      	bne.n	28d6 <__aeabi_dsub+0x132>
    28d4:	e0af      	b.n	2a36 <__aeabi_dsub+0x292>
    28d6:	4b85      	ldr	r3, [pc, #532]	; (2aec <__aeabi_dsub+0x348>)
    28d8:	2501      	movs	r5, #1
    28da:	401c      	ands	r4, r3
    28dc:	4643      	mov	r3, r8
    28de:	0762      	lsls	r2, r4, #29
    28e0:	08ff      	lsrs	r7, r7, #3
    28e2:	0264      	lsls	r4, r4, #9
    28e4:	0576      	lsls	r6, r6, #21
    28e6:	4317      	orrs	r7, r2
    28e8:	0b24      	lsrs	r4, r4, #12
    28ea:	0d76      	lsrs	r6, r6, #21
    28ec:	401d      	ands	r5, r3
    28ee:	2100      	movs	r1, #0
    28f0:	0324      	lsls	r4, r4, #12
    28f2:	0b23      	lsrs	r3, r4, #12
    28f4:	0d0c      	lsrs	r4, r1, #20
    28f6:	4a7e      	ldr	r2, [pc, #504]	; (2af0 <__aeabi_dsub+0x34c>)
    28f8:	0524      	lsls	r4, r4, #20
    28fa:	431c      	orrs	r4, r3
    28fc:	4014      	ands	r4, r2
    28fe:	0533      	lsls	r3, r6, #20
    2900:	4323      	orrs	r3, r4
    2902:	005b      	lsls	r3, r3, #1
    2904:	07ed      	lsls	r5, r5, #31
    2906:	085b      	lsrs	r3, r3, #1
    2908:	432b      	orrs	r3, r5
    290a:	0038      	movs	r0, r7
    290c:	0019      	movs	r1, r3
    290e:	bc1c      	pop	{r2, r3, r4}
    2910:	4690      	mov	r8, r2
    2912:	4699      	mov	r9, r3
    2914:	46a2      	mov	sl, r4
    2916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2918:	2501      	movs	r5, #1
    291a:	4643      	mov	r3, r8
    291c:	0762      	lsls	r2, r4, #29
    291e:	08ff      	lsrs	r7, r7, #3
    2920:	4317      	orrs	r7, r2
    2922:	08e4      	lsrs	r4, r4, #3
    2924:	401d      	ands	r5, r3
    2926:	4b70      	ldr	r3, [pc, #448]	; (2ae8 <__aeabi_dsub+0x344>)
    2928:	429e      	cmp	r6, r3
    292a:	d036      	beq.n	299a <__aeabi_dsub+0x1f6>
    292c:	0324      	lsls	r4, r4, #12
    292e:	0576      	lsls	r6, r6, #21
    2930:	0b24      	lsrs	r4, r4, #12
    2932:	0d76      	lsrs	r6, r6, #21
    2934:	e7db      	b.n	28ee <__aeabi_dsub+0x14a>
    2936:	4663      	mov	r3, ip
    2938:	1af3      	subs	r3, r6, r3
    293a:	2b00      	cmp	r3, #0
    293c:	dc00      	bgt.n	2940 <__aeabi_dsub+0x19c>
    293e:	e094      	b.n	2a6a <__aeabi_dsub+0x2c6>
    2940:	4660      	mov	r0, ip
    2942:	2800      	cmp	r0, #0
    2944:	d035      	beq.n	29b2 <__aeabi_dsub+0x20e>
    2946:	4868      	ldr	r0, [pc, #416]	; (2ae8 <__aeabi_dsub+0x344>)
    2948:	4286      	cmp	r6, r0
    294a:	d0b1      	beq.n	28b0 <__aeabi_dsub+0x10c>
    294c:	2780      	movs	r7, #128	; 0x80
    294e:	043f      	lsls	r7, r7, #16
    2950:	4339      	orrs	r1, r7
    2952:	2b38      	cmp	r3, #56	; 0x38
    2954:	dc00      	bgt.n	2958 <__aeabi_dsub+0x1b4>
    2956:	e0fd      	b.n	2b54 <__aeabi_dsub+0x3b0>
    2958:	430a      	orrs	r2, r1
    295a:	0017      	movs	r7, r2
    295c:	2100      	movs	r1, #0
    295e:	1e7a      	subs	r2, r7, #1
    2960:	4197      	sbcs	r7, r2
    2962:	4457      	add	r7, sl
    2964:	4557      	cmp	r7, sl
    2966:	4180      	sbcs	r0, r0
    2968:	1909      	adds	r1, r1, r4
    296a:	4244      	negs	r4, r0
    296c:	190c      	adds	r4, r1, r4
    296e:	0223      	lsls	r3, r4, #8
    2970:	d53a      	bpl.n	29e8 <__aeabi_dsub+0x244>
    2972:	4b5d      	ldr	r3, [pc, #372]	; (2ae8 <__aeabi_dsub+0x344>)
    2974:	3601      	adds	r6, #1
    2976:	429e      	cmp	r6, r3
    2978:	d100      	bne.n	297c <__aeabi_dsub+0x1d8>
    297a:	e14b      	b.n	2c14 <__aeabi_dsub+0x470>
    297c:	2201      	movs	r2, #1
    297e:	4b5b      	ldr	r3, [pc, #364]	; (2aec <__aeabi_dsub+0x348>)
    2980:	401c      	ands	r4, r3
    2982:	087b      	lsrs	r3, r7, #1
    2984:	4017      	ands	r7, r2
    2986:	431f      	orrs	r7, r3
    2988:	07e2      	lsls	r2, r4, #31
    298a:	4317      	orrs	r7, r2
    298c:	0864      	lsrs	r4, r4, #1
    298e:	e78f      	b.n	28b0 <__aeabi_dsub+0x10c>
    2990:	0008      	movs	r0, r1
    2992:	4310      	orrs	r0, r2
    2994:	d000      	beq.n	2998 <__aeabi_dsub+0x1f4>
    2996:	e724      	b.n	27e2 <__aeabi_dsub+0x3e>
    2998:	e721      	b.n	27de <__aeabi_dsub+0x3a>
    299a:	0023      	movs	r3, r4
    299c:	433b      	orrs	r3, r7
    299e:	d100      	bne.n	29a2 <__aeabi_dsub+0x1fe>
    29a0:	e1b9      	b.n	2d16 <__aeabi_dsub+0x572>
    29a2:	2280      	movs	r2, #128	; 0x80
    29a4:	0312      	lsls	r2, r2, #12
    29a6:	4314      	orrs	r4, r2
    29a8:	0324      	lsls	r4, r4, #12
    29aa:	0b24      	lsrs	r4, r4, #12
    29ac:	e79f      	b.n	28ee <__aeabi_dsub+0x14a>
    29ae:	002e      	movs	r6, r5
    29b0:	e77e      	b.n	28b0 <__aeabi_dsub+0x10c>
    29b2:	0008      	movs	r0, r1
    29b4:	4310      	orrs	r0, r2
    29b6:	d100      	bne.n	29ba <__aeabi_dsub+0x216>
    29b8:	e0ca      	b.n	2b50 <__aeabi_dsub+0x3ac>
    29ba:	1e58      	subs	r0, r3, #1
    29bc:	4684      	mov	ip, r0
    29be:	2800      	cmp	r0, #0
    29c0:	d000      	beq.n	29c4 <__aeabi_dsub+0x220>
    29c2:	e0e7      	b.n	2b94 <__aeabi_dsub+0x3f0>
    29c4:	4452      	add	r2, sl
    29c6:	4552      	cmp	r2, sl
    29c8:	4180      	sbcs	r0, r0
    29ca:	1864      	adds	r4, r4, r1
    29cc:	4240      	negs	r0, r0
    29ce:	1824      	adds	r4, r4, r0
    29d0:	0017      	movs	r7, r2
    29d2:	2601      	movs	r6, #1
    29d4:	0223      	lsls	r3, r4, #8
    29d6:	d507      	bpl.n	29e8 <__aeabi_dsub+0x244>
    29d8:	2602      	movs	r6, #2
    29da:	e7cf      	b.n	297c <__aeabi_dsub+0x1d8>
    29dc:	4664      	mov	r4, ip
    29de:	432c      	orrs	r4, r5
    29e0:	d100      	bne.n	29e4 <__aeabi_dsub+0x240>
    29e2:	e1b3      	b.n	2d4c <__aeabi_dsub+0x5a8>
    29e4:	002c      	movs	r4, r5
    29e6:	4667      	mov	r7, ip
    29e8:	077b      	lsls	r3, r7, #29
    29ea:	d000      	beq.n	29ee <__aeabi_dsub+0x24a>
    29ec:	e762      	b.n	28b4 <__aeabi_dsub+0x110>
    29ee:	0763      	lsls	r3, r4, #29
    29f0:	08ff      	lsrs	r7, r7, #3
    29f2:	431f      	orrs	r7, r3
    29f4:	2501      	movs	r5, #1
    29f6:	4643      	mov	r3, r8
    29f8:	08e4      	lsrs	r4, r4, #3
    29fa:	401d      	ands	r5, r3
    29fc:	e793      	b.n	2926 <__aeabi_dsub+0x182>
    29fe:	2d00      	cmp	r5, #0
    2a00:	d178      	bne.n	2af4 <__aeabi_dsub+0x350>
    2a02:	1c75      	adds	r5, r6, #1
    2a04:	056d      	lsls	r5, r5, #21
    2a06:	0d6d      	lsrs	r5, r5, #21
    2a08:	2d01      	cmp	r5, #1
    2a0a:	dc00      	bgt.n	2a0e <__aeabi_dsub+0x26a>
    2a0c:	e0f2      	b.n	2bf4 <__aeabi_dsub+0x450>
    2a0e:	4650      	mov	r0, sl
    2a10:	1a80      	subs	r0, r0, r2
    2a12:	4582      	cmp	sl, r0
    2a14:	41bf      	sbcs	r7, r7
    2a16:	1a65      	subs	r5, r4, r1
    2a18:	427f      	negs	r7, r7
    2a1a:	1bed      	subs	r5, r5, r7
    2a1c:	4684      	mov	ip, r0
    2a1e:	0228      	lsls	r0, r5, #8
    2a20:	d400      	bmi.n	2a24 <__aeabi_dsub+0x280>
    2a22:	e08c      	b.n	2b3e <__aeabi_dsub+0x39a>
    2a24:	4650      	mov	r0, sl
    2a26:	1a17      	subs	r7, r2, r0
    2a28:	42ba      	cmp	r2, r7
    2a2a:	4192      	sbcs	r2, r2
    2a2c:	1b0c      	subs	r4, r1, r4
    2a2e:	4255      	negs	r5, r2
    2a30:	1b65      	subs	r5, r4, r5
    2a32:	4698      	mov	r8, r3
    2a34:	e714      	b.n	2860 <__aeabi_dsub+0xbc>
    2a36:	2501      	movs	r5, #1
    2a38:	4643      	mov	r3, r8
    2a3a:	2400      	movs	r4, #0
    2a3c:	401d      	ands	r5, r3
    2a3e:	2700      	movs	r7, #0
    2a40:	e755      	b.n	28ee <__aeabi_dsub+0x14a>
    2a42:	4c2a      	ldr	r4, [pc, #168]	; (2aec <__aeabi_dsub+0x348>)
    2a44:	1af6      	subs	r6, r6, r3
    2a46:	402c      	ands	r4, r5
    2a48:	e732      	b.n	28b0 <__aeabi_dsub+0x10c>
    2a4a:	003d      	movs	r5, r7
    2a4c:	3828      	subs	r0, #40	; 0x28
    2a4e:	4085      	lsls	r5, r0
    2a50:	2700      	movs	r7, #0
    2a52:	e717      	b.n	2884 <__aeabi_dsub+0xe0>
    2a54:	0038      	movs	r0, r7
    2a56:	f000 fa27 	bl	2ea8 <__clzsi2>
    2a5a:	3020      	adds	r0, #32
    2a5c:	e706      	b.n	286c <__aeabi_dsub+0xc8>
    2a5e:	430a      	orrs	r2, r1
    2a60:	0017      	movs	r7, r2
    2a62:	2100      	movs	r1, #0
    2a64:	1e7a      	subs	r2, r7, #1
    2a66:	4197      	sbcs	r7, r2
    2a68:	e6ee      	b.n	2848 <__aeabi_dsub+0xa4>
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d000      	beq.n	2a70 <__aeabi_dsub+0x2cc>
    2a6e:	e0e5      	b.n	2c3c <__aeabi_dsub+0x498>
    2a70:	1c73      	adds	r3, r6, #1
    2a72:	469c      	mov	ip, r3
    2a74:	055b      	lsls	r3, r3, #21
    2a76:	0d5b      	lsrs	r3, r3, #21
    2a78:	2b01      	cmp	r3, #1
    2a7a:	dc00      	bgt.n	2a7e <__aeabi_dsub+0x2da>
    2a7c:	e09f      	b.n	2bbe <__aeabi_dsub+0x41a>
    2a7e:	4b1a      	ldr	r3, [pc, #104]	; (2ae8 <__aeabi_dsub+0x344>)
    2a80:	459c      	cmp	ip, r3
    2a82:	d100      	bne.n	2a86 <__aeabi_dsub+0x2e2>
    2a84:	e0c5      	b.n	2c12 <__aeabi_dsub+0x46e>
    2a86:	4452      	add	r2, sl
    2a88:	4552      	cmp	r2, sl
    2a8a:	4180      	sbcs	r0, r0
    2a8c:	1864      	adds	r4, r4, r1
    2a8e:	4240      	negs	r0, r0
    2a90:	1824      	adds	r4, r4, r0
    2a92:	07e7      	lsls	r7, r4, #31
    2a94:	0852      	lsrs	r2, r2, #1
    2a96:	4317      	orrs	r7, r2
    2a98:	0864      	lsrs	r4, r4, #1
    2a9a:	4666      	mov	r6, ip
    2a9c:	e708      	b.n	28b0 <__aeabi_dsub+0x10c>
    2a9e:	4812      	ldr	r0, [pc, #72]	; (2ae8 <__aeabi_dsub+0x344>)
    2aa0:	4285      	cmp	r5, r0
    2aa2:	d100      	bne.n	2aa6 <__aeabi_dsub+0x302>
    2aa4:	e085      	b.n	2bb2 <__aeabi_dsub+0x40e>
    2aa6:	001d      	movs	r5, r3
    2aa8:	e6bc      	b.n	2824 <__aeabi_dsub+0x80>
    2aaa:	0029      	movs	r1, r5
    2aac:	3e1f      	subs	r6, #31
    2aae:	40f1      	lsrs	r1, r6
    2ab0:	2b20      	cmp	r3, #32
    2ab2:	d100      	bne.n	2ab6 <__aeabi_dsub+0x312>
    2ab4:	e07f      	b.n	2bb6 <__aeabi_dsub+0x412>
    2ab6:	2240      	movs	r2, #64	; 0x40
    2ab8:	1ad3      	subs	r3, r2, r3
    2aba:	409d      	lsls	r5, r3
    2abc:	432f      	orrs	r7, r5
    2abe:	1e7d      	subs	r5, r7, #1
    2ac0:	41af      	sbcs	r7, r5
    2ac2:	2400      	movs	r4, #0
    2ac4:	430f      	orrs	r7, r1
    2ac6:	2600      	movs	r6, #0
    2ac8:	e78e      	b.n	29e8 <__aeabi_dsub+0x244>
    2aca:	002b      	movs	r3, r5
    2acc:	000f      	movs	r7, r1
    2ace:	3b20      	subs	r3, #32
    2ad0:	40df      	lsrs	r7, r3
    2ad2:	2d20      	cmp	r5, #32
    2ad4:	d071      	beq.n	2bba <__aeabi_dsub+0x416>
    2ad6:	2340      	movs	r3, #64	; 0x40
    2ad8:	1b5d      	subs	r5, r3, r5
    2ada:	40a9      	lsls	r1, r5
    2adc:	430a      	orrs	r2, r1
    2ade:	1e51      	subs	r1, r2, #1
    2ae0:	418a      	sbcs	r2, r1
    2ae2:	2100      	movs	r1, #0
    2ae4:	4317      	orrs	r7, r2
    2ae6:	e6af      	b.n	2848 <__aeabi_dsub+0xa4>
    2ae8:	000007ff 	.word	0x000007ff
    2aec:	ff7fffff 	.word	0xff7fffff
    2af0:	800fffff 	.word	0x800fffff
    2af4:	2e00      	cmp	r6, #0
    2af6:	d03e      	beq.n	2b76 <__aeabi_dsub+0x3d2>
    2af8:	4eb3      	ldr	r6, [pc, #716]	; (2dc8 <__aeabi_dsub+0x624>)
    2afa:	45b4      	cmp	ip, r6
    2afc:	d045      	beq.n	2b8a <__aeabi_dsub+0x3e6>
    2afe:	2680      	movs	r6, #128	; 0x80
    2b00:	0436      	lsls	r6, r6, #16
    2b02:	426d      	negs	r5, r5
    2b04:	4334      	orrs	r4, r6
    2b06:	2d38      	cmp	r5, #56	; 0x38
    2b08:	dd00      	ble.n	2b0c <__aeabi_dsub+0x368>
    2b0a:	e0a8      	b.n	2c5e <__aeabi_dsub+0x4ba>
    2b0c:	2d1f      	cmp	r5, #31
    2b0e:	dd00      	ble.n	2b12 <__aeabi_dsub+0x36e>
    2b10:	e11f      	b.n	2d52 <__aeabi_dsub+0x5ae>
    2b12:	2620      	movs	r6, #32
    2b14:	0027      	movs	r7, r4
    2b16:	4650      	mov	r0, sl
    2b18:	1b76      	subs	r6, r6, r5
    2b1a:	40b7      	lsls	r7, r6
    2b1c:	40e8      	lsrs	r0, r5
    2b1e:	4307      	orrs	r7, r0
    2b20:	4650      	mov	r0, sl
    2b22:	40b0      	lsls	r0, r6
    2b24:	1e46      	subs	r6, r0, #1
    2b26:	41b0      	sbcs	r0, r6
    2b28:	40ec      	lsrs	r4, r5
    2b2a:	4338      	orrs	r0, r7
    2b2c:	1a17      	subs	r7, r2, r0
    2b2e:	42ba      	cmp	r2, r7
    2b30:	4192      	sbcs	r2, r2
    2b32:	1b0c      	subs	r4, r1, r4
    2b34:	4252      	negs	r2, r2
    2b36:	1aa4      	subs	r4, r4, r2
    2b38:	4666      	mov	r6, ip
    2b3a:	4698      	mov	r8, r3
    2b3c:	e68b      	b.n	2856 <__aeabi_dsub+0xb2>
    2b3e:	4664      	mov	r4, ip
    2b40:	4667      	mov	r7, ip
    2b42:	432c      	orrs	r4, r5
    2b44:	d000      	beq.n	2b48 <__aeabi_dsub+0x3a4>
    2b46:	e68b      	b.n	2860 <__aeabi_dsub+0xbc>
    2b48:	2500      	movs	r5, #0
    2b4a:	2600      	movs	r6, #0
    2b4c:	2700      	movs	r7, #0
    2b4e:	e6ea      	b.n	2926 <__aeabi_dsub+0x182>
    2b50:	001e      	movs	r6, r3
    2b52:	e6ad      	b.n	28b0 <__aeabi_dsub+0x10c>
    2b54:	2b1f      	cmp	r3, #31
    2b56:	dc60      	bgt.n	2c1a <__aeabi_dsub+0x476>
    2b58:	2720      	movs	r7, #32
    2b5a:	1af8      	subs	r0, r7, r3
    2b5c:	000f      	movs	r7, r1
    2b5e:	4684      	mov	ip, r0
    2b60:	4087      	lsls	r7, r0
    2b62:	0010      	movs	r0, r2
    2b64:	40d8      	lsrs	r0, r3
    2b66:	4307      	orrs	r7, r0
    2b68:	4660      	mov	r0, ip
    2b6a:	4082      	lsls	r2, r0
    2b6c:	1e50      	subs	r0, r2, #1
    2b6e:	4182      	sbcs	r2, r0
    2b70:	40d9      	lsrs	r1, r3
    2b72:	4317      	orrs	r7, r2
    2b74:	e6f5      	b.n	2962 <__aeabi_dsub+0x1be>
    2b76:	0026      	movs	r6, r4
    2b78:	4650      	mov	r0, sl
    2b7a:	4306      	orrs	r6, r0
    2b7c:	d005      	beq.n	2b8a <__aeabi_dsub+0x3e6>
    2b7e:	43ed      	mvns	r5, r5
    2b80:	2d00      	cmp	r5, #0
    2b82:	d0d3      	beq.n	2b2c <__aeabi_dsub+0x388>
    2b84:	4e90      	ldr	r6, [pc, #576]	; (2dc8 <__aeabi_dsub+0x624>)
    2b86:	45b4      	cmp	ip, r6
    2b88:	d1bd      	bne.n	2b06 <__aeabi_dsub+0x362>
    2b8a:	000c      	movs	r4, r1
    2b8c:	0017      	movs	r7, r2
    2b8e:	4666      	mov	r6, ip
    2b90:	4698      	mov	r8, r3
    2b92:	e68d      	b.n	28b0 <__aeabi_dsub+0x10c>
    2b94:	488c      	ldr	r0, [pc, #560]	; (2dc8 <__aeabi_dsub+0x624>)
    2b96:	4283      	cmp	r3, r0
    2b98:	d00b      	beq.n	2bb2 <__aeabi_dsub+0x40e>
    2b9a:	4663      	mov	r3, ip
    2b9c:	e6d9      	b.n	2952 <__aeabi_dsub+0x1ae>
    2b9e:	2d00      	cmp	r5, #0
    2ba0:	d000      	beq.n	2ba4 <__aeabi_dsub+0x400>
    2ba2:	e096      	b.n	2cd2 <__aeabi_dsub+0x52e>
    2ba4:	0008      	movs	r0, r1
    2ba6:	4310      	orrs	r0, r2
    2ba8:	d100      	bne.n	2bac <__aeabi_dsub+0x408>
    2baa:	e0e2      	b.n	2d72 <__aeabi_dsub+0x5ce>
    2bac:	000c      	movs	r4, r1
    2bae:	0017      	movs	r7, r2
    2bb0:	4698      	mov	r8, r3
    2bb2:	4e85      	ldr	r6, [pc, #532]	; (2dc8 <__aeabi_dsub+0x624>)
    2bb4:	e67c      	b.n	28b0 <__aeabi_dsub+0x10c>
    2bb6:	2500      	movs	r5, #0
    2bb8:	e780      	b.n	2abc <__aeabi_dsub+0x318>
    2bba:	2100      	movs	r1, #0
    2bbc:	e78e      	b.n	2adc <__aeabi_dsub+0x338>
    2bbe:	0023      	movs	r3, r4
    2bc0:	4650      	mov	r0, sl
    2bc2:	4303      	orrs	r3, r0
    2bc4:	2e00      	cmp	r6, #0
    2bc6:	d000      	beq.n	2bca <__aeabi_dsub+0x426>
    2bc8:	e0a8      	b.n	2d1c <__aeabi_dsub+0x578>
    2bca:	2b00      	cmp	r3, #0
    2bcc:	d100      	bne.n	2bd0 <__aeabi_dsub+0x42c>
    2bce:	e0de      	b.n	2d8e <__aeabi_dsub+0x5ea>
    2bd0:	000b      	movs	r3, r1
    2bd2:	4313      	orrs	r3, r2
    2bd4:	d100      	bne.n	2bd8 <__aeabi_dsub+0x434>
    2bd6:	e66b      	b.n	28b0 <__aeabi_dsub+0x10c>
    2bd8:	4452      	add	r2, sl
    2bda:	4552      	cmp	r2, sl
    2bdc:	4180      	sbcs	r0, r0
    2bde:	1864      	adds	r4, r4, r1
    2be0:	4240      	negs	r0, r0
    2be2:	1824      	adds	r4, r4, r0
    2be4:	0017      	movs	r7, r2
    2be6:	0223      	lsls	r3, r4, #8
    2be8:	d400      	bmi.n	2bec <__aeabi_dsub+0x448>
    2bea:	e6fd      	b.n	29e8 <__aeabi_dsub+0x244>
    2bec:	4b77      	ldr	r3, [pc, #476]	; (2dcc <__aeabi_dsub+0x628>)
    2bee:	4666      	mov	r6, ip
    2bf0:	401c      	ands	r4, r3
    2bf2:	e65d      	b.n	28b0 <__aeabi_dsub+0x10c>
    2bf4:	0025      	movs	r5, r4
    2bf6:	4650      	mov	r0, sl
    2bf8:	4305      	orrs	r5, r0
    2bfa:	2e00      	cmp	r6, #0
    2bfc:	d1cf      	bne.n	2b9e <__aeabi_dsub+0x3fa>
    2bfe:	2d00      	cmp	r5, #0
    2c00:	d14f      	bne.n	2ca2 <__aeabi_dsub+0x4fe>
    2c02:	000c      	movs	r4, r1
    2c04:	4314      	orrs	r4, r2
    2c06:	d100      	bne.n	2c0a <__aeabi_dsub+0x466>
    2c08:	e0a0      	b.n	2d4c <__aeabi_dsub+0x5a8>
    2c0a:	000c      	movs	r4, r1
    2c0c:	0017      	movs	r7, r2
    2c0e:	4698      	mov	r8, r3
    2c10:	e64e      	b.n	28b0 <__aeabi_dsub+0x10c>
    2c12:	4666      	mov	r6, ip
    2c14:	2400      	movs	r4, #0
    2c16:	2700      	movs	r7, #0
    2c18:	e685      	b.n	2926 <__aeabi_dsub+0x182>
    2c1a:	001f      	movs	r7, r3
    2c1c:	0008      	movs	r0, r1
    2c1e:	3f20      	subs	r7, #32
    2c20:	40f8      	lsrs	r0, r7
    2c22:	0007      	movs	r7, r0
    2c24:	2b20      	cmp	r3, #32
    2c26:	d100      	bne.n	2c2a <__aeabi_dsub+0x486>
    2c28:	e08e      	b.n	2d48 <__aeabi_dsub+0x5a4>
    2c2a:	2040      	movs	r0, #64	; 0x40
    2c2c:	1ac3      	subs	r3, r0, r3
    2c2e:	4099      	lsls	r1, r3
    2c30:	430a      	orrs	r2, r1
    2c32:	1e51      	subs	r1, r2, #1
    2c34:	418a      	sbcs	r2, r1
    2c36:	2100      	movs	r1, #0
    2c38:	4317      	orrs	r7, r2
    2c3a:	e692      	b.n	2962 <__aeabi_dsub+0x1be>
    2c3c:	2e00      	cmp	r6, #0
    2c3e:	d114      	bne.n	2c6a <__aeabi_dsub+0x4c6>
    2c40:	0026      	movs	r6, r4
    2c42:	4650      	mov	r0, sl
    2c44:	4306      	orrs	r6, r0
    2c46:	d062      	beq.n	2d0e <__aeabi_dsub+0x56a>
    2c48:	43db      	mvns	r3, r3
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d15c      	bne.n	2d08 <__aeabi_dsub+0x564>
    2c4e:	1887      	adds	r7, r0, r2
    2c50:	4297      	cmp	r7, r2
    2c52:	4192      	sbcs	r2, r2
    2c54:	1864      	adds	r4, r4, r1
    2c56:	4252      	negs	r2, r2
    2c58:	18a4      	adds	r4, r4, r2
    2c5a:	4666      	mov	r6, ip
    2c5c:	e687      	b.n	296e <__aeabi_dsub+0x1ca>
    2c5e:	4650      	mov	r0, sl
    2c60:	4320      	orrs	r0, r4
    2c62:	1e44      	subs	r4, r0, #1
    2c64:	41a0      	sbcs	r0, r4
    2c66:	2400      	movs	r4, #0
    2c68:	e760      	b.n	2b2c <__aeabi_dsub+0x388>
    2c6a:	4e57      	ldr	r6, [pc, #348]	; (2dc8 <__aeabi_dsub+0x624>)
    2c6c:	45b4      	cmp	ip, r6
    2c6e:	d04e      	beq.n	2d0e <__aeabi_dsub+0x56a>
    2c70:	2680      	movs	r6, #128	; 0x80
    2c72:	0436      	lsls	r6, r6, #16
    2c74:	425b      	negs	r3, r3
    2c76:	4334      	orrs	r4, r6
    2c78:	2b38      	cmp	r3, #56	; 0x38
    2c7a:	dd00      	ble.n	2c7e <__aeabi_dsub+0x4da>
    2c7c:	e07f      	b.n	2d7e <__aeabi_dsub+0x5da>
    2c7e:	2b1f      	cmp	r3, #31
    2c80:	dd00      	ble.n	2c84 <__aeabi_dsub+0x4e0>
    2c82:	e08b      	b.n	2d9c <__aeabi_dsub+0x5f8>
    2c84:	2620      	movs	r6, #32
    2c86:	0027      	movs	r7, r4
    2c88:	4650      	mov	r0, sl
    2c8a:	1af6      	subs	r6, r6, r3
    2c8c:	40b7      	lsls	r7, r6
    2c8e:	40d8      	lsrs	r0, r3
    2c90:	4307      	orrs	r7, r0
    2c92:	4650      	mov	r0, sl
    2c94:	40b0      	lsls	r0, r6
    2c96:	1e46      	subs	r6, r0, #1
    2c98:	41b0      	sbcs	r0, r6
    2c9a:	4307      	orrs	r7, r0
    2c9c:	40dc      	lsrs	r4, r3
    2c9e:	18bf      	adds	r7, r7, r2
    2ca0:	e7d6      	b.n	2c50 <__aeabi_dsub+0x4ac>
    2ca2:	000d      	movs	r5, r1
    2ca4:	4315      	orrs	r5, r2
    2ca6:	d100      	bne.n	2caa <__aeabi_dsub+0x506>
    2ca8:	e602      	b.n	28b0 <__aeabi_dsub+0x10c>
    2caa:	4650      	mov	r0, sl
    2cac:	1a80      	subs	r0, r0, r2
    2cae:	4582      	cmp	sl, r0
    2cb0:	41bf      	sbcs	r7, r7
    2cb2:	1a65      	subs	r5, r4, r1
    2cb4:	427f      	negs	r7, r7
    2cb6:	1bed      	subs	r5, r5, r7
    2cb8:	4684      	mov	ip, r0
    2cba:	0228      	lsls	r0, r5, #8
    2cbc:	d400      	bmi.n	2cc0 <__aeabi_dsub+0x51c>
    2cbe:	e68d      	b.n	29dc <__aeabi_dsub+0x238>
    2cc0:	4650      	mov	r0, sl
    2cc2:	1a17      	subs	r7, r2, r0
    2cc4:	42ba      	cmp	r2, r7
    2cc6:	4192      	sbcs	r2, r2
    2cc8:	1b0c      	subs	r4, r1, r4
    2cca:	4252      	negs	r2, r2
    2ccc:	1aa4      	subs	r4, r4, r2
    2cce:	4698      	mov	r8, r3
    2cd0:	e5ee      	b.n	28b0 <__aeabi_dsub+0x10c>
    2cd2:	000d      	movs	r5, r1
    2cd4:	4315      	orrs	r5, r2
    2cd6:	d100      	bne.n	2cda <__aeabi_dsub+0x536>
    2cd8:	e76b      	b.n	2bb2 <__aeabi_dsub+0x40e>
    2cda:	4650      	mov	r0, sl
    2cdc:	0767      	lsls	r7, r4, #29
    2cde:	08c0      	lsrs	r0, r0, #3
    2ce0:	4307      	orrs	r7, r0
    2ce2:	2080      	movs	r0, #128	; 0x80
    2ce4:	08e4      	lsrs	r4, r4, #3
    2ce6:	0300      	lsls	r0, r0, #12
    2ce8:	4204      	tst	r4, r0
    2cea:	d007      	beq.n	2cfc <__aeabi_dsub+0x558>
    2cec:	08cd      	lsrs	r5, r1, #3
    2cee:	4205      	tst	r5, r0
    2cf0:	d104      	bne.n	2cfc <__aeabi_dsub+0x558>
    2cf2:	002c      	movs	r4, r5
    2cf4:	4698      	mov	r8, r3
    2cf6:	08d7      	lsrs	r7, r2, #3
    2cf8:	0749      	lsls	r1, r1, #29
    2cfa:	430f      	orrs	r7, r1
    2cfc:	0f7b      	lsrs	r3, r7, #29
    2cfe:	00e4      	lsls	r4, r4, #3
    2d00:	431c      	orrs	r4, r3
    2d02:	00ff      	lsls	r7, r7, #3
    2d04:	4e30      	ldr	r6, [pc, #192]	; (2dc8 <__aeabi_dsub+0x624>)
    2d06:	e5d3      	b.n	28b0 <__aeabi_dsub+0x10c>
    2d08:	4e2f      	ldr	r6, [pc, #188]	; (2dc8 <__aeabi_dsub+0x624>)
    2d0a:	45b4      	cmp	ip, r6
    2d0c:	d1b4      	bne.n	2c78 <__aeabi_dsub+0x4d4>
    2d0e:	000c      	movs	r4, r1
    2d10:	0017      	movs	r7, r2
    2d12:	4666      	mov	r6, ip
    2d14:	e5cc      	b.n	28b0 <__aeabi_dsub+0x10c>
    2d16:	2700      	movs	r7, #0
    2d18:	2400      	movs	r4, #0
    2d1a:	e5e8      	b.n	28ee <__aeabi_dsub+0x14a>
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d039      	beq.n	2d94 <__aeabi_dsub+0x5f0>
    2d20:	000b      	movs	r3, r1
    2d22:	4313      	orrs	r3, r2
    2d24:	d100      	bne.n	2d28 <__aeabi_dsub+0x584>
    2d26:	e744      	b.n	2bb2 <__aeabi_dsub+0x40e>
    2d28:	08c0      	lsrs	r0, r0, #3
    2d2a:	0767      	lsls	r7, r4, #29
    2d2c:	4307      	orrs	r7, r0
    2d2e:	2080      	movs	r0, #128	; 0x80
    2d30:	08e4      	lsrs	r4, r4, #3
    2d32:	0300      	lsls	r0, r0, #12
    2d34:	4204      	tst	r4, r0
    2d36:	d0e1      	beq.n	2cfc <__aeabi_dsub+0x558>
    2d38:	08cb      	lsrs	r3, r1, #3
    2d3a:	4203      	tst	r3, r0
    2d3c:	d1de      	bne.n	2cfc <__aeabi_dsub+0x558>
    2d3e:	08d7      	lsrs	r7, r2, #3
    2d40:	0749      	lsls	r1, r1, #29
    2d42:	430f      	orrs	r7, r1
    2d44:	001c      	movs	r4, r3
    2d46:	e7d9      	b.n	2cfc <__aeabi_dsub+0x558>
    2d48:	2100      	movs	r1, #0
    2d4a:	e771      	b.n	2c30 <__aeabi_dsub+0x48c>
    2d4c:	2500      	movs	r5, #0
    2d4e:	2700      	movs	r7, #0
    2d50:	e5e9      	b.n	2926 <__aeabi_dsub+0x182>
    2d52:	002e      	movs	r6, r5
    2d54:	0027      	movs	r7, r4
    2d56:	3e20      	subs	r6, #32
    2d58:	40f7      	lsrs	r7, r6
    2d5a:	2d20      	cmp	r5, #32
    2d5c:	d02f      	beq.n	2dbe <__aeabi_dsub+0x61a>
    2d5e:	2640      	movs	r6, #64	; 0x40
    2d60:	1b75      	subs	r5, r6, r5
    2d62:	40ac      	lsls	r4, r5
    2d64:	4650      	mov	r0, sl
    2d66:	4320      	orrs	r0, r4
    2d68:	1e44      	subs	r4, r0, #1
    2d6a:	41a0      	sbcs	r0, r4
    2d6c:	2400      	movs	r4, #0
    2d6e:	4338      	orrs	r0, r7
    2d70:	e6dc      	b.n	2b2c <__aeabi_dsub+0x388>
    2d72:	2480      	movs	r4, #128	; 0x80
    2d74:	2500      	movs	r5, #0
    2d76:	0324      	lsls	r4, r4, #12
    2d78:	4e13      	ldr	r6, [pc, #76]	; (2dc8 <__aeabi_dsub+0x624>)
    2d7a:	2700      	movs	r7, #0
    2d7c:	e5d3      	b.n	2926 <__aeabi_dsub+0x182>
    2d7e:	4650      	mov	r0, sl
    2d80:	4320      	orrs	r0, r4
    2d82:	0007      	movs	r7, r0
    2d84:	1e78      	subs	r0, r7, #1
    2d86:	4187      	sbcs	r7, r0
    2d88:	2400      	movs	r4, #0
    2d8a:	18bf      	adds	r7, r7, r2
    2d8c:	e760      	b.n	2c50 <__aeabi_dsub+0x4ac>
    2d8e:	000c      	movs	r4, r1
    2d90:	0017      	movs	r7, r2
    2d92:	e58d      	b.n	28b0 <__aeabi_dsub+0x10c>
    2d94:	000c      	movs	r4, r1
    2d96:	0017      	movs	r7, r2
    2d98:	4e0b      	ldr	r6, [pc, #44]	; (2dc8 <__aeabi_dsub+0x624>)
    2d9a:	e589      	b.n	28b0 <__aeabi_dsub+0x10c>
    2d9c:	001e      	movs	r6, r3
    2d9e:	0027      	movs	r7, r4
    2da0:	3e20      	subs	r6, #32
    2da2:	40f7      	lsrs	r7, r6
    2da4:	2b20      	cmp	r3, #32
    2da6:	d00c      	beq.n	2dc2 <__aeabi_dsub+0x61e>
    2da8:	2640      	movs	r6, #64	; 0x40
    2daa:	1af3      	subs	r3, r6, r3
    2dac:	409c      	lsls	r4, r3
    2dae:	4650      	mov	r0, sl
    2db0:	4320      	orrs	r0, r4
    2db2:	1e44      	subs	r4, r0, #1
    2db4:	41a0      	sbcs	r0, r4
    2db6:	4307      	orrs	r7, r0
    2db8:	2400      	movs	r4, #0
    2dba:	18bf      	adds	r7, r7, r2
    2dbc:	e748      	b.n	2c50 <__aeabi_dsub+0x4ac>
    2dbe:	2400      	movs	r4, #0
    2dc0:	e7d0      	b.n	2d64 <__aeabi_dsub+0x5c0>
    2dc2:	2400      	movs	r4, #0
    2dc4:	e7f3      	b.n	2dae <__aeabi_dsub+0x60a>
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	000007ff 	.word	0x000007ff
    2dcc:	ff7fffff 	.word	0xff7fffff

00002dd0 <__aeabi_d2iz>:
    2dd0:	b530      	push	{r4, r5, lr}
    2dd2:	4d13      	ldr	r5, [pc, #76]	; (2e20 <__aeabi_d2iz+0x50>)
    2dd4:	030a      	lsls	r2, r1, #12
    2dd6:	004b      	lsls	r3, r1, #1
    2dd8:	0b12      	lsrs	r2, r2, #12
    2dda:	0d5b      	lsrs	r3, r3, #21
    2ddc:	0fc9      	lsrs	r1, r1, #31
    2dde:	2400      	movs	r4, #0
    2de0:	42ab      	cmp	r3, r5
    2de2:	dd10      	ble.n	2e06 <__aeabi_d2iz+0x36>
    2de4:	4c0f      	ldr	r4, [pc, #60]	; (2e24 <__aeabi_d2iz+0x54>)
    2de6:	42a3      	cmp	r3, r4
    2de8:	dc0f      	bgt.n	2e0a <__aeabi_d2iz+0x3a>
    2dea:	2480      	movs	r4, #128	; 0x80
    2dec:	4d0e      	ldr	r5, [pc, #56]	; (2e28 <__aeabi_d2iz+0x58>)
    2dee:	0364      	lsls	r4, r4, #13
    2df0:	4322      	orrs	r2, r4
    2df2:	1aed      	subs	r5, r5, r3
    2df4:	2d1f      	cmp	r5, #31
    2df6:	dd0b      	ble.n	2e10 <__aeabi_d2iz+0x40>
    2df8:	480c      	ldr	r0, [pc, #48]	; (2e2c <__aeabi_d2iz+0x5c>)
    2dfa:	1ac3      	subs	r3, r0, r3
    2dfc:	40da      	lsrs	r2, r3
    2dfe:	4254      	negs	r4, r2
    2e00:	2900      	cmp	r1, #0
    2e02:	d100      	bne.n	2e06 <__aeabi_d2iz+0x36>
    2e04:	0014      	movs	r4, r2
    2e06:	0020      	movs	r0, r4
    2e08:	bd30      	pop	{r4, r5, pc}
    2e0a:	4b09      	ldr	r3, [pc, #36]	; (2e30 <__aeabi_d2iz+0x60>)
    2e0c:	18cc      	adds	r4, r1, r3
    2e0e:	e7fa      	b.n	2e06 <__aeabi_d2iz+0x36>
    2e10:	4c08      	ldr	r4, [pc, #32]	; (2e34 <__aeabi_d2iz+0x64>)
    2e12:	40e8      	lsrs	r0, r5
    2e14:	46a4      	mov	ip, r4
    2e16:	4463      	add	r3, ip
    2e18:	409a      	lsls	r2, r3
    2e1a:	4302      	orrs	r2, r0
    2e1c:	e7ef      	b.n	2dfe <__aeabi_d2iz+0x2e>
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	000003fe 	.word	0x000003fe
    2e24:	0000041d 	.word	0x0000041d
    2e28:	00000433 	.word	0x00000433
    2e2c:	00000413 	.word	0x00000413
    2e30:	7fffffff 	.word	0x7fffffff
    2e34:	fffffbed 	.word	0xfffffbed

00002e38 <__aeabi_ui2d>:
    2e38:	b510      	push	{r4, lr}
    2e3a:	1e04      	subs	r4, r0, #0
    2e3c:	d028      	beq.n	2e90 <__aeabi_ui2d+0x58>
    2e3e:	f000 f833 	bl	2ea8 <__clzsi2>
    2e42:	4b15      	ldr	r3, [pc, #84]	; (2e98 <__aeabi_ui2d+0x60>)
    2e44:	4a15      	ldr	r2, [pc, #84]	; (2e9c <__aeabi_ui2d+0x64>)
    2e46:	1a1b      	subs	r3, r3, r0
    2e48:	1ad2      	subs	r2, r2, r3
    2e4a:	2a1f      	cmp	r2, #31
    2e4c:	dd15      	ble.n	2e7a <__aeabi_ui2d+0x42>
    2e4e:	4a14      	ldr	r2, [pc, #80]	; (2ea0 <__aeabi_ui2d+0x68>)
    2e50:	1ad2      	subs	r2, r2, r3
    2e52:	4094      	lsls	r4, r2
    2e54:	2200      	movs	r2, #0
    2e56:	0324      	lsls	r4, r4, #12
    2e58:	055b      	lsls	r3, r3, #21
    2e5a:	0b24      	lsrs	r4, r4, #12
    2e5c:	0d5b      	lsrs	r3, r3, #21
    2e5e:	2100      	movs	r1, #0
    2e60:	0010      	movs	r0, r2
    2e62:	0324      	lsls	r4, r4, #12
    2e64:	0d0a      	lsrs	r2, r1, #20
    2e66:	0b24      	lsrs	r4, r4, #12
    2e68:	0512      	lsls	r2, r2, #20
    2e6a:	4322      	orrs	r2, r4
    2e6c:	4c0d      	ldr	r4, [pc, #52]	; (2ea4 <__aeabi_ui2d+0x6c>)
    2e6e:	051b      	lsls	r3, r3, #20
    2e70:	4022      	ands	r2, r4
    2e72:	4313      	orrs	r3, r2
    2e74:	005b      	lsls	r3, r3, #1
    2e76:	0859      	lsrs	r1, r3, #1
    2e78:	bd10      	pop	{r4, pc}
    2e7a:	0021      	movs	r1, r4
    2e7c:	4091      	lsls	r1, r2
    2e7e:	000a      	movs	r2, r1
    2e80:	210b      	movs	r1, #11
    2e82:	1a08      	subs	r0, r1, r0
    2e84:	40c4      	lsrs	r4, r0
    2e86:	055b      	lsls	r3, r3, #21
    2e88:	0324      	lsls	r4, r4, #12
    2e8a:	0b24      	lsrs	r4, r4, #12
    2e8c:	0d5b      	lsrs	r3, r3, #21
    2e8e:	e7e6      	b.n	2e5e <__aeabi_ui2d+0x26>
    2e90:	2300      	movs	r3, #0
    2e92:	2400      	movs	r4, #0
    2e94:	2200      	movs	r2, #0
    2e96:	e7e2      	b.n	2e5e <__aeabi_ui2d+0x26>
    2e98:	0000041e 	.word	0x0000041e
    2e9c:	00000433 	.word	0x00000433
    2ea0:	00000413 	.word	0x00000413
    2ea4:	800fffff 	.word	0x800fffff

00002ea8 <__clzsi2>:
    2ea8:	211c      	movs	r1, #28
    2eaa:	2301      	movs	r3, #1
    2eac:	041b      	lsls	r3, r3, #16
    2eae:	4298      	cmp	r0, r3
    2eb0:	d301      	bcc.n	2eb6 <__clzsi2+0xe>
    2eb2:	0c00      	lsrs	r0, r0, #16
    2eb4:	3910      	subs	r1, #16
    2eb6:	0a1b      	lsrs	r3, r3, #8
    2eb8:	4298      	cmp	r0, r3
    2eba:	d301      	bcc.n	2ec0 <__clzsi2+0x18>
    2ebc:	0a00      	lsrs	r0, r0, #8
    2ebe:	3908      	subs	r1, #8
    2ec0:	091b      	lsrs	r3, r3, #4
    2ec2:	4298      	cmp	r0, r3
    2ec4:	d301      	bcc.n	2eca <__clzsi2+0x22>
    2ec6:	0900      	lsrs	r0, r0, #4
    2ec8:	3904      	subs	r1, #4
    2eca:	a202      	add	r2, pc, #8	; (adr r2, 2ed4 <__clzsi2+0x2c>)
    2ecc:	5c10      	ldrb	r0, [r2, r0]
    2ece:	1840      	adds	r0, r0, r1
    2ed0:	4770      	bx	lr
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	02020304 	.word	0x02020304
    2ed8:	01010101 	.word	0x01010101
	...

00002ee4 <__libc_init_array>:
    2ee4:	b570      	push	{r4, r5, r6, lr}
    2ee6:	2600      	movs	r6, #0
    2ee8:	4d0c      	ldr	r5, [pc, #48]	; (2f1c <__libc_init_array+0x38>)
    2eea:	4c0d      	ldr	r4, [pc, #52]	; (2f20 <__libc_init_array+0x3c>)
    2eec:	1b64      	subs	r4, r4, r5
    2eee:	10a4      	asrs	r4, r4, #2
    2ef0:	42a6      	cmp	r6, r4
    2ef2:	d109      	bne.n	2f08 <__libc_init_array+0x24>
    2ef4:	2600      	movs	r6, #0
    2ef6:	f000 f889 	bl	300c <_init>
    2efa:	4d0a      	ldr	r5, [pc, #40]	; (2f24 <__libc_init_array+0x40>)
    2efc:	4c0a      	ldr	r4, [pc, #40]	; (2f28 <__libc_init_array+0x44>)
    2efe:	1b64      	subs	r4, r4, r5
    2f00:	10a4      	asrs	r4, r4, #2
    2f02:	42a6      	cmp	r6, r4
    2f04:	d105      	bne.n	2f12 <__libc_init_array+0x2e>
    2f06:	bd70      	pop	{r4, r5, r6, pc}
    2f08:	00b3      	lsls	r3, r6, #2
    2f0a:	58eb      	ldr	r3, [r5, r3]
    2f0c:	4798      	blx	r3
    2f0e:	3601      	adds	r6, #1
    2f10:	e7ee      	b.n	2ef0 <__libc_init_array+0xc>
    2f12:	00b3      	lsls	r3, r6, #2
    2f14:	58eb      	ldr	r3, [r5, r3]
    2f16:	4798      	blx	r3
    2f18:	3601      	adds	r6, #1
    2f1a:	e7f2      	b.n	2f02 <__libc_init_array+0x1e>
    2f1c:	00003018 	.word	0x00003018
    2f20:	00003018 	.word	0x00003018
    2f24:	00003018 	.word	0x00003018
    2f28:	0000301c 	.word	0x0000301c
    2f2c:	42000800 	.word	0x42000800
    2f30:	42000c00 	.word	0x42000c00
    2f34:	42001000 	.word	0x42001000
    2f38:	42001400 	.word	0x42001400
    2f3c:	42001800 	.word	0x42001800
    2f40:	42001c00 	.word	0x42001c00
    2f44:	00000caa 	.word	0x00000caa
    2f48:	00000ca6 	.word	0x00000ca6
    2f4c:	00000ca6 	.word	0x00000ca6
    2f50:	00000d0c 	.word	0x00000d0c
    2f54:	00000d0c 	.word	0x00000d0c
    2f58:	00000cbe 	.word	0x00000cbe
    2f5c:	00000cb0 	.word	0x00000cb0
    2f60:	00000cc4 	.word	0x00000cc4
    2f64:	00000cfa 	.word	0x00000cfa
    2f68:	00000d94 	.word	0x00000d94
    2f6c:	00000d74 	.word	0x00000d74
    2f70:	00000d74 	.word	0x00000d74
    2f74:	00000e00 	.word	0x00000e00
    2f78:	00000d86 	.word	0x00000d86
    2f7c:	00000da2 	.word	0x00000da2
    2f80:	00000d78 	.word	0x00000d78
    2f84:	00000db0 	.word	0x00000db0
    2f88:	00000df0 	.word	0x00000df0
    2f8c:	00001e34 	.word	0x00001e34
    2f90:	00001e16 	.word	0x00001e16
    2f94:	00001dd0 	.word	0x00001dd0
    2f98:	00001cee 	.word	0x00001cee
    2f9c:	00001dd0 	.word	0x00001dd0
    2fa0:	00001e08 	.word	0x00001e08
    2fa4:	00001dd0 	.word	0x00001dd0
    2fa8:	00001cee 	.word	0x00001cee
    2fac:	00001e16 	.word	0x00001e16
    2fb0:	00001e16 	.word	0x00001e16
    2fb4:	00001e08 	.word	0x00001e08
    2fb8:	00001cee 	.word	0x00001cee
    2fbc:	00001ce6 	.word	0x00001ce6
    2fc0:	00001ce6 	.word	0x00001ce6
    2fc4:	00001ce6 	.word	0x00001ce6
    2fc8:	0000204c 	.word	0x0000204c
    2fcc:	00002494 	.word	0x00002494
    2fd0:	00002354 	.word	0x00002354
    2fd4:	00002354 	.word	0x00002354
    2fd8:	00002350 	.word	0x00002350
    2fdc:	0000246c 	.word	0x0000246c
    2fe0:	0000246c 	.word	0x0000246c
    2fe4:	0000245e 	.word	0x0000245e
    2fe8:	00002350 	.word	0x00002350
    2fec:	0000246c 	.word	0x0000246c
    2ff0:	0000245e 	.word	0x0000245e
    2ff4:	0000246c 	.word	0x0000246c
    2ff8:	00002350 	.word	0x00002350
    2ffc:	00002474 	.word	0x00002474
    3000:	00002474 	.word	0x00002474
    3004:	00002474 	.word	0x00002474
    3008:	00002678 	.word	0x00002678

0000300c <_init>:
    300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3012:	bc08      	pop	{r3}
    3014:	469e      	mov	lr, r3
    3016:	4770      	bx	lr

00003018 <__init_array_start>:
    3018:	000000dd 	.word	0x000000dd

0000301c <_fini>:
    301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3022:	bc08      	pop	{r3}
    3024:	469e      	mov	lr, r3
    3026:	4770      	bx	lr

00003028 <__fini_array_start>:
    3028:	000000b5 	.word	0x000000b5
